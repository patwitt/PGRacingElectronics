
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000266e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000042b0  080268e8  080268e8  000368e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a53c2  0802ab98  0802ab98  0003ab98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000f8  080cff5c  080cff5c  000dff5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000cc  080d0054  080d0054  000e0054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080d0120  080d0120  001898c8  2**0
                  CONTENTS
  7 .ARM          00000008  080d0120  080d0120  000e0120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080d0128  080d0128  001898c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000030  080d0128  080d0128  000e0128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080d0158  080d0158  000e0158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000dc  20000000  080d0160  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00056e88  200000dc  080d023c  000f00dc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20056f64  080d023c  000f6f64  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  001898c8  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 000898c8  90000000  90000000  00100000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000d6292  00000000  00000000  001898f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000172b5  00000000  00000000  0025fb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003fe0  00000000  00000000  00276e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000039c0  00000000  00000000  0027ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00039c43  00000000  00000000  0027e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004d9c3  00000000  00000000  002b8423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012eef0  00000000  00000000  00305de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  00434cd6  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00011348  00000000  00000000  00434da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000dc 	.word	0x200000dc
 800021c:	00000000 	.word	0x00000000
 8000220:	080268d0 	.word	0x080268d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000e0 	.word	0x200000e0
 800023c:	080268d0 	.word	0x080268d0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_TIM_PWM_PulseFinishedCallback>:
#define LED_N			15

volatile uint16_t leds[RESET_LEN + 24 * LED_N];

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80005f0:	2100      	movs	r1, #0
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f00e feaa 	bl	800f34c <HAL_TIM_PWM_Stop_DMA>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <leds_init>:

void leds_init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
  int i;
  for (i = 0; i < 24 * LED_N; i++)
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	e007      	b.n	800061c <leds_init+0x1c>
	  leds[i] = BIT_0_TIME;
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <leds_init+0x60>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	212b      	movs	r1, #43	; 0x2b
 8000612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (i = 0; i < 24 * LED_N; i++)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000622:	dbf3      	blt.n	800060c <leds_init+0xc>

  for (i = 0; i < RESET_LEN; i++)
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	e009      	b.n	800063e <leds_init+0x3e>
	  leds[i + LED_N * 24] = 0;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <leds_init+0x60>)
 8000632:	2100      	movs	r1, #0
 8000634:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (i = 0; i < RESET_LEN; i++)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b27      	cmp	r3, #39	; 0x27
 8000642:	ddf2      	ble.n	800062a <leds_init+0x2a>

 //status = HAL_TIM_Base_Start(&htim3);


  status  = HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, leds,RESET_LEN + 24 * LED_N);
 8000644:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000648:	4a05      	ldr	r2, [pc, #20]	; (8000660 <leds_init+0x60>)
 800064a:	2100      	movs	r1, #0
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <leds_init+0x64>)
 800064e:	f00e fc71 	bl	800ef34 <HAL_TIM_PWM_Start_DMA>
 8000652:	4603      	mov	r3, r0
 8000654:	70fb      	strb	r3, [r7, #3]
  //HAL_TIMEx_PWMN_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, sizeof(leds)/sizeof(uint16_t));
  //HAL_Delay(1000);
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200567d8 	.word	0x200567d8
 8000664:	20056e04 	.word	0x20056e04

08000668 <set_green>:

void set_green(int num, bool light){
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < num; i++){
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	e01c      	b.n	80006b4 <set_green+0x4c>
		if (light == true) leds[i*24 + 2] = BIT_1_TIME;
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00a      	beq.n	8000696 <set_green+0x2e>
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	4613      	mov	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	3302      	adds	r3, #2
 800068c:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <set_green+0x64>)
 800068e:	2156      	movs	r1, #86	; 0x56
 8000690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000694:	e00b      	b.n	80006ae <set_green+0x46>
		else leds[(4-i)*24 + 2] = BIT_0_TIME;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1c3 0204 	rsb	r2, r3, #4
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	3302      	adds	r3, #2
 80006a6:	4a09      	ldr	r2, [pc, #36]	; (80006cc <set_green+0x64>)
 80006a8:	212b      	movs	r1, #43	; 0x2b
 80006aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < num; i++){
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbde      	blt.n	800067a <set_green+0x12>
	}
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	200567d8 	.word	0x200567d8

080006d0 <set_red>:
void set_red(int num, bool light){
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < num; i++){
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	e01d      	b.n	800071e <set_red+0x4e>
		if (light == true) leds[(5+i)*24 + 10] = BIT_1_TIME;
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00b      	beq.n	8000700 <set_red+0x30>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	1d5a      	adds	r2, r3, #5
 80006ec:	4613      	mov	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	330a      	adds	r3, #10
 80006f6:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <set_red+0x64>)
 80006f8:	2156      	movs	r1, #86	; 0x56
 80006fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006fe:	e00b      	b.n	8000718 <set_red+0x48>
		else leds[(9-i)*24 + 10] = BIT_0_TIME;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f1c3 0209 	rsb	r2, r3, #9
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	330a      	adds	r3, #10
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <set_red+0x64>)
 8000712:	212b      	movs	r1, #43	; 0x2b
 8000714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < num; i++){
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	429a      	cmp	r2, r3
 8000724:	dbdd      	blt.n	80006e2 <set_red+0x12>
	}
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	200567d8 	.word	0x200567d8

08000738 <set_purple>:
void set_purple(int num, bool light){
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < num; i++){
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	e036      	b.n	80007b8 <set_purple+0x80>
		if (light == true){
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d018      	beq.n	8000782 <set_purple+0x4a>
			leds[(10+i)*24 + 10] = BIT_1_TIME;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f103 020a 	add.w	r2, r3, #10
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	330a      	adds	r3, #10
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <set_purple+0x98>)
 8000762:	2156      	movs	r1, #86	; 0x56
 8000764:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			leds[(10+i)*24 + 16] = BIT_1_TIME;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f103 020a 	add.w	r2, r3, #10
 800076e:	4613      	mov	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4413      	add	r3, r2
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	3310      	adds	r3, #16
 8000778:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <set_purple+0x98>)
 800077a:	2156      	movs	r1, #86	; 0x56
 800077c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000780:	e017      	b.n	80007b2 <set_purple+0x7a>
		} else {
			leds[(14-i)*24 + 10] = BIT_0_TIME;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1c3 020e 	rsb	r2, r3, #14
 8000788:	4613      	mov	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	4413      	add	r3, r2
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	330a      	adds	r3, #10
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <set_purple+0x98>)
 8000794:	212b      	movs	r1, #43	; 0x2b
 8000796:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			leds[(14-i)*24 + 16] = BIT_0_TIME;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f1c3 020e 	rsb	r2, r3, #14
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	3310      	adds	r3, #16
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <set_purple+0x98>)
 80007ac:	212b      	movs	r1, #43	; 0x2b
 80007ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < num; i++){
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbc4      	blt.n	800074a <set_purple+0x12>
		}
	}
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	200567d8 	.word	0x200567d8

080007d4 <set_all>:

void set_all(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	set_green(5,true);
 80007d8:	2101      	movs	r1, #1
 80007da:	2005      	movs	r0, #5
 80007dc:	f7ff ff44 	bl	8000668 <set_green>
	set_red(5,true);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2005      	movs	r0, #5
 80007e4:	f7ff ff74 	bl	80006d0 <set_red>
	set_purple(5,true);
 80007e8:	2101      	movs	r1, #1
 80007ea:	2005      	movs	r0, #5
 80007ec:	f7ff ffa4 	bl	8000738 <set_purple>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <clear_all>:

void clear_all(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	set_green(5,false);
 80007f8:	2100      	movs	r1, #0
 80007fa:	2005      	movs	r0, #5
 80007fc:	f7ff ff34 	bl	8000668 <set_green>
	set_red(5,false);
 8000800:	2100      	movs	r1, #0
 8000802:	2005      	movs	r0, #5
 8000804:	f7ff ff64 	bl	80006d0 <set_red>
	set_purple(5,false);
 8000808:	2100      	movs	r1, #0
 800080a:	2005      	movs	r0, #5
 800080c:	f7ff ff94 	bl	8000738 <set_purple>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <set_one_green>:

void set_one_green(int num){
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	leds[RESET_LEN + num*24 + 4] = BIT_1_TIME;
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	332c      	adds	r3, #44	; 0x2c
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <set_one_green+0x28>)
 800082a:	2156      	movs	r1, #86	; 0x56
 800082c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	200567d8 	.word	0x200567d8

08000840 <set_one_red>:

void set_one_red(int num){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	leds[RESET_LEN + num*24 + 12] = BIT_1_TIME;
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	3334      	adds	r3, #52	; 0x34
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <set_one_red+0x28>)
 8000856:	2156      	movs	r1, #86	; 0x56
 8000858:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	200567d8 	.word	0x200567d8

0800086c <set_one_purple>:

void set_one_purple(int num){
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	leds[RESET_LEN + num*24 + 12] = BIT_1_TIME;
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	4613      	mov	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	3334      	adds	r3, #52	; 0x34
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <set_one_purple+0x3c>)
 8000882:	2156      	movs	r1, #86	; 0x56
 8000884:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	leds[RESET_LEN + num*24 + 20] = BIT_1_TIME;
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	4613      	mov	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4413      	add	r3, r2
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	333c      	adds	r3, #60	; 0x3c
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <set_one_purple+0x3c>)
 8000896:	2156      	movs	r1, #86	; 0x56
 8000898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	200567d8 	.word	0x200567d8

080008ac <clear_one>:

void clear_one(int num){
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	leds[RESET_LEN + num*24 + 4] = BIT_0_TIME;
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4613      	mov	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	332c      	adds	r3, #44	; 0x2c
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <clear_one+0x50>)
 80008c2:	212b      	movs	r1, #43	; 0x2b
 80008c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	leds[RESET_LEN + num*24 + 12] = BIT_0_TIME;
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4613      	mov	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4413      	add	r3, r2
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	3334      	adds	r3, #52	; 0x34
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <clear_one+0x50>)
 80008d6:	212b      	movs	r1, #43	; 0x2b
 80008d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	leds[RESET_LEN + num*24 + 20] = BIT_0_TIME;
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4613      	mov	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	333c      	adds	r3, #60	; 0x3c
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <clear_one+0x50>)
 80008ea:	212b      	movs	r1, #43	; 0x2b
 80008ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	200567d8 	.word	0x200567d8

08000900 <set_leds>:

void set_leds(int rpm, int lowest){
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, sizeof(leds));
 800090a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800090e:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <set_leds+0xb8>)
 8000910:	2100      	movs	r1, #0
 8000912:	482a      	ldr	r0, [pc, #168]	; (80009bc <set_leds+0xbc>)
 8000914:	f00e fb0e 	bl	800ef34 <HAL_TIM_PWM_Start_DMA>
	int active = ceil((rpm-lowest) / (12000.0F - lowest) * LED_N);
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	ee07 3a90 	vmov	s15, r3
 8000922:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	ee07 3a90 	vmov	s15, r3
 800092c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000930:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80009c0 <set_leds+0xc0>
 8000934:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800093c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000948:	eeb0 0b47 	vmov.f64	d0, d7
 800094c:	f024 fc2c 	bl	80251a8 <ceil>
 8000950:	eeb0 7b40 	vmov.f64	d7, d0
 8000954:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000958:	ee17 3a90 	vmov	r3, s15
 800095c:	60fb      	str	r3, [r7, #12]
	if (active < 0 ) active = 0;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	da01      	bge.n	8000968 <set_leds+0x68>
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < LED_N; i++){
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	e01b      	b.n	80009a6 <set_leds+0xa6>
		if (i < active){
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	429a      	cmp	r2, r3
 8000974:	da11      	bge.n	800099a <set_leds+0x9a>
			if (i < LED_N * 0.33){
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	2b04      	cmp	r3, #4
 800097a:	dc03      	bgt.n	8000984 <set_leds+0x84>
				set_one_green(i);
 800097c:	68b8      	ldr	r0, [r7, #8]
 800097e:	f7ff ff49 	bl	8000814 <set_one_green>
 8000982:	e00d      	b.n	80009a0 <set_leds+0xa0>
			}
			else if (i < LED_N*0.66){
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	2b09      	cmp	r3, #9
 8000988:	dc03      	bgt.n	8000992 <set_leds+0x92>
				set_one_red(i);
 800098a:	68b8      	ldr	r0, [r7, #8]
 800098c:	f7ff ff58 	bl	8000840 <set_one_red>
 8000990:	e006      	b.n	80009a0 <set_leds+0xa0>
			}
			else {
				set_one_purple(i);
 8000992:	68b8      	ldr	r0, [r7, #8]
 8000994:	f7ff ff6a 	bl	800086c <set_one_purple>
 8000998:	e002      	b.n	80009a0 <set_leds+0xa0>
			}
		} else {
			clear_one(i);
 800099a:	68b8      	ldr	r0, [r7, #8]
 800099c:	f7ff ff86 	bl	80008ac <clear_one>
	for (int i = 0; i < LED_N; i++){
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b0e      	cmp	r3, #14
 80009aa:	dde0      	ble.n	800096e <set_leds+0x6e>
		}
	}
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200567d8 	.word	0x200567d8
 80009bc:	20056e04 	.word	0x20056e04
 80009c0:	463b8000 	.word	0x463b8000

080009c4 <light_leds>:

void light_leds(int rpm, int type) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	int how_many;
	switch (type) {
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d061      	beq.n	8000a98 <light_leds+0xd4>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	dc65      	bgt.n	8000aa6 <light_leds+0xe2>
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d003      	beq.n	80009e8 <light_leds+0x24>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d053      	beq.n	8000a8e <light_leds+0xca>
 80009e6:	e05e      	b.n	8000aa6 <light_leds+0xe2>
	/* ver 1 (8000-11500 rpm)
	 * 1-10 set linear than last 5 set on 11500 rpm
	 * */
	case 1:
		if (rpm <= 8000) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80009ee:	dc02      	bgt.n	80009f6 <light_leds+0x32>
			clear_all();
 80009f0:	f7ff ff00 	bl	80007f4 <clear_all>
			}
			else if (rpm >= 11500) {
				set_all();
			}
		}
		break;
 80009f4:	e056      	b.n	8000aa4 <light_leds+0xe0>
			if (rpm <= 9500) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f242 521c 	movw	r2, #9500	; 0x251c
 80009fc:	4293      	cmp	r3, r2
 80009fe:	dc1a      	bgt.n	8000a36 <light_leds+0x72>
				how_many = (9500 - rpm) / 300;
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	f242 531c 	movw	r3, #9500	; 0x251c
 8000a06:	1a9b      	subs	r3, r3, r2
 8000a08:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <light_leds+0xf8>)
 8000a0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0e:	1152      	asrs	r2, r2, #5
 8000a10:	17db      	asrs	r3, r3, #31
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	60fb      	str	r3, [r7, #12]
				set_green(5 - how_many, true);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1c3 0305 	rsb	r3, r3, #5
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fe22 	bl	8000668 <set_green>
				set_green(how_many, false);
 8000a24:	2100      	movs	r1, #0
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff fe1e 	bl	8000668 <set_green>
				set_red(5, false);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2005      	movs	r0, #5
 8000a30:	f7ff fe4e 	bl	80006d0 <set_red>
		break;
 8000a34:	e036      	b.n	8000aa4 <light_leds+0xe0>
			else if (rpm <= 11000) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	dc1e      	bgt.n	8000a7e <light_leds+0xba>
				how_many = (11000 - rpm) / 300;
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	f642 23f8 	movw	r3, #11000	; 0x2af8
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <light_leds+0xf8>)
 8000a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4e:	1152      	asrs	r2, r2, #5
 8000a50:	17db      	asrs	r3, r3, #31
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	60fb      	str	r3, [r7, #12]
				set_green(5, true);
 8000a56:	2101      	movs	r1, #1
 8000a58:	2005      	movs	r0, #5
 8000a5a:	f7ff fe05 	bl	8000668 <set_green>
				set_red(5 - how_many, true);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1c3 0305 	rsb	r3, r3, #5
 8000a64:	2101      	movs	r1, #1
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fe32 	bl	80006d0 <set_red>
				set_red(how_many, false);
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f7ff fe2e 	bl	80006d0 <set_red>
				set_purple(5, false);
 8000a74:	2100      	movs	r1, #0
 8000a76:	2005      	movs	r0, #5
 8000a78:	f7ff fe5e 	bl	8000738 <set_purple>
		break;
 8000a7c:	e012      	b.n	8000aa4 <light_leds+0xe0>
			else if (rpm >= 11500) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f642 42eb 	movw	r2, #11499	; 0x2ceb
 8000a84:	4293      	cmp	r3, r2
 8000a86:	dd0d      	ble.n	8000aa4 <light_leds+0xe0>
				set_all();
 8000a88:	f7ff fea4 	bl	80007d4 <set_all>
		break;
 8000a8c:	e00a      	b.n	8000aa4 <light_leds+0xe0>
	case 2:
		// ver2 (0 - 11500 rpm) linear
		set_leds(rpm, 0.0F);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff35 	bl	8000900 <set_leds>
		break;
 8000a96:	e006      	b.n	8000aa6 <light_leds+0xe2>
	case 3:
		// ver3 (8000 - 11500 rpm) linear
		set_leds(rpm, 8000.0F);
 8000a98:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff2f 	bl	8000900 <set_leds>
		break;
 8000aa2:	e000      	b.n	8000aa6 <light_leds+0xe2>
		break;
 8000aa4:	bf00      	nop
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, &leds, RESET_LEN + 24 * LED_N);
 8000aa6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <light_leds+0xfc>)
 8000aac:	2100      	movs	r1, #0
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <light_leds+0x100>)
 8000ab0:	f00e fa40 	bl	800ef34 <HAL_TIM_PWM_Start_DMA>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	1b4e81b5 	.word	0x1b4e81b5
 8000ac0:	200567d8 	.word	0x200567d8
 8000ac4:	20056e04 	.word	0x20056e04

08000ac8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000adc:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <MX_ADC1_Init+0x9c>)
 8000ade:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000ae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ae6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <MX_ADC1_Init+0xa0>)
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000b2a:	f009 fa1f 	bl	8009f6c <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b34:	f001 fa4a 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000b4a:	f009 fa53 	bl	8009ff4 <HAL_ADC_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b54:	f001 fa3a 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20056af8 	.word	0x20056af8
 8000b64:	40012000 	.word	0x40012000
 8000b68:	0f000001 	.word	0x0f000001

08000b6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <HAL_ADC_MspInit+0x74>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d123      	bne.n	8000bd6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_ADC_MspInit+0x78>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <HAL_ADC_MspInit+0x78>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_ADC_MspInit+0x78>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_ADC_MspInit+0x78>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_ADC_MspInit+0x78>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_ADC_MspInit+0x78>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <HAL_ADC_MspInit+0x7c>)
 8000bd2:	f00b f873 	bl	800bcbc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40012000 	.word	0x40012000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020800 	.word	0x40020800

08000bec <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <FLASH_QSPI_Init+0x70>)
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <FLASH_QSPI_Init+0x74>)
 8000bf4:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000bf6:	4819      	ldr	r0, [pc, #100]	; (8000c5c <FLASH_QSPI_Init+0x70>)
 8000bf8:	f00b ff96 	bl	800cb28 <HAL_QSPI_DeInit>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e028      	b.n	8000c58 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 8000c06:	f001 f9e7 	bl	8001fd8 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8000c0a:	f000 f82b 	bl	8000c64 <FLASH_QSPI_ResetChip>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e01f      	b.n	8000c58 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f009 f983 	bl	8009f24 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 8000c1e:	f000 f87f 	bl	8000d20 <FLASH_QSPI_AutoPollingMemReady>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e015      	b.n	8000c58 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000c2c:	f000 f8b0 	bl	8000d90 <FLASH_QSPI_WriteEnable>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 8000c3a:	f000 f8f3 	bl	8000e24 <FLASH_QSPI_Configuration>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e007      	b.n	8000c58 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000c48:	f000 f962 	bl	8000f10 <FLASH_QSPI_EnableMemoryMappedMode>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20056d20 	.word	0x20056d20
 8000c60:	a0001000 	.word	0xa0001000

08000c64 <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b090      	sub	sp, #64	; 0x40
 8000c68:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 8000c6e:	2366      	movs	r3, #102	; 0x66
 8000c70:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c76:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481d      	ldr	r0, [pc, #116]	; (8000d1c <FLASH_QSPI_ResetChip+0xb8>)
 8000ca8:	f00c f91c 	bl	800cee4 <HAL_QSPI_Command>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e02e      	b.n	8000d14 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cba:	e003      	b.n	8000cc4 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 8000cbc:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8000cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc8:	d9f8      	bls.n	8000cbc <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 8000cca:	2399      	movs	r3, #153	; 0x99
 8000ccc:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd2:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd8:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <FLASH_QSPI_ResetChip+0xb8>)
 8000d04:	f00c f8ee 	bl	800cee4 <HAL_QSPI_Command>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3740      	adds	r7, #64	; 0x40
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20056d20 	.word	0x20056d20

08000d20 <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	; 0x50
 8000d24:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000d26:	2305      	movs	r3, #5
 8000d28:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d46:	2300      	movs	r3, #0
 8000d48:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d66:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000d68:	463a      	mov	r2, r7
 8000d6a:	f107 0118 	add.w	r1, r7, #24
 8000d6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 8000d74:	f00c fa43 	bl	800d1fe <HAL_QSPI_AutoPolling>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3750      	adds	r7, #80	; 0x50
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20056d20 	.word	0x20056d20

08000d90 <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000d96:	2306      	movs	r3, #6
 8000d98:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000db4:	2300      	movs	r3, #0
 8000db6:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000db8:	2300      	movs	r3, #0
 8000dba:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4816      	ldr	r0, [pc, #88]	; (8000e20 <FLASH_QSPI_WriteEnable+0x90>)
 8000dc8:	f00c f88c 	bl	800cee4 <HAL_QSPI_Command>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e01f      	b.n	8000e16 <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000de6:	2310      	movs	r3, #16
 8000de8:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000dea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dee:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000df0:	2305      	movs	r3, #5
 8000df2:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000dfa:	463a      	mov	r2, r7
 8000dfc:	f107 0118 	add.w	r1, r7, #24
 8000e00:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e04:	4806      	ldr	r0, [pc, #24]	; (8000e20 <FLASH_QSPI_WriteEnable+0x90>)
 8000e06:	f00c f9fa 	bl	800d1fe <HAL_QSPI_AutoPolling>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3750      	adds	r7, #80	; 0x50
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20056d20 	.word	0x20056d20

08000e24 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b090      	sub	sp, #64	; 0x40
 8000e28:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8000e2a:	2335      	movs	r3, #53	; 0x35
 8000e2c:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e32:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5e:	4619      	mov	r1, r3
 8000e60:	482a      	ldr	r0, [pc, #168]	; (8000f0c <FLASH_QSPI_Configuration+0xe8>)
 8000e62:	f00c f83f 	bl	800cee4 <HAL_QSPI_Command>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e049      	b.n	8000f04 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e76:	4619      	mov	r1, r3
 8000e78:	4824      	ldr	r0, [pc, #144]	; (8000f0c <FLASH_QSPI_Configuration+0xe8>)
 8000e7a:	f00c f923 	bl	800d0c4 <HAL_QSPI_Receive>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e03d      	b.n	8000f04 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000e88:	f7ff ff82 	bl	8000d90 <FLASH_QSPI_WriteEnable>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e036      	b.n	8000f04 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 8000ea0:	2331      	movs	r3, #49	; 0x31
 8000ea2:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea8:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000ebe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <FLASH_QSPI_Configuration+0xe8>)
 8000ed8:	f00c f804 	bl	800cee4 <HAL_QSPI_Command>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eec:	4619      	mov	r1, r3
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <FLASH_QSPI_Configuration+0xe8>)
 8000ef0:	f00c f856 	bl	800cfa0 <HAL_QSPI_Transmit>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000efa:	f001 f867 	bl	8001fcc <Error_Handler>
		return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3740      	adds	r7, #64	; 0x40
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20056d20 	.word	0x20056d20

08000f10 <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b090      	sub	sp, #64	; 0x40
 8000f14:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8000f16:	23eb      	movs	r3, #235	; 0xeb
 8000f18:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1e:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f24:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000f26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8000f40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000f46:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 8000f54:	2304      	movs	r3, #4
 8000f56:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 8000f5c:	463a      	mov	r2, r7
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4619      	mov	r1, r3
 8000f64:	4806      	ldr	r0, [pc, #24]	; (8000f80 <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 8000f66:	f00c f9c1 	bl	800d2ec <HAL_QSPI_MemoryMapped>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3740      	adds	r7, #64	; 0x40
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20056d20 	.word	0x20056d20

08000f84 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <MX_CAN1_Init+0x70>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000f90:	2209      	movs	r2, #9
 8000f92:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000fa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000faa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fd4:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000fd6:	f009 fa51 	bl	800a47c <HAL_CAN_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000fe0:	f000 fff4 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	HAL_CAN_Start(&hcan1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <MX_CAN1_Init+0x6c>)
 8000fe6:	f009 fb44 	bl	800a672 <HAL_CAN_Start>

  /* USER CODE END CAN1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20056b90 	.word	0x20056b90
 8000ff4:	40006400 	.word	0x40006400

08000ff8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_CAN2_Init+0x6c>)
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <MX_CAN2_Init+0x70>)
 8001000:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_CAN2_Init+0x6c>)
 8001004:	2209      	movs	r2, #9
 8001006:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_CAN2_Init+0x6c>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_CAN2_Init+0x6c>)
 8001010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001014:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_CAN2_Init+0x6c>)
 8001018:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_CAN2_Init+0x6c>)
 8001020:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001024:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_CAN2_Init+0x6c>)
 8001028:	2200      	movs	r2, #0
 800102a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <MX_CAN2_Init+0x6c>)
 800102e:	2200      	movs	r2, #0
 8001030:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_CAN2_Init+0x6c>)
 8001034:	2200      	movs	r2, #0
 8001036:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_CAN2_Init+0x6c>)
 800103a:	2201      	movs	r2, #1
 800103c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_CAN2_Init+0x6c>)
 8001040:	2200      	movs	r2, #0
 8001042:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_CAN2_Init+0x6c>)
 8001046:	2200      	movs	r2, #0
 8001048:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_CAN2_Init+0x6c>)
 800104c:	f009 fa16 	bl	800a47c <HAL_CAN_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8001056:	f000 ffb9 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

	HAL_CAN_Start(&hcan2);
 800105a:	4802      	ldr	r0, [pc, #8]	; (8001064 <MX_CAN2_Init+0x6c>)
 800105c:	f009 fb09 	bl	800a672 <HAL_CAN_Start>

  /* USER CODE END CAN2_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20056b40 	.word	0x20056b40
 8001068:	40006800 	.word	0x40006800

0800106c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a4c      	ldr	r2, [pc, #304]	; (80011bc <HAL_CAN_MspInit+0x150>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d13a      	bne.n	8001104 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <HAL_CAN_MspInit+0x154>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_CAN_MspInit+0x154>)
 8001096:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001098:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <HAL_CAN_MspInit+0x154>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10b      	bne.n	80010b8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010a0:	4b48      	ldr	r3, [pc, #288]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a47      	ldr	r2, [pc, #284]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 80010a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	623b      	str	r3, [r7, #32]
 80010b6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	4a41      	ldr	r2, [pc, #260]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6313      	str	r3, [r2, #48]	; 0x30
 80010c4:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010e2:	2309      	movs	r3, #9
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4836      	ldr	r0, [pc, #216]	; (80011c8 <HAL_CAN_MspInit+0x15c>)
 80010ee:	f00a fde5 	bl	800bcbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2103      	movs	r1, #3
 80010f6:	2014      	movs	r0, #20
 80010f8:	f009 ff1c 	bl	800af34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010fc:	2014      	movs	r0, #20
 80010fe:	f009 ff35 	bl	800af6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001102:	e056      	b.n	80011b2 <HAL_CAN_MspInit+0x146>
  else if(canHandle->Instance==CAN2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a30      	ldr	r2, [pc, #192]	; (80011cc <HAL_CAN_MspInit+0x160>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d151      	bne.n	80011b2 <HAL_CAN_MspInit+0x146>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 8001114:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 800112c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_CAN_MspInit+0x154>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_CAN_MspInit+0x154>)
 8001146:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_CAN_MspInit+0x154>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10b      	bne.n	8001168 <HAL_CAN_MspInit+0xfc>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 8001156:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_CAN_MspInit+0x158>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001180:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001192:	2309      	movs	r3, #9
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <HAL_CAN_MspInit+0x164>)
 800119e:	f00a fd8d 	bl	800bcbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2103      	movs	r1, #3
 80011a6:	2040      	movs	r0, #64	; 0x40
 80011a8:	f009 fec4 	bl	800af34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80011ac:	2040      	movs	r0, #64	; 0x40
 80011ae:	f009 fedd 	bl	800af6c <HAL_NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3738      	adds	r7, #56	; 0x38
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40006400 	.word	0x40006400
 80011c0:	200000f8 	.word	0x200000f8
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40006800 	.word	0x40006800
 80011d0:	40020400 	.word	0x40020400

080011d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b091      	sub	sp, #68	; 0x44
 80011d8:	af04      	add	r7, sp, #16
 80011da:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	f107 0214 	add.w	r2, r7, #20
 80011e4:	2100      	movs	r1, #0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f009 fa87 	bl	800a6fa <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10f      	bne.n	8001216 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		ComputeEcumasterFrame(RxHeader, RxData);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	9303      	str	r3, [sp, #12]
 80011fc:	466c      	mov	r4, sp
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001210:	f000 f816 	bl	8001240 <ComputeEcumasterFrame>
	} else {
		ComputeInternalFrame(RxHeader, RxData);
	}
}
 8001214:	e00e      	b.n	8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeInternalFrame(RxHeader, RxData);
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	9303      	str	r3, [sp, #12]
 800121c:	466c      	mov	r4, sp
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001230:	f000 f8d4 	bl	80013dc <ComputeInternalFrame>
}
 8001234:	bf00      	nop
 8001236:	3734      	adds	r7, #52	; 0x34
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	40006400 	.word	0x40006400

08001240 <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 8001240:	b084      	sub	sp, #16
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
 8001246:	f107 0c08 	add.w	ip, r7, #8
 800124a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == Frame1) {
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001254:	d121      	bne.n	800129a <ComputeEcumasterFrame+0x5a>
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 8001256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001258:	f000 f8cc 	bl	80013f4 <LittleToBigEndian>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001262:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	789a      	ldrb	r2, [r3, #2]
 8001268:	4b5b      	ldr	r3, [pc, #364]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 800126a:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	78da      	ldrb	r2, [r3, #3]
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001272:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	3304      	adds	r3, #4
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f8bb 	bl	80013f4 <LittleToBigEndian>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001284:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	3306      	adds	r3, #6
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f8b2 	bl	80013f4 <LittleToBigEndian>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001296:	80da      	strh	r2, [r3, #6]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
		EcuData.TCTorqueReduction = RxData[6];
		EcuData.PitLimitTorqueReduction = RxData[7];
	}
}
 8001298:	e097      	b.n	80013ca <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame3) {
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f240 6202 	movw	r2, #1538	; 0x602
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d118      	bne.n	80012d6 <ComputeEcumasterFrame+0x96>
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 80012a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012a6:	f000 f8a5 	bl	80013f4 <LittleToBigEndian>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80012b0:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	78da      	ldrb	r2, [r3, #3]
 80012b6:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80012b8:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4];
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	791a      	ldrb	r2, [r3, #4]
 80012be:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80012c0:	731a      	strb	r2, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	3306      	adds	r3, #6
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f894 	bl	80013f4 <LittleToBigEndian>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80012d2:	81da      	strh	r2, [r3, #14]
}
 80012d4:	e079      	b.n	80013ca <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame4) {
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f240 6203 	movw	r2, #1539	; 0x603
 80012dc:	4293      	cmp	r3, r2
 80012de:	d123      	bne.n	8001328 <ComputeEcumasterFrame+0xe8>
		EcuData.ignAngle = RxData[0];
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80012e8:	741a      	strb	r2, [r3, #16]
		EcuData.ignDwell = RxData[1];
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	785a      	ldrb	r2, [r3, #1]
 80012ee:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80012f0:	745a      	strb	r2, [r3, #17]
		EcuData.lambda = RxData[2];
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	789a      	ldrb	r2, [r3, #2]
 80012f6:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80012f8:	749a      	strb	r2, [r3, #18]
		EcuData.lambdaCorrection = RxData[3];
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	78da      	ldrb	r2, [r3, #3]
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001300:	74da      	strb	r2, [r3, #19]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	3304      	adds	r3, #4
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f874 	bl	80013f4 <LittleToBigEndian>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001312:	829a      	strh	r2, [r3, #20]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	3306      	adds	r3, #6
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f86b 	bl	80013f4 <LittleToBigEndian>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001324:	82da      	strh	r2, [r3, #22]
}
 8001326:	e050      	b.n	80013ca <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame5) {
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f240 6204 	movw	r2, #1540	; 0x604
 800132e:	4293      	cmp	r3, r2
 8001330:	d120      	bne.n	8001374 <ComputeEcumasterFrame+0x134>
		EcuData.gear = RxData[0];
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001338:	761a      	strb	r2, [r3, #24]
		EcuData.ecuTemp = RxData[1];
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	3301      	adds	r3, #1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b25a      	sxtb	r2, r3
 8001342:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001344:	765a      	strb	r2, [r3, #25]
		EcuData.batt = LittleToBigEndian(&RxData[4]);
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	3304      	adds	r3, #4
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f852 	bl	80013f4 <LittleToBigEndian>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001356:	835a      	strh	r2, [r3, #26]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	3305      	adds	r3, #5
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f849 	bl	80013f4 <LittleToBigEndian>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001368:	839a      	strh	r2, [r3, #28]
		EcuData.flags1 = RxData[7];
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	79da      	ldrb	r2, [r3, #7]
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001370:	779a      	strb	r2, [r3, #30]
}
 8001372:	e02a      	b.n	80013ca <ComputeEcumasterFrame+0x18a>
	} else if (RxHeader.StdId == Frame6) {
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f240 6205 	movw	r2, #1541	; 0x605
 800137a:	4293      	cmp	r3, r2
 800137c:	d125      	bne.n	80013ca <ComputeEcumasterFrame+0x18a>
		EcuData.DBWPosition = RxData[0];
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 8001384:	77da      	strb	r2, [r3, #31]
		EcuData.DBWTrigger = RxData[1];
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	785a      	ldrb	r2, [r3, #1]
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 800138c:	f883 2020 	strb.w	r2, [r3, #32]
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	3302      	adds	r3, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f82d 	bl	80013f4 <LittleToBigEndian>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80013a0:	845a      	strh	r2, [r3, #34]	; 0x22
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	3304      	adds	r3, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f824 	bl	80013f4 <LittleToBigEndian>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80013b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCTorqueReduction = RxData[6];
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	799a      	ldrb	r2, [r3, #6]
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80013bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		EcuData.PitLimitTorqueReduction = RxData[7];
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	79da      	ldrb	r2, [r3, #7]
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <ComputeEcumasterFrame+0x198>)
 80013c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013d2:	b004      	add	sp, #16
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20056b68 	.word	0x20056b68

080013dc <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 80013dc:	b084      	sub	sp, #16
 80013de:	b490      	push	{r4, r7}
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	f107 0408 	add.w	r4, r7, #8
 80013e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc90      	pop	{r4, r7}
 80013f0:	b004      	add	sp, #16
 80013f2:	4770      	bx	lr

080013f4 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data) {
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] * 0xFFFF + data[1];
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b29a      	uxth	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	81fb      	strh	r3, [r7, #14]
	return returnData;
 800140e:	89fb      	ldrh	r3, [r7, #14]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_CRC_Init+0x3c>)
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <MX_CRC_Init+0x40>)
 8001424:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_CRC_Init+0x3c>)
 8001428:	2200      	movs	r2, #0
 800142a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_CRC_Init+0x3c>)
 800142e:	2200      	movs	r2, #0
 8001430:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_CRC_Init+0x3c>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_CRC_Init+0x3c>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_CRC_Init+0x3c>)
 8001440:	2201      	movs	r2, #1
 8001442:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_CRC_Init+0x3c>)
 8001446:	f009 fdad 	bl	800afa4 <HAL_CRC_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001450:	f000 fdbc 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20056bb8 	.word	0x20056bb8
 800145c:	40023000 	.word	0x40023000

08001460 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_CRC_MspInit+0x38>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10b      	bne.n	800148a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_CRC_MspInit+0x3c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <HAL_CRC_MspInit+0x3c>)
 8001478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_CRC_MspInit+0x3c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023000 	.word	0x40023000
 800149c:	40023800 	.word	0x40023800

080014a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_DMA_Init+0x48>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <MX_DMA_Init+0x48>)
 80014ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MX_DMA_Init+0x48>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2103      	movs	r1, #3
 80014c2:	200b      	movs	r0, #11
 80014c4:	f009 fd36 	bl	800af34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014c8:	200b      	movs	r0, #11
 80014ca:	f009 fd4f 	bl	800af6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2103      	movs	r1, #3
 80014d2:	200f      	movs	r0, #15
 80014d4:	f009 fd2e 	bl	800af34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80014d8:	200f      	movs	r0, #15
 80014da:	f009 fd47 	bl	800af6c <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_DMA2D_Init+0x68>)
 80014f2:	4a19      	ldr	r2, [pc, #100]	; (8001558 <MX_DMA2D_Init+0x6c>)
 80014f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <MX_DMA2D_Init+0x68>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_DMA2D_Init+0x68>)
 80014fe:	2201      	movs	r2, #1
 8001500:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_DMA2D_Init+0x68>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_DMA2D_Init+0x68>)
 800150a:	2200      	movs	r2, #0
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_DMA2D_Init+0x68>)
 8001510:	2201      	movs	r2, #1
 8001512:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_DMA2D_Init+0x68>)
 8001516:	2200      	movs	r2, #0
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_DMA2D_Init+0x68>)
 800151c:	2200      	movs	r2, #0
 800151e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_DMA2D_Init+0x68>)
 8001522:	2200      	movs	r2, #0
 8001524:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_DMA2D_Init+0x68>)
 8001528:	2200      	movs	r2, #0
 800152a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <MX_DMA2D_Init+0x68>)
 800152e:	f00a f9bd 	bl	800b8ac <HAL_DMA2D_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8001538:	f000 fd48 	bl	8001fcc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800153c:	2101      	movs	r1, #1
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_DMA2D_Init+0x68>)
 8001540:	f00a fb1e 	bl	800bb80 <HAL_DMA2D_ConfigLayer>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800154a:	f000 fd3f 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20056bdc 	.word	0x20056bdc
 8001558:	4002b000 	.word	0x4002b000

0800155c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_DMA2D_MspInit+0x44>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d113      	bne.n	8001596 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_DMA2D_MspInit+0x48>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_DMA2D_MspInit+0x48>)
 8001574:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_DMA2D_MspInit+0x48>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2103      	movs	r1, #3
 800158a:	205a      	movs	r0, #90	; 0x5a
 800158c:	f009 fcd2 	bl	800af34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001590:	205a      	movs	r0, #90	; 0x5a
 8001592:	f009 fceb 	bl	800af6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	4002b000 	.word	0x4002b000
 80015a4:	40023800 	.word	0x40023800

080015a8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
 80015bc:	615a      	str	r2, [r3, #20]
 80015be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015c0:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <MX_FMC_Init+0x140>)
 80015c2:	4a4a      	ldr	r2, [pc, #296]	; (80016ec <MX_FMC_Init+0x144>)
 80015c4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80015c6:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <MX_FMC_Init+0x140>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015cc:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <MX_FMC_Init+0x140>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80015d2:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <MX_FMC_Init+0x140>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015d8:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <MX_FMC_Init+0x140>)
 80015da:	2210      	movs	r2, #16
 80015dc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80015de:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <MX_FMC_Init+0x140>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80015e4:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <MX_FMC_Init+0x140>)
 80015e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ea:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015ec:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <MX_FMC_Init+0x140>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <MX_FMC_Init+0x140>)
 80015f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <MX_FMC_Init+0x140>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <MX_FMC_Init+0x140>)
 8001602:	2200      	movs	r2, #0
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001606:	2302      	movs	r3, #2
 8001608:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800160a:	2307      	movs	r3, #7
 800160c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800160e:	2304      	movs	r3, #4
 8001610:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001612:	2306      	movs	r3, #6
 8001614:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001616:	2303      	movs	r3, #3
 8001618:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800161e:	2302      	movs	r3, #2
 8001620:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4830      	ldr	r0, [pc, #192]	; (80016e8 <MX_FMC_Init+0x140>)
 8001628:	f00d f9da 	bl	800e9e0 <HAL_SDRAM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8001632:	f000 fccb 	bl	8001fcc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <MX_FMC_Init+0x148>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <MX_FMC_Init+0x148>)
 8001642:	2210      	movs	r2, #16
 8001644:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <MX_FMC_Init+0x148>)
 8001648:	2201      	movs	r2, #1
 800164a:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <MX_FMC_Init+0x148>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001652:	f04f 32ff 	mov.w	r2, #4294967295
 8001656:	4926      	ldr	r1, [pc, #152]	; (80016f0 <MX_FMC_Init+0x148>)
 8001658:	4823      	ldr	r0, [pc, #140]	; (80016e8 <MX_FMC_Init+0x140>)
 800165a:	f00d f9f5 	bl	800ea48 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f008 fc60 	bl	8009f24 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <MX_FMC_Init+0x148>)
 8001666:	2202      	movs	r2, #2
 8001668:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <MX_FMC_Init+0x148>)
 800166c:	2210      	movs	r2, #16
 800166e:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_FMC_Init+0x148>)
 8001672:	2201      	movs	r2, #1
 8001674:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <MX_FMC_Init+0x148>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	491b      	ldr	r1, [pc, #108]	; (80016f0 <MX_FMC_Init+0x148>)
 8001682:	4819      	ldr	r0, [pc, #100]	; (80016e8 <MX_FMC_Init+0x140>)
 8001684:	f00d f9e0 	bl	800ea48 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_FMC_Init+0x148>)
 800168a:	2203      	movs	r2, #3
 800168c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_FMC_Init+0x148>)
 8001690:	2210      	movs	r2, #16
 8001692:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_FMC_Init+0x148>)
 8001696:	2208      	movs	r2, #8
 8001698:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_FMC_Init+0x148>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	4912      	ldr	r1, [pc, #72]	; (80016f0 <MX_FMC_Init+0x148>)
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <MX_FMC_Init+0x140>)
 80016a8:	f00d f9ce 	bl	800ea48 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 80016ac:	f44f 7308 	mov.w	r3, #544	; 0x220
 80016b0:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_FMC_Init+0x148>)
 80016b4:	2204      	movs	r2, #4
 80016b6:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <MX_FMC_Init+0x148>)
 80016ba:	2210      	movs	r2, #16
 80016bc:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_FMC_Init+0x148>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <MX_FMC_Init+0x148>)
 80016c8:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <MX_FMC_Init+0x148>)
 80016d0:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_FMC_Init+0x140>)
 80016d2:	f00d f9b9 	bl	800ea48 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 80016d6:	f240 617c 	movw	r1, #1660	; 0x67c
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <MX_FMC_Init+0x140>)
 80016dc:	f00d f9df 	bl	800ea9e <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20056c34 	.word	0x20056c34
 80016ec:	a0000140 	.word	0xa0000140
 80016f0:	20000100 	.word	0x20000100

080016f4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001708:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <HAL_FMC_MspInit+0x100>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d16d      	bne.n	80017ec <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_FMC_MspInit+0x100>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001716:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <HAL_FMC_MspInit+0x104>)
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	4a37      	ldr	r2, [pc, #220]	; (80017f8 <HAL_FMC_MspInit+0x104>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6393      	str	r3, [r2, #56]	; 0x38
 8001722:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_FMC_MspInit+0x104>)
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800172e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001732:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001740:	230c      	movs	r3, #12
 8001742:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	482c      	ldr	r0, [pc, #176]	; (80017fc <HAL_FMC_MspInit+0x108>)
 800174a:	f00a fab7 	bl	800bcbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800174e:	230c      	movs	r3, #12
 8001750:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800175e:	230c      	movs	r3, #12
 8001760:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4826      	ldr	r0, [pc, #152]	; (8001800 <HAL_FMC_MspInit+0x10c>)
 8001768:	f00a faa8 	bl	800bcbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800177c:	230c      	movs	r3, #12
 800177e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	481f      	ldr	r0, [pc, #124]	; (8001804 <HAL_FMC_MspInit+0x110>)
 8001786:	f00a fa99 	bl	800bcbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800178a:	f248 1311 	movw	r3, #33041	; 0x8111
 800178e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179c:	230c      	movs	r3, #12
 800179e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4818      	ldr	r0, [pc, #96]	; (8001808 <HAL_FMC_MspInit+0x114>)
 80017a6:	f00a fa89 	bl	800bcbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80017aa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80017ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017bc:	230c      	movs	r3, #12
 80017be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <HAL_FMC_MspInit+0x118>)
 80017c6:	f00a fa79 	bl	800bcbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80017ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80017ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017dc:	230c      	movs	r3, #12
 80017de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	480a      	ldr	r0, [pc, #40]	; (8001810 <HAL_FMC_MspInit+0x11c>)
 80017e6:	f00a fa69 	bl	800bcbc <HAL_GPIO_Init>
 80017ea:	e000      	b.n	80017ee <HAL_FMC_MspInit+0xfa>
    return;
 80017ec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200000fc 	.word	0x200000fc
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40021400 	.word	0x40021400
 8001800:	40020800 	.word	0x40020800
 8001804:	40020000 	.word	0x40020000
 8001808:	40021800 	.word	0x40021800
 800180c:	40021000 	.word	0x40021000
 8001810:	40020c00 	.word	0x40020c00

08001814 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800181c:	f7ff ff6a 	bl	80016f4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hardwareTASK */
  hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL, &hardwareTASK_attributes);
 800182c:	4a10      	ldr	r2, [pc, #64]	; (8001870 <MX_FREERTOS_Init+0x48>)
 800182e:	2100      	movs	r1, #0
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <MX_FREERTOS_Init+0x4c>)
 8001832:	f00f f863 	bl	80108fc <osThreadNew>
 8001836:	4603      	mov	r3, r0
 8001838:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <MX_FREERTOS_Init+0x50>)
 800183a:	6013      	str	r3, [r2, #0]

  /* creation of touchGFXTask */
  touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL, &touchGFXTask_attributes);
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <MX_FREERTOS_Init+0x54>)
 800183e:	2100      	movs	r1, #0
 8001840:	480f      	ldr	r0, [pc, #60]	; (8001880 <MX_FREERTOS_Init+0x58>)
 8001842:	f00f f85b 	bl	80108fc <osThreadNew>
 8001846:	4603      	mov	r3, r0
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <MX_FREERTOS_Init+0x5c>)
 800184a:	6013      	str	r3, [r2, #0]

  /* creation of infoLed */
  infoLedHandle = osThreadNew(StartInfoLed, NULL, &infoLed_attributes);
 800184c:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <MX_FREERTOS_Init+0x60>)
 800184e:	2100      	movs	r1, #0
 8001850:	480e      	ldr	r0, [pc, #56]	; (800188c <MX_FREERTOS_Init+0x64>)
 8001852:	f00f f853 	bl	80108fc <osThreadNew>
 8001856:	4603      	mov	r3, r0
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <MX_FREERTOS_Init+0x68>)
 800185a:	6013      	str	r3, [r2, #0]

  /* creation of displayBackligh */
  displayBacklighHandle = osThreadNew(StartDisplayBacklight, NULL, &displayBackligh_attributes);
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <MX_FREERTOS_Init+0x6c>)
 800185e:	2100      	movs	r1, #0
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_FREERTOS_Init+0x70>)
 8001862:	f00f f84b 	bl	80108fc <osThreadNew>
 8001866:	4603      	mov	r3, r0
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <MX_FREERTOS_Init+0x74>)
 800186a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	0802751c 	.word	0x0802751c
 8001874:	080018a1 	.word	0x080018a1
 8001878:	20056c6c 	.word	0x20056c6c
 800187c:	08027540 	.word	0x08027540
 8001880:	080018eb 	.word	0x080018eb
 8001884:	20056c68 	.word	0x20056c68
 8001888:	08027564 	.word	0x08027564
 800188c:	080018ff 	.word	0x080018ff
 8001890:	20056c70 	.word	0x20056c70
 8001894:	08027588 	.word	0x08027588
 8001898:	08001911 	.word	0x08001911
 800189c:	20056c74 	.word	0x20056c74

080018a0 <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardwareTask */

	MX_TIM3_Init();
 80018a8:	f000 fe20 	bl	80024ec <MX_TIM3_Init>
	MX_DMA_Init();
 80018ac:	f7ff fdf8 	bl	80014a0 <MX_DMA_Init>
	uint16_t rpm = 5000;
 80018b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80018b4:	81fb      	strh	r3, [r7, #14]
	leds_init();
 80018b6:	f7fe fea3 	bl	8000600 <leds_init>
	osDelay(1000);
 80018ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018be:	f00f f8f5 	bl	8010aac <osDelay>
	/* Infinite loop */
	for (;;) {
		light_leds(rpm,1);
 80018c2:	89fb      	ldrh	r3, [r7, #14]
 80018c4:	2101      	movs	r1, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f87c 	bl	80009c4 <light_leds>
		rpm+=100;
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	3364      	adds	r3, #100	; 0x64
 80018d0:	81fb      	strh	r3, [r7, #14]
		if(rpm > 12000)
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80018d8:	4293      	cmp	r3, r2
 80018da:	d902      	bls.n	80018e2 <StartHardwareTask+0x42>
		{
			rpm = 4000;
 80018dc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80018e0:	81fb      	strh	r3, [r7, #14]
		}
		osDelay(100);
 80018e2:	2064      	movs	r0, #100	; 0x64
 80018e4:	f00f f8e2 	bl	8010aac <osDelay>
		light_leds(rpm,1);
 80018e8:	e7eb      	b.n	80018c2 <StartHardwareTask+0x22>

080018ea <StartTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 80018f2:	f001 f814 	bl	800291e <MX_TouchGFX_Process>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f00f f8d8 	bl	8010aac <osDelay>
 80018fc:	e7fb      	b.n	80018f6 <StartTouchGFXTask+0xc>

080018fe <StartInfoLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInfoLed */
void StartInfoLed(void *argument)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInfoLed */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001906:	2064      	movs	r0, #100	; 0x64
 8001908:	f00f f8d0 	bl	8010aac <osDelay>
 800190c:	e7fb      	b.n	8001906 <StartInfoLed+0x8>
	...

08001910 <StartDisplayBacklight>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayBacklight */
void StartDisplayBacklight(void *argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayBacklight */
  /* Infinite loop */
	uint8_t data =50;
 8001918:	2332      	movs	r3, #50	; 0x32
 800191a:	73fb      	strb	r3, [r7, #15]
	MX_TIM4_Init();
 800191c:	f000 fe5c 	bl	80025d8 <MX_TIM4_Init>
	osDelay(100);
 8001920:	2064      	movs	r0, #100	; 0x64
 8001922:	f00f f8c3 	bl	8010aac <osDelay>
	// HAL_TIM_Base_Start(&htim4);
	osDelay(100);
 8001926:	2064      	movs	r0, #100	; 0x64
 8001928:	f00f f8c0 	bl	8010aac <osDelay>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800192c:	2100      	movs	r1, #0
 800192e:	4806      	ldr	r0, [pc, #24]	; (8001948 <StartDisplayBacklight+0x38>)
 8001930:	f00d fa06 	bl	800ed40 <HAL_TIM_PWM_Start>
  for(;;)
  {
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, data);
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <StartDisplayBacklight+0x38>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	635a      	str	r2, [r3, #52]	; 0x34
	 // data+=50;
		//	  data%= 200;
    osDelay(1000);
 800193c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001940:	f00f f8b4 	bl	8010aac <osDelay>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, data);
 8001944:	e7f6      	b.n	8001934 <StartDisplayBacklight+0x24>
 8001946:	bf00      	nop
 8001948:	20056db8 	.word	0x20056db8

0800194c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a45      	ldr	r2, [pc, #276]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800197a:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <MX_GPIO_Init+0x130>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a3f      	ldr	r2, [pc, #252]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001980:	f043 0320 	orr.w	r3, r3, #32
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a39      	ldr	r2, [pc, #228]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a33      	ldr	r2, [pc, #204]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a2d      	ldr	r2, [pc, #180]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <MX_GPIO_Init+0x130>)
 80019f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_GPIO_Init+0x130>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2104      	movs	r1, #4
 8001a26:	4816      	ldr	r0, [pc, #88]	; (8001a80 <MX_GPIO_Init+0x134>)
 8001a28:	f00a fc00 	bl	800c22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ESP_RESET_Pin|ESP_PD_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001a32:	4814      	ldr	r0, [pc, #80]	; (8001a84 <MX_GPIO_Init+0x138>)
 8001a34:	f00a fbfa 	bl	800c22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_LED_Pin;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIGNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_GPIO_Init+0x134>)
 8001a50:	f00a f934 	bl	800bcbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ESP_RESET_Pin|ESP_PD_Pin;
 8001a54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_GPIO_Init+0x138>)
 8001a6e:	f00a f925 	bl	800bcbc <HAL_GPIO_Init>

}
 8001a72:	bf00      	nop
 8001a74:	3738      	adds	r7, #56	; 0x38
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40020800 	.word	0x40020800

08001a88 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08e      	sub	sp, #56	; 0x38
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2234      	movs	r2, #52	; 0x34
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f023 fd69 	bl	802556c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001a9c:	4a3a      	ldr	r2, [pc, #232]	; (8001b88 <MX_LTDC_Init+0x100>)
 8001a9e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001aa0:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001aac:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ab2:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001ab8:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001aba:	2203      	movs	r2, #3
 8001abc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001ac0:	2227      	movs	r2, #39	; 0x27
 8001ac2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001ac6:	220b      	movs	r2, #11
 8001ac8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 8001aca:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001acc:	222f      	movs	r2, #47	; 0x2f
 8001ace:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001ad2:	f240 322b 	movw	r2, #811	; 0x32b
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001ada:	f240 220f 	movw	r2, #527	; 0x20f
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 8001ae0:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001ae2:	f240 3233 	movw	r2, #819	; 0x333
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001aea:	f240 2217 	movw	r2, #535	; 0x217
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b08:	481e      	ldr	r0, [pc, #120]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001b0a:	f00a fba9 	bl	800c260 <HAL_LTDC_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001b14:	f000 fa5a 	bl	8001fcc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001b1c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b20:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001b26:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b2a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001b30:	23ff      	movs	r3, #255	; 0xff
 8001b32:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001b42:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001b48:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001b4e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_LTDC_Init+0xfc>)
 8001b6e:	f00a fcff 	bl	800c570 <HAL_LTDC_ConfigLayer>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001b78:	f000 fa28 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3738      	adds	r7, #56	; 0x38
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20056c78 	.word	0x20056c78
 8001b88:	40016800 	.word	0x40016800

08001b8c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0b4      	sub	sp, #208	; 0xd0
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba8:	2290      	movs	r2, #144	; 0x90
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f023 fcdd 	bl	802556c <memset>
  if(ltdcHandle->Instance==LTDC)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4aa6      	ldr	r2, [pc, #664]	; (8001e50 <HAL_LTDC_MspInit+0x2c4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	f040 8144 	bne.w	8001e46 <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 8001bc2:	f240 1317 	movw	r3, #279	; 0x117
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bdc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be2:	4618      	mov	r0, r3
 8001be4:	f00c fad4 	bl	800e190 <HAL_RCCEx_PeriphCLKConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001bee:	f000 f9ed 	bl	8001fcc <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001bf2:	4b98      	ldr	r3, [pc, #608]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a97      	ldr	r2, [pc, #604]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001bf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b95      	ldr	r3, [pc, #596]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c08:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c0a:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a91      	ldr	r2, [pc, #580]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c10:	f043 0310 	orr.w	r3, r3, #16
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b8f      	ldr	r3, [pc, #572]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c22:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a8b      	ldr	r2, [pc, #556]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c28:	f043 0320 	orr.w	r3, r3, #32
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a85      	ldr	r2, [pc, #532]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b83      	ldr	r3, [pc, #524]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a7f      	ldr	r2, [pc, #508]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b7d      	ldr	r3, [pc, #500]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4b7a      	ldr	r3, [pc, #488]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a79      	ldr	r2, [pc, #484]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c82:	4b74      	ldr	r3, [pc, #464]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a73      	ldr	r2, [pc, #460]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b71      	ldr	r3, [pc, #452]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9a:	4b6e      	ldr	r3, [pc, #440]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a6d      	ldr	r2, [pc, #436]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <HAL_LTDC_MspInit+0x2c8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001cb2:	2370      	movs	r3, #112	; 0x70
 8001cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cca:	230e      	movs	r3, #14
 8001ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4860      	ldr	r0, [pc, #384]	; (8001e58 <HAL_LTDC_MspInit+0x2cc>)
 8001cd8:	f009 fff0 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cf6:	230e      	movs	r3, #14
 8001cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cfc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d00:	4619      	mov	r1, r3
 8001d02:	4856      	ldr	r0, [pc, #344]	; (8001e5c <HAL_LTDC_MspInit+0x2d0>)
 8001d04:	f009 ffda 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001d08:	23c1      	movs	r3, #193	; 0xc1
 8001d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d20:	230e      	movs	r3, #14
 8001d22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	484c      	ldr	r0, [pc, #304]	; (8001e60 <HAL_LTDC_MspInit+0x2d4>)
 8001d2e:	f009 ffc5 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001d32:	f240 437e 	movw	r3, #1150	; 0x47e
 8001d36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d4c:	230e      	movs	r3, #14
 8001d4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d56:	4619      	mov	r1, r3
 8001d58:	4842      	ldr	r0, [pc, #264]	; (8001e64 <HAL_LTDC_MspInit+0x2d8>)
 8001d5a:	f009 ffaf 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d76:	2309      	movs	r3, #9
 8001d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d80:	4619      	mov	r1, r3
 8001d82:	4839      	ldr	r0, [pc, #228]	; (8001e68 <HAL_LTDC_MspInit+0x2dc>)
 8001d84:	f009 ff9a 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001d88:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001da2:	230e      	movs	r3, #14
 8001da4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001dac:	4619      	mov	r1, r3
 8001dae:	482e      	ldr	r0, [pc, #184]	; (8001e68 <HAL_LTDC_MspInit+0x2dc>)
 8001db0:	f009 ff84 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8001db4:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 8001db8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dce:	230e      	movs	r3, #14
 8001dd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dd4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4824      	ldr	r0, [pc, #144]	; (8001e6c <HAL_LTDC_MspInit+0x2e0>)
 8001ddc:	f009 ff6e 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001de0:	2348      	movs	r3, #72	; 0x48
 8001de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001df8:	230e      	movs	r3, #14
 8001dfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e02:	4619      	mov	r1, r3
 8001e04:	481a      	ldr	r0, [pc, #104]	; (8001e70 <HAL_LTDC_MspInit+0x2e4>)
 8001e06:	f009 ff59 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001e0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e24:	2309      	movs	r3, #9
 8001e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e2a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480e      	ldr	r0, [pc, #56]	; (8001e6c <HAL_LTDC_MspInit+0x2e0>)
 8001e32:	f009 ff43 	bl	800bcbc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2103      	movs	r1, #3
 8001e3a:	2058      	movs	r0, #88	; 0x58
 8001e3c:	f009 f87a 	bl	800af34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e40:	2058      	movs	r0, #88	; 0x58
 8001e42:	f009 f893 	bl	800af6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001e46:	bf00      	nop
 8001e48:	37d0      	adds	r7, #208	; 0xd0
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40016800 	.word	0x40016800
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40021400 	.word	0x40021400
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40021800 	.word	0x40021800
 8001e70:	40020c00 	.word	0x40020c00

08001e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e78:	f008 f826 	bl	8009ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e7c:	f000 f824 	bl	8001ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e80:	f7ff fd64 	bl	800194c <MX_GPIO_Init>
  MX_CRC_Init();
 8001e84:	f7ff faca 	bl	800141c <MX_CRC_Init>
  MX_FMC_Init();
 8001e88:	f7ff fb8e 	bl	80015a8 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8001e8c:	f000 f8a4 	bl	8001fd8 <MX_QUADSPI_Init>
  MX_LTDC_Init();
 8001e90:	f7ff fdfa 	bl	8001a88 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001e94:	f7ff fb2a 	bl	80014ec <MX_DMA2D_Init>
  MX_TIM3_Init();
 8001e98:	f000 fb28 	bl	80024ec <MX_TIM3_Init>
  MX_CAN2_Init();
 8001e9c:	f7ff f8ac 	bl	8000ff8 <MX_CAN2_Init>
  MX_CAN1_Init();
 8001ea0:	f7ff f870 	bl	8000f84 <MX_CAN1_Init>
  MX_DMA_Init();
 8001ea4:	f7ff fafc 	bl	80014a0 <MX_DMA_Init>
  MX_TIM4_Init();
 8001ea8:	f000 fb96 	bl	80025d8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001eac:	f7fe fe0c 	bl	8000ac8 <MX_ADC1_Init>
  MX_TouchGFX_Init();
 8001eb0:	f000 fd2f 	bl	8002912 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 8001eb4:	f7fe fe9a 	bl	8000bec <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001eb8:	f00e fcb6 	bl	8010828 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ebc:	f7ff fcb4 	bl	8001828 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001ec0:	f00e fce6 	bl	8010890 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <main+0x50>
	...

08001ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b094      	sub	sp, #80	; 0x50
 8001ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	2234      	movs	r2, #52	; 0x34
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f023 fb48 	bl	802556c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <SystemClock_Config+0xd8>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <SystemClock_Config+0xd8>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <SystemClock_Config+0xd8>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <SystemClock_Config+0xdc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <SystemClock_Config+0xdc>)
 8001f0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <SystemClock_Config+0xdc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f26:	2302      	movs	r3, #2
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f30:	2319      	movs	r3, #25
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001f34:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001f38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f42:	2302      	movs	r3, #2
 8001f44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f00b fc7e 	bl	800d84c <HAL_RCC_OscConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f56:	f000 f839 	bl	8001fcc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f5a:	f00a fd19 	bl	800c990 <HAL_PWREx_EnableOverDrive>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001f64:	f000 f832 	bl	8001fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f68:	230f      	movs	r3, #15
 8001f6a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	2107      	movs	r1, #7
 8001f86:	4618      	mov	r0, r3
 8001f88:	f00b ff0e 	bl	800dda8 <HAL_RCC_ClockConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001f92:	f000 f81b 	bl	8001fcc <Error_Handler>
  }
}
 8001f96:	bf00      	nop
 8001f98:	3750      	adds	r7, #80	; 0x50
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000

08001fa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fba:	f007 ff93 	bl	8009ee4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40001000 	.word	0x40001000

08001fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
}
 8001fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <Error_Handler+0x8>
	...

08001fd8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <MX_QUADSPI_Init+0x50>)
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <MX_QUADSPI_Init+0x54>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 7;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_QUADSPI_Init+0x50>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_QUADSPI_Init+0x50>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_QUADSPI_Init+0x50>)
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_QUADSPI_Init+0x50>)
 8001ff6:	2217      	movs	r2, #23
 8001ff8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_QUADSPI_Init+0x50>)
 8001ffc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002000:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_QUADSPI_Init+0x50>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <MX_QUADSPI_Init+0x50>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_QUADSPI_Init+0x50>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002014:	4804      	ldr	r0, [pc, #16]	; (8002028 <MX_QUADSPI_Init+0x50>)
 8002016:	f00a fd0b 	bl	800ca30 <HAL_QSPI_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002020:	f7ff ffd4 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20056d20 	.word	0x20056d20
 800202c:	a0001000 	.word	0xa0001000

08002030 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a39      	ldr	r2, [pc, #228]	; (8002134 <HAL_QSPI_MspInit+0x104>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d16c      	bne.n	800212c <HAL_QSPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_QSPI_MspInit+0x108>)
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	4a38      	ldr	r2, [pc, #224]	; (8002138 <HAL_QSPI_MspInit+0x108>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	6393      	str	r3, [r2, #56]	; 0x38
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_QSPI_MspInit+0x108>)
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_QSPI_MspInit+0x108>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a32      	ldr	r2, [pc, #200]	; (8002138 <HAL_QSPI_MspInit+0x108>)
 8002070:	f043 0320 	orr.w	r3, r3, #32
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_QSPI_MspInit+0x108>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_QSPI_MspInit+0x108>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <HAL_QSPI_MspInit+0x108>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_QSPI_MspInit+0x108>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020aa:	2309      	movs	r3, #9
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	4821      	ldr	r0, [pc, #132]	; (800213c <HAL_QSPI_MspInit+0x10c>)
 80020b6:	f009 fe01 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020cc:	230a      	movs	r3, #10
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	4819      	ldr	r0, [pc, #100]	; (800213c <HAL_QSPI_MspInit+0x10c>)
 80020d8:	f009 fdf0 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020dc:	2304      	movs	r3, #4
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020ec:	2309      	movs	r3, #9
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	4812      	ldr	r0, [pc, #72]	; (8002140 <HAL_QSPI_MspInit+0x110>)
 80020f8:	f009 fde0 	bl	800bcbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020fc:	2340      	movs	r3, #64	; 0x40
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800210c:	230a      	movs	r3, #10
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	480a      	ldr	r0, [pc, #40]	; (8002140 <HAL_QSPI_MspInit+0x110>)
 8002118:	f009 fdd0 	bl	800bcbc <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 3, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2103      	movs	r1, #3
 8002120:	205c      	movs	r0, #92	; 0x5c
 8002122:	f008 ff07 	bl	800af34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002126:	205c      	movs	r0, #92	; 0x5c
 8002128:	f008 ff20 	bl	800af6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800212c:	bf00      	nop
 800212e:	3728      	adds	r7, #40	; 0x28
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	a0001000 	.word	0xa0001000
 8002138:	40023800 	.word	0x40023800
 800213c:	40021400 	.word	0x40021400
 8002140:	40020400 	.word	0x40020400

08002144 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_QSPI_MspDeInit+0x40>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d111      	bne.n	800217a <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_QSPI_MspDeInit+0x44>)
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <HAL_QSPI_MspDeInit+0x44>)
 800215c:	f023 0302 	bic.w	r3, r3, #2
 8002160:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002162:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002166:	4809      	ldr	r0, [pc, #36]	; (800218c <HAL_QSPI_MspDeInit+0x48>)
 8002168:	f009 ff54 	bl	800c014 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 800216c:	2144      	movs	r1, #68	; 0x44
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <HAL_QSPI_MspDeInit+0x4c>)
 8002170:	f009 ff50 	bl	800c014 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8002174:	205c      	movs	r0, #92	; 0x5c
 8002176:	f008 ff07 	bl	800af88 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	a0001000 	.word	0xa0001000
 8002188:	40023800 	.word	0x40023800
 800218c:	40021400 	.word	0x40021400
 8002190:	40020400 	.word	0x40020400

08002194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_MspInit+0x4c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_MspInit+0x4c>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_MspInit+0x4c>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_MspInit+0x4c>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_MspInit+0x4c>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_MspInit+0x4c>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	210f      	movs	r1, #15
 80021ce:	f06f 0001 	mvn.w	r0, #1
 80021d2:	f008 feaf 	bl	800af34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	2036      	movs	r0, #54	; 0x36
 80021fa:	f008 fe9b 	bl	800af34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021fe:	2036      	movs	r0, #54	; 0x36
 8002200:	f008 feb4 	bl	800af6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <HAL_InitTick+0xa0>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_InitTick+0xa0>)
 800220a:	f043 0310 	orr.w	r3, r3, #16
 800220e:	6413      	str	r3, [r2, #64]	; 0x40
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_InitTick+0xa0>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800221c:	f107 0210 	add.w	r2, r7, #16
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f00b ff80 	bl	800e12c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800222c:	f00b ff6a 	bl	800e104 <HAL_RCC_GetPCLK1Freq>
 8002230:	4603      	mov	r3, r0
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002238:	4a13      	ldr	r2, [pc, #76]	; (8002288 <HAL_InitTick+0xa4>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0c9b      	lsrs	r3, r3, #18
 8002240:	3b01      	subs	r3, #1
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_InitTick+0xa8>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <HAL_InitTick+0xac>)
 8002248:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_InitTick+0xa8>)
 800224c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002250:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_InitTick+0xa8>)
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_InitTick+0xa8>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_InitTick+0xa8>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002264:	4809      	ldr	r0, [pc, #36]	; (800228c <HAL_InitTick+0xa8>)
 8002266:	f00c fc3a 	bl	800eade <HAL_TIM_Base_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d104      	bne.n	800227a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002270:	4806      	ldr	r0, [pc, #24]	; (800228c <HAL_InitTick+0xa8>)
 8002272:	f00c fc8b 	bl	800eb8c <HAL_TIM_Base_Start_IT>
 8002276:	4603      	mov	r3, r0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3730      	adds	r7, #48	; 0x30
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	431bde83 	.word	0x431bde83
 800228c:	20056d6c 	.word	0x20056d6c
 8002290:	40001000 	.word	0x40001000

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <NMI_Handler+0x4>

0800229a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <HardFault_Handler+0x4>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <MemManage_Handler+0x4>

080022a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <DMA1_Stream0_IRQHandler+0x10>)
 80022c6:	f009 f887 	bl	800b3d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20056eb0 	.word	0x20056eb0

080022d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <DMA1_Stream4_IRQHandler+0x10>)
 80022da:	f009 f87d 	bl	800b3d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20056e50 	.word	0x20056e50

080022e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <CAN1_RX0_IRQHandler+0x10>)
 80022ee:	f008 fb16 	bl	800a91e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20056b90 	.word	0x20056b90

080022fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM6_DAC_IRQHandler+0x10>)
 8002302:	f00d f8fd 	bl	800f500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20056d6c 	.word	0x20056d6c

08002310 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <CAN2_RX0_IRQHandler+0x10>)
 8002316:	f008 fb02 	bl	800a91e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20056b40 	.word	0x20056b40

08002324 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <LTDC_IRQHandler+0x10>)
 800232a:	f00a f869 	bl	800c400 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20056c78 	.word	0x20056c78

08002338 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <DMA2D_IRQHandler+0x10>)
 800233e:	f009 fb0f 	bl	800b960 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20056bdc 	.word	0x20056bdc

0800234c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <QUADSPI_IRQHandler+0x10>)
 8002352:	f00a fc0d 	bl	800cb70 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20056d20 	.word	0x20056d20

08002360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	return 1;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <_kill>:

int _kill(int pid, int sig)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800237a:	f023 f89d 	bl	80254b8 <__errno>
 800237e:	4603      	mov	r3, r0
 8002380:	2216      	movs	r2, #22
 8002382:	601a      	str	r2, [r3, #0]
	return -1;
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_exit>:

void _exit (int status)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ffe7 	bl	8002370 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023a2:	e7fe      	b.n	80023a2 <_exit+0x12>

080023a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	e00a      	b.n	80023cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023b6:	f3af 8000 	nop.w
 80023ba:	4601      	mov	r1, r0
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	60ba      	str	r2, [r7, #8]
 80023c2:	b2ca      	uxtb	r2, r1
 80023c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	dbf0      	blt.n	80023b6 <_read+0x12>
	}

return len;
 80023d4:	687b      	ldr	r3, [r7, #4]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e009      	b.n	8002404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	60ba      	str	r2, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	dbf1      	blt.n	80023f0 <_write+0x12>
	}
	return len;
 800240c:	687b      	ldr	r3, [r7, #4]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <_close>:

int _close(int file)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
	return -1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800243e:	605a      	str	r2, [r3, #4]
	return 0;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <_isatty>:

int _isatty(int file)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
	return 1;
 8002456:	2301      	movs	r3, #1
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
	return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <_sbrk+0x5c>)
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <_sbrk+0x60>)
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <_sbrk+0x64>)
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <_sbrk+0x68>)
 80024a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d207      	bcs.n	80024c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b0:	f023 f802 	bl	80254b8 <__errno>
 80024b4:	4603      	mov	r3, r0
 80024b6:	220c      	movs	r2, #12
 80024b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	e009      	b.n	80024d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <_sbrk+0x64>)
 80024d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20080000 	.word	0x20080000
 80024e0:	00000400 	.word	0x00000400
 80024e4:	20000110 	.word	0x20000110
 80024e8:	20056f68 	.word	0x20056f68

080024ec <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08e      	sub	sp, #56	; 0x38
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002500:	f107 031c 	add.w	r3, r7, #28
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800250c:	463b      	mov	r3, r7
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	615a      	str	r2, [r3, #20]
 800251c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002520:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <MX_TIM3_Init+0xe8>)
 8002522:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002526:	2200      	movs	r2, #0
 8002528:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <MX_TIM3_Init+0xe4>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002532:	2286      	movs	r2, #134	; 0x86
 8002534:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <MX_TIM3_Init+0xe4>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002542:	4823      	ldr	r0, [pc, #140]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002544:	f00c facb 	bl	800eade <HAL_TIM_Base_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800254e:	f7ff fd3d 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255c:	4619      	mov	r1, r3
 800255e:	481c      	ldr	r0, [pc, #112]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002560:	f00d f9fe 	bl	800f960 <HAL_TIM_ConfigClockSource>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800256a:	f7ff fd2f 	bl	8001fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800256e:	4818      	ldr	r0, [pc, #96]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002570:	f00c fb84 	bl	800ec7c <HAL_TIM_PWM_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800257a:	f7ff fd27 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4619      	mov	r1, r3
 800258c:	4810      	ldr	r0, [pc, #64]	; (80025d0 <MX_TIM3_Init+0xe4>)
 800258e:	f00d ff6f 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002598:	f7ff fd18 	bl	8001fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259c:	2360      	movs	r3, #96	; 0x60
 800259e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ac:	463b      	mov	r3, r7
 80025ae:	2200      	movs	r2, #0
 80025b0:	4619      	mov	r1, r3
 80025b2:	4807      	ldr	r0, [pc, #28]	; (80025d0 <MX_TIM3_Init+0xe4>)
 80025b4:	f00d f8c4 	bl	800f740 <HAL_TIM_PWM_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80025be:	f7ff fd05 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <MX_TIM3_Init+0xe4>)
 80025c4:	f000 f91e 	bl	8002804 <HAL_TIM_MspPostInit>

}
 80025c8:	bf00      	nop
 80025ca:	3738      	adds	r7, #56	; 0x38
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20056e04 	.word	0x20056e04
 80025d4:	40000400 	.word	0x40000400

080025d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08e      	sub	sp, #56	; 0x38
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f8:	463b      	mov	r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	611a      	str	r2, [r3, #16]
 8002606:	615a      	str	r2, [r3, #20]
 8002608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <MX_TIM4_Init+0xe4>)
 800260c:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <MX_TIM4_Init+0xe8>)
 800260e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002610:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <MX_TIM4_Init+0xe4>)
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <MX_TIM4_Init+0xe4>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <MX_TIM4_Init+0xe4>)
 800261e:	22d7      	movs	r2, #215	; 0xd7
 8002620:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <MX_TIM4_Init+0xe4>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <MX_TIM4_Init+0xe4>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800262e:	4823      	ldr	r0, [pc, #140]	; (80026bc <MX_TIM4_Init+0xe4>)
 8002630:	f00c fa55 	bl	800eade <HAL_TIM_Base_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800263a:	f7ff fcc7 	bl	8001fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002648:	4619      	mov	r1, r3
 800264a:	481c      	ldr	r0, [pc, #112]	; (80026bc <MX_TIM4_Init+0xe4>)
 800264c:	f00d f988 	bl	800f960 <HAL_TIM_ConfigClockSource>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002656:	f7ff fcb9 	bl	8001fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800265a:	4818      	ldr	r0, [pc, #96]	; (80026bc <MX_TIM4_Init+0xe4>)
 800265c:	f00c fb0e 	bl	800ec7c <HAL_TIM_PWM_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002666:	f7ff fcb1 	bl	8001fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	4619      	mov	r1, r3
 8002678:	4810      	ldr	r0, [pc, #64]	; (80026bc <MX_TIM4_Init+0xe4>)
 800267a:	f00d fef9 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002684:	f7ff fca2 	bl	8001fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002688:	2360      	movs	r3, #96	; 0x60
 800268a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 800268c:	231e      	movs	r3, #30
 800268e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002698:	463b      	mov	r3, r7
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <MX_TIM4_Init+0xe4>)
 80026a0:	f00d f84e 	bl	800f740 <HAL_TIM_PWM_ConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80026aa:	f7ff fc8f 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026ae:	4803      	ldr	r0, [pc, #12]	; (80026bc <MX_TIM4_Init+0xe4>)
 80026b0:	f000 f8a8 	bl	8002804 <HAL_TIM_MspPostInit>

}
 80026b4:	bf00      	nop
 80026b6:	3738      	adds	r7, #56	; 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20056db8 	.word	0x20056db8
 80026c0:	40000800 	.word	0x40000800

080026c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a45      	ldr	r2, [pc, #276]	; (80027e8 <HAL_TIM_Base_MspInit+0x124>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d142      	bne.n	800275c <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026d6:	4b45      	ldr	r3, [pc, #276]	; (80027ec <HAL_TIM_Base_MspInit+0x128>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a44      	ldr	r2, [pc, #272]	; (80027ec <HAL_TIM_Base_MspInit+0x128>)
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_TIM_Base_MspInit+0x128>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80026ee:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 80026f0:	4a40      	ldr	r2, [pc, #256]	; (80027f4 <HAL_TIM_Base_MspInit+0x130>)
 80026f2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80026f4:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 80026f6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80026fa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026fc:	4b3c      	ldr	r3, [pc, #240]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 80026fe:	2240      	movs	r2, #64	; 0x40
 8002700:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002702:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002704:	2200      	movs	r2, #0
 8002706:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 800270a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800270e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002716:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002718:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 800271a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800271e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002720:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272c:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002732:	482f      	ldr	r0, [pc, #188]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002734:	f008 fd20 	bl	800b178 <HAL_DMA_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 800273e:	f7ff fc45 	bl	8001fcc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800275a:	e040      	b.n	80027de <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <HAL_TIM_Base_MspInit+0x134>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d13b      	bne.n	80027de <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_TIM_Base_MspInit+0x128>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a20      	ldr	r2, [pc, #128]	; (80027ec <HAL_TIM_Base_MspInit+0x128>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_TIM_Base_MspInit+0x128>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 8002780:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <HAL_TIM_Base_MspInit+0x13c>)
 8002782:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 8002786:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800278a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 800279a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 80027a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027a6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 80027aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ae:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80027c2:	480e      	ldr	r0, [pc, #56]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 80027c4:	f008 fcd8 	bl	800b178 <HAL_DMA_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80027ce:	f7ff fbfd 	bl	8001fcc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
 80027d8:	4a08      	ldr	r2, [pc, #32]	; (80027fc <HAL_TIM_Base_MspInit+0x138>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40023800 	.word	0x40023800
 80027f0:	20056e50 	.word	0x20056e50
 80027f4:	40026070 	.word	0x40026070
 80027f8:	40000800 	.word	0x40000800
 80027fc:	20056eb0 	.word	0x20056eb0
 8002800:	40026010 	.word	0x40026010

08002804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_TIM_MspPostInit+0xa8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d11c      	bne.n	8002860 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800283e:	2310      	movs	r3, #16
 8002840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800284e:	2302      	movs	r3, #2
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	4816      	ldr	r0, [pc, #88]	; (80028b4 <HAL_TIM_MspPostInit+0xb0>)
 800285a:	f009 fa2f 	bl	800bcbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800285e:	e021      	b.n	80028a4 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_TIM_MspPostInit+0xb4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d11c      	bne.n	80028a4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 8002870:	f043 0308 	orr.w	r3, r3, #8
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002894:	2302      	movs	r3, #2
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4619      	mov	r1, r3
 800289e:	4807      	ldr	r0, [pc, #28]	; (80028bc <HAL_TIM_MspPostInit+0xb8>)
 80028a0:	f009 fa0c 	bl	800bcbc <HAL_GPIO_Init>
}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020400 	.word	0x40020400
 80028b8:	40000800 	.word	0x40000800
 80028bc:	40020c00 	.word	0x40020c00

080028c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028c6:	490e      	ldr	r1, [pc, #56]	; (8002900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028c8:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028cc:	e002      	b.n	80028d4 <LoopCopyDataInit>

080028ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d2:	3304      	adds	r3, #4

080028d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d8:	d3f9      	bcc.n	80028ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028dc:	4c0b      	ldr	r4, [pc, #44]	; (800290c <LoopFillZerobss+0x26>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e0:	e001      	b.n	80028e6 <LoopFillZerobss>

080028e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e4:	3204      	adds	r2, #4

080028e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e8:	d3fb      	bcc.n	80028e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028ea:	f007 fadb 	bl	8009ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ee:	f022 fdfb 	bl	80254e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f2:	f7ff fabf 	bl	8001e74 <main>
  bx  lr    
 80028f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80028fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002900:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8002904:	080d0160 	.word	0x080d0160
  ldr r2, =_sbss
 8002908:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 800290c:	20056f64 	.word	0x20056f64

08002910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC_IRQHandler>

08002912 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8002916:	f001 fbdf 	bl	80040d8 <touchgfx_init>
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}

0800291e <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8002922:	f001 fc03 	bl	800412c <touchgfx_taskEntry>
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
    {
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
    }
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	080275cc 	.word	0x080275cc

0800294c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    }
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffe9 	bl	800292c <_ZN8touchgfx15TouchControllerD1Ev>
 800295a:	2104      	movs	r1, #4
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f022 fbfa 	bl	8025156 <_ZdlPvj>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <_ZN20STM32TouchControllerD1Ev+0x20>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ffbd 	bl	800292c <_ZN8touchgfx15TouchControllerD1Ev>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	080275b4 	.word	0x080275b4

080029c0 <_ZN20STM32TouchControllerD0Ev>:
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ffe7 	bl	800299c <_ZN20STM32TouchControllerD1Ev>
 80029ce:	2104      	movs	r1, #4
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f022 fbc0 	bl	8025156 <_ZdlPvj>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]

}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]

}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]

}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    {
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
    }
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	080284d4 	.word	0x080284d4

08002a44 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
    }
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ffe9 	bl	8002a24 <_ZN8touchgfx3HALD1Ev>
 8002a52:	217c      	movs	r1, #124	; 0x7c
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f022 fb7e 	bl	8025156 <_ZdlPvj>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4798      	blx	r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	e000      	b.n	8002ab4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8002ab2:	2300      	movs	r3, #0
        }
    }
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f012 fc5d 	bl	8015384 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	33a0      	adds	r3, #160	; 0xa0
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
    }
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
    {
        return false;
 8002ae8:	2300      	movs	r3, #0
    }
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d106      	bne.n	8002b1a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8002b10:	f44f 7125 	mov.w	r1, #660	; 0x294
 8002b14:	4811      	ldr	r0, [pc, #68]	; (8002b5c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8002b16:	f022 fc9d 	bl	8025454 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8002b3a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8002b4a:	701a      	strb	r2, [r3, #0]
    }
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	08026920 	.word	0x08026920
 8002b58:	08026958 	.word	0x08026958
 8002b5c:	080269a8 	.word	0x080269a8
 8002b60:	2005653a 	.word	0x2005653a
 8002b64:	2005653b 	.word	0x2005653b

08002b68 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8002b70:	2300      	movs	r3, #0
    }
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4798      	blx	r3
        }
    }
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3318      	adds	r3, #24
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4798      	blx	r3
 8002bbe:	4603      	mov	r3, r0
    }
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d017      	beq.n	8002c10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8002be0:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d12a      	bne.n	8002c3e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8002bea:	881a      	ldrh	r2, [r3, #0]
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002bee:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002bf2:	881a      	ldrh	r2, [r3, #0]
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002bf6:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8002bf8:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002bfa:	881a      	ldrh	r2, [r3, #0]
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002bfe:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8002c06:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8002c0e:	e016      	b.n	8002c3e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d012      	beq.n	8002c3e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002c1e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8002c22:	881a      	ldrh	r2, [r3, #0]
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002c26:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8002c2e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8002c32:	881a      	ldrh	r2, [r3, #0]
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8002c36:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
    }
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20056534 	.word	0x20056534
 8002c50:	20056530 	.word	0x20056530
 8002c54:	20056536 	.word	0x20056536
 8002c58:	20056532 	.word	0x20056532
 8002c5c:	20056538 	.word	0x20056538

08002c60 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f011 fd5b 	bl	8014726 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fecb 	bl	8002a24 <_ZN8touchgfx3HALD1Ev>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	08027930 	.word	0x08027930

08002c9c <_ZN20TouchGFXGeneratedHALD0Ev>:
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ffe7 	bl	8002c78 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002caa:	217c      	movs	r1, #124	; 0x7c
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f022 fa52 	bl	8025156 <_ZdlPvj>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ffca 	bl	8002c60 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_ZN11TouchGFXHAL10initializeEv>:
{
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXHAL::initialize() {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 fee0 	bl	8004aa4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
/**
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 ff7a 	bl	8004bf0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
/**
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address) {
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6839      	ldr	r1, [r7, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 ff79 	bl	8004c0c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 *
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect) {
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 ff81 	bl	8004c38 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	f001 ff8e 	bl	8004c74 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <_ZN11TouchGFXHAL19configureInterruptsEv>:

/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts() {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 feca 	bl	8004b08 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

	// custom code
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <_ZN11TouchGFXHAL19configureInterruptsEv+0x44>)
 8002d86:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <_ZN11TouchGFXHAL19configureInterruptsEv+0x48>)
 8002d9a:	801a      	strh	r2, [r3, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40016800 	.word	0x40016800
 8002da8:	20000114 	.word	0x20000114
 8002dac:	20000116 	.word	0x20000116

08002db0 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts() {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 feb4 	bl	8004b28 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts() {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 feb6 	bl	8004b44 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:

/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt() {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 feb8 	bl	8004b60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <_ZN11TouchGFXHALD1Ev+0x20>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff35 	bl	8002c78 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	080275e4 	.word	0x080275e4

08002e1c <_ZN11TouchGFXHALD0Ev>:
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ffe7 	bl	8002df8 <_ZN11TouchGFXHALD1Ev>
 8002e2a:	217c      	movs	r1, #124	; 0x7c
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f022 f992 	bl	8025156 <_ZdlPvj>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002e40:	2200      	movs	r2, #0
 8002e42:	2101      	movs	r1, #1
 8002e44:	2001      	movs	r0, #1
 8002e46:	f00d fe5f 	bl	8010b08 <osSemaphoreNew>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002e4e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002e5c:	2126      	movs	r1, #38	; 0x26
 8002e5e:	480e      	ldr	r0, [pc, #56]	; (8002e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002e60:	f022 faf8 	bl	8025454 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2104      	movs	r1, #4
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f00d ffa7 	bl	8010dbc <osMessageQueueNew>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002e72:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d105      	bne.n	8002e88 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002e80:	212a      	movs	r1, #42	; 0x2a
 8002e82:	4805      	ldr	r0, [pc, #20]	; (8002e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002e84:	f022 fae6 	bl	8025454 <__assert_func>
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000118 	.word	0x20000118
 8002e90:	080269f0 	.word	0x080269f0
 8002e94:	08026a3c 	.word	0x08026a3c
 8002e98:	08026a6c 	.word	0x08026a6c
 8002e9c:	2000011c 	.word	0x2000011c
 8002ea0:	08026ae8 	.word	0x08026ae8

08002ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f00d fec5 	bl	8010c40 <osSemaphoreAcquire>
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000118 	.word	0x20000118

08002ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00d ff1f 	bl	8010d0c <osSemaphoreRelease>
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000118 	.word	0x20000118

08002ed8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f00d feac 	bl	8010c40 <osSemaphoreAcquire>
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000118 	.word	0x20000118

08002ef0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f00d ff07 	bl	8010d0c <osSemaphoreRelease>
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000118 	.word	0x20000118

08002f08 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	2300      	movs	r3, #0
 8002f12:	2200      	movs	r2, #0
 8002f14:	4903      	ldr	r1, [pc, #12]	; (8002f24 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8002f16:	f00d ffd7 	bl	8010ec8 <osMessageQueuePut>
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	2000011c 	.word	0x2000011c
 8002f24:	20000004 	.word	0x20000004

08002f28 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	1d39      	adds	r1, r7, #4
 8002f34:	2300      	movs	r3, #0
 8002f36:	2200      	movs	r2, #0
 8002f38:	f00e f83a 	bl	8010fb0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	1d39      	adds	r1, r7, #4
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	2200      	movs	r2, #0
 8002f48:	f00e f832 	bl	8010fb0 <osMessageQueueGet>
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	2000011c 	.word	0x2000011c

08002f58 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f00d fda1 	bl	8010aac <osDelay>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	af00      	add	r7, sp, #0
    osThreadYield();
 8002f76:	f00d fd67 	bl	8010a48 <osThreadYield>
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db0b      	blt.n	8002faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4907      	ldr	r1, [pc, #28]	; (8002fb8 <__NVIC_EnableIRQ+0x38>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000e100 	.word	0xe000e100

08002fbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	db12      	blt.n	8002ff4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	490a      	ldr	r1, [pc, #40]	; (8003000 <__NVIC_DisableIRQ+0x44>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2001      	movs	r0, #1
 8002fde:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002fe8:	f3bf 8f4f 	dsb	sy
}
 8002fec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fee:	f3bf 8f6f 	isb	sy
}
 8002ff2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100

08003004 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
        : color(0)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
    {
    }
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    {
        return color;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
    }
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    {
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	601a      	str	r2, [r3, #0]
    }
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	08027700 	.word	0x08027700

08003058 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
    }
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ffe9 	bl	8003038 <_ZN8touchgfx9DMA_QueueD1Ev>
 8003066:	2104      	movs	r1, #4
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f022 f874 	bl	8025156 <_ZdlPvj>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3344      	adds	r3, #68	; 0x44
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
    }
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
    {
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	601a      	str	r2, [r3, #0]
    }
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	08028a14 	.word	0x08028a14

080030b4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    }
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ffe9 	bl	8003094 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80030c2:	210c      	movs	r1, #12
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f022 f846 	bl	8025156 <_ZdlPvj>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	721a      	strb	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	725a      	strb	r2, [r3, #9]
    {
    }
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	08028a14 	.word	0x08028a14

08003108 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8003110:	2301      	movs	r3, #1
    }
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3328      	adds	r3, #40	; 0x28
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4610      	mov	r0, r2
 8003132:	4798      	blx	r3
    }
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
        return instance;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
    }
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	2005653c 	.word	0x2005653c

08003154 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3314      	adds	r3, #20
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4610      	mov	r0, r2
 800316c:	4798      	blx	r3
    }
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800317e:	f7ff ffdd 	bl	800313c <_ZN8touchgfx3HAL11getInstanceEv>
 8003182:	4603      	mov	r3, r0
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ffe5 	bl	8003154 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	330c      	adds	r3, #12
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff30 	bl	8003004 <_ZN8touchgfx9colortypeC1Ev>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	330c      	adds	r3, #12
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f7ff ff87 	bl	80030d4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80031c6:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <_ZN10STM32F7DMAC1Ev+0x50>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f103 000c 	add.w	r0, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3320      	adds	r3, #32
 80031d6:	2260      	movs	r2, #96	; 0x60
 80031d8:	4619      	mov	r1, r3
 80031da:	f012 fa3d 	bl	8015658 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3320      	adds	r3, #32
 80031e2:	245f      	movs	r4, #95	; 0x5f
 80031e4:	461d      	mov	r5, r3
 80031e6:	2c00      	cmp	r4, #0
 80031e8:	db05      	blt.n	80031f6 <_ZN10STM32F7DMAC1Ev+0x46>
 80031ea:	4628      	mov	r0, r5
 80031ec:	f7ff ffd1 	bl	8003192 <_ZN8touchgfx6BlitOpC1Ev>
 80031f0:	3520      	adds	r5, #32
 80031f2:	3c01      	subs	r4, #1
 80031f4:	e7f7      	b.n	80031e6 <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003200:	080276b0 	.word	0x080276b0

08003204 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	4a09      	ldr	r2, [pc, #36]	; (8003234 <_ZN10STM32F7DMAD1Ev+0x30>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003212:	205a      	movs	r0, #90	; 0x5a
 8003214:	f7ff fed2 	bl	8002fbc <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	330c      	adds	r3, #12
 800321c:	4618      	mov	r0, r3
 800321e:	f000 faad 	bl	800377c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff35 	bl	8003094 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	080276b0 	.word	0x080276b0

08003238 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
}
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ffdf 	bl	8003204 <_ZN10STM32F7DMAD1Ev>
 8003246:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f021 ff83 	bl	8025156 <_ZdlPvj>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4a0f      	ldr	r2, [pc, #60]	; (80032a8 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800326a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800326e:	6313      	str	r3, [r2, #48]	; 0x30
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003282:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003286:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800328e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003292:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <_ZN10STM32F7DMA10initializeEv+0x50>)
 8003296:	4a06      	ldr	r2, [pc, #24]	; (80032b0 <_ZN10STM32F7DMA10initializeEv+0x54>)
 8003298:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800329a:	205a      	movs	r0, #90	; 0x5a
 800329c:	f7ff fe70 	bl	8002f80 <__NVIC_EnableIRQ>
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	20056bdc 	.word	0x20056bdc
 80032b0:	08003177 	.word	0x08003177

080032b4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]

    switch (format)
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	2b0b      	cmp	r3, #11
 80032c8:	d826      	bhi.n	8003318 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	0800330d 	.word	0x0800330d
 80032d4:	08003307 	.word	0x08003307
 80032d8:	08003301 	.word	0x08003301
 80032dc:	08003319 	.word	0x08003319
 80032e0:	08003319 	.word	0x08003319
 80032e4:	08003319 	.word	0x08003319
 80032e8:	08003319 	.word	0x08003319
 80032ec:	08003313 	.word	0x08003313
 80032f0:	08003313 	.word	0x08003313
 80032f4:	08003313 	.word	0x08003313
 80032f8:	08003313 	.word	0x08003313
 80032fc:	08003313 	.word	0x08003313
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
        break;
 8003304:	e00e      	b.n	8003324 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003306:	2301      	movs	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
        break;
 800330a:	e00b      	b.n	8003324 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800330c:	2302      	movs	r3, #2
 800330e:	60fb      	str	r3, [r7, #12]
        break;
 8003310:	e008      	b.n	8003324 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8003312:	2305      	movs	r3, #5
 8003314:	60fb      	str	r3, [r7, #12]
        break;
 8003316:	e005      	b.n	8003324 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800331a:	4a06      	ldr	r2, [pc, #24]	; (8003334 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800331c:	2164      	movs	r1, #100	; 0x64
 800331e:	4806      	ldr	r0, [pc, #24]	; (8003338 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8003320:	f022 f898 	bl	8025454 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003324:	68fb      	ldr	r3, [r7, #12]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	08026b2c 	.word	0x08026b2c
 8003334:	08026b48 	.word	0x08026b48
 8003338:	08026b94 	.word	0x08026b94

0800333c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	2b0a      	cmp	r3, #10
 8003350:	d821      	bhi.n	8003396 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003391 	.word	0x08003391
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003385 	.word	0x08003385
 8003364:	08003397 	.word	0x08003397
 8003368:	08003397 	.word	0x08003397
 800336c:	08003397 	.word	0x08003397
 8003370:	08003397 	.word	0x08003397
 8003374:	0800338b 	.word	0x0800338b
 8003378:	0800338b 	.word	0x0800338b
 800337c:	0800338b 	.word	0x0800338b
 8003380:	0800338b 	.word	0x0800338b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
        break;
 8003388:	e00b      	b.n	80033a2 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800338a:	2301      	movs	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
        break;
 800338e:	e008      	b.n	80033a2 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003390:	2302      	movs	r3, #2
 8003392:	60fb      	str	r3, [r7, #12]
        break;
 8003394:	e005      	b.n	80033a2 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8003398:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800339a:	2185      	movs	r1, #133	; 0x85
 800339c:	4805      	ldr	r0, [pc, #20]	; (80033b4 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800339e:	f022 f859 	bl	8025454 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	08026b2c 	.word	0x08026b2c
 80033b0:	08026c0c 	.word	0x08026c0c
 80033b4:	08026b94 	.word	0x08026b94

080033b8 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80033c0:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	7f5b      	ldrb	r3, [r3, #29]
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ff67 	bl	80032b4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80033e6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	7f9b      	ldrb	r3, [r3, #30]
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ff60 	bl	80032b4 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80033f4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	7f9b      	ldrb	r3, [r3, #30]
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff9d 	bl	800333c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003402:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	8b5b      	ldrh	r3, [r3, #26]
 8003408:	461a      	mov	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	8a9b      	ldrh	r3, [r3, #20]
 800340e:	1ad2      	subs	r2, r2, r3
 8003410:	4b97      	ldr	r3, [pc, #604]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	8b5b      	ldrh	r3, [r3, #26]
 8003418:	461a      	mov	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	8a9b      	ldrh	r3, [r3, #20]
 800341e:	1ad2      	subs	r2, r2, r3
 8003420:	4b93      	ldr	r3, [pc, #588]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003422:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	8b1b      	ldrh	r3, [r3, #24]
 8003428:	461a      	mov	r2, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	8a9b      	ldrh	r3, [r3, #20]
 800342e:	1ad2      	subs	r2, r2, r3
 8003430:	4b8f      	ldr	r3, [pc, #572]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003432:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003434:	4a8e      	ldr	r2, [pc, #568]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	8adb      	ldrh	r3, [r3, #22]
 800343e:	461a      	mov	r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	8a9b      	ldrh	r3, [r3, #20]
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	4b89      	ldr	r3, [pc, #548]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800344a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	4b87      	ldr	r3, [pc, #540]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003452:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4b85      	ldr	r3, [pc, #532]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800345a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003464:	d037      	beq.n	80034d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8003466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346a:	f200 80e4 	bhi.w	8003636 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 800346e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003472:	d015      	beq.n	80034a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003478:	f200 80dd 	bhi.w	8003636 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d045      	beq.n	800350c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	f200 80d8 	bhi.w	8003636 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	f000 80c0 	beq.w	800360c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	f200 80d2 	bhi.w	8003636 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003492:	2b04      	cmp	r3, #4
 8003494:	f000 80a5 	beq.w	80035e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8003498:	2b20      	cmp	r3, #32
 800349a:	f000 80b7 	beq.w	800360c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 800349e:	e0ca      	b.n	8003636 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	7f1b      	ldrb	r3, [r3, #28]
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	4619      	mov	r1, r3
 80034a8:	4a71      	ldr	r2, [pc, #452]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80034aa:	4b72      	ldr	r3, [pc, #456]	; (8003674 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	4c6e      	ldr	r4, [pc, #440]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fdb2 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 80034bc:	4603      	mov	r3, r0
 80034be:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80034c0:	4a6b      	ldr	r2, [pc, #428]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	4b69      	ldr	r3, [pc, #420]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80034cc:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80034ce:	4b68      	ldr	r3, [pc, #416]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80034d0:	4a69      	ldr	r2, [pc, #420]	; (8003678 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80034d2:	601a      	str	r2, [r3, #0]
        break;
 80034d4:	e0c8      	b.n	8003668 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	7f1b      	ldrb	r3, [r3, #28]
 80034da:	061b      	lsls	r3, r3, #24
 80034dc:	4619      	mov	r1, r3
 80034de:	4a64      	ldr	r2, [pc, #400]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80034e0:	4b66      	ldr	r3, [pc, #408]	; (800367c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80034e2:	430b      	orrs	r3, r1
 80034e4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	4c61      	ldr	r4, [pc, #388]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fd97 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 80034f2:	4603      	mov	r3, r0
 80034f4:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80034f6:	4a5e      	ldr	r2, [pc, #376]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003502:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003504:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003506:	4a5c      	ldr	r2, [pc, #368]	; (8003678 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003508:	601a      	str	r2, [r3, #0]
        break;
 800350a:	e0ad      	b.n	8003668 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 8003512:	2301      	movs	r3, #1
 8003514:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	7f1b      	ldrb	r3, [r3, #28]
 800351a:	061b      	lsls	r3, r3, #24
 800351c:	461a      	mov	r2, r3
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	4a53      	ldr	r2, [pc, #332]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003528:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800352a:	4a51      	ldr	r2, [pc, #324]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	4b4e      	ldr	r3, [pc, #312]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003536:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1d1a      	adds	r2, r3, #4
 800353c:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 800354a:	2b01      	cmp	r3, #1
 800354c:	d00d      	beq.n	800356a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800354e:	e020      	b.n	8003592 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003550:	4b47      	ldr	r3, [pc, #284]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003556:	4013      	ands	r3, r2
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	8852      	ldrh	r2, [r2, #2]
 800355c:	3a01      	subs	r2, #1
 800355e:	0212      	lsls	r2, r2, #8
 8003560:	4611      	mov	r1, r2
 8003562:	4a43      	ldr	r2, [pc, #268]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003564:	430b      	orrs	r3, r1
 8003566:	61d3      	str	r3, [r2, #28]
            break;
 8003568:	e019      	b.n	800359e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	7f1b      	ldrb	r3, [r3, #28]
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d101      	bne.n	8003576 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 8003572:	2300      	movs	r3, #0
 8003574:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003576:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	4b41      	ldr	r3, [pc, #260]	; (8003680 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800357c:	4013      	ands	r3, r2
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	8852      	ldrh	r2, [r2, #2]
 8003582:	3a01      	subs	r2, #1
 8003584:	0212      	lsls	r2, r2, #8
 8003586:	4313      	orrs	r3, r2
 8003588:	4a39      	ldr	r2, [pc, #228]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800358a:	f043 0310 	orr.w	r3, r3, #16
 800358e:	61d3      	str	r3, [r2, #28]
            break;
 8003590:	e005      	b.n	800359e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 8003592:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8003594:	4a3c      	ldr	r2, [pc, #240]	; (8003688 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8003596:	21ff      	movs	r1, #255	; 0xff
 8003598:	483c      	ldr	r0, [pc, #240]	; (800368c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 800359a:	f021 ff5b 	bl	8025454 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800359e:	4b34      	ldr	r3, [pc, #208]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4a33      	ldr	r2, [pc, #204]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035a4:	f043 0320 	orr.w	r3, r3, #32
 80035a8:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80035aa:	4b31      	ldr	r3, [pc, #196]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 80035c0:	f7ff fcd7 	bl	8002f72 <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80035c4:	e7f1      	b.n	80035aa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80035c6:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035c8:	2210      	movs	r2, #16
 80035ca:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 80035cc:	7ffb      	ldrb	r3, [r7, #31]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80035d2:	4b27      	ldr	r3, [pc, #156]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035d4:	4a28      	ldr	r2, [pc, #160]	; (8003678 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80035d6:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 80035d8:	e046      	b.n	8003668 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80035da:	4b25      	ldr	r3, [pc, #148]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035dc:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 80035de:	601a      	str	r2, [r3, #0]
      break;
 80035e0:	e042      	b.n	8003668 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	7f1b      	ldrb	r3, [r3, #28]
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	461a      	mov	r2, r3
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	4a20      	ldr	r2, [pc, #128]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f4:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80035f6:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003602:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003608:	601a      	str	r2, [r3, #0]
        break;
 800360a:	e02d      	b.n	8003668 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	7f1b      	ldrb	r3, [r3, #28]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	461a      	mov	r2, r3
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	4a15      	ldr	r2, [pc, #84]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800361a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003620:	4a13      	ldr	r2, [pc, #76]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800362c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003630:	4a11      	ldr	r2, [pc, #68]	; (8003678 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003632:	601a      	str	r2, [r3, #0]
        break;
 8003634:	e018      	b.n	8003668 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	7f1b      	ldrb	r3, [r3, #28]
 800363a:	061b      	lsls	r3, r3, #24
 800363c:	461a      	mov	r2, r3
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003648:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	7f5a      	ldrb	r2, [r3, #29]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	7f9b      	ldrb	r3, [r3, #30]
 8003652:	429a      	cmp	r2, r3
 8003654:	d003      	beq.n	800365e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003658:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 800365a:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 800365c:	e003      	b.n	8003666 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800365e:	4b04      	ldr	r3, [pc, #16]	; (8003670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003660:	f240 2201 	movw	r2, #513	; 0x201
 8003664:	601a      	str	r2, [r3, #0]
        break;
 8003666:	bf00      	nop
    }
}
 8003668:	bf00      	nop
 800366a:	3724      	adds	r7, #36	; 0x24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}
 8003670:	4002b000 	.word	0x4002b000
 8003674:	0002000a 	.word	0x0002000a
 8003678:	00020201 	.word	0x00020201
 800367c:	00020009 	.word	0x00020009
 8003680:	ffff00ef 	.word	0xffff00ef
 8003684:	08026c5c 	.word	0x08026c5c
 8003688:	08026c78 	.word	0x08026c78
 800368c:	08026b94 	.word	0x08026b94
 8003690:	00010201 	.word	0x00010201

08003694 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	7f9b      	ldrb	r3, [r3, #30]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fe49 	bl	800333c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80036aa:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80036ac:	4a2f      	ldr	r2, [pc, #188]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	8adb      	ldrh	r3, [r3, #22]
 80036b6:	461a      	mov	r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	8a9b      	ldrh	r3, [r3, #20]
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	4b2a      	ldr	r3, [pc, #168]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80036ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	8b5b      	ldrh	r3, [r3, #26]
 80036d0:	461a      	mov	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	8a9b      	ldrh	r3, [r3, #20]
 80036d6:	1ad2      	subs	r2, r2, r3
 80036d8:	4b24      	ldr	r3, [pc, #144]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80036da:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d12e      	bne.n	8003742 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	8b5b      	ldrh	r3, [r3, #26]
 80036e8:	461a      	mov	r2, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	8a9b      	ldrh	r3, [r3, #20]
 80036ee:	1ad2      	subs	r2, r2, r3
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80036f2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	8b5b      	ldrh	r3, [r3, #26]
 80036f8:	461a      	mov	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	8a9b      	ldrh	r3, [r3, #20]
 80036fe:	1ad2      	subs	r2, r2, r3
 8003700:	4b1a      	ldr	r3, [pc, #104]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003702:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	7f1b      	ldrb	r3, [r3, #28]
 800370e:	061b      	lsls	r3, r3, #24
 8003710:	4619      	mov	r1, r3
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003714:	4b16      	ldr	r3, [pc, #88]	; (8003770 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8003716:	430b      	orrs	r3, r1
 8003718:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	4c13      	ldr	r4, [pc, #76]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fc7d 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 8003726:	4603      	mov	r3, r0
 8003728:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	4b0f      	ldr	r3, [pc, #60]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003730:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003738:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800373e:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8003740:	e010      	b.n	8003764 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	4c06      	ldr	r4, [pc, #24]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fc63 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 800375a:	4603      	mov	r3, r0
 800375c:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800375e:	4b03      	ldr	r3, [pc, #12]	; (800376c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003760:	4a05      	ldr	r2, [pc, #20]	; (8003778 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8003762:	601a      	str	r2, [r3, #0]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bd90      	pop	{r4, r7, pc}
 800376c:	4002b000 	.word	0x4002b000
 8003770:	00010009 	.word	0x00010009
 8003774:	00020201 	.word	0x00020201
 8003778:	00030201 	.word	0x00030201

0800377c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	4a05      	ldr	r2, [pc, #20]	; (800379c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fc53 	bl	8003038 <_ZN8touchgfx9DMA_QueueD1Ev>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	08028a64 	.word	0x08028a64

080037a0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff ffe7 	bl	800377c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80037ae:	2114      	movs	r1, #20
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f021 fcd0 	bl	8025156 <_ZdlPvj>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
        : color(col)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	601a      	str	r2, [r3, #0]
    }
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	805a      	strh	r2, [r3, #2]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	809a      	strh	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	80da      	strh	r2, [r3, #6]
    {
    }
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6013      	str	r3, [r2, #0]
    }
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	200565b8 	.word	0x200565b8

0800382c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    {
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
    }
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	0802791c 	.word	0x0802791c

0800384c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    }
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ffe9 	bl	800382c <_ZN8touchgfx12FontProviderD1Ev>
 800385a:	2104      	movs	r1, #4
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f021 fc7a 	bl	8025156 <_ZdlPvj>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800387a:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	611a      	str	r2, [r3, #16]
    {
    }
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	0802790c 	.word	0x0802790c

080038ac <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
    {
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
    }
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	0802790c 	.word	0x0802790c

080038cc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    }
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ffe9 	bl	80038ac <_ZN8touchgfx7MVPHeapD1Ev>
 80038da:	2114      	movs	r1, #20
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f021 fc3a 	bl	8025156 <_ZdlPvj>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
    {
    }
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
    {
    }
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
    {
    }
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	70fb      	strb	r3, [r7, #3]
    {
    }
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
    {
    }
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
    {
    }
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
    {
 8003978:	4a04      	ldr	r2, [pc, #16]	; (800398c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	601a      	str	r2, [r3, #0]
    }
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	080278e4 	.word	0x080278e4

08003990 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
    }
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ffe9 	bl	8003970 <_ZN8touchgfx15UIEventListenerD1Ev>
 800399e:	2104      	movs	r1, #4
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f021 fbd8 	bl	8025156 <_ZdlPvj>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
    {
 80039b8:	4a04      	ldr	r2, [pc, #16]	; (80039cc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
    }
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	080292d0 	.word	0x080292d0

080039d0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    }
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffe9 	bl	80039b0 <_ZN8touchgfx3LCDD1Ev>
 80039de:	2108      	movs	r1, #8
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f021 fbb8 	bl	8025156 <_ZdlPvj>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70fb      	strb	r3, [r7, #3]
    {
    }
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003a1a:	6810      	ldr	r0, [r2, #0]
 8003a1c:	6851      	ldr	r1, [r2, #4]
 8003a1e:	c303      	stmia	r3!, {r0, r1}
    }
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    {
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
    }
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	080278cc 	.word	0x080278cc

08003a4c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
    }
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ffe9 	bl	8003a2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f021 fb7a 	bl	8025156 <_ZdlPvj>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff77 	bl	8003970 <_ZN8touchgfx15UIEventListenerD1Ev>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	080293a8 	.word	0x080293a8

08003a90 <_ZN8touchgfx11ApplicationD0Ev>:
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ffe7 	bl	8003a6c <_ZN8touchgfx11ApplicationD1Ev>
 8003a9e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f021 fb57 	bl	8025156 <_ZdlPvj>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f804 	bl	8003ac8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00f      	beq.n	8003afa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4610      	mov	r0, r2
 8003b14:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	4a05      	ldr	r2, [pc, #20]	; (8003b48 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff97 	bl	8003a6c <_ZN8touchgfx11ApplicationD1Ev>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	08027888 	.word	0x08027888

08003b4c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ffe7 	bl	8003b28 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003b5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f021 faf9 	bl	8025156 <_ZdlPvj>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fd07 	bl	8004598 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ffcb 	bl	8003b28 <_ZN8touchgfx14MVPApplicationD1Ev>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	0802782c 	.word	0x0802782c

08003ba0 <_ZN23FrontendApplicationBaseD0Ev>:
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ffe1 	bl	8003b70 <_ZN23FrontendApplicationBaseD1Ev>
 8003bae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f021 facf 	bl	8025156 <_ZdlPvj>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <_ZN19FrontendApplicationD1Ev+0x20>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ffcb 	bl	8003b70 <_ZN23FrontendApplicationBaseD1Ev>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	080277e8 	.word	0x080277e8

08003be8 <_ZN19FrontendApplicationD0Ev>:
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ffe7 	bl	8003bc4 <_ZN19FrontendApplicationD1Ev>
 8003bf6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f021 faab 	bl	8025156 <_ZdlPvj>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f004 fd49 	bl	80086b0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f014 f9cd 	bl	8017fc0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	801a      	strh	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	805a      	strh	r2, [r3, #2]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	809a      	strh	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	80da      	strh	r2, [r3, #6]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	811a      	strh	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	815a      	strh	r2, [r3, #10]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	819a      	strh	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	739a      	strb	r2, [r3, #14]
        {
        }
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ffd5 	bl	8003c2e <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	829a      	strh	r2, [r3, #20]
    {
    }
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8003caa:	4a55      	ldr	r2, [pc, #340]	; (8003e00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	611a      	str	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	615a      	str	r2, [r3, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	331c      	adds	r3, #28
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ffcb 	bl	8003c74 <_ZN8touchgfx8GesturesC1Ev>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3350      	adds	r3, #80	; 0x50
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fd58 	bl	80037de <_ZN8touchgfx4RectC1Ev>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	659a      	str	r2, [r3, #88]	; 0x58
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	661a      	str	r2, [r3, #96]	; 0x60
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	671a      	str	r2, [r3, #112]	; 0x70
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8003db6:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003dbe:	8b3b      	ldrh	r3, [r7, #24]
 8003dc0:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8003dc2:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003dc4:	8bbb      	ldrh	r3, [r7, #28]
 8003dc6:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003dd0:	881a      	ldrh	r2, [r3, #0]
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8003dd4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8003ddc:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8003dde:	8b3a      	ldrh	r2, [r7, #24]
 8003de0:	8bbb      	ldrh	r3, [r7, #28]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	bf34      	ite	cc
 8003de6:	2301      	movcc	r3, #1
 8003de8:	2300      	movcs	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	080284d4 	.word	0x080284d4
 8003e04:	2005653c 	.word	0x2005653c
 8003e08:	20056530 	.word	0x20056530
 8003e0c:	20056532 	.word	0x20056532
 8003e10:	20056534 	.word	0x20056534
 8003e14:	20056536 	.word	0x20056536
 8003e18:	20056538 	.word	0x20056538

08003e1c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fba7 	bl	800557c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	f7ff fd0b 	bl	800386c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8003e56:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	601a      	str	r2, [r3, #0]
    {

    }
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	080277d4 	.word	0x080277d4

08003e6c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4801      	ldr	r0, [pc, #4]	; (8003e78 <__tcf_0+0xc>)
 8003e72:	f000 f965 	bl	8004140 <_ZN12FrontendHeapD1Ev>
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000138 	.word	0x20000138

08003e7c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	f3bf 8f5b 	dmb	ish
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf0c      	ite	eq
 8003e92:	2301      	moveq	r3, #1
 8003e94:	2300      	movne	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003e9c:	480b      	ldr	r0, [pc, #44]	; (8003ecc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003e9e:	f021 f95c 	bl	802515a <__cxa_guard_acquire>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf14      	ite	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	2300      	moveq	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8003eb2:	4807      	ldr	r0, [pc, #28]	; (8003ed0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003eb4:	f000 f868 	bl	8003f88 <_ZN12FrontendHeapC1Ev>
 8003eb8:	4804      	ldr	r0, [pc, #16]	; (8003ecc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003eba:	f021 f95a 	bl	8025172 <__cxa_guard_release>
 8003ebe:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8003ec0:	f021 fae6 	bl	8025490 <atexit>
        return instance;
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20022918 	.word	0x20022918
 8003ed0:	20000138 	.word	0x20000138
 8003ed4:	08003e6d 	.word	0x08003e6d

08003ed8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fcdf 	bl	80038ac <_ZN8touchgfx7MVPHeapD1Ev>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	080277d4 	.word	0x080277d4

08003efc <_ZN16FrontendHeapBaseD0Ev>:
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ffe7 	bl	8003ed8 <_ZN16FrontendHeapBaseD1Ev>
 8003f0a:	2114      	movs	r1, #20
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f021 f922 	bl	8025156 <_ZdlPvj>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f010 fa18 	bl	801435c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003f2c:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	080277a0 	.word	0x080277a0

08003f40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f010 fa06 	bl	801435c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003f50:	4a03      	ldr	r2, [pc, #12]	; (8003f60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	0802776c 	.word	0x0802776c

08003f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f010 f9f4 	bl	801435c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003f74:	4a03      	ldr	r2, [pc, #12]	; (8003f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	08027738 	.word	0x08027738

08003f88 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003f88:	b5b0      	push	{r4, r5, r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f103 0414 	add.w	r4, r3, #20
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003fa2:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <_ZN12FrontendHeapC1Ev+0x90>)
 8003fa8:	440b      	add	r3, r1
                     app(model, *this)
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	462a      	mov	r2, r5
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	f7ff ff41 	bl	8003e38 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003fb6:	4a19      	ldr	r2, [pc, #100]	; (800401c <_ZN12FrontendHeapC1Ev+0x94>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3314      	adds	r3, #20
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ffab 	bl	8003f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	332c      	adds	r3, #44	; 0x2c
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ffb8 	bl	8003f40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003fd4:	4413      	add	r3, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ffc4 	bl	8003f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <_ZN12FrontendHeapC1Ev+0x98>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f004 fb56 	bl	8008694 <_ZN5ModelC1Ev>
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <_ZN12FrontendHeapC1Ev+0x90>)
 8003fec:	4413      	add	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	490b      	ldr	r1, [pc, #44]	; (8004020 <_ZN12FrontendHeapC1Ev+0x98>)
 8003ff2:	4411      	add	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f004 fb36 	bl	8008668 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <_ZN12FrontendHeapC1Ev+0x90>)
 8004002:	4413      	add	r3, r2
 8004004:	4619      	mov	r1, r3
 8004006:	f7ff ff09 	bl	8003e1c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bdb0      	pop	{r4, r5, r7, pc}
 8004014:	00022670 	.word	0x00022670
 8004018:	00022688 	.word	0x00022688
 800401c:	08027724 	.word	0x08027724
 8004020:	00022684 	.word	0x00022684

08004024 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	8bbb      	ldrh	r3, [r7, #28]
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	8b3b      	ldrh	r3, [r7, #24]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	f7ff fe2b 	bl	8003c9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8004046:	4a04      	ldr	r2, [pc, #16]	; (8004058 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]
    }
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	08027930 	.word	0x08027930

0800405c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	8bbb      	ldrh	r3, [r7, #28]
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	8b3b      	ldrh	r3, [r7, #24]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	f7ff ffd3 	bl	8004024 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800407e:	4a04      	ldr	r2, [pc, #16]	; (8004090 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]
    }
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	080275e4 	.word	0x080275e4

08004094 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	080275cc 	.word	0x080275cc

080040b4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ffe8 	bl	8004094 <_ZN8touchgfx15TouchControllerC1Ev>
 80040c4:	4a03      	ldr	r2, [pc, #12]	; (80040d4 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	080275b4 	.word	0x080275b4

080040d8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b085      	sub	sp, #20
 80040dc:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80040de:	f000 ffed 	bl	80050bc <_ZN14BitmapDatabase11getInstanceEv>
 80040e2:	4604      	mov	r4, r0
 80040e4:	f000 fff4 	bl	80050d0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80040e8:	4603      	mov	r3, r0
 80040ea:	4619      	mov	r1, r3
 80040ec:	2300      	movs	r3, #0
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2300      	movs	r3, #0
 80040f2:	2200      	movs	r2, #0
 80040f4:	4620      	mov	r0, r4
 80040f6:	f017 f923 	bl	801b340 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80040fa:	4809      	ldr	r0, [pc, #36]	; (8004120 <touchgfx_init+0x48>)
 80040fc:	f7ff fb86 	bl	800380c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8004100:	2000      	movs	r0, #0
 8004102:	f003 ffe5 	bl	80080d0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8004106:	4807      	ldr	r0, [pc, #28]	; (8004124 <touchgfx_init+0x4c>)
 8004108:	f017 f85c 	bl	801b1c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800410c:	f7ff feb6 	bl	8003e7c <_ZN12FrontendHeap11getInstanceEv>
 8004110:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8004112:	4805      	ldr	r0, [pc, #20]	; (8004128 <touchgfx_init+0x50>)
 8004114:	f7fe fdde 	bl	8002cd4 <_ZN11TouchGFXHAL10initializeEv>
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bd90      	pop	{r4, r7, pc}
 8004120:	20023598 	.word	0x20023598
 8004124:	20000008 	.word	0x20000008
 8004128:	2002359c 	.word	0x2002359c

0800412c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <touchgfx_taskEntry+0x10>)
 8004132:	f010 fb5c 	bl	80147ee <_ZN8touchgfx3HAL9taskEntryEv>
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	2002359c 	.word	0x2002359c

08004140 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	4a10      	ldr	r2, [pc, #64]	; (800418c <_ZN12FrontendHeapD1Ev+0x4c>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <_ZN12FrontendHeapD1Ev+0x50>)
 8004152:	4413      	add	r3, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fd35 	bl	8003bc4 <_ZN19FrontendApplicationD1Ev>
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <_ZN12FrontendHeapD1Ev+0x54>)
 800415e:	4413      	add	r3, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f82b 	bl	80041bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	332c      	adds	r3, #44	; 0x2c
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f848 	bl	8004200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3314      	adds	r3, #20
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f867 	bl	8004248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff feab 	bl	8003ed8 <_ZN16FrontendHeapBaseD1Ev>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	08027724 	.word	0x08027724
 8004190:	00022688 	.word	0x00022688
 8004194:	00022670 	.word	0x00022670

08004198 <_ZN12FrontendHeapD0Ev>:
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ffcd 	bl	8004140 <_ZN12FrontendHeapD1Ev>
 80041a6:	4904      	ldr	r1, [pc, #16]	; (80041b8 <_ZN12FrontendHeapD0Ev+0x20>)
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f020 ffd4 	bl	8025156 <_ZdlPvj>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	000227e0 	.word	0x000227e0

080041bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	4a05      	ldr	r2, [pc, #20]	; (80041dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f010 f8c3 	bl	8014358 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	08027738 	.word	0x08027738

080041e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ffe7 	bl	80041bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80041ee:	2114      	movs	r1, #20
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f020 ffb0 	bl	8025156 <_ZdlPvj>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	4a05      	ldr	r2, [pc, #20]	; (8004220 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4618      	mov	r0, r3
 8004212:	f010 f8a1 	bl	8014358 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	0802776c 	.word	0x0802776c

08004224 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ffe7 	bl	8004200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004232:	4904      	ldr	r1, [pc, #16]	; (8004244 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x20>)
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f020 ff8e 	bl	8025156 <_ZdlPvj>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	00022644 	.word	0x00022644

08004248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	4a05      	ldr	r2, [pc, #20]	; (8004268 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	f010 f87d 	bl	8014358 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	080277a0 	.word	0x080277a0

0800426c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ffe7 	bl	8004248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800427a:	2118      	movs	r1, #24
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f020 ff6a 	bl	8025156 <_ZdlPvj>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	4a05      	ldr	r2, [pc, #20]	; (80042ac <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fb87 	bl	80039b0 <_ZN8touchgfx3LCDD1Ev>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	0802a3a0 	.word	0x0802a3a0

080042b0 <_ZN8touchgfx8LCD24bppD0Ev>:
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ffe7 	bl	800428c <_ZN8touchgfx8LCD24bppD1Ev>
 80042be:	2158      	movs	r1, #88	; 0x58
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f020 ff48 	bl	8025156 <_ZdlPvj>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <_Z41__static_initialization_and_destruction_0ii>:
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b094      	sub	sp, #80	; 0x50
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 8129 	bne.w	8004534 <_Z41__static_initialization_and_destruction_0ii+0x264>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042e8:	4293      	cmp	r3, r2
 80042ea:	f040 8123 	bne.w	8004534 <_Z41__static_initialization_and_destruction_0ii+0x264>
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004300:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004308:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800430c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004314:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004318:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	461a      	mov	r2, r3
 8004320:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	431a      	orrs	r2, r3
 8004328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800432c:	4313      	orrs	r3, r2
 800432e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004332:	f107 0320 	add.w	r3, r7, #32
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fa41 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800433e:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8004340:	bf00      	nop
 8004342:	461a      	mov	r2, r3
};

namespace colors
{
    using namespace touchgfx;
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004344:	4b89      	ldr	r3, [pc, #548]	; (800456c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	23ff      	movs	r3, #255	; 0xff
 800434a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800434e:	2300      	movs	r3, #0
 8004350:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004354:	2300      	movs	r3, #0
 8004356:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800435a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800435e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004362:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800436a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800436e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004372:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	461a      	mov	r2, r3
 800437a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	431a      	orrs	r2, r3
 8004382:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004386:	4313      	orrs	r3, r2
 8004388:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800438c:	f107 031c 	add.w	r3, r7, #28
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fa14 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8004398:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800439a:	bf00      	nop
 800439c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800439e:	4b74      	ldr	r3, [pc, #464]	; (8004570 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80043a8:	23ff      	movs	r3, #255	; 0xff
 80043aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80043b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80043bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80043c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80043c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80043cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	461a      	mov	r2, r3
 80043d4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	431a      	orrs	r2, r3
 80043dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80043e6:	f107 0318 	add.w	r3, r7, #24
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f9e7 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80043f2:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80043f4:	bf00      	nop
 80043f6:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80043f8:	4b5e      	ldr	r3, [pc, #376]	; (8004574 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004402:	2300      	movs	r3, #0
 8004404:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004408:	23ff      	movs	r3, #255	; 0xff
 800440a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800440e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004412:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004416:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800441a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800441e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004422:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004426:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	461a      	mov	r2, r3
 800442e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	431a      	orrs	r2, r3
 8004436:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800443a:	4313      	orrs	r3, r2
 800443c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004440:	f107 0314 	add.w	r3, r7, #20
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff f9ba 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800444c:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800444e:	bf00      	nop
 8004450:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8004452:	4b49      	ldr	r3, [pc, #292]	; (8004578 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	23f7      	movs	r3, #247	; 0xf7
 8004458:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800445c:	234c      	movs	r3, #76	; 0x4c
 800445e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8004462:	2302      	movs	r3, #2
 8004464:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004468:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800446c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004470:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004474:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004478:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800447c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004480:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	461a      	mov	r2, r3
 8004488:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	431a      	orrs	r2, r3
 8004490:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004494:	4313      	orrs	r3, r2
 8004496:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800449a:	f107 0310 	add.w	r3, r7, #16
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff f98d 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80044a6:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80044a8:	bf00      	nop
 80044aa:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80044ac:	4b33      	ldr	r3, [pc, #204]	; (800457c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	23f7      	movs	r3, #247	; 0xf7
 80044b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80044b6:	23d2      	movs	r3, #210	; 0xd2
 80044b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80044bc:	2302      	movs	r3, #2
 80044be:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80044c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80044c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80044ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80044d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80044da:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	461a      	mov	r2, r3
 80044e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	431a      	orrs	r2, r3
 80044ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80044f4:	f107 030c 	add.w	r3, r7, #12
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff f960 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8004500:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8004502:	bf00      	nop
 8004504:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8004508:	601a      	str	r2, [r3, #0]
static STM32TouchController tc;
 800450a:	481e      	ldr	r0, [pc, #120]	; (8004584 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800450c:	f7ff fdd2 	bl	80040b4 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8004510:	481d      	ldr	r0, [pc, #116]	; (8004588 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004512:	f7fe fe4d 	bl	80031b0 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8004516:	481d      	ldr	r0, [pc, #116]	; (800458c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004518:	f019 f974 	bl	801d804 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 800451c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	4b16      	ldr	r3, [pc, #88]	; (8004584 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800452c:	4916      	ldr	r1, [pc, #88]	; (8004588 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800452e:	4818      	ldr	r0, [pc, #96]	; (8004590 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004530:	f7ff fd94 	bl	800405c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d113      	bne.n	8004562 <_Z41__static_initialization_and_destruction_0ii+0x292>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004540:	4293      	cmp	r3, r2
 8004542:	d10e      	bne.n	8004562 <_Z41__static_initialization_and_destruction_0ii+0x292>
 8004544:	4812      	ldr	r0, [pc, #72]	; (8004590 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004546:	f7fe fc57 	bl	8002df8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800454a:	4812      	ldr	r0, [pc, #72]	; (8004594 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800454c:	f000 f846 	bl	80045dc <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8004550:	480e      	ldr	r0, [pc, #56]	; (800458c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004552:	f7ff fe9b 	bl	800428c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8004556:	480c      	ldr	r0, [pc, #48]	; (8004588 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004558:	f7fe fe54 	bl	8003204 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 800455c:	4809      	ldr	r0, [pc, #36]	; (8004584 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800455e:	f7fe fa1d 	bl	800299c <_ZN20STM32TouchControllerD1Ev>
}
 8004562:	bf00      	nop
 8004564:	3748      	adds	r7, #72	; 0x48
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000120 	.word	0x20000120
 8004570:	20000124 	.word	0x20000124
 8004574:	20000128 	.word	0x20000128
 8004578:	2000012c 	.word	0x2000012c
 800457c:	20000130 	.word	0x20000130
 8004580:	20000134 	.word	0x20000134
 8004584:	2002291c 	.word	0x2002291c
 8004588:	20022920 	.word	0x20022920
 800458c:	20023540 	.word	0x20023540
 8004590:	2002359c 	.word	0x2002359c
 8004594:	20000008 	.word	0x20000008

08004598 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	4a05      	ldr	r2, [pc, #20]	; (80045b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fa3f 	bl	8003a2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	08027870 	.word	0x08027870

080045bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ffe7 	bl	8004598 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80045ca:	2110      	movs	r1, #16
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f020 fdc2 	bl	8025156 <_ZdlPvj>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_03 = 5; // swisop3_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_04 = 6; // swisop3_50_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	4a05      	ldr	r2, [pc, #20]	; (80045fc <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff f91d 	bl	800382c <_ZN8touchgfx12FontProviderD1Ev>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	080279fc 	.word	0x080279fc

08004600 <_ZN23ApplicationFontProviderD0Ev>:
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ffe7 	bl	80045dc <_ZN23ApplicationFontProviderD1Ev>
 800460e:	2104      	movs	r1, #4
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f020 fda0 	bl	8025156 <_ZdlPvj>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8004628:	2301      	movs	r3, #1
    }
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800463e:	230c      	movs	r3, #12
    }
 8004640:	4618      	mov	r0, r3
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	3308      	adds	r3, #8
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4413      	add	r3, r2
    }
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004680:	887a      	ldrh	r2, [r7, #2]
 8004682:	4613      	mov	r3, r2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	3308      	adds	r3, #8
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4413      	add	r3, r2
    }
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80046a4:	2301      	movs	r3, #1
    }
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80046bc:	4b03      	ldr	r3, [pc, #12]	; (80046cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x18>)
    }
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	0002263c 	.word	0x0002263c

080046d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80046dc:	887b      	ldrh	r3, [r7, #2]
 80046de:	4a06      	ldr	r2, [pc, #24]	; (80046f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 80046e0:	fb02 f303 	mul.w	r3, r2, r3
 80046e4:	3308      	adds	r3, #8
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4413      	add	r3, r2
    }
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	0002263c 	.word	0x0002263c

080046fc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004708:	887b      	ldrh	r3, [r7, #2]
 800470a:	4a06      	ldr	r2, [pc, #24]	; (8004724 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	3308      	adds	r3, #8
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4413      	add	r3, r2
    }
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	0002263c 	.word	0x0002263c

08004728 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004730:	2301      	movs	r3, #1
    }
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004746:	2310      	movs	r3, #16
    }
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004760:	887b      	ldrh	r3, [r7, #2]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	3308      	adds	r3, #8
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4413      	add	r3, r2
    }
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004782:	887b      	ldrh	r3, [r7, #2]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	3308      	adds	r3, #8
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4413      	add	r3, r2
    }
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68d2      	ldr	r2, [r2, #12]
 80047a8:	1052      	asrs	r2, r2, #1
 80047aa:	1899      	adds	r1, r3, r2
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	e00a      	b.n	80047d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	1052      	asrs	r2, r2, #1
 80047c8:	4413      	add	r3, r2
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6892      	ldr	r2, [r2, #8]
 80047d0:	4413      	add	r3, r2
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4608      	mov	r0, r1
 80047d6:	4798      	blx	r3
    }
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d010      	beq.n	8004812 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d107      	bne.n	8004808 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8004808:	2300      	movs	r3, #0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8004812:	2300      	movs	r3, #0
    }
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_GLOBAL__sub_I_touchgfx_init>:
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
 8004824:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004828:	2001      	movs	r0, #1
 800482a:	f7ff fd51 	bl	80042d0 <_Z41__static_initialization_and_destruction_0ii>
 800482e:	bd80      	pop	{r7, pc}

08004830 <_GLOBAL__sub_D_touchgfx_init>:
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
 8004834:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004838:	2000      	movs	r0, #0
 800483a:	f7ff fd49 	bl	80042d0 <_Z41__static_initialization_and_destruction_0ii>
 800483e:	bd80      	pop	{r7, pc}

08004840 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	331c      	adds	r3, #28
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	4798      	blx	r3
    }
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800488a:	3301      	adds	r3, #1
 800488c:	b2da      	uxtb	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d105      	bne.n	80048c4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e027      	b.n	8004914 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d123      	bne.n	8004912 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d014      	beq.n	80048fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3390      	adds	r3, #144	; 0x90
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	4798      	blx	r3
 80048de:	4603      	mov	r3, r0
 80048e0:	461a      	mov	r2, r3
 80048e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d008      	beq.n	80048fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80048ea:	4b0c      	ldr	r3, [pc, #48]	; (800491c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	f083 0301 	eor.w	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80048fc:	2300      	movs	r3, #0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 800490a:	2301      	movs	r3, #1
 800490c:	e002      	b.n	8004914 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8004912:	2300      	movs	r3, #0
    }
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	2005653a 	.word	0x2005653a

08004920 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <__NVIC_EnableIRQ>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db0b      	blt.n	8004966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4907      	ldr	r1, [pc, #28]	; (8004974 <__NVIC_EnableIRQ+0x38>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2001      	movs	r0, #1
 800495e:	fa00 f202 	lsl.w	r2, r0, r2
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	.word	0xe000e100

08004978 <__NVIC_DisableIRQ>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db12      	blt.n	80049b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	f003 021f 	and.w	r2, r3, #31
 8004990:	490a      	ldr	r1, [pc, #40]	; (80049bc <__NVIC_DisableIRQ+0x44>)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2001      	movs	r0, #1
 800499a:	fa00 f202 	lsl.w	r2, r0, r2
 800499e:	3320      	adds	r3, #32
 80049a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80049a4:	f3bf 8f4f 	dsb	sy
}
 80049a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049aa:	f3bf 8f6f 	isb	sy
}
 80049ae:	bf00      	nop
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000e100 	.word	0xe000e100

080049c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	6039      	str	r1, [r7, #0]
 80049ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db0a      	blt.n	80049ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	490c      	ldr	r1, [pc, #48]	; (8004a0c <__NVIC_SetPriority+0x4c>)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	440b      	add	r3, r1
 80049e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049e8:	e00a      	b.n	8004a00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4908      	ldr	r1, [pc, #32]	; (8004a10 <__NVIC_SetPriority+0x50>)
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	3b04      	subs	r3, #4
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	440b      	add	r3, r1
 80049fe:	761a      	strb	r2, [r3, #24]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000e100 	.word	0xe000e100
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004a1a:	4b21      	ldr	r3, [pc, #132]	; (8004aa0 <SCB_CleanInvalidateDCache+0x8c>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004a22:	f3bf 8f4f 	dsb	sy
}
 8004a26:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004a28:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <SCB_CleanInvalidateDCache+0x8c>)
 8004a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a2e:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	0b5b      	lsrs	r3, r3, #13
 8004a34:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004a38:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a42:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004a4c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004a52:	4913      	ldr	r1, [pc, #76]	; (8004aa0 <SCB_CleanInvalidateDCache+0x8c>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1e5a      	subs	r2, r3, #1
 8004a5e:	60ba      	str	r2, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d000      	beq.n	8004a70 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8004a6e:	e7e9      	b.n	8004a44 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1e5a      	subs	r2, r3, #1
 8004a74:	60fa      	str	r2, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf14      	ite	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	2300      	moveq	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d000      	beq.n	8004a86 <SCB_CleanInvalidateDCache+0x72>
    do {
 8004a84:	e7d9      	b.n	8004a3a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8004a86:	f3bf 8f4f 	dsb	sy
}
 8004a8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a8c:	f3bf 8f6f 	isb	sy
}
 8004a90:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8004aa4:	b5b0      	push	{r4, r5, r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f00f fe8b 	bl	80147ca <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8004ab4:	687d      	ldr	r5, [r7, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	335c      	adds	r3, #92	; 0x5c
 8004abc:	681c      	ldr	r4, [r3, #0]
 8004abe:	f013 fb7b 	bl	80181b8 <_ZN8touchgfx11Application11getInstanceEv>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	490d      	ldr	r1, [pc, #52]	; (8004b04 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff ff26 	bl	8004920 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fee1 	bl	80048a0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3380      	adds	r3, #128	; 0x80
 8004ae6:	681c      	ldr	r4, [r3, #0]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2200      	movs	r2, #0
 8004aec:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004af0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2101      	movs	r1, #1
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff feb0 	bl	800485c <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bdb0      	pop	{r4, r5, r7, pc}
 8004b04:	08002f59 	.word	0x08002f59

08004b08 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8004b10:	2109      	movs	r1, #9
 8004b12:	205a      	movs	r0, #90	; 0x5a
 8004b14:	f7ff ff54 	bl	80049c0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8004b18:	2109      	movs	r1, #9
 8004b1a:	2058      	movs	r0, #88	; 0x58
 8004b1c:	f7ff ff50 	bl	80049c0 <__NVIC_SetPriority>
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8004b30:	205a      	movs	r0, #90	; 0x5a
 8004b32:	f7ff ff03 	bl	800493c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8004b36:	2058      	movs	r0, #88	; 0x58
 8004b38:	f7ff ff00 	bl	800493c <__NVIC_EnableIRQ>
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8004b4c:	205a      	movs	r0, #90	; 0x5a
 8004b4e:	f7ff ff13 	bl	8004978 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8004b52:	2058      	movs	r0, #88	; 0x58
 8004b54:	f7ff ff10 	bl	8004978 <__NVIC_DisableIRQ>
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004b68:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004b7a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8004b8e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8004b90:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004b92:	881a      	ldrh	r2, [r3, #0]
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9c:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40016800 	.word	0x40016800
 8004bb4:	20023630 	.word	0x20023630
 8004bb8:	20023632 	.word	0x20023632

08004bbc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f00f fde6 	bl	8014798 <_ZN8touchgfx3HAL10beginFrameEv>
 8004bcc:	4603      	mov	r3, r0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f00f fde5 	bl	80147b0 <_ZN8touchgfx3HAL8endFrameEv>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40016884 	.word	0x40016884

08004c0c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004c16:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40016884 	.word	0x40016884
 8004c34:	40016800 	.word	0x40016800

08004c38 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f00f fd73 	bl	8014732 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004c4c:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 8004c62:	f7ff fed7 	bl	8004a14 <SCB_CleanInvalidateDCache>
    }
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	f00f feba 	bl	8014a02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8004c8e:	4603      	mov	r3, r0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8004ca0:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8004cb6:	89fa      	ldrh	r2, [r7, #14]
 8004cb8:	89bb      	ldrh	r3, [r7, #12]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d304      	bcc.n	8004cc8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8004cbe:	89fa      	ldrh	r2, [r7, #14]
 8004cc0:	89bb      	ldrh	r3, [r7, #12]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	e000      	b.n	8004cca <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40016800 	.word	0x40016800

08004cdc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004ce4:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8004cfa:	f7ff fe8b 	bl	8004a14 <SCB_CleanInvalidateDCache>
    }
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8004d2a:	f7ff fe73 	bl	8004a14 <SCB_CleanInvalidateDCache>
    }
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	e000ed00 	.word	0xe000ed00

08004d3c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8004d44:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <HAL_LTDC_LineEventCallback+0x74>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	4a1a      	ldr	r2, [pc, #104]	; (8004db4 <HAL_LTDC_LineEventCallback+0x78>)
 8004d4a:	8812      	ldrh	r2, [r2, #0]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d017      	beq.n	8004d8a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_LTDC_LineEventCallback+0x7c>)
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f007 fc43 	bl	800c5ec <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8004d66:	f7fe f9e9 	bl	800313c <_ZN8touchgfx3HAL11getInstanceEv>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff fd85 	bl	800487c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8004d72:	f7fe f8c9 	bl	8002f08 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8004d76:	f7fe f9e1 	bl	800313c <_ZN8touchgfx3HAL11getInstanceEv>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f010 fb01 	bl	8015384 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8004d82:	2000      	movs	r0, #0
 8004d84:	f7fd fe2c 	bl	80029e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8004d88:	e00e      	b.n	8004da8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <HAL_LTDC_LineEventCallback+0x78>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f007 fc2b 	bl	800c5ec <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8004d96:	2000      	movs	r0, #0
 8004d98:	f7fd fe2d 	bl	80029f6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8004d9c:	f7fe f9ce 	bl	800313c <_ZN8touchgfx3HAL11getInstanceEv>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fd4c 	bl	8004840 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8004da8:	bf00      	nop
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40016800 	.word	0x40016800
 8004db4:	20023630 	.word	0x20023630
 8004db8:	20023632 	.word	0x20023632

08004dbc <_Z41__static_initialization_and_destruction_0ii>:
}
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b092      	sub	sp, #72	; 0x48
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	f040 8114 	bne.w	8004ff6 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	f040 810e 	bne.w	8004ff6 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004dec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004df4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004df8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004e04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	431a      	orrs	r2, r3
 8004e14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004e1e:	f107 0320 	add.w	r3, r7, #32
 8004e22:	4611      	mov	r1, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fe fccb 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8004e2c:	bf00      	nop
 8004e2e:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004e30:	4b73      	ldr	r3, [pc, #460]	; (8005000 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	23ff      	movs	r3, #255	; 0xff
 8004e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004e40:	2300      	movs	r3, #0
 8004e42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004e46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004e5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	461a      	mov	r2, r3
 8004e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004e78:	f107 031c 	add.w	r3, r7, #28
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe fc9e 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8004e84:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8004e86:	bf00      	nop
 8004e88:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8004e8a:	4b5e      	ldr	r3, [pc, #376]	; (8005004 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004e94:	23ff      	movs	r3, #255	; 0xff
 8004e96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ea0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ea4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ea8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004eac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eb4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004eb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004ed2:	f107 0318 	add.w	r3, r7, #24
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fe fc71 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8004ede:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8004ee0:	bf00      	nop
 8004ee2:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8004ee4:	4b48      	ldr	r3, [pc, #288]	; (8005008 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004ef4:	23ff      	movs	r3, #255	; 0xff
 8004ef6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004efa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004efe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004f02:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004f06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004f0a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004f0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004f12:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	431a      	orrs	r2, r3
 8004f22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f2c:	f107 0314 	add.w	r3, r7, #20
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fc44 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8004f38:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8004f3a:	bf00      	nop
 8004f3c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8004f3e:	4b33      	ldr	r3, [pc, #204]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	23f7      	movs	r3, #247	; 0xf7
 8004f44:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004f48:	234c      	movs	r3, #76	; 0x4c
 8004f4a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8004f4e:	2302      	movs	r3, #2
 8004f50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004f54:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004f58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004f5c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004f60:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f68:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004f6c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004f70:	041b      	lsls	r3, r3, #16
 8004f72:	461a      	mov	r2, r3
 8004f74:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f86:	f107 0310 	add.w	r3, r7, #16
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe fc17 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8004f92:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8004f94:	bf00      	nop
 8004f96:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	23f7      	movs	r3, #247	; 0xf7
 8004f9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004fa2:	23d2      	movs	r3, #210	; 0xd2
 8004fa4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004fae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004fb2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8004fb6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004fc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004fc6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004fe0:	f107 030c 	add.w	r3, r7, #12
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fbea 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8004fec:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8004fee:	bf00      	nop
 8004ff0:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8004ff2:	4b08      	ldr	r3, [pc, #32]	; (8005014 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	bf00      	nop
 8004ff8:	3748      	adds	r7, #72	; 0x48
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20023618 	.word	0x20023618
 8005004:	2002361c 	.word	0x2002361c
 8005008:	20023620 	.word	0x20023620
 800500c:	20023624 	.word	0x20023624
 8005010:	20023628 	.word	0x20023628
 8005014:	2002362c 	.word	0x2002362c

08005018 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
 800501c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005020:	2001      	movs	r0, #1
 8005022:	f7ff fecb 	bl	8004dbc <_Z41__static_initialization_and_destruction_0ii>
 8005026:	bd80      	pop	{r7, pc}

08005028 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8005034:	887b      	ldrh	r3, [r7, #2]
 8005036:	2b07      	cmp	r3, #7
 8005038:	d83a      	bhi.n	80050b0 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005061 	.word	0x08005061
 8005044:	0800506b 	.word	0x0800506b
 8005048:	08005075 	.word	0x08005075
 800504c:	0800507f 	.word	0x0800507f
 8005050:	08005089 	.word	0x08005089
 8005054:	08005093 	.word	0x08005093
 8005058:	0800509d 	.word	0x0800509d
 800505c:	080050a7 	.word	0x080050a7
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005060:	f003 f8ae 	bl	80081c0 <_ZN17TypedTextDatabase8getFontsEv>
 8005064:	4603      	mov	r3, r0
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	e023      	b.n	80050b2 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800506a:	f003 f8a9 	bl	80081c0 <_ZN17TypedTextDatabase8getFontsEv>
 800506e:	4603      	mov	r3, r0
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	e01e      	b.n	80050b2 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8005074:	f003 f8a4 	bl	80081c0 <_ZN17TypedTextDatabase8getFontsEv>
 8005078:	4603      	mov	r3, r0
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	e019      	b.n	80050b2 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800507e:	f003 f89f 	bl	80081c0 <_ZN17TypedTextDatabase8getFontsEv>
 8005082:	4603      	mov	r3, r0
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	e014      	b.n	80050b2 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8005088:	f003 f89a 	bl	80081c0 <_ZN17TypedTextDatabase8getFontsEv>
 800508c:	4603      	mov	r3, r0
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	e00f      	b.n	80050b2 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_02:
        // swisop3_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8005092:	f003 f895 	bl	80081c0 <_ZN17TypedTextDatabase8getFontsEv>
 8005096:	4603      	mov	r3, r0
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	e00a      	b.n	80050b2 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_03:
        // swisop3_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800509c:	f003 f890 	bl	80081c0 <_ZN17TypedTextDatabase8getFontsEv>
 80050a0:	4603      	mov	r3, r0
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	e005      	b.n	80050b2 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80050a6:	f003 f88b 	bl	80081c0 <_ZN17TypedTextDatabase8getFontsEv>
 80050aa:	4603      	mov	r3, r0
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	e000      	b.n	80050b2 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 80050b0:	2300      	movs	r3, #0
    }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop

080050bc <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
    return bitmap_database;
 80050c0:	4b02      	ldr	r3, [pc, #8]	; (80050cc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	08027a08 	.word	0x08027a08

080050d0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80050d4:	2301      	movs	r3, #1
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
    {
 80050e8:	4a04      	ldr	r2, [pc, #16]	; (80050fc <_ZN8touchgfx4FontD1Ev+0x1c>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	601a      	str	r2, [r3, #0]
    }
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	08027bd0 	.word	0x08027bd0

08005100 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
    }
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ffe9 	bl	80050e0 <_ZN8touchgfx4FontD1Ev>
 800510e:	2110      	movs	r1, #16
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f020 f820 	bl	8025156 <_ZdlPvj>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800512c:	887b      	ldrh	r3, [r7, #2]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8005132:	2300      	movs	r3, #0
 8005134:	e010      	b.n	8005158 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	681c      	ldr	r4, [r3, #0]
 8005146:	f107 030f 	add.w	r3, r7, #15
 800514a:	f107 0210 	add.w	r2, r7, #16
 800514e:	8879      	ldrh	r1, [r7, #2]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	47a0      	blx	r4
 8005154:	6178      	str	r0, [r7, #20]
        return glyph;
 8005156:	697b      	ldr	r3, [r7, #20]
    }
 8005158:	4618      	mov	r0, r3
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd90      	pop	{r4, r7, pc}

08005160 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	895b      	ldrh	r3, [r3, #10]
    }
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	899b      	ldrh	r3, [r3, #12]
    }
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	889b      	ldrh	r3, [r3, #4]
    }
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	889a      	ldrh	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	799b      	ldrb	r3, [r3, #6]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	b29b      	uxth	r3, r3
    }
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	79db      	ldrb	r3, [r3, #7]
 80051d6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80051da:	b2db      	uxtb	r3, r3
    }
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	79db      	ldrb	r3, [r3, #7]
 80051f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80051f8:	b2db      	uxtb	r3, r3
    }
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	4a05      	ldr	r2, [pc, #20]	; (8005228 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff ff61 	bl	80050e0 <_ZN8touchgfx4FontD1Ev>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	080294fc 	.word	0x080294fc

0800522c <_ZN8touchgfx9ConstFontD0Ev>:
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff ffe7 	bl	8005208 <_ZN8touchgfx9ConstFontD1Ev>
 800523a:	2118      	movs	r1, #24
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f01f ff8a 	bl	8025156 <_ZdlPvj>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	4a05      	ldr	r2, [pc, #20]	; (800526c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ffd3 	bl	8005208 <_ZN8touchgfx9ConstFontD1Ev>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	08027a7c 	.word	0x08027a7c

08005270 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ffe7 	bl	800524c <_ZN8touchgfx13GeneratedFontD1Ev>
 800527e:	2128      	movs	r1, #40	; 0x28
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f01f ff68 	bl	8025156 <_ZdlPvj>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
    {
 8005298:	4a04      	ldr	r2, [pc, #16]	; (80052ac <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
    }
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4618      	mov	r0, r3
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	08027a24 	.word	0x08027a24

080052b0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
    }
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ffe9 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>
 80052be:	2108      	movs	r1, #8
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f01f ff48 	bl	8025156 <_ZdlPvj>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
 80052da:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	889a      	ldrh	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	809a      	strh	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	08027a24 	.word	0x08027a24

080052fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800531c:	4a07      	ldr	r2, [pc, #28]	; (800533c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	721a      	strb	r2, [r3, #8]
    {
    }
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	08027a58 	.word	0x08027a58

08005340 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
    {
 8005348:	4a04      	ldr	r2, [pc, #16]	; (800535c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	601a      	str	r2, [r3, #0]
    }
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	08027a58 	.word	0x08027a58

08005360 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
    }
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ffe9 	bl	8005340 <_ZN8touchgfx10TransitionD1Ev>
 800536e:	210c      	movs	r1, #12
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f01f fef0 	bl	8025156 <_ZdlPvj>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
    {
    }
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
    {
    }
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
    {
    }
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80053c4:	f012 fef8 	bl	80181b8 <_ZN8touchgfx11Application11getInstanceEv>
 80053c8:	4603      	mov	r3, r0
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	3230      	adds	r2, #48	; 0x30
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	4790      	blx	r2
    }
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	605a      	str	r2, [r3, #4]
    }
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4618      	mov	r0, r3
 8005404:	f012 fefa 	bl	80181fc <_ZN8touchgfx11ApplicationC1Ev>
 8005408:	4a09      	ldr	r2, [pc, #36]	; (8005430 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a04      	ldr	r2, [pc, #16]	; (8005434 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8005422:	6013      	str	r3, [r2, #0]
    }
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	08027888 	.word	0x08027888
 8005434:	200565a8 	.word	0x200565a8

08005438 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	601a      	str	r2, [r3, #0]
    }
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	721a      	strb	r2, [r3, #8]
    }
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	605a      	str	r2, [r3, #4]
    }
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <_ZN8touchgfx3HAL3lcdEv+0x22>
 800549c:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ac:	e002      	b.n	80054b4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 80054ae:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
    }
 80054b4:	4618      	mov	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	2005653c 	.word	0x2005653c

080054c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff ff90 	bl	80053f8 <_ZN8touchgfx14MVPApplicationC1Ev>
 80054d8:	4a13      	ldr	r2, [pc, #76]	; (8005528 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 f89f 	bl	8005628 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80054fa:	f7fd fe1f 	bl	800313c <_ZN8touchgfx3HAL11getInstanceEv>
 80054fe:	4603      	mov	r3, r0
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	3208      	adds	r2, #8
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800550c:	2000      	movs	r0, #0
 800550e:	f002 fddf 	bl	80080d0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8005512:	f7ff ffbb 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8005516:	4603      	mov	r3, r0
 8005518:	4618      	mov	r0, r3
 800551a:	f019 fa54 	bl	801e9c6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	0802782c 	.word	0x0802782c

0800552c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ffe9 	bl	800552c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	3208      	adds	r2, #8
 800556a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800556e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800557c:	b590      	push	{r4, r7, lr}
 800557e:	b089      	sub	sp, #36	; 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	f107 0008 	add.w	r0, r7, #8
 8005596:	f107 0318 	add.w	r3, r7, #24
 800559a:	cb0c      	ldmia	r3, {r2, r3}
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	f000 f85f 	bl	8005660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80055a2:	f107 0308 	add.w	r3, r7, #8
 80055a6:	4619      	mov	r1, r3
 80055a8:	4620      	mov	r0, r4
 80055aa:	f7ff ffcb 	bl	8005544 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fff0 	bl	8004598 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80055c4:	bf00      	nop
 80055c6:	3724      	adds	r7, #36	; 0x24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd90      	pop	{r4, r7, pc}
 80055cc:	080055d1 	.word	0x080055d1

080055d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	4b04      	ldr	r3, [pc, #16]	; (8005600 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80055f0:	4804      	ldr	r0, [pc, #16]	; (8005604 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80055f2:	f000 f867 	bl	80056c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	2005659c 	.word	0x2005659c
 8005604:	20056598 	.word	0x20056598

08005608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	4a04      	ldr	r2, [pc, #16]	; (8005624 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	080278cc 	.word	0x080278cc

08005628 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ffe8 	bl	8005608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005638:	4a08      	ldr	r2, [pc, #32]	; (800565c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	605a      	str	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	60da      	str	r2, [r3, #12]
    }
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	08027870 	.word	0x08027870

08005660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4639      	mov	r1, r7
 800566c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ffc8 	bl	8005608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005678:	4a08      	ldr	r2, [pc, #32]	; (800569c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	605a      	str	r2, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3308      	adds	r3, #8
 8005688:	463a      	mov	r2, r7
 800568a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800568e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	08027870 	.word	0x08027870

080056a0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fe32 	bl	8005314 <_ZN8touchgfx10TransitionC1Ev>
 80056b0:	4a03      	ldr	r2, [pc, #12]	; (80056c0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	08027a34 	.word	0x08027a34

080056c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b08f      	sub	sp, #60	; 0x3c
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3320      	adds	r3, #32
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
 80056e4:	4603      	mov	r3, r0
 80056e6:	4a80      	ldr	r2, [pc, #512]	; (80058e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d805      	bhi.n	80056f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80056ec:	4b7f      	ldr	r3, [pc, #508]	; (80058ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80056ee:	4a80      	ldr	r2, [pc, #512]	; (80058f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80056f0:	21a3      	movs	r1, #163	; 0xa3
 80056f2:	4880      	ldr	r0, [pc, #512]	; (80058f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80056f4:	f01f feae 	bl	8025454 <__assert_func>
 80056f8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3320      	adds	r3, #32
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
 800570c:	4603      	mov	r3, r0
 800570e:	2b0f      	cmp	r3, #15
 8005710:	d805      	bhi.n	800571e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8005712:	4b79      	ldr	r3, [pc, #484]	; (80058f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8005714:	4a76      	ldr	r2, [pc, #472]	; (80058f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005716:	21a4      	movs	r1, #164	; 0xa4
 8005718:	4876      	ldr	r0, [pc, #472]	; (80058f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800571a:	f01f fe9b 	bl	8025454 <__assert_func>
 800571e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3320      	adds	r3, #32
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4610      	mov	r0, r2
 8005730:	4798      	blx	r3
 8005732:	4603      	mov	r3, r0
 8005734:	2b0b      	cmp	r3, #11
 8005736:	d805      	bhi.n	8005744 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8005738:	4b70      	ldr	r3, [pc, #448]	; (80058fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800573a:	4a6d      	ldr	r2, [pc, #436]	; (80058f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800573c:	21a5      	movs	r1, #165	; 0xa5
 800573e:	486d      	ldr	r0, [pc, #436]	; (80058f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005740:	f01f fe88 	bl	8025454 <__assert_func>
 8005744:	bf00      	nop
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8005752:	f012 fd31 	bl	80181b8 <_ZN8touchgfx11Application11getInstanceEv>
 8005756:	4603      	mov	r3, r0
 8005758:	4618      	mov	r0, r3
 800575a:	f012 fd33 	bl	80181c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4610      	mov	r0, r2
 8005776:	4798      	blx	r3
    if (*currentTrans)
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4610      	mov	r0, r2
 800578e:	4798      	blx	r3
    if (*currentScreen)
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4610      	mov	r0, r2
 80057a8:	4798      	blx	r3
    if (*currentPresenter)
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3304      	adds	r3, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
    if (*currentScreen)
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
    if (*currentPresenter)
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4610      	mov	r0, r2
 80057f4:	4798      	blx	r3
}
 80057f6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f880 	bl	8005904 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8005804:	4603      	mov	r3, r0
 8005806:	4619      	mov	r1, r3
 8005808:	200c      	movs	r0, #12
 800580a:	f7ff fd77 	bl	80052fc <_ZnwjPv>
 800580e:	4604      	mov	r4, r0
 8005810:	4620      	mov	r0, r4
 8005812:	f7ff ff45 	bl	80056a0 <_ZN8touchgfx12NoTransitionC1Ev>
 8005816:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2100      	movs	r1, #0
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f883 	bl	800592a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8005824:	4603      	mov	r3, r0
 8005826:	4619      	mov	r1, r3
 8005828:	4835      	ldr	r0, [pc, #212]	; (8005900 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x23c>)
 800582a:	f7ff fd67 	bl	80052fc <_ZnwjPv>
 800582e:	4604      	mov	r4, r0
 8005830:	4620      	mov	r0, r4
 8005832:	f003 f981 	bl	8008b38 <_ZN11Screen1ViewC1Ev>
 8005836:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2100      	movs	r1, #0
 800583e:	4618      	mov	r0, r3
 8005840:	f000 f886 	bl	8005950 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8005844:	4603      	mov	r3, r0
 8005846:	4619      	mov	r1, r3
 8005848:	2010      	movs	r0, #16
 800584a:	f7ff fd57 	bl	80052fc <_ZnwjPv>
 800584e:	4604      	mov	r4, r0
 8005850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005852:	4620      	mov	r0, r4
 8005854:	f002 ffe2 	bl	800881c <_ZN16Screen1PresenterC1ER11Screen1View>
 8005858:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800585e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005864:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800586a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	3304      	adds	r3, #4
 8005876:	e000      	b.n	800587a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8005878:	2300      	movs	r3, #0
 800587a:	4619      	mov	r1, r3
 800587c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800587e:	f7ff fddb 	bl	8005438 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	3304      	adds	r3, #4
 8005886:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fdf0 	bl	800546e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f86f 	bl	8005976 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69f8      	ldr	r0, [r7, #28]
 80058ae:	4798      	blx	r3
    newPresenter->activate();
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69b8      	ldr	r0, [r7, #24]
 80058b8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80058ba:	6979      	ldr	r1, [r7, #20]
 80058bc:	69f8      	ldr	r0, [r7, #28]
 80058be:	f014 f958 	bl	8019b72 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3310      	adds	r3, #16
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6978      	ldr	r0, [r7, #20]
 80058cc:	4798      	blx	r3
    newTransition->invalidate();
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3314      	adds	r3, #20
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6978      	ldr	r0, [r7, #20]
 80058d8:	4798      	blx	r3
}
 80058da:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80058de:	4618      	mov	r0, r3
 80058e0:	373c      	adds	r7, #60	; 0x3c
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd90      	pop	{r4, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	0002263b 	.word	0x0002263b
 80058ec:	08026cb8 	.word	0x08026cb8
 80058f0:	08026d48 	.word	0x08026d48
 80058f4:	08026e4c 	.word	0x08026e4c
 80058f8:	08026e94 	.word	0x08026e94
 80058fc:	08026f38 	.word	0x08026f38
 8005900:	0002263c 	.word	0x0002263c

08005904 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3324      	adds	r3, #36	; 0x24
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	887a      	ldrh	r2, [r7, #2]
 800591a:	4611      	mov	r1, r2
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	4798      	blx	r3
 8005920:	4603      	mov	r3, r0
    }
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3324      	adds	r3, #36	; 0x24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	887a      	ldrh	r2, [r7, #2]
 8005940:	4611      	mov	r1, r2
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
 8005946:	4603      	mov	r3, r0
    }
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3324      	adds	r3, #36	; 0x24
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	887a      	ldrh	r2, [r7, #2]
 8005966:	4611      	mov	r1, r2
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	4798      	blx	r3
 800596c:	4603      	mov	r3, r0
    }
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	4a05      	ldr	r2, [pc, #20]	; (80059b4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fccb 	bl	8005340 <_ZN8touchgfx10TransitionD1Ev>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	08027a34 	.word	0x08027a34

080059b8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ffe7 	bl	8005994 <_ZN8touchgfx12NoTransitionD1Ev>
 80059c6:	210c      	movs	r1, #12
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f01f fbc4 	bl	8025156 <_ZdlPvj>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <_Z41__static_initialization_and_destruction_0ii>:
 80059d8:	b580      	push	{r7, lr}
 80059da:	b092      	sub	sp, #72	; 0x48
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	f040 8114 	bne.w	8005c12 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059f0:	4293      	cmp	r3, r2
 80059f2:	f040 810e 	bne.w	8005c12 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80059f6:	2300      	movs	r3, #0
 80059f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a08:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005a0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	461a      	mov	r2, r3
 8005a28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a3a:	f107 0320 	add.w	r3, r7, #32
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fd febd 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8005a46:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8005a48:	bf00      	nop
 8005a4a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8005a4c:	4b73      	ldr	r3, [pc, #460]	; (8005c1c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	23ff      	movs	r3, #255	; 0xff
 8005a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8005a6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005a7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a7e:	041b      	lsls	r3, r3, #16
 8005a80:	461a      	mov	r2, r3
 8005a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a94:	f107 031c 	add.w	r3, r7, #28
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fd fe90 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8005aa2:	bf00      	nop
 8005aa4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8005aa6:	4b5e      	ldr	r3, [pc, #376]	; (8005c20 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005ab0:	23ff      	movs	r3, #255	; 0xff
 8005ab2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005abc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005ac0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ac4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005ac8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8005acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ad0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005ad4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005ad8:	041b      	lsls	r3, r3, #16
 8005ada:	461a      	mov	r2, r3
 8005adc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005aee:	f107 0318 	add.w	r3, r7, #24
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fd fe63 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8005afa:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8005afc:	bf00      	nop
 8005afe:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8005b00:	4b48      	ldr	r3, [pc, #288]	; (8005c24 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005b10:	23ff      	movs	r3, #255	; 0xff
 8005b12:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8005b16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005b1a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8005b1e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b26:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005b2a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005b2e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	461a      	mov	r2, r3
 8005b36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b48:	f107 0314 	add.w	r3, r7, #20
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fd fe36 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8005b54:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8005b56:	bf00      	nop
 8005b58:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8005b5a:	4b33      	ldr	r3, [pc, #204]	; (8005c28 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	23f7      	movs	r3, #247	; 0xf7
 8005b60:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005b64:	234c      	movs	r3, #76	; 0x4c
 8005b66:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005b70:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005b74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005b78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005b7c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005b80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b84:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005b88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	431a      	orrs	r2, r3
 8005b98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005ba2:	f107 0310 	add.w	r3, r7, #16
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fd fe09 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8005bae:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8005bb0:	bf00      	nop
 8005bb2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	23f7      	movs	r3, #247	; 0xf7
 8005bba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005bbe:	23d2      	movs	r3, #210	; 0xd2
 8005bc0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005bca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005bce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8005bd2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bda:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005bde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005be2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	461a      	mov	r2, r3
 8005bea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005bfc:	f107 030c 	add.w	r3, r7, #12
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd fddc 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8005c08:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8005c0a:	bf00      	nop
 8005c0c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	bf00      	nop
 8005c14:	3748      	adds	r7, #72	; 0x48
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20023634 	.word	0x20023634
 8005c20:	20023638 	.word	0x20023638
 8005c24:	2002363c 	.word	0x2002363c
 8005c28:	20023640 	.word	0x20023640
 8005c2c:	20023644 	.word	0x20023644
 8005c30:	20023648 	.word	0x20023648

08005c34 <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	f7ff fecb 	bl	80059d8 <_Z41__static_initialization_and_destruction_0ii>
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
    }
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08c      	sub	sp, #48	; 0x30
 8005c78:	af08      	add	r7, sp, #32
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	4611      	mov	r1, r2
 8005c80:	461a      	mov	r2, r3
 8005c82:	460b      	mov	r3, r1
 8005c84:	80fb      	strh	r3, [r7, #6]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	88b9      	ldrh	r1, [r7, #4]
 8005c8e:	88fa      	ldrh	r2, [r7, #6]
 8005c90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c92:	9306      	str	r3, [sp, #24]
 8005c94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c96:	9305      	str	r3, [sp, #20]
 8005c98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ca2:	9303      	str	r3, [sp, #12]
 8005ca4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ca8:	9302      	str	r3, [sp, #8]
 8005caa:	7f3b      	ldrb	r3, [r7, #28]
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	7e3b      	ldrb	r3, [r7, #24]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	f013 fab5 	bl	8019224 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc4:	619a      	str	r2, [r3, #24]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cca:	61da      	str	r2, [r3, #28]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cd0:	621a      	str	r2, [r3, #32]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	08027a7c 	.word	0x08027a7c

08005ce8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	889b      	ldrh	r3, [r3, #4]
 8005cfc:	0adb      	lsrs	r3, r3, #11
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4413      	add	r3, r2
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b089      	sub	sp, #36	; 0x24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	460b      	mov	r3, r1
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7b1b      	ldrb	r3, [r3, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e030      	b.n	8005d9c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	69da      	ldr	r2, [r3, #28]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	7b5b      	ldrb	r3, [r3, #13]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	b21b      	sxth	r3, r3
 8005d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d4e:	b219      	sxth	r1, r3
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	7adb      	ldrb	r3, [r3, #11]
 8005d54:	b21b      	sxth	r3, r3
 8005d56:	430b      	orrs	r3, r1
 8005d58:	b21b      	sxth	r3, r3
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	7b1b      	ldrb	r3, [r3, #12]
 8005d66:	837b      	strh	r3, [r7, #26]
 8005d68:	8b7b      	ldrh	r3, [r7, #26]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d015      	beq.n	8005d9a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	897a      	ldrh	r2, [r7, #10]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d103      	bne.n	8005d80 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005d7e:	e00d      	b.n	8005d9c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	897a      	ldrh	r2, [r7, #10]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d306      	bcc.n	8005d98 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005d8a:	8b7b      	ldrh	r3, [r7, #26]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	837b      	strh	r3, [r7, #26]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	3304      	adds	r3, #4
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	e7e7      	b.n	8005d68 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8005d98:	bf00      	nop
        }
    }
    return 0;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3724      	adds	r7, #36	; 0x24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8005db0:	4a14      	ldr	r2, [pc, #80]	; (8005e04 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fd fd0f 	bl	80037de <_ZN8touchgfx4RectC1Ev>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fd fd0a 	bl	80037de <_ZN8touchgfx4RectC1Ev>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	615a      	str	r2, [r3, #20]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	619a      	str	r2, [r3, #24]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	61da      	str	r2, [r3, #28]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	841a      	strh	r2, [r3, #32]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	845a      	strh	r2, [r3, #34]	; 0x22
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	08029498 	.word	0x08029498

08005e08 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
    {
 8005e10:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
    }
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	08029498 	.word	0x08029498

08005e28 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
    }
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff ffe9 	bl	8005e08 <_ZN8touchgfx8DrawableD1Ev>
 8005e36:	2128      	movs	r1, #40	; 0x28
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f01f f98c 	bl	8025156 <_ZdlPvj>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	887a      	ldrh	r2, [r7, #2]
 8005e58:	809a      	strh	r2, [r3, #4]
    }
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	887a      	ldrh	r2, [r7, #2]
 8005e76:	80da      	strh	r2, [r3, #6]
    }
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	887a      	ldrh	r2, [r7, #2]
 8005e94:	811a      	strh	r2, [r3, #8]
    }
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	887a      	ldrh	r2, [r7, #2]
 8005eb2:	815a      	strh	r2, [r3, #10]
    }
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
    {
    }
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
    {
    }
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
    {
    }
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
    {
    }
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
    {
    }
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	807b      	strh	r3, [r7, #2]
 8005f36:	4613      	mov	r3, r2
 8005f38:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3350      	adds	r3, #80	; 0x50
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	8879      	ldrh	r1, [r7, #2]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8005f4a:	b292      	uxth	r2, r2
 8005f4c:	1a8a      	subs	r2, r1, r2
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	b210      	sxth	r0, r2
 8005f52:	8839      	ldrh	r1, [r7, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8005f5a:	b292      	uxth	r2, r2
 8005f5c:	1a8a      	subs	r2, r1, r2
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	b212      	sxth	r2, r2
 8005f62:	4601      	mov	r1, r0
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
    }
 8005f68:	bf00      	nop
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff ff14 	bl	8005da8 <_ZN8touchgfx8DrawableC1Ev>
 8005f80:	4a05      	ldr	r2, [pc, #20]	; (8005f98 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	080281b0 	.word	0x080281b0

08005f9c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	4a05      	ldr	r2, [pc, #20]	; (8005fd4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff ff1f 	bl	8005e08 <_ZN8touchgfx8DrawableD1Ev>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	080281b0 	.word	0x080281b0

08005fd8 <_ZN8touchgfx9ContainerD0Ev>:
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ffe7 	bl	8005fb4 <_ZN8touchgfx9ContainerD1Ev>
 8005fe6:	212c      	movs	r1, #44	; 0x2c
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f01f f8b4 	bl	8025156 <_ZdlPvj>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
        return 0;
 8006000:	2300      	movs	r3, #0
    }
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	4608      	mov	r0, r1
 8006018:	4611      	mov	r1, r2
 800601a:	461a      	mov	r2, r3
 800601c:	4603      	mov	r3, r0
 800601e:	817b      	strh	r3, [r7, #10]
 8006020:	460b      	mov	r3, r1
 8006022:	813b      	strh	r3, [r7, #8]
 8006024:	4613      	mov	r3, r2
 8006026:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 8006028:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800602c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006030:	4619      	mov	r1, r3
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f80c 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8006038:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800603c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006040:	4619      	mov	r1, r3
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f822 	bl	800608c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	807b      	strh	r3, [r7, #2]
 800605c:	4613      	mov	r3, r2
 800605e:	803b      	strh	r3, [r7, #0]
        setX(x);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	332c      	adds	r3, #44	; 0x2c
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800606c:	4611      	mov	r1, r2
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
        setY(y);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3330      	adds	r3, #48	; 0x30
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800607e:	4611      	mov	r1, r2
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
    }
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	807b      	strh	r3, [r7, #2]
 8006098:	4613      	mov	r3, r2
 800609a:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3334      	adds	r3, #52	; 0x34
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80060a8:	4611      	mov	r1, r2
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
        setHeight(height);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3338      	adds	r3, #56	; 0x38
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80060ba:	4611      	mov	r1, r2
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
    }
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
        return visible;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
        return touchable;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800610a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006112:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800611a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff ffe1 	bl	80060fc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	601a      	str	r2, [r3, #0]
    }
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
    {
 8006158:	4a06      	ldr	r2, [pc, #24]	; (8006174 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3304      	adds	r3, #4
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff ff26 	bl	8005fb4 <_ZN8touchgfx9ContainerD1Ev>
    }
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	08029590 	.word	0x08029590

08006178 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
    }
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff ffe5 	bl	8006150 <_ZN8touchgfx6ScreenD1Ev>
 8006186:	213c      	movs	r1, #60	; 0x3c
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f01e ffe4 	bl	8025156 <_ZdlPvj>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
    {
    }
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
    {
    }
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
    {
    }
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
    {
    }
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
    {
    }
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3304      	adds	r3, #4
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f00e f943 	bl	801449c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	817b      	strh	r3, [r7, #10]
 800622c:	4613      	mov	r3, r2
 800622e:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff ff48 	bl	80060c8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff ff4e 	bl	80060e2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8006250:	2300      	movs	r3, #0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]
        }
    }
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fd9a 	bl	8005da8 <_ZN8touchgfx8DrawableC1Ev>
 8006274:	4a03      	ldr	r2, [pc, #12]	; (8006284 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	08027b50 	.word	0x08027b50

08006288 <_ZN8touchgfx6WidgetD1Ev>:
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	4a05      	ldr	r2, [pc, #20]	; (80062a8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fdb5 	bl	8005e08 <_ZN8touchgfx8DrawableD1Ev>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	08027b50 	.word	0x08027b50

080062ac <_ZN8touchgfx6WidgetD0Ev>:
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ffe7 	bl	8006288 <_ZN8touchgfx6WidgetD1Ev>
 80062ba:	2128      	movs	r1, #40	; 0x28
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f01e ff4a 	bl	8025156 <_ZdlPvj>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	2326      	movs	r3, #38	; 0x26
 80062da:	461a      	mov	r2, r3
 80062dc:	2100      	movs	r1, #0
 80062de:	f01f f945 	bl	802556c <memset>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff ffbd 	bl	8006264 <_ZN8touchgfx6WidgetC1Ev>
 80062ea:	4a09      	ldr	r2, [pc, #36]	; (8006310 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	22ff      	movs	r2, #255	; 0xff
 80062f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3328      	adds	r3, #40	; 0x28
 80062fc:	2100      	movs	r1, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fd fa5e 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	0802904c 	.word	0x0802904c

08006314 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800633c:	4a06      	ldr	r2, [pc, #24]	; (8006358 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	887a      	ldrh	r2, [r7, #2]
 8006346:	809a      	strh	r2, [r3, #4]
    }
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	08027a24 	.word	0x08027a24

0800635c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4618      	mov	r0, r3
 8006368:	2326      	movs	r3, #38	; 0x26
 800636a:	461a      	mov	r2, r3
 800636c:	2100      	movs	r1, #0
 800636e:	f01f f8fd 	bl	802556c <memset>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff ff75 	bl	8006264 <_ZN8touchgfx6WidgetC1Ev>
 800637a:	4a14      	ldr	r2, [pc, #80]	; (80063cc <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3328      	adds	r3, #40	; 0x28
 8006384:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff ffd1 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3330      	adds	r3, #48	; 0x30
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f7fd fa13 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	869a      	strh	r2, [r3, #52]	; 0x34
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	22ff      	movs	r2, #255	; 0xff
 80063a4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	08028fa4 	.word	0x08028fa4

080063d0 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	4a08      	ldr	r2, [pc, #32]	; (80063fc <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3328      	adds	r3, #40	; 0x28
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe ff54 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff ff4c 	bl	8006288 <_ZN8touchgfx6WidgetD1Ev>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	08028fa4 	.word	0x08028fa4

08006400 <_ZN8touchgfx8TextAreaD0Ev>:
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff ffe1 	bl	80063d0 <_ZN8touchgfx8TextAreaD1Ev>
 800640e:	213c      	movs	r1, #60	; 0x3c
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f01e fea0 	bl	8025156 <_ZdlPvj>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff ff96 	bl	800635c <_ZN8touchgfx8TextAreaC1Ev>
 8006430:	4a05      	ldr	r2, [pc, #20]	; (8006448 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	080290b0 	.word	0x080290b0

0800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8006488:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	809a      	strh	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	80da      	strh	r2, [r3, #6]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	721a      	strb	r2, [r3, #8]
    {
    }
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	08027b3c 	.word	0x08027b3c

080064b4 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    {
 80064bc:	4a04      	ldr	r2, [pc, #16]	; (80064d0 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	601a      	str	r2, [r3, #0]
    }
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	08027b3c 	.word	0x08027b3c

080064d4 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
    }
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff ffe9 	bl	80064b4 <_ZN8touchgfx15AbstractPainterD1Ev>
 80064e2:	210c      	movs	r1, #12
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f01e fe36 	bl	8025156 <_ZdlPvj>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
            : v(i)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	601a      	str	r2, [r3, #0]
        {
        }
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
        {
            return v;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
        }
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 800652a:	b590      	push	{r4, r7, lr}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3340      	adds	r3, #64	; 0x40
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff ffea 	bl	8006512 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800653e:	4604      	mov	r4, r0
 8006540:	463b      	mov	r3, r7
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff ffe5 	bl	8006512 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8006548:	4603      	mov	r3, r0
 800654a:	429c      	cmp	r4, r3
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f00f fbb0 	bl	8015cc4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8006564:	e000      	b.n	8006568 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8006566:	bf00      	nop
    }
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bd90      	pop	{r4, r7, pc}
	...

08006570 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff ff80 	bl	8006480 <_ZN8touchgfx15AbstractPainterC1Ev>
 8006580:	4a29      	ldr	r2, [pc, #164]	; (8006628 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	60da      	str	r2, [r3, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	611a      	str	r2, [r3, #16]
 8006592:	2301      	movs	r3, #1
 8006594:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8006596:	f7fe ff79 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 800659a:	4603      	mov	r3, r0
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	3224      	adds	r2, #36	; 0x24
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	4790      	blx	r2
 80065a6:	4603      	mov	r3, r0
 80065a8:	461a      	mov	r2, r3
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	4293      	cmp	r3, r2
 80065ae:	bf0c      	ite	eq
 80065b0:	2301      	moveq	r3, #1
 80065b2:	2300      	movne	r3, #0
 80065b4:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80065b6:	f7fc fdc1 	bl	800313c <_ZN8touchgfx3HAL11getInstanceEv>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff ff53 	bl	8006468 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01b      	beq.n	800660a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80065d2:	f7fc fdb3 	bl	800313c <_ZN8touchgfx3HAL11getInstanceEv>
 80065d6:	4603      	mov	r3, r0
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff ff45 	bl	8006468 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80065de:	4603      	mov	r3, r0
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	3224      	adds	r2, #36	; 0x24
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	4790      	blx	r2
 80065ea:	4603      	mov	r3, r0
 80065ec:	461a      	mov	r2, r3
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	4293      	cmp	r3, r2
 80065f2:	bf0c      	ite	eq
 80065f4:	2301      	moveq	r3, #1
 80065f6:	2300      	movne	r3, #0
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	bf14      	ite	ne
 8006604:	2301      	movne	r3, #1
 8006606:	2300      	moveq	r3, #0
 8006608:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800660a:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8006612:	4a07      	ldr	r2, [pc, #28]	; (8006630 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 8006614:	2128      	movs	r1, #40	; 0x28
 8006616:	4807      	ldr	r0, [pc, #28]	; (8006634 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 8006618:	f01e ff1c 	bl	8025454 <__assert_func>
 800661c:	bf00      	nop
    }
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	08028b38 	.word	0x08028b38
 800662c:	08026fdc 	.word	0x08026fdc
 8006630:	0802703c 	.word	0x0802703c
 8006634:	08027078 	.word	0x08027078

08006638 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	4a05      	ldr	r2, [pc, #20]	; (8006658 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff ff33 	bl	80064b4 <_ZN8touchgfx15AbstractPainterD1Ev>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	08028b38 	.word	0x08028b38

0800665c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff ffe7 	bl	8006638 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800666a:	2114      	movs	r1, #20
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f01e fd72 	bl	8025156 <_ZdlPvj>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff ff71 	bl	8006570 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800668e:	4a0a      	ldr	r2, [pc, #40]	; (80066b8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	751a      	strb	r2, [r3, #20]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	755a      	strb	r2, [r3, #21]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f807 	bl	80066bc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	08028b58 	.word	0x08028b58

080066bc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 80066ca:	f107 0314 	add.w	r3, r7, #20
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fc fca6 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 80066d4:	4603      	mov	r3, r0
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	751a      	strb	r2, [r3, #20]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 80066e2:	f107 0310 	add.w	r3, r7, #16
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fc fc9a 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 80066ec:	4603      	mov	r3, r0
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	755a      	strb	r2, [r3, #21]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 80066fa:	f107 030c 	add.w	r3, r7, #12
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fc fc8e 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 8006704:	4603      	mov	r3, r0
 8006706:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	759a      	strb	r2, [r3, #22]
    }
 800670c:	bf00      	nop
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZN11tempBoxBaseD1Ev>:

class tempBoxBase : public touchgfx::Container
{
public:
    tempBoxBase();
    virtual ~tempBoxBase() {}
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	4a0d      	ldr	r2, [pc, #52]	; (8006754 <_ZN11tempBoxBaseD1Ev+0x40>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	33b8      	adds	r3, #184	; 0xb8
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff fe52 	bl	80063d0 <_ZN8touchgfx8TextAreaD1Ev>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	33a0      	adds	r3, #160	; 0xa0
 8006730:	4618      	mov	r0, r3
 8006732:	f001 f8c7 	bl	80078c4 <_ZN8touchgfx13PainterRGB888D1Ev>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	332c      	adds	r3, #44	; 0x2c
 800673a:	4618      	mov	r0, r3
 800673c:	f001 f8a0 	bl	8007880 <_ZN8touchgfx4LineD1Ev>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff fc36 	bl	8005fb4 <_ZN8touchgfx9ContainerD1Ev>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	08027cb0 	.word	0x08027cb0

08006758 <_ZN11tempBoxBaseD0Ev>:
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ffd7 	bl	8006714 <_ZN11tempBoxBaseD1Ev>
 8006766:	21f4      	movs	r1, #244	; 0xf4
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f01e fcf4 	bl	8025156 <_ZdlPvj>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 8006778:	b590      	push	{r4, r7, lr}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	4a1c      	ldr	r2, [pc, #112]	; (80067f4 <_ZN7tempBoxD1Ev+0x7c>)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	f646 031c 	movw	r3, #26652	; 0x681c
 800678c:	4413      	add	r3, r2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d011      	beq.n	80067b6 <_ZN7tempBoxD1Ev+0x3e>
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	f646 031c 	movw	r3, #26652	; 0x681c
 8006798:	4413      	add	r3, r2
 800679a:	f503 54a5 	add.w	r4, r3, #5280	; 0x14a0
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	f646 031c 	movw	r3, #26652	; 0x681c
 80067a4:	4413      	add	r3, r2
 80067a6:	429c      	cmp	r4, r3
 80067a8:	d005      	beq.n	80067b6 <_ZN7tempBoxD1Ev+0x3e>
 80067aa:	3c18      	subs	r4, #24
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4620      	mov	r0, r4
 80067b2:	4798      	blx	r3
 80067b4:	e7f3      	b.n	800679e <_ZN7tempBoxD1Ev+0x26>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d010      	beq.n	80067e2 <_ZN7tempBoxD1Ev+0x6a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80067c6:	f246 34b0 	movw	r4, #25520	; 0x63b0
 80067ca:	441c      	add	r4, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 80067d2:	429c      	cmp	r4, r3
 80067d4:	d005      	beq.n	80067e2 <_ZN7tempBoxD1Ev+0x6a>
 80067d6:	3c74      	subs	r4, #116	; 0x74
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4620      	mov	r0, r4
 80067de:	4798      	blx	r3
 80067e0:	e7f4      	b.n	80067cc <_ZN7tempBoxD1Ev+0x54>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff ff95 	bl	8006714 <_ZN11tempBoxBaseD1Ev>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd90      	pop	{r4, r7, pc}
 80067f4:	08027e4c 	.word	0x08027e4c

080067f8 <_ZN7tempBoxD0Ev>:
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ffb9 	bl	8006778 <_ZN7tempBoxD1Ev>
 8006806:	f647 41bc 	movw	r1, #31932	; 0x7cbc
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f01e fca3 	bl	8025156 <_ZdlPvj>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	4a05      	ldr	r2, [pc, #20]	; (800683c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fd2b 	bl	8006288 <_ZN8touchgfx6WidgetD1Ev>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	0802904c 	.word	0x0802904c

08006840 <_ZN8touchgfx3BoxD0Ev>:
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff ffe7 	bl	800681c <_ZN8touchgfx3BoxD1Ev>
 800684e:	212c      	movs	r1, #44	; 0x2c
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f01e fc80 	bl	8025156 <_ZdlPvj>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <_ZN12alertBarBaseD1Ev>:

class alertBarBase : public touchgfx::Container
{
public:
    alertBarBase();
    virtual ~alertBarBase() {}
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	4a0a      	ldr	r2, [pc, #40]	; (8006894 <_ZN12alertBarBaseD1Ev+0x34>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3360      	adds	r3, #96	; 0x60
 8006872:	4618      	mov	r0, r3
 8006874:	f001 f86a 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	332c      	adds	r3, #44	; 0x2c
 800687c:	4618      	mov	r0, r3
 800687e:	f001 f843 	bl	8007908 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff fb95 	bl	8005fb4 <_ZN8touchgfx9ContainerD1Ev>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	08027c24 	.word	0x08027c24

08006898 <_ZN12alertBarBaseD0Ev>:
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff ffdd 	bl	8006860 <_ZN12alertBarBaseD1Ev>
 80068a6:	21a0      	movs	r1, #160	; 0xa0
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f01e fc54 	bl	8025156 <_ZdlPvj>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	4a05      	ldr	r2, [pc, #20]	; (80068d8 <_ZN8alertBarD1Ev+0x20>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ffc9 	bl	8006860 <_ZN12alertBarBaseD1Ev>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	08027dc0 	.word	0x08027dc0

080068dc <_ZN8alertBarD0Ev>:
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff ffe7 	bl	80068b8 <_ZN8alertBarD1Ev>
 80068ea:	21d8      	movs	r1, #216	; 0xd8
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f01e fc32 	bl	8025156 <_ZdlPvj>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	4a05      	ldr	r2, [pc, #20]	; (800691c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fc1f 	bl	8006150 <_ZN8touchgfx6ScreenD1Ev>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	08027b08 	.word	0x08027b08

08006920 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ffe7 	bl	80068fc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800692e:	2140      	movs	r1, #64	; 0x40
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f01e fc10 	bl	8025156 <_ZdlPvj>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	4a31      	ldr	r2, [pc, #196]	; (8006a10 <_ZN15Screen1ViewBaseD1Ev+0xd0>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <_ZN15Screen1ViewBaseD1Ev+0xd4>)
 8006952:	4413      	add	r3, r2
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fff9 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <_ZN15Screen1ViewBaseD1Ev+0xd8>)
 800695e:	4413      	add	r3, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff ffa9 	bl	80068b8 <_ZN8alertBarD1Ev>
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	4b2c      	ldr	r3, [pc, #176]	; (8006a1c <_ZN15Screen1ViewBaseD1Ev+0xdc>)
 800696a:	4413      	add	r3, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff ffa3 	bl	80068b8 <_ZN8alertBarD1Ev>
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4b2a      	ldr	r3, [pc, #168]	; (8006a20 <_ZN15Screen1ViewBaseD1Ev+0xe0>)
 8006976:	4413      	add	r3, r2
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fefd 	bl	8006778 <_ZN7tempBoxD1Ev>
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8006984:	4413      	add	r3, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff fef6 	bl	8006778 <_ZN7tempBoxD1Ev>
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8006992:	4413      	add	r3, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff feef 	bl	8006778 <_ZN7tempBoxD1Ev>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fee9 	bl	8006778 <_ZN7tempBoxD1Ev>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 ffcd 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 ffc7 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 ffc1 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 ff77 	bl	80078c4 <_ZN8touchgfx13PainterRGB888D1Ev>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	33d8      	adds	r3, #216	; 0xd8
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 ff50 	bl	8007880 <_ZN8touchgfx4LineD1Ev>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3398      	adds	r3, #152	; 0x98
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 ffb1 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	336c      	adds	r3, #108	; 0x6c
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff ff14 	bl	800681c <_ZN8touchgfx3BoxD1Ev>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3340      	adds	r3, #64	; 0x40
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff ff0f 	bl	800681c <_ZN8touchgfx3BoxD1Ev>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff ff7b 	bl	80068fc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	08027ad4 	.word	0x08027ad4
 8006a14:	0001f6c4 	.word	0x0001f6c4
 8006a18:	0001f5ec 	.word	0x0001f5ec
 8006a1c:	0001f514 	.word	0x0001f514
 8006a20:	00017858 	.word	0x00017858

08006a24 <_ZN15Screen1ViewBaseD0Ev>:
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff87 	bl	8006940 <_ZN15Screen1ViewBaseD1Ev>
 8006a32:	4904      	ldr	r1, [pc, #16]	; (8006a44 <_ZN15Screen1ViewBaseD0Ev+0x20>)
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f01e fb8e 	bl	8025156 <_ZdlPvj>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	00022638 	.word	0x00022638

08006a48 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b0c3      	sub	sp, #268	; 0x10c
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fd4a 	bl	80074ec <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8006a58:	4a96      	ldr	r2, [pc, #600]	; (8006cb4 <_ZN15Screen1ViewBaseC1Ev+0x26c>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3340      	adds	r3, #64	; 0x40
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fc32 	bl	80062cc <_ZN8touchgfx3BoxC1Ev>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	336c      	adds	r3, #108	; 0x6c
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fc2d 	bl	80062cc <_ZN8touchgfx3BoxC1Ev>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3398      	adds	r3, #152	; 0x98
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fcd2 	bl	8006420 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	33d8      	adds	r3, #216	; 0xd8
 8006a80:	4618      	mov	r0, r3
 8006a82:	f00f f8ff 	bl	8015c84 <_ZN8touchgfx4LineC1Ev>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006a8c:	f107 031c 	add.w	r3, r7, #28
 8006a90:	2100      	movs	r1, #0
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fc fe94 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8006a98:	69f9      	ldr	r1, [r7, #28]
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7ff fdee 	bl	800667c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff fcba 	bl	8006420 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff fcb4 	bl	8006420 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff fcae 	bl	8006420 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 fecc 	bl	8009868 <_ZN7tempBoxC1Ev>
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8006ad6:	4413      	add	r3, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f002 fec5 	bl	8009868 <_ZN7tempBoxC1Ev>
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8006ae4:	4413      	add	r3, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f002 febe 	bl	8009868 <_ZN7tempBoxC1Ev>
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	4b72      	ldr	r3, [pc, #456]	; (8006cb8 <_ZN15Screen1ViewBaseC1Ev+0x270>)
 8006af0:	4413      	add	r3, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f002 feb8 	bl	8009868 <_ZN7tempBoxC1Ev>
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4b70      	ldr	r3, [pc, #448]	; (8006cbc <_ZN15Screen1ViewBaseC1Ev+0x274>)
 8006afc:	4413      	add	r3, r2
 8006afe:	4618      	mov	r0, r3
 8006b00:	f002 fbc6 	bl	8009290 <_ZN8alertBarC1Ev>
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	4b6e      	ldr	r3, [pc, #440]	; (8006cc0 <_ZN15Screen1ViewBaseC1Ev+0x278>)
 8006b08:	4413      	add	r3, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f002 fbc0 	bl	8009290 <_ZN8alertBarC1Ev>
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	4b6c      	ldr	r3, [pc, #432]	; (8006cc4 <_ZN15Screen1ViewBaseC1Ev+0x27c>)
 8006b14:	4413      	add	r3, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fc82 	bl	8006420 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4b6a      	ldr	r3, [pc, #424]	; (8006cc8 <_ZN15Screen1ViewBaseC1Ev+0x280>)
 8006b20:	4413      	add	r3, r2
 8006b22:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8006b26:	4618      	mov	r0, r3
 8006b28:	f00f fe32 	bl	8016790 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8006b32:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2100      	movs	r1, #0
 8006b40:	f7ff fa65 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8006b56:	2300      	movs	r3, #0
 8006b58:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006b5c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8006b60:	041b      	lsls	r3, r3, #16
 8006b62:	461a      	mov	r2, r3
 8006b64:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006b76:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fc fe1f 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8006b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b86:	4619      	mov	r1, r3
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f7ff fbc3 	bl	8006314 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8006b94:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	f240 3325 	movw	r3, #805	; 0x325
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	f7ff fa34 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006bbe:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8006bc2:	041b      	lsls	r3, r3, #16
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006bd8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fc fdee 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8006be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006be8:	4619      	mov	r1, r3
 8006bea:	4620      	mov	r0, r4
 8006bec:	f7ff fb92 	bl	8006314 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3398      	adds	r3, #152	; 0x98
 8006bf4:	223c      	movs	r2, #60	; 0x3c
 8006bf6:	f240 114b 	movw	r1, #331	; 0x14b
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fa28 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006c06:	23ff      	movs	r3, #255	; 0xff
 8006c08:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8006c0c:	23ff      	movs	r3, #255	; 0xff
 8006c0e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8006c12:	23ff      	movs	r3, #255	; 0xff
 8006c14:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8006c18:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	431a      	orrs	r2, r3
 8006c28:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006c32:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fc fdc1 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8006c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c42:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 8006c46:	61bb      	str	r3, [r7, #24]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8006c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006c50:	bf00      	nop
    gearArea.setLinespacing(0);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3398      	adds	r3, #152	; 0x98
 8006c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8006c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c64:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8006c68:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006c6a:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID14).getText());
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4c17      	ldr	r4, [pc, #92]	; (8006ccc <_ZN15Screen1ViewBaseC1Ev+0x284>)
 8006c70:	441c      	add	r4, r3
 8006c72:	f107 0320 	add.w	r3, r7, #32
 8006c76:	210c      	movs	r1, #12
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fb59 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 8006c7e:	f107 0320 	add.w	r3, r7, #32
 8006c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006c86:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <_ZN15Screen1ViewBaseC1Ev+0x288>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d105      	bne.n	8006c9a <_ZN15Screen1ViewBaseC1Ev+0x252>
 8006c8e:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <_ZN15Screen1ViewBaseC1Ev+0x28c>)
 8006c90:	4a11      	ldr	r2, [pc, #68]	; (8006cd8 <_ZN15Screen1ViewBaseC1Ev+0x290>)
 8006c92:	21ae      	movs	r1, #174	; 0xae
 8006c94:	4811      	ldr	r0, [pc, #68]	; (8006cdc <_ZN15Screen1ViewBaseC1Ev+0x294>)
 8006c96:	f01e fbdd 	bl	8025454 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8006c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c9e:	889a      	ldrh	r2, [r3, #4]
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <_ZN15Screen1ViewBaseC1Ev+0x298>)
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d31f      	bcc.n	8006ce8 <_ZN15Screen1ViewBaseC1Ev+0x2a0>
 8006ca8:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <_ZN15Screen1ViewBaseC1Ev+0x29c>)
 8006caa:	4a0b      	ldr	r2, [pc, #44]	; (8006cd8 <_ZN15Screen1ViewBaseC1Ev+0x290>)
 8006cac:	21af      	movs	r1, #175	; 0xaf
 8006cae:	480b      	ldr	r0, [pc, #44]	; (8006cdc <_ZN15Screen1ViewBaseC1Ev+0x294>)
 8006cb0:	f01e fbd0 	bl	8025454 <__assert_func>
 8006cb4:	08027ad4 	.word	0x08027ad4
 8006cb8:	00017858 	.word	0x00017858
 8006cbc:	0001f514 	.word	0x0001f514
 8006cc0:	0001f5ec 	.word	0x0001f5ec
 8006cc4:	0001f6c4 	.word	0x0001f6c4
 8006cc8:	0001f758 	.word	0x0001f758
 8006ccc:	0001f704 	.word	0x0001f704
 8006cd0:	200565ac 	.word	0x200565ac
 8006cd4:	080270dc 	.word	0x080270dc
 8006cd8:	08027120 	.word	0x08027120
 8006cdc:	08027150 	.word	0x08027150
 8006ce0:	200565b0 	.word	0x200565b0
 8006ce4:	08027198 	.word	0x08027198
    }
 8006ce8:	bf00      	nop
        return texts->getText(typedTextId);
 8006cea:	4bc2      	ldr	r3, [pc, #776]	; (8006ff4 <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 fa42 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	bf00      	nop
 8006cfc:	4abe      	ldr	r2, [pc, #760]	; (8006ff8 <_ZN15Screen1ViewBaseC1Ev+0x5b0>)
 8006cfe:	2102      	movs	r1, #2
 8006d00:	4620      	mov	r0, r4
 8006d02:	f014 fa51 	bl	801b1a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8006d06:	f107 0320 	add.w	r3, r7, #32
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fac0 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	4bb8      	ldr	r3, [pc, #736]	; (8006ffc <_ZN15Screen1ViewBaseC1Ev+0x5b4>)
 8006d1a:	4413      	add	r3, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f7ff fb95 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3398      	adds	r3, #152	; 0x98
 8006d26:	4618      	mov	r0, r3
 8006d28:	f00f fb5a 	bl	80163e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff faf9 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 8006d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d42:	4619      	mov	r1, r3
 8006d44:	4620      	mov	r0, r4
 8006d46:	f00f fb68 	bl	801641a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fa9e 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8006d5a:	2314      	movs	r3, #20
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	2398      	movs	r3, #152	; 0x98
 8006d60:	228c      	movs	r2, #140	; 0x8c
 8006d62:	f240 1149 	movw	r1, #329	; 0x149
 8006d66:	f7ff f952 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006d70:	23ff      	movs	r3, #255	; 0xff
 8006d72:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8006d76:	23ff      	movs	r3, #255	; 0xff
 8006d78:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006d7c:	23ff      	movs	r3, #255	; 0xff
 8006d7e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8006d82:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8006d86:	041b      	lsls	r3, r3, #16
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	431a      	orrs	r2, r3
 8006d92:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006d9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fc fd0c 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8006da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dac:	4619      	mov	r1, r3
 8006dae:	4620      	mov	r0, r4
 8006db0:	f7ff fc84 	bl	80066bc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f00e fd82 	bl	80158cc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	33d8      	adds	r3, #216	; 0xd8
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fba1 	bl	8007518 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	33d8      	adds	r3, #216	; 0xd8
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2196      	movs	r1, #150	; 0x96
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fbc0 	bl	8007564 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	33d8      	adds	r3, #216	; 0xd8
 8006de8:	2104      	movs	r1, #4
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fbe0 	bl	80075b0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	33d8      	adds	r3, #216	; 0xd8
 8006df4:	2101      	movs	r1, #1
 8006df6:	4618      	mov	r0, r3
 8006df8:	f00f f88a 	bl	8015f10 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8006e02:	2345      	movs	r3, #69	; 0x45
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	23d4      	movs	r3, #212	; 0xd4
 8006e08:	2247      	movs	r2, #71	; 0x47
 8006e0a:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8006e0e:	f7ff f8fe 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006e1e:	2366      	movs	r3, #102	; 0x66
 8006e20:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8006e24:	23ff      	movs	r3, #255	; 0xff
 8006e26:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8006e2a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006e2e:	041b      	lsls	r3, r3, #16
 8006e30:	461a      	mov	r2, r3
 8006e32:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006e44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e48:	4611      	mov	r1, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fc fcb8 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8006e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e52:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 8006e56:	617b      	str	r3, [r7, #20]
        this->color = color;
 8006e58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006e60:	bf00      	nop
    rpmArea.setLinespacing(0);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 8006e72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e76:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8006e7a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006e7c:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4c5f      	ldr	r4, [pc, #380]	; (8007000 <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 8006e82:	441c      	add	r4, r3
 8006e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e88:	210b      	movs	r1, #11
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff fa50 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 8006e90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006e98:	4b5a      	ldr	r3, [pc, #360]	; (8007004 <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d105      	bne.n	8006eac <_ZN15Screen1ViewBaseC1Ev+0x464>
 8006ea0:	4b59      	ldr	r3, [pc, #356]	; (8007008 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 8006ea2:	4a5a      	ldr	r2, [pc, #360]	; (800700c <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8006ea4:	21ae      	movs	r1, #174	; 0xae
 8006ea6:	485a      	ldr	r0, [pc, #360]	; (8007010 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 8006ea8:	f01e fad4 	bl	8025454 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8006eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006eb0:	889a      	ldrh	r2, [r3, #4]
 8006eb2:	4b58      	ldr	r3, [pc, #352]	; (8007014 <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d305      	bcc.n	8006ec6 <_ZN15Screen1ViewBaseC1Ev+0x47e>
 8006eba:	4b57      	ldr	r3, [pc, #348]	; (8007018 <_ZN15Screen1ViewBaseC1Ev+0x5d0>)
 8006ebc:	4a53      	ldr	r2, [pc, #332]	; (800700c <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8006ebe:	21af      	movs	r1, #175	; 0xaf
 8006ec0:	4853      	ldr	r0, [pc, #332]	; (8007010 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 8006ec2:	f01e fac7 	bl	8025454 <__assert_func>
    }
 8006ec6:	bf00      	nop
        return texts->getText(typedTextId);
 8006ec8:	4b4a      	ldr	r3, [pc, #296]	; (8006ff4 <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006ece:	4611      	mov	r1, r2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 f953 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	bf00      	nop
 8006eda:	4a47      	ldr	r2, [pc, #284]	; (8006ff8 <_ZN15Screen1ViewBaseC1Ev+0x5b0>)
 8006edc:	210a      	movs	r1, #10
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f014 f962 	bl	801b1a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8006ee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe f9d1 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	4b42      	ldr	r3, [pc, #264]	; (8007000 <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 8006ef8:	4413      	add	r3, r2
 8006efa:	4619      	mov	r1, r3
 8006efc:	f7ff faa6 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8006f06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fa0f 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 8006f12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f16:	4619      	mov	r1, r3
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f00f fa7e 	bl	801641a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006f1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe f9b4 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 259, 49);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8006f2e:	2331      	movs	r3, #49	; 0x31
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	f240 1303 	movw	r3, #259	; 0x103
 8006f36:	2252      	movs	r2, #82	; 0x52
 8006f38:	210e      	movs	r1, #14
 8006f3a:	f7ff f868 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8006f44:	23ff      	movs	r3, #255	; 0xff
 8006f46:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8006f4a:	23ff      	movs	r3, #255	; 0xff
 8006f4c:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 8006f50:	23ff      	movs	r3, #255	; 0xff
 8006f52:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8006f56:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	431a      	orrs	r2, r3
 8006f66:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006f70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fc fc22 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8006f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f7e:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8006f82:	613b      	str	r3, [r7, #16]
        this->color = color;
 8006f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006f8c:	bf00      	nop
    battArea.setLinespacing(0);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8006f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        linespace = space;
 8006f9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006fa2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006fa6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006fa8:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4c1b      	ldr	r4, [pc, #108]	; (800701c <_ZN15Screen1ViewBaseC1Ev+0x5d4>)
 8006fae:	441c      	add	r4, r3
 8006fb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006fb4:	2108      	movs	r1, #8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff f9ba 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 8006fbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006fc4:	4b0f      	ldr	r3, [pc, #60]	; (8007004 <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <_ZN15Screen1ViewBaseC1Ev+0x590>
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 8006fce:	4a0f      	ldr	r2, [pc, #60]	; (800700c <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8006fd0:	21ae      	movs	r1, #174	; 0xae
 8006fd2:	480f      	ldr	r0, [pc, #60]	; (8007010 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 8006fd4:	f01e fa3e 	bl	8025454 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8006fd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fdc:	889a      	ldrh	r2, [r3, #4]
 8006fde:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d31c      	bcc.n	8007020 <_ZN15Screen1ViewBaseC1Ev+0x5d8>
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <_ZN15Screen1ViewBaseC1Ev+0x5d0>)
 8006fe8:	4a08      	ldr	r2, [pc, #32]	; (800700c <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 8006fea:	21af      	movs	r1, #175	; 0xaf
 8006fec:	4808      	ldr	r0, [pc, #32]	; (8007010 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 8006fee:	f01e fa31 	bl	8025454 <__assert_func>
 8006ff2:	bf00      	nop
 8006ff4:	200565b8 	.word	0x200565b8
 8006ff8:	080271ec 	.word	0x080271ec
 8006ffc:	0001f704 	.word	0x0001f704
 8007000:	0001f708 	.word	0x0001f708
 8007004:	200565ac 	.word	0x200565ac
 8007008:	080270dc 	.word	0x080270dc
 800700c:	08027120 	.word	0x08027120
 8007010:	08027150 	.word	0x08027150
 8007014:	200565b0 	.word	0x200565b0
 8007018:	08027198 	.word	0x08027198
 800701c:	0001f71c 	.word	0x0001f71c
    }
 8007020:	bf00      	nop
        return texts->getText(typedTextId);
 8007022:	4bb1      	ldr	r3, [pc, #708]	; (80072e8 <_ZN15Screen1ViewBaseC1Ev+0x8a0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800702a:	4611      	mov	r1, r2
 800702c:	4618      	mov	r0, r3
 800702e:	f001 f8a5 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 8007032:	4603      	mov	r3, r0
 8007034:	bf00      	nop
 8007036:	4aad      	ldr	r2, [pc, #692]	; (80072ec <_ZN15Screen1ViewBaseC1Ev+0x8a4>)
 8007038:	210a      	movs	r1, #10
 800703a:	4620      	mov	r0, r4
 800703c:	f014 f8b4 	bl	801b1a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007040:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe f923 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	4ba7      	ldr	r3, [pc, #668]	; (80072f0 <_ZN15Screen1ViewBaseC1Ev+0x8a8>)
 8007054:	4413      	add	r3, r2
 8007056:	4619      	mov	r1, r3
 8007058:	f7ff f9f8 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8007062:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007066:	2102      	movs	r1, #2
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff f961 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 800706e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007072:	4619      	mov	r1, r3
 8007074:	4620      	mov	r0, r4
 8007076:	f00f f9d0 	bl	801641a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800707a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe f906 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>

    tcsArea.setPosition(652, 82, 138, 49);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 800708a:	2331      	movs	r3, #49	; 0x31
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	238a      	movs	r3, #138	; 0x8a
 8007090:	2252      	movs	r2, #82	; 0x52
 8007092:	f44f 7123 	mov.w	r1, #652	; 0x28c
 8007096:	f7fe ffba 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    tcsArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80070a0:	23ff      	movs	r3, #255	; 0xff
 80070a2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80070a6:	23ff      	movs	r3, #255	; 0xff
 80070a8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80070ac:	23ff      	movs	r3, #255	; 0xff
 80070ae:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 80070b2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80070b6:	041b      	lsls	r3, r3, #16
 80070b8:	461a      	mov	r2, r3
 80070ba:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80070be:	021b      	lsls	r3, r3, #8
 80070c0:	431a      	orrs	r2, r3
 80070c2:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80070cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fc fb74 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80070d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070da:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 80070de:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80070e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80070e8:	bf00      	nop
    tcsArea.setLinespacing(0);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80070f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070f4:	2300      	movs	r3, #0
 80070f6:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        linespace = space;
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fe:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8007102:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007104:	bf00      	nop
    Unicode::snprintf(tcsAreaBuffer, TCSAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID12).getText());
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4c7a      	ldr	r4, [pc, #488]	; (80072f4 <_ZN15Screen1ViewBaseC1Ev+0x8ac>)
 800710a:	441c      	add	r4, r3
 800710c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007110:	210a      	movs	r1, #10
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff f90c 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 8007118:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800711c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007120:	4b75      	ldr	r3, [pc, #468]	; (80072f8 <_ZN15Screen1ViewBaseC1Ev+0x8b0>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <_ZN15Screen1ViewBaseC1Ev+0x6ec>
 8007128:	4b74      	ldr	r3, [pc, #464]	; (80072fc <_ZN15Screen1ViewBaseC1Ev+0x8b4>)
 800712a:	4a75      	ldr	r2, [pc, #468]	; (8007300 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 800712c:	21ae      	movs	r1, #174	; 0xae
 800712e:	4875      	ldr	r0, [pc, #468]	; (8007304 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 8007130:	f01e f990 	bl	8025454 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007134:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007138:	889a      	ldrh	r2, [r3, #4]
 800713a:	4b73      	ldr	r3, [pc, #460]	; (8007308 <_ZN15Screen1ViewBaseC1Ev+0x8c0>)
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d305      	bcc.n	800714e <_ZN15Screen1ViewBaseC1Ev+0x706>
 8007142:	4b72      	ldr	r3, [pc, #456]	; (800730c <_ZN15Screen1ViewBaseC1Ev+0x8c4>)
 8007144:	4a6e      	ldr	r2, [pc, #440]	; (8007300 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 8007146:	21af      	movs	r1, #175	; 0xaf
 8007148:	486e      	ldr	r0, [pc, #440]	; (8007304 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 800714a:	f01e f983 	bl	8025454 <__assert_func>
    }
 800714e:	bf00      	nop
        return texts->getText(typedTextId);
 8007150:	4b65      	ldr	r3, [pc, #404]	; (80072e8 <_ZN15Screen1ViewBaseC1Ev+0x8a0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007158:	4611      	mov	r1, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f001 f80e 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 8007160:	4603      	mov	r3, r0
 8007162:	bf00      	nop
 8007164:	4a61      	ldr	r2, [pc, #388]	; (80072ec <_ZN15Screen1ViewBaseC1Ev+0x8a4>)
 8007166:	210a      	movs	r1, #10
 8007168:	4620      	mov	r0, r4
 800716a:	f014 f81d 	bl	801b1a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800716e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe f88c 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>
    tcsArea.setWildcard(tcsAreaBuffer);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4b5c      	ldr	r3, [pc, #368]	; (80072f4 <_ZN15Screen1ViewBaseC1Ev+0x8ac>)
 8007182:	4413      	add	r3, r2
 8007184:	4619      	mov	r1, r3
 8007186:	f7ff f961 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tcsArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8007190:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007194:	2103      	movs	r1, #3
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff f8ca 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 800719c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80071a0:	4619      	mov	r1, r3
 80071a2:	4620      	mov	r0, r4
 80071a4:	f00f f939 	bl	801641a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80071a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe f86f 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80071b8:	22f8      	movs	r2, #248	; 0xf8
 80071ba:	210b      	movs	r1, #11
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe ff47 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80071c8:	4413      	add	r3, r2
 80071ca:	f240 1249 	movw	r2, #329	; 0x149
 80071ce:	210b      	movs	r1, #11
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe ff3d 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80071dc:	4413      	add	r3, r2
 80071de:	22f8      	movs	r2, #248	; 0xf8
 80071e0:	f240 213a 	movw	r1, #570	; 0x23a
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe ff33 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4b48      	ldr	r3, [pc, #288]	; (8007310 <_ZN15Screen1ViewBaseC1Ev+0x8c8>)
 80071ee:	4413      	add	r3, r2
 80071f0:	f240 1249 	movw	r2, #329	; 0x149
 80071f4:	f240 213a 	movw	r1, #570	; 0x23a
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe ff29 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	4b44      	ldr	r3, [pc, #272]	; (8007314 <_ZN15Screen1ViewBaseC1Ev+0x8cc>)
 8007202:	4413      	add	r3, r2
 8007204:	2200      	movs	r2, #0
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe ff21 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	4b41      	ldr	r3, [pc, #260]	; (8007318 <_ZN15Screen1ViewBaseC1Ev+0x8d0>)
 8007212:	4413      	add	r3, r2
 8007214:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007218:	2100      	movs	r1, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe ff18 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	483e      	ldr	r0, [pc, #248]	; (800731c <_ZN15Screen1ViewBaseC1Ev+0x8d4>)
 8007224:	4418      	add	r0, r3
 8007226:	2331      	movs	r3, #49	; 0x31
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	23ee      	movs	r3, #238	; 0xee
 800722c:	2296      	movs	r2, #150	; 0x96
 800722e:	210e      	movs	r1, #14
 8007230:	f7fe feed 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4c39      	ldr	r4, [pc, #228]	; (800731c <_ZN15Screen1ViewBaseC1Ev+0x8d4>)
 8007238:	441c      	add	r4, r3
 800723a:	23ff      	movs	r3, #255	; 0xff
 800723c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8007240:	23ff      	movs	r3, #255	; 0xff
 8007242:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8007246:	23ff      	movs	r3, #255	; 0xff
 8007248:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 800724c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8007250:	041b      	lsls	r3, r3, #16
 8007252:	461a      	mov	r2, r3
 8007254:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	431a      	orrs	r2, r3
 800725c:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8007260:	4313      	orrs	r3, r2
 8007262:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800726a:	4611      	mov	r1, r2
 800726c:	4618      	mov	r0, r3
 800726e:	f7fc faa7 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8007272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007274:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8007278:	60bb      	str	r3, [r7, #8]
        this->color = color;
 800727a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007282:	bf00      	nop
    cltArea.setLinespacing(0);
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4b25      	ldr	r3, [pc, #148]	; (800731c <_ZN15Screen1ViewBaseC1Ev+0x8d4>)
 8007288:	4413      	add	r3, r2
 800728a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800728e:	2300      	movs	r3, #0
 8007290:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
        linespace = space;
 8007294:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007298:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 800729c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800729e:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4c1f      	ldr	r4, [pc, #124]	; (8007320 <_ZN15Screen1ViewBaseC1Ev+0x8d8>)
 80072a4:	441c      	add	r4, r3
 80072a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072aa:	2109      	movs	r1, #9
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff f83f 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 80072b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80072ba:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <_ZN15Screen1ViewBaseC1Ev+0x8b0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d105      	bne.n	80072ce <_ZN15Screen1ViewBaseC1Ev+0x886>
 80072c2:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <_ZN15Screen1ViewBaseC1Ev+0x8b4>)
 80072c4:	4a0e      	ldr	r2, [pc, #56]	; (8007300 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 80072c6:	21ae      	movs	r1, #174	; 0xae
 80072c8:	480e      	ldr	r0, [pc, #56]	; (8007304 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 80072ca:	f01e f8c3 	bl	8025454 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80072ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072d2:	889a      	ldrh	r2, [r3, #4]
 80072d4:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <_ZN15Screen1ViewBaseC1Ev+0x8c0>)
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d323      	bcc.n	8007324 <_ZN15Screen1ViewBaseC1Ev+0x8dc>
 80072dc:	4b0b      	ldr	r3, [pc, #44]	; (800730c <_ZN15Screen1ViewBaseC1Ev+0x8c4>)
 80072de:	4a08      	ldr	r2, [pc, #32]	; (8007300 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 80072e0:	21af      	movs	r1, #175	; 0xaf
 80072e2:	4808      	ldr	r0, [pc, #32]	; (8007304 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 80072e4:	f01e f8b6 	bl	8025454 <__assert_func>
 80072e8:	200565b8 	.word	0x200565b8
 80072ec:	080271ec 	.word	0x080271ec
 80072f0:	0001f71c 	.word	0x0001f71c
 80072f4:	0001f730 	.word	0x0001f730
 80072f8:	200565ac 	.word	0x200565ac
 80072fc:	080270dc 	.word	0x080270dc
 8007300:	08027120 	.word	0x08027120
 8007304:	08027150 	.word	0x08027150
 8007308:	200565b0 	.word	0x200565b0
 800730c:	08027198 	.word	0x08027198
 8007310:	00017858 	.word	0x00017858
 8007314:	0001f514 	.word	0x0001f514
 8007318:	0001f5ec 	.word	0x0001f5ec
 800731c:	0001f6c4 	.word	0x0001f6c4
 8007320:	0001f744 	.word	0x0001f744
    }
 8007324:	bf00      	nop
        return texts->getText(typedTextId);
 8007326:	4b50      	ldr	r3, [pc, #320]	; (8007468 <_ZN15Screen1ViewBaseC1Ev+0xa20>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800732e:	4611      	mov	r1, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f000 ff23 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 8007336:	4603      	mov	r3, r0
 8007338:	bf00      	nop
 800733a:	4a4c      	ldr	r2, [pc, #304]	; (800746c <_ZN15Screen1ViewBaseC1Ev+0xa24>)
 800733c:	210a      	movs	r1, #10
 800733e:	4620      	mov	r0, r4
 8007340:	f013 ff32 	bl	801b1a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007344:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007348:	4618      	mov	r0, r3
 800734a:	f7fd ffa1 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	4b47      	ldr	r3, [pc, #284]	; (8007470 <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 8007352:	4413      	add	r3, r2
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	4a47      	ldr	r2, [pc, #284]	; (8007474 <_ZN15Screen1ViewBaseC1Ev+0xa2c>)
 8007358:	440a      	add	r2, r1
 800735a:	4611      	mov	r1, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff f875 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4c42      	ldr	r4, [pc, #264]	; (8007470 <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 8007366:	441c      	add	r4, r3
 8007368:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800736c:	2107      	movs	r1, #7
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe ffde 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 8007374:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007378:	4619      	mov	r1, r3
 800737a:	4620      	mov	r0, r4
 800737c:	f00f f84d 	bl	801641a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007380:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007384:	4618      	mov	r0, r3
 8007386:	f7fd ff83 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3340      	adds	r3, #64	; 0x40
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f7fe ff34 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	336c      	adds	r3, #108	; 0x6c
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7fe ff2d 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3398      	adds	r3, #152	; 0x98
 80073ac:	4619      	mov	r1, r3
 80073ae:	4610      	mov	r0, r2
 80073b0:	f7fe ff26 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	33d8      	adds	r3, #216	; 0xd8
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fe ff1f 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073ca:	4619      	mov	r1, r3
 80073cc:	4610      	mov	r0, r2
 80073ce:	f7fe ff17 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fe ff0f 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tcsArea);
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fe ff07 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80073fa:	4619      	mov	r1, r3
 80073fc:	4610      	mov	r0, r2
 80073fe:	f7fe feff 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 800740a:	4413      	add	r3, r2
 800740c:	4619      	mov	r1, r3
 800740e:	f7fe fef7 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 800741a:	4413      	add	r3, r2
 800741c:	4619      	mov	r1, r3
 800741e:	f7fe feef 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4b14      	ldr	r3, [pc, #80]	; (8007478 <_ZN15Screen1ViewBaseC1Ev+0xa30>)
 8007428:	4413      	add	r3, r2
 800742a:	4619      	mov	r1, r3
 800742c:	f7fe fee8 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	4b11      	ldr	r3, [pc, #68]	; (800747c <_ZN15Screen1ViewBaseC1Ev+0xa34>)
 8007436:	4413      	add	r3, r2
 8007438:	4619      	mov	r1, r3
 800743a:	f7fe fee1 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <_ZN15Screen1ViewBaseC1Ev+0xa38>)
 8007444:	4413      	add	r3, r2
 8007446:	4619      	mov	r1, r3
 8007448:	f7fe feda 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 8007452:	4413      	add	r3, r2
 8007454:	4619      	mov	r1, r3
 8007456:	f7fe fed3 	bl	8006200 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4618      	mov	r0, r3
 800745e:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8007462:	46bd      	mov	sp, r7
 8007464:	bd90      	pop	{r4, r7, pc}
 8007466:	bf00      	nop
 8007468:	200565b8 	.word	0x200565b8
 800746c:	080271ec 	.word	0x080271ec
 8007470:	0001f6c4 	.word	0x0001f6c4
 8007474:	0001f744 	.word	0x0001f744
 8007478:	00017858 	.word	0x00017858
 800747c:	0001f514 	.word	0x0001f514
 8007480:	0001f5ec 	.word	0x0001f5ec

08007484 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007492:	4618      	mov	r0, r3
 8007494:	f002 fadc 	bl	8009a50 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 800749e:	4413      	add	r3, r2
 80074a0:	4618      	mov	r0, r3
 80074a2:	f002 fad5 	bl	8009a50 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80074ac:	4413      	add	r3, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f002 face 	bl	8009a50 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <_ZN15Screen1ViewBase11setupScreenEv+0x5c>)
 80074b8:	4413      	add	r3, r2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f002 fac8 	bl	8009a50 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <_ZN15Screen1ViewBase11setupScreenEv+0x60>)
 80074c4:	4413      	add	r3, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 ff10 	bl	80092ec <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <_ZN15Screen1ViewBase11setupScreenEv+0x64>)
 80074d0:	4413      	add	r3, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f001 ff0a 	bl	80092ec <_ZN8alertBar10initializeEv>
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	00017858 	.word	0x00017858
 80074e4:	0001f514 	.word	0x0001f514
 80074e8:	0001f5ec 	.word	0x0001f5ec

080074ec <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f012 f9be 	bl	8019878 <_ZN8touchgfx6ScreenC1Ev>
 80074fc:	4a05      	ldr	r2, [pc, #20]	; (8007514 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	08027b08 	.word	0x08027b08

08007518 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8007518:	b590      	push	{r4, r7, lr}
 800751a:	b089      	sub	sp, #36	; 0x24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	f107 0314 	add.w	r3, r7, #20
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe ffde 	bl	80064f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	461c      	mov	r4, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	61fb      	str	r3, [r7, #28]
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	f107 0310 	add.w	r3, r7, #16
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe ffd2 	bl	80064f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007550:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007552:	461a      	mov	r2, r3
 8007554:	4621      	mov	r1, r4
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f00e fcc4 	bl	8015ee4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 800755c:	bf00      	nop
 800755e:	3724      	adds	r7, #36	; 0x24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd90      	pop	{r4, r7, pc}

08007564 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8007564:	b590      	push	{r4, r7, lr}
 8007566:	b089      	sub	sp, #36	; 0x24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	61bb      	str	r3, [r7, #24]
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	f107 0314 	add.w	r3, r7, #20
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe ffb8 	bl	80064f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	461c      	mov	r4, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	f107 0310 	add.w	r3, r7, #16
 8007594:	4611      	mov	r1, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe ffac 	bl	80064f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800759c:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800759e:	461a      	mov	r2, r3
 80075a0:	4621      	mov	r1, r4
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f00e fca9 	bl	8015efa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 80075a8:	bf00      	nop
 80075aa:	3724      	adds	r7, #36	; 0x24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd90      	pop	{r4, r7, pc}

080075b0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	f107 0308 	add.w	r3, r7, #8
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe ff93 	bl	80064f4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80075ce:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fe ffa9 	bl	800652a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 80075d8:	bf00      	nop
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <_Z41__static_initialization_and_destruction_0ii>:
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b092      	sub	sp, #72	; 0x48
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	f040 8114 	bne.w	800781a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075f8:	4293      	cmp	r3, r2
 80075fa:	f040 810e 	bne.w	800781a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80075fe:	2300      	movs	r3, #0
 8007600:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007604:	2300      	movs	r3, #0
 8007606:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800760a:	2300      	movs	r3, #0
 800760c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007610:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800761c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007624:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007628:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800762c:	041b      	lsls	r3, r3, #16
 800762e:	461a      	mov	r2, r3
 8007630:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	431a      	orrs	r2, r3
 8007638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800763c:	4313      	orrs	r3, r2
 800763e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007642:	f107 0320 	add.w	r3, r7, #32
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f7fc f8b9 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800764e:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8007650:	bf00      	nop
 8007652:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8007654:	4b73      	ldr	r3, [pc, #460]	; (8007824 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	23ff      	movs	r3, #255	; 0xff
 800765a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800765e:	2300      	movs	r3, #0
 8007660:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007664:	2300      	movs	r3, #0
 8007666:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800766a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800766e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8007672:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800767a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800767e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007682:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	461a      	mov	r2, r3
 800768a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	431a      	orrs	r2, r3
 8007692:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007696:	4313      	orrs	r3, r2
 8007698:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800769c:	f107 031c 	add.w	r3, r7, #28
 80076a0:	4611      	mov	r1, r2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fc f88c 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80076a8:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80076aa:	bf00      	nop
 80076ac:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80076ae:	4b5e      	ldr	r3, [pc, #376]	; (8007828 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	2300      	movs	r3, #0
 80076b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80076b8:	23ff      	movs	r3, #255	; 0xff
 80076ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80076be:	2300      	movs	r3, #0
 80076c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80076c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80076cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80076d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80076d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80076dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076e0:	041b      	lsls	r3, r3, #16
 80076e2:	461a      	mov	r2, r3
 80076e4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	431a      	orrs	r2, r3
 80076ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80076f0:	4313      	orrs	r3, r2
 80076f2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80076f6:	f107 0318 	add.w	r3, r7, #24
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fc f85f 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8007702:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8007704:	bf00      	nop
 8007706:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8007708:	4b48      	ldr	r3, [pc, #288]	; (800782c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	2300      	movs	r3, #0
 800770e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007712:	2300      	movs	r3, #0
 8007714:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8007718:	23ff      	movs	r3, #255	; 0xff
 800771a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800771e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007722:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8007726:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800772a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800772e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007732:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007736:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800773a:	041b      	lsls	r3, r3, #16
 800773c:	461a      	mov	r2, r3
 800773e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007742:	021b      	lsls	r3, r3, #8
 8007744:	431a      	orrs	r2, r3
 8007746:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800774a:	4313      	orrs	r3, r2
 800774c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007750:	f107 0314 	add.w	r3, r7, #20
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7fc f832 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800775c:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800775e:	bf00      	nop
 8007760:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8007762:	4b33      	ldr	r3, [pc, #204]	; (8007830 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	23f7      	movs	r3, #247	; 0xf7
 8007768:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800776c:	234c      	movs	r3, #76	; 0x4c
 800776e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8007772:	2302      	movs	r3, #2
 8007774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007778:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800777c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007780:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007784:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8007788:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800778c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007790:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	461a      	mov	r2, r3
 8007798:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800779c:	021b      	lsls	r3, r3, #8
 800779e:	431a      	orrs	r2, r3
 80077a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80077aa:	f107 0310 	add.w	r3, r7, #16
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fc f805 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80077b6:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80077b8:	bf00      	nop
 80077ba:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80077bc:	4b1d      	ldr	r3, [pc, #116]	; (8007834 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	23f7      	movs	r3, #247	; 0xf7
 80077c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80077c6:	23d2      	movs	r3, #210	; 0xd2
 80077c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80077cc:	2302      	movs	r3, #2
 80077ce:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80077d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80077da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80077e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80077ea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80077ee:	041b      	lsls	r3, r3, #16
 80077f0:	461a      	mov	r2, r3
 80077f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	431a      	orrs	r2, r3
 80077fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80077fe:	4313      	orrs	r3, r2
 8007800:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007804:	f107 030c 	add.w	r3, r7, #12
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f7fb ffd8 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8007810:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8007812:	bf00      	nop
 8007814:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8007816:	4b08      	ldr	r3, [pc, #32]	; (8007838 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	bf00      	nop
 800781c:	3748      	adds	r7, #72	; 0x48
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2002364c 	.word	0x2002364c
 8007828:	20023650 	.word	0x20023650
 800782c:	20023654 	.word	0x20023654
 8007830:	20023658 	.word	0x20023658
 8007834:	2002365c 	.word	0x2002365c
 8007838:	20023660 	.word	0x20023660

0800783c <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	4a05      	ldr	r2, [pc, #20]	; (800785c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4618      	mov	r0, r3
 800784e:	f7fe fd1b 	bl	8006288 <_ZN8touchgfx6WidgetD1Ev>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	08028bdc 	.word	0x08028bdc

08007860 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ffe7 	bl	800783c <_ZN8touchgfx12CanvasWidgetD1Ev>
 800786e:	2130      	movs	r1, #48	; 0x30
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f01d fc70 	bl	8025156 <_ZdlPvj>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	4a05      	ldr	r2, [pc, #20]	; (80078a0 <_ZN8touchgfx4LineD1Ev+0x20>)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff ffd3 	bl	800783c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	08028e00 	.word	0x08028e00

080078a4 <_ZN8touchgfx4LineD0Ev>:
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff ffe7 	bl	8007880 <_ZN8touchgfx4LineD1Ev>
 80078b2:	2174      	movs	r1, #116	; 0x74
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f01d fc4e 	bl	8025156 <_ZdlPvj>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe feaf 	bl	8006638 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	08028b58 	.word	0x08028b58

080078e8 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ffe7 	bl	80078c4 <_ZN8touchgfx13PainterRGB888D1Ev>
 80078f6:	2118      	movs	r1, #24
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f01d fc2c 	bl	8025156 <_ZdlPvj>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <_ZN8touchgfx13BoxWithBorderD1Ev>:
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	4a05      	ldr	r2, [pc, #20]	; (8007928 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe ff7f 	bl	800681c <_ZN8touchgfx3BoxD1Ev>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	08029158 	.word	0x08029158

0800792c <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff ffe7 	bl	8007908 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800793a:	2134      	movs	r1, #52	; 0x34
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f01d fc0a 	bl	8025156 <_ZdlPvj>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	4a05      	ldr	r2, [pc, #20]	; (800796c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe fd37 	bl	80063d0 <_ZN8touchgfx8TextAreaD1Ev>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	080290b0 	.word	0x080290b0

08007970 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff ffe7 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800797e:	2140      	movs	r1, #64	; 0x40
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f01d fbe8 	bl	8025156 <_ZdlPvj>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <_GLOBAL__sub_I__ZN15Screen1ViewBaseC2Ev>:
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
 8007994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007998:	2001      	movs	r0, #1
 800799a:	f7ff fe21 	bl	80075e0 <_Z41__static_initialization_and_destruction_0ii>
 800799e:	bd80      	pop	{r7, pc}

080079a0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	4801      	ldr	r0, [pc, #4]	; (80079ac <__tcf_0+0xc>)
 80079a6:	f7fd fc51 	bl	800524c <_ZN8touchgfx13GeneratedFontD1Ev>
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20023664 	.word	0x20023664

080079b0 <_Z24getFont_swisop3_300_4bppv>:
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08c      	sub	sp, #48	; 0x30
 80079b4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 80079b6:	4b20      	ldr	r3, [pc, #128]	; (8007a38 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	f3bf 8f5b 	dmb	ish
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bf0c      	ite	eq
 80079c8:	2301      	moveq	r3, #1
 80079ca:	2300      	movne	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d02d      	beq.n	8007a2e <_Z24getFont_swisop3_300_4bppv+0x7e>
 80079d2:	4819      	ldr	r0, [pc, #100]	; (8007a38 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80079d4:	f01d fbc1 	bl	802515a <__cxa_guard_acquire>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bf14      	ite	ne
 80079de:	2301      	movne	r3, #1
 80079e0:	2300      	moveq	r3, #0
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d022      	beq.n	8007a2e <_Z24getFont_swisop3_300_4bppv+0x7e>
 80079e8:	2300      	movs	r3, #0
 80079ea:	930a      	str	r3, [sp, #40]	; 0x28
 80079ec:	2300      	movs	r3, #0
 80079ee:	9309      	str	r3, [sp, #36]	; 0x24
 80079f0:	2300      	movs	r3, #0
 80079f2:	9308      	str	r3, [sp, #32]
 80079f4:	233f      	movs	r3, #63	; 0x3f
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <_Z24getFont_swisop3_300_4bppv+0x8c>)
 80079fa:	9306      	str	r3, [sp, #24]
 80079fc:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <_Z24getFont_swisop3_300_4bppv+0x90>)
 80079fe:	9305      	str	r3, [sp, #20]
 8007a00:	2300      	movs	r3, #0
 8007a02:	9304      	str	r3, [sp, #16]
 8007a04:	2300      	movs	r3, #0
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	2301      	movs	r3, #1
 8007a0a:	9302      	str	r3, [sp, #8]
 8007a0c:	2304      	movs	r3, #4
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	233b      	movs	r3, #59	; 0x3b
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007a18:	223f      	movs	r2, #63	; 0x3f
 8007a1a:	490a      	ldr	r1, [pc, #40]	; (8007a44 <_Z24getFont_swisop3_300_4bppv+0x94>)
 8007a1c:	480a      	ldr	r0, [pc, #40]	; (8007a48 <_Z24getFont_swisop3_300_4bppv+0x98>)
 8007a1e:	f7fe f929 	bl	8005c74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007a22:	4805      	ldr	r0, [pc, #20]	; (8007a38 <_Z24getFont_swisop3_300_4bppv+0x88>)
 8007a24:	f01d fba5 	bl	8025172 <__cxa_guard_release>
 8007a28:	4808      	ldr	r0, [pc, #32]	; (8007a4c <_Z24getFont_swisop3_300_4bppv+0x9c>)
 8007a2a:	f01d fd31 	bl	8025490 <atexit>
    return swisop3_300_4bpp;
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	2002368c 	.word	0x2002368c
 8007a3c:	080cff5c 	.word	0x080cff5c
 8007a40:	08027bac 	.word	0x08027bac
 8007a44:	080cedb4 	.word	0x080cedb4
 8007a48:	20023664 	.word	0x20023664
 8007a4c:	080079a1 	.word	0x080079a1

08007a50 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_40_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_40_4bpp()
{
    static touchgfx::GeneratedFont swisop3_40_4bpp(glyphs_swisop3_40_4bpp, 66, 40, 8, 4, 1, 0, 0, unicodes_swisop3_40_4bpp, kerning_swisop3_40_4bpp, 63, 0, 0, 0);
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	4801      	ldr	r0, [pc, #4]	; (8007a5c <__tcf_0+0xc>)
 8007a56:	f7fd fbf9 	bl	800524c <_ZN8touchgfx13GeneratedFontD1Ev>
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20023690 	.word	0x20023690

08007a60 <_Z23getFont_swisop3_40_4bppv>:
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08c      	sub	sp, #48	; 0x30
 8007a64:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_40_4bpp(glyphs_swisop3_40_4bpp, 66, 40, 8, 4, 1, 0, 0, unicodes_swisop3_40_4bpp, kerning_swisop3_40_4bpp, 63, 0, 0, 0);
 8007a66:	4b1f      	ldr	r3, [pc, #124]	; (8007ae4 <_Z23getFont_swisop3_40_4bppv+0x84>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f3bf 8f5b 	dmb	ish
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bf0c      	ite	eq
 8007a78:	2301      	moveq	r3, #1
 8007a7a:	2300      	movne	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d02c      	beq.n	8007adc <_Z23getFont_swisop3_40_4bppv+0x7c>
 8007a82:	4818      	ldr	r0, [pc, #96]	; (8007ae4 <_Z23getFont_swisop3_40_4bppv+0x84>)
 8007a84:	f01d fb69 	bl	802515a <__cxa_guard_acquire>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bf14      	ite	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	2300      	moveq	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d021      	beq.n	8007adc <_Z23getFont_swisop3_40_4bppv+0x7c>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9308      	str	r3, [sp, #32]
 8007aa4:	233f      	movs	r3, #63	; 0x3f
 8007aa6:	9307      	str	r3, [sp, #28]
 8007aa8:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <_Z23getFont_swisop3_40_4bppv+0x88>)
 8007aaa:	9306      	str	r3, [sp, #24]
 8007aac:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <_Z23getFont_swisop3_40_4bppv+0x8c>)
 8007aae:	9305      	str	r3, [sp, #20]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	2301      	movs	r3, #1
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	2304      	movs	r3, #4
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	2308      	movs	r3, #8
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	2328      	movs	r3, #40	; 0x28
 8007ac6:	2242      	movs	r2, #66	; 0x42
 8007ac8:	4909      	ldr	r1, [pc, #36]	; (8007af0 <_Z23getFont_swisop3_40_4bppv+0x90>)
 8007aca:	480a      	ldr	r0, [pc, #40]	; (8007af4 <_Z23getFont_swisop3_40_4bppv+0x94>)
 8007acc:	f7fe f8d2 	bl	8005c74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007ad0:	4804      	ldr	r0, [pc, #16]	; (8007ae4 <_Z23getFont_swisop3_40_4bppv+0x84>)
 8007ad2:	f01d fb4e 	bl	8025172 <__cxa_guard_release>
 8007ad6:	4808      	ldr	r0, [pc, #32]	; (8007af8 <_Z23getFont_swisop3_40_4bppv+0x98>)
 8007ad8:	f01d fcda 	bl	8025490 <atexit>
    return swisop3_40_4bpp;
 8007adc:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <_Z23getFont_swisop3_40_4bppv+0x94>)
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	200236b8 	.word	0x200236b8
 8007ae8:	080cff60 	.word	0x080cff60
 8007aec:	08027bb0 	.word	0x08027bb0
 8007af0:	080cf128 	.word	0x080cf128
 8007af4:	20023690 	.word	0x20023690
 8007af8:	08007a51 	.word	0x08007a51

08007afc <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	4801      	ldr	r0, [pc, #4]	; (8007b08 <__tcf_0+0xc>)
 8007b02:	f7fd fba3 	bl	800524c <_ZN8touchgfx13GeneratedFontD1Ev>
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	200236bc 	.word	0x200236bc

08007b0c <_Z23getFont_swisop3_50_4bppv>:
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08c      	sub	sp, #48	; 0x30
 8007b10:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 8007b12:	4b1f      	ldr	r3, [pc, #124]	; (8007b90 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	f3bf 8f5b 	dmb	ish
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bf0c      	ite	eq
 8007b24:	2301      	moveq	r3, #1
 8007b26:	2300      	movne	r3, #0
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d02c      	beq.n	8007b88 <_Z23getFont_swisop3_50_4bppv+0x7c>
 8007b2e:	4818      	ldr	r0, [pc, #96]	; (8007b90 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8007b30:	f01d fb13 	bl	802515a <__cxa_guard_acquire>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bf14      	ite	ne
 8007b3a:	2301      	movne	r3, #1
 8007b3c:	2300      	moveq	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d021      	beq.n	8007b88 <_Z23getFont_swisop3_50_4bppv+0x7c>
 8007b44:	2300      	movs	r3, #0
 8007b46:	930a      	str	r3, [sp, #40]	; 0x28
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9308      	str	r3, [sp, #32]
 8007b50:	233f      	movs	r3, #63	; 0x3f
 8007b52:	9307      	str	r3, [sp, #28]
 8007b54:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <_Z23getFont_swisop3_50_4bppv+0x88>)
 8007b56:	9306      	str	r3, [sp, #24]
 8007b58:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 8007b5a:	9305      	str	r3, [sp, #20]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9304      	str	r3, [sp, #16]
 8007b60:	2300      	movs	r3, #0
 8007b62:	9303      	str	r3, [sp, #12]
 8007b64:	2301      	movs	r3, #1
 8007b66:	9302      	str	r3, [sp, #8]
 8007b68:	2304      	movs	r3, #4
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	230a      	movs	r3, #10
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	2332      	movs	r3, #50	; 0x32
 8007b72:	2241      	movs	r2, #65	; 0x41
 8007b74:	4909      	ldr	r1, [pc, #36]	; (8007b9c <_Z23getFont_swisop3_50_4bppv+0x90>)
 8007b76:	480a      	ldr	r0, [pc, #40]	; (8007ba0 <_Z23getFont_swisop3_50_4bppv+0x94>)
 8007b78:	f7fe f87c 	bl	8005c74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007b7c:	4804      	ldr	r0, [pc, #16]	; (8007b90 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8007b7e:	f01d faf8 	bl	8025172 <__cxa_guard_release>
 8007b82:	4808      	ldr	r0, [pc, #32]	; (8007ba4 <_Z23getFont_swisop3_50_4bppv+0x98>)
 8007b84:	f01d fc84 	bl	8025490 <atexit>
    return swisop3_50_4bpp;
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	200236e4 	.word	0x200236e4
 8007b94:	080cff64 	.word	0x080cff64
 8007b98:	08027bb4 	.word	0x08027bb4
 8007b9c:	080cf4c4 	.word	0x080cf4c4
 8007ba0:	200236bc 	.word	0x200236bc
 8007ba4:	08007afd 	.word	0x08007afd

08007ba8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_60_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_60_4bpp()
{
    static touchgfx::GeneratedFont swisop3_60_4bpp(glyphs_swisop3_60_4bpp, 63, 60, 12, 4, 1, 0, 0, unicodes_swisop3_60_4bpp, kerning_swisop3_60_4bpp, 63, 0, 0, 0);
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	4801      	ldr	r0, [pc, #4]	; (8007bb4 <__tcf_0+0xc>)
 8007bae:	f7fd fb4d 	bl	800524c <_ZN8touchgfx13GeneratedFontD1Ev>
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	200236e8 	.word	0x200236e8

08007bb8 <_Z23getFont_swisop3_60_4bppv>:
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08c      	sub	sp, #48	; 0x30
 8007bbc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_60_4bpp(glyphs_swisop3_60_4bpp, 63, 60, 12, 4, 1, 0, 0, unicodes_swisop3_60_4bpp, kerning_swisop3_60_4bpp, 63, 0, 0, 0);
 8007bbe:	4b1f      	ldr	r3, [pc, #124]	; (8007c3c <_Z23getFont_swisop3_60_4bppv+0x84>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f3bf 8f5b 	dmb	ish
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d02c      	beq.n	8007c34 <_Z23getFont_swisop3_60_4bppv+0x7c>
 8007bda:	4818      	ldr	r0, [pc, #96]	; (8007c3c <_Z23getFont_swisop3_60_4bppv+0x84>)
 8007bdc:	f01d fabd 	bl	802515a <__cxa_guard_acquire>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf14      	ite	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	2300      	moveq	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d021      	beq.n	8007c34 <_Z23getFont_swisop3_60_4bppv+0x7c>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	9308      	str	r3, [sp, #32]
 8007bfc:	233f      	movs	r3, #63	; 0x3f
 8007bfe:	9307      	str	r3, [sp, #28]
 8007c00:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <_Z23getFont_swisop3_60_4bppv+0x88>)
 8007c02:	9306      	str	r3, [sp, #24]
 8007c04:	4b0f      	ldr	r3, [pc, #60]	; (8007c44 <_Z23getFont_swisop3_60_4bppv+0x8c>)
 8007c06:	9305      	str	r3, [sp, #20]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9303      	str	r3, [sp, #12]
 8007c10:	2301      	movs	r3, #1
 8007c12:	9302      	str	r3, [sp, #8]
 8007c14:	2304      	movs	r3, #4
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	230c      	movs	r3, #12
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	233c      	movs	r3, #60	; 0x3c
 8007c1e:	223f      	movs	r2, #63	; 0x3f
 8007c20:	4909      	ldr	r1, [pc, #36]	; (8007c48 <_Z23getFont_swisop3_60_4bppv+0x90>)
 8007c22:	480a      	ldr	r0, [pc, #40]	; (8007c4c <_Z23getFont_swisop3_60_4bppv+0x94>)
 8007c24:	f7fe f826 	bl	8005c74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007c28:	4804      	ldr	r0, [pc, #16]	; (8007c3c <_Z23getFont_swisop3_60_4bppv+0x84>)
 8007c2a:	f01d faa2 	bl	8025172 <__cxa_guard_release>
 8007c2e:	4808      	ldr	r0, [pc, #32]	; (8007c50 <_Z23getFont_swisop3_60_4bppv+0x98>)
 8007c30:	f01d fc2e 	bl	8025490 <atexit>
    return swisop3_60_4bpp;
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <_Z23getFont_swisop3_60_4bppv+0x94>)
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20023710 	.word	0x20023710
 8007c40:	080cff68 	.word	0x080cff68
 8007c44:	08027bb8 	.word	0x08027bb8
 8007c48:	080cf854 	.word	0x080cf854
 8007c4c:	200236e8 	.word	0x200236e8
 8007c50:	08007ba9 	.word	0x08007ba9

08007c54 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	4801      	ldr	r0, [pc, #4]	; (8007c60 <__tcf_0+0xc>)
 8007c5a:	f7fd faf7 	bl	800524c <_ZN8touchgfx13GeneratedFontD1Ev>
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20023714 	.word	0x20023714

08007c64 <_Z23getFont_verdana_10_4bppv>:
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08c      	sub	sp, #48	; 0x30
 8007c68:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007c6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ce8 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	f3bf 8f5b 	dmb	ish
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2301      	moveq	r3, #1
 8007c7e:	2300      	movne	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d02c      	beq.n	8007ce0 <_Z23getFont_verdana_10_4bppv+0x7c>
 8007c86:	4818      	ldr	r0, [pc, #96]	; (8007ce8 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007c88:	f01d fa67 	bl	802515a <__cxa_guard_acquire>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bf14      	ite	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	2300      	moveq	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d021      	beq.n	8007ce0 <_Z23getFont_verdana_10_4bppv+0x7c>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	9308      	str	r3, [sp, #32]
 8007ca8:	233f      	movs	r3, #63	; 0x3f
 8007caa:	9307      	str	r3, [sp, #28]
 8007cac:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <_Z23getFont_verdana_10_4bppv+0x88>)
 8007cae:	9306      	str	r3, [sp, #24]
 8007cb0:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9304      	str	r3, [sp, #16]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	9302      	str	r3, [sp, #8]
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	230a      	movs	r3, #10
 8007cca:	2201      	movs	r2, #1
 8007ccc:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <_Z23getFont_verdana_10_4bppv+0x90>)
 8007cce:	480a      	ldr	r0, [pc, #40]	; (8007cf8 <_Z23getFont_verdana_10_4bppv+0x94>)
 8007cd0:	f7fd ffd0 	bl	8005c74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007cd4:	4804      	ldr	r0, [pc, #16]	; (8007ce8 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007cd6:	f01d fa4c 	bl	8025172 <__cxa_guard_release>
 8007cda:	4808      	ldr	r0, [pc, #32]	; (8007cfc <_Z23getFont_verdana_10_4bppv+0x98>)
 8007cdc:	f01d fbd8 	bl	8025490 <atexit>
    return verdana_10_4bpp;
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	2002373c 	.word	0x2002373c
 8007cec:	080cff6c 	.word	0x080cff6c
 8007cf0:	08027bbc 	.word	0x08027bbc
 8007cf4:	080cfbc8 	.word	0x080cfbc8
 8007cf8:	20023714 	.word	0x20023714
 8007cfc:	08007c55 	.word	0x08007c55

08007d00 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	4801      	ldr	r0, [pc, #4]	; (8007d0c <__tcf_0+0xc>)
 8007d06:	f7fd faa1 	bl	800524c <_ZN8touchgfx13GeneratedFontD1Ev>
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20023740 	.word	0x20023740

08007d10 <_Z23getFont_verdana_20_4bppv>:
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08c      	sub	sp, #48	; 0x30
 8007d14:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007d16:	4b1f      	ldr	r3, [pc, #124]	; (8007d94 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	f3bf 8f5b 	dmb	ish
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bf0c      	ite	eq
 8007d28:	2301      	moveq	r3, #1
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d02c      	beq.n	8007d8c <_Z23getFont_verdana_20_4bppv+0x7c>
 8007d32:	4818      	ldr	r0, [pc, #96]	; (8007d94 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007d34:	f01d fa11 	bl	802515a <__cxa_guard_acquire>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	bf14      	ite	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	2300      	moveq	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d021      	beq.n	8007d8c <_Z23getFont_verdana_20_4bppv+0x7c>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d50:	2300      	movs	r3, #0
 8007d52:	9308      	str	r3, [sp, #32]
 8007d54:	233f      	movs	r3, #63	; 0x3f
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <_Z23getFont_verdana_20_4bppv+0x88>)
 8007d5a:	9306      	str	r3, [sp, #24]
 8007d5c:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8007d5e:	9305      	str	r3, [sp, #20]
 8007d60:	2301      	movs	r3, #1
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	2301      	movs	r3, #1
 8007d66:	9303      	str	r3, [sp, #12]
 8007d68:	2301      	movs	r3, #1
 8007d6a:	9302      	str	r3, [sp, #8]
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	2304      	movs	r3, #4
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	2314      	movs	r3, #20
 8007d76:	223f      	movs	r2, #63	; 0x3f
 8007d78:	4909      	ldr	r1, [pc, #36]	; (8007da0 <_Z23getFont_verdana_20_4bppv+0x90>)
 8007d7a:	480a      	ldr	r0, [pc, #40]	; (8007da4 <_Z23getFont_verdana_20_4bppv+0x94>)
 8007d7c:	f7fd ff7a 	bl	8005c74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007d80:	4804      	ldr	r0, [pc, #16]	; (8007d94 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007d82:	f01d f9f6 	bl	8025172 <__cxa_guard_release>
 8007d86:	4808      	ldr	r0, [pc, #32]	; (8007da8 <_Z23getFont_verdana_20_4bppv+0x98>)
 8007d88:	f01d fb82 	bl	8025490 <atexit>
    return verdana_20_4bpp;
 8007d8c:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20023768 	.word	0x20023768
 8007d98:	080cff70 	.word	0x080cff70
 8007d9c:	08027bc0 	.word	0x08027bc0
 8007da0:	080cfbd8 	.word	0x080cfbd8
 8007da4:	20023740 	.word	0x20023740
 8007da8:	08007d01 	.word	0x08007d01

08007dac <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	4801      	ldr	r0, [pc, #4]	; (8007db8 <__tcf_0+0xc>)
 8007db2:	f7fd fa4b 	bl	800524c <_ZN8touchgfx13GeneratedFontD1Ev>
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	2002376c 	.word	0x2002376c

08007dbc <_Z23getFont_verdana_40_4bppv>:
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08c      	sub	sp, #48	; 0x30
 8007dc0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007dc2:	4b1f      	ldr	r3, [pc, #124]	; (8007e40 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	f3bf 8f5b 	dmb	ish
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bf0c      	ite	eq
 8007dd4:	2301      	moveq	r3, #1
 8007dd6:	2300      	movne	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d02c      	beq.n	8007e38 <_Z23getFont_verdana_40_4bppv+0x7c>
 8007dde:	4818      	ldr	r0, [pc, #96]	; (8007e40 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007de0:	f01d f9bb 	bl	802515a <__cxa_guard_acquire>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bf14      	ite	ne
 8007dea:	2301      	movne	r3, #1
 8007dec:	2300      	moveq	r3, #0
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d021      	beq.n	8007e38 <_Z23getFont_verdana_40_4bppv+0x7c>
 8007df4:	2300      	movs	r3, #0
 8007df6:	930a      	str	r3, [sp, #40]	; 0x28
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9308      	str	r3, [sp, #32]
 8007e00:	233f      	movs	r3, #63	; 0x3f
 8007e02:	9307      	str	r3, [sp, #28]
 8007e04:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <_Z23getFont_verdana_40_4bppv+0x88>)
 8007e06:	9306      	str	r3, [sp, #24]
 8007e08:	4b0f      	ldr	r3, [pc, #60]	; (8007e48 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8007e0a:	9305      	str	r3, [sp, #20]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9304      	str	r3, [sp, #16]
 8007e10:	2300      	movs	r3, #0
 8007e12:	9303      	str	r3, [sp, #12]
 8007e14:	2301      	movs	r3, #1
 8007e16:	9302      	str	r3, [sp, #8]
 8007e18:	2304      	movs	r3, #4
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	2328      	movs	r3, #40	; 0x28
 8007e22:	2201      	movs	r2, #1
 8007e24:	4909      	ldr	r1, [pc, #36]	; (8007e4c <_Z23getFont_verdana_40_4bppv+0x90>)
 8007e26:	480a      	ldr	r0, [pc, #40]	; (8007e50 <_Z23getFont_verdana_40_4bppv+0x94>)
 8007e28:	f7fd ff24 	bl	8005c74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007e2c:	4804      	ldr	r0, [pc, #16]	; (8007e40 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007e2e:	f01d f9a0 	bl	8025172 <__cxa_guard_release>
 8007e32:	4808      	ldr	r0, [pc, #32]	; (8007e54 <_Z23getFont_verdana_40_4bppv+0x98>)
 8007e34:	f01d fb2c 	bl	8025490 <atexit>
    return verdana_40_4bpp;
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20023794 	.word	0x20023794
 8007e44:	080d0050 	.word	0x080d0050
 8007e48:	08027bc4 	.word	0x08027bc4
 8007e4c:	080cff4c 	.word	0x080cff4c
 8007e50:	2002376c 	.word	0x2002376c
 8007e54:	08007dad 	.word	0x08007dad

08007e58 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	460b      	mov	r3, r1
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8007e66:	2300      	movs	r3, #0
    }
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8007e7c:	2300      	movs	r3, #0
    }
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8007e92:	2300      	movs	r3, #0
    }
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8007eae:	4a07      	ldr	r2, [pc, #28]	; (8007ecc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6013      	str	r3, [r2, #0]
        fonts = f;
 8007eb4:	4a06      	ldr	r2, [pc, #24]	; (8007ed0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8007eba:	4a06      	ldr	r2, [pc, #24]	; (8007ed4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
 8007ebe:	8013      	strh	r3, [r2, #0]
    }
 8007ec0:	bf00      	nop
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	200565ac 	.word	0x200565ac
 8007ed0:	200565b4 	.word	0x200565b4
 8007ed4:	200565b0 	.word	0x200565b0

08007ed8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8007ed8:	b40e      	push	{r1, r2, r3}
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b085      	sub	sp, #20
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8007ee2:	f107 0320 	add.w	r3, r7, #32
 8007ee6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	2100      	movs	r1, #0
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f010 ffb6 	bl	8018e60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8007ef8:	89fb      	ldrh	r3, [r7, #14]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f04:	b003      	add	sp, #12
 8007f06:	4770      	bx	lr

08007f08 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8007f08:	b40c      	push	{r2, r3}
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8007f16:	f107 031c 	add.w	r3, r7, #28
 8007f1a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8007f1c:	78f9      	ldrb	r1, [r7, #3]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f010 ff9c 	bl	8018e60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8007f2c:	89fb      	ldrh	r3, [r7, #14]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f38:	b002      	add	sp, #8
 8007f3a:	4770      	bx	lr

08007f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	; 0x28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d016      	beq.n	8007f7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	331a      	adds	r3, #26
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	8adb      	ldrh	r3, [r3, #22]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d105      	bne.n	8007f6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8007f5e:	4b43      	ldr	r3, [pc, #268]	; (800806c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8007f60:	4a43      	ldr	r2, [pc, #268]	; (8008070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8007f62:	21bf      	movs	r1, #191	; 0xbf
 8007f64:	4843      	ldr	r0, [pc, #268]	; (8008074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8007f66:	f01d fa75 	bl	8025454 <__assert_func>
            return buffer[pos];
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	8a9b      	ldrh	r3, [r3, #20]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d06a      	beq.n	800805a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f012 fb57 	bl	801a638 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	331a      	adds	r3, #26
 8007f8e:	623b      	str	r3, [r7, #32]
 8007f90:	2301      	movs	r3, #1
 8007f92:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	8adb      	ldrh	r3, [r3, #22]
 8007f98:	8bfa      	ldrh	r2, [r7, #30]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d305      	bcc.n	8007faa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8007f9e:	4b36      	ldr	r3, [pc, #216]	; (8008078 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8007fa0:	4a36      	ldr	r2, [pc, #216]	; (800807c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8007fa2:	21c4      	movs	r1, #196	; 0xc4
 8007fa4:	4833      	ldr	r0, [pc, #204]	; (8008074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8007fa6:	f01d fa55 	bl	8025454 <__assert_func>
            const uint16_t index = pos + offset;
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	8a9a      	ldrh	r2, [r3, #20]
 8007fae:	8bfb      	ldrh	r3, [r7, #30]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8007fb4:	8bbb      	ldrh	r3, [r7, #28]
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	d801      	bhi.n	8007fbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8007fba:	8bbb      	ldrh	r3, [r7, #28]
 8007fbc:	e001      	b.n	8007fc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8007fbe:	8bbb      	ldrh	r3, [r7, #28]
 8007fc0:	3b0a      	subs	r3, #10
 8007fc2:	6a3a      	ldr	r2, [r7, #32]
 8007fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc8:	f640 123f 	movw	r2, #2367	; 0x93f
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	bf0c      	ite	eq
 8007fd0:	2301      	moveq	r3, #1
 8007fd2:	2300      	movne	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d03f      	beq.n	800805a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	331a      	adds	r3, #26
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	321a      	adds	r2, #26
 8007fe2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	8ad2      	ldrh	r2, [r2, #22]
 8007fe8:	2a00      	cmp	r2, #0
 8007fea:	d105      	bne.n	8007ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8007fec:	4b1f      	ldr	r3, [pc, #124]	; (800806c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8007fee:	4a20      	ldr	r2, [pc, #128]	; (8008070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8007ff0:	21bf      	movs	r1, #191	; 0xbf
 8007ff2:	4820      	ldr	r0, [pc, #128]	; (8008074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8007ff4:	f01d fa2e 	bl	8025454 <__assert_func>
            return buffer[pos];
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	8a92      	ldrh	r2, [r2, #20]
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	4613      	mov	r3, r2
 8008008:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	8adb      	ldrh	r3, [r3, #22]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d806      	bhi.n	8008020 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008012:	4b1b      	ldr	r3, [pc, #108]	; (8008080 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008014:	4a1b      	ldr	r2, [pc, #108]	; (8008084 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008016:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800801a:	4816      	ldr	r0, [pc, #88]	; (8008074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800801c:	f01d fa1a 	bl	8025454 <__assert_func>
            const uint16_t index = pos + 1;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	8a9b      	ldrh	r3, [r3, #20]
 8008024:	3301      	adds	r3, #1
 8008026:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008028:	89bb      	ldrh	r3, [r7, #12]
 800802a:	2b09      	cmp	r3, #9
 800802c:	d801      	bhi.n	8008032 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800802e:	89bb      	ldrh	r3, [r7, #12]
 8008030:	e000      	b.n	8008034 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8008032:	2300      	movs	r3, #0
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	89f9      	ldrh	r1, [r7, #14]
 8008038:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800803c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	331a      	adds	r3, #26
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	f640 133f 	movw	r3, #2367	; 0x93f
 8008048:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	8a9b      	ldrh	r3, [r3, #20]
 800804e:	4619      	mov	r1, r3
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	8afa      	ldrh	r2, [r7, #22]
 8008054:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008058:	bf00      	nop
        }
    }
    return getNextChar();
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f012 f9d0 	bl	801a400 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008060:	4603      	mov	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3728      	adds	r7, #40	; 0x28
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	080271f0 	.word	0x080271f0
 8008070:	080271fc 	.word	0x080271fc
 8008074:	080272a8 	.word	0x080272a8
 8008078:	080272f4 	.word	0x080272f4
 800807c:	08027304 	.word	0x08027304
 8008080:	080273d8 	.word	0x080273d8
 8008084:	080273e4 	.word	0x080273e4

08008088 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f012 f96f 	bl	801a374 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b088      	sub	sp, #32
 80080a2:	af02      	add	r7, sp, #8
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	1d38      	adds	r0, r7, #4
 80080a8:	e880 0006 	stmia.w	r0, {r1, r2}
 80080ac:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80080ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080b2:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80080b4:	1d39      	adds	r1, r7, #4
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f00f fc28 	bl	8017918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80080c8:	bf00      	nop
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80080d0:	b590      	push	{r4, r7, lr}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d127      	bne.n	8008134 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80080e4:	88fb      	ldrh	r3, [r7, #6]
 80080e6:	4a1e      	ldr	r2, [pc, #120]	; (8008160 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80080e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d016      	beq.n	800811e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80080f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	4413      	add	r3, r2
 8008102:	4a18      	ldr	r2, [pc, #96]	; (8008164 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008104:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4413      	add	r3, r2
 800810e:	4a16      	ldr	r2, [pc, #88]	; (8008168 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008110:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	4413      	add	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	e00a      	b.n	8008134 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800811e:	4b11      	ldr	r3, [pc, #68]	; (8008164 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008120:	4a12      	ldr	r2, [pc, #72]	; (800816c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8008122:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008124:	4a12      	ldr	r2, [pc, #72]	; (8008170 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8008126:	4b10      	ldr	r3, [pc, #64]	; (8008168 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008128:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	4a11      	ldr	r2, [pc, #68]	; (8008174 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800812e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008132:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00d      	beq.n	8008156 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800813a:	4a0f      	ldr	r2, [pc, #60]	; (8008178 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800813c:	88fb      	ldrh	r3, [r7, #6]
 800813e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8008140:	f000 f83e 	bl	80081c0 <_ZN17TypedTextDatabase8getFontsEv>
 8008144:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8008146:	f000 f833 	bl	80081b0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800814a:	4603      	mov	r3, r0
 800814c:	461a      	mov	r2, r3
 800814e:	4621      	mov	r1, r4
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff fea5 	bl	8007ea0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	bd90      	pop	{r4, r7, pc}
 800815e:	bf00      	nop
 8008160:	20023798 	.word	0x20023798
 8008164:	200237a0 	.word	0x200237a0
 8008168:	200237a4 	.word	0x200237a4
 800816c:	080d0088 	.word	0x080d0088
 8008170:	080d0054 	.word	0x080d0054
 8008174:	080d011c 	.word	0x080d011c
 8008178:	2002379c 	.word	0x2002379c

0800817c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008188:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	4b07      	ldr	r3, [pc, #28]	; (80081ac <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	887b      	ldrh	r3, [r7, #2]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	4413      	add	r3, r2
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	200237a0 	.word	0x200237a0
 80081ac:	200237a4 	.word	0x200237a4

080081b0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80081b4:	230d      	movs	r3, #13
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80081c4:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	200237a8 	.word	0x200237a8

080081d4 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_swisop3_50_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d127      	bne.n	8008234 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d122      	bne.n	8008234 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_verdana_20_4bpp()),
 80081ee:	f7ff fd8f 	bl	8007d10 <_Z23getFont_verdana_20_4bppv>
 80081f2:	4603      	mov	r3, r0
};
 80081f4:	4a11      	ldr	r2, [pc, #68]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80081f6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80081f8:	f7ff fde0 	bl	8007dbc <_Z23getFont_verdana_40_4bppv>
 80081fc:	4603      	mov	r3, r0
};
 80081fe:	4a0f      	ldr	r2, [pc, #60]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008200:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 8008202:	f7ff fd2f 	bl	8007c64 <_Z23getFont_verdana_10_4bppv>
 8008206:	4603      	mov	r3, r0
};
 8008208:	4a0c      	ldr	r2, [pc, #48]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800820a:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_300_4bpp()),
 800820c:	f7ff fbd0 	bl	80079b0 <_Z24getFont_swisop3_300_4bppv>
 8008210:	4603      	mov	r3, r0
};
 8008212:	4a0a      	ldr	r2, [pc, #40]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008214:	60d3      	str	r3, [r2, #12]
    &(getFont_swisop3_40_4bpp()),
 8008216:	f7ff fc23 	bl	8007a60 <_Z23getFont_swisop3_40_4bppv>
 800821a:	4603      	mov	r3, r0
};
 800821c:	4a07      	ldr	r2, [pc, #28]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800821e:	6113      	str	r3, [r2, #16]
    &(getFont_swisop3_60_4bpp()),
 8008220:	f7ff fcca 	bl	8007bb8 <_Z23getFont_swisop3_60_4bppv>
 8008224:	4603      	mov	r3, r0
};
 8008226:	4a05      	ldr	r2, [pc, #20]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008228:	6153      	str	r3, [r2, #20]
    &(getFont_swisop3_50_4bpp())
 800822a:	f7ff fc6f 	bl	8007b0c <_Z23getFont_swisop3_50_4bppv>
 800822e:	4603      	mov	r3, r0
};
 8008230:	4a02      	ldr	r2, [pc, #8]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008232:	6193      	str	r3, [r2, #24]
} // namespace TypedTextDatabase
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	200237a8 	.word	0x200237a8

08008240 <_GLOBAL__sub_I_touchgfx_fonts>:
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
 8008244:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008248:	2001      	movs	r0, #1
 800824a:	f7ff ffc3 	bl	80081d4 <_Z41__static_initialization_and_destruction_0ii>
 800824e:	bd80      	pop	{r7, pc}

08008250 <_ZN8touchgfx13BoxWithBorderC1Ev>:
{
public:
    BoxWithBorder()
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe f836 	bl	80062cc <_ZN8touchgfx3BoxC1Ev>
 8008260:	4a08      	ldr	r2, [pc, #32]	; (8008284 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	332c      	adds	r3, #44	; 0x2c
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f7fb faa7 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	08029158 	.word	0x08029158

08008288 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	887a      	ldrh	r2, [r7, #2]
 80082b4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
	...

080082c4 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b091      	sub	sp, #68	; 0x44
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fd fe4e 	bl	8005f70 <_ZN8touchgfx9ContainerC1Ev>
 80082d4:	4a69      	ldr	r2, [pc, #420]	; (800847c <_ZN12alertBarBaseC1Ev+0x1b8>)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	332c      	adds	r3, #44	; 0x2c
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff ffb6 	bl	8008250 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3360      	adds	r3, #96	; 0x60
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe f899 	bl	8006420 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fd fdc5 	bl	8005e84 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	213c      	movs	r1, #60	; 0x3c
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fd fdcf 	bl	8005ea2 <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800830a:	233c      	movs	r3, #60	; 0x3c
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008312:	2200      	movs	r2, #0
 8008314:	2100      	movs	r1, #0
 8008316:	f7fd fe7a 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008320:	23ff      	movs	r3, #255	; 0xff
 8008322:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008326:	2300      	movs	r3, #0
 8008328:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800832c:	2300      	movs	r3, #0
 800832e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008332:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	461a      	mov	r2, r3
 800833a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	431a      	orrs	r2, r3
 8008342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008346:	4313      	orrs	r3, r2
 8008348:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800834c:	f107 031c 	add.w	r3, r7, #28
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f7fb fa34 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	4619      	mov	r1, r3
 800835c:	4620      	mov	r0, r4
 800835e:	f7fd ffd9 	bl	8006314 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008368:	2300      	movs	r3, #0
 800836a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800836e:	2300      	movs	r3, #0
 8008370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008374:	2300      	movs	r3, #0
 8008376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800837a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800837e:	041b      	lsls	r3, r3, #16
 8008380:	461a      	mov	r2, r3
 8008382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008386:	021b      	lsls	r3, r3, #8
 8008388:	431a      	orrs	r2, r3
 800838a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800838e:	4313      	orrs	r3, r2
 8008390:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008394:	f107 0318 	add.w	r3, r7, #24
 8008398:	4611      	mov	r1, r2
 800839a:	4618      	mov	r0, r3
 800839c:	f7fb fa10 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	4619      	mov	r1, r3
 80083a4:	4620      	mov	r0, r4
 80083a6:	f7ff ff6f 	bl	8008288 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	332c      	adds	r3, #44	; 0x2c
 80083ae:	2105      	movs	r1, #5
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff ff77 	bl	80082a4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(263, 0, 302, 60);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80083bc:	233c      	movs	r3, #60	; 0x3c
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80083c4:	2200      	movs	r2, #0
 80083c6:	f240 1107 	movw	r1, #263	; 0x107
 80083ca:	f7fd fe20 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80083d4:	23ff      	movs	r3, #255	; 0xff
 80083d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083da:	23ff      	movs	r3, #255	; 0xff
 80083dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083e0:	23ff      	movs	r3, #255	; 0xff
 80083e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80083e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	461a      	mov	r2, r3
 80083ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80083f2:	021b      	lsls	r3, r3, #8
 80083f4:	431a      	orrs	r2, r3
 80083f6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008400:	f107 0314 	add.w	r3, r7, #20
 8008404:	4611      	mov	r1, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f7fb f9da 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	62fc      	str	r4, [r7, #44]	; 0x2c
 8008410:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008418:	bf00      	nop
    frontText.setLinespacing(0);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3360      	adds	r3, #96	; 0x60
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
 8008420:	2300      	movs	r3, #0
 8008422:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8008424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008426:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008428:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800842a:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	2105      	movs	r1, #5
 8008438:	4618      	mov	r0, r3
 800843a:	f7fd ff79 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 800843e:	f107 030c 	add.w	r3, r7, #12
 8008442:	4619      	mov	r1, r3
 8008444:	4620      	mov	r0, r4
 8008446:	f00d ffe8 	bl	801641a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800844a:	f107 030c 	add.w	r3, r7, #12
 800844e:	4618      	mov	r0, r3
 8008450:	f7fc ff1e 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	332c      	adds	r3, #44	; 0x2c
 800845a:	4619      	mov	r1, r3
 800845c:	4610      	mov	r0, r2
 800845e:	f00c f81d 	bl	801449c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3360      	adds	r3, #96	; 0x60
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f00c f816 	bl	801449c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4618      	mov	r0, r3
 8008474:	373c      	adds	r7, #60	; 0x3c
 8008476:	46bd      	mov	sp, r7
 8008478:	bd90      	pop	{r4, r7, pc}
 800847a:	bf00      	nop
 800847c:	08027c24 	.word	0x08027c24

08008480 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]

}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 8008494:	b590      	push	{r4, r7, lr}
 8008496:	b091      	sub	sp, #68	; 0x44
 8008498:	af02      	add	r7, sp, #8
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fd fd66 	bl	8005f70 <_ZN8touchgfx9ContainerC1Ev>
 80084a4:	4a6a      	ldr	r2, [pc, #424]	; (8008650 <_ZN11tempBoxBaseC1Ev+0x1bc>)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	332c      	adds	r3, #44	; 0x2c
 80084ae:	4618      	mov	r0, r3
 80084b0:	f00d fbe8 	bl	8015c84 <_ZN8touchgfx4LineC1Ev>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80084ba:	f107 0310 	add.w	r3, r7, #16
 80084be:	2100      	movs	r1, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fb f97d 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80084c6:	6939      	ldr	r1, [r7, #16]
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7fe f8d7 	bl	800667c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	33b8      	adds	r3, #184	; 0xb8
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fd ff42 	bl	800635c <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	21dc      	movs	r1, #220	; 0xdc
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fd fcd1 	bl	8005e84 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	213c      	movs	r1, #60	; 0x3c
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fd fcdb 	bl	8005ea2 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80084f2:	233c      	movs	r3, #60	; 0x3c
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	2364      	movs	r3, #100	; 0x64
 80084f8:	2200      	movs	r2, #0
 80084fa:	2100      	movs	r1, #0
 80084fc:	f7fd fd87 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008506:	23ff      	movs	r3, #255	; 0xff
 8008508:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800850c:	23ff      	movs	r3, #255	; 0xff
 800850e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008512:	23ff      	movs	r3, #255	; 0xff
 8008514:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008518:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800851c:	041b      	lsls	r3, r3, #16
 800851e:	461a      	mov	r2, r3
 8008520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008524:	021b      	lsls	r3, r3, #8
 8008526:	431a      	orrs	r2, r3
 8008528:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800852c:	4313      	orrs	r3, r2
 800852e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008532:	f107 0320 	add.w	r3, r7, #32
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f7fb f941 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	4619      	mov	r1, r3
 8008542:	4620      	mov	r0, r4
 8008544:	f7fe f8ba 	bl	80066bc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	33a0      	adds	r3, #160	; 0xa0
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f00d f9b9 	bl	80158cc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	332c      	adds	r3, #44	; 0x2c
 800855e:	2200      	movs	r2, #0
 8008560:	2100      	movs	r1, #0
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe ffd8 	bl	8007518 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	332c      	adds	r3, #44	; 0x2c
 800856c:	22dc      	movs	r2, #220	; 0xdc
 800856e:	2100      	movs	r1, #0
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe fff7 	bl	8007564 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	332c      	adds	r3, #44	; 0x2c
 800857a:	2101      	movs	r1, #1
 800857c:	4618      	mov	r0, r3
 800857e:	f7ff f817 	bl	80075b0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	332c      	adds	r3, #44	; 0x2c
 8008586:	2101      	movs	r1, #1
 8008588:	4618      	mov	r0, r3
 800858a:	f00d fcc1 	bl	8015f10 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8008594:	233c      	movs	r3, #60	; 0x3c
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	23dc      	movs	r3, #220	; 0xdc
 800859a:	2200      	movs	r2, #0
 800859c:	2100      	movs	r1, #0
 800859e:	f7fd fd36 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80085a8:	23ff      	movs	r3, #255	; 0xff
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ae:	23ff      	movs	r3, #255	; 0xff
 80085b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085b4:	23ff      	movs	r3, #255	; 0xff
 80085b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80085ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085be:	041b      	lsls	r3, r3, #16
 80085c0:	461a      	mov	r2, r3
 80085c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	431a      	orrs	r2, r3
 80085ca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80085ce:	4313      	orrs	r3, r2
 80085d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80085d4:	f107 031c 	add.w	r3, r7, #28
 80085d8:	4611      	mov	r1, r2
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fb f8f0 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	62fc      	str	r4, [r7, #44]	; 0x2c
 80085e4:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80085ec:	bf00      	nop
    textArea1.setLinespacing(2);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	33b8      	adds	r3, #184	; 0xb8
 80085f2:	637b      	str	r3, [r7, #52]	; 0x34
 80085f4:	2302      	movs	r3, #2
 80085f6:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 80085f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80085fc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80085fe:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8008606:	f107 0314 	add.w	r3, r7, #20
 800860a:	2104      	movs	r1, #4
 800860c:	4618      	mov	r0, r3
 800860e:	f7fd fe8f 	bl	8006330 <_ZN8touchgfx9TypedTextC1Et>
 8008612:	f107 0314 	add.w	r3, r7, #20
 8008616:	4619      	mov	r1, r3
 8008618:	4620      	mov	r0, r4
 800861a:	f00d fefe 	bl	801641a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800861e:	f107 0314 	add.w	r3, r7, #20
 8008622:	4618      	mov	r0, r3
 8008624:	f7fc fe34 	bl	8005290 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	332c      	adds	r3, #44	; 0x2c
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f00b ff33 	bl	801449c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	33b8      	adds	r3, #184	; 0xb8
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f00b ff2c 	bl	801449c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4618      	mov	r0, r3
 8008648:	373c      	adds	r7, #60	; 0x3c
 800864a:	46bd      	mov	sp, r7
 800864c:	bd90      	pop	{r4, r7, pc}
 800864e:	bf00      	nop
 8008650:	08027cb0 	.word	0x08027cb0

08008654 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]

}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	4618      	mov	r0, r3
 800867c:	f7fc ff22 	bl	80054c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008680:	4a03      	ldr	r2, [pc, #12]	; (8008690 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	601a      	str	r2, [r3, #0]
{

}
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	080277e8 	.word	0x080277e8

08008694 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
{

}
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <_ZN5Model4tickEv>:

void Model::tick()
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]

}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
    {
    }
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
    {
    }
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
    {
 80086f4:	4a04      	ldr	r2, [pc, #16]	; (8008708 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
    }
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	08027d74 	.word	0x08027d74

0800870c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
    }
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff ffe9 	bl	80086ec <_ZN8touchgfx9PresenterD1Ev>
 800871a:	2104      	movs	r1, #4
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f01c fd1a 	bl	8025156 <_ZdlPvj>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
    {
 8008734:	4a04      	ldr	r2, [pc, #16]	; (8008748 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	601a      	str	r2, [r3, #0]
    }
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	08027d74 	.word	0x08027d74

0800874c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	4a06      	ldr	r2, [pc, #24]	; (8008770 <_ZN13ModelListenerC1Ev+0x24>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	605a      	str	r2, [r3, #4]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	08027d64 	.word	0x08027d64

08008774 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	4a04      	ldr	r2, [pc, #16]	; (8008790 <_ZN13ModelListenerD1Ev+0x1c>)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	08027d64 	.word	0x08027d64

08008794 <_ZN13ModelListenerD0Ev>:
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff ffe9 	bl	8008774 <_ZN13ModelListenerD1Ev>
 80087a2:	2108      	movs	r1, #8
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f01c fcd6 	bl	8025156 <_ZdlPvj>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	4a09      	ldr	r2, [pc, #36]	; (80087e4 <_ZN16Screen1PresenterD1Ev+0x30>)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	4a09      	ldr	r2, [pc, #36]	; (80087e8 <_ZN16Screen1PresenterD1Ev+0x34>)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	605a      	str	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3304      	adds	r3, #4
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff ffd1 	bl	8008774 <_ZN13ModelListenerD1Ev>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff ff89 	bl	80086ec <_ZN8touchgfx9PresenterD1Ev>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	08027d3c 	.word	0x08027d3c
 80087e8:	08027d54 	.word	0x08027d54

080087ec <_ZThn4_N16Screen1PresenterD1Ev>:
 80087ec:	f1a0 0004 	sub.w	r0, r0, #4
 80087f0:	e7e0      	b.n	80087b4 <_ZN16Screen1PresenterD1Ev>
 80087f2:	bf00      	nop

080087f4 <_ZN16Screen1PresenterD0Ev>:
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff ffd9 	bl	80087b4 <_ZN16Screen1PresenterD1Ev>
 8008802:	2110      	movs	r1, #16
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f01c fca6 	bl	8025156 <_ZdlPvj>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <_ZThn4_N16Screen1PresenterD0Ev>:
 8008814:	f1a0 0004 	sub.w	r0, r0, #4
 8008818:	e7ec      	b.n	80087f4 <_ZN16Screen1PresenterD0Ev>
	...

0800881c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
    : view(v)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff ff7f 	bl	800872c <_ZN8touchgfx9PresenterC1Ev>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	3304      	adds	r3, #4
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff ff8a 	bl	800874c <_ZN13ModelListenerC1Ev>
 8008838:	4a06      	ldr	r2, [pc, #24]	; (8008854 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	4a06      	ldr	r2, [pc, #24]	; (8008858 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	605a      	str	r2, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	60da      	str	r2, [r3, #12]
{

}
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	08027d3c 	.word	0x08027d3c
 8008858:	08027d54 	.word	0x08027d54

0800885c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]

}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <_Z41__static_initialization_and_destruction_0ii>:
 8008884:	b580      	push	{r7, lr}
 8008886:	b092      	sub	sp, #72	; 0x48
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b01      	cmp	r3, #1
 8008892:	f040 8114 	bne.w	8008abe <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800889c:	4293      	cmp	r3, r2
 800889e:	f040 810e 	bne.w	8008abe <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80088a2:	2300      	movs	r3, #0
 80088a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80088a8:	2300      	movs	r3, #0
 80088aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80088ae:	2300      	movs	r3, #0
 80088b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088b4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80088b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80088c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80088cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088d0:	041b      	lsls	r3, r3, #16
 80088d2:	461a      	mov	r2, r3
 80088d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	431a      	orrs	r2, r3
 80088dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088e0:	4313      	orrs	r3, r2
 80088e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80088e6:	f107 0320 	add.w	r3, r7, #32
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fa ff67 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80088f2:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 80088f4:	bf00      	nop
 80088f6:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 80088f8:	4b73      	ldr	r3, [pc, #460]	; (8008ac8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	23ff      	movs	r3, #255	; 0xff
 80088fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008902:	2300      	movs	r3, #0
 8008904:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008908:	2300      	movs	r3, #0
 800890a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800890e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008912:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8008916:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800891a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008922:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008926:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800892a:	041b      	lsls	r3, r3, #16
 800892c:	461a      	mov	r2, r3
 800892e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	431a      	orrs	r2, r3
 8008936:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800893a:	4313      	orrs	r3, r2
 800893c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008940:	f107 031c 	add.w	r3, r7, #28
 8008944:	4611      	mov	r1, r2
 8008946:	4618      	mov	r0, r3
 8008948:	f7fa ff3a 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800894c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800894e:	bf00      	nop
 8008950:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8008952:	4b5e      	ldr	r3, [pc, #376]	; (8008acc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	2300      	movs	r3, #0
 8008958:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800895c:	23ff      	movs	r3, #255	; 0xff
 800895e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8008962:	2300      	movs	r3, #0
 8008964:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008968:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800896c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008970:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008974:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8008978:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800897c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008980:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	461a      	mov	r2, r3
 8008988:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	431a      	orrs	r2, r3
 8008990:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008994:	4313      	orrs	r3, r2
 8008996:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800899a:	f107 0318 	add.w	r3, r7, #24
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fa ff0d 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80089a6:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80089a8:	bf00      	nop
 80089aa:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80089ac:	4b48      	ldr	r3, [pc, #288]	; (8008ad0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80089bc:	23ff      	movs	r3, #255	; 0xff
 80089be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80089c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80089c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80089ca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80089ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80089d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80089d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80089da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80089de:	041b      	lsls	r3, r3, #16
 80089e0:	461a      	mov	r2, r3
 80089e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	431a      	orrs	r2, r3
 80089ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80089ee:	4313      	orrs	r3, r2
 80089f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80089f4:	f107 0314 	add.w	r3, r7, #20
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fa fee0 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8008a00:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8008a02:	bf00      	nop
 8008a04:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8008a06:	4b33      	ldr	r3, [pc, #204]	; (8008ad4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	23f7      	movs	r3, #247	; 0xf7
 8008a0c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008a10:	234c      	movs	r3, #76	; 0x4c
 8008a12:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008a16:	2302      	movs	r3, #2
 8008a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008a1c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008a20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008a24:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008a28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8008a2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a30:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008a34:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008a38:	041b      	lsls	r3, r3, #16
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	431a      	orrs	r2, r3
 8008a44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008a4e:	f107 0310 	add.w	r3, r7, #16
 8008a52:	4611      	mov	r1, r2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fa feb3 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8008a5a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8008a5c:	bf00      	nop
 8008a5e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8008a60:	4b1d      	ldr	r3, [pc, #116]	; (8008ad8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	23f7      	movs	r3, #247	; 0xf7
 8008a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008a6a:	23d2      	movs	r3, #210	; 0xd2
 8008a6c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008a70:	2302      	movs	r3, #2
 8008a72:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008a76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008a7a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008a7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a86:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008a8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008a8e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008a92:	041b      	lsls	r3, r3, #16
 8008a94:	461a      	mov	r2, r3
 8008a96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a9a:	021b      	lsls	r3, r3, #8
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008aa8:	f107 030c 	add.w	r3, r7, #12
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fa fe86 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8008ab6:	bf00      	nop
 8008ab8:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8008aba:	4b08      	ldr	r3, [pc, #32]	; (8008adc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	bf00      	nop
 8008ac0:	3748      	adds	r7, #72	; 0x48
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	200237c4 	.word	0x200237c4
 8008acc:	200237c8 	.word	0x200237c8
 8008ad0:	200237cc 	.word	0x200237cc
 8008ad4:	200237d0 	.word	0x200237d0
 8008ad8:	200237d4 	.word	0x200237d4
 8008adc:	200237d8 	.word	0x200237d8

08008ae0 <_GLOBAL__sub_I__ZN16Screen1PresenterC2ER11Screen1View>:
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7ff fecb 	bl	8008884 <_Z41__static_initialization_and_destruction_0ii>
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	4a05      	ldr	r2, [pc, #20]	; (8008b10 <_ZN11Screen1ViewD1Ev+0x20>)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fd ff1d 	bl	8006940 <_ZN15Screen1ViewBaseD1Ev>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	08027d8c 	.word	0x08027d8c

08008b14 <_ZN11Screen1ViewD0Ev>:
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff ffe7 	bl	8008af0 <_ZN11Screen1ViewD1Ev>
 8008b22:	4904      	ldr	r1, [pc, #16]	; (8008b34 <_ZN11Screen1ViewD0Ev+0x20>)
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f01c fb16 	bl	8025156 <_ZdlPvj>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	0002263c 	.word	0x0002263c

08008b38 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <stdio.h>
#include <cstring>

Screen1View::Screen1View()
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fd ff80 	bl	8006a48 <_ZN15Screen1ViewBaseC1Ev>
 8008b48:	4a21      	ldr	r2, [pc, #132]	; (8008bd0 <_ZN11Screen1ViewC1Ev+0x98>)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	4b20      	ldr	r3, [pc, #128]	; (8008bd4 <_ZN11Screen1ViewC1Ev+0x9c>)
 8008b52:	4413      	add	r3, r2
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]
{
    rpmArea.setWildcard(rpmAreaBuffer);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	4b1d      	ldr	r3, [pc, #116]	; (8008bd8 <_ZN11Screen1ViewC1Ev+0xa0>)
 8008b62:	4413      	add	r3, r2
 8008b64:	4619      	mov	r1, r3
 8008b66:	f7fd fc71 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.setWildcard(gearAreaBuffer);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	4b1a      	ldr	r3, [pc, #104]	; (8008bdc <_ZN11Screen1ViewC1Ev+0xa4>)
 8008b74:	4413      	add	r3, r2
 8008b76:	4619      	mov	r1, r3
 8008b78:	f7fd fc68 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setWildcard(cltAreaBuffer);
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	4b18      	ldr	r3, [pc, #96]	; (8008be0 <_ZN11Screen1ViewC1Ev+0xa8>)
 8008b80:	4413      	add	r3, r2
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4a17      	ldr	r2, [pc, #92]	; (8008be4 <_ZN11Screen1ViewC1Ev+0xac>)
 8008b86:	440a      	add	r2, r1
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fd fc5e 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setWildcard(battAreaBuffer);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	4b13      	ldr	r3, [pc, #76]	; (8008be8 <_ZN11Screen1ViewC1Ev+0xb0>)
 8008b9a:	4413      	add	r3, r2
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f7fd fc55 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

    setRPM(100);
 8008ba2:	2164      	movs	r1, #100	; 0x64
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f97f 	bl	8008ea8 <_ZN11Screen1View6setRPMEi>
    setGear(2);
 8008baa:	2102      	movs	r1, #2
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fa0d 	bl	8008fcc <_ZN11Screen1View7setGearEi>
    setClt(71.2);
 8008bb2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008bec <_ZN11Screen1ViewC1Ev+0xb4>
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f9d4 	bl	8008f64 <_ZN11Screen1View6setCltEf>
    setBatt(13.42);
 8008bbc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008bf0 <_ZN11Screen1ViewC1Ev+0xb8>
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f99d 	bl	8008f00 <_ZN11Screen1View7setBattEf>
}
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	08027d8c 	.word	0x08027d8c
 8008bd4:	00022638 	.word	0x00022638
 8008bd8:	0001f708 	.word	0x0001f708
 8008bdc:	0001f704 	.word	0x0001f704
 8008be0:	0001f6c4 	.word	0x0001f6c4
 8008be4:	0001f744 	.word	0x0001f744
 8008be8:	0001f71c 	.word	0x0001f71c
 8008bec:	428e6666 	.word	0x428e6666
 8008bf0:	4156b852 	.word	0x4156b852

08008bf4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fc40 	bl	8007484 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fd fad2 	bl	80061c0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
    Screen1View::tempBox1_1.redraw();
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8008c32:	4413      	add	r3, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 ff5d 	bl	8009af4 <_ZN7tempBox6redrawEv>
    tempBox1_1.invalidate();
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8008c40:	4413      	add	r3, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f010 fa2e 	bl	80190a4 <_ZNK8touchgfx8Drawable10invalidateEv>
    static int a = 0;
    if(tickCounter % 255 == 0)
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	4b27      	ldr	r3, [pc, #156]	; (8008ce8 <_ZN11Screen1View15handleTickEventEv+0xc4>)
 8008c4c:	4413      	add	r3, r2
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	4b26      	ldr	r3, [pc, #152]	; (8008cec <_ZN11Screen1View15handleTickEventEv+0xc8>)
 8008c52:	fb83 1302 	smull	r1, r3, r3, r2
 8008c56:	4413      	add	r3, r2
 8008c58:	11d9      	asrs	r1, r3, #7
 8008c5a:	17d3      	asrs	r3, r2, #31
 8008c5c:	1ac9      	subs	r1, r1, r3
 8008c5e:	460b      	mov	r3, r1
 8008c60:	021b      	lsls	r3, r3, #8
 8008c62:	1a5b      	subs	r3, r3, r1
 8008c64:	1ad1      	subs	r1, r2, r3
 8008c66:	2900      	cmp	r1, #0
 8008c68:	d124      	bne.n	8008cb4 <_ZN11Screen1View15handleTickEventEv+0x90>
    {
        a++; 
 8008c6a:	4b21      	ldr	r3, [pc, #132]	; (8008cf0 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 8008c72:	6013      	str	r3, [r2, #0]
        a = a % 3;
 8008c74:	4b1e      	ldr	r3, [pc, #120]	; (8008cf0 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 8008c76:	6819      	ldr	r1, [r3, #0]
 8008c78:	4b1e      	ldr	r3, [pc, #120]	; (8008cf4 <_ZN11Screen1View15handleTickEventEv+0xd0>)
 8008c7a:	fb83 3201 	smull	r3, r2, r3, r1
 8008c7e:	17cb      	asrs	r3, r1, #31
 8008c80:	1ad2      	subs	r2, r2, r3
 8008c82:	4613      	mov	r3, r2
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	4413      	add	r3, r2
 8008c88:	1aca      	subs	r2, r1, r3
 8008c8a:	4b19      	ldr	r3, [pc, #100]	; (8008cf0 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 8008c8c:	601a      	str	r2, [r3, #0]
        if(a == 0)
 8008c8e:	4b18      	ldr	r3, [pc, #96]	; (8008cf0 <_ZN11Screen1View15handleTickEventEv+0xcc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d107      	bne.n	8008ca6 <_ZN11Screen1View15handleTickEventEv+0x82>
        {
            alertBar1.setState(EBarState::Info);
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	4b17      	ldr	r3, [pc, #92]	; (8008cf8 <_ZN11Screen1View15handleTickEventEv+0xd4>)
 8008c9a:	4413      	add	r3, r2
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fb3a 	bl	8009318 <_ZN8alertBar8setStateE9EBarState>
 8008ca4:	e006      	b.n	8008cb4 <_ZN11Screen1View15handleTickEventEv+0x90>
        }
        else
        {
            alertBar1.setState(EBarState::Warning);
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	4b13      	ldr	r3, [pc, #76]	; (8008cf8 <_ZN11Screen1View15handleTickEventEv+0xd4>)
 8008caa:	4413      	add	r3, r2
 8008cac:	2101      	movs	r1, #1
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fb32 	bl	8009318 <_ZN8alertBar8setStateE9EBarState>
        }
        
    }
    alertBar1.invalidate();
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4b10      	ldr	r3, [pc, #64]	; (8008cf8 <_ZN11Screen1View15handleTickEventEv+0xd4>)
 8008cb8:	4413      	add	r3, r2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f010 f9f2 	bl	80190a4 <_ZNK8touchgfx8Drawable10invalidateEv>
    alertBar1.setText("12345678912345\n");
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <_ZN11Screen1View15handleTickEventEv+0xd4>)
 8008cc4:	4413      	add	r3, r2
 8008cc6:	490d      	ldr	r1, [pc, #52]	; (8008cfc <_ZN11Screen1View15handleTickEventEv+0xd8>)
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fb67 	bl	800939c <_ZN8alertBar7setTextEPKc>
    tickCounter++;
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <_ZN11Screen1View15handleTickEventEv+0xc4>)
 8008cd2:	4413      	add	r3, r2
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	6879      	ldr	r1, [r7, #4]
 8008cda:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <_ZN11Screen1View15handleTickEventEv+0xc4>)
 8008cdc:	440b      	add	r3, r1
 8008cde:	601a      	str	r2, [r3, #0]
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	00022638 	.word	0x00022638
 8008cec:	80808081 	.word	0x80808081
 8008cf0:	200237f4 	.word	0x200237f4
 8008cf4:	55555556 	.word	0x55555556
 8008cf8:	0001f514 	.word	0x0001f514
 8008cfc:	08027498 	.word	0x08027498

08008d00 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>:

void Screen1View::setText(touchgfx::TextAreaWithOneWildcard textArea, touchgfx::Unicode::UnicodeChar* buffer, const char inText[])
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
    Unicode::snprintf(buffer, strlen(inText) + 1, inText);
 8008d0e:	6838      	ldr	r0, [r7, #0]
 8008d10:	f7f7 fa96 	bl	8000240 <strlen>
 8008d14:	4603      	mov	r3, r0
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3301      	adds	r3, #1
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f012 fa41 	bl	801b1a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea.resizeToCurrentText();
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f00d fb59 	bl	80163e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea.invalidate();
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f010 f9b7 	bl	80190a4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <_ZN8touchgfx8DrawableC1ERKS0_>:
class Drawable
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
 8008d4a:	4a1e      	ldr	r2, [pc, #120]	; (8008dc4 <_ZN8touchgfx8DrawableC1ERKS0_+0x84>)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	3304      	adds	r3, #4
 8008d56:	3204      	adds	r2, #4
 8008d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	330c      	adds	r3, #12
 8008d66:	320c      	adds	r2, #12
 8008d68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	695a      	ldr	r2, [r3, #20]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	615a      	str	r2, [r3, #20]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	699a      	ldr	r2, [r3, #24]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	619a      	str	r2, [r3, #24]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	69da      	ldr	r2, [r3, #28]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	61da      	str	r2, [r3, #28]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	841a      	strh	r2, [r3, #32]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	845a      	strh	r2, [r3, #34]	; 0x22
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	08029498 	.word	0x08029498

08008dc8 <_ZN8touchgfx6WidgetC1ERKS0_>:
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff ffb1 	bl	8008d40 <_ZN8touchgfx8DrawableC1ERKS0_>
 8008dde:	4a04      	ldr	r2, [pc, #16]	; (8008df0 <_ZN8touchgfx6WidgetC1ERKS0_+0x28>)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	08027b50 	.word	0x08027b50

08008df4 <_ZN8touchgfx8TextAreaC1ERKS0_>:
class TextArea : public Widget
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	4611      	mov	r1, r2
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff ffdf 	bl	8008dc8 <_ZN8touchgfx6WidgetC1ERKS0_>
 8008e0a:	4a19      	ldr	r2, [pc, #100]	; (8008e70 <_ZN8touchgfx8TextAreaC1ERKS0_+0x7c>)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	3328      	adds	r3, #40	; 0x28
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	f7fc fa57 	bl	80052d0 <_ZN8touchgfx9TypedTextC1ERKS0_>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008e28:	631a      	str	r2, [r3, #48]	; 0x30
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	869a      	strh	r2, [r3, #52]	; 0x34
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	08028fa4 	.word	0x08028fa4

08008e74 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>:
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff ffb5 	bl	8008df4 <_ZN8touchgfx8TextAreaC1ERKS0_>
 8008e8a:	4a06      	ldr	r2, [pc, #24]	; (8008ea4 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_+0x30>)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	63da      	str	r2, [r3, #60]	; 0x3c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	080290b0 	.word	0x080290b0

08008ea8 <_ZN11Screen1View6setRPMEi>:

void Screen1View::setRPM(int inRPM)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b096      	sub	sp, #88	; 0x58
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
    char textBuffer[10]; 
    sprintf(textBuffer,"%d", inRPM);
 8008eb2:	f107 030c 	add.w	r3, r7, #12
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	490f      	ldr	r1, [pc, #60]	; (8008ef8 <_ZN11Screen1View6setRPMEi+0x50>)
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f01c ff4a 	bl	8025d54 <siprintf>
    setText(rpmArea, rpmAreaBuffer, textBuffer); 
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8008ec6:	f107 0318 	add.w	r3, r7, #24
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff ffd1 	bl	8008e74 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a09      	ldr	r2, [pc, #36]	; (8008efc <_ZN11Screen1View6setRPMEi+0x54>)
 8008ed6:	441a      	add	r2, r3
 8008ed8:	f107 030c 	add.w	r3, r7, #12
 8008edc:	f107 0118 	add.w	r1, r7, #24
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff ff0d 	bl	8008d00 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8008ee6:	f107 0318 	add.w	r3, r7, #24
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fd2e 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8008ef0:	bf00      	nop
 8008ef2:	3758      	adds	r7, #88	; 0x58
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	080274a8 	.word	0x080274a8
 8008efc:	0001f708 	.word	0x0001f708

08008f00 <_ZN11Screen1View7setBattEf>:

void Screen1View::setBatt(float inBatt)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b096      	sub	sp, #88	; 0x58
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	ed87 0a00 	vstr	s0, [r7]
    char textBuffer[10];
    sprintf(textBuffer, "%.2f", inBatt);
 8008f0c:	edd7 7a00 	vldr	s15, [r7]
 8008f10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008f14:	f107 000c 	add.w	r0, r7, #12
 8008f18:	ec53 2b17 	vmov	r2, r3, d7
 8008f1c:	490f      	ldr	r1, [pc, #60]	; (8008f5c <_ZN11Screen1View7setBattEf+0x5c>)
 8008f1e:	f01c ff19 	bl	8025d54 <siprintf>
    setText(battArea, battAreaBuffer, textBuffer);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 8008f28:	f107 0318 	add.w	r3, r7, #24
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff ffa0 	bl	8008e74 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a0a      	ldr	r2, [pc, #40]	; (8008f60 <_ZN11Screen1View7setBattEf+0x60>)
 8008f38:	441a      	add	r2, r3
 8008f3a:	f107 030c 	add.w	r3, r7, #12
 8008f3e:	f107 0118 	add.w	r1, r7, #24
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7ff fedc 	bl	8008d00 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8008f48:	f107 0318 	add.w	r3, r7, #24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe fcfd 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8008f52:	bf00      	nop
 8008f54:	3758      	adds	r7, #88	; 0x58
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	080274ac 	.word	0x080274ac
 8008f60:	0001f71c 	.word	0x0001f71c

08008f64 <_ZN11Screen1View6setCltEf>:

void Screen1View::setClt(float inClt)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b096      	sub	sp, #88	; 0x58
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	ed87 0a00 	vstr	s0, [r7]
    char textBuffer[10];
    sprintf(textBuffer, "%.1f", inClt);
 8008f70:	edd7 7a00 	vldr	s15, [r7]
 8008f74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008f78:	f107 000c 	add.w	r0, r7, #12
 8008f7c:	ec53 2b17 	vmov	r2, r3, d7
 8008f80:	490f      	ldr	r1, [pc, #60]	; (8008fc0 <_ZN11Screen1View6setCltEf+0x5c>)
 8008f82:	f01c fee7 	bl	8025d54 <siprintf>
    setText(cltArea, cltAreaBuffer, textBuffer);
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <_ZN11Screen1View6setCltEf+0x60>)
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f107 0218 	add.w	r2, r7, #24
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7ff ff6e 	bl	8008e74 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a0b      	ldr	r2, [pc, #44]	; (8008fc8 <_ZN11Screen1View6setCltEf+0x64>)
 8008f9c:	441a      	add	r2, r3
 8008f9e:	f107 030c 	add.w	r3, r7, #12
 8008fa2:	f107 0118 	add.w	r1, r7, #24
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff feaa 	bl	8008d00 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8008fac:	f107 0318 	add.w	r3, r7, #24
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fe fccb 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8008fb6:	bf00      	nop
 8008fb8:	3758      	adds	r7, #88	; 0x58
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	080274b4 	.word	0x080274b4
 8008fc4:	0001f6c4 	.word	0x0001f6c4
 8008fc8:	0001f744 	.word	0x0001f744

08008fcc <_ZN11Screen1View7setGearEi>:

void Screen1View::setGear(int inGear)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b096      	sub	sp, #88	; 0x58
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
    char textBuffer[10]; 
    sprintf(textBuffer,"%d", inGear);
 8008fd6:	f107 030c 	add.w	r3, r7, #12
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	490f      	ldr	r1, [pc, #60]	; (800901c <_ZN11Screen1View7setGearEi+0x50>)
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f01c feb8 	bl	8025d54 <siprintf>
    setText(gearArea, gearAreaBuffer, textBuffer); 
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8008fea:	f107 0318 	add.w	r3, r7, #24
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff ff3f 	bl	8008e74 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a09      	ldr	r2, [pc, #36]	; (8009020 <_ZN11Screen1View7setGearEi+0x54>)
 8008ffa:	441a      	add	r2, r3
 8008ffc:	f107 030c 	add.w	r3, r7, #12
 8009000:	f107 0118 	add.w	r1, r7, #24
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff fe7b 	bl	8008d00 <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800900a:	f107 0318 	add.w	r3, r7, #24
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fc9c 	bl	800794c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009014:	bf00      	nop
 8009016:	3758      	adds	r7, #88	; 0x58
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	080274a8 	.word	0x080274a8
 8009020:	0001f704 	.word	0x0001f704

08009024 <_Z41__static_initialization_and_destruction_0ii>:
 8009024:	b580      	push	{r7, lr}
 8009026:	b092      	sub	sp, #72	; 0x48
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b01      	cmp	r3, #1
 8009032:	f040 8114 	bne.w	800925e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800903c:	4293      	cmp	r3, r2
 800903e:	f040 810e 	bne.w	800925e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009042:	2300      	movs	r3, #0
 8009044:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009048:	2300      	movs	r3, #0
 800904a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800904e:	2300      	movs	r3, #0
 8009050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009054:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009058:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800905c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009060:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009068:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800906c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009070:	041b      	lsls	r3, r3, #16
 8009072:	461a      	mov	r2, r3
 8009074:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009078:	021b      	lsls	r3, r3, #8
 800907a:	431a      	orrs	r2, r3
 800907c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009080:	4313      	orrs	r3, r2
 8009082:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009086:	f107 0320 	add.w	r3, r7, #32
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f7fa fb97 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009092:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009094:	bf00      	nop
 8009096:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009098:	4b73      	ldr	r3, [pc, #460]	; (8009268 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	23ff      	movs	r3, #255	; 0xff
 800909e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80090a2:	2300      	movs	r3, #0
 80090a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80090a8:	2300      	movs	r3, #0
 80090aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80090ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80090b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80090ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80090c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80090c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090ca:	041b      	lsls	r3, r3, #16
 80090cc:	461a      	mov	r2, r3
 80090ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	431a      	orrs	r2, r3
 80090d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80090da:	4313      	orrs	r3, r2
 80090dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80090e0:	f107 031c 	add.w	r3, r7, #28
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fa fb6a 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80090ec:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80090ee:	bf00      	nop
 80090f0:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80090f2:	4b5e      	ldr	r3, [pc, #376]	; (800926c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	2300      	movs	r3, #0
 80090f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80090fc:	23ff      	movs	r3, #255	; 0xff
 80090fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009102:	2300      	movs	r3, #0
 8009104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009108:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800910c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009110:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009114:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009118:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800911c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009120:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009124:	041b      	lsls	r3, r3, #16
 8009126:	461a      	mov	r2, r3
 8009128:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	431a      	orrs	r2, r3
 8009130:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009134:	4313      	orrs	r3, r2
 8009136:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800913a:	f107 0318 	add.w	r3, r7, #24
 800913e:	4611      	mov	r1, r2
 8009140:	4618      	mov	r0, r3
 8009142:	f7fa fb3d 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009146:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009148:	bf00      	nop
 800914a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800914c:	4b48      	ldr	r3, [pc, #288]	; (8009270 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	2300      	movs	r3, #0
 8009152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009156:	2300      	movs	r3, #0
 8009158:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800915c:	23ff      	movs	r3, #255	; 0xff
 800915e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009162:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009166:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800916a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800916e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009172:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009176:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800917a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800917e:	041b      	lsls	r3, r3, #16
 8009180:	461a      	mov	r2, r3
 8009182:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009186:	021b      	lsls	r3, r3, #8
 8009188:	431a      	orrs	r2, r3
 800918a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800918e:	4313      	orrs	r3, r2
 8009190:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009194:	f107 0314 	add.w	r3, r7, #20
 8009198:	4611      	mov	r1, r2
 800919a:	4618      	mov	r0, r3
 800919c:	f7fa fb10 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80091a0:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 80091a2:	bf00      	nop
 80091a4:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 80091a6:	4b33      	ldr	r3, [pc, #204]	; (8009274 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	23f7      	movs	r3, #247	; 0xf7
 80091ac:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80091b0:	234c      	movs	r3, #76	; 0x4c
 80091b2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80091b6:	2302      	movs	r3, #2
 80091b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80091bc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80091c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80091c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80091c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80091cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091d0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80091d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80091d8:	041b      	lsls	r3, r3, #16
 80091da:	461a      	mov	r2, r3
 80091dc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	431a      	orrs	r2, r3
 80091e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80091e8:	4313      	orrs	r3, r2
 80091ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80091ee:	f107 0310 	add.w	r3, r7, #16
 80091f2:	4611      	mov	r1, r2
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fa fae3 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80091fa:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80091fc:	bf00      	nop
 80091fe:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009200:	4b1d      	ldr	r3, [pc, #116]	; (8009278 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	23f7      	movs	r3, #247	; 0xf7
 8009206:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800920a:	23d2      	movs	r3, #210	; 0xd2
 800920c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009210:	2302      	movs	r3, #2
 8009212:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009216:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800921a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800921e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009226:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800922a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800922e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009232:	041b      	lsls	r3, r3, #16
 8009234:	461a      	mov	r2, r3
 8009236:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800923a:	021b      	lsls	r3, r3, #8
 800923c:	431a      	orrs	r2, r3
 800923e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009242:	4313      	orrs	r3, r2
 8009244:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009248:	f107 030c 	add.w	r3, r7, #12
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7fa fab6 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009254:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009256:	bf00      	nop
 8009258:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800925a:	4b08      	ldr	r3, [pc, #32]	; (800927c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	bf00      	nop
 8009260:	3748      	adds	r7, #72	; 0x48
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	200237dc 	.word	0x200237dc
 800926c:	200237e0 	.word	0x200237e0
 8009270:	200237e4 	.word	0x200237e4
 8009274:	200237e8 	.word	0x200237e8
 8009278:	200237ec 	.word	0x200237ec
 800927c:	200237f0 	.word	0x200237f0

08009280 <_GLOBAL__sub_I__ZN11Screen1ViewC2Ev>:
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
 8009284:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009288:	2001      	movs	r0, #1
 800928a:	f7ff fecb 	bl	8009024 <_Z41__static_initialization_and_destruction_0ii>
 800928e:	bd80      	pop	{r7, pc}

08009290 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>
#include <string.h>

alertBar::alertBar()
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff f812 	bl	80082c4 <_ZN12alertBarBaseC1Ev>
 80092a0:	4a0d      	ldr	r2, [pc, #52]	; (80092d8 <_ZN8alertBarC1Ev+0x48>)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a0c      	ldr	r2, [pc, #48]	; (80092dc <_ZN8alertBarC1Ev+0x4c>)
 80092aa:	6812      	ldr	r2, [r2, #0]
 80092ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a0b      	ldr	r2, [pc, #44]	; (80092e0 <_ZN8alertBarC1Ev+0x50>)
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a09      	ldr	r2, [pc, #36]	; (80092e4 <_ZN8alertBarC1Ev+0x54>)
 80092be:	6812      	ldr	r2, [r2, #0]
 80092c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a08      	ldr	r2, [pc, #32]	; (80092e8 <_ZN8alertBarC1Ev+0x58>)
 80092c8:	6812      	ldr	r2, [r2, #0]
 80092ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
{
}
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	08027dc0 	.word	0x08027dc0
 80092dc:	20023804 	.word	0x20023804
 80092e0:	20023808 	.word	0x20023808
 80092e4:	200237fc 	.word	0x200237fc
 80092e8:	2002380c 	.word	0x2002380c

080092ec <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff f8c2 	bl	8008480 <_ZN12alertBarBase10initializeEv>
    frontText.setWildcard(frontTextBuffer);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	33b0      	adds	r3, #176	; 0xb0
 8009306:	4619      	mov	r1, r3
 8009308:	4610      	mov	r0, r2
 800930a:	f7fd f89f 	bl	800644c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <_ZN8alertBar8setStateE9EBarState>:

void alertBar::setState(EBarState inState)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b03      	cmp	r3, #3
 8009326:	d833      	bhi.n	8009390 <_ZN8alertBar8setStateE9EBarState+0x78>
 8009328:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <_ZN8alertBar8setStateE9EBarState+0x18>)
 800932a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932e:	bf00      	nop
 8009330:	08009341 	.word	0x08009341
 8009334:	08009355 	.word	0x08009355
 8009338:	08009369 	.word	0x08009369
 800933c:	0800937d 	.word	0x0800937d
    switch (inState)
    {
    case EBarState::Info:
        bgBox.setColor(dataColors[0]);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800934c:	4610      	mov	r0, r2
 800934e:	f7fc ffe1 	bl	8006314 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009352:	e01e      	b.n	8009392 <_ZN8alertBar8setStateE9EBarState+0x7a>
    case EBarState::Warning:
        bgBox.setColor(dataColors[1]);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8009360:	4610      	mov	r0, r2
 8009362:	f7fc ffd7 	bl	8006314 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009366:	e014      	b.n	8009392 <_ZN8alertBar8setStateE9EBarState+0x7a>
    case EBarState::Fault:
        bgBox.setColor(dataColors[2]);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8009374:	4610      	mov	r0, r2
 8009376:	f7fc ffcd 	bl	8006314 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800937a:	e00a      	b.n	8009392 <_ZN8alertBar8setStateE9EBarState+0x7a>
    case EBarState::News:
        bgBox.setColor(dataColors[3]);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009388:	4610      	mov	r0, r2
 800938a:	f7fc ffc3 	bl	8006314 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800938e:	e000      	b.n	8009392 <_ZN8alertBar8setStateE9EBarState+0x7a>

    default:
        break;
 8009390:	bf00      	nop
    }
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop

0800939c <_ZN8alertBar7setTextEPKc>:

void alertBar::setText(const char inText[])
{
 800939c:	b590      	push	{r4, r7, lr}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
    Unicode::snprintf(frontTextBuffer, strlen(inText) + 1, inText);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80093ac:	6838      	ldr	r0, [r7, #0]
 80093ae:	f7f6 ff47 	bl	8000240 <strlen>
 80093b2:	4603      	mov	r3, r0
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	3301      	adds	r3, #1
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4619      	mov	r1, r3
 80093be:	4620      	mov	r0, r4
 80093c0:	f011 fef2 	bl	801b1a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    frontText.resizeToCurrentText();
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3360      	adds	r3, #96	; 0x60
 80093c8:	4618      	mov	r0, r3
 80093ca:	f00d f809 	bl	80163e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    frontText.invalidate();
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3360      	adds	r3, #96	; 0x60
 80093d2:	4618      	mov	r0, r3
 80093d4:	f00f fe66 	bl	80190a4 <_ZNK8touchgfx8Drawable10invalidateEv>
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd90      	pop	{r4, r7, pc}

080093e0 <_Z41__static_initialization_and_destruction_0ii>:
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b092      	sub	sp, #72	; 0x48
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	f040 8114 	bne.w	800961a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093f8:	4293      	cmp	r3, r2
 80093fa:	f040 810e 	bne.w	800961a <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80093fe:	2300      	movs	r3, #0
 8009400:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009404:	2300      	movs	r3, #0
 8009406:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800940a:	2300      	movs	r3, #0
 800940c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009410:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800941c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009428:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800942c:	041b      	lsls	r3, r3, #16
 800942e:	461a      	mov	r2, r3
 8009430:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	431a      	orrs	r2, r3
 8009438:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800943c:	4313      	orrs	r3, r2
 800943e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009442:	f107 0320 	add.w	r3, r7, #32
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f7fa f9b9 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800944e:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009450:	bf00      	nop
 8009452:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009454:	4b73      	ldr	r3, [pc, #460]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	23ff      	movs	r3, #255	; 0xff
 800945a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800945e:	2300      	movs	r3, #0
 8009460:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009464:	2300      	movs	r3, #0
 8009466:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800946a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800946e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009472:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800947a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800947e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009482:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009486:	041b      	lsls	r3, r3, #16
 8009488:	461a      	mov	r2, r3
 800948a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800948e:	021b      	lsls	r3, r3, #8
 8009490:	431a      	orrs	r2, r3
 8009492:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009496:	4313      	orrs	r3, r2
 8009498:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800949c:	f107 031c 	add.w	r3, r7, #28
 80094a0:	4611      	mov	r1, r2
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fa f98c 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80094a8:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80094aa:	bf00      	nop
 80094ac:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80094ae:	4b5e      	ldr	r3, [pc, #376]	; (8009628 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	2300      	movs	r3, #0
 80094b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80094b8:	23ff      	movs	r3, #255	; 0xff
 80094ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80094be:	2300      	movs	r3, #0
 80094c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80094c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80094cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80094d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80094d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80094dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80094e0:	041b      	lsls	r3, r3, #16
 80094e2:	461a      	mov	r2, r3
 80094e4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80094e8:	021b      	lsls	r3, r3, #8
 80094ea:	431a      	orrs	r2, r3
 80094ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80094f0:	4313      	orrs	r3, r2
 80094f2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80094f6:	f107 0318 	add.w	r3, r7, #24
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fa f95f 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009502:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009504:	bf00      	nop
 8009506:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009508:	4b48      	ldr	r3, [pc, #288]	; (800962c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	2300      	movs	r3, #0
 800950e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009512:	2300      	movs	r3, #0
 8009514:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009518:	23ff      	movs	r3, #255	; 0xff
 800951a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800951e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009522:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009526:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800952a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800952e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009532:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009536:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800953a:	041b      	lsls	r3, r3, #16
 800953c:	461a      	mov	r2, r3
 800953e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	431a      	orrs	r2, r3
 8009546:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800954a:	4313      	orrs	r3, r2
 800954c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009550:	f107 0314 	add.w	r3, r7, #20
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f7fa f932 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 800955c:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800955e:	bf00      	nop
 8009560:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8009562:	4b33      	ldr	r3, [pc, #204]	; (8009630 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	23f7      	movs	r3, #247	; 0xf7
 8009568:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800956c:	234c      	movs	r3, #76	; 0x4c
 800956e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8009572:	2302      	movs	r3, #2
 8009574:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009578:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800957c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009580:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009584:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009588:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800958c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009590:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009594:	041b      	lsls	r3, r3, #16
 8009596:	461a      	mov	r2, r3
 8009598:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800959c:	021b      	lsls	r3, r3, #8
 800959e:	431a      	orrs	r2, r3
 80095a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80095a4:	4313      	orrs	r3, r2
 80095a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80095aa:	f107 0310 	add.w	r3, r7, #16
 80095ae:	4611      	mov	r1, r2
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fa f905 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80095b6:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80095b8:	bf00      	nop
 80095ba:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80095bc:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	23f7      	movs	r3, #247	; 0xf7
 80095c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80095c6:	23d2      	movs	r3, #210	; 0xd2
 80095c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80095cc:	2302      	movs	r3, #2
 80095ce:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80095d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80095d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80095da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80095e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80095ea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80095ee:	041b      	lsls	r3, r3, #16
 80095f0:	461a      	mov	r2, r3
 80095f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80095f6:	021b      	lsls	r3, r3, #8
 80095f8:	431a      	orrs	r2, r3
 80095fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80095fe:	4313      	orrs	r3, r2
 8009600:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009604:	f107 030c 	add.w	r3, r7, #12
 8009608:	4611      	mov	r1, r2
 800960a:	4618      	mov	r0, r3
 800960c:	f7fa f8d8 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009610:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009612:	bf00      	nop
 8009614:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8009616:	4b08      	ldr	r3, [pc, #32]	; (8009638 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	bf00      	nop
 800961c:	3748      	adds	r7, #72	; 0x48
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200237f8 	.word	0x200237f8
 8009628:	200237fc 	.word	0x200237fc
 800962c:	20023800 	.word	0x20023800
 8009630:	20023804 	.word	0x20023804
 8009634:	20023808 	.word	0x20023808
 8009638:	2002380c 	.word	0x2002380c

0800963c <_GLOBAL__sub_I__ZN8alertBarC2Ev>:
 800963c:	b580      	push	{r7, lr}
 800963e:	af00      	add	r7, sp, #0
 8009640:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009644:	2001      	movs	r0, #1
 8009646:	f7ff fecb 	bl	80093e0 <_Z41__static_initialization_and_destruction_0ii>
 800964a:	bd80      	pop	{r7, pc}

0800964c <_Z4lerpfff>:
}

inline float lerp(float a, float b, float t)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	ed87 0a03 	vstr	s0, [r7, #12]
 8009656:	edc7 0a02 	vstr	s1, [r7, #8]
 800965a:	ed87 1a01 	vstr	s2, [r7, #4]
    float value =  a + t * (b - a);
 800965e:	ed97 7a02 	vldr	s14, [r7, #8]
 8009662:	edd7 7a03 	vldr	s15, [r7, #12]
 8009666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800966a:	edd7 7a01 	vldr	s15, [r7, #4]
 800966e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009672:	ed97 7a03 	vldr	s14, [r7, #12]
 8009676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800967a:	edc7 7a05 	vstr	s15, [r7, #20]
    if( value < fminf(a,b))
 800967e:	edd7 0a02 	vldr	s1, [r7, #8]
 8009682:	ed97 0a03 	vldr	s0, [r7, #12]
 8009686:	f01b fea6 	bl	80253d6 <fminf>
 800968a:	eeb0 7a40 	vmov.f32	s14, s0
 800968e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969a:	d508      	bpl.n	80096ae <_Z4lerpfff+0x62>
    {
        return fminf(a,b);
 800969c:	edd7 0a02 	vldr	s1, [r7, #8]
 80096a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80096a4:	f01b fe97 	bl	80253d6 <fminf>
 80096a8:	eef0 7a40 	vmov.f32	s15, s0
 80096ac:	e019      	b.n	80096e2 <_Z4lerpfff+0x96>
    }
    if(value > fmaxf(a,b))
 80096ae:	edd7 0a02 	vldr	s1, [r7, #8]
 80096b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80096b6:	f01b fe73 	bl	80253a0 <fmaxf>
 80096ba:	eeb0 7a40 	vmov.f32	s14, s0
 80096be:	edd7 7a05 	vldr	s15, [r7, #20]
 80096c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ca:	dd08      	ble.n	80096de <_Z4lerpfff+0x92>
    {
        return fmaxf(a,b);
 80096cc:	edd7 0a02 	vldr	s1, [r7, #8]
 80096d0:	ed97 0a03 	vldr	s0, [r7, #12]
 80096d4:	f01b fe64 	bl	80253a0 <fmaxf>
 80096d8:	eef0 7a40 	vmov.f32	s15, s0
 80096dc:	e001      	b.n	80096e2 <_Z4lerpfff+0x96>
    }
    return value;
 80096de:	edd7 7a05 	vldr	s15, [r7, #20]
}
 80096e2:	eeb0 0a67 	vmov.f32	s0, s15
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <_Z9lerpColorN8touchgfx9colortypeES0_f>:

using namespace touchgfx;
inline colortype lerpColor(colortype x, colortype y, float alpha)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	ed2d 8b02 	vpush	{d8}
 80096f2:	b090      	sub	sp, #64	; 0x40
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	627b      	str	r3, [r7, #36]	; 0x24
        return color >> 16;
 8009702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009706:	4618      	mov	r0, r3
 8009708:	f7f9 fc8a 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 800970c:	4603      	mov	r3, r0
 800970e:	0c1b      	lsrs	r3, r3, #16
 8009710:	b2db      	uxtb	r3, r3
    float r = lerp((float)Color::getRed(x), (float)Color::getRed(y), alpha);
 8009712:	ee07 3a90 	vmov	s15, r3
 8009716:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	623b      	str	r3, [r7, #32]
 800971e:	f107 0320 	add.w	r3, r7, #32
 8009722:	4618      	mov	r0, r3
 8009724:	f7f9 fc7c 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 8009728:	4603      	mov	r3, r0
 800972a:	0c1b      	lsrs	r3, r3, #16
 800972c:	b2db      	uxtb	r3, r3
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009736:	ed97 1a01 	vldr	s2, [r7, #4]
 800973a:	eef0 0a67 	vmov.f32	s1, s15
 800973e:	eeb0 0a48 	vmov.f32	s0, s16
 8009742:	f7ff ff83 	bl	800964c <_Z4lerpfff>
 8009746:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	61fb      	str	r3, [r7, #28]
        return color >> 8;
 800974e:	f107 031c 	add.w	r3, r7, #28
 8009752:	4618      	mov	r0, r3
 8009754:	f7f9 fc64 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 8009758:	4603      	mov	r3, r0
 800975a:	0a1b      	lsrs	r3, r3, #8
 800975c:	b2db      	uxtb	r3, r3
    float g = lerp((float)Color::getGreen(x), (float)Color::getGreen(y), alpha);
 800975e:	ee07 3a90 	vmov	s15, r3
 8009762:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	f107 0318 	add.w	r3, r7, #24
 800976e:	4618      	mov	r0, r3
 8009770:	f7f9 fc56 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 8009774:	4603      	mov	r3, r0
 8009776:	0a1b      	lsrs	r3, r3, #8
 8009778:	b2db      	uxtb	r3, r3
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009782:	ed97 1a01 	vldr	s2, [r7, #4]
 8009786:	eef0 0a67 	vmov.f32	s1, s15
 800978a:	eeb0 0a48 	vmov.f32	s0, s16
 800978e:	f7ff ff5d 	bl	800964c <_Z4lerpfff>
 8009792:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	617b      	str	r3, [r7, #20]
        return color;
 800979a:	f107 0314 	add.w	r3, r7, #20
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f9 fc3e 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 80097a4:	4603      	mov	r3, r0
 80097a6:	b2db      	uxtb	r3, r3
    float b = lerp((float)Color::getBlue(x), (float)Color::getBlue(y), alpha);
 80097a8:	ee07 3a90 	vmov	s15, r3
 80097ac:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	613b      	str	r3, [r7, #16]
 80097b4:	f107 0310 	add.w	r3, r7, #16
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7f9 fc31 	bl	8003020 <_ZNK8touchgfx9colortypecvmEv>
 80097be:	4603      	mov	r3, r0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ca:	ed97 1a01 	vldr	s2, [r7, #4]
 80097ce:	eef0 0a67 	vmov.f32	s1, s15
 80097d2:	eeb0 0a48 	vmov.f32	s0, s16
 80097d6:	f7ff ff39 	bl	800964c <_Z4lerpfff>
 80097da:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    return Color::getColorFrom24BitRGB(r,g,b);
 80097de:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80097e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e6:	edc7 7a00 	vstr	s15, [r7]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	b2d9      	uxtb	r1, r3
 80097ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80097f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f6:	edc7 7a00 	vstr	s15, [r7]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009806:	edc7 7a00 	vstr	s15, [r7]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f887 1033 	strb.w	r1, [r7, #51]	; 0x33
 8009812:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 8009816:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800981a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800981e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8009822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800982a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800982e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009832:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009836:	041b      	lsls	r3, r3, #16
 8009838:	461a      	mov	r2, r3
 800983a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	431a      	orrs	r2, r3
 8009842:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009846:	4313      	orrs	r3, r2
 8009848:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800984c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009850:	4611      	mov	r1, r2
 8009852:	4618      	mov	r0, r3
 8009854:	f7f9 ffb4 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
        return getColorFromRGB(red, green, blue);
 800985a:	bf00      	nop
}
 800985c:	4618      	mov	r0, r3
 800985e:	3740      	adds	r7, #64	; 0x40
 8009860:	46bd      	mov	sp, r7
 8009862:	ecbd 8b02 	vpop	{d8}
 8009866:	bd80      	pop	{r7, pc}

08009868 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>
#include <cmath>

tempBox::tempBox()
 8009868:	b5b0      	push	{r4, r5, r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af02      	add	r7, sp, #8
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fe0e 	bl	8008494 <_ZN11tempBoxBaseC1Ev>
 8009878:	4a73      	ldr	r2, [pc, #460]	; (8009a48 <_ZN7tempBoxC1Ev+0x1e0>)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	22dc      	movs	r2, #220	; 0xdc
 800988a:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8009894:	24db      	movs	r4, #219	; 0xdb
 8009896:	461d      	mov	r5, r3
 8009898:	2c00      	cmp	r4, #0
 800989a:	db05      	blt.n	80098a8 <_ZN7tempBoxC1Ev+0x40>
 800989c:	4628      	mov	r0, r5
 800989e:	f00c f9f1 	bl	8015c84 <_ZN8touchgfx4LineC1Ev>
 80098a2:	3574      	adds	r5, #116	; 0x74
 80098a4:	3c01      	subs	r4, #1
 80098a6:	e7f7      	b.n	8009898 <_ZN7tempBoxC1Ev+0x30>
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	f646 031c 	movw	r3, #26652	; 0x681c
 80098ae:	4413      	add	r3, r2
 80098b0:	24db      	movs	r4, #219	; 0xdb
 80098b2:	461d      	mov	r5, r3
 80098b4:	2c00      	cmp	r4, #0
 80098b6:	db0c      	blt.n	80098d2 <_ZN7tempBoxC1Ev+0x6a>
 80098b8:	f107 0308 	add.w	r3, r7, #8
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f7f9 ff7e 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	4628      	mov	r0, r5
 80098c8:	f7fc fed8 	bl	800667c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80098cc:	3518      	adds	r5, #24
 80098ce:	3c01      	subs	r4, #1
 80098d0:	e7f0      	b.n	80098b4 <_ZN7tempBoxC1Ev+0x4c>
{
    for(int i=0; i < 220; i++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2bdb      	cmp	r3, #219	; 0xdb
 80098da:	f300 80b0 	bgt.w	8009a3e <_ZN7tempBoxC1Ev+0x1d6>
    {
        lines[i].setPosition(0,0,220,60);
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2274      	movs	r2, #116	; 0x74
 80098e2:	fb02 f303 	mul.w	r3, r2, r3
 80098e6:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	4413      	add	r3, r2
 80098ee:	1d18      	adds	r0, r3, #4
 80098f0:	233c      	movs	r3, #60	; 0x3c
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	23dc      	movs	r3, #220	; 0xdc
 80098f6:	2200      	movs	r2, #0
 80098f8:	2100      	movs	r1, #0
 80098fa:	f7fc fb88 	bl	800600e <_ZN8touchgfx8Drawable11setPositionEssss>
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB(255 - i , i, i % 40));
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4613      	mov	r3, r2
 8009902:	005b      	lsls	r3, r3, #1
 8009904:	4413      	add	r3, r2
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	f646 0218 	movw	r2, #26648	; 0x6818
 800990c:	441a      	add	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4413      	add	r3, r2
 8009912:	1d1c      	adds	r4, r3, #4
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	43db      	mvns	r3, r3
 800991a:	b2dd      	uxtb	r5, r3
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	b2d8      	uxtb	r0, r3
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	4b4a      	ldr	r3, [pc, #296]	; (8009a4c <_ZN7tempBoxC1Ev+0x1e4>)
 8009924:	fb83 1302 	smull	r1, r3, r3, r2
 8009928:	1119      	asrs	r1, r3, #4
 800992a:	17d3      	asrs	r3, r2, #31
 800992c:	1ac9      	subs	r1, r1, r3
 800992e:	460b      	mov	r3, r1
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	440b      	add	r3, r1
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	1ad1      	subs	r1, r2, r3
 8009938:	b2cb      	uxtb	r3, r1
 800993a:	462a      	mov	r2, r5
 800993c:	74fa      	strb	r2, [r7, #19]
 800993e:	4602      	mov	r2, r0
 8009940:	74ba      	strb	r2, [r7, #18]
 8009942:	747b      	strb	r3, [r7, #17]
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009944:	7cfb      	ldrb	r3, [r7, #19]
 8009946:	041b      	lsls	r3, r3, #16
 8009948:	461a      	mov	r2, r3
 800994a:	7cbb      	ldrb	r3, [r7, #18]
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	431a      	orrs	r2, r3
 8009950:	7c7b      	ldrb	r3, [r7, #17]
 8009952:	4313      	orrs	r3, r2
 8009954:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009958:	f107 030c 	add.w	r3, r7, #12
 800995c:	4611      	mov	r1, r2
 800995e:	4618      	mov	r0, r3
 8009960:	f7f9 ff2e 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4619      	mov	r1, r3
 8009968:	4620      	mov	r0, r4
 800996a:	f7fc fea7 	bl	80066bc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        lines[i].setPainter(linesPainter[i]);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2274      	movs	r2, #116	; 0x74
 8009972:	fb02 f303 	mul.w	r3, r2, r3
 8009976:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	4413      	add	r3, r2
 800997e:	1d18      	adds	r0, r3, #4
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2174      	movs	r1, #116	; 0x74
 8009986:	fb01 f303 	mul.w	r3, r1, r3
 800998a:	4413      	add	r3, r2
 800998c:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	335c      	adds	r3, #92	; 0x5c
 8009994:	681c      	ldr	r4, [r3, #0]
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	4613      	mov	r3, r2
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	4413      	add	r3, r2
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	f646 0218 	movw	r2, #26648	; 0x6818
 80099a4:	441a      	add	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4413      	add	r3, r2
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	47a0      	blx	r4
        lines[i].setStart(i,0);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	2274      	movs	r2, #116	; 0x74
 80099b4:	fb02 f303 	mul.w	r3, r2, r3
 80099b8:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	4413      	add	r3, r2
 80099c0:	3304      	adds	r3, #4
 80099c2:	2200      	movs	r2, #0
 80099c4:	6979      	ldr	r1, [r7, #20]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fd fda6 	bl	8007518 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
        lines[i].setEnd(i,60);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	2274      	movs	r2, #116	; 0x74
 80099d0:	fb02 f303 	mul.w	r3, r2, r3
 80099d4:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	4413      	add	r3, r2
 80099dc:	3304      	adds	r3, #4
 80099de:	223c      	movs	r2, #60	; 0x3c
 80099e0:	6979      	ldr	r1, [r7, #20]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fd fdbe 	bl	8007564 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
        lines[i].setLineWidth(1);
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2274      	movs	r2, #116	; 0x74
 80099ec:	fb02 f303 	mul.w	r3, r2, r3
 80099f0:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	4413      	add	r3, r2
 80099f8:	3304      	adds	r3, #4
 80099fa:	2101      	movs	r1, #1
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fd fdd7 	bl	80075b0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
        lines[i].setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2274      	movs	r2, #116	; 0x74
 8009a06:	fb02 f303 	mul.w	r3, r2, r3
 8009a0a:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	4413      	add	r3, r2
 8009a12:	3304      	adds	r3, #4
 8009a14:	2101      	movs	r1, #1
 8009a16:	4618      	mov	r0, r3
 8009a18:	f00c fa7a 	bl	8015f10 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
        add(lines[i]);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2274      	movs	r2, #116	; 0x74
 8009a22:	fb02 f303 	mul.w	r3, r2, r3
 8009a26:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3304      	adds	r3, #4
 8009a30:	4619      	mov	r1, r3
 8009a32:	f00a fd33 	bl	801449c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for(int i=0; i < 220; i++)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	e74b      	b.n	80098d6 <_ZN7tempBoxC1Ev+0x6e>
    }

}
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4618      	mov	r0, r3
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bdb0      	pop	{r4, r5, r7, pc}
 8009a48:	08027e4c 	.word	0x08027e4c
 8009a4c:	66666667 	.word	0x66666667

08009a50 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fdfa 	bl	8008654 <_ZN11tempBoxBase10initializeEv>
    tempValues[0] = 14;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	220e      	movs	r2, #14
 8009a64:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    tempValues[1] = 20;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2214      	movs	r2, #20
 8009a6c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tempValues[2] = 120;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2278      	movs	r2, #120	; 0x78
 8009a74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    tempValues[3] = 30;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	221e      	movs	r2, #30
 8009a7c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    tempValues[4] = 180;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	22b4      	movs	r2, #180	; 0xb4
 8009a84:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    tempValues[5]= 11;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	220b      	movs	r2, #11
 8009a8c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    numberOfValues = 5;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2205      	movs	r2, #5
 8009a94:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <_ZN7tempBox7mapTempEf>:
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB((tickCounter + i)% 255 , (255 - tickCounter + i) % 255, 0));
    }
}
 
colortype tempBox::mapTemp(float inTemp)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	ed87 0a00 	vstr	s0, [r7]
    /* Upper scale temperature */
    const float maxTemp = 200; 
 8009aac:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <_ZN7tempBox7mapTempEf+0x44>)
 8009aae:	617b      	str	r3, [r7, #20]
    const float p = inTemp/maxTemp;
 8009ab0:	ed97 7a00 	vldr	s14, [r7]
 8009ab4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8009ae8 <_ZN7tempBox7mapTempEf+0x48>
 8009ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009abc:	edc7 7a04 	vstr	s15, [r7, #16]
    const colortype lowerTempColor = colors::green;
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <_ZN7tempBox7mapTempEf+0x4c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60fb      	str	r3, [r7, #12]
    const colortype upperTempColor = colors::red;
 8009ac6:	4b0a      	ldr	r3, [pc, #40]	; (8009af0 <_ZN7tempBox7mapTempEf+0x50>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60bb      	str	r3, [r7, #8]

    return lerpColor(lowerTempColor, upperTempColor, p);
 8009acc:	ed97 0a04 	vldr	s0, [r7, #16]
 8009ad0:	68b9      	ldr	r1, [r7, #8]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7ff fe0a 	bl	80096ec <_Z9lerpColorN8touchgfx9colortypeES0_f>
 8009ad8:	4603      	mov	r3, r0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	43480000 	.word	0x43480000
 8009ae8:	43480000 	.word	0x43480000
 8009aec:	20023818 	.word	0x20023818
 8009af0:	20023814 	.word	0x20023814

08009af4 <_ZN7tempBox6redrawEv>:

void tempBox::redraw()
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08a      	sub	sp, #40	; 0x28
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
    for( int i = 0; i < LINES_NUM; i++)
 8009afc:	2300      	movs	r3, #0
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	2bdb      	cmp	r3, #219	; 0xdb
 8009b04:	f300 8092 	bgt.w	8009c2c <_ZN7tempBox6redrawEv+0x138>
    {
        float p = (float)i / LINES_NUM;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009c34 <_ZN7tempBox6redrawEv+0x140>
 8009b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        float iInRange = p * numberOfValues;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8009b24:	ee07 3a90 	vmov	s15, r3
 8009b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b2c:	ed97 7a07 	vldr	s14, [r7, #28]
 8009b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b34:	edc7 7a08 	vstr	s15, [r7, #32]

        if(iInRange < 0)
 8009b38:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b44:	d503      	bpl.n	8009b4e <_ZN7tempBox6redrawEv+0x5a>
            iInRange = 0;
 8009b46:	f04f 0300 	mov.w	r3, #0
 8009b4a:	623b      	str	r3, [r7, #32]
 8009b4c:	e017      	b.n	8009b7e <_ZN7tempBox6redrawEv+0x8a>
        else if(iInRange >= numberOfValues)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8009b54:	ee07 3a90 	vmov	s15, r3
 8009b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8009b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b68:	db09      	blt.n	8009b7e <_ZN7tempBox6redrawEv+0x8a>
            iInRange = numberOfValues - 1;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8009b70:	3b01      	subs	r3, #1
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b7a:	edc7 7a08 	vstr	s15, [r7, #32]

        //if iInRange is abs value get data from array, else liniear interpolate between values
        int kCeil = ceilf(iInRange);
 8009b7e:	ed97 0a08 	vldr	s0, [r7, #32]
 8009b82:	f01b fb89 	bl	8025298 <ceilf>
 8009b86:	eef0 7a40 	vmov.f32	s15, s0
 8009b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b8e:	ee17 3a90 	vmov	r3, s15
 8009b92:	61bb      	str	r3, [r7, #24]
        int kFloor = floorf(iInRange);
 8009b94:	ed97 0a08 	vldr	s0, [r7, #32]
 8009b98:	f01b fbc0 	bl	802531c <floorf>
 8009b9c:	eef0 7a40 	vmov.f32	s15, s0
 8009ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ba4:	ee17 3a90 	vmov	r3, s15
 8009ba8:	617b      	str	r3, [r7, #20]

        float alpha = iInRange - kFloor;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	ee07 3a90 	vmov	s15, r3
 8009bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bb4:	ed97 7a08 	vldr	s14, [r7, #32]
 8009bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bbc:	edc7 7a04 	vstr	s15, [r7, #16]
        float endValue = lerp(tempValues[kFloor], tempValues[kCeil], alpha);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	323e      	adds	r2, #62	; 0x3e
 8009bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	323e      	adds	r2, #62	; 0x3e
 8009bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bdc:	ee07 3a10 	vmov	s14, r3
 8009be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009be4:	ed97 1a04 	vldr	s2, [r7, #16]
 8009be8:	eef0 0a47 	vmov.f32	s1, s14
 8009bec:	eeb0 0a67 	vmov.f32	s0, s15
 8009bf0:	f7ff fd2c 	bl	800964c <_Z4lerpfff>
 8009bf4:	ed87 0a03 	vstr	s0, [r7, #12]
        
        const colortype tempColor = mapTemp(endValue);
 8009bf8:	ed97 0a03 	vldr	s0, [r7, #12]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff ff4f 	bl	8009aa0 <_ZN7tempBox7mapTempEf>
 8009c02:	4603      	mov	r3, r0
 8009c04:	60bb      	str	r3, [r7, #8]
        linesPainter[i].setColor(tempColor);
 8009c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c08:	4613      	mov	r3, r2
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	4413      	add	r3, r2
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	f646 0218 	movw	r2, #26648	; 0x6818
 8009c14:	441a      	add	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4413      	add	r3, r2
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fc fd4c 	bl	80066bc <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    for( int i = 0; i < LINES_NUM; i++)
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	3301      	adds	r3, #1
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
 8009c2a:	e769      	b.n	8009b00 <_ZN7tempBox6redrawEv+0xc>
    }
 8009c2c:	bf00      	nop
 8009c2e:	3728      	adds	r7, #40	; 0x28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	435c0000 	.word	0x435c0000

08009c38 <_Z41__static_initialization_and_destruction_0ii>:
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b092      	sub	sp, #72	; 0x48
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	f040 8114 	bne.w	8009e72 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c50:	4293      	cmp	r3, r2
 8009c52:	f040 810e 	bne.w	8009e72 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009c56:	2300      	movs	r3, #0
 8009c58:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009c62:	2300      	movs	r3, #0
 8009c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c68:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009c6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8009c80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c84:	041b      	lsls	r3, r3, #16
 8009c86:	461a      	mov	r2, r3
 8009c88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c94:	4313      	orrs	r3, r2
 8009c96:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009c9a:	f107 0320 	add.w	r3, r7, #32
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7f9 fd8d 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009ca8:	bf00      	nop
 8009caa:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009cac:	4b73      	ldr	r3, [pc, #460]	; (8009e7c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	23ff      	movs	r3, #255	; 0xff
 8009cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cc6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009cca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009cd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009cde:	041b      	lsls	r3, r3, #16
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ce6:	021b      	lsls	r3, r3, #8
 8009ce8:	431a      	orrs	r2, r3
 8009cea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009cf4:	f107 031c 	add.w	r3, r7, #28
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7f9 fd60 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009d00:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8009d02:	bf00      	nop
 8009d04:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8009d06:	4b5e      	ldr	r3, [pc, #376]	; (8009e80 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009d10:	23ff      	movs	r3, #255	; 0xff
 8009d12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009d16:	2300      	movs	r3, #0
 8009d18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009d20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009d28:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009d34:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d38:	041b      	lsls	r3, r3, #16
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009d40:	021b      	lsls	r3, r3, #8
 8009d42:	431a      	orrs	r2, r3
 8009d44:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009d4e:	f107 0318 	add.w	r3, r7, #24
 8009d52:	4611      	mov	r1, r2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7f9 fd33 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009d5a:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009d5c:	bf00      	nop
 8009d5e:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009d60:	4b48      	ldr	r3, [pc, #288]	; (8009e84 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	2300      	movs	r3, #0
 8009d66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009d70:	23ff      	movs	r3, #255	; 0xff
 8009d72:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009d76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009d7a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009d7e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009d86:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009d8a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009d8e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009d92:	041b      	lsls	r3, r3, #16
 8009d94:	461a      	mov	r2, r3
 8009d96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d9a:	021b      	lsls	r3, r3, #8
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009da2:	4313      	orrs	r3, r2
 8009da4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009da8:	f107 0314 	add.w	r3, r7, #20
 8009dac:	4611      	mov	r1, r2
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7f9 fd06 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009db4:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8009db6:	bf00      	nop
 8009db8:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8009dba:	4b33      	ldr	r3, [pc, #204]	; (8009e88 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	23f7      	movs	r3, #247	; 0xf7
 8009dc0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8009dc4:	234c      	movs	r3, #76	; 0x4c
 8009dc6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8009dca:	2302      	movs	r3, #2
 8009dcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009dd0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009dd4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009dd8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009ddc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009de0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009de4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009de8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009dec:	041b      	lsls	r3, r3, #16
 8009dee:	461a      	mov	r2, r3
 8009df0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009df4:	021b      	lsls	r3, r3, #8
 8009df6:	431a      	orrs	r2, r3
 8009df8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009e02:	f107 0310 	add.w	r3, r7, #16
 8009e06:	4611      	mov	r1, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7f9 fcd9 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009e0e:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009e10:	bf00      	nop
 8009e12:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009e14:	4b1d      	ldr	r3, [pc, #116]	; (8009e8c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	23f7      	movs	r3, #247	; 0xf7
 8009e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009e1e:	23d2      	movs	r3, #210	; 0xd2
 8009e20:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009e24:	2302      	movs	r3, #2
 8009e26:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009e2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009e2e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8009e32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009e3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009e42:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009e46:	041b      	lsls	r3, r3, #16
 8009e48:	461a      	mov	r2, r3
 8009e4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e4e:	021b      	lsls	r3, r3, #8
 8009e50:	431a      	orrs	r2, r3
 8009e52:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009e5c:	f107 030c 	add.w	r3, r7, #12
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f9 fcac 	bl	80037c0 <_ZN8touchgfx9colortypeC1Em>
 8009e68:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009e6a:	bf00      	nop
 8009e6c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8009e6e:	4b08      	ldr	r3, [pc, #32]	; (8009e90 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	bf00      	nop
 8009e74:	3748      	adds	r7, #72	; 0x48
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20023810 	.word	0x20023810
 8009e80:	20023814 	.word	0x20023814
 8009e84:	20023818 	.word	0x20023818
 8009e88:	2002381c 	.word	0x2002381c
 8009e8c:	20023820 	.word	0x20023820
 8009e90:	20023824 	.word	0x20023824

08009e94 <_GLOBAL__sub_I__ZN7tempBoxC2Ev>:
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009e9c:	2001      	movs	r0, #1
 8009e9e:	f7ff fecb 	bl	8009c38 <_Z41__static_initialization_and_destruction_0ii>
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009ea8:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <SystemInit+0x20>)
 8009eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eae:	4a05      	ldr	r2, [pc, #20]	; (8009ec4 <SystemInit+0x20>)
 8009eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009eb8:	bf00      	nop
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	e000ed00 	.word	0xe000ed00

08009ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009ecc:	2003      	movs	r0, #3
 8009ece:	f001 f826 	bl	800af1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009ed2:	200f      	movs	r0, #15
 8009ed4:	f7f8 f986 	bl	80021e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8009ed8:	f7f8 f95c 	bl	8002194 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ee8:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <HAL_IncTick+0x20>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	461a      	mov	r2, r3
 8009eee:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <HAL_IncTick+0x24>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	4a04      	ldr	r2, [pc, #16]	; (8009f08 <HAL_IncTick+0x24>)
 8009ef6:	6013      	str	r3, [r2, #0]
}
 8009ef8:	bf00      	nop
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20000014 	.word	0x20000014
 8009f08:	20056f10 	.word	0x20056f10

08009f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8009f10:	4b03      	ldr	r3, [pc, #12]	; (8009f20 <HAL_GetTick+0x14>)
 8009f12:	681b      	ldr	r3, [r3, #0]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	20056f10 	.word	0x20056f10

08009f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f2c:	f7ff ffee 	bl	8009f0c <HAL_GetTick>
 8009f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3c:	d005      	beq.n	8009f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f3e:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <HAL_Delay+0x44>)
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	461a      	mov	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4413      	add	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009f4a:	bf00      	nop
 8009f4c:	f7ff ffde 	bl	8009f0c <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d8f7      	bhi.n	8009f4c <HAL_Delay+0x28>
  {
  }
}
 8009f5c:	bf00      	nop
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000014 	.word	0x20000014

08009f6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e031      	b.n	8009fe6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d109      	bne.n	8009f9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7f6 fdee 	bl	8000b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa2:	f003 0310 	and.w	r3, r3, #16
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d116      	bne.n	8009fd8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fae:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <HAL_ADC_Init+0x84>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	f043 0202 	orr.w	r2, r3, #2
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f964 	bl	800a288 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	f043 0201 	orr.w	r2, r3, #1
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8009fd6:	e001      	b.n	8009fdc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	ffffeefd 	.word	0xffffeefd

08009ff4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d101      	bne.n	800a010 <HAL_ADC_ConfigChannel+0x1c>
 800a00c:	2302      	movs	r3, #2
 800a00e:	e12a      	b.n	800a266 <HAL_ADC_ConfigChannel+0x272>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b09      	cmp	r3, #9
 800a01e:	d93a      	bls.n	800a096 <HAL_ADC_ConfigChannel+0xa2>
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a028:	d035      	beq.n	800a096 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68d9      	ldr	r1, [r3, #12]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	b29b      	uxth	r3, r3
 800a036:	461a      	mov	r2, r3
 800a038:	4613      	mov	r3, r2
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	4413      	add	r3, r2
 800a03e:	3b1e      	subs	r3, #30
 800a040:	2207      	movs	r2, #7
 800a042:	fa02 f303 	lsl.w	r3, r2, r3
 800a046:	43da      	mvns	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	400a      	ands	r2, r1
 800a04e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a87      	ldr	r2, [pc, #540]	; (800a274 <HAL_ADC_ConfigChannel+0x280>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d10a      	bne.n	800a070 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68d9      	ldr	r1, [r3, #12]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	061a      	lsls	r2, r3, #24
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a06e:	e035      	b.n	800a0dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68d9      	ldr	r1, [r3, #12]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4618      	mov	r0, r3
 800a082:	4603      	mov	r3, r0
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	4403      	add	r3, r0
 800a088:	3b1e      	subs	r3, #30
 800a08a:	409a      	lsls	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	430a      	orrs	r2, r1
 800a092:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a094:	e022      	b.n	800a0dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6919      	ldr	r1, [r3, #16]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	2207      	movs	r2, #7
 800a0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b0:	43da      	mvns	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	400a      	ands	r2, r1
 800a0b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6919      	ldr	r1, [r3, #16]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	689a      	ldr	r2, [r3, #8]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	4403      	add	r3, r0
 800a0d2:	409a      	lsls	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	430a      	orrs	r2, r1
 800a0da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b06      	cmp	r3, #6
 800a0e2:	d824      	bhi.n	800a12e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	3b05      	subs	r3, #5
 800a0f6:	221f      	movs	r2, #31
 800a0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fc:	43da      	mvns	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	400a      	ands	r2, r1
 800a104:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	4618      	mov	r0, r3
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	3b05      	subs	r3, #5
 800a120:	fa00 f203 	lsl.w	r2, r0, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	635a      	str	r2, [r3, #52]	; 0x34
 800a12c:	e04c      	b.n	800a1c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	2b0c      	cmp	r3, #12
 800a134:	d824      	bhi.n	800a180 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	4613      	mov	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4413      	add	r3, r2
 800a146:	3b23      	subs	r3, #35	; 0x23
 800a148:	221f      	movs	r2, #31
 800a14a:	fa02 f303 	lsl.w	r3, r2, r3
 800a14e:	43da      	mvns	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	400a      	ands	r2, r1
 800a156:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	b29b      	uxth	r3, r3
 800a164:	4618      	mov	r0, r3
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	4613      	mov	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	3b23      	subs	r3, #35	; 0x23
 800a172:	fa00 f203 	lsl.w	r2, r0, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30
 800a17e:	e023      	b.n	800a1c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	3b41      	subs	r3, #65	; 0x41
 800a192:	221f      	movs	r2, #31
 800a194:	fa02 f303 	lsl.w	r3, r2, r3
 800a198:	43da      	mvns	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	400a      	ands	r2, r1
 800a1a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	3b41      	subs	r3, #65	; 0x41
 800a1bc:	fa00 f203 	lsl.w	r2, r0, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a2a      	ldr	r2, [pc, #168]	; (800a278 <HAL_ADC_ConfigChannel+0x284>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d10a      	bne.n	800a1e8 <HAL_ADC_ConfigChannel+0x1f4>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1da:	d105      	bne.n	800a1e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800a1dc:	4b27      	ldr	r3, [pc, #156]	; (800a27c <HAL_ADC_ConfigChannel+0x288>)
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	4a26      	ldr	r2, [pc, #152]	; (800a27c <HAL_ADC_ConfigChannel+0x288>)
 800a1e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a1e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a22      	ldr	r2, [pc, #136]	; (800a278 <HAL_ADC_ConfigChannel+0x284>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d109      	bne.n	800a206 <HAL_ADC_ConfigChannel+0x212>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b12      	cmp	r3, #18
 800a1f8:	d105      	bne.n	800a206 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800a1fa:	4b20      	ldr	r3, [pc, #128]	; (800a27c <HAL_ADC_ConfigChannel+0x288>)
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	4a1f      	ldr	r2, [pc, #124]	; (800a27c <HAL_ADC_ConfigChannel+0x288>)
 800a200:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a204:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1b      	ldr	r2, [pc, #108]	; (800a278 <HAL_ADC_ConfigChannel+0x284>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d125      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x268>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a17      	ldr	r2, [pc, #92]	; (800a274 <HAL_ADC_ConfigChannel+0x280>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d003      	beq.n	800a222 <HAL_ADC_ConfigChannel+0x22e>
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b11      	cmp	r3, #17
 800a220:	d11c      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800a222:	4b16      	ldr	r3, [pc, #88]	; (800a27c <HAL_ADC_ConfigChannel+0x288>)
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	4a15      	ldr	r2, [pc, #84]	; (800a27c <HAL_ADC_ConfigChannel+0x288>)
 800a228:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a22c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a10      	ldr	r2, [pc, #64]	; (800a274 <HAL_ADC_ConfigChannel+0x280>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d111      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800a238:	4b11      	ldr	r3, [pc, #68]	; (800a280 <HAL_ADC_ConfigChannel+0x28c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a11      	ldr	r2, [pc, #68]	; (800a284 <HAL_ADC_ConfigChannel+0x290>)
 800a23e:	fba2 2303 	umull	r2, r3, r2, r3
 800a242:	0c9a      	lsrs	r2, r3, #18
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a24e:	e002      	b.n	800a256 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3b01      	subs	r3, #1
 800a254:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1f9      	bne.n	800a250 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	10000012 	.word	0x10000012
 800a278:	40012000 	.word	0x40012000
 800a27c:	40012300 	.word	0x40012300
 800a280:	2000000c 	.word	0x2000000c
 800a284:	431bde83 	.word	0x431bde83

0800a288 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800a290:	4b78      	ldr	r3, [pc, #480]	; (800a474 <ADC_Init+0x1ec>)
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	4a77      	ldr	r2, [pc, #476]	; (800a474 <ADC_Init+0x1ec>)
 800a296:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a29a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800a29c:	4b75      	ldr	r3, [pc, #468]	; (800a474 <ADC_Init+0x1ec>)
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	4973      	ldr	r1, [pc, #460]	; (800a474 <ADC_Init+0x1ec>)
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6859      	ldr	r1, [r3, #4]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	021a      	lsls	r2, r3, #8
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a2dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6859      	ldr	r1, [r3, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	689a      	ldr	r2, [r3, #8]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689a      	ldr	r2, [r3, #8]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6899      	ldr	r1, [r3, #8]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68da      	ldr	r2, [r3, #12]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a316:	4a58      	ldr	r2, [pc, #352]	; (800a478 <ADC_Init+0x1f0>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d022      	beq.n	800a362 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a32a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6899      	ldr	r1, [r3, #8]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a34c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6899      	ldr	r1, [r3, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	430a      	orrs	r2, r1
 800a35e:	609a      	str	r2, [r3, #8]
 800a360:	e00f      	b.n	800a382 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689a      	ldr	r2, [r3, #8]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a380:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689a      	ldr	r2, [r3, #8]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f022 0202 	bic.w	r2, r2, #2
 800a390:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6899      	ldr	r1, [r3, #8]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	005a      	lsls	r2, r3, #1
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01b      	beq.n	800a3e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685a      	ldr	r2, [r3, #4]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a3ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6859      	ldr	r1, [r3, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	035a      	lsls	r2, r3, #13
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
 800a3e6:	e007      	b.n	800a3f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a406:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	3b01      	subs	r3, #1
 800a414:	051a      	lsls	r2, r3, #20
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689a      	ldr	r2, [r3, #8]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a42c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6899      	ldr	r1, [r3, #8]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a43a:	025a      	lsls	r2, r3, #9
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689a      	ldr	r2, [r3, #8]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6899      	ldr	r1, [r3, #8]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	029a      	lsls	r2, r3, #10
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	430a      	orrs	r2, r1
 800a466:	609a      	str	r2, [r3, #8]
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	40012300 	.word	0x40012300
 800a478:	0f000001 	.word	0x0f000001

0800a47c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e0ed      	b.n	800a66a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d102      	bne.n	800a4a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7f6 fde6 	bl	800106c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f022 0202 	bic.w	r2, r2, #2
 800a4ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4b0:	f7ff fd2c 	bl	8009f0c <HAL_GetTick>
 800a4b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a4b6:	e012      	b.n	800a4de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a4b8:	f7ff fd28 	bl	8009f0c <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	2b0a      	cmp	r3, #10
 800a4c4:	d90b      	bls.n	800a4de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2205      	movs	r2, #5
 800a4d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e0c5      	b.n	800a66a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e5      	bne.n	800a4b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f042 0201 	orr.w	r2, r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4fc:	f7ff fd06 	bl	8009f0c <HAL_GetTick>
 800a500:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a502:	e012      	b.n	800a52a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a504:	f7ff fd02 	bl	8009f0c <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	2b0a      	cmp	r3, #10
 800a510:	d90b      	bls.n	800a52a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2205      	movs	r2, #5
 800a522:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e09f      	b.n	800a66a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0e5      	beq.n	800a504 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	7e1b      	ldrb	r3, [r3, #24]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d108      	bne.n	800a552 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a54e:	601a      	str	r2, [r3, #0]
 800a550:	e007      	b.n	800a562 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a560:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7e5b      	ldrb	r3, [r3, #25]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d108      	bne.n	800a57c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	e007      	b.n	800a58c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a58a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	7e9b      	ldrb	r3, [r3, #26]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d108      	bne.n	800a5a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f042 0220 	orr.w	r2, r2, #32
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	e007      	b.n	800a5b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0220 	bic.w	r2, r2, #32
 800a5b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	7edb      	ldrb	r3, [r3, #27]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d108      	bne.n	800a5d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 0210 	bic.w	r2, r2, #16
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	e007      	b.n	800a5e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0210 	orr.w	r2, r2, #16
 800a5de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	7f1b      	ldrb	r3, [r3, #28]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d108      	bne.n	800a5fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f042 0208 	orr.w	r2, r2, #8
 800a5f6:	601a      	str	r2, [r3, #0]
 800a5f8:	e007      	b.n	800a60a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0208 	bic.w	r2, r2, #8
 800a608:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7f5b      	ldrb	r3, [r3, #29]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d108      	bne.n	800a624 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f042 0204 	orr.w	r2, r2, #4
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	e007      	b.n	800a634 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f022 0204 	bic.w	r2, r2, #4
 800a632:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689a      	ldr	r2, [r3, #8]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	431a      	orrs	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	431a      	orrs	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	ea42 0103 	orr.w	r1, r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	1e5a      	subs	r2, r3, #1
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b01      	cmp	r3, #1
 800a684:	d12e      	bne.n	800a6e4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2202      	movs	r2, #2
 800a68a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f022 0201 	bic.w	r2, r2, #1
 800a69c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a69e:	f7ff fc35 	bl	8009f0c <HAL_GetTick>
 800a6a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a6a4:	e012      	b.n	800a6cc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a6a6:	f7ff fc31 	bl	8009f0c <HAL_GetTick>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	2b0a      	cmp	r3, #10
 800a6b2:	d90b      	bls.n	800a6cc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2205      	movs	r2, #5
 800a6c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e012      	b.n	800a6f2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e5      	bne.n	800a6a6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e006      	b.n	800a6f2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
  }
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b087      	sub	sp, #28
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
 800a706:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a70e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800a710:	7dfb      	ldrb	r3, [r7, #23]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d003      	beq.n	800a71e <HAL_CAN_GetRxMessage+0x24>
 800a716:	7dfb      	ldrb	r3, [r7, #23]
 800a718:	2b02      	cmp	r3, #2
 800a71a:	f040 80f3 	bne.w	800a904 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10e      	bne.n	800a742 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d116      	bne.n	800a760 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e0e7      	b.n	800a912 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d107      	bne.n	800a760 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e0d8      	b.n	800a912 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	331b      	adds	r3, #27
 800a768:	011b      	lsls	r3, r3, #4
 800a76a:	4413      	add	r3, r2
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0204 	and.w	r2, r3, #4
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10c      	bne.n	800a798 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	331b      	adds	r3, #27
 800a786:	011b      	lsls	r3, r3, #4
 800a788:	4413      	add	r3, r2
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	0d5b      	lsrs	r3, r3, #21
 800a78e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	e00b      	b.n	800a7b0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	331b      	adds	r3, #27
 800a7a0:	011b      	lsls	r3, r3, #4
 800a7a2:	4413      	add	r3, r2
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	08db      	lsrs	r3, r3, #3
 800a7a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	331b      	adds	r3, #27
 800a7b8:	011b      	lsls	r3, r3, #4
 800a7ba:	4413      	add	r3, r2
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0202 	and.w	r2, r3, #2
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	331b      	adds	r3, #27
 800a7ce:	011b      	lsls	r3, r3, #4
 800a7d0:	4413      	add	r3, r2
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 020f 	and.w	r2, r3, #15
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	331b      	adds	r3, #27
 800a7e6:	011b      	lsls	r3, r3, #4
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	0a1b      	lsrs	r3, r3, #8
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	331b      	adds	r3, #27
 800a7fe:	011b      	lsls	r3, r3, #4
 800a800:	4413      	add	r3, r2
 800a802:	3304      	adds	r3, #4
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	0c1b      	lsrs	r3, r3, #16
 800a808:	b29a      	uxth	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	011b      	lsls	r3, r3, #4
 800a816:	4413      	add	r3, r2
 800a818:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	011b      	lsls	r3, r3, #4
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	0a1a      	lsrs	r2, r3, #8
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	3301      	adds	r3, #1
 800a83a:	b2d2      	uxtb	r2, r2
 800a83c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	4413      	add	r3, r2
 800a848:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	0c1a      	lsrs	r2, r3, #16
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	3302      	adds	r3, #2
 800a854:	b2d2      	uxtb	r2, r2
 800a856:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	4413      	add	r3, r2
 800a862:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	0e1a      	lsrs	r2, r3, #24
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	3303      	adds	r3, #3
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	011b      	lsls	r3, r3, #4
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	3304      	adds	r3, #4
 800a886:	b2d2      	uxtb	r2, r2
 800a888:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	011b      	lsls	r3, r3, #4
 800a892:	4413      	add	r3, r2
 800a894:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	0a1a      	lsrs	r2, r3, #8
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	3305      	adds	r3, #5
 800a8a0:	b2d2      	uxtb	r2, r2
 800a8a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	011b      	lsls	r3, r3, #4
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	0c1a      	lsrs	r2, r3, #16
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	3306      	adds	r3, #6
 800a8ba:	b2d2      	uxtb	r2, r2
 800a8bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	011b      	lsls	r3, r3, #4
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	0e1a      	lsrs	r2, r3, #24
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	3307      	adds	r3, #7
 800a8d4:	b2d2      	uxtb	r2, r2
 800a8d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d108      	bne.n	800a8f0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f042 0220 	orr.w	r2, r2, #32
 800a8ec:	60da      	str	r2, [r3, #12]
 800a8ee:	e007      	b.n	800a900 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	691a      	ldr	r2, [r3, #16]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f042 0220 	orr.w	r2, r2, #32
 800a8fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	e006      	b.n	800a912 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
  }
}
 800a912:	4618      	mov	r0, r3
 800a914:	371c      	adds	r7, #28
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b08a      	sub	sp, #40	; 0x28
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a926:	2300      	movs	r3, #0
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d07c      	beq.n	800aa5e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d023      	beq.n	800a9b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2201      	movs	r2, #1
 800a974:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d003      	beq.n	800a988 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f983 	bl	800ac8c <HAL_CAN_TxMailbox0CompleteCallback>
 800a986:	e016      	b.n	800a9b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	f003 0304 	and.w	r3, r3, #4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
 800a99a:	e00c      	b.n	800a9b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	f003 0308 	and.w	r3, r3, #8
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ae:	e002      	b.n	800a9b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f989 	bl	800acc8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d024      	beq.n	800aa0a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f963 	bl	800aca0 <HAL_CAN_TxMailbox1CompleteCallback>
 800a9da:	e016      	b.n	800aa0a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d004      	beq.n	800a9f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ee:	e00c      	b.n	800aa0a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d004      	beq.n	800aa04 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa00:	627b      	str	r3, [r7, #36]	; 0x24
 800aa02:	e002      	b.n	800aa0a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f969 	bl	800acdc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d024      	beq.n	800aa5e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aa1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d003      	beq.n	800aa30 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f943 	bl	800acb4 <HAL_CAN_TxMailbox2CompleteCallback>
 800aa2e:	e016      	b.n	800aa5e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
 800aa42:	e00c      	b.n	800aa5e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d004      	beq.n	800aa58 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24
 800aa56:	e002      	b.n	800aa5e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f949 	bl	800acf0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	f003 0308 	and.w	r3, r3, #8
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00c      	beq.n	800aa82 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f003 0310 	and.w	r3, r3, #16
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d007      	beq.n	800aa82 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2210      	movs	r2, #16
 800aa80:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	f003 0308 	and.w	r3, r3, #8
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d006      	beq.n	800aaa4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2208      	movs	r2, #8
 800aa9c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f930 	bl	800ad04 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	f003 0302 	and.w	r3, r3, #2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d009      	beq.n	800aac2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f003 0303 	and.w	r3, r3, #3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7f6 fb89 	bl	80011d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00c      	beq.n	800aae6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f003 0310 	and.w	r3, r3, #16
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d007      	beq.n	800aae6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aadc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2210      	movs	r2, #16
 800aae4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	f003 0320 	and.w	r3, r3, #32
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	f003 0308 	and.w	r3, r3, #8
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d006      	beq.n	800ab08 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2208      	movs	r2, #8
 800ab00:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f912 	bl	800ad2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800ab08:	6a3b      	ldr	r3, [r7, #32]
 800ab0a:	f003 0310 	and.w	r3, r3, #16
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d009      	beq.n	800ab26 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	f003 0303 	and.w	r3, r3, #3
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f8f9 	bl	800ad18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00b      	beq.n	800ab48 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	f003 0310 	and.w	r3, r3, #16
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d006      	beq.n	800ab48 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2210      	movs	r2, #16
 800ab40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f8fc 	bl	800ad40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00b      	beq.n	800ab6a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	f003 0308 	and.w	r3, r3, #8
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d006      	beq.n	800ab6a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2208      	movs	r2, #8
 800ab62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f8f5 	bl	800ad54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d07b      	beq.n	800ac6c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f003 0304 	and.w	r3, r3, #4
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d072      	beq.n	800ac64 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ab7e:	6a3b      	ldr	r3, [r7, #32]
 800ab80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d008      	beq.n	800ab9a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	f043 0301 	orr.w	r3, r3, #1
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d008      	beq.n	800abb6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	f043 0302 	orr.w	r3, r3, #2
 800abb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d008      	beq.n	800abd2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	f043 0304 	orr.w	r3, r3, #4
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d043      	beq.n	800ac64 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d03e      	beq.n	800ac64 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abec:	2b60      	cmp	r3, #96	; 0x60
 800abee:	d02b      	beq.n	800ac48 <HAL_CAN_IRQHandler+0x32a>
 800abf0:	2b60      	cmp	r3, #96	; 0x60
 800abf2:	d82e      	bhi.n	800ac52 <HAL_CAN_IRQHandler+0x334>
 800abf4:	2b50      	cmp	r3, #80	; 0x50
 800abf6:	d022      	beq.n	800ac3e <HAL_CAN_IRQHandler+0x320>
 800abf8:	2b50      	cmp	r3, #80	; 0x50
 800abfa:	d82a      	bhi.n	800ac52 <HAL_CAN_IRQHandler+0x334>
 800abfc:	2b40      	cmp	r3, #64	; 0x40
 800abfe:	d019      	beq.n	800ac34 <HAL_CAN_IRQHandler+0x316>
 800ac00:	2b40      	cmp	r3, #64	; 0x40
 800ac02:	d826      	bhi.n	800ac52 <HAL_CAN_IRQHandler+0x334>
 800ac04:	2b30      	cmp	r3, #48	; 0x30
 800ac06:	d010      	beq.n	800ac2a <HAL_CAN_IRQHandler+0x30c>
 800ac08:	2b30      	cmp	r3, #48	; 0x30
 800ac0a:	d822      	bhi.n	800ac52 <HAL_CAN_IRQHandler+0x334>
 800ac0c:	2b10      	cmp	r3, #16
 800ac0e:	d002      	beq.n	800ac16 <HAL_CAN_IRQHandler+0x2f8>
 800ac10:	2b20      	cmp	r3, #32
 800ac12:	d005      	beq.n	800ac20 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800ac14:	e01d      	b.n	800ac52 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	f043 0308 	orr.w	r3, r3, #8
 800ac1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ac1e:	e019      	b.n	800ac54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	f043 0310 	orr.w	r3, r3, #16
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ac28:	e014      	b.n	800ac54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	f043 0320 	orr.w	r3, r3, #32
 800ac30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ac32:	e00f      	b.n	800ac54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ac3c:	e00a      	b.n	800ac54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ac46:	e005      	b.n	800ac54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ac50:	e000      	b.n	800ac54 <HAL_CAN_IRQHandler+0x336>
            break;
 800ac52:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	699a      	ldr	r2, [r3, #24]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ac62:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2204      	movs	r2, #4
 800ac6a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d008      	beq.n	800ac84 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f872 	bl	800ad68 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800ac84:	bf00      	nop
 800ac86:	3728      	adds	r7, #40	; 0x28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <__NVIC_SetPriorityGrouping>:
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f003 0307 	and.w	r3, r3, #7
 800ad8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <__NVIC_SetPriorityGrouping+0x40>)
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ad98:	4013      	ands	r3, r2
 800ad9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ada4:	4b06      	ldr	r3, [pc, #24]	; (800adc0 <__NVIC_SetPriorityGrouping+0x44>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800adaa:	4a04      	ldr	r2, [pc, #16]	; (800adbc <__NVIC_SetPriorityGrouping+0x40>)
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	60d3      	str	r3, [r2, #12]
}
 800adb0:	bf00      	nop
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	e000ed00 	.word	0xe000ed00
 800adc0:	05fa0000 	.word	0x05fa0000

0800adc4 <__NVIC_GetPriorityGrouping>:
{
 800adc4:	b480      	push	{r7}
 800adc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800adc8:	4b04      	ldr	r3, [pc, #16]	; (800addc <__NVIC_GetPriorityGrouping+0x18>)
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	0a1b      	lsrs	r3, r3, #8
 800adce:	f003 0307 	and.w	r3, r3, #7
}
 800add2:	4618      	mov	r0, r3
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	e000ed00 	.word	0xe000ed00

0800ade0 <__NVIC_EnableIRQ>:
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800adea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	db0b      	blt.n	800ae0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	f003 021f 	and.w	r2, r3, #31
 800adf8:	4907      	ldr	r1, [pc, #28]	; (800ae18 <__NVIC_EnableIRQ+0x38>)
 800adfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adfe:	095b      	lsrs	r3, r3, #5
 800ae00:	2001      	movs	r0, #1
 800ae02:	fa00 f202 	lsl.w	r2, r0, r2
 800ae06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ae0a:	bf00      	nop
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	e000e100 	.word	0xe000e100

0800ae1c <__NVIC_DisableIRQ>:
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	db12      	blt.n	800ae54 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	f003 021f 	and.w	r2, r3, #31
 800ae34:	490a      	ldr	r1, [pc, #40]	; (800ae60 <__NVIC_DisableIRQ+0x44>)
 800ae36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae3a:	095b      	lsrs	r3, r3, #5
 800ae3c:	2001      	movs	r0, #1
 800ae3e:	fa00 f202 	lsl.w	r2, r0, r2
 800ae42:	3320      	adds	r3, #32
 800ae44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ae48:	f3bf 8f4f 	dsb	sy
}
 800ae4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ae4e:	f3bf 8f6f 	isb	sy
}
 800ae52:	bf00      	nop
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr
 800ae60:	e000e100 	.word	0xe000e100

0800ae64 <__NVIC_SetPriority>:
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	6039      	str	r1, [r7, #0]
 800ae6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	db0a      	blt.n	800ae8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	490c      	ldr	r1, [pc, #48]	; (800aeb0 <__NVIC_SetPriority+0x4c>)
 800ae7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae82:	0112      	lsls	r2, r2, #4
 800ae84:	b2d2      	uxtb	r2, r2
 800ae86:	440b      	add	r3, r1
 800ae88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ae8c:	e00a      	b.n	800aea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	4908      	ldr	r1, [pc, #32]	; (800aeb4 <__NVIC_SetPriority+0x50>)
 800ae94:	79fb      	ldrb	r3, [r7, #7]
 800ae96:	f003 030f 	and.w	r3, r3, #15
 800ae9a:	3b04      	subs	r3, #4
 800ae9c:	0112      	lsls	r2, r2, #4
 800ae9e:	b2d2      	uxtb	r2, r2
 800aea0:	440b      	add	r3, r1
 800aea2:	761a      	strb	r2, [r3, #24]
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	e000e100 	.word	0xe000e100
 800aeb4:	e000ed00 	.word	0xe000ed00

0800aeb8 <NVIC_EncodePriority>:
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b089      	sub	sp, #36	; 0x24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f003 0307 	and.w	r3, r3, #7
 800aeca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	f1c3 0307 	rsb	r3, r3, #7
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	bf28      	it	cs
 800aed6:	2304      	movcs	r3, #4
 800aed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	3304      	adds	r3, #4
 800aede:	2b06      	cmp	r3, #6
 800aee0:	d902      	bls.n	800aee8 <NVIC_EncodePriority+0x30>
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	3b03      	subs	r3, #3
 800aee6:	e000      	b.n	800aeea <NVIC_EncodePriority+0x32>
 800aee8:	2300      	movs	r3, #0
 800aeea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aeec:	f04f 32ff 	mov.w	r2, #4294967295
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	fa02 f303 	lsl.w	r3, r2, r3
 800aef6:	43da      	mvns	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	401a      	ands	r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af00:	f04f 31ff 	mov.w	r1, #4294967295
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	fa01 f303 	lsl.w	r3, r1, r3
 800af0a:	43d9      	mvns	r1, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af10:	4313      	orrs	r3, r2
}
 800af12:	4618      	mov	r0, r3
 800af14:	3724      	adds	r7, #36	; 0x24
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr

0800af1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff ff28 	bl	800ad7c <__NVIC_SetPriorityGrouping>
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800af46:	f7ff ff3d 	bl	800adc4 <__NVIC_GetPriorityGrouping>
 800af4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	68b9      	ldr	r1, [r7, #8]
 800af50:	6978      	ldr	r0, [r7, #20]
 800af52:	f7ff ffb1 	bl	800aeb8 <NVIC_EncodePriority>
 800af56:	4602      	mov	r2, r0
 800af58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af5c:	4611      	mov	r1, r2
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff ff80 	bl	800ae64 <__NVIC_SetPriority>
}
 800af64:	bf00      	nop
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	4603      	mov	r3, r0
 800af74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800af76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff ff30 	bl	800ade0 <__NVIC_EnableIRQ>
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800af92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff ff40 	bl	800ae1c <__NVIC_DisableIRQ>
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e054      	b.n	800b060 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	7f5b      	ldrb	r3, [r3, #29]
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d105      	bne.n	800afcc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7f6 fa4a 	bl	8001460 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	791b      	ldrb	r3, [r3, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10c      	bne.n	800aff4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a22      	ldr	r2, [pc, #136]	; (800b068 <HAL_CRC_Init+0xc4>)
 800afe0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	689a      	ldr	r2, [r3, #8]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f022 0218 	bic.w	r2, r2, #24
 800aff0:	609a      	str	r2, [r3, #8]
 800aff2:	e00c      	b.n	800b00e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6899      	ldr	r1, [r3, #8]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	461a      	mov	r2, r3
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f834 	bl	800b06c <HAL_CRCEx_Polynomial_Set>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e028      	b.n	800b060 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	795b      	ldrb	r3, [r3, #5]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d105      	bne.n	800b022 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f04f 32ff 	mov.w	r2, #4294967295
 800b01e:	611a      	str	r2, [r3, #16]
 800b020:	e004      	b.n	800b02c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	6912      	ldr	r2, [r2, #16]
 800b02a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	695a      	ldr	r2, [r3, #20]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	699a      	ldr	r2, [r3, #24]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	430a      	orrs	r2, r1
 800b056:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	04c11db7 	.word	0x04c11db7

0800b06c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800b07c:	231f      	movs	r3, #31
 800b07e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b080:	bf00      	nop
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	1e5a      	subs	r2, r3, #1
 800b086:	613a      	str	r2, [r7, #16]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d009      	beq.n	800b0a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f003 031f 	and.w	r3, r3, #31
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	fa22 f303 	lsr.w	r3, r2, r3
 800b098:	f003 0301 	and.w	r3, r3, #1
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d0f0      	beq.n	800b082 <HAL_CRCEx_Polynomial_Set+0x16>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b18      	cmp	r3, #24
 800b0a4:	d846      	bhi.n	800b134 <HAL_CRCEx_Polynomial_Set+0xc8>
 800b0a6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <HAL_CRCEx_Polynomial_Set+0x40>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b13b 	.word	0x0800b13b
 800b0b0:	0800b135 	.word	0x0800b135
 800b0b4:	0800b135 	.word	0x0800b135
 800b0b8:	0800b135 	.word	0x0800b135
 800b0bc:	0800b135 	.word	0x0800b135
 800b0c0:	0800b135 	.word	0x0800b135
 800b0c4:	0800b135 	.word	0x0800b135
 800b0c8:	0800b135 	.word	0x0800b135
 800b0cc:	0800b129 	.word	0x0800b129
 800b0d0:	0800b135 	.word	0x0800b135
 800b0d4:	0800b135 	.word	0x0800b135
 800b0d8:	0800b135 	.word	0x0800b135
 800b0dc:	0800b135 	.word	0x0800b135
 800b0e0:	0800b135 	.word	0x0800b135
 800b0e4:	0800b135 	.word	0x0800b135
 800b0e8:	0800b135 	.word	0x0800b135
 800b0ec:	0800b11d 	.word	0x0800b11d
 800b0f0:	0800b135 	.word	0x0800b135
 800b0f4:	0800b135 	.word	0x0800b135
 800b0f8:	0800b135 	.word	0x0800b135
 800b0fc:	0800b135 	.word	0x0800b135
 800b100:	0800b135 	.word	0x0800b135
 800b104:	0800b135 	.word	0x0800b135
 800b108:	0800b135 	.word	0x0800b135
 800b10c:	0800b111 	.word	0x0800b111
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	2b06      	cmp	r3, #6
 800b114:	d913      	bls.n	800b13e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b11a:	e010      	b.n	800b13e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	2b07      	cmp	r3, #7
 800b120:	d90f      	bls.n	800b142 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b126:	e00c      	b.n	800b142 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	2b0f      	cmp	r3, #15
 800b12c:	d90b      	bls.n	800b146 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b132:	e008      	b.n	800b146 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	75fb      	strb	r3, [r7, #23]
      break;
 800b138:	e006      	b.n	800b148 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b13a:	bf00      	nop
 800b13c:	e004      	b.n	800b148 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b13e:	bf00      	nop
 800b140:	e002      	b.n	800b148 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b142:	bf00      	nop
 800b144:	e000      	b.n	800b148 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b146:	bf00      	nop
  }
  if (status == HAL_OK)
 800b148:	7dfb      	ldrb	r3, [r7, #23]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10d      	bne.n	800b16a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	f023 0118 	bic.w	r1, r3, #24
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	430a      	orrs	r2, r1
 800b168:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	371c      	adds	r7, #28
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b180:	2300      	movs	r3, #0
 800b182:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b184:	f7fe fec2 	bl	8009f0c <HAL_GetTick>
 800b188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	e099      	b.n	800b2c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 0201 	bic.w	r2, r2, #1
 800b1b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b1b4:	e00f      	b.n	800b1d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b1b6:	f7fe fea9 	bl	8009f0c <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	2b05      	cmp	r3, #5
 800b1c2:	d908      	bls.n	800b1d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2203      	movs	r2, #3
 800b1ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b1d2:	2303      	movs	r3, #3
 800b1d4:	e078      	b.n	800b2c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e8      	bne.n	800b1b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	4b38      	ldr	r3, [pc, #224]	; (800b2d0 <HAL_DMA_Init+0x158>)
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b202:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b20e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b21a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a1b      	ldr	r3, [r3, #32]
 800b220:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	4313      	orrs	r3, r2
 800b226:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	d107      	bne.n	800b240 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b238:	4313      	orrs	r3, r2
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f023 0307 	bic.w	r3, r3, #7
 800b256:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	4313      	orrs	r3, r2
 800b260:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b266:	2b04      	cmp	r3, #4
 800b268:	d117      	bne.n	800b29a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4313      	orrs	r3, r2
 800b272:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00e      	beq.n	800b29a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fa99 	bl	800b7b4 <DMA_CheckFifoParam>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d008      	beq.n	800b29a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2240      	movs	r2, #64	; 0x40
 800b28c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b296:	2301      	movs	r3, #1
 800b298:	e016      	b.n	800b2c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fa50 	bl	800b748 <DMA_CalcBaseAndBitshift>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2b0:	223f      	movs	r2, #63	; 0x3f
 800b2b2:	409a      	lsls	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	e010803f 	.word	0xe010803f

0800b2d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d101      	bne.n	800b2fa <HAL_DMA_Start_IT+0x26>
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	e048      	b.n	800b38c <HAL_DMA_Start_IT+0xb8>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d137      	bne.n	800b37e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2202      	movs	r2, #2
 800b312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	68b9      	ldr	r1, [r7, #8]
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f000 f9e2 	bl	800b6ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b32c:	223f      	movs	r2, #63	; 0x3f
 800b32e:	409a      	lsls	r2, r3
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f042 0216 	orr.w	r2, r2, #22
 800b342:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	695a      	ldr	r2, [r3, #20]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b352:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d007      	beq.n	800b36c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f042 0208 	orr.w	r2, r2, #8
 800b36a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f042 0201 	orr.w	r2, r2, #1
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	e005      	b.n	800b38a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b386:	2302      	movs	r3, #2
 800b388:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d004      	beq.n	800b3b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2280      	movs	r2, #128	; 0x80
 800b3ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e00c      	b.n	800b3cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2205      	movs	r2, #5
 800b3b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f022 0201 	bic.w	r2, r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b3e4:	4b92      	ldr	r3, [pc, #584]	; (800b630 <HAL_DMA_IRQHandler+0x258>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a92      	ldr	r2, [pc, #584]	; (800b634 <HAL_DMA_IRQHandler+0x25c>)
 800b3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ee:	0a9b      	lsrs	r3, r3, #10
 800b3f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b402:	2208      	movs	r2, #8
 800b404:	409a      	lsls	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	4013      	ands	r3, r2
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d01a      	beq.n	800b444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0304 	and.w	r3, r3, #4
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d013      	beq.n	800b444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f022 0204 	bic.w	r2, r2, #4
 800b42a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b430:	2208      	movs	r2, #8
 800b432:	409a      	lsls	r2, r3
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b43c:	f043 0201 	orr.w	r2, r3, #1
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b448:	2201      	movs	r2, #1
 800b44a:	409a      	lsls	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4013      	ands	r3, r2
 800b450:	2b00      	cmp	r3, #0
 800b452:	d012      	beq.n	800b47a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00b      	beq.n	800b47a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b466:	2201      	movs	r2, #1
 800b468:	409a      	lsls	r2, r3
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b472:	f043 0202 	orr.w	r2, r3, #2
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b47e:	2204      	movs	r2, #4
 800b480:	409a      	lsls	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	4013      	ands	r3, r2
 800b486:	2b00      	cmp	r3, #0
 800b488:	d012      	beq.n	800b4b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 0302 	and.w	r3, r3, #2
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00b      	beq.n	800b4b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b49c:	2204      	movs	r2, #4
 800b49e:	409a      	lsls	r2, r3
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a8:	f043 0204 	orr.w	r2, r3, #4
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4b4:	2210      	movs	r2, #16
 800b4b6:	409a      	lsls	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d043      	beq.n	800b548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f003 0308 	and.w	r3, r3, #8
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d03c      	beq.n	800b548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4d2:	2210      	movs	r2, #16
 800b4d4:	409a      	lsls	r2, r3
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d018      	beq.n	800b51a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d108      	bne.n	800b508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d024      	beq.n	800b548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	4798      	blx	r3
 800b506:	e01f      	b.n	800b548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d01b      	beq.n	800b548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	4798      	blx	r3
 800b518:	e016      	b.n	800b548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b524:	2b00      	cmp	r3, #0
 800b526:	d107      	bne.n	800b538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f022 0208 	bic.w	r2, r2, #8
 800b536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d003      	beq.n	800b548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b54c:	2220      	movs	r2, #32
 800b54e:	409a      	lsls	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4013      	ands	r3, r2
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 808e 	beq.w	800b676 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0310 	and.w	r3, r3, #16
 800b564:	2b00      	cmp	r3, #0
 800b566:	f000 8086 	beq.w	800b676 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b56e:	2220      	movs	r2, #32
 800b570:	409a      	lsls	r2, r3
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b05      	cmp	r3, #5
 800b580:	d136      	bne.n	800b5f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f022 0216 	bic.w	r2, r2, #22
 800b590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	695a      	ldr	r2, [r3, #20]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d103      	bne.n	800b5b2 <HAL_DMA_IRQHandler+0x1da>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d007      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f022 0208 	bic.w	r2, r2, #8
 800b5c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5c6:	223f      	movs	r2, #63	; 0x3f
 800b5c8:	409a      	lsls	r2, r3
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d07d      	beq.n	800b6e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	4798      	blx	r3
        }
        return;
 800b5ee:	e078      	b.n	800b6e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d01c      	beq.n	800b638 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d108      	bne.n	800b61e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b610:	2b00      	cmp	r3, #0
 800b612:	d030      	beq.n	800b676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	4798      	blx	r3
 800b61c:	e02b      	b.n	800b676 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b622:	2b00      	cmp	r3, #0
 800b624:	d027      	beq.n	800b676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	4798      	blx	r3
 800b62e:	e022      	b.n	800b676 <HAL_DMA_IRQHandler+0x29e>
 800b630:	2000000c 	.word	0x2000000c
 800b634:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10f      	bne.n	800b666 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f022 0210 	bic.w	r2, r2, #16
 800b654:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d003      	beq.n	800b676 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d032      	beq.n	800b6e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d022      	beq.n	800b6d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2205      	movs	r2, #5
 800b68e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 0201 	bic.w	r2, r2, #1
 800b6a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	60bb      	str	r3, [r7, #8]
 800b6a8:	697a      	ldr	r2, [r7, #20]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d307      	bcc.n	800b6be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1f2      	bne.n	800b6a2 <HAL_DMA_IRQHandler+0x2ca>
 800b6bc:	e000      	b.n	800b6c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b6be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d005      	beq.n	800b6e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	4798      	blx	r3
 800b6e0:	e000      	b.n	800b6e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800b6e2:	bf00      	nop
    }
  }
}
 800b6e4:	3718      	adds	r7, #24
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop

0800b6ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	2b40      	cmp	r3, #64	; 0x40
 800b718:	d108      	bne.n	800b72c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68ba      	ldr	r2, [r7, #8]
 800b728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b72a:	e007      	b.n	800b73c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	60da      	str	r2, [r3, #12]
}
 800b73c:	bf00      	nop
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	b2db      	uxtb	r3, r3
 800b756:	3b10      	subs	r3, #16
 800b758:	4a13      	ldr	r2, [pc, #76]	; (800b7a8 <DMA_CalcBaseAndBitshift+0x60>)
 800b75a:	fba2 2303 	umull	r2, r3, r2, r3
 800b75e:	091b      	lsrs	r3, r3, #4
 800b760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b762:	4a12      	ldr	r2, [pc, #72]	; (800b7ac <DMA_CalcBaseAndBitshift+0x64>)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4413      	add	r3, r2
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b03      	cmp	r3, #3
 800b774:	d908      	bls.n	800b788 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <DMA_CalcBaseAndBitshift+0x68>)
 800b77e:	4013      	ands	r3, r2
 800b780:	1d1a      	adds	r2, r3, #4
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	659a      	str	r2, [r3, #88]	; 0x58
 800b786:	e006      	b.n	800b796 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	461a      	mov	r2, r3
 800b78e:	4b08      	ldr	r3, [pc, #32]	; (800b7b0 <DMA_CalcBaseAndBitshift+0x68>)
 800b790:	4013      	ands	r3, r2
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	aaaaaaab 	.word	0xaaaaaaab
 800b7ac:	08027ee8 	.word	0x08027ee8
 800b7b0:	fffffc00 	.word	0xfffffc00

0800b7b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d11f      	bne.n	800b80e <DMA_CheckFifoParam+0x5a>
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2b03      	cmp	r3, #3
 800b7d2:	d856      	bhi.n	800b882 <DMA_CheckFifoParam+0xce>
 800b7d4:	a201      	add	r2, pc, #4	; (adr r2, 800b7dc <DMA_CheckFifoParam+0x28>)
 800b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b7ed 	.word	0x0800b7ed
 800b7e0:	0800b7ff 	.word	0x0800b7ff
 800b7e4:	0800b7ed 	.word	0x0800b7ed
 800b7e8:	0800b883 	.word	0x0800b883
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d046      	beq.n	800b886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7fc:	e043      	b.n	800b886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b806:	d140      	bne.n	800b88a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b80c:	e03d      	b.n	800b88a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b816:	d121      	bne.n	800b85c <DMA_CheckFifoParam+0xa8>
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d837      	bhi.n	800b88e <DMA_CheckFifoParam+0xda>
 800b81e:	a201      	add	r2, pc, #4	; (adr r2, 800b824 <DMA_CheckFifoParam+0x70>)
 800b820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b824:	0800b835 	.word	0x0800b835
 800b828:	0800b83b 	.word	0x0800b83b
 800b82c:	0800b835 	.word	0x0800b835
 800b830:	0800b84d 	.word	0x0800b84d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	73fb      	strb	r3, [r7, #15]
      break;
 800b838:	e030      	b.n	800b89c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b842:	2b00      	cmp	r3, #0
 800b844:	d025      	beq.n	800b892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b84a:	e022      	b.n	800b892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b854:	d11f      	bne.n	800b896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b85a:	e01c      	b.n	800b896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d903      	bls.n	800b86a <DMA_CheckFifoParam+0xb6>
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	2b03      	cmp	r3, #3
 800b866:	d003      	beq.n	800b870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b868:	e018      	b.n	800b89c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	73fb      	strb	r3, [r7, #15]
      break;
 800b86e:	e015      	b.n	800b89c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00e      	beq.n	800b89a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	73fb      	strb	r3, [r7, #15]
      break;
 800b880:	e00b      	b.n	800b89a <DMA_CheckFifoParam+0xe6>
      break;
 800b882:	bf00      	nop
 800b884:	e00a      	b.n	800b89c <DMA_CheckFifoParam+0xe8>
      break;
 800b886:	bf00      	nop
 800b888:	e008      	b.n	800b89c <DMA_CheckFifoParam+0xe8>
      break;
 800b88a:	bf00      	nop
 800b88c:	e006      	b.n	800b89c <DMA_CheckFifoParam+0xe8>
      break;
 800b88e:	bf00      	nop
 800b890:	e004      	b.n	800b89c <DMA_CheckFifoParam+0xe8>
      break;
 800b892:	bf00      	nop
 800b894:	e002      	b.n	800b89c <DMA_CheckFifoParam+0xe8>
      break;   
 800b896:	bf00      	nop
 800b898:	e000      	b.n	800b89c <DMA_CheckFifoParam+0xe8>
      break;
 800b89a:	bf00      	nop
    }
  } 
  
  return status; 
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop

0800b8ac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e049      	b.n	800b952 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d106      	bne.n	800b8d8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7f5 fe42 	bl	800155c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8fc:	f023 0107 	bic.w	r1, r3, #7
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	689a      	ldr	r2, [r3, #8]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	430a      	orrs	r2, r1
 800b90a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b912:	4b12      	ldr	r3, [pc, #72]	; (800b95c <HAL_DMA2D_Init+0xb0>)
 800b914:	4013      	ands	r3, r2
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	68d1      	ldr	r1, [r2, #12]
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	6812      	ldr	r2, [r2, #0]
 800b91e:	430b      	orrs	r3, r1
 800b920:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b928:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	051a      	lsls	r2, r3, #20
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	055b      	lsls	r3, r3, #21
 800b938:	431a      	orrs	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	430a      	orrs	r2, r1
 800b940:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	ffffc000 	.word	0xffffc000

0800b960 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d026      	beq.n	800b9d0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d021      	beq.n	800b9d0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b99a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a0:	f043 0201 	orr.w	r2, r3, #1
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2204      	movs	r2, #4
 800b9b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	69db      	ldr	r3, [r3, #28]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f003 0320 	and.w	r3, r3, #32
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d026      	beq.n	800ba28 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d021      	beq.n	800ba28 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9f2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba00:	f043 0202 	orr.w	r2, r3, #2
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2204      	movs	r2, #4
 800ba0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	69db      	ldr	r3, [r3, #28]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	69db      	ldr	r3, [r3, #28]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f003 0308 	and.w	r3, r3, #8
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d026      	beq.n	800ba80 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d021      	beq.n	800ba80 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba4a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2208      	movs	r2, #8
 800ba52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba58:	f043 0204 	orr.w	r2, r3, #4
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2204      	movs	r2, #4
 800ba64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	69db      	ldr	r3, [r3, #28]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d003      	beq.n	800ba80 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	69db      	ldr	r3, [r3, #28]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f003 0304 	and.w	r3, r3, #4
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d013      	beq.n	800bab2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00e      	beq.n	800bab2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baa2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2204      	movs	r2, #4
 800baaa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 f853 	bl	800bb58 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f003 0302 	and.w	r3, r3, #2
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d024      	beq.n	800bb06 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d01f      	beq.n	800bb06 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bad4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2202      	movs	r2, #2
 800badc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d003      	beq.n	800bb06 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f003 0310 	and.w	r3, r3, #16
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d01f      	beq.n	800bb50 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d01a      	beq.n	800bb50 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bb28:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2210      	movs	r2, #16
 800bb30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f80e 	bl	800bb6c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800bb50:	bf00      	nop
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b087      	sub	sp, #28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d101      	bne.n	800bba0 <HAL_DMA2D_ConfigLayer+0x20>
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	e084      	b.n	800bcaa <HAL_DMA2D_ConfigLayer+0x12a>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2202      	movs	r2, #2
 800bbac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	4413      	add	r3, r2
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	3320      	adds	r3, #32
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	041b      	lsls	r3, r3, #16
 800bbcc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800bbd4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800bbe0:	4b35      	ldr	r3, [pc, #212]	; (800bcb8 <HAL_DMA2D_ConfigLayer+0x138>)
 800bbe2:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	2b0a      	cmp	r3, #10
 800bbea:	d003      	beq.n	800bbf4 <HAL_DMA2D_ConfigLayer+0x74>
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	2b09      	cmp	r3, #9
 800bbf2:	d107      	bne.n	800bc04 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	617b      	str	r3, [r7, #20]
 800bc02:	e005      	b.n	800bc10 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	061b      	lsls	r3, r3, #24
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d120      	bne.n	800bc58 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	43db      	mvns	r3, r3
 800bc20:	ea02 0103 	and.w	r1, r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	6812      	ldr	r2, [r2, #0]
 800bc36:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	2b0a      	cmp	r3, #10
 800bc3e:	d003      	beq.n	800bc48 <HAL_DMA2D_ConfigLayer+0xc8>
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	2b09      	cmp	r3, #9
 800bc46:	d127      	bne.n	800bc98 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	68da      	ldr	r2, [r3, #12]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800bc54:	629a      	str	r2, [r3, #40]	; 0x28
 800bc56:	e01f      	b.n	800bc98 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	69da      	ldr	r2, [r3, #28]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	43db      	mvns	r3, r3
 800bc62:	ea02 0103 	and.w	r1, r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	430a      	orrs	r2, r1
 800bc6e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	6812      	ldr	r2, [r2, #0]
 800bc78:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	2b0a      	cmp	r3, #10
 800bc80:	d003      	beq.n	800bc8a <HAL_DMA2D_ConfigLayer+0x10a>
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	2b09      	cmp	r3, #9
 800bc88:	d106      	bne.n	800bc98 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	68da      	ldr	r2, [r3, #12]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800bc96:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	371c      	adds	r7, #28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	ff33000f 	.word	0xff33000f

0800bcbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b089      	sub	sp, #36	; 0x24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800bcca:	2300      	movs	r3, #0
 800bccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	61fb      	str	r3, [r7, #28]
 800bcda:	e175      	b.n	800bfc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800bcdc:	2201      	movs	r2, #1
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	fa02 f303 	lsl.w	r3, r2, r3
 800bce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	4013      	ands	r3, r2
 800bcee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	f040 8164 	bne.w	800bfc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d00b      	beq.n	800bd1a <HAL_GPIO_Init+0x5e>
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d007      	beq.n	800bd1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bd0e:	2b11      	cmp	r3, #17
 800bd10:	d003      	beq.n	800bd1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	2b12      	cmp	r3, #18
 800bd18:	d130      	bne.n	800bd7c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	005b      	lsls	r3, r3, #1
 800bd24:	2203      	movs	r2, #3
 800bd26:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2a:	43db      	mvns	r3, r3
 800bd2c:	69ba      	ldr	r2, [r7, #24]
 800bd2e:	4013      	ands	r3, r2
 800bd30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	68da      	ldr	r2, [r3, #12]
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	005b      	lsls	r3, r3, #1
 800bd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3e:	69ba      	ldr	r2, [r7, #24]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	69ba      	ldr	r2, [r7, #24]
 800bd48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd50:	2201      	movs	r2, #1
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	fa02 f303 	lsl.w	r3, r2, r3
 800bd58:	43db      	mvns	r3, r3
 800bd5a:	69ba      	ldr	r2, [r7, #24]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	091b      	lsrs	r3, r3, #4
 800bd66:	f003 0201 	and.w	r2, r3, #1
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	69ba      	ldr	r2, [r7, #24]
 800bd7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	2203      	movs	r2, #3
 800bd88:	fa02 f303 	lsl.w	r3, r2, r3
 800bd8c:	43db      	mvns	r3, r3
 800bd8e:	69ba      	ldr	r2, [r7, #24]
 800bd90:	4013      	ands	r3, r2
 800bd92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	689a      	ldr	r2, [r3, #8]
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bda0:	69ba      	ldr	r2, [r7, #24]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	69ba      	ldr	r2, [r7, #24]
 800bdaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d003      	beq.n	800bdbc <HAL_GPIO_Init+0x100>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	2b12      	cmp	r3, #18
 800bdba:	d123      	bne.n	800be04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	08da      	lsrs	r2, r3, #3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	3208      	adds	r2, #8
 800bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	f003 0307 	and.w	r3, r3, #7
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	220f      	movs	r2, #15
 800bdd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd8:	43db      	mvns	r3, r3
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	4013      	ands	r3, r2
 800bdde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	691a      	ldr	r2, [r3, #16]
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	f003 0307 	and.w	r3, r3, #7
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	08da      	lsrs	r2, r3, #3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	3208      	adds	r2, #8
 800bdfe:	69b9      	ldr	r1, [r7, #24]
 800be00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	2203      	movs	r2, #3
 800be10:	fa02 f303 	lsl.w	r3, r2, r3
 800be14:	43db      	mvns	r3, r3
 800be16:	69ba      	ldr	r2, [r7, #24]
 800be18:	4013      	ands	r3, r2
 800be1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	f003 0203 	and.w	r2, r3, #3
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	fa02 f303 	lsl.w	r3, r2, r3
 800be2c:	69ba      	ldr	r2, [r7, #24]
 800be2e:	4313      	orrs	r3, r2
 800be30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	69ba      	ldr	r2, [r7, #24]
 800be36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 80be 	beq.w	800bfc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be46:	4b66      	ldr	r3, [pc, #408]	; (800bfe0 <HAL_GPIO_Init+0x324>)
 800be48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be4a:	4a65      	ldr	r2, [pc, #404]	; (800bfe0 <HAL_GPIO_Init+0x324>)
 800be4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be50:	6453      	str	r3, [r2, #68]	; 0x44
 800be52:	4b63      	ldr	r3, [pc, #396]	; (800bfe0 <HAL_GPIO_Init+0x324>)
 800be54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800be5e:	4a61      	ldr	r2, [pc, #388]	; (800bfe4 <HAL_GPIO_Init+0x328>)
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	089b      	lsrs	r3, r3, #2
 800be64:	3302      	adds	r3, #2
 800be66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	f003 0303 	and.w	r3, r3, #3
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	220f      	movs	r2, #15
 800be76:	fa02 f303 	lsl.w	r3, r2, r3
 800be7a:	43db      	mvns	r3, r3
 800be7c:	69ba      	ldr	r2, [r7, #24]
 800be7e:	4013      	ands	r3, r2
 800be80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a58      	ldr	r2, [pc, #352]	; (800bfe8 <HAL_GPIO_Init+0x32c>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d037      	beq.n	800befa <HAL_GPIO_Init+0x23e>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a57      	ldr	r2, [pc, #348]	; (800bfec <HAL_GPIO_Init+0x330>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d031      	beq.n	800bef6 <HAL_GPIO_Init+0x23a>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a56      	ldr	r2, [pc, #344]	; (800bff0 <HAL_GPIO_Init+0x334>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d02b      	beq.n	800bef2 <HAL_GPIO_Init+0x236>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a55      	ldr	r2, [pc, #340]	; (800bff4 <HAL_GPIO_Init+0x338>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d025      	beq.n	800beee <HAL_GPIO_Init+0x232>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a54      	ldr	r2, [pc, #336]	; (800bff8 <HAL_GPIO_Init+0x33c>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d01f      	beq.n	800beea <HAL_GPIO_Init+0x22e>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a53      	ldr	r2, [pc, #332]	; (800bffc <HAL_GPIO_Init+0x340>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d019      	beq.n	800bee6 <HAL_GPIO_Init+0x22a>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a52      	ldr	r2, [pc, #328]	; (800c000 <HAL_GPIO_Init+0x344>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d013      	beq.n	800bee2 <HAL_GPIO_Init+0x226>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a51      	ldr	r2, [pc, #324]	; (800c004 <HAL_GPIO_Init+0x348>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d00d      	beq.n	800bede <HAL_GPIO_Init+0x222>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a50      	ldr	r2, [pc, #320]	; (800c008 <HAL_GPIO_Init+0x34c>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d007      	beq.n	800beda <HAL_GPIO_Init+0x21e>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a4f      	ldr	r2, [pc, #316]	; (800c00c <HAL_GPIO_Init+0x350>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d101      	bne.n	800bed6 <HAL_GPIO_Init+0x21a>
 800bed2:	2309      	movs	r3, #9
 800bed4:	e012      	b.n	800befc <HAL_GPIO_Init+0x240>
 800bed6:	230a      	movs	r3, #10
 800bed8:	e010      	b.n	800befc <HAL_GPIO_Init+0x240>
 800beda:	2308      	movs	r3, #8
 800bedc:	e00e      	b.n	800befc <HAL_GPIO_Init+0x240>
 800bede:	2307      	movs	r3, #7
 800bee0:	e00c      	b.n	800befc <HAL_GPIO_Init+0x240>
 800bee2:	2306      	movs	r3, #6
 800bee4:	e00a      	b.n	800befc <HAL_GPIO_Init+0x240>
 800bee6:	2305      	movs	r3, #5
 800bee8:	e008      	b.n	800befc <HAL_GPIO_Init+0x240>
 800beea:	2304      	movs	r3, #4
 800beec:	e006      	b.n	800befc <HAL_GPIO_Init+0x240>
 800beee:	2303      	movs	r3, #3
 800bef0:	e004      	b.n	800befc <HAL_GPIO_Init+0x240>
 800bef2:	2302      	movs	r3, #2
 800bef4:	e002      	b.n	800befc <HAL_GPIO_Init+0x240>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <HAL_GPIO_Init+0x240>
 800befa:	2300      	movs	r3, #0
 800befc:	69fa      	ldr	r2, [r7, #28]
 800befe:	f002 0203 	and.w	r2, r2, #3
 800bf02:	0092      	lsls	r2, r2, #2
 800bf04:	4093      	lsls	r3, r2
 800bf06:	69ba      	ldr	r2, [r7, #24]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800bf0c:	4935      	ldr	r1, [pc, #212]	; (800bfe4 <HAL_GPIO_Init+0x328>)
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	089b      	lsrs	r3, r3, #2
 800bf12:	3302      	adds	r3, #2
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bf1a:	4b3d      	ldr	r3, [pc, #244]	; (800c010 <HAL_GPIO_Init+0x354>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	43db      	mvns	r3, r3
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	4013      	ands	r3, r2
 800bf28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bf3e:	4a34      	ldr	r2, [pc, #208]	; (800c010 <HAL_GPIO_Init+0x354>)
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bf44:	4b32      	ldr	r3, [pc, #200]	; (800c010 <HAL_GPIO_Init+0x354>)
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	43db      	mvns	r3, r3
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	4013      	ands	r3, r2
 800bf52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf68:	4a29      	ldr	r2, [pc, #164]	; (800c010 <HAL_GPIO_Init+0x354>)
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bf6e:	4b28      	ldr	r3, [pc, #160]	; (800c010 <HAL_GPIO_Init+0x354>)
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	43db      	mvns	r3, r3
 800bf78:	69ba      	ldr	r2, [r7, #24]
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d003      	beq.n	800bf92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bf92:	4a1f      	ldr	r2, [pc, #124]	; (800c010 <HAL_GPIO_Init+0x354>)
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bf98:	4b1d      	ldr	r3, [pc, #116]	; (800c010 <HAL_GPIO_Init+0x354>)
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	43db      	mvns	r3, r3
 800bfa2:	69ba      	ldr	r2, [r7, #24]
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d003      	beq.n	800bfbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bfb4:	69ba      	ldr	r2, [r7, #24]
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bfbc:	4a14      	ldr	r2, [pc, #80]	; (800c010 <HAL_GPIO_Init+0x354>)
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	61fb      	str	r3, [r7, #28]
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	2b0f      	cmp	r3, #15
 800bfcc:	f67f ae86 	bls.w	800bcdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	3724      	adds	r7, #36	; 0x24
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	40023800 	.word	0x40023800
 800bfe4:	40013800 	.word	0x40013800
 800bfe8:	40020000 	.word	0x40020000
 800bfec:	40020400 	.word	0x40020400
 800bff0:	40020800 	.word	0x40020800
 800bff4:	40020c00 	.word	0x40020c00
 800bff8:	40021000 	.word	0x40021000
 800bffc:	40021400 	.word	0x40021400
 800c000:	40021800 	.word	0x40021800
 800c004:	40021c00 	.word	0x40021c00
 800c008:	40022000 	.word	0x40022000
 800c00c:	40022400 	.word	0x40022400
 800c010:	40013c00 	.word	0x40013c00

0800c014 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c014:	b480      	push	{r7}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800c01e:	2300      	movs	r3, #0
 800c020:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800c022:	2300      	movs	r3, #0
 800c024:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800c026:	2300      	movs	r3, #0
 800c028:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
 800c02e:	e0d9      	b.n	800c1e4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c030:	2201      	movs	r2, #1
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	fa02 f303 	lsl.w	r3, r2, r3
 800c038:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	4013      	ands	r3, r2
 800c040:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	429a      	cmp	r2, r3
 800c048:	f040 80c9 	bne.w	800c1de <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800c04c:	4a6b      	ldr	r2, [pc, #428]	; (800c1fc <HAL_GPIO_DeInit+0x1e8>)
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	089b      	lsrs	r3, r3, #2
 800c052:	3302      	adds	r3, #2
 800c054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c058:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	f003 0303 	and.w	r3, r3, #3
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	220f      	movs	r2, #15
 800c064:	fa02 f303 	lsl.w	r3, r2, r3
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	4013      	ands	r3, r2
 800c06c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a63      	ldr	r2, [pc, #396]	; (800c200 <HAL_GPIO_DeInit+0x1ec>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d037      	beq.n	800c0e6 <HAL_GPIO_DeInit+0xd2>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a62      	ldr	r2, [pc, #392]	; (800c204 <HAL_GPIO_DeInit+0x1f0>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d031      	beq.n	800c0e2 <HAL_GPIO_DeInit+0xce>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a61      	ldr	r2, [pc, #388]	; (800c208 <HAL_GPIO_DeInit+0x1f4>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d02b      	beq.n	800c0de <HAL_GPIO_DeInit+0xca>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a60      	ldr	r2, [pc, #384]	; (800c20c <HAL_GPIO_DeInit+0x1f8>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d025      	beq.n	800c0da <HAL_GPIO_DeInit+0xc6>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a5f      	ldr	r2, [pc, #380]	; (800c210 <HAL_GPIO_DeInit+0x1fc>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d01f      	beq.n	800c0d6 <HAL_GPIO_DeInit+0xc2>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a5e      	ldr	r2, [pc, #376]	; (800c214 <HAL_GPIO_DeInit+0x200>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d019      	beq.n	800c0d2 <HAL_GPIO_DeInit+0xbe>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a5d      	ldr	r2, [pc, #372]	; (800c218 <HAL_GPIO_DeInit+0x204>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d013      	beq.n	800c0ce <HAL_GPIO_DeInit+0xba>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a5c      	ldr	r2, [pc, #368]	; (800c21c <HAL_GPIO_DeInit+0x208>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d00d      	beq.n	800c0ca <HAL_GPIO_DeInit+0xb6>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a5b      	ldr	r2, [pc, #364]	; (800c220 <HAL_GPIO_DeInit+0x20c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d007      	beq.n	800c0c6 <HAL_GPIO_DeInit+0xb2>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a5a      	ldr	r2, [pc, #360]	; (800c224 <HAL_GPIO_DeInit+0x210>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d101      	bne.n	800c0c2 <HAL_GPIO_DeInit+0xae>
 800c0be:	2309      	movs	r3, #9
 800c0c0:	e012      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0c2:	230a      	movs	r3, #10
 800c0c4:	e010      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0c6:	2308      	movs	r3, #8
 800c0c8:	e00e      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0ca:	2307      	movs	r3, #7
 800c0cc:	e00c      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0ce:	2306      	movs	r3, #6
 800c0d0:	e00a      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0d2:	2305      	movs	r3, #5
 800c0d4:	e008      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0d6:	2304      	movs	r3, #4
 800c0d8:	e006      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e004      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0de:	2302      	movs	r3, #2
 800c0e0:	e002      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e000      	b.n	800c0e8 <HAL_GPIO_DeInit+0xd4>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	f002 0203 	and.w	r2, r2, #3
 800c0ee:	0092      	lsls	r2, r2, #2
 800c0f0:	4093      	lsls	r3, r2
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d132      	bne.n	800c15e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c0f8:	4b4b      	ldr	r3, [pc, #300]	; (800c228 <HAL_GPIO_DeInit+0x214>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	43db      	mvns	r3, r3
 800c100:	4949      	ldr	r1, [pc, #292]	; (800c228 <HAL_GPIO_DeInit+0x214>)
 800c102:	4013      	ands	r3, r2
 800c104:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c106:	4b48      	ldr	r3, [pc, #288]	; (800c228 <HAL_GPIO_DeInit+0x214>)
 800c108:	685a      	ldr	r2, [r3, #4]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	43db      	mvns	r3, r3
 800c10e:	4946      	ldr	r1, [pc, #280]	; (800c228 <HAL_GPIO_DeInit+0x214>)
 800c110:	4013      	ands	r3, r2
 800c112:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c114:	4b44      	ldr	r3, [pc, #272]	; (800c228 <HAL_GPIO_DeInit+0x214>)
 800c116:	689a      	ldr	r2, [r3, #8]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	43db      	mvns	r3, r3
 800c11c:	4942      	ldr	r1, [pc, #264]	; (800c228 <HAL_GPIO_DeInit+0x214>)
 800c11e:	4013      	ands	r3, r2
 800c120:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c122:	4b41      	ldr	r3, [pc, #260]	; (800c228 <HAL_GPIO_DeInit+0x214>)
 800c124:	68da      	ldr	r2, [r3, #12]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	43db      	mvns	r3, r3
 800c12a:	493f      	ldr	r1, [pc, #252]	; (800c228 <HAL_GPIO_DeInit+0x214>)
 800c12c:	4013      	ands	r3, r2
 800c12e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	f003 0303 	and.w	r3, r3, #3
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	220f      	movs	r2, #15
 800c13a:	fa02 f303 	lsl.w	r3, r2, r3
 800c13e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800c140:	4a2e      	ldr	r2, [pc, #184]	; (800c1fc <HAL_GPIO_DeInit+0x1e8>)
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	089b      	lsrs	r3, r3, #2
 800c146:	3302      	adds	r3, #2
 800c148:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	43da      	mvns	r2, r3
 800c150:	482a      	ldr	r0, [pc, #168]	; (800c1fc <HAL_GPIO_DeInit+0x1e8>)
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	089b      	lsrs	r3, r3, #2
 800c156:	400a      	ands	r2, r1
 800c158:	3302      	adds	r3, #2
 800c15a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	2103      	movs	r1, #3
 800c168:	fa01 f303 	lsl.w	r3, r1, r3
 800c16c:	43db      	mvns	r3, r3
 800c16e:	401a      	ands	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	08da      	lsrs	r2, r3, #3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3208      	adds	r2, #8
 800c17c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	f003 0307 	and.w	r3, r3, #7
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	220f      	movs	r2, #15
 800c18a:	fa02 f303 	lsl.w	r3, r2, r3
 800c18e:	43db      	mvns	r3, r3
 800c190:	697a      	ldr	r2, [r7, #20]
 800c192:	08d2      	lsrs	r2, r2, #3
 800c194:	4019      	ands	r1, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	3208      	adds	r2, #8
 800c19a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	68da      	ldr	r2, [r3, #12]
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	2103      	movs	r1, #3
 800c1a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ac:	43db      	mvns	r3, r3
 800c1ae:	401a      	ands	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c1c0:	43db      	mvns	r3, r3
 800c1c2:	401a      	ands	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	689a      	ldr	r2, [r3, #8]
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	005b      	lsls	r3, r3, #1
 800c1d0:	2103      	movs	r1, #3
 800c1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d6:	43db      	mvns	r3, r3
 800c1d8:	401a      	ands	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	2b0f      	cmp	r3, #15
 800c1e8:	f67f af22 	bls.w	800c030 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c1ec:	bf00      	nop
 800c1ee:	bf00      	nop
 800c1f0:	371c      	adds	r7, #28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	40013800 	.word	0x40013800
 800c200:	40020000 	.word	0x40020000
 800c204:	40020400 	.word	0x40020400
 800c208:	40020800 	.word	0x40020800
 800c20c:	40020c00 	.word	0x40020c00
 800c210:	40021000 	.word	0x40021000
 800c214:	40021400 	.word	0x40021400
 800c218:	40021800 	.word	0x40021800
 800c21c:	40021c00 	.word	0x40021c00
 800c220:	40022000 	.word	0x40022000
 800c224:	40022400 	.word	0x40022400
 800c228:	40013c00 	.word	0x40013c00

0800c22c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	807b      	strh	r3, [r7, #2]
 800c238:	4613      	mov	r3, r2
 800c23a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c23c:	787b      	ldrb	r3, [r7, #1]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c242:	887a      	ldrh	r2, [r7, #2]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c248:	e003      	b.n	800c252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c24a:	887b      	ldrh	r3, [r7, #2]
 800c24c:	041a      	lsls	r2, r3, #16
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	619a      	str	r2, [r3, #24]
}
 800c252:	bf00      	nop
 800c254:	370c      	adds	r7, #12
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
	...

0800c260 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e0bf      	b.n	800c3f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d106      	bne.n	800c28c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7f5 fc80 	bl	8001b8c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2202      	movs	r2, #2
 800c290:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	699a      	ldr	r2, [r3, #24]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c2a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6999      	ldr	r1, [r3, #24]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685a      	ldr	r2, [r3, #4]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c2b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	430a      	orrs	r2, r1
 800c2c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	6899      	ldr	r1, [r3, #8]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	4b4a      	ldr	r3, [pc, #296]	; (800c3fc <HAL_LTDC_Init+0x19c>)
 800c2d4:	400b      	ands	r3, r1
 800c2d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	041b      	lsls	r3, r3, #16
 800c2de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6899      	ldr	r1, [r3, #8]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	699a      	ldr	r2, [r3, #24]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	431a      	orrs	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68d9      	ldr	r1, [r3, #12]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	4b3e      	ldr	r3, [pc, #248]	; (800c3fc <HAL_LTDC_Init+0x19c>)
 800c302:	400b      	ands	r3, r1
 800c304:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	041b      	lsls	r3, r3, #16
 800c30c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68d9      	ldr	r1, [r3, #12]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a1a      	ldr	r2, [r3, #32]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	431a      	orrs	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	430a      	orrs	r2, r1
 800c322:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	6919      	ldr	r1, [r3, #16]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	4b33      	ldr	r3, [pc, #204]	; (800c3fc <HAL_LTDC_Init+0x19c>)
 800c330:	400b      	ands	r3, r1
 800c332:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c338:	041b      	lsls	r3, r3, #16
 800c33a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6919      	ldr	r1, [r3, #16]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	431a      	orrs	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6959      	ldr	r1, [r3, #20]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	4b27      	ldr	r3, [pc, #156]	; (800c3fc <HAL_LTDC_Init+0x19c>)
 800c35e:	400b      	ands	r3, r1
 800c360:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c366:	041b      	lsls	r3, r3, #16
 800c368:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6959      	ldr	r1, [r3, #20]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	431a      	orrs	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c386:	021b      	lsls	r3, r3, #8
 800c388:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c390:	041b      	lsls	r3, r3, #16
 800c392:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c3a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c3b6:	431a      	orrs	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	430a      	orrs	r2, r1
 800c3be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f042 0206 	orr.w	r2, r2, #6
 800c3ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	699a      	ldr	r2, [r3, #24]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f042 0201 	orr.w	r2, r2, #1
 800c3de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	f000f800 	.word	0xf000f800

0800c400 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c416:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f003 0304 	and.w	r3, r3, #4
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d023      	beq.n	800c46a <HAL_LTDC_IRQHandler+0x6a>
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01e      	beq.n	800c46a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f022 0204 	bic.w	r2, r2, #4
 800c43a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2204      	movs	r2, #4
 800c442:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c44a:	f043 0201 	orr.w	r2, r3, #1
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2204      	movs	r2, #4
 800c458:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f86f 	bl	800c548 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f003 0302 	and.w	r3, r3, #2
 800c470:	2b00      	cmp	r3, #0
 800c472:	d023      	beq.n	800c4bc <HAL_LTDC_IRQHandler+0xbc>
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d01e      	beq.n	800c4bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f022 0202 	bic.w	r2, r2, #2
 800c48c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2202      	movs	r2, #2
 800c494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c49c:	f043 0202 	orr.w	r2, r3, #2
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2204      	movs	r2, #4
 800c4aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f846 	bl	800c548 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d01b      	beq.n	800c4fe <HAL_LTDC_IRQHandler+0xfe>
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	f003 0301 	and.w	r3, r3, #1
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d016      	beq.n	800c4fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f022 0201 	bic.w	r2, r2, #1
 800c4de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7f8 fc1f 	bl	8004d3c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f003 0308 	and.w	r3, r3, #8
 800c504:	2b00      	cmp	r3, #0
 800c506:	d01b      	beq.n	800c540 <HAL_LTDC_IRQHandler+0x140>
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	f003 0308 	and.w	r3, r3, #8
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d016      	beq.n	800c540 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f022 0208 	bic.w	r2, r2, #8
 800c520:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2208      	movs	r2, #8
 800c528:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 f80e 	bl	800c55c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c540:	bf00      	nop
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c570:	b5b0      	push	{r4, r5, r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c582:	2b01      	cmp	r3, #1
 800c584:	d101      	bne.n	800c58a <HAL_LTDC_ConfigLayer+0x1a>
 800c586:	2302      	movs	r3, #2
 800c588:	e02c      	b.n	800c5e4 <HAL_LTDC_ConfigLayer+0x74>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2202      	movs	r2, #2
 800c596:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2134      	movs	r1, #52	; 0x34
 800c5a0:	fb01 f303 	mul.w	r3, r1, r3
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	461d      	mov	r5, r3
 800c5b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5bc:	682b      	ldr	r3, [r5, #0]
 800c5be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f000 f849 	bl	800c65c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bdb0      	pop	{r4, r5, r7, pc}

0800c5ec <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d101      	bne.n	800c604 <HAL_LTDC_ProgramLineEvent+0x18>
 800c600:	2302      	movs	r3, #2
 800c602:	e023      	b.n	800c64c <HAL_LTDC_ProgramLineEvent+0x60>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2202      	movs	r2, #2
 800c610:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f022 0201 	bic.w	r2, r2, #1
 800c622:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800c624:	4a0c      	ldr	r2, [pc, #48]	; (800c658 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f042 0201 	orr.w	r2, r2, #1
 800c638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2201      	movs	r2, #1
 800c63e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	40016800 	.word	0x40016800

0800c65c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b089      	sub	sp, #36	; 0x24
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	0c1b      	lsrs	r3, r3, #16
 800c674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c678:	4413      	add	r3, r2
 800c67a:	041b      	lsls	r3, r3, #16
 800c67c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	461a      	mov	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	01db      	lsls	r3, r3, #7
 800c688:	4413      	add	r3, r2
 800c68a:	3384      	adds	r3, #132	; 0x84
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	6812      	ldr	r2, [r2, #0]
 800c692:	4611      	mov	r1, r2
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	01d2      	lsls	r2, r2, #7
 800c698:	440a      	add	r2, r1
 800c69a:	3284      	adds	r2, #132	; 0x84
 800c69c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c6a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	0c1b      	lsrs	r3, r3, #16
 800c6ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6b2:	4413      	add	r3, r2
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	01db      	lsls	r3, r3, #7
 800c6c0:	440b      	add	r3, r1
 800c6c2:	3384      	adds	r3, #132	; 0x84
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	68da      	ldr	r2, [r3, #12]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6da:	4413      	add	r3, r2
 800c6dc:	041b      	lsls	r3, r3, #16
 800c6de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	01db      	lsls	r3, r3, #7
 800c6ea:	4413      	add	r3, r2
 800c6ec:	3384      	adds	r3, #132	; 0x84
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	6812      	ldr	r2, [r2, #0]
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	01d2      	lsls	r2, r2, #7
 800c6fa:	440a      	add	r2, r1
 800c6fc:	3284      	adds	r2, #132	; 0x84
 800c6fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c702:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	689a      	ldr	r2, [r3, #8]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c712:	4413      	add	r3, r2
 800c714:	1c5a      	adds	r2, r3, #1
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4619      	mov	r1, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	01db      	lsls	r3, r3, #7
 800c720:	440b      	add	r3, r1
 800c722:	3384      	adds	r3, #132	; 0x84
 800c724:	4619      	mov	r1, r3
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	4313      	orrs	r3, r2
 800c72a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	461a      	mov	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	01db      	lsls	r3, r3, #7
 800c736:	4413      	add	r3, r2
 800c738:	3384      	adds	r3, #132	; 0x84
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	6812      	ldr	r2, [r2, #0]
 800c740:	4611      	mov	r1, r2
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	01d2      	lsls	r2, r2, #7
 800c746:	440a      	add	r2, r1
 800c748:	3284      	adds	r2, #132	; 0x84
 800c74a:	f023 0307 	bic.w	r3, r3, #7
 800c74e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	461a      	mov	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	01db      	lsls	r3, r3, #7
 800c75a:	4413      	add	r3, r2
 800c75c:	3384      	adds	r3, #132	; 0x84
 800c75e:	461a      	mov	r2, r3
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c76c:	021b      	lsls	r3, r3, #8
 800c76e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c776:	041b      	lsls	r3, r3, #16
 800c778:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	699b      	ldr	r3, [r3, #24]
 800c77e:	061b      	lsls	r3, r3, #24
 800c780:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	461a      	mov	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	01db      	lsls	r3, r3, #7
 800c78c:	4413      	add	r3, r2
 800c78e:	3384      	adds	r3, #132	; 0x84
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	01db      	lsls	r3, r3, #7
 800c79c:	4413      	add	r3, r2
 800c79e:	3384      	adds	r3, #132	; 0x84
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	431a      	orrs	r2, r3
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	431a      	orrs	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	01db      	lsls	r3, r3, #7
 800c7c0:	440b      	add	r3, r1
 800c7c2:	3384      	adds	r3, #132	; 0x84
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	01db      	lsls	r3, r3, #7
 800c7d6:	4413      	add	r3, r2
 800c7d8:	3384      	adds	r3, #132	; 0x84
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	6812      	ldr	r2, [r2, #0]
 800c7e0:	4611      	mov	r1, r2
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	01d2      	lsls	r2, r2, #7
 800c7e6:	440a      	add	r2, r1
 800c7e8:	3284      	adds	r2, #132	; 0x84
 800c7ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	01db      	lsls	r3, r3, #7
 800c7fa:	4413      	add	r3, r2
 800c7fc:	3384      	adds	r3, #132	; 0x84
 800c7fe:	461a      	mov	r2, r3
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	461a      	mov	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	01db      	lsls	r3, r3, #7
 800c810:	4413      	add	r3, r2
 800c812:	3384      	adds	r3, #132	; 0x84
 800c814:	69da      	ldr	r2, [r3, #28]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4619      	mov	r1, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	01db      	lsls	r3, r3, #7
 800c820:	440b      	add	r3, r1
 800c822:	3384      	adds	r3, #132	; 0x84
 800c824:	4619      	mov	r1, r3
 800c826:	4b58      	ldr	r3, [pc, #352]	; (800c988 <LTDC_SetConfig+0x32c>)
 800c828:	4013      	ands	r3, r2
 800c82a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	69da      	ldr	r2, [r3, #28]
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	68f9      	ldr	r1, [r7, #12]
 800c836:	6809      	ldr	r1, [r1, #0]
 800c838:	4608      	mov	r0, r1
 800c83a:	6879      	ldr	r1, [r7, #4]
 800c83c:	01c9      	lsls	r1, r1, #7
 800c83e:	4401      	add	r1, r0
 800c840:	3184      	adds	r1, #132	; 0x84
 800c842:	4313      	orrs	r3, r2
 800c844:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	01db      	lsls	r3, r3, #7
 800c850:	4413      	add	r3, r2
 800c852:	3384      	adds	r3, #132	; 0x84
 800c854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	461a      	mov	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	01db      	lsls	r3, r3, #7
 800c860:	4413      	add	r3, r2
 800c862:	3384      	adds	r3, #132	; 0x84
 800c864:	461a      	mov	r2, r3
 800c866:	2300      	movs	r3, #0
 800c868:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	461a      	mov	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	01db      	lsls	r3, r3, #7
 800c874:	4413      	add	r3, r2
 800c876:	3384      	adds	r3, #132	; 0x84
 800c878:	461a      	mov	r2, r3
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d102      	bne.n	800c88e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800c888:	2304      	movs	r3, #4
 800c88a:	61fb      	str	r3, [r7, #28]
 800c88c:	e01b      	b.n	800c8c6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d102      	bne.n	800c89c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800c896:	2303      	movs	r3, #3
 800c898:	61fb      	str	r3, [r7, #28]
 800c89a:	e014      	b.n	800c8c6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	2b04      	cmp	r3, #4
 800c8a2:	d00b      	beq.n	800c8bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d007      	beq.n	800c8bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d003      	beq.n	800c8bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c8b8:	2b07      	cmp	r3, #7
 800c8ba:	d102      	bne.n	800c8c2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800c8bc:	2302      	movs	r3, #2
 800c8be:	61fb      	str	r3, [r7, #28]
 800c8c0:	e001      	b.n	800c8c6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	01db      	lsls	r3, r3, #7
 800c8d0:	4413      	add	r3, r2
 800c8d2:	3384      	adds	r3, #132	; 0x84
 800c8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	6812      	ldr	r2, [r2, #0]
 800c8da:	4611      	mov	r1, r2
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	01d2      	lsls	r2, r2, #7
 800c8e0:	440a      	add	r2, r1
 800c8e2:	3284      	adds	r2, #132	; 0x84
 800c8e4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c8e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ee:	69fa      	ldr	r2, [r7, #28]
 800c8f0:	fb02 f303 	mul.w	r3, r2, r3
 800c8f4:	041a      	lsls	r2, r3, #16
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	6859      	ldr	r1, [r3, #4]
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	1acb      	subs	r3, r1, r3
 800c900:	69f9      	ldr	r1, [r7, #28]
 800c902:	fb01 f303 	mul.w	r3, r1, r3
 800c906:	3303      	adds	r3, #3
 800c908:	68f9      	ldr	r1, [r7, #12]
 800c90a:	6809      	ldr	r1, [r1, #0]
 800c90c:	4608      	mov	r0, r1
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	01c9      	lsls	r1, r1, #7
 800c912:	4401      	add	r1, r0
 800c914:	3184      	adds	r1, #132	; 0x84
 800c916:	4313      	orrs	r3, r2
 800c918:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	01db      	lsls	r3, r3, #7
 800c924:	4413      	add	r3, r2
 800c926:	3384      	adds	r3, #132	; 0x84
 800c928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4619      	mov	r1, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	01db      	lsls	r3, r3, #7
 800c934:	440b      	add	r3, r1
 800c936:	3384      	adds	r3, #132	; 0x84
 800c938:	4619      	mov	r1, r3
 800c93a:	4b14      	ldr	r3, [pc, #80]	; (800c98c <LTDC_SetConfig+0x330>)
 800c93c:	4013      	ands	r3, r2
 800c93e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	461a      	mov	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	01db      	lsls	r3, r3, #7
 800c94a:	4413      	add	r3, r2
 800c94c:	3384      	adds	r3, #132	; 0x84
 800c94e:	461a      	mov	r2, r3
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c954:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	461a      	mov	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	01db      	lsls	r3, r3, #7
 800c960:	4413      	add	r3, r2
 800c962:	3384      	adds	r3, #132	; 0x84
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	6812      	ldr	r2, [r2, #0]
 800c96a:	4611      	mov	r1, r2
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	01d2      	lsls	r2, r2, #7
 800c970:	440a      	add	r2, r1
 800c972:	3284      	adds	r2, #132	; 0x84
 800c974:	f043 0301 	orr.w	r3, r3, #1
 800c978:	6013      	str	r3, [r2, #0]
}
 800c97a:	bf00      	nop
 800c97c:	3724      	adds	r7, #36	; 0x24
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop
 800c988:	fffff8f8 	.word	0xfffff8f8
 800c98c:	fffff800 	.word	0xfffff800

0800c990 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c996:	2300      	movs	r3, #0
 800c998:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c99a:	4b23      	ldr	r3, [pc, #140]	; (800ca28 <HAL_PWREx_EnableOverDrive+0x98>)
 800c99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99e:	4a22      	ldr	r2, [pc, #136]	; (800ca28 <HAL_PWREx_EnableOverDrive+0x98>)
 800c9a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9a4:	6413      	str	r3, [r2, #64]	; 0x40
 800c9a6:	4b20      	ldr	r3, [pc, #128]	; (800ca28 <HAL_PWREx_EnableOverDrive+0x98>)
 800c9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9ae:	603b      	str	r3, [r7, #0]
 800c9b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c9b2:	4b1e      	ldr	r3, [pc, #120]	; (800ca2c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a1d      	ldr	r2, [pc, #116]	; (800ca2c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c9b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c9bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c9be:	f7fd faa5 	bl	8009f0c <HAL_GetTick>
 800c9c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c9c4:	e009      	b.n	800c9da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c9c6:	f7fd faa1 	bl	8009f0c <HAL_GetTick>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9d4:	d901      	bls.n	800c9da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	e022      	b.n	800ca20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c9da:	4b14      	ldr	r3, [pc, #80]	; (800ca2c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9e6:	d1ee      	bne.n	800c9c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c9e8:	4b10      	ldr	r3, [pc, #64]	; (800ca2c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a0f      	ldr	r2, [pc, #60]	; (800ca2c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c9ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c9f4:	f7fd fa8a 	bl	8009f0c <HAL_GetTick>
 800c9f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c9fa:	e009      	b.n	800ca10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c9fc:	f7fd fa86 	bl	8009f0c <HAL_GetTick>
 800ca00:	4602      	mov	r2, r0
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca0a:	d901      	bls.n	800ca10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	e007      	b.n	800ca20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ca10:	4b06      	ldr	r3, [pc, #24]	; (800ca2c <HAL_PWREx_EnableOverDrive+0x9c>)
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca1c:	d1ee      	bne.n	800c9fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	40023800 	.word	0x40023800
 800ca2c:	40007000 	.word	0x40007000

0800ca30 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af02      	add	r7, sp, #8
 800ca36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ca38:	f7fd fa68 	bl	8009f0c <HAL_GetTick>
 800ca3c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d101      	bne.n	800ca48 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	e067      	b.n	800cb18 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10b      	bne.n	800ca6c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7f5 fae7 	bl	8002030 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800ca62:	f241 3188 	movw	r1, #5000	; 0x1388
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 fcf2 	bl	800d450 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	021a      	lsls	r2, r3, #8
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	430a      	orrs	r2, r1
 800ca84:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	2120      	movs	r1, #32
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fd1d 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ca9c:	7afb      	ldrb	r3, [r7, #11]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d135      	bne.n	800cb0e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	4b1d      	ldr	r3, [pc, #116]	; (800cb20 <HAL_QSPI_Init+0xf0>)
 800caaa:	4013      	ands	r3, r2
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	6852      	ldr	r2, [r2, #4]
 800cab0:	0611      	lsls	r1, r2, #24
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	68d2      	ldr	r2, [r2, #12]
 800cab6:	4311      	orrs	r1, r2
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	69d2      	ldr	r2, [r2, #28]
 800cabc:	4311      	orrs	r1, r2
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	6a12      	ldr	r2, [r2, #32]
 800cac2:	4311      	orrs	r1, r2
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	6812      	ldr	r2, [r2, #0]
 800cac8:	430b      	orrs	r3, r1
 800caca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	685a      	ldr	r2, [r3, #4]
 800cad2:	4b14      	ldr	r3, [pc, #80]	; (800cb24 <HAL_QSPI_Init+0xf4>)
 800cad4:	4013      	ands	r3, r2
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	6912      	ldr	r2, [r2, #16]
 800cada:	0411      	lsls	r1, r2, #16
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	6952      	ldr	r2, [r2, #20]
 800cae0:	4311      	orrs	r1, r2
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	6992      	ldr	r2, [r2, #24]
 800cae6:	4311      	orrs	r1, r2
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	6812      	ldr	r2, [r2, #0]
 800caec:	430b      	orrs	r3, r1
 800caee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f042 0201 	orr.w	r2, r2, #1
 800cafe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800cb16:	7afb      	ldrb	r3, [r7, #11]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	00ffff2f 	.word	0x00ffff2f
 800cb24:	ffe0f8fe 	.word	0xffe0f8fe

0800cb28 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d101      	bne.n	800cb3a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e016      	b.n	800cb68 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f022 0201 	bic.w	r2, r2, #1
 800cb48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7f5 fafa 	bl	8002144 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f003 0304 	and.w	r3, r3, #4
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d064      	beq.n	800cc5c <HAL_QSPI_IRQHandler+0xec>
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d05f      	beq.n	800cc5c <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	3320      	adds	r3, #32
 800cba2:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b12      	cmp	r3, #18
 800cbae:	d125      	bne.n	800cbfc <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cbb0:	e01c      	b.n	800cbec <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00f      	beq.n	800cbda <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbe:	781a      	ldrb	r2, [r3, #0]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd2:	1e5a      	subs	r2, r3, #1
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	62da      	str	r2, [r3, #44]	; 0x2c
 800cbd8:	e008      	b.n	800cbec <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cbe8:	601a      	str	r2, [r3, #0]
          break;
 800cbea:	e033      	b.n	800cc54 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f003 0304 	and.w	r3, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1db      	bne.n	800cbb2 <HAL_QSPI_IRQHandler+0x42>
 800cbfa:	e02b      	b.n	800cc54 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b22      	cmp	r3, #34	; 0x22
 800cc06:	d125      	bne.n	800cc54 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cc08:	e01d      	b.n	800cc46 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d010      	beq.n	800cc34 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	7812      	ldrb	r2, [r2, #0]
 800cc1a:	b2d2      	uxtb	r2, r2
 800cc1c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2c:	1e5a      	subs	r2, r3, #1
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	639a      	str	r2, [r3, #56]	; 0x38
 800cc32:	e008      	b.n	800cc46 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cc42:	601a      	str	r2, [r3, #0]
          break;
 800cc44:	e006      	b.n	800cc54 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	f003 0304 	and.w	r3, r3, #4
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1da      	bne.n	800cc0a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fbdd 	bl	800d414 <HAL_QSPI_FifoThresholdCallback>
 800cc5a:	e13c      	b.n	800ced6 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	f003 0302 	and.w	r3, r3, #2
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 80b0 	beq.w	800cdc8 <HAL_QSPI_IRQHandler+0x258>
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f000 80aa 	beq.w	800cdc8 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2202      	movs	r2, #2
 800cc7a:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800cc8a:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b12      	cmp	r3, #18
 800cc96:	d120      	bne.n	800ccda <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f003 0304 	and.w	r3, r3, #4
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d011      	beq.n	800ccca <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f022 0204 	bic.w	r2, r2, #4
 800ccb4:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f022 0201 	bic.w	r2, r2, #1
 800ccc8:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2201      	movs	r2, #1
 800ccce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fb94 	bl	800d400 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ccd8:	e0fa      	b.n	800ced0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	2b22      	cmp	r3, #34	; 0x22
 800cce4:	d143      	bne.n	800cd6e <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d012      	beq.n	800cd1a <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f022 0204 	bic.w	r2, r2, #4
 800cd02:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f022 0201 	bic.w	r2, r2, #1
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	e021      	b.n	800cd5e <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3320      	adds	r3, #32
 800cd20:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800cd22:	e013      	b.n	800cd4c <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d017      	beq.n	800cd5c <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	7812      	ldrb	r2, [r2, #0]
 800cd34:	b2d2      	uxtb	r2, r2
 800cd36:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd3c:	1c5a      	adds	r2, r3, #1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd46:	1e5a      	subs	r2, r3, #1
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e4      	bne.n	800cd24 <HAL_QSPI_IRQHandler+0x1b4>
 800cd5a:	e000      	b.n	800cd5e <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800cd5c:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2201      	movs	r2, #1
 800cd62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fb40 	bl	800d3ec <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cd6c:	e0b0      	b.n	800ced0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d107      	bne.n	800cd8a <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fb28 	bl	800d3d8 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cd88:	e0a2      	b.n	800ced0 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	2b08      	cmp	r3, #8
 800cd94:	f040 809c 	bne.w	800ced0 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	695a      	ldr	r2, [r3, #20]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800cda6:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d103      	bne.n	800cdc0 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 fb03 	bl	800d3c4 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cdbe:	e087      	b.n	800ced0 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 faf5 	bl	800d3b0 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cdc6:	e083      	b.n	800ced0 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	f003 0308 	and.w	r3, r3, #8
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d01f      	beq.n	800ce12 <HAL_QSPI_IRQHandler+0x2a2>
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d01a      	beq.n	800ce12 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2208      	movs	r2, #8
 800cde2:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00b      	beq.n	800ce0a <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800ce00:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2201      	movs	r2, #1
 800ce06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fb0c 	bl	800d428 <HAL_QSPI_StatusMatchCallback>
 800ce10:	e061      	b.n	800ced6 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	f003 0301 	and.w	r3, r3, #1
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d047      	beq.n	800ceac <HAL_QSPI_IRQHandler+0x33c>
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d042      	beq.n	800ceac <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800ce3c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce42:	f043 0202 	orr.w	r2, r3, #2
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 0304 	and.w	r3, r3, #4
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d021      	beq.n	800ce9c <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 0204 	bic.w	r2, r2, #4
 800ce66:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6c:	4a1c      	ldr	r2, [pc, #112]	; (800cee0 <HAL_QSPI_IRQHandler+0x370>)
 800ce6e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fe fa8d 	bl	800b394 <HAL_DMA_Abort_IT>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d029      	beq.n	800ced4 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce84:	f043 0204 	orr.w	r2, r3, #4
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 fa8b 	bl	800d3b0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ce9a:	e01b      	b.n	800ced4 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 fa83 	bl	800d3b0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ceaa:	e013      	b.n	800ced4 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	f003 0310 	and.w	r3, r3, #16
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00f      	beq.n	800ced6 <HAL_QSPI_IRQHandler+0x366>
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00a      	beq.n	800ced6 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2210      	movs	r2, #16
 800cec6:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fab7 	bl	800d43c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800cece:	e002      	b.n	800ced6 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ced0:	bf00      	nop
 800ced2:	e000      	b.n	800ced6 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ced4:	bf00      	nop
}
 800ced6:	bf00      	nop
 800ced8:	3718      	adds	r7, #24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	0800d46d 	.word	0x0800d46d

0800cee4 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800cef0:	f7fd f80c 	bl	8009f0c <HAL_GetTick>
 800cef4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d101      	bne.n	800cf06 <HAL_QSPI_Command+0x22>
 800cf02:	2302      	movs	r3, #2
 800cf04:	e048      	b.n	800cf98 <HAL_QSPI_Command+0xb4>
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d137      	bne.n	800cf8a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2202      	movs	r2, #2
 800cf24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2120      	movs	r1, #32
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 facd 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d125      	bne.n	800cf8e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cf42:	2200      	movs	r2, #0
 800cf44:	68b9      	ldr	r1, [r7, #8]
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f000 fafa 	bl	800d540 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d115      	bne.n	800cf80 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	9300      	str	r3, [sp, #0]
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	2102      	movs	r1, #2
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f000 fab7 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800cf64:	4603      	mov	r3, r0
 800cf66:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10f      	bne.n	800cf8e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2202      	movs	r2, #2
 800cf74:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf7e:	e006      	b.n	800cf8e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf88:	e001      	b.n	800cf8e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800cf8a:	2302      	movs	r3, #2
 800cf8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2200      	movs	r2, #0
 800cf92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800cf96:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3718      	adds	r7, #24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b08a      	sub	sp, #40	; 0x28
 800cfa4:	af02      	add	r7, sp, #8
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cfac:	2300      	movs	r3, #0
 800cfae:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800cfb0:	f7fc ffac 	bl	8009f0c <HAL_GetTick>
 800cfb4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	3320      	adds	r3, #32
 800cfbc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d101      	bne.n	800cfce <HAL_QSPI_Transmit+0x2e>
 800cfca:	2302      	movs	r3, #2
 800cfcc:	e076      	b.n	800d0bc <HAL_QSPI_Transmit+0x11c>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d165      	bne.n	800d0ae <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d056      	beq.n	800d09c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2212      	movs	r2, #18
 800cff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	1c5a      	adds	r2, r3, #1
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	1c5a      	adds	r2, r3, #1
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	695a      	ldr	r2, [r3, #20]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800d022:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800d024:	e01b      	b.n	800d05e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	2201      	movs	r2, #1
 800d02e:	2104      	movs	r1, #4
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 fa4e 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800d036:	4603      	mov	r3, r0
 800d038:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800d03a:	7ffb      	ldrb	r3, [r7, #31]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d113      	bne.n	800d068 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d044:	781a      	ldrb	r2, [r3, #0]
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04e:	1c5a      	adds	r2, r3, #1
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d058:	1e5a      	subs	r2, r3, #1
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1df      	bne.n	800d026 <HAL_QSPI_Transmit+0x86>
 800d066:	e000      	b.n	800d06a <HAL_QSPI_Transmit+0xca>
          break;
 800d068:	bf00      	nop
      }

      if (status == HAL_OK)
 800d06a:	7ffb      	ldrb	r3, [r7, #31]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d110      	bne.n	800d092 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	2201      	movs	r2, #1
 800d078:	2102      	movs	r1, #2
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f000 fa29 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800d080:	4603      	mov	r3, r0
 800d082:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800d084:	7ffb      	ldrb	r3, [r7, #31]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d103      	bne.n	800d092 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2202      	movs	r2, #2
 800d090:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d09a:	e00a      	b.n	800d0b2 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0a0:	f043 0208 	orr.w	r2, r3, #8
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	77fb      	strb	r3, [r7, #31]
 800d0ac:	e001      	b.n	800d0b2 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800d0ba:	7ffb      	ldrb	r3, [r7, #31]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3720      	adds	r7, #32
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b08a      	sub	sp, #40	; 0x28
 800d0c8:	af02      	add	r7, sp, #8
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800d0d4:	f7fc ff1a 	bl	8009f0c <HAL_GetTick>
 800d0d8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	3320      	adds	r3, #32
 800d0e8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d101      	bne.n	800d0fa <HAL_QSPI_Receive+0x36>
 800d0f6:	2302      	movs	r3, #2
 800d0f8:	e07d      	b.n	800d1f6 <HAL_QSPI_Receive+0x132>
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d16c      	bne.n	800d1e8 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d05d      	beq.n	800d1d6 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2222      	movs	r2, #34	; 0x22
 800d11e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	1c5a      	adds	r2, r3, #1
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	1c5a      	adds	r2, r3, #1
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d152:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	697a      	ldr	r2, [r7, #20]
 800d15a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800d15c:	e01c      	b.n	800d198 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	2201      	movs	r2, #1
 800d166:	2106      	movs	r1, #6
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f000 f9b2 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800d16e:	4603      	mov	r3, r0
 800d170:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800d172:	7ffb      	ldrb	r3, [r7, #31]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d114      	bne.n	800d1a2 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d17c:	693a      	ldr	r2, [r7, #16]
 800d17e:	7812      	ldrb	r2, [r2, #0]
 800d180:	b2d2      	uxtb	r2, r2
 800d182:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d188:	1c5a      	adds	r2, r3, #1
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d192:	1e5a      	subs	r2, r3, #1
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1de      	bne.n	800d15e <HAL_QSPI_Receive+0x9a>
 800d1a0:	e000      	b.n	800d1a4 <HAL_QSPI_Receive+0xe0>
          break;
 800d1a2:	bf00      	nop
      }

      if (status == HAL_OK)
 800d1a4:	7ffb      	ldrb	r3, [r7, #31]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d110      	bne.n	800d1cc <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	2102      	movs	r1, #2
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f000 f98c 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800d1be:	7ffb      	ldrb	r3, [r7, #31]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d103      	bne.n	800d1cc <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2202      	movs	r2, #2
 800d1ca:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1d4:	e00a      	b.n	800d1ec <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1da:	f043 0208 	orr.w	r2, r3, #8
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	77fb      	strb	r3, [r7, #31]
 800d1e6:	e001      	b.n	800d1ec <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d1e8:	2302      	movs	r3, #2
 800d1ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800d1f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3720      	adds	r7, #32
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b088      	sub	sp, #32
 800d202:	af02      	add	r7, sp, #8
 800d204:	60f8      	str	r0, [r7, #12]
 800d206:	60b9      	str	r1, [r7, #8]
 800d208:	607a      	str	r2, [r7, #4]
 800d20a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d20c:	f7fc fe7e 	bl	8009f0c <HAL_GetTick>
 800d210:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d101      	bne.n	800d222 <HAL_QSPI_AutoPolling+0x24>
 800d21e:	2302      	movs	r3, #2
 800d220:	e060      	b.n	800d2e4 <HAL_QSPI_AutoPolling+0xe6>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d230:	b2db      	uxtb	r3, r3
 800d232:	2b01      	cmp	r3, #1
 800d234:	d14f      	bne.n	800d2d6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2242      	movs	r2, #66	; 0x42
 800d240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	2200      	movs	r2, #0
 800d24c:	2120      	movs	r1, #32
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f000 f93f 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800d254:	4603      	mov	r3, r0
 800d256:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800d258:	7dfb      	ldrb	r3, [r7, #23]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d13d      	bne.n	800d2da <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	6812      	ldr	r2, [r2, #0]
 800d266:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	6852      	ldr	r2, [r2, #4]
 800d270:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	6892      	ldr	r2, [r2, #8]
 800d27a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	431a      	orrs	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800d294:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68da      	ldr	r2, [r3, #12]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d29e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d2a2:	68b9      	ldr	r1, [r7, #8]
 800d2a4:	68f8      	ldr	r0, [r7, #12]
 800d2a6:	f000 f94b 	bl	800d540 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	2108      	movs	r1, #8
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f000 f90c 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800d2be:	7dfb      	ldrb	r3, [r7, #23]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10a      	bne.n	800d2da <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2208      	movs	r2, #8
 800d2ca:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2d4:	e001      	b.n	800d2da <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d2e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3718      	adds	r7, #24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af02      	add	r7, sp, #8
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d2f8:	f7fc fe08 	bl	8009f0c <HAL_GetTick>
 800d2fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d304:	b2db      	uxtb	r3, r3
 800d306:	2b01      	cmp	r3, #1
 800d308:	d101      	bne.n	800d30e <HAL_QSPI_MemoryMapped+0x22>
 800d30a:	2302      	movs	r3, #2
 800d30c:	e04c      	b.n	800d3a8 <HAL_QSPI_MemoryMapped+0xbc>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d13b      	bne.n	800d39a <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2200      	movs	r2, #0
 800d326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2282      	movs	r2, #130	; 0x82
 800d32c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2200      	movs	r2, #0
 800d33a:	2120      	movs	r1, #32
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f000 f8c8 	bl	800d4d2 <QSPI_WaitFlagStateUntilTimeout>
 800d342:	4603      	mov	r3, r0
 800d344:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d128      	bne.n	800d39e <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f023 0108 	bic.w	r1, r3, #8
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	685a      	ldr	r2, [r3, #4]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	430a      	orrs	r2, r1
 800d360:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	2b08      	cmp	r3, #8
 800d368:	d110      	bne.n	800d38c <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	6812      	ldr	r2, [r2, #0]
 800d372:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2210      	movs	r2, #16
 800d37a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d38a:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d38c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800d390:	68b9      	ldr	r1, [r7, #8]
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f000 f8d4 	bl	800d540 <QSPI_Config>
 800d398:	e001      	b.n	800d39e <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d39a:	2302      	movs	r3, #2
 800d39c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d3a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800d3cc:	bf00      	nop
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800d408:	bf00      	nop
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800d41c:	bf00      	nop
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	683a      	ldr	r2, [r7, #0]
 800d45e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d478:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2200      	movs	r2, #0
 800d47e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b08      	cmp	r3, #8
 800d490:	d114      	bne.n	800d4bc <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2202      	movs	r2, #2
 800d498:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d4a8:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f042 0202 	orr.w	r2, r2, #2
 800d4b8:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800d4ba:	e006      	b.n	800d4ca <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f7ff ff73 	bl	800d3b0 <HAL_QSPI_ErrorCallback>
}
 800d4ca:	bf00      	nop
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	603b      	str	r3, [r7, #0]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d4e2:	e01a      	b.n	800d51a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ea:	d016      	beq.n	800d51a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4ec:	f7fc fd0e 	bl	8009f0c <HAL_GetTick>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	69ba      	ldr	r2, [r7, #24]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d302      	bcc.n	800d502 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10b      	bne.n	800d51a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2204      	movs	r2, #4
 800d506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d50e:	f043 0201 	orr.w	r2, r3, #1
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e00e      	b.n	800d538 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	689a      	ldr	r2, [r3, #8]
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	4013      	ands	r3, r2
 800d524:	2b00      	cmp	r3, #0
 800d526:	bf14      	ite	ne
 800d528:	2301      	movne	r3, #1
 800d52a:	2300      	moveq	r3, #0
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	461a      	mov	r2, r3
 800d530:	79fb      	ldrb	r3, [r7, #7]
 800d532:	429a      	cmp	r2, r3
 800d534:	d1d6      	bne.n	800d4e4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3710      	adds	r7, #16
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	2b00      	cmp	r3, #0
 800d552:	d009      	beq.n	800d568 <QSPI_Config+0x28>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d55a:	d005      	beq.n	800d568 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	3a01      	subs	r2, #1
 800d566:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	699b      	ldr	r3, [r3, #24]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 80b9 	beq.w	800d6e4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d05f      	beq.n	800d63a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	68ba      	ldr	r2, [r7, #8]
 800d580:	6892      	ldr	r2, [r2, #8]
 800d582:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	69db      	ldr	r3, [r3, #28]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d031      	beq.n	800d5f0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d594:	431a      	orrs	r2, r3
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59a:	431a      	orrs	r2, r3
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a0:	431a      	orrs	r2, r3
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	049b      	lsls	r3, r3, #18
 800d5a8:	431a      	orrs	r2, r3
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	431a      	orrs	r2, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	6a1b      	ldr	r3, [r3, #32]
 800d5b4:	431a      	orrs	r2, r3
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	69db      	ldr	r3, [r3, #28]
 800d5c0:	431a      	orrs	r2, r3
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	699b      	ldr	r3, [r3, #24]
 800d5c6:	431a      	orrs	r2, r3
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	ea42 0103 	orr.w	r1, r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	430a      	orrs	r2, r1
 800d5d8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d5e0:	f000 812e 	beq.w	800d840 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68ba      	ldr	r2, [r7, #8]
 800d5ea:	6852      	ldr	r2, [r2, #4]
 800d5ec:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800d5ee:	e127      	b.n	800d840 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f8:	431a      	orrs	r2, r3
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5fe:	431a      	orrs	r2, r3
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d604:	431a      	orrs	r2, r3
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	695b      	ldr	r3, [r3, #20]
 800d60a:	049b      	lsls	r3, r3, #18
 800d60c:	431a      	orrs	r2, r3
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	431a      	orrs	r2, r3
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	431a      	orrs	r2, r3
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	69db      	ldr	r3, [r3, #28]
 800d61e:	431a      	orrs	r2, r3
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	699b      	ldr	r3, [r3, #24]
 800d624:	431a      	orrs	r2, r3
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	ea42 0103 	orr.w	r1, r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	430a      	orrs	r2, r1
 800d636:	615a      	str	r2, [r3, #20]
}
 800d638:	e102      	b.n	800d840 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	69db      	ldr	r3, [r3, #28]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d02e      	beq.n	800d6a0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64a:	431a      	orrs	r2, r3
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d650:	431a      	orrs	r2, r3
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d656:	431a      	orrs	r2, r3
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	695b      	ldr	r3, [r3, #20]
 800d65c:	049b      	lsls	r3, r3, #18
 800d65e:	431a      	orrs	r2, r3
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	6a1b      	ldr	r3, [r3, #32]
 800d664:	431a      	orrs	r2, r3
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	431a      	orrs	r2, r3
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	69db      	ldr	r3, [r3, #28]
 800d670:	431a      	orrs	r2, r3
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	699b      	ldr	r3, [r3, #24]
 800d676:	431a      	orrs	r2, r3
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	ea42 0103 	orr.w	r1, r2, r3
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	430a      	orrs	r2, r1
 800d688:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d690:	f000 80d6 	beq.w	800d840 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	6852      	ldr	r2, [r2, #4]
 800d69c:	619a      	str	r2, [r3, #24]
}
 800d69e:	e0cf      	b.n	800d840 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a8:	431a      	orrs	r2, r3
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ae:	431a      	orrs	r2, r3
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b4:	431a      	orrs	r2, r3
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	049b      	lsls	r3, r3, #18
 800d6bc:	431a      	orrs	r2, r3
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	6a1b      	ldr	r3, [r3, #32]
 800d6c2:	431a      	orrs	r2, r3
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	431a      	orrs	r2, r3
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	431a      	orrs	r2, r3
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	ea42 0103 	orr.w	r1, r2, r3
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	430a      	orrs	r2, r1
 800d6e0:	615a      	str	r2, [r3, #20]
}
 800d6e2:	e0ad      	b.n	800d840 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	6a1b      	ldr	r3, [r3, #32]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d058      	beq.n	800d79e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	6892      	ldr	r2, [r2, #8]
 800d6f4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	69db      	ldr	r3, [r3, #28]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d02d      	beq.n	800d75a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d706:	431a      	orrs	r2, r3
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d70c:	431a      	orrs	r2, r3
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d712:	431a      	orrs	r2, r3
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	049b      	lsls	r3, r3, #18
 800d71a:	431a      	orrs	r2, r3
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	691b      	ldr	r3, [r3, #16]
 800d720:	431a      	orrs	r2, r3
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	6a1b      	ldr	r3, [r3, #32]
 800d726:	431a      	orrs	r2, r3
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	431a      	orrs	r2, r3
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	69db      	ldr	r3, [r3, #28]
 800d732:	431a      	orrs	r2, r3
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	ea42 0103 	orr.w	r1, r2, r3
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	430a      	orrs	r2, r1
 800d744:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d74c:	d078      	beq.n	800d840 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	6852      	ldr	r2, [r2, #4]
 800d756:	619a      	str	r2, [r3, #24]
}
 800d758:	e072      	b.n	800d840 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d762:	431a      	orrs	r2, r3
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d768:	431a      	orrs	r2, r3
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76e:	431a      	orrs	r2, r3
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	695b      	ldr	r3, [r3, #20]
 800d774:	049b      	lsls	r3, r3, #18
 800d776:	431a      	orrs	r2, r3
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	431a      	orrs	r2, r3
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	431a      	orrs	r2, r3
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	69db      	ldr	r3, [r3, #28]
 800d788:	431a      	orrs	r2, r3
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	ea42 0103 	orr.w	r1, r2, r3
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	430a      	orrs	r2, r1
 800d79a:	615a      	str	r2, [r3, #20]
}
 800d79c:	e050      	b.n	800d840 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	69db      	ldr	r3, [r3, #28]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d02a      	beq.n	800d7fc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ae:	431a      	orrs	r2, r3
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b4:	431a      	orrs	r2, r3
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	049b      	lsls	r3, r3, #18
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	6a1b      	ldr	r3, [r3, #32]
 800d7c8:	431a      	orrs	r2, r3
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	431a      	orrs	r2, r3
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	69db      	ldr	r3, [r3, #28]
 800d7d4:	431a      	orrs	r2, r3
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	ea42 0103 	orr.w	r1, r2, r3
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	430a      	orrs	r2, r1
 800d7e6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d7ee:	d027      	beq.n	800d840 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	6852      	ldr	r2, [r2, #4]
 800d7f8:	619a      	str	r2, [r3, #24]
}
 800d7fa:	e021      	b.n	800d840 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d800:	2b00      	cmp	r3, #0
 800d802:	d01d      	beq.n	800d840 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d80c:	431a      	orrs	r2, r3
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d812:	431a      	orrs	r2, r3
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d818:	431a      	orrs	r2, r3
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	695b      	ldr	r3, [r3, #20]
 800d81e:	049b      	lsls	r3, r3, #18
 800d820:	431a      	orrs	r2, r3
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	6a1b      	ldr	r3, [r3, #32]
 800d826:	431a      	orrs	r2, r3
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	69db      	ldr	r3, [r3, #28]
 800d82c:	431a      	orrs	r2, r3
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	ea42 0103 	orr.w	r1, r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	430a      	orrs	r2, r1
 800d83e:	615a      	str	r2, [r3, #20]
}
 800d840:	bf00      	nop
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b086      	sub	sp, #24
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d854:	2300      	movs	r3, #0
 800d856:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d85e:	2301      	movs	r3, #1
 800d860:	e29b      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 8087 	beq.w	800d97e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d870:	4b96      	ldr	r3, [pc, #600]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	f003 030c 	and.w	r3, r3, #12
 800d878:	2b04      	cmp	r3, #4
 800d87a:	d00c      	beq.n	800d896 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d87c:	4b93      	ldr	r3, [pc, #588]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	f003 030c 	and.w	r3, r3, #12
 800d884:	2b08      	cmp	r3, #8
 800d886:	d112      	bne.n	800d8ae <HAL_RCC_OscConfig+0x62>
 800d888:	4b90      	ldr	r3, [pc, #576]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d894:	d10b      	bne.n	800d8ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d896:	4b8d      	ldr	r3, [pc, #564]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d06c      	beq.n	800d97c <HAL_RCC_OscConfig+0x130>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d168      	bne.n	800d97c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e275      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8b6:	d106      	bne.n	800d8c6 <HAL_RCC_OscConfig+0x7a>
 800d8b8:	4b84      	ldr	r3, [pc, #528]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a83      	ldr	r2, [pc, #524]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d8be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8c2:	6013      	str	r3, [r2, #0]
 800d8c4:	e02e      	b.n	800d924 <HAL_RCC_OscConfig+0xd8>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10c      	bne.n	800d8e8 <HAL_RCC_OscConfig+0x9c>
 800d8ce:	4b7f      	ldr	r3, [pc, #508]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a7e      	ldr	r2, [pc, #504]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d8d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8d8:	6013      	str	r3, [r2, #0]
 800d8da:	4b7c      	ldr	r3, [pc, #496]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a7b      	ldr	r2, [pc, #492]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d8e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8e4:	6013      	str	r3, [r2, #0]
 800d8e6:	e01d      	b.n	800d924 <HAL_RCC_OscConfig+0xd8>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d8f0:	d10c      	bne.n	800d90c <HAL_RCC_OscConfig+0xc0>
 800d8f2:	4b76      	ldr	r3, [pc, #472]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a75      	ldr	r2, [pc, #468]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d8f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	4b73      	ldr	r3, [pc, #460]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	4a72      	ldr	r2, [pc, #456]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d908:	6013      	str	r3, [r2, #0]
 800d90a:	e00b      	b.n	800d924 <HAL_RCC_OscConfig+0xd8>
 800d90c:	4b6f      	ldr	r3, [pc, #444]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a6e      	ldr	r2, [pc, #440]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	4b6c      	ldr	r3, [pc, #432]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a6b      	ldr	r2, [pc, #428]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d91e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d013      	beq.n	800d954 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d92c:	f7fc faee 	bl	8009f0c <HAL_GetTick>
 800d930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d932:	e008      	b.n	800d946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d934:	f7fc faea 	bl	8009f0c <HAL_GetTick>
 800d938:	4602      	mov	r2, r0
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	2b64      	cmp	r3, #100	; 0x64
 800d940:	d901      	bls.n	800d946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d942:	2303      	movs	r3, #3
 800d944:	e229      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d946:	4b61      	ldr	r3, [pc, #388]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d0f0      	beq.n	800d934 <HAL_RCC_OscConfig+0xe8>
 800d952:	e014      	b.n	800d97e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d954:	f7fc fada 	bl	8009f0c <HAL_GetTick>
 800d958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d95a:	e008      	b.n	800d96e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d95c:	f7fc fad6 	bl	8009f0c <HAL_GetTick>
 800d960:	4602      	mov	r2, r0
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	2b64      	cmp	r3, #100	; 0x64
 800d968:	d901      	bls.n	800d96e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d96a:	2303      	movs	r3, #3
 800d96c:	e215      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d96e:	4b57      	ldr	r3, [pc, #348]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1f0      	bne.n	800d95c <HAL_RCC_OscConfig+0x110>
 800d97a:	e000      	b.n	800d97e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d97c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 0302 	and.w	r3, r3, #2
 800d986:	2b00      	cmp	r3, #0
 800d988:	d069      	beq.n	800da5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d98a:	4b50      	ldr	r3, [pc, #320]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	f003 030c 	and.w	r3, r3, #12
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00b      	beq.n	800d9ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d996:	4b4d      	ldr	r3, [pc, #308]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	f003 030c 	and.w	r3, r3, #12
 800d99e:	2b08      	cmp	r3, #8
 800d9a0:	d11c      	bne.n	800d9dc <HAL_RCC_OscConfig+0x190>
 800d9a2:	4b4a      	ldr	r3, [pc, #296]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d116      	bne.n	800d9dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d9ae:	4b47      	ldr	r3, [pc, #284]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f003 0302 	and.w	r3, r3, #2
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d005      	beq.n	800d9c6 <HAL_RCC_OscConfig+0x17a>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d001      	beq.n	800d9c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e1e9      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9c6:	4b41      	ldr	r3, [pc, #260]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	00db      	lsls	r3, r3, #3
 800d9d4:	493d      	ldr	r1, [pc, #244]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d9da:	e040      	b.n	800da5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d023      	beq.n	800da2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d9e4:	4b39      	ldr	r3, [pc, #228]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a38      	ldr	r2, [pc, #224]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800d9ea:	f043 0301 	orr.w	r3, r3, #1
 800d9ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9f0:	f7fc fa8c 	bl	8009f0c <HAL_GetTick>
 800d9f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9f6:	e008      	b.n	800da0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d9f8:	f7fc fa88 	bl	8009f0c <HAL_GetTick>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	2b02      	cmp	r3, #2
 800da04:	d901      	bls.n	800da0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800da06:	2303      	movs	r3, #3
 800da08:	e1c7      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800da0a:	4b30      	ldr	r3, [pc, #192]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 0302 	and.w	r3, r3, #2
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0f0      	beq.n	800d9f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da16:	4b2d      	ldr	r3, [pc, #180]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	00db      	lsls	r3, r3, #3
 800da24:	4929      	ldr	r1, [pc, #164]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800da26:	4313      	orrs	r3, r2
 800da28:	600b      	str	r3, [r1, #0]
 800da2a:	e018      	b.n	800da5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800da2c:	4b27      	ldr	r3, [pc, #156]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a26      	ldr	r2, [pc, #152]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800da32:	f023 0301 	bic.w	r3, r3, #1
 800da36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da38:	f7fc fa68 	bl	8009f0c <HAL_GetTick>
 800da3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da3e:	e008      	b.n	800da52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da40:	f7fc fa64 	bl	8009f0c <HAL_GetTick>
 800da44:	4602      	mov	r2, r0
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d901      	bls.n	800da52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800da4e:	2303      	movs	r3, #3
 800da50:	e1a3      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800da52:	4b1e      	ldr	r3, [pc, #120]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f003 0302 	and.w	r3, r3, #2
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d1f0      	bne.n	800da40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f003 0308 	and.w	r3, r3, #8
 800da66:	2b00      	cmp	r3, #0
 800da68:	d038      	beq.n	800dadc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	695b      	ldr	r3, [r3, #20]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d019      	beq.n	800daa6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800da72:	4b16      	ldr	r3, [pc, #88]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800da74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da76:	4a15      	ldr	r2, [pc, #84]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800da78:	f043 0301 	orr.w	r3, r3, #1
 800da7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da7e:	f7fc fa45 	bl	8009f0c <HAL_GetTick>
 800da82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da84:	e008      	b.n	800da98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800da86:	f7fc fa41 	bl	8009f0c <HAL_GetTick>
 800da8a:	4602      	mov	r2, r0
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	2b02      	cmp	r3, #2
 800da92:	d901      	bls.n	800da98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	e180      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da98:	4b0c      	ldr	r3, [pc, #48]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800da9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da9c:	f003 0302 	and.w	r3, r3, #2
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d0f0      	beq.n	800da86 <HAL_RCC_OscConfig+0x23a>
 800daa4:	e01a      	b.n	800dadc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800daa6:	4b09      	ldr	r3, [pc, #36]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800daa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daaa:	4a08      	ldr	r2, [pc, #32]	; (800dacc <HAL_RCC_OscConfig+0x280>)
 800daac:	f023 0301 	bic.w	r3, r3, #1
 800dab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dab2:	f7fc fa2b 	bl	8009f0c <HAL_GetTick>
 800dab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dab8:	e00a      	b.n	800dad0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800daba:	f7fc fa27 	bl	8009f0c <HAL_GetTick>
 800dabe:	4602      	mov	r2, r0
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d903      	bls.n	800dad0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800dac8:	2303      	movs	r3, #3
 800daca:	e166      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
 800dacc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dad0:	4b92      	ldr	r3, [pc, #584]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dad4:	f003 0302 	and.w	r3, r3, #2
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1ee      	bne.n	800daba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f003 0304 	and.w	r3, r3, #4
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f000 80a4 	beq.w	800dc32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800daea:	4b8c      	ldr	r3, [pc, #560]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800daec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d10d      	bne.n	800db12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800daf6:	4b89      	ldr	r3, [pc, #548]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800daf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafa:	4a88      	ldr	r2, [pc, #544]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dafc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db00:	6413      	str	r3, [r2, #64]	; 0x40
 800db02:	4b86      	ldr	r3, [pc, #536]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db0a:	60bb      	str	r3, [r7, #8]
 800db0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800db0e:	2301      	movs	r3, #1
 800db10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db12:	4b83      	ldr	r3, [pc, #524]	; (800dd20 <HAL_RCC_OscConfig+0x4d4>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d118      	bne.n	800db50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800db1e:	4b80      	ldr	r3, [pc, #512]	; (800dd20 <HAL_RCC_OscConfig+0x4d4>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a7f      	ldr	r2, [pc, #508]	; (800dd20 <HAL_RCC_OscConfig+0x4d4>)
 800db24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800db2a:	f7fc f9ef 	bl	8009f0c <HAL_GetTick>
 800db2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db30:	e008      	b.n	800db44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db32:	f7fc f9eb 	bl	8009f0c <HAL_GetTick>
 800db36:	4602      	mov	r2, r0
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	2b64      	cmp	r3, #100	; 0x64
 800db3e:	d901      	bls.n	800db44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800db40:	2303      	movs	r3, #3
 800db42:	e12a      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db44:	4b76      	ldr	r3, [pc, #472]	; (800dd20 <HAL_RCC_OscConfig+0x4d4>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d0f0      	beq.n	800db32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d106      	bne.n	800db66 <HAL_RCC_OscConfig+0x31a>
 800db58:	4b70      	ldr	r3, [pc, #448]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5c:	4a6f      	ldr	r2, [pc, #444]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db5e:	f043 0301 	orr.w	r3, r3, #1
 800db62:	6713      	str	r3, [r2, #112]	; 0x70
 800db64:	e02d      	b.n	800dbc2 <HAL_RCC_OscConfig+0x376>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	689b      	ldr	r3, [r3, #8]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10c      	bne.n	800db88 <HAL_RCC_OscConfig+0x33c>
 800db6e:	4b6b      	ldr	r3, [pc, #428]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db72:	4a6a      	ldr	r2, [pc, #424]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db74:	f023 0301 	bic.w	r3, r3, #1
 800db78:	6713      	str	r3, [r2, #112]	; 0x70
 800db7a:	4b68      	ldr	r3, [pc, #416]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db7e:	4a67      	ldr	r2, [pc, #412]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db80:	f023 0304 	bic.w	r3, r3, #4
 800db84:	6713      	str	r3, [r2, #112]	; 0x70
 800db86:	e01c      	b.n	800dbc2 <HAL_RCC_OscConfig+0x376>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	2b05      	cmp	r3, #5
 800db8e:	d10c      	bne.n	800dbaa <HAL_RCC_OscConfig+0x35e>
 800db90:	4b62      	ldr	r3, [pc, #392]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db94:	4a61      	ldr	r2, [pc, #388]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db96:	f043 0304 	orr.w	r3, r3, #4
 800db9a:	6713      	str	r3, [r2, #112]	; 0x70
 800db9c:	4b5f      	ldr	r3, [pc, #380]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800db9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba0:	4a5e      	ldr	r2, [pc, #376]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dba2:	f043 0301 	orr.w	r3, r3, #1
 800dba6:	6713      	str	r3, [r2, #112]	; 0x70
 800dba8:	e00b      	b.n	800dbc2 <HAL_RCC_OscConfig+0x376>
 800dbaa:	4b5c      	ldr	r3, [pc, #368]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbae:	4a5b      	ldr	r2, [pc, #364]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dbb0:	f023 0301 	bic.w	r3, r3, #1
 800dbb4:	6713      	str	r3, [r2, #112]	; 0x70
 800dbb6:	4b59      	ldr	r3, [pc, #356]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbba:	4a58      	ldr	r2, [pc, #352]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dbbc:	f023 0304 	bic.w	r3, r3, #4
 800dbc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d015      	beq.n	800dbf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dbca:	f7fc f99f 	bl	8009f0c <HAL_GetTick>
 800dbce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dbd0:	e00a      	b.n	800dbe8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dbd2:	f7fc f99b 	bl	8009f0c <HAL_GetTick>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	1ad3      	subs	r3, r2, r3
 800dbdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d901      	bls.n	800dbe8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800dbe4:	2303      	movs	r3, #3
 800dbe6:	e0d8      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dbe8:	4b4c      	ldr	r3, [pc, #304]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dbea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbec:	f003 0302 	and.w	r3, r3, #2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d0ee      	beq.n	800dbd2 <HAL_RCC_OscConfig+0x386>
 800dbf4:	e014      	b.n	800dc20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dbf6:	f7fc f989 	bl	8009f0c <HAL_GetTick>
 800dbfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dbfc:	e00a      	b.n	800dc14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dbfe:	f7fc f985 	bl	8009f0c <HAL_GetTick>
 800dc02:	4602      	mov	r2, r0
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d901      	bls.n	800dc14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800dc10:	2303      	movs	r3, #3
 800dc12:	e0c2      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dc14:	4b41      	ldr	r3, [pc, #260]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dc16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc18:	f003 0302 	and.w	r3, r3, #2
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1ee      	bne.n	800dbfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dc20:	7dfb      	ldrb	r3, [r7, #23]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d105      	bne.n	800dc32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc26:	4b3d      	ldr	r3, [pc, #244]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2a:	4a3c      	ldr	r2, [pc, #240]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dc2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	699b      	ldr	r3, [r3, #24]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f000 80ae 	beq.w	800dd98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dc3c:	4b37      	ldr	r3, [pc, #220]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	f003 030c 	and.w	r3, r3, #12
 800dc44:	2b08      	cmp	r3, #8
 800dc46:	d06d      	beq.n	800dd24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	d14b      	bne.n	800dce8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc50:	4b32      	ldr	r3, [pc, #200]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a31      	ldr	r2, [pc, #196]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dc56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dc5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc5c:	f7fc f956 	bl	8009f0c <HAL_GetTick>
 800dc60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc62:	e008      	b.n	800dc76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc64:	f7fc f952 	bl	8009f0c <HAL_GetTick>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d901      	bls.n	800dc76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800dc72:	2303      	movs	r3, #3
 800dc74:	e091      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dc76:	4b29      	ldr	r3, [pc, #164]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1f0      	bne.n	800dc64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	69da      	ldr	r2, [r3, #28]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a1b      	ldr	r3, [r3, #32]
 800dc8a:	431a      	orrs	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc90:	019b      	lsls	r3, r3, #6
 800dc92:	431a      	orrs	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc98:	085b      	lsrs	r3, r3, #1
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca4:	061b      	lsls	r3, r3, #24
 800dca6:	431a      	orrs	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcac:	071b      	lsls	r3, r3, #28
 800dcae:	491b      	ldr	r1, [pc, #108]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dcb4:	4b19      	ldr	r3, [pc, #100]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a18      	ldr	r2, [pc, #96]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dcba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dcbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcc0:	f7fc f924 	bl	8009f0c <HAL_GetTick>
 800dcc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dcc6:	e008      	b.n	800dcda <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dcc8:	f7fc f920 	bl	8009f0c <HAL_GetTick>
 800dccc:	4602      	mov	r2, r0
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	d901      	bls.n	800dcda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e05f      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dcda:	4b10      	ldr	r3, [pc, #64]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d0f0      	beq.n	800dcc8 <HAL_RCC_OscConfig+0x47c>
 800dce6:	e057      	b.n	800dd98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dce8:	4b0c      	ldr	r3, [pc, #48]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a0b      	ldr	r2, [pc, #44]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dcee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dcf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcf4:	f7fc f90a 	bl	8009f0c <HAL_GetTick>
 800dcf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dcfa:	e008      	b.n	800dd0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dcfc:	f7fc f906 	bl	8009f0c <HAL_GetTick>
 800dd00:	4602      	mov	r2, r0
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	1ad3      	subs	r3, r2, r3
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	d901      	bls.n	800dd0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800dd0a:	2303      	movs	r3, #3
 800dd0c:	e045      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd0e:	4b03      	ldr	r3, [pc, #12]	; (800dd1c <HAL_RCC_OscConfig+0x4d0>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1f0      	bne.n	800dcfc <HAL_RCC_OscConfig+0x4b0>
 800dd1a:	e03d      	b.n	800dd98 <HAL_RCC_OscConfig+0x54c>
 800dd1c:	40023800 	.word	0x40023800
 800dd20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800dd24:	4b1f      	ldr	r3, [pc, #124]	; (800dda4 <HAL_RCC_OscConfig+0x558>)
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	699b      	ldr	r3, [r3, #24]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d030      	beq.n	800dd94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d129      	bne.n	800dd94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d122      	bne.n	800dd94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dd54:	4013      	ands	r3, r2
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dd5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d119      	bne.n	800dd94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6a:	085b      	lsrs	r3, r3, #1
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d10f      	bne.n	800dd94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d107      	bne.n	800dd94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d001      	beq.n	800dd98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800dd94:	2301      	movs	r3, #1
 800dd96:	e000      	b.n	800dd9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3718      	adds	r7, #24
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	40023800 	.word	0x40023800

0800dda8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d101      	bne.n	800ddc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e0d0      	b.n	800df62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ddc0:	4b6a      	ldr	r3, [pc, #424]	; (800df6c <HAL_RCC_ClockConfig+0x1c4>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f003 030f 	and.w	r3, r3, #15
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d910      	bls.n	800ddf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddce:	4b67      	ldr	r3, [pc, #412]	; (800df6c <HAL_RCC_ClockConfig+0x1c4>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f023 020f 	bic.w	r2, r3, #15
 800ddd6:	4965      	ldr	r1, [pc, #404]	; (800df6c <HAL_RCC_ClockConfig+0x1c4>)
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	4313      	orrs	r3, r2
 800dddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ddde:	4b63      	ldr	r3, [pc, #396]	; (800df6c <HAL_RCC_ClockConfig+0x1c4>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f003 030f 	and.w	r3, r3, #15
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d001      	beq.n	800ddf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ddec:	2301      	movs	r3, #1
 800ddee:	e0b8      	b.n	800df62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f003 0302 	and.w	r3, r3, #2
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d020      	beq.n	800de3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f003 0304 	and.w	r3, r3, #4
 800de04:	2b00      	cmp	r3, #0
 800de06:	d005      	beq.n	800de14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800de08:	4b59      	ldr	r3, [pc, #356]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	4a58      	ldr	r2, [pc, #352]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800de12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d005      	beq.n	800de2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800de20:	4b53      	ldr	r3, [pc, #332]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	4a52      	ldr	r2, [pc, #328]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800de2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de2c:	4b50      	ldr	r3, [pc, #320]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	494d      	ldr	r1, [pc, #308]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de3a:	4313      	orrs	r3, r2
 800de3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	2b00      	cmp	r3, #0
 800de48:	d040      	beq.n	800decc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d107      	bne.n	800de62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800de52:	4b47      	ldr	r3, [pc, #284]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d115      	bne.n	800de8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	e07f      	b.n	800df62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	2b02      	cmp	r3, #2
 800de68:	d107      	bne.n	800de7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800de6a:	4b41      	ldr	r3, [pc, #260]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de72:	2b00      	cmp	r3, #0
 800de74:	d109      	bne.n	800de8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	e073      	b.n	800df62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800de7a:	4b3d      	ldr	r3, [pc, #244]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 0302 	and.w	r3, r3, #2
 800de82:	2b00      	cmp	r3, #0
 800de84:	d101      	bne.n	800de8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800de86:	2301      	movs	r3, #1
 800de88:	e06b      	b.n	800df62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800de8a:	4b39      	ldr	r3, [pc, #228]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	f023 0203 	bic.w	r2, r3, #3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	4936      	ldr	r1, [pc, #216]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800de98:	4313      	orrs	r3, r2
 800de9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de9c:	f7fc f836 	bl	8009f0c <HAL_GetTick>
 800dea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dea2:	e00a      	b.n	800deba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dea4:	f7fc f832 	bl	8009f0c <HAL_GetTick>
 800dea8:	4602      	mov	r2, r0
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	f241 3288 	movw	r2, #5000	; 0x1388
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d901      	bls.n	800deba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800deb6:	2303      	movs	r3, #3
 800deb8:	e053      	b.n	800df62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800deba:	4b2d      	ldr	r3, [pc, #180]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	f003 020c 	and.w	r2, r3, #12
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	429a      	cmp	r2, r3
 800deca:	d1eb      	bne.n	800dea4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800decc:	4b27      	ldr	r3, [pc, #156]	; (800df6c <HAL_RCC_ClockConfig+0x1c4>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f003 030f 	and.w	r3, r3, #15
 800ded4:	683a      	ldr	r2, [r7, #0]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d210      	bcs.n	800defc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800deda:	4b24      	ldr	r3, [pc, #144]	; (800df6c <HAL_RCC_ClockConfig+0x1c4>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f023 020f 	bic.w	r2, r3, #15
 800dee2:	4922      	ldr	r1, [pc, #136]	; (800df6c <HAL_RCC_ClockConfig+0x1c4>)
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	4313      	orrs	r3, r2
 800dee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800deea:	4b20      	ldr	r3, [pc, #128]	; (800df6c <HAL_RCC_ClockConfig+0x1c4>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 030f 	and.w	r3, r3, #15
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	429a      	cmp	r2, r3
 800def6:	d001      	beq.n	800defc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800def8:	2301      	movs	r3, #1
 800defa:	e032      	b.n	800df62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f003 0304 	and.w	r3, r3, #4
 800df04:	2b00      	cmp	r3, #0
 800df06:	d008      	beq.n	800df1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800df08:	4b19      	ldr	r3, [pc, #100]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	4916      	ldr	r1, [pc, #88]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800df16:	4313      	orrs	r3, r2
 800df18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f003 0308 	and.w	r3, r3, #8
 800df22:	2b00      	cmp	r3, #0
 800df24:	d009      	beq.n	800df3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800df26:	4b12      	ldr	r3, [pc, #72]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800df28:	689b      	ldr	r3, [r3, #8]
 800df2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	00db      	lsls	r3, r3, #3
 800df34:	490e      	ldr	r1, [pc, #56]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800df36:	4313      	orrs	r3, r2
 800df38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800df3a:	f000 f821 	bl	800df80 <HAL_RCC_GetSysClockFreq>
 800df3e:	4602      	mov	r2, r0
 800df40:	4b0b      	ldr	r3, [pc, #44]	; (800df70 <HAL_RCC_ClockConfig+0x1c8>)
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	091b      	lsrs	r3, r3, #4
 800df46:	f003 030f 	and.w	r3, r3, #15
 800df4a:	490a      	ldr	r1, [pc, #40]	; (800df74 <HAL_RCC_ClockConfig+0x1cc>)
 800df4c:	5ccb      	ldrb	r3, [r1, r3]
 800df4e:	fa22 f303 	lsr.w	r3, r2, r3
 800df52:	4a09      	ldr	r2, [pc, #36]	; (800df78 <HAL_RCC_ClockConfig+0x1d0>)
 800df54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800df56:	4b09      	ldr	r3, [pc, #36]	; (800df7c <HAL_RCC_ClockConfig+0x1d4>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7f4 f942 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	40023c00 	.word	0x40023c00
 800df70:	40023800 	.word	0x40023800
 800df74:	08027ed0 	.word	0x08027ed0
 800df78:	2000000c 	.word	0x2000000c
 800df7c:	20000010 	.word	0x20000010

0800df80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800df80:	b5b0      	push	{r4, r5, r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800df86:	2100      	movs	r1, #0
 800df88:	6079      	str	r1, [r7, #4]
 800df8a:	2100      	movs	r1, #0
 800df8c:	60f9      	str	r1, [r7, #12]
 800df8e:	2100      	movs	r1, #0
 800df90:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800df92:	2100      	movs	r1, #0
 800df94:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800df96:	4952      	ldr	r1, [pc, #328]	; (800e0e0 <HAL_RCC_GetSysClockFreq+0x160>)
 800df98:	6889      	ldr	r1, [r1, #8]
 800df9a:	f001 010c 	and.w	r1, r1, #12
 800df9e:	2908      	cmp	r1, #8
 800dfa0:	d00d      	beq.n	800dfbe <HAL_RCC_GetSysClockFreq+0x3e>
 800dfa2:	2908      	cmp	r1, #8
 800dfa4:	f200 8094 	bhi.w	800e0d0 <HAL_RCC_GetSysClockFreq+0x150>
 800dfa8:	2900      	cmp	r1, #0
 800dfaa:	d002      	beq.n	800dfb2 <HAL_RCC_GetSysClockFreq+0x32>
 800dfac:	2904      	cmp	r1, #4
 800dfae:	d003      	beq.n	800dfb8 <HAL_RCC_GetSysClockFreq+0x38>
 800dfb0:	e08e      	b.n	800e0d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dfb2:	4b4c      	ldr	r3, [pc, #304]	; (800e0e4 <HAL_RCC_GetSysClockFreq+0x164>)
 800dfb4:	60bb      	str	r3, [r7, #8]
      break;
 800dfb6:	e08e      	b.n	800e0d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dfb8:	4b4b      	ldr	r3, [pc, #300]	; (800e0e8 <HAL_RCC_GetSysClockFreq+0x168>)
 800dfba:	60bb      	str	r3, [r7, #8]
      break;
 800dfbc:	e08b      	b.n	800e0d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dfbe:	4948      	ldr	r1, [pc, #288]	; (800e0e0 <HAL_RCC_GetSysClockFreq+0x160>)
 800dfc0:	6849      	ldr	r1, [r1, #4]
 800dfc2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800dfc6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800dfc8:	4945      	ldr	r1, [pc, #276]	; (800e0e0 <HAL_RCC_GetSysClockFreq+0x160>)
 800dfca:	6849      	ldr	r1, [r1, #4]
 800dfcc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800dfd0:	2900      	cmp	r1, #0
 800dfd2:	d024      	beq.n	800e01e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dfd4:	4942      	ldr	r1, [pc, #264]	; (800e0e0 <HAL_RCC_GetSysClockFreq+0x160>)
 800dfd6:	6849      	ldr	r1, [r1, #4]
 800dfd8:	0989      	lsrs	r1, r1, #6
 800dfda:	4608      	mov	r0, r1
 800dfdc:	f04f 0100 	mov.w	r1, #0
 800dfe0:	f240 14ff 	movw	r4, #511	; 0x1ff
 800dfe4:	f04f 0500 	mov.w	r5, #0
 800dfe8:	ea00 0204 	and.w	r2, r0, r4
 800dfec:	ea01 0305 	and.w	r3, r1, r5
 800dff0:	493d      	ldr	r1, [pc, #244]	; (800e0e8 <HAL_RCC_GetSysClockFreq+0x168>)
 800dff2:	fb01 f003 	mul.w	r0, r1, r3
 800dff6:	2100      	movs	r1, #0
 800dff8:	fb01 f102 	mul.w	r1, r1, r2
 800dffc:	1844      	adds	r4, r0, r1
 800dffe:	493a      	ldr	r1, [pc, #232]	; (800e0e8 <HAL_RCC_GetSysClockFreq+0x168>)
 800e000:	fba2 0101 	umull	r0, r1, r2, r1
 800e004:	1863      	adds	r3, r4, r1
 800e006:	4619      	mov	r1, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	461a      	mov	r2, r3
 800e00c:	f04f 0300 	mov.w	r3, #0
 800e010:	f7f2 f96e 	bl	80002f0 <__aeabi_uldivmod>
 800e014:	4602      	mov	r2, r0
 800e016:	460b      	mov	r3, r1
 800e018:	4613      	mov	r3, r2
 800e01a:	60fb      	str	r3, [r7, #12]
 800e01c:	e04a      	b.n	800e0b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e01e:	4b30      	ldr	r3, [pc, #192]	; (800e0e0 <HAL_RCC_GetSysClockFreq+0x160>)
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	099b      	lsrs	r3, r3, #6
 800e024:	461a      	mov	r2, r3
 800e026:	f04f 0300 	mov.w	r3, #0
 800e02a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e02e:	f04f 0100 	mov.w	r1, #0
 800e032:	ea02 0400 	and.w	r4, r2, r0
 800e036:	ea03 0501 	and.w	r5, r3, r1
 800e03a:	4620      	mov	r0, r4
 800e03c:	4629      	mov	r1, r5
 800e03e:	f04f 0200 	mov.w	r2, #0
 800e042:	f04f 0300 	mov.w	r3, #0
 800e046:	014b      	lsls	r3, r1, #5
 800e048:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e04c:	0142      	lsls	r2, r0, #5
 800e04e:	4610      	mov	r0, r2
 800e050:	4619      	mov	r1, r3
 800e052:	1b00      	subs	r0, r0, r4
 800e054:	eb61 0105 	sbc.w	r1, r1, r5
 800e058:	f04f 0200 	mov.w	r2, #0
 800e05c:	f04f 0300 	mov.w	r3, #0
 800e060:	018b      	lsls	r3, r1, #6
 800e062:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e066:	0182      	lsls	r2, r0, #6
 800e068:	1a12      	subs	r2, r2, r0
 800e06a:	eb63 0301 	sbc.w	r3, r3, r1
 800e06e:	f04f 0000 	mov.w	r0, #0
 800e072:	f04f 0100 	mov.w	r1, #0
 800e076:	00d9      	lsls	r1, r3, #3
 800e078:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e07c:	00d0      	lsls	r0, r2, #3
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	1912      	adds	r2, r2, r4
 800e084:	eb45 0303 	adc.w	r3, r5, r3
 800e088:	f04f 0000 	mov.w	r0, #0
 800e08c:	f04f 0100 	mov.w	r1, #0
 800e090:	0299      	lsls	r1, r3, #10
 800e092:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e096:	0290      	lsls	r0, r2, #10
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	4610      	mov	r0, r2
 800e09e:	4619      	mov	r1, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	f04f 0300 	mov.w	r3, #0
 800e0a8:	f7f2 f922 	bl	80002f0 <__aeabi_uldivmod>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e0b4:	4b0a      	ldr	r3, [pc, #40]	; (800e0e0 <HAL_RCC_GetSysClockFreq+0x160>)
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	0c1b      	lsrs	r3, r3, #16
 800e0ba:	f003 0303 	and.w	r3, r3, #3
 800e0be:	3301      	adds	r3, #1
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0cc:	60bb      	str	r3, [r7, #8]
      break;
 800e0ce:	e002      	b.n	800e0d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e0d0:	4b04      	ldr	r3, [pc, #16]	; (800e0e4 <HAL_RCC_GetSysClockFreq+0x164>)
 800e0d2:	60bb      	str	r3, [r7, #8]
      break;
 800e0d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bdb0      	pop	{r4, r5, r7, pc}
 800e0e0:	40023800 	.word	0x40023800
 800e0e4:	00f42400 	.word	0x00f42400
 800e0e8:	017d7840 	.word	0x017d7840

0800e0ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e0f0:	4b03      	ldr	r3, [pc, #12]	; (800e100 <HAL_RCC_GetHCLKFreq+0x14>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop
 800e100:	2000000c 	.word	0x2000000c

0800e104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e108:	f7ff fff0 	bl	800e0ec <HAL_RCC_GetHCLKFreq>
 800e10c:	4602      	mov	r2, r0
 800e10e:	4b05      	ldr	r3, [pc, #20]	; (800e124 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	0a9b      	lsrs	r3, r3, #10
 800e114:	f003 0307 	and.w	r3, r3, #7
 800e118:	4903      	ldr	r1, [pc, #12]	; (800e128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e11a:	5ccb      	ldrb	r3, [r1, r3]
 800e11c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e120:	4618      	mov	r0, r3
 800e122:	bd80      	pop	{r7, pc}
 800e124:	40023800 	.word	0x40023800
 800e128:	08027ee0 	.word	0x08027ee0

0800e12c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	220f      	movs	r2, #15
 800e13a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e13c:	4b12      	ldr	r3, [pc, #72]	; (800e188 <HAL_RCC_GetClockConfig+0x5c>)
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	f003 0203 	and.w	r2, r3, #3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e148:	4b0f      	ldr	r3, [pc, #60]	; (800e188 <HAL_RCC_GetClockConfig+0x5c>)
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e154:	4b0c      	ldr	r3, [pc, #48]	; (800e188 <HAL_RCC_GetClockConfig+0x5c>)
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e160:	4b09      	ldr	r3, [pc, #36]	; (800e188 <HAL_RCC_GetClockConfig+0x5c>)
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	08db      	lsrs	r3, r3, #3
 800e166:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e16e:	4b07      	ldr	r3, [pc, #28]	; (800e18c <HAL_RCC_GetClockConfig+0x60>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f003 020f 	and.w	r2, r3, #15
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	601a      	str	r2, [r3, #0]
}
 800e17a:	bf00      	nop
 800e17c:	370c      	adds	r7, #12
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	40023800 	.word	0x40023800
 800e18c:	40023c00 	.word	0x40023c00

0800e190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b088      	sub	sp, #32
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e198:	2300      	movs	r3, #0
 800e19a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f003 0301 	and.w	r3, r3, #1
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d012      	beq.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e1b8:	4b69      	ldr	r3, [pc, #420]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	4a68      	ldr	r2, [pc, #416]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e1c2:	6093      	str	r3, [r2, #8]
 800e1c4:	4b66      	ldr	r3, [pc, #408]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1c6:	689a      	ldr	r2, [r3, #8]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1cc:	4964      	ldr	r1, [pc, #400]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d101      	bne.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d017      	beq.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e1ea:	4b5d      	ldr	r3, [pc, #372]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1f8:	4959      	ldr	r1, [pc, #356]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e208:	d101      	bne.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e20a:	2301      	movs	r3, #1
 800e20c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e212:	2b00      	cmp	r3, #0
 800e214:	d101      	bne.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e216:	2301      	movs	r3, #1
 800e218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e222:	2b00      	cmp	r3, #0
 800e224:	d017      	beq.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e226:	4b4e      	ldr	r3, [pc, #312]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e22c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e234:	494a      	ldr	r1, [pc, #296]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e236:	4313      	orrs	r3, r2
 800e238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e244:	d101      	bne.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e246:	2301      	movs	r3, #1
 800e248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d101      	bne.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e252:	2301      	movs	r3, #1
 800e254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d001      	beq.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e262:	2301      	movs	r3, #1
 800e264:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f003 0320 	and.w	r3, r3, #32
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f000 808b 	beq.w	800e38a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e274:	4b3a      	ldr	r3, [pc, #232]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e278:	4a39      	ldr	r2, [pc, #228]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e27a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e27e:	6413      	str	r3, [r2, #64]	; 0x40
 800e280:	4b37      	ldr	r3, [pc, #220]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e288:	60bb      	str	r3, [r7, #8]
 800e28a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e28c:	4b35      	ldr	r3, [pc, #212]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a34      	ldr	r2, [pc, #208]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e298:	f7fb fe38 	bl	8009f0c <HAL_GetTick>
 800e29c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e29e:	e008      	b.n	800e2b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e2a0:	f7fb fe34 	bl	8009f0c <HAL_GetTick>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	2b64      	cmp	r3, #100	; 0x64
 800e2ac:	d901      	bls.n	800e2b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	e38f      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e2b2:	4b2c      	ldr	r3, [pc, #176]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d0f0      	beq.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e2be:	4b28      	ldr	r3, [pc, #160]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d035      	beq.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2d6:	693a      	ldr	r2, [r7, #16]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d02e      	beq.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e2dc:	4b20      	ldr	r3, [pc, #128]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e2e6:	4b1e      	ldr	r3, [pc, #120]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ea:	4a1d      	ldr	r2, [pc, #116]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e2f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e2f2:	4b1b      	ldr	r3, [pc, #108]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2f6:	4a1a      	ldr	r2, [pc, #104]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e2f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e2fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e2fe:	4a18      	ldr	r2, [pc, #96]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e304:	4b16      	ldr	r3, [pc, #88]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e308:	f003 0301 	and.w	r3, r3, #1
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d114      	bne.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e310:	f7fb fdfc 	bl	8009f0c <HAL_GetTick>
 800e314:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e316:	e00a      	b.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e318:	f7fb fdf8 	bl	8009f0c <HAL_GetTick>
 800e31c:	4602      	mov	r2, r0
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	f241 3288 	movw	r2, #5000	; 0x1388
 800e326:	4293      	cmp	r3, r2
 800e328:	d901      	bls.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e32a:	2303      	movs	r3, #3
 800e32c:	e351      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e32e:	4b0c      	ldr	r3, [pc, #48]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e332:	f003 0302 	and.w	r3, r3, #2
 800e336:	2b00      	cmp	r3, #0
 800e338:	d0ee      	beq.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e33e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e346:	d111      	bne.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e348:	4b05      	ldr	r3, [pc, #20]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e354:	4b04      	ldr	r3, [pc, #16]	; (800e368 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e356:	400b      	ands	r3, r1
 800e358:	4901      	ldr	r1, [pc, #4]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e35a:	4313      	orrs	r3, r2
 800e35c:	608b      	str	r3, [r1, #8]
 800e35e:	e00b      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e360:	40023800 	.word	0x40023800
 800e364:	40007000 	.word	0x40007000
 800e368:	0ffffcff 	.word	0x0ffffcff
 800e36c:	4bb3      	ldr	r3, [pc, #716]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	4ab2      	ldr	r2, [pc, #712]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e372:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e376:	6093      	str	r3, [r2, #8]
 800e378:	4bb0      	ldr	r3, [pc, #704]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e37a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e384:	49ad      	ldr	r1, [pc, #692]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e386:	4313      	orrs	r3, r2
 800e388:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f003 0310 	and.w	r3, r3, #16
 800e392:	2b00      	cmp	r3, #0
 800e394:	d010      	beq.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e396:	4ba9      	ldr	r3, [pc, #676]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e39c:	4aa7      	ldr	r2, [pc, #668]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e39e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e3a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e3a6:	4ba5      	ldr	r3, [pc, #660]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b0:	49a2      	ldr	r1, [pc, #648]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d00a      	beq.n	800e3da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e3c4:	4b9d      	ldr	r3, [pc, #628]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3d2:	499a      	ldr	r1, [pc, #616]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00a      	beq.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e3e6:	4b95      	ldr	r3, [pc, #596]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3f4:	4991      	ldr	r1, [pc, #580]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00a      	beq.n	800e41e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e408:	4b8c      	ldr	r3, [pc, #560]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e40e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e416:	4989      	ldr	r1, [pc, #548]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e418:	4313      	orrs	r3, r2
 800e41a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00a      	beq.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e42a:	4b84      	ldr	r3, [pc, #528]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e42c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e430:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e438:	4980      	ldr	r1, [pc, #512]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e43a:	4313      	orrs	r3, r2
 800e43c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d00a      	beq.n	800e462 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e44c:	4b7b      	ldr	r3, [pc, #492]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e452:	f023 0203 	bic.w	r2, r3, #3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e45a:	4978      	ldr	r1, [pc, #480]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e45c:	4313      	orrs	r3, r2
 800e45e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00a      	beq.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e46e:	4b73      	ldr	r3, [pc, #460]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e474:	f023 020c 	bic.w	r2, r3, #12
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e47c:	496f      	ldr	r1, [pc, #444]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e47e:	4313      	orrs	r3, r2
 800e480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00a      	beq.n	800e4a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e490:	4b6a      	ldr	r3, [pc, #424]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e496:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e49e:	4967      	ldr	r1, [pc, #412]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d00a      	beq.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e4b2:	4b62      	ldr	r3, [pc, #392]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4c0:	495e      	ldr	r1, [pc, #376]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00a      	beq.n	800e4ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e4d4:	4b59      	ldr	r3, [pc, #356]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4e2:	4956      	ldr	r1, [pc, #344]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00a      	beq.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e4f6:	4b51      	ldr	r3, [pc, #324]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e504:	494d      	ldr	r1, [pc, #308]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e506:	4313      	orrs	r3, r2
 800e508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00a      	beq.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e518:	4b48      	ldr	r3, [pc, #288]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e51e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e526:	4945      	ldr	r1, [pc, #276]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e528:	4313      	orrs	r3, r2
 800e52a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00a      	beq.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e53a:	4b40      	ldr	r3, [pc, #256]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e540:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e548:	493c      	ldr	r1, [pc, #240]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e54a:	4313      	orrs	r3, r2
 800e54c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00a      	beq.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e55c:	4b37      	ldr	r3, [pc, #220]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e562:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e56a:	4934      	ldr	r1, [pc, #208]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e56c:	4313      	orrs	r3, r2
 800e56e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d011      	beq.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e57e:	4b2f      	ldr	r3, [pc, #188]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e584:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e58c:	492b      	ldr	r1, [pc, #172]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e58e:	4313      	orrs	r3, r2
 800e590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e59c:	d101      	bne.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f003 0308 	and.w	r3, r3, #8
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d001      	beq.n	800e5b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00a      	beq.n	800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e5be:	4b1f      	ldr	r3, [pc, #124]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5cc:	491b      	ldr	r1, [pc, #108]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00b      	beq.n	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e5e0:	4b16      	ldr	r3, [pc, #88]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5f0:	4912      	ldr	r1, [pc, #72]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00b      	beq.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e604:	4b0d      	ldr	r3, [pc, #52]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e60a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e614:	4909      	ldr	r1, [pc, #36]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e616:	4313      	orrs	r3, r2
 800e618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00f      	beq.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e628:	4b04      	ldr	r3, [pc, #16]	; (800e63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e62e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e638:	e002      	b.n	800e640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800e63a:	bf00      	nop
 800e63c:	40023800 	.word	0x40023800
 800e640:	4986      	ldr	r1, [pc, #536]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e642:	4313      	orrs	r3, r2
 800e644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00b      	beq.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e654:	4b81      	ldr	r3, [pc, #516]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e65a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e664:	497d      	ldr	r1, [pc, #500]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e666:	4313      	orrs	r3, r2
 800e668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d006      	beq.n	800e680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 80d6 	beq.w	800e82c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e680:	4b76      	ldr	r3, [pc, #472]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4a75      	ldr	r2, [pc, #468]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e68a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e68c:	f7fb fc3e 	bl	8009f0c <HAL_GetTick>
 800e690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e692:	e008      	b.n	800e6a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e694:	f7fb fc3a 	bl	8009f0c <HAL_GetTick>
 800e698:	4602      	mov	r2, r0
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	1ad3      	subs	r3, r2, r3
 800e69e:	2b64      	cmp	r3, #100	; 0x64
 800e6a0:	d901      	bls.n	800e6a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	e195      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e6a6:	4b6d      	ldr	r3, [pc, #436]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d1f0      	bne.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f003 0301 	and.w	r3, r3, #1
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d021      	beq.n	800e702 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d11d      	bne.n	800e702 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e6c6:	4b65      	ldr	r3, [pc, #404]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6cc:	0c1b      	lsrs	r3, r3, #16
 800e6ce:	f003 0303 	and.w	r3, r3, #3
 800e6d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e6d4:	4b61      	ldr	r3, [pc, #388]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6da:	0e1b      	lsrs	r3, r3, #24
 800e6dc:	f003 030f 	and.w	r3, r3, #15
 800e6e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	019a      	lsls	r2, r3, #6
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	041b      	lsls	r3, r3, #16
 800e6ec:	431a      	orrs	r2, r3
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	061b      	lsls	r3, r3, #24
 800e6f2:	431a      	orrs	r2, r3
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	071b      	lsls	r3, r3, #28
 800e6fa:	4958      	ldr	r1, [pc, #352]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d004      	beq.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e716:	d00a      	beq.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e720:	2b00      	cmp	r3, #0
 800e722:	d02e      	beq.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e72c:	d129      	bne.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e72e:	4b4b      	ldr	r3, [pc, #300]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e734:	0c1b      	lsrs	r3, r3, #16
 800e736:	f003 0303 	and.w	r3, r3, #3
 800e73a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e73c:	4b47      	ldr	r3, [pc, #284]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e742:	0f1b      	lsrs	r3, r3, #28
 800e744:	f003 0307 	and.w	r3, r3, #7
 800e748:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	019a      	lsls	r2, r3, #6
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	041b      	lsls	r3, r3, #16
 800e754:	431a      	orrs	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	061b      	lsls	r3, r3, #24
 800e75c:	431a      	orrs	r2, r3
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	071b      	lsls	r3, r3, #28
 800e762:	493e      	ldr	r1, [pc, #248]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e764:	4313      	orrs	r3, r2
 800e766:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e76a:	4b3c      	ldr	r3, [pc, #240]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e770:	f023 021f 	bic.w	r2, r3, #31
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e778:	3b01      	subs	r3, #1
 800e77a:	4938      	ldr	r1, [pc, #224]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e77c:	4313      	orrs	r3, r2
 800e77e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d01d      	beq.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e78e:	4b33      	ldr	r3, [pc, #204]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e794:	0e1b      	lsrs	r3, r3, #24
 800e796:	f003 030f 	and.w	r3, r3, #15
 800e79a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e79c:	4b2f      	ldr	r3, [pc, #188]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7a2:	0f1b      	lsrs	r3, r3, #28
 800e7a4:	f003 0307 	and.w	r3, r3, #7
 800e7a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	019a      	lsls	r2, r3, #6
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	041b      	lsls	r3, r3, #16
 800e7b6:	431a      	orrs	r2, r3
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	061b      	lsls	r3, r3, #24
 800e7bc:	431a      	orrs	r2, r3
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	071b      	lsls	r3, r3, #28
 800e7c2:	4926      	ldr	r1, [pc, #152]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d011      	beq.n	800e7fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	019a      	lsls	r2, r3, #6
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	691b      	ldr	r3, [r3, #16]
 800e7e0:	041b      	lsls	r3, r3, #16
 800e7e2:	431a      	orrs	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	061b      	lsls	r3, r3, #24
 800e7ea:	431a      	orrs	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	071b      	lsls	r3, r3, #28
 800e7f2:	491a      	ldr	r1, [pc, #104]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e7fa:	4b18      	ldr	r3, [pc, #96]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4a17      	ldr	r2, [pc, #92]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e806:	f7fb fb81 	bl	8009f0c <HAL_GetTick>
 800e80a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e80c:	e008      	b.n	800e820 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e80e:	f7fb fb7d 	bl	8009f0c <HAL_GetTick>
 800e812:	4602      	mov	r2, r0
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	2b64      	cmp	r3, #100	; 0x64
 800e81a:	d901      	bls.n	800e820 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e81c:	2303      	movs	r3, #3
 800e81e:	e0d8      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e820:	4b0e      	ldr	r3, [pc, #56]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d0f0      	beq.n	800e80e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	2b01      	cmp	r3, #1
 800e830:	f040 80ce 	bne.w	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e834:	4b09      	ldr	r3, [pc, #36]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a08      	ldr	r2, [pc, #32]	; (800e85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e83a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e83e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e840:	f7fb fb64 	bl	8009f0c <HAL_GetTick>
 800e844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e846:	e00b      	b.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e848:	f7fb fb60 	bl	8009f0c <HAL_GetTick>
 800e84c:	4602      	mov	r2, r0
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	2b64      	cmp	r3, #100	; 0x64
 800e854:	d904      	bls.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e856:	2303      	movs	r3, #3
 800e858:	e0bb      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800e85a:	bf00      	nop
 800e85c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e860:	4b5e      	ldr	r3, [pc, #376]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e86c:	d0ec      	beq.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d009      	beq.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d02e      	beq.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e892:	2b00      	cmp	r3, #0
 800e894:	d12a      	bne.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e896:	4b51      	ldr	r3, [pc, #324]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e89c:	0c1b      	lsrs	r3, r3, #16
 800e89e:	f003 0303 	and.w	r3, r3, #3
 800e8a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e8a4:	4b4d      	ldr	r3, [pc, #308]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8aa:	0f1b      	lsrs	r3, r3, #28
 800e8ac:	f003 0307 	and.w	r3, r3, #7
 800e8b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	695b      	ldr	r3, [r3, #20]
 800e8b6:	019a      	lsls	r2, r3, #6
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	041b      	lsls	r3, r3, #16
 800e8bc:	431a      	orrs	r2, r3
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	699b      	ldr	r3, [r3, #24]
 800e8c2:	061b      	lsls	r3, r3, #24
 800e8c4:	431a      	orrs	r2, r3
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	071b      	lsls	r3, r3, #28
 800e8ca:	4944      	ldr	r1, [pc, #272]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e8d2:	4b42      	ldr	r3, [pc, #264]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e8d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	021b      	lsls	r3, r3, #8
 800e8e4:	493d      	ldr	r1, [pc, #244]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d022      	beq.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e900:	d11d      	bne.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e902:	4b36      	ldr	r3, [pc, #216]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e908:	0e1b      	lsrs	r3, r3, #24
 800e90a:	f003 030f 	and.w	r3, r3, #15
 800e90e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e910:	4b32      	ldr	r3, [pc, #200]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e916:	0f1b      	lsrs	r3, r3, #28
 800e918:	f003 0307 	and.w	r3, r3, #7
 800e91c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	695b      	ldr	r3, [r3, #20]
 800e922:	019a      	lsls	r2, r3, #6
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a1b      	ldr	r3, [r3, #32]
 800e928:	041b      	lsls	r3, r3, #16
 800e92a:	431a      	orrs	r2, r3
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	061b      	lsls	r3, r3, #24
 800e930:	431a      	orrs	r2, r3
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	071b      	lsls	r3, r3, #28
 800e936:	4929      	ldr	r1, [pc, #164]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e938:	4313      	orrs	r3, r2
 800e93a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f003 0308 	and.w	r3, r3, #8
 800e946:	2b00      	cmp	r3, #0
 800e948:	d028      	beq.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e94a:	4b24      	ldr	r3, [pc, #144]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e950:	0e1b      	lsrs	r3, r3, #24
 800e952:	f003 030f 	and.w	r3, r3, #15
 800e956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e958:	4b20      	ldr	r3, [pc, #128]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e95e:	0c1b      	lsrs	r3, r3, #16
 800e960:	f003 0303 	and.w	r3, r3, #3
 800e964:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	695b      	ldr	r3, [r3, #20]
 800e96a:	019a      	lsls	r2, r3, #6
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	041b      	lsls	r3, r3, #16
 800e970:	431a      	orrs	r2, r3
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	061b      	lsls	r3, r3, #24
 800e976:	431a      	orrs	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	69db      	ldr	r3, [r3, #28]
 800e97c:	071b      	lsls	r3, r3, #28
 800e97e:	4917      	ldr	r1, [pc, #92]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e980:	4313      	orrs	r3, r2
 800e982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e986:	4b15      	ldr	r3, [pc, #84]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e98c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e994:	4911      	ldr	r1, [pc, #68]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e996:	4313      	orrs	r3, r2
 800e998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e99c:	4b0f      	ldr	r3, [pc, #60]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a0e      	ldr	r2, [pc, #56]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e9a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9a8:	f7fb fab0 	bl	8009f0c <HAL_GetTick>
 800e9ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e9ae:	e008      	b.n	800e9c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e9b0:	f7fb faac 	bl	8009f0c <HAL_GetTick>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	2b64      	cmp	r3, #100	; 0x64
 800e9bc:	d901      	bls.n	800e9c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e9be:	2303      	movs	r3, #3
 800e9c0:	e007      	b.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e9c2:	4b06      	ldr	r3, [pc, #24]	; (800e9dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e9ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9ce:	d1ef      	bne.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3720      	adds	r7, #32
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	40023800 	.word	0x40023800

0800e9e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d101      	bne.n	800e9f4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e025      	b.n	800ea40 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d106      	bne.n	800ea0e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7f2 ff03 	bl	8001814 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2202      	movs	r2, #2
 800ea12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4610      	mov	r0, r2
 800ea22:	f001 fdd1 	bl	80105c8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6818      	ldr	r0, [r3, #0]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	f001 fe3b 	bl	80106ac <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d101      	bne.n	800ea64 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ea60:	2302      	movs	r3, #2
 800ea62:	e018      	b.n	800ea96 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2202      	movs	r2, #2
 800ea68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	68b9      	ldr	r1, [r7, #8]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f001 fe99 	bl	80107ac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d104      	bne.n	800ea8c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2205      	movs	r2, #5
 800ea86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800ea8a:	e003      	b.n	800ea94 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b082      	sub	sp, #8
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
 800eaa6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	2b02      	cmp	r3, #2
 800eab2:	d101      	bne.n	800eab8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800eab4:	2302      	movs	r3, #2
 800eab6:	e00e      	b.n	800ead6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2202      	movs	r2, #2
 800eabc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	6839      	ldr	r1, [r7, #0]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f001 fe94 	bl	80107f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800ead4:	2300      	movs	r3, #0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eade:	b580      	push	{r7, lr}
 800eae0:	b082      	sub	sp, #8
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d101      	bne.n	800eaf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eaec:	2301      	movs	r3, #1
 800eaee:	e049      	b.n	800eb84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d106      	bne.n	800eb0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f7f3 fddd 	bl	80026c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2202      	movs	r2, #2
 800eb0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	3304      	adds	r3, #4
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	4610      	mov	r0, r2
 800eb1e:	f001 f8e9 	bl	800fcf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2201      	movs	r2, #1
 800eb26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2201      	movs	r2, #1
 800eb36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d001      	beq.n	800eba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eba0:	2301      	movs	r3, #1
 800eba2:	e054      	b.n	800ec4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2202      	movs	r2, #2
 800eba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68da      	ldr	r2, [r3, #12]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f042 0201 	orr.w	r2, r2, #1
 800ebba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a26      	ldr	r2, [pc, #152]	; (800ec5c <HAL_TIM_Base_Start_IT+0xd0>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d022      	beq.n	800ec0c <HAL_TIM_Base_Start_IT+0x80>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebce:	d01d      	beq.n	800ec0c <HAL_TIM_Base_Start_IT+0x80>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a22      	ldr	r2, [pc, #136]	; (800ec60 <HAL_TIM_Base_Start_IT+0xd4>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d018      	beq.n	800ec0c <HAL_TIM_Base_Start_IT+0x80>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a21      	ldr	r2, [pc, #132]	; (800ec64 <HAL_TIM_Base_Start_IT+0xd8>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d013      	beq.n	800ec0c <HAL_TIM_Base_Start_IT+0x80>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a1f      	ldr	r2, [pc, #124]	; (800ec68 <HAL_TIM_Base_Start_IT+0xdc>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d00e      	beq.n	800ec0c <HAL_TIM_Base_Start_IT+0x80>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a1e      	ldr	r2, [pc, #120]	; (800ec6c <HAL_TIM_Base_Start_IT+0xe0>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d009      	beq.n	800ec0c <HAL_TIM_Base_Start_IT+0x80>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a1c      	ldr	r2, [pc, #112]	; (800ec70 <HAL_TIM_Base_Start_IT+0xe4>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d004      	beq.n	800ec0c <HAL_TIM_Base_Start_IT+0x80>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4a1b      	ldr	r2, [pc, #108]	; (800ec74 <HAL_TIM_Base_Start_IT+0xe8>)
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d115      	bne.n	800ec38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	689a      	ldr	r2, [r3, #8]
 800ec12:	4b19      	ldr	r3, [pc, #100]	; (800ec78 <HAL_TIM_Base_Start_IT+0xec>)
 800ec14:	4013      	ands	r3, r2
 800ec16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2b06      	cmp	r3, #6
 800ec1c:	d015      	beq.n	800ec4a <HAL_TIM_Base_Start_IT+0xbe>
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec24:	d011      	beq.n	800ec4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f042 0201 	orr.w	r2, r2, #1
 800ec34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec36:	e008      	b.n	800ec4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f042 0201 	orr.w	r2, r2, #1
 800ec46:	601a      	str	r2, [r3, #0]
 800ec48:	e000      	b.n	800ec4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3714      	adds	r7, #20
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr
 800ec5a:	bf00      	nop
 800ec5c:	40010000 	.word	0x40010000
 800ec60:	40000400 	.word	0x40000400
 800ec64:	40000800 	.word	0x40000800
 800ec68:	40000c00 	.word	0x40000c00
 800ec6c:	40010400 	.word	0x40010400
 800ec70:	40014000 	.word	0x40014000
 800ec74:	40001800 	.word	0x40001800
 800ec78:	00010007 	.word	0x00010007

0800ec7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e049      	b.n	800ed22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d106      	bne.n	800eca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f841 	bl	800ed2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2202      	movs	r2, #2
 800ecac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	4619      	mov	r1, r3
 800ecba:	4610      	mov	r0, r2
 800ecbc:	f001 f81a 	bl	800fcf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2201      	movs	r2, #1
 800ece4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ed2a:	b480      	push	{r7}
 800ed2c:	b083      	sub	sp, #12
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ed32:	bf00      	nop
 800ed34:	370c      	adds	r7, #12
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
	...

0800ed40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d109      	bne.n	800ed64 <HAL_TIM_PWM_Start+0x24>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	bf14      	ite	ne
 800ed5c:	2301      	movne	r3, #1
 800ed5e:	2300      	moveq	r3, #0
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	e03c      	b.n	800edde <HAL_TIM_PWM_Start+0x9e>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	2b04      	cmp	r3, #4
 800ed68:	d109      	bne.n	800ed7e <HAL_TIM_PWM_Start+0x3e>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	bf14      	ite	ne
 800ed76:	2301      	movne	r3, #1
 800ed78:	2300      	moveq	r3, #0
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	e02f      	b.n	800edde <HAL_TIM_PWM_Start+0x9e>
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b08      	cmp	r3, #8
 800ed82:	d109      	bne.n	800ed98 <HAL_TIM_PWM_Start+0x58>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	bf14      	ite	ne
 800ed90:	2301      	movne	r3, #1
 800ed92:	2300      	moveq	r3, #0
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	e022      	b.n	800edde <HAL_TIM_PWM_Start+0x9e>
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	2b0c      	cmp	r3, #12
 800ed9c:	d109      	bne.n	800edb2 <HAL_TIM_PWM_Start+0x72>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	bf14      	ite	ne
 800edaa:	2301      	movne	r3, #1
 800edac:	2300      	moveq	r3, #0
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	e015      	b.n	800edde <HAL_TIM_PWM_Start+0x9e>
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	2b10      	cmp	r3, #16
 800edb6:	d109      	bne.n	800edcc <HAL_TIM_PWM_Start+0x8c>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	bf14      	ite	ne
 800edc4:	2301      	movne	r3, #1
 800edc6:	2300      	moveq	r3, #0
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	e008      	b.n	800edde <HAL_TIM_PWM_Start+0x9e>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	bf14      	ite	ne
 800edd8:	2301      	movne	r3, #1
 800edda:	2300      	moveq	r3, #0
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d001      	beq.n	800ede6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
 800ede4:	e092      	b.n	800ef0c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d104      	bne.n	800edf6 <HAL_TIM_PWM_Start+0xb6>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2202      	movs	r2, #2
 800edf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800edf4:	e023      	b.n	800ee3e <HAL_TIM_PWM_Start+0xfe>
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	2b04      	cmp	r3, #4
 800edfa:	d104      	bne.n	800ee06 <HAL_TIM_PWM_Start+0xc6>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2202      	movs	r2, #2
 800ee00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee04:	e01b      	b.n	800ee3e <HAL_TIM_PWM_Start+0xfe>
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	2b08      	cmp	r3, #8
 800ee0a:	d104      	bne.n	800ee16 <HAL_TIM_PWM_Start+0xd6>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2202      	movs	r2, #2
 800ee10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee14:	e013      	b.n	800ee3e <HAL_TIM_PWM_Start+0xfe>
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b0c      	cmp	r3, #12
 800ee1a:	d104      	bne.n	800ee26 <HAL_TIM_PWM_Start+0xe6>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2202      	movs	r2, #2
 800ee20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee24:	e00b      	b.n	800ee3e <HAL_TIM_PWM_Start+0xfe>
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	2b10      	cmp	r3, #16
 800ee2a:	d104      	bne.n	800ee36 <HAL_TIM_PWM_Start+0xf6>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2202      	movs	r2, #2
 800ee30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee34:	e003      	b.n	800ee3e <HAL_TIM_PWM_Start+0xfe>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2202      	movs	r2, #2
 800ee3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2201      	movs	r2, #1
 800ee44:	6839      	ldr	r1, [r7, #0]
 800ee46:	4618      	mov	r0, r3
 800ee48:	f001 faec 	bl	8010424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	4a30      	ldr	r2, [pc, #192]	; (800ef14 <HAL_TIM_PWM_Start+0x1d4>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d004      	beq.n	800ee60 <HAL_TIM_PWM_Start+0x120>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	4a2f      	ldr	r2, [pc, #188]	; (800ef18 <HAL_TIM_PWM_Start+0x1d8>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d101      	bne.n	800ee64 <HAL_TIM_PWM_Start+0x124>
 800ee60:	2301      	movs	r3, #1
 800ee62:	e000      	b.n	800ee66 <HAL_TIM_PWM_Start+0x126>
 800ee64:	2300      	movs	r3, #0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d007      	beq.n	800ee7a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a25      	ldr	r2, [pc, #148]	; (800ef14 <HAL_TIM_PWM_Start+0x1d4>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d022      	beq.n	800eeca <HAL_TIM_PWM_Start+0x18a>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee8c:	d01d      	beq.n	800eeca <HAL_TIM_PWM_Start+0x18a>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4a22      	ldr	r2, [pc, #136]	; (800ef1c <HAL_TIM_PWM_Start+0x1dc>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d018      	beq.n	800eeca <HAL_TIM_PWM_Start+0x18a>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a20      	ldr	r2, [pc, #128]	; (800ef20 <HAL_TIM_PWM_Start+0x1e0>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d013      	beq.n	800eeca <HAL_TIM_PWM_Start+0x18a>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4a1f      	ldr	r2, [pc, #124]	; (800ef24 <HAL_TIM_PWM_Start+0x1e4>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d00e      	beq.n	800eeca <HAL_TIM_PWM_Start+0x18a>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a19      	ldr	r2, [pc, #100]	; (800ef18 <HAL_TIM_PWM_Start+0x1d8>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d009      	beq.n	800eeca <HAL_TIM_PWM_Start+0x18a>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a1b      	ldr	r2, [pc, #108]	; (800ef28 <HAL_TIM_PWM_Start+0x1e8>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d004      	beq.n	800eeca <HAL_TIM_PWM_Start+0x18a>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a19      	ldr	r2, [pc, #100]	; (800ef2c <HAL_TIM_PWM_Start+0x1ec>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d115      	bne.n	800eef6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	689a      	ldr	r2, [r3, #8]
 800eed0:	4b17      	ldr	r3, [pc, #92]	; (800ef30 <HAL_TIM_PWM_Start+0x1f0>)
 800eed2:	4013      	ands	r3, r2
 800eed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b06      	cmp	r3, #6
 800eeda:	d015      	beq.n	800ef08 <HAL_TIM_PWM_Start+0x1c8>
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eee2:	d011      	beq.n	800ef08 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f042 0201 	orr.w	r2, r2, #1
 800eef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eef4:	e008      	b.n	800ef08 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f042 0201 	orr.w	r2, r2, #1
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	e000      	b.n	800ef0a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef0a:	2300      	movs	r3, #0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	40010000 	.word	0x40010000
 800ef18:	40010400 	.word	0x40010400
 800ef1c:	40000400 	.word	0x40000400
 800ef20:	40000800 	.word	0x40000800
 800ef24:	40000c00 	.word	0x40000c00
 800ef28:	40014000 	.word	0x40014000
 800ef2c:	40001800 	.word	0x40001800
 800ef30:	00010007 	.word	0x00010007

0800ef34 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
 800ef40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d109      	bne.n	800ef5c <HAL_TIM_PWM_Start_DMA+0x28>
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	2b02      	cmp	r3, #2
 800ef52:	bf0c      	ite	eq
 800ef54:	2301      	moveq	r3, #1
 800ef56:	2300      	movne	r3, #0
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	e03c      	b.n	800efd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	2b04      	cmp	r3, #4
 800ef60:	d109      	bne.n	800ef76 <HAL_TIM_PWM_Start_DMA+0x42>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	bf0c      	ite	eq
 800ef6e:	2301      	moveq	r3, #1
 800ef70:	2300      	movne	r3, #0
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	e02f      	b.n	800efd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2b08      	cmp	r3, #8
 800ef7a:	d109      	bne.n	800ef90 <HAL_TIM_PWM_Start_DMA+0x5c>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	bf0c      	ite	eq
 800ef88:	2301      	moveq	r3, #1
 800ef8a:	2300      	movne	r3, #0
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	e022      	b.n	800efd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	2b0c      	cmp	r3, #12
 800ef94:	d109      	bne.n	800efaa <HAL_TIM_PWM_Start_DMA+0x76>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	2b02      	cmp	r3, #2
 800efa0:	bf0c      	ite	eq
 800efa2:	2301      	moveq	r3, #1
 800efa4:	2300      	movne	r3, #0
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	e015      	b.n	800efd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	2b10      	cmp	r3, #16
 800efae:	d109      	bne.n	800efc4 <HAL_TIM_PWM_Start_DMA+0x90>
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	2b02      	cmp	r3, #2
 800efba:	bf0c      	ite	eq
 800efbc:	2301      	moveq	r3, #1
 800efbe:	2300      	movne	r3, #0
 800efc0:	b2db      	uxtb	r3, r3
 800efc2:	e008      	b.n	800efd6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	2b02      	cmp	r3, #2
 800efce:	bf0c      	ite	eq
 800efd0:	2301      	moveq	r3, #1
 800efd2:	2300      	movne	r3, #0
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800efda:	2302      	movs	r3, #2
 800efdc:	e19c      	b.n	800f318 <HAL_TIM_PWM_Start_DMA+0x3e4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d109      	bne.n	800eff8 <HAL_TIM_PWM_Start_DMA+0xc4>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800efea:	b2db      	uxtb	r3, r3
 800efec:	2b01      	cmp	r3, #1
 800efee:	bf0c      	ite	eq
 800eff0:	2301      	moveq	r3, #1
 800eff2:	2300      	movne	r3, #0
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	e03c      	b.n	800f072 <HAL_TIM_PWM_Start_DMA+0x13e>
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	2b04      	cmp	r3, #4
 800effc:	d109      	bne.n	800f012 <HAL_TIM_PWM_Start_DMA+0xde>
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f004:	b2db      	uxtb	r3, r3
 800f006:	2b01      	cmp	r3, #1
 800f008:	bf0c      	ite	eq
 800f00a:	2301      	moveq	r3, #1
 800f00c:	2300      	movne	r3, #0
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	e02f      	b.n	800f072 <HAL_TIM_PWM_Start_DMA+0x13e>
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	2b08      	cmp	r3, #8
 800f016:	d109      	bne.n	800f02c <HAL_TIM_PWM_Start_DMA+0xf8>
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	2b01      	cmp	r3, #1
 800f022:	bf0c      	ite	eq
 800f024:	2301      	moveq	r3, #1
 800f026:	2300      	movne	r3, #0
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	e022      	b.n	800f072 <HAL_TIM_PWM_Start_DMA+0x13e>
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	2b0c      	cmp	r3, #12
 800f030:	d109      	bne.n	800f046 <HAL_TIM_PWM_Start_DMA+0x112>
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	bf0c      	ite	eq
 800f03e:	2301      	moveq	r3, #1
 800f040:	2300      	movne	r3, #0
 800f042:	b2db      	uxtb	r3, r3
 800f044:	e015      	b.n	800f072 <HAL_TIM_PWM_Start_DMA+0x13e>
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	2b10      	cmp	r3, #16
 800f04a:	d109      	bne.n	800f060 <HAL_TIM_PWM_Start_DMA+0x12c>
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f052:	b2db      	uxtb	r3, r3
 800f054:	2b01      	cmp	r3, #1
 800f056:	bf0c      	ite	eq
 800f058:	2301      	moveq	r3, #1
 800f05a:	2300      	movne	r3, #0
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	e008      	b.n	800f072 <HAL_TIM_PWM_Start_DMA+0x13e>
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f066:	b2db      	uxtb	r3, r3
 800f068:	2b01      	cmp	r3, #1
 800f06a:	bf0c      	ite	eq
 800f06c:	2301      	moveq	r3, #1
 800f06e:	2300      	movne	r3, #0
 800f070:	b2db      	uxtb	r3, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	d034      	beq.n	800f0e0 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d104      	bne.n	800f086 <HAL_TIM_PWM_Start_DMA+0x152>
 800f07c:	887b      	ldrh	r3, [r7, #2]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d001      	beq.n	800f086 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 800f082:	2301      	movs	r3, #1
 800f084:	e148      	b.n	800f318 <HAL_TIM_PWM_Start_DMA+0x3e4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d104      	bne.n	800f096 <HAL_TIM_PWM_Start_DMA+0x162>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2202      	movs	r2, #2
 800f090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f094:	e026      	b.n	800f0e4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	2b04      	cmp	r3, #4
 800f09a:	d104      	bne.n	800f0a6 <HAL_TIM_PWM_Start_DMA+0x172>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2202      	movs	r2, #2
 800f0a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f0a4:	e01e      	b.n	800f0e4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	2b08      	cmp	r3, #8
 800f0aa:	d104      	bne.n	800f0b6 <HAL_TIM_PWM_Start_DMA+0x182>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2202      	movs	r2, #2
 800f0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f0b4:	e016      	b.n	800f0e4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	2b0c      	cmp	r3, #12
 800f0ba:	d104      	bne.n	800f0c6 <HAL_TIM_PWM_Start_DMA+0x192>
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2202      	movs	r2, #2
 800f0c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f0c4:	e00e      	b.n	800f0e4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	2b10      	cmp	r3, #16
 800f0ca:	d104      	bne.n	800f0d6 <HAL_TIM_PWM_Start_DMA+0x1a2>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2202      	movs	r2, #2
 800f0d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0d4:	e006      	b.n	800f0e4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2202      	movs	r2, #2
 800f0da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f0de:	e001      	b.n	800f0e4 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e119      	b.n	800f318 <HAL_TIM_PWM_Start_DMA+0x3e4>
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	2b0c      	cmp	r3, #12
 800f0e8:	f200 80ae 	bhi.w	800f248 <HAL_TIM_PWM_Start_DMA+0x314>
 800f0ec:	a201      	add	r2, pc, #4	; (adr r2, 800f0f4 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800f0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f2:	bf00      	nop
 800f0f4:	0800f129 	.word	0x0800f129
 800f0f8:	0800f249 	.word	0x0800f249
 800f0fc:	0800f249 	.word	0x0800f249
 800f100:	0800f249 	.word	0x0800f249
 800f104:	0800f171 	.word	0x0800f171
 800f108:	0800f249 	.word	0x0800f249
 800f10c:	0800f249 	.word	0x0800f249
 800f110:	0800f249 	.word	0x0800f249
 800f114:	0800f1b9 	.word	0x0800f1b9
 800f118:	0800f249 	.word	0x0800f249
 800f11c:	0800f249 	.word	0x0800f249
 800f120:	0800f249 	.word	0x0800f249
 800f124:	0800f201 	.word	0x0800f201
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f12c:	4a7c      	ldr	r2, [pc, #496]	; (800f320 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800f12e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f134:	4a7b      	ldr	r2, [pc, #492]	; (800f324 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800f136:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13c:	4a7a      	ldr	r2, [pc, #488]	; (800f328 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800f13e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f144:	6879      	ldr	r1, [r7, #4]
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	3334      	adds	r3, #52	; 0x34
 800f14c:	461a      	mov	r2, r3
 800f14e:	887b      	ldrh	r3, [r7, #2]
 800f150:	f7fc f8c0 	bl	800b2d4 <HAL_DMA_Start_IT>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 800f15a:	2301      	movs	r3, #1
 800f15c:	e0dc      	b.n	800f318 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	68da      	ldr	r2, [r3, #12]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f16c:	60da      	str	r2, [r3, #12]
      break;
 800f16e:	e06c      	b.n	800f24a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f174:	4a6a      	ldr	r2, [pc, #424]	; (800f320 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800f176:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f17c:	4a69      	ldr	r2, [pc, #420]	; (800f324 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800f17e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f184:	4a68      	ldr	r2, [pc, #416]	; (800f328 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800f186:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f18c:	6879      	ldr	r1, [r7, #4]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3338      	adds	r3, #56	; 0x38
 800f194:	461a      	mov	r2, r3
 800f196:	887b      	ldrh	r3, [r7, #2]
 800f198:	f7fc f89c 	bl	800b2d4 <HAL_DMA_Start_IT>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d001      	beq.n	800f1a6 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e0b8      	b.n	800f318 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	68da      	ldr	r2, [r3, #12]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f1b4:	60da      	str	r2, [r3, #12]
      break;
 800f1b6:	e048      	b.n	800f24a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1bc:	4a58      	ldr	r2, [pc, #352]	; (800f320 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800f1be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c4:	4a57      	ldr	r2, [pc, #348]	; (800f324 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800f1c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1cc:	4a56      	ldr	r2, [pc, #344]	; (800f328 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800f1ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f1d4:	6879      	ldr	r1, [r7, #4]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	333c      	adds	r3, #60	; 0x3c
 800f1dc:	461a      	mov	r2, r3
 800f1de:	887b      	ldrh	r3, [r7, #2]
 800f1e0:	f7fc f878 	bl	800b2d4 <HAL_DMA_Start_IT>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d001      	beq.n	800f1ee <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e094      	b.n	800f318 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	68da      	ldr	r2, [r3, #12]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1fc:	60da      	str	r2, [r3, #12]
      break;
 800f1fe:	e024      	b.n	800f24a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f204:	4a46      	ldr	r2, [pc, #280]	; (800f320 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800f206:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20c:	4a45      	ldr	r2, [pc, #276]	; (800f324 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800f20e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f214:	4a44      	ldr	r2, [pc, #272]	; (800f328 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800f216:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f21c:	6879      	ldr	r1, [r7, #4]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	3340      	adds	r3, #64	; 0x40
 800f224:	461a      	mov	r2, r3
 800f226:	887b      	ldrh	r3, [r7, #2]
 800f228:	f7fc f854 	bl	800b2d4 <HAL_DMA_Start_IT>
 800f22c:	4603      	mov	r3, r0
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d001      	beq.n	800f236 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 800f232:	2301      	movs	r3, #1
 800f234:	e070      	b.n	800f318 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68da      	ldr	r2, [r3, #12]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f244:	60da      	str	r2, [r3, #12]
      break;
 800f246:	e000      	b.n	800f24a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 800f248:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2201      	movs	r2, #1
 800f250:	68b9      	ldr	r1, [r7, #8]
 800f252:	4618      	mov	r0, r3
 800f254:	f001 f8e6 	bl	8010424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a33      	ldr	r2, [pc, #204]	; (800f32c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d004      	beq.n	800f26c <HAL_TIM_PWM_Start_DMA+0x338>
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a32      	ldr	r2, [pc, #200]	; (800f330 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d101      	bne.n	800f270 <HAL_TIM_PWM_Start_DMA+0x33c>
 800f26c:	2301      	movs	r3, #1
 800f26e:	e000      	b.n	800f272 <HAL_TIM_PWM_Start_DMA+0x33e>
 800f270:	2300      	movs	r3, #0
 800f272:	2b00      	cmp	r3, #0
 800f274:	d007      	beq.n	800f286 <HAL_TIM_PWM_Start_DMA+0x352>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4a28      	ldr	r2, [pc, #160]	; (800f32c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d022      	beq.n	800f2d6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f298:	d01d      	beq.n	800f2d6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a25      	ldr	r2, [pc, #148]	; (800f334 <HAL_TIM_PWM_Start_DMA+0x400>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d018      	beq.n	800f2d6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4a23      	ldr	r2, [pc, #140]	; (800f338 <HAL_TIM_PWM_Start_DMA+0x404>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d013      	beq.n	800f2d6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a22      	ldr	r2, [pc, #136]	; (800f33c <HAL_TIM_PWM_Start_DMA+0x408>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d00e      	beq.n	800f2d6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a1c      	ldr	r2, [pc, #112]	; (800f330 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d009      	beq.n	800f2d6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a1e      	ldr	r2, [pc, #120]	; (800f340 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d004      	beq.n	800f2d6 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a1c      	ldr	r2, [pc, #112]	; (800f344 <HAL_TIM_PWM_Start_DMA+0x410>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d115      	bne.n	800f302 <HAL_TIM_PWM_Start_DMA+0x3ce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	689a      	ldr	r2, [r3, #8]
 800f2dc:	4b1a      	ldr	r3, [pc, #104]	; (800f348 <HAL_TIM_PWM_Start_DMA+0x414>)
 800f2de:	4013      	ands	r3, r2
 800f2e0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	2b06      	cmp	r3, #6
 800f2e6:	d015      	beq.n	800f314 <HAL_TIM_PWM_Start_DMA+0x3e0>
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2ee:	d011      	beq.n	800f314 <HAL_TIM_PWM_Start_DMA+0x3e0>
    {
      __HAL_TIM_ENABLE(htim);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f042 0201 	orr.w	r2, r2, #1
 800f2fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f300:	e008      	b.n	800f314 <HAL_TIM_PWM_Start_DMA+0x3e0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f042 0201 	orr.w	r2, r2, #1
 800f310:	601a      	str	r2, [r3, #0]
 800f312:	e000      	b.n	800f316 <HAL_TIM_PWM_Start_DMA+0x3e2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3718      	adds	r7, #24
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	0800fbe3 	.word	0x0800fbe3
 800f324:	0800fc8b 	.word	0x0800fc8b
 800f328:	0800fb51 	.word	0x0800fb51
 800f32c:	40010000 	.word	0x40010000
 800f330:	40010400 	.word	0x40010400
 800f334:	40000400 	.word	0x40000400
 800f338:	40000800 	.word	0x40000800
 800f33c:	40000c00 	.word	0x40000c00
 800f340:	40014000 	.word	0x40014000
 800f344:	40001800 	.word	0x40001800
 800f348:	00010007 	.word	0x00010007

0800f34c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	2b0c      	cmp	r3, #12
 800f35a:	d855      	bhi.n	800f408 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800f35c:	a201      	add	r2, pc, #4	; (adr r2, 800f364 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800f35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f362:	bf00      	nop
 800f364:	0800f399 	.word	0x0800f399
 800f368:	0800f409 	.word	0x0800f409
 800f36c:	0800f409 	.word	0x0800f409
 800f370:	0800f409 	.word	0x0800f409
 800f374:	0800f3b5 	.word	0x0800f3b5
 800f378:	0800f409 	.word	0x0800f409
 800f37c:	0800f409 	.word	0x0800f409
 800f380:	0800f409 	.word	0x0800f409
 800f384:	0800f3d1 	.word	0x0800f3d1
 800f388:	0800f409 	.word	0x0800f409
 800f38c:	0800f409 	.word	0x0800f409
 800f390:	0800f409 	.word	0x0800f409
 800f394:	0800f3ed 	.word	0x0800f3ed
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	68da      	ldr	r2, [r3, #12]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f3a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fb fff1 	bl	800b394 <HAL_DMA_Abort_IT>
      break;
 800f3b2:	e02a      	b.n	800f40a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	68da      	ldr	r2, [r3, #12]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7fb ffe3 	bl	800b394 <HAL_DMA_Abort_IT>
      break;
 800f3ce:	e01c      	b.n	800f40a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68da      	ldr	r2, [r3, #12]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f3de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fb ffd5 	bl	800b394 <HAL_DMA_Abort_IT>
      break;
 800f3ea:	e00e      	b.n	800f40a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	68da      	ldr	r2, [r3, #12]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f3fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f400:	4618      	mov	r0, r3
 800f402:	f7fb ffc7 	bl	800b394 <HAL_DMA_Abort_IT>
      break;
 800f406:	e000      	b.n	800f40a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800f408:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	2200      	movs	r2, #0
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	4618      	mov	r0, r3
 800f414:	f001 f806 	bl	8010424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a36      	ldr	r2, [pc, #216]	; (800f4f8 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d004      	beq.n	800f42c <HAL_TIM_PWM_Stop_DMA+0xe0>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4a35      	ldr	r2, [pc, #212]	; (800f4fc <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d101      	bne.n	800f430 <HAL_TIM_PWM_Stop_DMA+0xe4>
 800f42c:	2301      	movs	r3, #1
 800f42e:	e000      	b.n	800f432 <HAL_TIM_PWM_Stop_DMA+0xe6>
 800f430:	2300      	movs	r3, #0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d017      	beq.n	800f466 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6a1a      	ldr	r2, [r3, #32]
 800f43c:	f241 1311 	movw	r3, #4369	; 0x1111
 800f440:	4013      	ands	r3, r2
 800f442:	2b00      	cmp	r3, #0
 800f444:	d10f      	bne.n	800f466 <HAL_TIM_PWM_Stop_DMA+0x11a>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	6a1a      	ldr	r2, [r3, #32]
 800f44c:	f240 4344 	movw	r3, #1092	; 0x444
 800f450:	4013      	ands	r3, r2
 800f452:	2b00      	cmp	r3, #0
 800f454:	d107      	bne.n	800f466 <HAL_TIM_PWM_Stop_DMA+0x11a>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f464:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	6a1a      	ldr	r2, [r3, #32]
 800f46c:	f241 1311 	movw	r3, #4369	; 0x1111
 800f470:	4013      	ands	r3, r2
 800f472:	2b00      	cmp	r3, #0
 800f474:	d10f      	bne.n	800f496 <HAL_TIM_PWM_Stop_DMA+0x14a>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	6a1a      	ldr	r2, [r3, #32]
 800f47c:	f240 4344 	movw	r3, #1092	; 0x444
 800f480:	4013      	ands	r3, r2
 800f482:	2b00      	cmp	r3, #0
 800f484:	d107      	bne.n	800f496 <HAL_TIM_PWM_Stop_DMA+0x14a>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f022 0201 	bic.w	r2, r2, #1
 800f494:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d104      	bne.n	800f4a6 <HAL_TIM_PWM_Stop_DMA+0x15a>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f4a4:	e023      	b.n	800f4ee <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	2b04      	cmp	r3, #4
 800f4aa:	d104      	bne.n	800f4b6 <HAL_TIM_PWM_Stop_DMA+0x16a>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f4b4:	e01b      	b.n	800f4ee <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	2b08      	cmp	r3, #8
 800f4ba:	d104      	bne.n	800f4c6 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4c4:	e013      	b.n	800f4ee <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	2b0c      	cmp	r3, #12
 800f4ca:	d104      	bne.n	800f4d6 <HAL_TIM_PWM_Stop_DMA+0x18a>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f4d4:	e00b      	b.n	800f4ee <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	2b10      	cmp	r3, #16
 800f4da:	d104      	bne.n	800f4e6 <HAL_TIM_PWM_Stop_DMA+0x19a>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f4e4:	e003      	b.n	800f4ee <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800f4ee:	2300      	movs	r3, #0
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	40010000 	.word	0x40010000
 800f4fc:	40010400 	.word	0x40010400

0800f500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	691b      	ldr	r3, [r3, #16]
 800f50e:	f003 0302 	and.w	r3, r3, #2
 800f512:	2b02      	cmp	r3, #2
 800f514:	d122      	bne.n	800f55c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	f003 0302 	and.w	r3, r3, #2
 800f520:	2b02      	cmp	r3, #2
 800f522:	d11b      	bne.n	800f55c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f06f 0202 	mvn.w	r2, #2
 800f52c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2201      	movs	r2, #1
 800f532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	f003 0303 	and.w	r3, r3, #3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d003      	beq.n	800f54a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 fadc 	bl	800fb00 <HAL_TIM_IC_CaptureCallback>
 800f548:	e005      	b.n	800f556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 face 	bl	800faec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7f1 f849 	bl	80005e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	f003 0304 	and.w	r3, r3, #4
 800f566:	2b04      	cmp	r3, #4
 800f568:	d122      	bne.n	800f5b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	f003 0304 	and.w	r3, r3, #4
 800f574:	2b04      	cmp	r3, #4
 800f576:	d11b      	bne.n	800f5b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f06f 0204 	mvn.w	r2, #4
 800f580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2202      	movs	r2, #2
 800f586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	699b      	ldr	r3, [r3, #24]
 800f58e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f592:	2b00      	cmp	r3, #0
 800f594:	d003      	beq.n	800f59e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 fab2 	bl	800fb00 <HAL_TIM_IC_CaptureCallback>
 800f59c:	e005      	b.n	800f5aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 faa4 	bl	800faec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f7f1 f81f 	bl	80005e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	691b      	ldr	r3, [r3, #16]
 800f5b6:	f003 0308 	and.w	r3, r3, #8
 800f5ba:	2b08      	cmp	r3, #8
 800f5bc:	d122      	bne.n	800f604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	f003 0308 	and.w	r3, r3, #8
 800f5c8:	2b08      	cmp	r3, #8
 800f5ca:	d11b      	bne.n	800f604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f06f 0208 	mvn.w	r2, #8
 800f5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2204      	movs	r2, #4
 800f5da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	69db      	ldr	r3, [r3, #28]
 800f5e2:	f003 0303 	and.w	r3, r3, #3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d003      	beq.n	800f5f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fa88 	bl	800fb00 <HAL_TIM_IC_CaptureCallback>
 800f5f0:	e005      	b.n	800f5fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 fa7a 	bl	800faec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7f0 fff5 	bl	80005e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	691b      	ldr	r3, [r3, #16]
 800f60a:	f003 0310 	and.w	r3, r3, #16
 800f60e:	2b10      	cmp	r3, #16
 800f610:	d122      	bne.n	800f658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	f003 0310 	and.w	r3, r3, #16
 800f61c:	2b10      	cmp	r3, #16
 800f61e:	d11b      	bne.n	800f658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f06f 0210 	mvn.w	r2, #16
 800f628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2208      	movs	r2, #8
 800f62e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	69db      	ldr	r3, [r3, #28]
 800f636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d003      	beq.n	800f646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fa5e 	bl	800fb00 <HAL_TIM_IC_CaptureCallback>
 800f644:	e005      	b.n	800f652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 fa50 	bl	800faec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f7f0 ffcb 	bl	80005e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2200      	movs	r2, #0
 800f656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	691b      	ldr	r3, [r3, #16]
 800f65e:	f003 0301 	and.w	r3, r3, #1
 800f662:	2b01      	cmp	r3, #1
 800f664:	d10e      	bne.n	800f684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	f003 0301 	and.w	r3, r3, #1
 800f670:	2b01      	cmp	r3, #1
 800f672:	d107      	bne.n	800f684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f06f 0201 	mvn.w	r2, #1
 800f67c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7f2 fc92 	bl	8001fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f68e:	2b80      	cmp	r3, #128	; 0x80
 800f690:	d10e      	bne.n	800f6b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f69c:	2b80      	cmp	r3, #128	; 0x80
 800f69e:	d107      	bne.n	800f6b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 ff78 	bl	80105a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6be:	d10e      	bne.n	800f6de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6ca:	2b80      	cmp	r3, #128	; 0x80
 800f6cc:	d107      	bne.n	800f6de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f6d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f000 ff6b 	bl	80105b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	691b      	ldr	r3, [r3, #16]
 800f6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6e8:	2b40      	cmp	r3, #64	; 0x40
 800f6ea:	d10e      	bne.n	800f70a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6f6:	2b40      	cmp	r3, #64	; 0x40
 800f6f8:	d107      	bne.n	800f70a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 fa0f 	bl	800fb28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	f003 0320 	and.w	r3, r3, #32
 800f714:	2b20      	cmp	r3, #32
 800f716:	d10e      	bne.n	800f736 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	68db      	ldr	r3, [r3, #12]
 800f71e:	f003 0320 	and.w	r3, r3, #32
 800f722:	2b20      	cmp	r3, #32
 800f724:	d107      	bne.n	800f736 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f06f 0220 	mvn.w	r2, #32
 800f72e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 ff2b 	bl	801058c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f736:	bf00      	nop
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
	...

0800f740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f752:	2b01      	cmp	r3, #1
 800f754:	d101      	bne.n	800f75a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f756:	2302      	movs	r3, #2
 800f758:	e0fd      	b.n	800f956 <HAL_TIM_PWM_ConfigChannel+0x216>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2201      	movs	r2, #1
 800f75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2b14      	cmp	r3, #20
 800f766:	f200 80f0 	bhi.w	800f94a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f76a:	a201      	add	r2, pc, #4	; (adr r2, 800f770 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f770:	0800f7c5 	.word	0x0800f7c5
 800f774:	0800f94b 	.word	0x0800f94b
 800f778:	0800f94b 	.word	0x0800f94b
 800f77c:	0800f94b 	.word	0x0800f94b
 800f780:	0800f805 	.word	0x0800f805
 800f784:	0800f94b 	.word	0x0800f94b
 800f788:	0800f94b 	.word	0x0800f94b
 800f78c:	0800f94b 	.word	0x0800f94b
 800f790:	0800f847 	.word	0x0800f847
 800f794:	0800f94b 	.word	0x0800f94b
 800f798:	0800f94b 	.word	0x0800f94b
 800f79c:	0800f94b 	.word	0x0800f94b
 800f7a0:	0800f887 	.word	0x0800f887
 800f7a4:	0800f94b 	.word	0x0800f94b
 800f7a8:	0800f94b 	.word	0x0800f94b
 800f7ac:	0800f94b 	.word	0x0800f94b
 800f7b0:	0800f8c9 	.word	0x0800f8c9
 800f7b4:	0800f94b 	.word	0x0800f94b
 800f7b8:	0800f94b 	.word	0x0800f94b
 800f7bc:	0800f94b 	.word	0x0800f94b
 800f7c0:	0800f909 	.word	0x0800f909
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68b9      	ldr	r1, [r7, #8]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f000 fb32 	bl	800fe34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	699a      	ldr	r2, [r3, #24]
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f042 0208 	orr.w	r2, r2, #8
 800f7de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	699a      	ldr	r2, [r3, #24]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f022 0204 	bic.w	r2, r2, #4
 800f7ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	6999      	ldr	r1, [r3, #24]
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	691a      	ldr	r2, [r3, #16]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	430a      	orrs	r2, r1
 800f800:	619a      	str	r2, [r3, #24]
      break;
 800f802:	e0a3      	b.n	800f94c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	68b9      	ldr	r1, [r7, #8]
 800f80a:	4618      	mov	r0, r3
 800f80c:	f000 fb84 	bl	800ff18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	699a      	ldr	r2, [r3, #24]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f81e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	699a      	ldr	r2, [r3, #24]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f82e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	6999      	ldr	r1, [r3, #24]
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	691b      	ldr	r3, [r3, #16]
 800f83a:	021a      	lsls	r2, r3, #8
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	430a      	orrs	r2, r1
 800f842:	619a      	str	r2, [r3, #24]
      break;
 800f844:	e082      	b.n	800f94c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	68b9      	ldr	r1, [r7, #8]
 800f84c:	4618      	mov	r0, r3
 800f84e:	f000 fbdb 	bl	8010008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	69da      	ldr	r2, [r3, #28]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f042 0208 	orr.w	r2, r2, #8
 800f860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	69da      	ldr	r2, [r3, #28]
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f022 0204 	bic.w	r2, r2, #4
 800f870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	69d9      	ldr	r1, [r3, #28]
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	691a      	ldr	r2, [r3, #16]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	430a      	orrs	r2, r1
 800f882:	61da      	str	r2, [r3, #28]
      break;
 800f884:	e062      	b.n	800f94c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	68b9      	ldr	r1, [r7, #8]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f000 fc31 	bl	80100f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	69da      	ldr	r2, [r3, #28]
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	69da      	ldr	r2, [r3, #28]
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	69d9      	ldr	r1, [r3, #28]
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	691b      	ldr	r3, [r3, #16]
 800f8bc:	021a      	lsls	r2, r3, #8
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	430a      	orrs	r2, r1
 800f8c4:	61da      	str	r2, [r3, #28]
      break;
 800f8c6:	e041      	b.n	800f94c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68b9      	ldr	r1, [r7, #8]
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f000 fc68 	bl	80101a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f042 0208 	orr.w	r2, r2, #8
 800f8e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f022 0204 	bic.w	r2, r2, #4
 800f8f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	691a      	ldr	r2, [r3, #16]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	430a      	orrs	r2, r1
 800f904:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f906:	e021      	b.n	800f94c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	68b9      	ldr	r1, [r7, #8]
 800f90e:	4618      	mov	r0, r3
 800f910:	f000 fc9a 	bl	8010248 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f922:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f932:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	021a      	lsls	r2, r3, #8
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	430a      	orrs	r2, r1
 800f946:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f948:	e000      	b.n	800f94c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f94a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f954:	2300      	movs	r3, #0
}
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop

0800f960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f970:	2b01      	cmp	r3, #1
 800f972:	d101      	bne.n	800f978 <HAL_TIM_ConfigClockSource+0x18>
 800f974:	2302      	movs	r3, #2
 800f976:	e0b3      	b.n	800fae0 <HAL_TIM_ConfigClockSource+0x180>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2202      	movs	r2, #2
 800f984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	689b      	ldr	r3, [r3, #8]
 800f98e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	4b55      	ldr	r3, [pc, #340]	; (800fae8 <HAL_TIM_ConfigClockSource+0x188>)
 800f994:	4013      	ands	r3, r2
 800f996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f99e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9b0:	d03e      	beq.n	800fa30 <HAL_TIM_ConfigClockSource+0xd0>
 800f9b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9b6:	f200 8087 	bhi.w	800fac8 <HAL_TIM_ConfigClockSource+0x168>
 800f9ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9be:	f000 8085 	beq.w	800facc <HAL_TIM_ConfigClockSource+0x16c>
 800f9c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9c6:	d87f      	bhi.n	800fac8 <HAL_TIM_ConfigClockSource+0x168>
 800f9c8:	2b70      	cmp	r3, #112	; 0x70
 800f9ca:	d01a      	beq.n	800fa02 <HAL_TIM_ConfigClockSource+0xa2>
 800f9cc:	2b70      	cmp	r3, #112	; 0x70
 800f9ce:	d87b      	bhi.n	800fac8 <HAL_TIM_ConfigClockSource+0x168>
 800f9d0:	2b60      	cmp	r3, #96	; 0x60
 800f9d2:	d050      	beq.n	800fa76 <HAL_TIM_ConfigClockSource+0x116>
 800f9d4:	2b60      	cmp	r3, #96	; 0x60
 800f9d6:	d877      	bhi.n	800fac8 <HAL_TIM_ConfigClockSource+0x168>
 800f9d8:	2b50      	cmp	r3, #80	; 0x50
 800f9da:	d03c      	beq.n	800fa56 <HAL_TIM_ConfigClockSource+0xf6>
 800f9dc:	2b50      	cmp	r3, #80	; 0x50
 800f9de:	d873      	bhi.n	800fac8 <HAL_TIM_ConfigClockSource+0x168>
 800f9e0:	2b40      	cmp	r3, #64	; 0x40
 800f9e2:	d058      	beq.n	800fa96 <HAL_TIM_ConfigClockSource+0x136>
 800f9e4:	2b40      	cmp	r3, #64	; 0x40
 800f9e6:	d86f      	bhi.n	800fac8 <HAL_TIM_ConfigClockSource+0x168>
 800f9e8:	2b30      	cmp	r3, #48	; 0x30
 800f9ea:	d064      	beq.n	800fab6 <HAL_TIM_ConfigClockSource+0x156>
 800f9ec:	2b30      	cmp	r3, #48	; 0x30
 800f9ee:	d86b      	bhi.n	800fac8 <HAL_TIM_ConfigClockSource+0x168>
 800f9f0:	2b20      	cmp	r3, #32
 800f9f2:	d060      	beq.n	800fab6 <HAL_TIM_ConfigClockSource+0x156>
 800f9f4:	2b20      	cmp	r3, #32
 800f9f6:	d867      	bhi.n	800fac8 <HAL_TIM_ConfigClockSource+0x168>
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d05c      	beq.n	800fab6 <HAL_TIM_ConfigClockSource+0x156>
 800f9fc:	2b10      	cmp	r3, #16
 800f9fe:	d05a      	beq.n	800fab6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800fa00:	e062      	b.n	800fac8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6818      	ldr	r0, [r3, #0]
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	6899      	ldr	r1, [r3, #8]
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	f000 fce7 	bl	80103e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	689b      	ldr	r3, [r3, #8]
 800fa1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fa24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	609a      	str	r2, [r3, #8]
      break;
 800fa2e:	e04e      	b.n	800face <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6818      	ldr	r0, [r3, #0]
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	6899      	ldr	r1, [r3, #8]
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	685a      	ldr	r2, [r3, #4]
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	f000 fcd0 	bl	80103e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	689a      	ldr	r2, [r3, #8]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fa52:	609a      	str	r2, [r3, #8]
      break;
 800fa54:	e03b      	b.n	800face <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	6859      	ldr	r1, [r3, #4]
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	68db      	ldr	r3, [r3, #12]
 800fa62:	461a      	mov	r2, r3
 800fa64:	f000 fc44 	bl	80102f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2150      	movs	r1, #80	; 0x50
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 fc9d 	bl	80103ae <TIM_ITRx_SetConfig>
      break;
 800fa74:	e02b      	b.n	800face <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6818      	ldr	r0, [r3, #0]
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	6859      	ldr	r1, [r3, #4]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	461a      	mov	r2, r3
 800fa84:	f000 fc63 	bl	801034e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2160      	movs	r1, #96	; 0x60
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f000 fc8d 	bl	80103ae <TIM_ITRx_SetConfig>
      break;
 800fa94:	e01b      	b.n	800face <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6818      	ldr	r0, [r3, #0]
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	6859      	ldr	r1, [r3, #4]
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	461a      	mov	r2, r3
 800faa4:	f000 fc24 	bl	80102f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2140      	movs	r1, #64	; 0x40
 800faae:	4618      	mov	r0, r3
 800fab0:	f000 fc7d 	bl	80103ae <TIM_ITRx_SetConfig>
      break;
 800fab4:	e00b      	b.n	800face <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4619      	mov	r1, r3
 800fac0:	4610      	mov	r0, r2
 800fac2:	f000 fc74 	bl	80103ae <TIM_ITRx_SetConfig>
        break;
 800fac6:	e002      	b.n	800face <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800fac8:	bf00      	nop
 800faca:	e000      	b.n	800face <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800facc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2201      	movs	r2, #1
 800fad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	fffeff88 	.word	0xfffeff88

0800faec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800faf4:	bf00      	nop
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fb08:	bf00      	nop
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fb1c:	bf00      	nop
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fb30:	bf00      	nop
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fb44:	bf00      	nop
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d107      	bne.n	800fb78 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2201      	movs	r2, #1
 800fb72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb76:	e02a      	b.n	800fbce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d107      	bne.n	800fb92 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2202      	movs	r2, #2
 800fb86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb90:	e01d      	b.n	800fbce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d107      	bne.n	800fbac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2204      	movs	r2, #4
 800fba0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2201      	movs	r2, #1
 800fba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fbaa:	e010      	b.n	800fbce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d107      	bne.n	800fbc6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2208      	movs	r2, #8
 800fbba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fbc4:	e003      	b.n	800fbce <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2201      	movs	r2, #1
 800fbca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800fbce:	68f8      	ldr	r0, [r7, #12]
 800fbd0:	f7ff ffb4 	bl	800fb3c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	771a      	strb	r2, [r3, #28]
}
 800fbda:	bf00      	nop
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b084      	sub	sp, #16
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d10b      	bne.n	800fc12 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	69db      	ldr	r3, [r3, #28]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d136      	bne.n	800fc76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc10:	e031      	b.n	800fc76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d10b      	bne.n	800fc34 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2202      	movs	r2, #2
 800fc20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	69db      	ldr	r3, [r3, #28]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d125      	bne.n	800fc76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc32:	e020      	b.n	800fc76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d10b      	bne.n	800fc56 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2204      	movs	r2, #4
 800fc42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	69db      	ldr	r3, [r3, #28]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d114      	bne.n	800fc76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2201      	movs	r2, #1
 800fc50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc54:	e00f      	b.n	800fc76 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d10a      	bne.n	800fc76 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2208      	movs	r2, #8
 800fc64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	69db      	ldr	r3, [r3, #28]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d103      	bne.n	800fc76 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2201      	movs	r2, #1
 800fc72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	f7f0 fcb6 	bl	80005e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	771a      	strb	r2, [r3, #28]
}
 800fc82:	bf00      	nop
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d103      	bne.n	800fcaa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2201      	movs	r2, #1
 800fca6:	771a      	strb	r2, [r3, #28]
 800fca8:	e019      	b.n	800fcde <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d103      	bne.n	800fcbc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	771a      	strb	r2, [r3, #28]
 800fcba:	e010      	b.n	800fcde <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d103      	bne.n	800fcce <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2204      	movs	r2, #4
 800fcca:	771a      	strb	r2, [r3, #28]
 800fccc:	e007      	b.n	800fcde <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d102      	bne.n	800fcde <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2208      	movs	r2, #8
 800fcdc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f7ff ff18 	bl	800fb14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2200      	movs	r2, #0
 800fce8:	771a      	strb	r2, [r3, #28]
}
 800fcea:	bf00      	nop
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
	...

0800fcf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4a40      	ldr	r2, [pc, #256]	; (800fe08 <TIM_Base_SetConfig+0x114>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d013      	beq.n	800fd34 <TIM_Base_SetConfig+0x40>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd12:	d00f      	beq.n	800fd34 <TIM_Base_SetConfig+0x40>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4a3d      	ldr	r2, [pc, #244]	; (800fe0c <TIM_Base_SetConfig+0x118>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d00b      	beq.n	800fd34 <TIM_Base_SetConfig+0x40>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4a3c      	ldr	r2, [pc, #240]	; (800fe10 <TIM_Base_SetConfig+0x11c>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d007      	beq.n	800fd34 <TIM_Base_SetConfig+0x40>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	4a3b      	ldr	r2, [pc, #236]	; (800fe14 <TIM_Base_SetConfig+0x120>)
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d003      	beq.n	800fd34 <TIM_Base_SetConfig+0x40>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	4a3a      	ldr	r2, [pc, #232]	; (800fe18 <TIM_Base_SetConfig+0x124>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d108      	bne.n	800fd46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	4313      	orrs	r3, r2
 800fd44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a2f      	ldr	r2, [pc, #188]	; (800fe08 <TIM_Base_SetConfig+0x114>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d02b      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd54:	d027      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4a2c      	ldr	r2, [pc, #176]	; (800fe0c <TIM_Base_SetConfig+0x118>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d023      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4a2b      	ldr	r2, [pc, #172]	; (800fe10 <TIM_Base_SetConfig+0x11c>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d01f      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4a2a      	ldr	r2, [pc, #168]	; (800fe14 <TIM_Base_SetConfig+0x120>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d01b      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4a29      	ldr	r2, [pc, #164]	; (800fe18 <TIM_Base_SetConfig+0x124>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d017      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4a28      	ldr	r2, [pc, #160]	; (800fe1c <TIM_Base_SetConfig+0x128>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d013      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4a27      	ldr	r2, [pc, #156]	; (800fe20 <TIM_Base_SetConfig+0x12c>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d00f      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	4a26      	ldr	r2, [pc, #152]	; (800fe24 <TIM_Base_SetConfig+0x130>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d00b      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	4a25      	ldr	r2, [pc, #148]	; (800fe28 <TIM_Base_SetConfig+0x134>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d007      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4a24      	ldr	r2, [pc, #144]	; (800fe2c <TIM_Base_SetConfig+0x138>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d003      	beq.n	800fda6 <TIM_Base_SetConfig+0xb2>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4a23      	ldr	r2, [pc, #140]	; (800fe30 <TIM_Base_SetConfig+0x13c>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d108      	bne.n	800fdb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fdac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	68fa      	ldr	r2, [r7, #12]
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	695b      	ldr	r3, [r3, #20]
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	689a      	ldr	r2, [r3, #8]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	4a0a      	ldr	r2, [pc, #40]	; (800fe08 <TIM_Base_SetConfig+0x114>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d003      	beq.n	800fdec <TIM_Base_SetConfig+0xf8>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	4a0c      	ldr	r2, [pc, #48]	; (800fe18 <TIM_Base_SetConfig+0x124>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d103      	bne.n	800fdf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	691a      	ldr	r2, [r3, #16]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	615a      	str	r2, [r3, #20]
}
 800fdfa:	bf00      	nop
 800fdfc:	3714      	adds	r7, #20
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	40010000 	.word	0x40010000
 800fe0c:	40000400 	.word	0x40000400
 800fe10:	40000800 	.word	0x40000800
 800fe14:	40000c00 	.word	0x40000c00
 800fe18:	40010400 	.word	0x40010400
 800fe1c:	40014000 	.word	0x40014000
 800fe20:	40014400 	.word	0x40014400
 800fe24:	40014800 	.word	0x40014800
 800fe28:	40001800 	.word	0x40001800
 800fe2c:	40001c00 	.word	0x40001c00
 800fe30:	40002000 	.word	0x40002000

0800fe34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b087      	sub	sp, #28
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6a1b      	ldr	r3, [r3, #32]
 800fe42:	f023 0201 	bic.w	r2, r3, #1
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6a1b      	ldr	r3, [r3, #32]
 800fe4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	699b      	ldr	r3, [r3, #24]
 800fe5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fe5c:	68fa      	ldr	r2, [r7, #12]
 800fe5e:	4b2b      	ldr	r3, [pc, #172]	; (800ff0c <TIM_OC1_SetConfig+0xd8>)
 800fe60:	4013      	ands	r3, r2
 800fe62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f023 0303 	bic.w	r3, r3, #3
 800fe6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	68fa      	ldr	r2, [r7, #12]
 800fe72:	4313      	orrs	r3, r2
 800fe74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	f023 0302 	bic.w	r3, r3, #2
 800fe7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	697a      	ldr	r2, [r7, #20]
 800fe84:	4313      	orrs	r3, r2
 800fe86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4a21      	ldr	r2, [pc, #132]	; (800ff10 <TIM_OC1_SetConfig+0xdc>)
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d003      	beq.n	800fe98 <TIM_OC1_SetConfig+0x64>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4a20      	ldr	r2, [pc, #128]	; (800ff14 <TIM_OC1_SetConfig+0xe0>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d10c      	bne.n	800feb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f023 0308 	bic.w	r3, r3, #8
 800fe9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	f023 0304 	bic.w	r3, r3, #4
 800feb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4a16      	ldr	r2, [pc, #88]	; (800ff10 <TIM_OC1_SetConfig+0xdc>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d003      	beq.n	800fec2 <TIM_OC1_SetConfig+0x8e>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4a15      	ldr	r2, [pc, #84]	; (800ff14 <TIM_OC1_SetConfig+0xe0>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d111      	bne.n	800fee6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	695b      	ldr	r3, [r3, #20]
 800fed6:	693a      	ldr	r2, [r7, #16]
 800fed8:	4313      	orrs	r3, r2
 800feda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	693a      	ldr	r2, [r7, #16]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	693a      	ldr	r2, [r7, #16]
 800feea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	68fa      	ldr	r2, [r7, #12]
 800fef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	685a      	ldr	r2, [r3, #4]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	697a      	ldr	r2, [r7, #20]
 800fefe:	621a      	str	r2, [r3, #32]
}
 800ff00:	bf00      	nop
 800ff02:	371c      	adds	r7, #28
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr
 800ff0c:	fffeff8f 	.word	0xfffeff8f
 800ff10:	40010000 	.word	0x40010000
 800ff14:	40010400 	.word	0x40010400

0800ff18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b087      	sub	sp, #28
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6a1b      	ldr	r3, [r3, #32]
 800ff26:	f023 0210 	bic.w	r2, r3, #16
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6a1b      	ldr	r3, [r3, #32]
 800ff32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	699b      	ldr	r3, [r3, #24]
 800ff3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	4b2e      	ldr	r3, [pc, #184]	; (800fffc <TIM_OC2_SetConfig+0xe4>)
 800ff44:	4013      	ands	r3, r2
 800ff46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	021b      	lsls	r3, r3, #8
 800ff56:	68fa      	ldr	r2, [r7, #12]
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	f023 0320 	bic.w	r3, r3, #32
 800ff62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	011b      	lsls	r3, r3, #4
 800ff6a:	697a      	ldr	r2, [r7, #20]
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	4a23      	ldr	r2, [pc, #140]	; (8010000 <TIM_OC2_SetConfig+0xe8>)
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d003      	beq.n	800ff80 <TIM_OC2_SetConfig+0x68>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	4a22      	ldr	r2, [pc, #136]	; (8010004 <TIM_OC2_SetConfig+0xec>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d10d      	bne.n	800ff9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	011b      	lsls	r3, r3, #4
 800ff8e:	697a      	ldr	r2, [r7, #20]
 800ff90:	4313      	orrs	r3, r2
 800ff92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	4a18      	ldr	r2, [pc, #96]	; (8010000 <TIM_OC2_SetConfig+0xe8>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d003      	beq.n	800ffac <TIM_OC2_SetConfig+0x94>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	4a17      	ldr	r2, [pc, #92]	; (8010004 <TIM_OC2_SetConfig+0xec>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d113      	bne.n	800ffd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	695b      	ldr	r3, [r3, #20]
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	693a      	ldr	r2, [r7, #16]
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	699b      	ldr	r3, [r3, #24]
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	693a      	ldr	r2, [r7, #16]
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	693a      	ldr	r2, [r7, #16]
 800ffd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	685a      	ldr	r2, [r3, #4]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	697a      	ldr	r2, [r7, #20]
 800ffec:	621a      	str	r2, [r3, #32]
}
 800ffee:	bf00      	nop
 800fff0:	371c      	adds	r7, #28
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	feff8fff 	.word	0xfeff8fff
 8010000:	40010000 	.word	0x40010000
 8010004:	40010400 	.word	0x40010400

08010008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010008:	b480      	push	{r7}
 801000a:	b087      	sub	sp, #28
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6a1b      	ldr	r3, [r3, #32]
 8010016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6a1b      	ldr	r3, [r3, #32]
 8010022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	69db      	ldr	r3, [r3, #28]
 801002e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	4b2d      	ldr	r3, [pc, #180]	; (80100e8 <TIM_OC3_SetConfig+0xe0>)
 8010034:	4013      	ands	r3, r2
 8010036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	f023 0303 	bic.w	r3, r3, #3
 801003e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	4313      	orrs	r3, r2
 8010048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	021b      	lsls	r3, r3, #8
 8010058:	697a      	ldr	r2, [r7, #20]
 801005a:	4313      	orrs	r3, r2
 801005c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4a22      	ldr	r2, [pc, #136]	; (80100ec <TIM_OC3_SetConfig+0xe4>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d003      	beq.n	801006e <TIM_OC3_SetConfig+0x66>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4a21      	ldr	r2, [pc, #132]	; (80100f0 <TIM_OC3_SetConfig+0xe8>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d10d      	bne.n	801008a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	021b      	lsls	r3, r3, #8
 801007c:	697a      	ldr	r2, [r7, #20]
 801007e:	4313      	orrs	r3, r2
 8010080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4a17      	ldr	r2, [pc, #92]	; (80100ec <TIM_OC3_SetConfig+0xe4>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d003      	beq.n	801009a <TIM_OC3_SetConfig+0x92>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4a16      	ldr	r2, [pc, #88]	; (80100f0 <TIM_OC3_SetConfig+0xe8>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d113      	bne.n	80100c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80100a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	695b      	ldr	r3, [r3, #20]
 80100ae:	011b      	lsls	r3, r3, #4
 80100b0:	693a      	ldr	r2, [r7, #16]
 80100b2:	4313      	orrs	r3, r2
 80100b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	699b      	ldr	r3, [r3, #24]
 80100ba:	011b      	lsls	r3, r3, #4
 80100bc:	693a      	ldr	r2, [r7, #16]
 80100be:	4313      	orrs	r3, r2
 80100c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	693a      	ldr	r2, [r7, #16]
 80100c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	685a      	ldr	r2, [r3, #4]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	697a      	ldr	r2, [r7, #20]
 80100da:	621a      	str	r2, [r3, #32]
}
 80100dc:	bf00      	nop
 80100de:	371c      	adds	r7, #28
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr
 80100e8:	fffeff8f 	.word	0xfffeff8f
 80100ec:	40010000 	.word	0x40010000
 80100f0:	40010400 	.word	0x40010400

080100f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b087      	sub	sp, #28
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6a1b      	ldr	r3, [r3, #32]
 8010102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a1b      	ldr	r3, [r3, #32]
 801010e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	69db      	ldr	r3, [r3, #28]
 801011a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	4b1e      	ldr	r3, [pc, #120]	; (8010198 <TIM_OC4_SetConfig+0xa4>)
 8010120:	4013      	ands	r3, r2
 8010122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801012a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	021b      	lsls	r3, r3, #8
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	4313      	orrs	r3, r2
 8010136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801013e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	689b      	ldr	r3, [r3, #8]
 8010144:	031b      	lsls	r3, r3, #12
 8010146:	693a      	ldr	r2, [r7, #16]
 8010148:	4313      	orrs	r3, r2
 801014a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a13      	ldr	r2, [pc, #76]	; (801019c <TIM_OC4_SetConfig+0xa8>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d003      	beq.n	801015c <TIM_OC4_SetConfig+0x68>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a12      	ldr	r2, [pc, #72]	; (80101a0 <TIM_OC4_SetConfig+0xac>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d109      	bne.n	8010170 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	695b      	ldr	r3, [r3, #20]
 8010168:	019b      	lsls	r3, r3, #6
 801016a:	697a      	ldr	r2, [r7, #20]
 801016c:	4313      	orrs	r3, r2
 801016e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	697a      	ldr	r2, [r7, #20]
 8010174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	68fa      	ldr	r2, [r7, #12]
 801017a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	685a      	ldr	r2, [r3, #4]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	693a      	ldr	r2, [r7, #16]
 8010188:	621a      	str	r2, [r3, #32]
}
 801018a:	bf00      	nop
 801018c:	371c      	adds	r7, #28
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr
 8010196:	bf00      	nop
 8010198:	feff8fff 	.word	0xfeff8fff
 801019c:	40010000 	.word	0x40010000
 80101a0:	40010400 	.word	0x40010400

080101a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b087      	sub	sp, #28
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6a1b      	ldr	r3, [r3, #32]
 80101b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6a1b      	ldr	r3, [r3, #32]
 80101be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80101cc:	68fa      	ldr	r2, [r7, #12]
 80101ce:	4b1b      	ldr	r3, [pc, #108]	; (801023c <TIM_OC5_SetConfig+0x98>)
 80101d0:	4013      	ands	r3, r2
 80101d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	4313      	orrs	r3, r2
 80101dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80101e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	689b      	ldr	r3, [r3, #8]
 80101ea:	041b      	lsls	r3, r3, #16
 80101ec:	693a      	ldr	r2, [r7, #16]
 80101ee:	4313      	orrs	r3, r2
 80101f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4a12      	ldr	r2, [pc, #72]	; (8010240 <TIM_OC5_SetConfig+0x9c>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d003      	beq.n	8010202 <TIM_OC5_SetConfig+0x5e>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4a11      	ldr	r2, [pc, #68]	; (8010244 <TIM_OC5_SetConfig+0xa0>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d109      	bne.n	8010216 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	695b      	ldr	r3, [r3, #20]
 801020e:	021b      	lsls	r3, r3, #8
 8010210:	697a      	ldr	r2, [r7, #20]
 8010212:	4313      	orrs	r3, r2
 8010214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	697a      	ldr	r2, [r7, #20]
 801021a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	685a      	ldr	r2, [r3, #4]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	693a      	ldr	r2, [r7, #16]
 801022e:	621a      	str	r2, [r3, #32]
}
 8010230:	bf00      	nop
 8010232:	371c      	adds	r7, #28
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr
 801023c:	fffeff8f 	.word	0xfffeff8f
 8010240:	40010000 	.word	0x40010000
 8010244:	40010400 	.word	0x40010400

08010248 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010248:	b480      	push	{r7}
 801024a:	b087      	sub	sp, #28
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a1b      	ldr	r3, [r3, #32]
 8010256:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6a1b      	ldr	r3, [r3, #32]
 8010262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801026e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	4b1c      	ldr	r3, [pc, #112]	; (80102e4 <TIM_OC6_SetConfig+0x9c>)
 8010274:	4013      	ands	r3, r2
 8010276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	021b      	lsls	r3, r3, #8
 801027e:	68fa      	ldr	r2, [r7, #12]
 8010280:	4313      	orrs	r3, r2
 8010282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801028a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	051b      	lsls	r3, r3, #20
 8010292:	693a      	ldr	r2, [r7, #16]
 8010294:	4313      	orrs	r3, r2
 8010296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4a13      	ldr	r2, [pc, #76]	; (80102e8 <TIM_OC6_SetConfig+0xa0>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d003      	beq.n	80102a8 <TIM_OC6_SetConfig+0x60>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4a12      	ldr	r2, [pc, #72]	; (80102ec <TIM_OC6_SetConfig+0xa4>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d109      	bne.n	80102bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80102ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	695b      	ldr	r3, [r3, #20]
 80102b4:	029b      	lsls	r3, r3, #10
 80102b6:	697a      	ldr	r2, [r7, #20]
 80102b8:	4313      	orrs	r3, r2
 80102ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	697a      	ldr	r2, [r7, #20]
 80102c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	685a      	ldr	r2, [r3, #4]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	693a      	ldr	r2, [r7, #16]
 80102d4:	621a      	str	r2, [r3, #32]
}
 80102d6:	bf00      	nop
 80102d8:	371c      	adds	r7, #28
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	feff8fff 	.word	0xfeff8fff
 80102e8:	40010000 	.word	0x40010000
 80102ec:	40010400 	.word	0x40010400

080102f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b087      	sub	sp, #28
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	60f8      	str	r0, [r7, #12]
 80102f8:	60b9      	str	r1, [r7, #8]
 80102fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	6a1b      	ldr	r3, [r3, #32]
 8010300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	6a1b      	ldr	r3, [r3, #32]
 8010306:	f023 0201 	bic.w	r2, r3, #1
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	699b      	ldr	r3, [r3, #24]
 8010312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801031a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	011b      	lsls	r3, r3, #4
 8010320:	693a      	ldr	r2, [r7, #16]
 8010322:	4313      	orrs	r3, r2
 8010324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	f023 030a 	bic.w	r3, r3, #10
 801032c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	4313      	orrs	r3, r2
 8010334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	693a      	ldr	r2, [r7, #16]
 801033a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	697a      	ldr	r2, [r7, #20]
 8010340:	621a      	str	r2, [r3, #32]
}
 8010342:	bf00      	nop
 8010344:	371c      	adds	r7, #28
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr

0801034e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801034e:	b480      	push	{r7}
 8010350:	b087      	sub	sp, #28
 8010352:	af00      	add	r7, sp, #0
 8010354:	60f8      	str	r0, [r7, #12]
 8010356:	60b9      	str	r1, [r7, #8]
 8010358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	6a1b      	ldr	r3, [r3, #32]
 801035e:	f023 0210 	bic.w	r2, r3, #16
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	699b      	ldr	r3, [r3, #24]
 801036a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	6a1b      	ldr	r3, [r3, #32]
 8010370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	031b      	lsls	r3, r3, #12
 801037e:	697a      	ldr	r2, [r7, #20]
 8010380:	4313      	orrs	r3, r2
 8010382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801038a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	011b      	lsls	r3, r3, #4
 8010390:	693a      	ldr	r2, [r7, #16]
 8010392:	4313      	orrs	r3, r2
 8010394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	697a      	ldr	r2, [r7, #20]
 801039a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	693a      	ldr	r2, [r7, #16]
 80103a0:	621a      	str	r2, [r3, #32]
}
 80103a2:	bf00      	nop
 80103a4:	371c      	adds	r7, #28
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr

080103ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80103ae:	b480      	push	{r7}
 80103b0:	b085      	sub	sp, #20
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
 80103b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	689b      	ldr	r3, [r3, #8]
 80103bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80103c6:	683a      	ldr	r2, [r7, #0]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	4313      	orrs	r3, r2
 80103cc:	f043 0307 	orr.w	r3, r3, #7
 80103d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	68fa      	ldr	r2, [r7, #12]
 80103d6:	609a      	str	r2, [r3, #8]
}
 80103d8:	bf00      	nop
 80103da:	3714      	adds	r7, #20
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b087      	sub	sp, #28
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	60b9      	str	r1, [r7, #8]
 80103ee:	607a      	str	r2, [r7, #4]
 80103f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	689b      	ldr	r3, [r3, #8]
 80103f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80103fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	021a      	lsls	r2, r3, #8
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	431a      	orrs	r2, r3
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	4313      	orrs	r3, r2
 801040c:	697a      	ldr	r2, [r7, #20]
 801040e:	4313      	orrs	r3, r2
 8010410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	697a      	ldr	r2, [r7, #20]
 8010416:	609a      	str	r2, [r3, #8]
}
 8010418:	bf00      	nop
 801041a:	371c      	adds	r7, #28
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr

08010424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010424:	b480      	push	{r7}
 8010426:	b087      	sub	sp, #28
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	f003 031f 	and.w	r3, r3, #31
 8010436:	2201      	movs	r2, #1
 8010438:	fa02 f303 	lsl.w	r3, r2, r3
 801043c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6a1a      	ldr	r2, [r3, #32]
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	43db      	mvns	r3, r3
 8010446:	401a      	ands	r2, r3
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	6a1a      	ldr	r2, [r3, #32]
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	f003 031f 	and.w	r3, r3, #31
 8010456:	6879      	ldr	r1, [r7, #4]
 8010458:	fa01 f303 	lsl.w	r3, r1, r3
 801045c:	431a      	orrs	r2, r3
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	621a      	str	r2, [r3, #32]
}
 8010462:	bf00      	nop
 8010464:	371c      	adds	r7, #28
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
	...

08010470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010470:	b480      	push	{r7}
 8010472:	b085      	sub	sp, #20
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010480:	2b01      	cmp	r3, #1
 8010482:	d101      	bne.n	8010488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010484:	2302      	movs	r3, #2
 8010486:	e06d      	b.n	8010564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2201      	movs	r2, #1
 801048c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2202      	movs	r2, #2
 8010494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a30      	ldr	r2, [pc, #192]	; (8010570 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d004      	beq.n	80104bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a2f      	ldr	r2, [pc, #188]	; (8010574 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d108      	bne.n	80104ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80104c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	4313      	orrs	r3, r2
 80104cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	4313      	orrs	r3, r2
 80104de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	68fa      	ldr	r2, [r7, #12]
 80104e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a20      	ldr	r2, [pc, #128]	; (8010570 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d022      	beq.n	8010538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104fa:	d01d      	beq.n	8010538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a1d      	ldr	r2, [pc, #116]	; (8010578 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d018      	beq.n	8010538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a1c      	ldr	r2, [pc, #112]	; (801057c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d013      	beq.n	8010538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a1a      	ldr	r2, [pc, #104]	; (8010580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d00e      	beq.n	8010538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4a15      	ldr	r2, [pc, #84]	; (8010574 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d009      	beq.n	8010538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a16      	ldr	r2, [pc, #88]	; (8010584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d004      	beq.n	8010538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a15      	ldr	r2, [pc, #84]	; (8010588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d10c      	bne.n	8010552 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801053e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	689b      	ldr	r3, [r3, #8]
 8010544:	68ba      	ldr	r2, [r7, #8]
 8010546:	4313      	orrs	r3, r2
 8010548:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	68ba      	ldr	r2, [r7, #8]
 8010550:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2201      	movs	r2, #1
 8010556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2200      	movs	r2, #0
 801055e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010562:	2300      	movs	r3, #0
}
 8010564:	4618      	mov	r0, r3
 8010566:	3714      	adds	r7, #20
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr
 8010570:	40010000 	.word	0x40010000
 8010574:	40010400 	.word	0x40010400
 8010578:	40000400 	.word	0x40000400
 801057c:	40000800 	.word	0x40000800
 8010580:	40000c00 	.word	0x40000c00
 8010584:	40014000 	.word	0x40014000
 8010588:	40001800 	.word	0x40001800

0801058c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010594:	bf00      	nop
 8010596:	370c      	adds	r7, #12
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr

080105a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80105a8:	bf00      	nop
 80105aa:	370c      	adds	r7, #12
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80105bc:	bf00      	nop
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b085      	sub	sp, #20
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80105d2:	2300      	movs	r3, #0
 80105d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d027      	beq.n	8010632 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	4b2f      	ldr	r3, [pc, #188]	; (80106a8 <FMC_SDRAM_Init+0xe0>)
 80105ec:	4013      	ands	r3, r2
 80105ee:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80105f8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80105fe:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8010604:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 801060a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8010610:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8010616:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 801061c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010622:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	4313      	orrs	r3, r2
 8010628:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	601a      	str	r2, [r3, #0]
 8010630:	e032      	b.n	8010698 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801063e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010648:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801064e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010650:	68fa      	ldr	r2, [r7, #12]
 8010652:	4313      	orrs	r3, r2
 8010654:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	4b12      	ldr	r3, [pc, #72]	; (80106a8 <FMC_SDRAM_Init+0xe0>)
 8010660:	4013      	ands	r3, r2
 8010662:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801066c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8010672:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8010678:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 801067e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8010684:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010686:	68ba      	ldr	r2, [r7, #8]
 8010688:	4313      	orrs	r3, r2
 801068a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	68ba      	ldr	r2, [r7, #8]
 8010696:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3714      	adds	r7, #20
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	ffff8000 	.word	0xffff8000

080106ac <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b087      	sub	sp, #28
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80106b8:	2300      	movs	r3, #0
 80106ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80106bc:	2300      	movs	r3, #0
 80106be:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d02e      	beq.n	8010724 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	689b      	ldr	r3, [r3, #8]
 80106ca:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80106d2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	3b01      	subs	r3, #1
 80106e0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80106e2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	689b      	ldr	r3, [r3, #8]
 80106e8:	3b01      	subs	r3, #1
 80106ea:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80106ec:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	68db      	ldr	r3, [r3, #12]
 80106f2:	3b01      	subs	r3, #1
 80106f4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80106f6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	691b      	ldr	r3, [r3, #16]
 80106fc:	3b01      	subs	r3, #1
 80106fe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8010700:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	695b      	ldr	r3, [r3, #20]
 8010706:	3b01      	subs	r3, #1
 8010708:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 801070a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	699b      	ldr	r3, [r3, #24]
 8010710:	3b01      	subs	r3, #1
 8010712:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010714:	4313      	orrs	r3, r2
 8010716:	697a      	ldr	r2, [r7, #20]
 8010718:	4313      	orrs	r3, r2
 801071a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	697a      	ldr	r2, [r7, #20]
 8010720:	609a      	str	r2, [r3, #8]
 8010722:	e039      	b.n	8010798 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 801072a:	697a      	ldr	r2, [r7, #20]
 801072c:	4b1e      	ldr	r3, [pc, #120]	; (80107a8 <FMC_SDRAM_Timing_Init+0xfc>)
 801072e:	4013      	ands	r3, r2
 8010730:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	3b01      	subs	r3, #1
 8010738:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	695b      	ldr	r3, [r3, #20]
 801073e:	3b01      	subs	r3, #1
 8010740:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010742:	4313      	orrs	r3, r2
 8010744:	697a      	ldr	r2, [r7, #20]
 8010746:	4313      	orrs	r3, r2
 8010748:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010756:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	3b01      	subs	r3, #1
 8010764:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010766:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	689b      	ldr	r3, [r3, #8]
 801076c:	3b01      	subs	r3, #1
 801076e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010770:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	691b      	ldr	r3, [r3, #16]
 8010776:	3b01      	subs	r3, #1
 8010778:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 801077a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	699b      	ldr	r3, [r3, #24]
 8010780:	3b01      	subs	r3, #1
 8010782:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010784:	4313      	orrs	r3, r2
 8010786:	693a      	ldr	r2, [r7, #16]
 8010788:	4313      	orrs	r3, r2
 801078a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	697a      	ldr	r2, [r7, #20]
 8010790:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	693a      	ldr	r2, [r7, #16]
 8010796:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	371c      	adds	r7, #28
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr
 80107a6:	bf00      	nop
 80107a8:	ff0f0fff 	.word	0xff0f0fff

080107ac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80107ac:	b480      	push	{r7}
 80107ae:	b085      	sub	sp, #20
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	691a      	ldr	r2, [r3, #16]
 80107bc:	4b0c      	ldr	r3, [pc, #48]	; (80107f0 <FMC_SDRAM_SendCommand+0x44>)
 80107be:	4013      	ands	r3, r2
 80107c0:	68ba      	ldr	r2, [r7, #8]
 80107c2:	6811      	ldr	r1, [r2, #0]
 80107c4:	68ba      	ldr	r2, [r7, #8]
 80107c6:	6852      	ldr	r2, [r2, #4]
 80107c8:	4311      	orrs	r1, r2
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	6892      	ldr	r2, [r2, #8]
 80107ce:	3a01      	subs	r2, #1
 80107d0:	0152      	lsls	r2, r2, #5
 80107d2:	4311      	orrs	r1, r2
 80107d4:	68ba      	ldr	r2, [r7, #8]
 80107d6:	68d2      	ldr	r2, [r2, #12]
 80107d8:	0252      	lsls	r2, r2, #9
 80107da:	430a      	orrs	r2, r1
 80107dc:	431a      	orrs	r2, r3
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 80107e2:	2300      	movs	r3, #0
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3714      	adds	r7, #20
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr
 80107f0:	ffc00000 	.word	0xffc00000

080107f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	695a      	ldr	r2, [r3, #20]
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	005b      	lsls	r3, r3, #1
 8010806:	431a      	orrs	r2, r3
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 801080c:	2300      	movs	r3, #0
}
 801080e:	4618      	mov	r0, r3
 8010810:	370c      	adds	r7, #12
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr

0801081a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801081a:	b480      	push	{r7}
 801081c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801081e:	bf00      	nop
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801082e:	f3ef 8305 	mrs	r3, IPSR
 8010832:	60bb      	str	r3, [r7, #8]
  return(result);
 8010834:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010836:	2b00      	cmp	r3, #0
 8010838:	d10f      	bne.n	801085a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801083a:	f3ef 8310 	mrs	r3, PRIMASK
 801083e:	607b      	str	r3, [r7, #4]
  return(result);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d105      	bne.n	8010852 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010846:	f3ef 8311 	mrs	r3, BASEPRI
 801084a:	603b      	str	r3, [r7, #0]
  return(result);
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d007      	beq.n	8010862 <osKernelInitialize+0x3a>
 8010852:	4b0e      	ldr	r3, [pc, #56]	; (801088c <osKernelInitialize+0x64>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2b02      	cmp	r3, #2
 8010858:	d103      	bne.n	8010862 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801085a:	f06f 0305 	mvn.w	r3, #5
 801085e:	60fb      	str	r3, [r7, #12]
 8010860:	e00c      	b.n	801087c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010862:	4b0a      	ldr	r3, [pc, #40]	; (801088c <osKernelInitialize+0x64>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d105      	bne.n	8010876 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801086a:	4b08      	ldr	r3, [pc, #32]	; (801088c <osKernelInitialize+0x64>)
 801086c:	2201      	movs	r2, #1
 801086e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010870:	2300      	movs	r3, #0
 8010872:	60fb      	str	r3, [r7, #12]
 8010874:	e002      	b.n	801087c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010876:	f04f 33ff 	mov.w	r3, #4294967295
 801087a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801087c:	68fb      	ldr	r3, [r7, #12]
}
 801087e:	4618      	mov	r0, r3
 8010880:	3714      	adds	r7, #20
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	20023828 	.word	0x20023828

08010890 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010896:	f3ef 8305 	mrs	r3, IPSR
 801089a:	60bb      	str	r3, [r7, #8]
  return(result);
 801089c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d10f      	bne.n	80108c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108a2:	f3ef 8310 	mrs	r3, PRIMASK
 80108a6:	607b      	str	r3, [r7, #4]
  return(result);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d105      	bne.n	80108ba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80108ae:	f3ef 8311 	mrs	r3, BASEPRI
 80108b2:	603b      	str	r3, [r7, #0]
  return(result);
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d007      	beq.n	80108ca <osKernelStart+0x3a>
 80108ba:	4b0f      	ldr	r3, [pc, #60]	; (80108f8 <osKernelStart+0x68>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b02      	cmp	r3, #2
 80108c0:	d103      	bne.n	80108ca <osKernelStart+0x3a>
    stat = osErrorISR;
 80108c2:	f06f 0305 	mvn.w	r3, #5
 80108c6:	60fb      	str	r3, [r7, #12]
 80108c8:	e010      	b.n	80108ec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80108ca:	4b0b      	ldr	r3, [pc, #44]	; (80108f8 <osKernelStart+0x68>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d109      	bne.n	80108e6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80108d2:	f7ff ffa2 	bl	801081a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80108d6:	4b08      	ldr	r3, [pc, #32]	; (80108f8 <osKernelStart+0x68>)
 80108d8:	2202      	movs	r2, #2
 80108da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80108dc:	f002 fb18 	bl	8012f10 <vTaskStartScheduler>
      stat = osOK;
 80108e0:	2300      	movs	r3, #0
 80108e2:	60fb      	str	r3, [r7, #12]
 80108e4:	e002      	b.n	80108ec <osKernelStart+0x5c>
    } else {
      stat = osError;
 80108e6:	f04f 33ff 	mov.w	r3, #4294967295
 80108ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80108ec:	68fb      	ldr	r3, [r7, #12]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	20023828 	.word	0x20023828

080108fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b090      	sub	sp, #64	; 0x40
 8010900:	af04      	add	r7, sp, #16
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010908:	2300      	movs	r3, #0
 801090a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801090c:	f3ef 8305 	mrs	r3, IPSR
 8010910:	61fb      	str	r3, [r7, #28]
  return(result);
 8010912:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010914:	2b00      	cmp	r3, #0
 8010916:	f040 808f 	bne.w	8010a38 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801091a:	f3ef 8310 	mrs	r3, PRIMASK
 801091e:	61bb      	str	r3, [r7, #24]
  return(result);
 8010920:	69bb      	ldr	r3, [r7, #24]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d105      	bne.n	8010932 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010926:	f3ef 8311 	mrs	r3, BASEPRI
 801092a:	617b      	str	r3, [r7, #20]
  return(result);
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d003      	beq.n	801093a <osThreadNew+0x3e>
 8010932:	4b44      	ldr	r3, [pc, #272]	; (8010a44 <osThreadNew+0x148>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2b02      	cmp	r3, #2
 8010938:	d07e      	beq.n	8010a38 <osThreadNew+0x13c>
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d07b      	beq.n	8010a38 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010940:	2380      	movs	r3, #128	; 0x80
 8010942:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010944:	2318      	movs	r3, #24
 8010946:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010948:	2300      	movs	r3, #0
 801094a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801094c:	f04f 33ff 	mov.w	r3, #4294967295
 8010950:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d045      	beq.n	80109e4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <osThreadNew+0x6a>
        name = attr->name;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	699b      	ldr	r3, [r3, #24]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d002      	beq.n	8010974 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	699b      	ldr	r3, [r3, #24]
 8010972:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	2b00      	cmp	r3, #0
 8010978:	d008      	beq.n	801098c <osThreadNew+0x90>
 801097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097c:	2b38      	cmp	r3, #56	; 0x38
 801097e:	d805      	bhi.n	801098c <osThreadNew+0x90>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	f003 0301 	and.w	r3, r3, #1
 8010988:	2b00      	cmp	r3, #0
 801098a:	d001      	beq.n	8010990 <osThreadNew+0x94>
        return (NULL);
 801098c:	2300      	movs	r3, #0
 801098e:	e054      	b.n	8010a3a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	695b      	ldr	r3, [r3, #20]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d003      	beq.n	80109a0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	695b      	ldr	r3, [r3, #20]
 801099c:	089b      	lsrs	r3, r3, #2
 801099e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	689b      	ldr	r3, [r3, #8]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00e      	beq.n	80109c6 <osThreadNew+0xca>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	68db      	ldr	r3, [r3, #12]
 80109ac:	2b5b      	cmp	r3, #91	; 0x5b
 80109ae:	d90a      	bls.n	80109c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d006      	beq.n	80109c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	695b      	ldr	r3, [r3, #20]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <osThreadNew+0xca>
        mem = 1;
 80109c0:	2301      	movs	r3, #1
 80109c2:	623b      	str	r3, [r7, #32]
 80109c4:	e010      	b.n	80109e8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	689b      	ldr	r3, [r3, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d10c      	bne.n	80109e8 <osThreadNew+0xec>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	68db      	ldr	r3, [r3, #12]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d108      	bne.n	80109e8 <osThreadNew+0xec>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	691b      	ldr	r3, [r3, #16]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d104      	bne.n	80109e8 <osThreadNew+0xec>
          mem = 0;
 80109de:	2300      	movs	r3, #0
 80109e0:	623b      	str	r3, [r7, #32]
 80109e2:	e001      	b.n	80109e8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80109e4:	2300      	movs	r3, #0
 80109e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80109e8:	6a3b      	ldr	r3, [r7, #32]
 80109ea:	2b01      	cmp	r3, #1
 80109ec:	d110      	bne.n	8010a10 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80109f6:	9202      	str	r2, [sp, #8]
 80109f8:	9301      	str	r3, [sp, #4]
 80109fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f002 f8a3 	bl	8012b50 <xTaskCreateStatic>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	613b      	str	r3, [r7, #16]
 8010a0e:	e013      	b.n	8010a38 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010a10:	6a3b      	ldr	r3, [r7, #32]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d110      	bne.n	8010a38 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	f107 0310 	add.w	r3, r7, #16
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a22:	9300      	str	r3, [sp, #0]
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	f002 f8f4 	bl	8012c16 <xTaskCreate>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d001      	beq.n	8010a38 <osThreadNew+0x13c>
          hTask = NULL;
 8010a34:	2300      	movs	r3, #0
 8010a36:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010a38:	693b      	ldr	r3, [r7, #16]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3730      	adds	r7, #48	; 0x30
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	20023828 	.word	0x20023828

08010a48 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8010a48:	b480      	push	{r7}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a4e:	f3ef 8305 	mrs	r3, IPSR
 8010a52:	60bb      	str	r3, [r7, #8]
  return(result);
 8010a54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d10f      	bne.n	8010a7a <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8010a5e:	607b      	str	r3, [r7, #4]
  return(result);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d105      	bne.n	8010a72 <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a66:	f3ef 8311 	mrs	r3, BASEPRI
 8010a6a:	603b      	str	r3, [r7, #0]
  return(result);
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d007      	beq.n	8010a82 <osThreadYield+0x3a>
 8010a72:	4b0c      	ldr	r3, [pc, #48]	; (8010aa4 <osThreadYield+0x5c>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b02      	cmp	r3, #2
 8010a78:	d103      	bne.n	8010a82 <osThreadYield+0x3a>
    stat = osErrorISR;
 8010a7a:	f06f 0305 	mvn.w	r3, #5
 8010a7e:	60fb      	str	r3, [r7, #12]
 8010a80:	e009      	b.n	8010a96 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8010a86:	4b08      	ldr	r3, [pc, #32]	; (8010aa8 <osThreadYield+0x60>)
 8010a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a8c:	601a      	str	r2, [r3, #0]
 8010a8e:	f3bf 8f4f 	dsb	sy
 8010a92:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8010a96:	68fb      	ldr	r3, [r7, #12]
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3714      	adds	r7, #20
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr
 8010aa4:	20023828 	.word	0x20023828
 8010aa8:	e000ed04 	.word	0xe000ed04

08010aac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b086      	sub	sp, #24
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ab4:	f3ef 8305 	mrs	r3, IPSR
 8010ab8:	613b      	str	r3, [r7, #16]
  return(result);
 8010aba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d10f      	bne.n	8010ae0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8010ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d105      	bne.n	8010ad8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010acc:	f3ef 8311 	mrs	r3, BASEPRI
 8010ad0:	60bb      	str	r3, [r7, #8]
  return(result);
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d007      	beq.n	8010ae8 <osDelay+0x3c>
 8010ad8:	4b0a      	ldr	r3, [pc, #40]	; (8010b04 <osDelay+0x58>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	d103      	bne.n	8010ae8 <osDelay+0x3c>
    stat = osErrorISR;
 8010ae0:	f06f 0305 	mvn.w	r3, #5
 8010ae4:	617b      	str	r3, [r7, #20]
 8010ae6:	e007      	b.n	8010af8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d002      	beq.n	8010af8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f002 f9d6 	bl	8012ea4 <vTaskDelay>
    }
  }

  return (stat);
 8010af8:	697b      	ldr	r3, [r7, #20]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3718      	adds	r7, #24
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	20023828 	.word	0x20023828

08010b08 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b08c      	sub	sp, #48	; 0x30
 8010b0c:	af02      	add	r7, sp, #8
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010b14:	2300      	movs	r3, #0
 8010b16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b18:	f3ef 8305 	mrs	r3, IPSR
 8010b1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8010b1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f040 8086 	bne.w	8010c32 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b26:	f3ef 8310 	mrs	r3, PRIMASK
 8010b2a:	617b      	str	r3, [r7, #20]
  return(result);
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d105      	bne.n	8010b3e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b32:	f3ef 8311 	mrs	r3, BASEPRI
 8010b36:	613b      	str	r3, [r7, #16]
  return(result);
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d003      	beq.n	8010b46 <osSemaphoreNew+0x3e>
 8010b3e:	4b3f      	ldr	r3, [pc, #252]	; (8010c3c <osSemaphoreNew+0x134>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	2b02      	cmp	r3, #2
 8010b44:	d075      	beq.n	8010c32 <osSemaphoreNew+0x12a>
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d072      	beq.n	8010c32 <osSemaphoreNew+0x12a>
 8010b4c:	68ba      	ldr	r2, [r7, #8]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d86e      	bhi.n	8010c32 <osSemaphoreNew+0x12a>
    mem = -1;
 8010b54:	f04f 33ff 	mov.w	r3, #4294967295
 8010b58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d015      	beq.n	8010b8c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	689b      	ldr	r3, [r3, #8]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d006      	beq.n	8010b76 <osSemaphoreNew+0x6e>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	2b4f      	cmp	r3, #79	; 0x4f
 8010b6e:	d902      	bls.n	8010b76 <osSemaphoreNew+0x6e>
        mem = 1;
 8010b70:	2301      	movs	r3, #1
 8010b72:	623b      	str	r3, [r7, #32]
 8010b74:	e00c      	b.n	8010b90 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	689b      	ldr	r3, [r3, #8]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d108      	bne.n	8010b90 <osSemaphoreNew+0x88>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d104      	bne.n	8010b90 <osSemaphoreNew+0x88>
          mem = 0;
 8010b86:	2300      	movs	r3, #0
 8010b88:	623b      	str	r3, [r7, #32]
 8010b8a:	e001      	b.n	8010b90 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010b90:	6a3b      	ldr	r3, [r7, #32]
 8010b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b96:	d04c      	beq.n	8010c32 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d128      	bne.n	8010bf0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8010b9e:	6a3b      	ldr	r3, [r7, #32]
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d10a      	bne.n	8010bba <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	689b      	ldr	r3, [r3, #8]
 8010ba8:	2203      	movs	r2, #3
 8010baa:	9200      	str	r2, [sp, #0]
 8010bac:	2200      	movs	r2, #0
 8010bae:	2100      	movs	r1, #0
 8010bb0:	2001      	movs	r0, #1
 8010bb2:	f000 ffe1 	bl	8011b78 <xQueueGenericCreateStatic>
 8010bb6:	6278      	str	r0, [r7, #36]	; 0x24
 8010bb8:	e005      	b.n	8010bc6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010bba:	2203      	movs	r2, #3
 8010bbc:	2100      	movs	r1, #0
 8010bbe:	2001      	movs	r0, #1
 8010bc0:	f001 f85c 	bl	8011c7c <xQueueGenericCreate>
 8010bc4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d022      	beq.n	8010c12 <osSemaphoreNew+0x10a>
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d01f      	beq.n	8010c12 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	2100      	movs	r1, #0
 8010bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bda:	f001 f927 	bl	8011e2c <xQueueGenericSend>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d016      	beq.n	8010c12 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8010be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010be6:	f001 fddd 	bl	80127a4 <vQueueDelete>
            hSemaphore = NULL;
 8010bea:	2300      	movs	r3, #0
 8010bec:	627b      	str	r3, [r7, #36]	; 0x24
 8010bee:	e010      	b.n	8010c12 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8010bf0:	6a3b      	ldr	r3, [r7, #32]
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d108      	bne.n	8010c08 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	689b      	ldr	r3, [r3, #8]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	68b9      	ldr	r1, [r7, #8]
 8010bfe:	68f8      	ldr	r0, [r7, #12]
 8010c00:	f001 f8a1 	bl	8011d46 <xQueueCreateCountingSemaphoreStatic>
 8010c04:	6278      	str	r0, [r7, #36]	; 0x24
 8010c06:	e004      	b.n	8010c12 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010c08:	68b9      	ldr	r1, [r7, #8]
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f001 f8d6 	bl	8011dbc <xQueueCreateCountingSemaphore>
 8010c10:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d00c      	beq.n	8010c32 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d003      	beq.n	8010c26 <osSemaphoreNew+0x11e>
          name = attr->name;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	61fb      	str	r3, [r7, #28]
 8010c24:	e001      	b.n	8010c2a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8010c26:	2300      	movs	r3, #0
 8010c28:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010c2a:	69f9      	ldr	r1, [r7, #28]
 8010c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c2e:	f001 ff07 	bl	8012a40 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3728      	adds	r7, #40	; 0x28
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	20023828 	.word	0x20023828

08010c40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b088      	sub	sp, #32
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d103      	bne.n	8010c60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010c58:	f06f 0303 	mvn.w	r3, #3
 8010c5c:	61fb      	str	r3, [r7, #28]
 8010c5e:	e04b      	b.n	8010cf8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c60:	f3ef 8305 	mrs	r3, IPSR
 8010c64:	617b      	str	r3, [r7, #20]
  return(result);
 8010c66:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d10f      	bne.n	8010c8c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8010c70:	613b      	str	r3, [r7, #16]
  return(result);
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d105      	bne.n	8010c84 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c78:	f3ef 8311 	mrs	r3, BASEPRI
 8010c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d026      	beq.n	8010cd2 <osSemaphoreAcquire+0x92>
 8010c84:	4b1f      	ldr	r3, [pc, #124]	; (8010d04 <osSemaphoreAcquire+0xc4>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2b02      	cmp	r3, #2
 8010c8a:	d122      	bne.n	8010cd2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d003      	beq.n	8010c9a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010c92:	f06f 0303 	mvn.w	r3, #3
 8010c96:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010c98:	e02d      	b.n	8010cf6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010c9e:	f107 0308 	add.w	r3, r7, #8
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	69b8      	ldr	r0, [r7, #24]
 8010ca8:	f001 fcf6 	bl	8012698 <xQueueReceiveFromISR>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b01      	cmp	r3, #1
 8010cb0:	d003      	beq.n	8010cba <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010cb2:	f06f 0302 	mvn.w	r3, #2
 8010cb6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010cb8:	e01d      	b.n	8010cf6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d01a      	beq.n	8010cf6 <osSemaphoreAcquire+0xb6>
 8010cc0:	4b11      	ldr	r3, [pc, #68]	; (8010d08 <osSemaphoreAcquire+0xc8>)
 8010cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cc6:	601a      	str	r2, [r3, #0]
 8010cc8:	f3bf 8f4f 	dsb	sy
 8010ccc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010cd0:	e011      	b.n	8010cf6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010cd2:	6839      	ldr	r1, [r7, #0]
 8010cd4:	69b8      	ldr	r0, [r7, #24]
 8010cd6:	f001 fbcb 	bl	8012470 <xQueueSemaphoreTake>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d00b      	beq.n	8010cf8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d003      	beq.n	8010cee <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010ce6:	f06f 0301 	mvn.w	r3, #1
 8010cea:	61fb      	str	r3, [r7, #28]
 8010cec:	e004      	b.n	8010cf8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010cee:	f06f 0302 	mvn.w	r3, #2
 8010cf2:	61fb      	str	r3, [r7, #28]
 8010cf4:	e000      	b.n	8010cf8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010cf6:	bf00      	nop
      }
    }
  }

  return (stat);
 8010cf8:	69fb      	ldr	r3, [r7, #28]
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3720      	adds	r7, #32
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	20023828 	.word	0x20023828
 8010d08:	e000ed04 	.word	0xe000ed04

08010d0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b088      	sub	sp, #32
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010d1c:	69bb      	ldr	r3, [r7, #24]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d103      	bne.n	8010d2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010d22:	f06f 0303 	mvn.w	r3, #3
 8010d26:	61fb      	str	r3, [r7, #28]
 8010d28:	e03e      	b.n	8010da8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d2a:	f3ef 8305 	mrs	r3, IPSR
 8010d2e:	617b      	str	r3, [r7, #20]
  return(result);
 8010d30:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10f      	bne.n	8010d56 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d36:	f3ef 8310 	mrs	r3, PRIMASK
 8010d3a:	613b      	str	r3, [r7, #16]
  return(result);
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d105      	bne.n	8010d4e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d42:	f3ef 8311 	mrs	r3, BASEPRI
 8010d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d01e      	beq.n	8010d8c <osSemaphoreRelease+0x80>
 8010d4e:	4b19      	ldr	r3, [pc, #100]	; (8010db4 <osSemaphoreRelease+0xa8>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	2b02      	cmp	r3, #2
 8010d54:	d11a      	bne.n	8010d8c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010d56:	2300      	movs	r3, #0
 8010d58:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010d5a:	f107 0308 	add.w	r3, r7, #8
 8010d5e:	4619      	mov	r1, r3
 8010d60:	69b8      	ldr	r0, [r7, #24]
 8010d62:	f001 fa09 	bl	8012178 <xQueueGiveFromISR>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d003      	beq.n	8010d74 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010d6c:	f06f 0302 	mvn.w	r3, #2
 8010d70:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010d72:	e018      	b.n	8010da6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d015      	beq.n	8010da6 <osSemaphoreRelease+0x9a>
 8010d7a:	4b0f      	ldr	r3, [pc, #60]	; (8010db8 <osSemaphoreRelease+0xac>)
 8010d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d80:	601a      	str	r2, [r3, #0]
 8010d82:	f3bf 8f4f 	dsb	sy
 8010d86:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010d8a:	e00c      	b.n	8010da6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	2200      	movs	r2, #0
 8010d90:	2100      	movs	r1, #0
 8010d92:	69b8      	ldr	r0, [r7, #24]
 8010d94:	f001 f84a 	bl	8011e2c <xQueueGenericSend>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d004      	beq.n	8010da8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010d9e:	f06f 0302 	mvn.w	r3, #2
 8010da2:	61fb      	str	r3, [r7, #28]
 8010da4:	e000      	b.n	8010da8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010da6:	bf00      	nop
    }
  }

  return (stat);
 8010da8:	69fb      	ldr	r3, [r7, #28]
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3720      	adds	r7, #32
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	20023828 	.word	0x20023828
 8010db8:	e000ed04 	.word	0xe000ed04

08010dbc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b08c      	sub	sp, #48	; 0x30
 8010dc0:	af02      	add	r7, sp, #8
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dcc:	f3ef 8305 	mrs	r3, IPSR
 8010dd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8010dd2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d16f      	bne.n	8010eb8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8010ddc:	617b      	str	r3, [r7, #20]
  return(result);
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d105      	bne.n	8010df0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010de4:	f3ef 8311 	mrs	r3, BASEPRI
 8010de8:	613b      	str	r3, [r7, #16]
  return(result);
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d003      	beq.n	8010df8 <osMessageQueueNew+0x3c>
 8010df0:	4b34      	ldr	r3, [pc, #208]	; (8010ec4 <osMessageQueueNew+0x108>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2b02      	cmp	r3, #2
 8010df6:	d05f      	beq.n	8010eb8 <osMessageQueueNew+0xfc>
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d05c      	beq.n	8010eb8 <osMessageQueueNew+0xfc>
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d059      	beq.n	8010eb8 <osMessageQueueNew+0xfc>
    mem = -1;
 8010e04:	f04f 33ff 	mov.w	r3, #4294967295
 8010e08:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d029      	beq.n	8010e64 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	689b      	ldr	r3, [r3, #8]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d012      	beq.n	8010e3e <osMessageQueueNew+0x82>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	2b4f      	cmp	r3, #79	; 0x4f
 8010e1e:	d90e      	bls.n	8010e3e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d00a      	beq.n	8010e3e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	695a      	ldr	r2, [r3, #20]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	68b9      	ldr	r1, [r7, #8]
 8010e30:	fb01 f303 	mul.w	r3, r1, r3
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d302      	bcc.n	8010e3e <osMessageQueueNew+0x82>
        mem = 1;
 8010e38:	2301      	movs	r3, #1
 8010e3a:	623b      	str	r3, [r7, #32]
 8010e3c:	e014      	b.n	8010e68 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	689b      	ldr	r3, [r3, #8]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d110      	bne.n	8010e68 <osMessageQueueNew+0xac>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d10c      	bne.n	8010e68 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d108      	bne.n	8010e68 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	695b      	ldr	r3, [r3, #20]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d104      	bne.n	8010e68 <osMessageQueueNew+0xac>
          mem = 0;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	623b      	str	r3, [r7, #32]
 8010e62:	e001      	b.n	8010e68 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010e64:	2300      	movs	r3, #0
 8010e66:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010e68:	6a3b      	ldr	r3, [r7, #32]
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d10b      	bne.n	8010e86 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	691a      	ldr	r2, [r3, #16]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	689b      	ldr	r3, [r3, #8]
 8010e76:	2100      	movs	r1, #0
 8010e78:	9100      	str	r1, [sp, #0]
 8010e7a:	68b9      	ldr	r1, [r7, #8]
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f000 fe7b 	bl	8011b78 <xQueueGenericCreateStatic>
 8010e82:	6278      	str	r0, [r7, #36]	; 0x24
 8010e84:	e008      	b.n	8010e98 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8010e86:	6a3b      	ldr	r3, [r7, #32]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d105      	bne.n	8010e98 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	68b9      	ldr	r1, [r7, #8]
 8010e90:	68f8      	ldr	r0, [r7, #12]
 8010e92:	f000 fef3 	bl	8011c7c <xQueueGenericCreate>
 8010e96:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d00c      	beq.n	8010eb8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d003      	beq.n	8010eac <osMessageQueueNew+0xf0>
        name = attr->name;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	61fb      	str	r3, [r7, #28]
 8010eaa:	e001      	b.n	8010eb0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8010eac:	2300      	movs	r3, #0
 8010eae:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010eb0:	69f9      	ldr	r1, [r7, #28]
 8010eb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010eb4:	f001 fdc4 	bl	8012a40 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3728      	adds	r7, #40	; 0x28
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	20023828 	.word	0x20023828

08010ec8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b08a      	sub	sp, #40	; 0x28
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	60f8      	str	r0, [r7, #12]
 8010ed0:	60b9      	str	r1, [r7, #8]
 8010ed2:	603b      	str	r3, [r7, #0]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010edc:	2300      	movs	r3, #0
 8010ede:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ee0:	f3ef 8305 	mrs	r3, IPSR
 8010ee4:	61fb      	str	r3, [r7, #28]
  return(result);
 8010ee6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d10f      	bne.n	8010f0c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010eec:	f3ef 8310 	mrs	r3, PRIMASK
 8010ef0:	61bb      	str	r3, [r7, #24]
  return(result);
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d105      	bne.n	8010f04 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8010efc:	617b      	str	r3, [r7, #20]
  return(result);
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d02c      	beq.n	8010f5e <osMessageQueuePut+0x96>
 8010f04:	4b28      	ldr	r3, [pc, #160]	; (8010fa8 <osMessageQueuePut+0xe0>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b02      	cmp	r3, #2
 8010f0a:	d128      	bne.n	8010f5e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f0c:	6a3b      	ldr	r3, [r7, #32]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d005      	beq.n	8010f1e <osMessageQueuePut+0x56>
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d002      	beq.n	8010f1e <osMessageQueuePut+0x56>
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d003      	beq.n	8010f26 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010f1e:	f06f 0303 	mvn.w	r3, #3
 8010f22:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f24:	e039      	b.n	8010f9a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010f26:	2300      	movs	r3, #0
 8010f28:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010f2a:	f107 0210 	add.w	r2, r7, #16
 8010f2e:	2300      	movs	r3, #0
 8010f30:	68b9      	ldr	r1, [r7, #8]
 8010f32:	6a38      	ldr	r0, [r7, #32]
 8010f34:	f001 f880 	bl	8012038 <xQueueGenericSendFromISR>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d003      	beq.n	8010f46 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8010f3e:	f06f 0302 	mvn.w	r3, #2
 8010f42:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f44:	e029      	b.n	8010f9a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d026      	beq.n	8010f9a <osMessageQueuePut+0xd2>
 8010f4c:	4b17      	ldr	r3, [pc, #92]	; (8010fac <osMessageQueuePut+0xe4>)
 8010f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f52:	601a      	str	r2, [r3, #0]
 8010f54:	f3bf 8f4f 	dsb	sy
 8010f58:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f5c:	e01d      	b.n	8010f9a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010f5e:	6a3b      	ldr	r3, [r7, #32]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d002      	beq.n	8010f6a <osMessageQueuePut+0xa2>
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d103      	bne.n	8010f72 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010f6a:	f06f 0303 	mvn.w	r3, #3
 8010f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f70:	e014      	b.n	8010f9c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010f72:	2300      	movs	r3, #0
 8010f74:	683a      	ldr	r2, [r7, #0]
 8010f76:	68b9      	ldr	r1, [r7, #8]
 8010f78:	6a38      	ldr	r0, [r7, #32]
 8010f7a:	f000 ff57 	bl	8011e2c <xQueueGenericSend>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d00b      	beq.n	8010f9c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d003      	beq.n	8010f92 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010f8a:	f06f 0301 	mvn.w	r3, #1
 8010f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f90:	e004      	b.n	8010f9c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010f92:	f06f 0302 	mvn.w	r3, #2
 8010f96:	627b      	str	r3, [r7, #36]	; 0x24
 8010f98:	e000      	b.n	8010f9c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f9a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3728      	adds	r7, #40	; 0x28
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	20023828 	.word	0x20023828
 8010fac:	e000ed04 	.word	0xe000ed04

08010fb0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b08a      	sub	sp, #40	; 0x28
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	60b9      	str	r1, [r7, #8]
 8010fba:	607a      	str	r2, [r7, #4]
 8010fbc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010fc6:	f3ef 8305 	mrs	r3, IPSR
 8010fca:	61fb      	str	r3, [r7, #28]
  return(result);
 8010fcc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d10f      	bne.n	8010ff2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8010fd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d105      	bne.n	8010fea <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010fde:	f3ef 8311 	mrs	r3, BASEPRI
 8010fe2:	617b      	str	r3, [r7, #20]
  return(result);
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d02c      	beq.n	8011044 <osMessageQueueGet+0x94>
 8010fea:	4b28      	ldr	r3, [pc, #160]	; (801108c <osMessageQueueGet+0xdc>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b02      	cmp	r3, #2
 8010ff0:	d128      	bne.n	8011044 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ff2:	6a3b      	ldr	r3, [r7, #32]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d005      	beq.n	8011004 <osMessageQueueGet+0x54>
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d002      	beq.n	8011004 <osMessageQueueGet+0x54>
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d003      	beq.n	801100c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8011004:	f06f 0303 	mvn.w	r3, #3
 8011008:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801100a:	e038      	b.n	801107e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801100c:	2300      	movs	r3, #0
 801100e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011010:	f107 0310 	add.w	r3, r7, #16
 8011014:	461a      	mov	r2, r3
 8011016:	68b9      	ldr	r1, [r7, #8]
 8011018:	6a38      	ldr	r0, [r7, #32]
 801101a:	f001 fb3d 	bl	8012698 <xQueueReceiveFromISR>
 801101e:	4603      	mov	r3, r0
 8011020:	2b01      	cmp	r3, #1
 8011022:	d003      	beq.n	801102c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8011024:	f06f 0302 	mvn.w	r3, #2
 8011028:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801102a:	e028      	b.n	801107e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d025      	beq.n	801107e <osMessageQueueGet+0xce>
 8011032:	4b17      	ldr	r3, [pc, #92]	; (8011090 <osMessageQueueGet+0xe0>)
 8011034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011038:	601a      	str	r2, [r3, #0]
 801103a:	f3bf 8f4f 	dsb	sy
 801103e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011042:	e01c      	b.n	801107e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011044:	6a3b      	ldr	r3, [r7, #32]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d002      	beq.n	8011050 <osMessageQueueGet+0xa0>
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d103      	bne.n	8011058 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8011050:	f06f 0303 	mvn.w	r3, #3
 8011054:	627b      	str	r3, [r7, #36]	; 0x24
 8011056:	e013      	b.n	8011080 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011058:	683a      	ldr	r2, [r7, #0]
 801105a:	68b9      	ldr	r1, [r7, #8]
 801105c:	6a38      	ldr	r0, [r7, #32]
 801105e:	f001 f921 	bl	80122a4 <xQueueReceive>
 8011062:	4603      	mov	r3, r0
 8011064:	2b01      	cmp	r3, #1
 8011066:	d00b      	beq.n	8011080 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d003      	beq.n	8011076 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801106e:	f06f 0301 	mvn.w	r3, #1
 8011072:	627b      	str	r3, [r7, #36]	; 0x24
 8011074:	e004      	b.n	8011080 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8011076:	f06f 0302 	mvn.w	r3, #2
 801107a:	627b      	str	r3, [r7, #36]	; 0x24
 801107c:	e000      	b.n	8011080 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801107e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011082:	4618      	mov	r0, r3
 8011084:	3728      	adds	r7, #40	; 0x28
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
 801108a:	bf00      	nop
 801108c:	20023828 	.word	0x20023828
 8011090:	e000ed04 	.word	0xe000ed04

08011094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	4a07      	ldr	r2, [pc, #28]	; (80110c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80110a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	4a06      	ldr	r2, [pc, #24]	; (80110c4 <vApplicationGetIdleTaskMemory+0x30>)
 80110aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2280      	movs	r2, #128	; 0x80
 80110b0:	601a      	str	r2, [r3, #0]
}
 80110b2:	bf00      	nop
 80110b4:	3714      	adds	r7, #20
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	2002382c 	.word	0x2002382c
 80110c4:	20023888 	.word	0x20023888

080110c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80110c8:	b480      	push	{r7}
 80110ca:	b085      	sub	sp, #20
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	4a07      	ldr	r2, [pc, #28]	; (80110f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80110d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	4a06      	ldr	r2, [pc, #24]	; (80110f8 <vApplicationGetTimerTaskMemory+0x30>)
 80110de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80110e6:	601a      	str	r2, [r3, #0]
}
 80110e8:	bf00      	nop
 80110ea:	3714      	adds	r7, #20
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr
 80110f4:	20023a88 	.word	0x20023a88
 80110f8:	20023ae4 	.word	0x20023ae4

080110fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b08a      	sub	sp, #40	; 0x28
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011104:	2300      	movs	r3, #0
 8011106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011108:	f001 ff6c 	bl	8012fe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801110c:	4b5b      	ldr	r3, [pc, #364]	; (801127c <pvPortMalloc+0x180>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d101      	bne.n	8011118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011114:	f000 f91a 	bl	801134c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011118:	4b59      	ldr	r3, [pc, #356]	; (8011280 <pvPortMalloc+0x184>)
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	4013      	ands	r3, r2
 8011120:	2b00      	cmp	r3, #0
 8011122:	f040 8092 	bne.w	801124a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d01f      	beq.n	801116c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 801112c:	2208      	movs	r2, #8
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4413      	add	r3, r2
 8011132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f003 0307 	and.w	r3, r3, #7
 801113a:	2b00      	cmp	r3, #0
 801113c:	d016      	beq.n	801116c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f023 0307 	bic.w	r3, r3, #7
 8011144:	3308      	adds	r3, #8
 8011146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f003 0307 	and.w	r3, r3, #7
 801114e:	2b00      	cmp	r3, #0
 8011150:	d00c      	beq.n	801116c <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011152:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011156:	b672      	cpsid	i
 8011158:	f383 8811 	msr	BASEPRI, r3
 801115c:	f3bf 8f6f 	isb	sy
 8011160:	f3bf 8f4f 	dsb	sy
 8011164:	b662      	cpsie	i
 8011166:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011168:	bf00      	nop
 801116a:	e7fe      	b.n	801116a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d06b      	beq.n	801124a <pvPortMalloc+0x14e>
 8011172:	4b44      	ldr	r3, [pc, #272]	; (8011284 <pvPortMalloc+0x188>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	687a      	ldr	r2, [r7, #4]
 8011178:	429a      	cmp	r2, r3
 801117a:	d866      	bhi.n	801124a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801117c:	4b42      	ldr	r3, [pc, #264]	; (8011288 <pvPortMalloc+0x18c>)
 801117e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011180:	4b41      	ldr	r3, [pc, #260]	; (8011288 <pvPortMalloc+0x18c>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011186:	e004      	b.n	8011192 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	429a      	cmp	r2, r3
 801119a:	d903      	bls.n	80111a4 <pvPortMalloc+0xa8>
 801119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d1f1      	bne.n	8011188 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80111a4:	4b35      	ldr	r3, [pc, #212]	; (801127c <pvPortMalloc+0x180>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d04d      	beq.n	801124a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80111ae:	6a3b      	ldr	r3, [r7, #32]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	2208      	movs	r2, #8
 80111b4:	4413      	add	r3, r2
 80111b6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80111b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ba:	681a      	ldr	r2, [r3, #0]
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80111c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c2:	685a      	ldr	r2, [r3, #4]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	1ad2      	subs	r2, r2, r3
 80111c8:	2308      	movs	r3, #8
 80111ca:	005b      	lsls	r3, r3, #1
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d921      	bls.n	8011214 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80111d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4413      	add	r3, r2
 80111d6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80111d8:	69bb      	ldr	r3, [r7, #24]
 80111da:	f003 0307 	and.w	r3, r3, #7
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d00c      	beq.n	80111fc <pvPortMalloc+0x100>
	__asm volatile
 80111e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80111e6:	b672      	cpsid	i
 80111e8:	f383 8811 	msr	BASEPRI, r3
 80111ec:	f3bf 8f6f 	isb	sy
 80111f0:	f3bf 8f4f 	dsb	sy
 80111f4:	b662      	cpsie	i
 80111f6:	613b      	str	r3, [r7, #16]
}
 80111f8:	bf00      	nop
 80111fa:	e7fe      	b.n	80111fa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80111fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fe:	685a      	ldr	r2, [r3, #4]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	1ad2      	subs	r2, r2, r3
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801120e:	69b8      	ldr	r0, [r7, #24]
 8011210:	f000 f8fe 	bl	8011410 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011214:	4b1b      	ldr	r3, [pc, #108]	; (8011284 <pvPortMalloc+0x188>)
 8011216:	681a      	ldr	r2, [r3, #0]
 8011218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	1ad3      	subs	r3, r2, r3
 801121e:	4a19      	ldr	r2, [pc, #100]	; (8011284 <pvPortMalloc+0x188>)
 8011220:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011222:	4b18      	ldr	r3, [pc, #96]	; (8011284 <pvPortMalloc+0x188>)
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	4b19      	ldr	r3, [pc, #100]	; (801128c <pvPortMalloc+0x190>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	429a      	cmp	r2, r3
 801122c:	d203      	bcs.n	8011236 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801122e:	4b15      	ldr	r3, [pc, #84]	; (8011284 <pvPortMalloc+0x188>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	4a16      	ldr	r2, [pc, #88]	; (801128c <pvPortMalloc+0x190>)
 8011234:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011238:	685a      	ldr	r2, [r3, #4]
 801123a:	4b11      	ldr	r3, [pc, #68]	; (8011280 <pvPortMalloc+0x184>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	431a      	orrs	r2, r3
 8011240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011242:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011246:	2200      	movs	r2, #0
 8011248:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801124a:	f001 fed9 	bl	8013000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	f003 0307 	and.w	r3, r3, #7
 8011254:	2b00      	cmp	r3, #0
 8011256:	d00c      	beq.n	8011272 <pvPortMalloc+0x176>
	__asm volatile
 8011258:	f04f 0330 	mov.w	r3, #48	; 0x30
 801125c:	b672      	cpsid	i
 801125e:	f383 8811 	msr	BASEPRI, r3
 8011262:	f3bf 8f6f 	isb	sy
 8011266:	f3bf 8f4f 	dsb	sy
 801126a:	b662      	cpsie	i
 801126c:	60fb      	str	r3, [r7, #12]
}
 801126e:	bf00      	nop
 8011270:	e7fe      	b.n	8011270 <pvPortMalloc+0x174>
	return pvReturn;
 8011272:	69fb      	ldr	r3, [r7, #28]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3728      	adds	r7, #40	; 0x28
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	20055eec 	.word	0x20055eec
 8011280:	20055ef8 	.word	0x20055ef8
 8011284:	20055ef0 	.word	0x20055ef0
 8011288:	20055ee4 	.word	0x20055ee4
 801128c:	20055ef4 	.word	0x20055ef4

08011290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d04c      	beq.n	801133c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80112a2:	2308      	movs	r3, #8
 80112a4:	425b      	negs	r3, r3
 80112a6:	697a      	ldr	r2, [r7, #20]
 80112a8:	4413      	add	r3, r2
 80112aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	685a      	ldr	r2, [r3, #4]
 80112b4:	4b23      	ldr	r3, [pc, #140]	; (8011344 <vPortFree+0xb4>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	4013      	ands	r3, r2
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d10c      	bne.n	80112d8 <vPortFree+0x48>
	__asm volatile
 80112be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80112c2:	b672      	cpsid	i
 80112c4:	f383 8811 	msr	BASEPRI, r3
 80112c8:	f3bf 8f6f 	isb	sy
 80112cc:	f3bf 8f4f 	dsb	sy
 80112d0:	b662      	cpsie	i
 80112d2:	60fb      	str	r3, [r7, #12]
}
 80112d4:	bf00      	nop
 80112d6:	e7fe      	b.n	80112d6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d00c      	beq.n	80112fa <vPortFree+0x6a>
	__asm volatile
 80112e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80112e4:	b672      	cpsid	i
 80112e6:	f383 8811 	msr	BASEPRI, r3
 80112ea:	f3bf 8f6f 	isb	sy
 80112ee:	f3bf 8f4f 	dsb	sy
 80112f2:	b662      	cpsie	i
 80112f4:	60bb      	str	r3, [r7, #8]
}
 80112f6:	bf00      	nop
 80112f8:	e7fe      	b.n	80112f8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	685a      	ldr	r2, [r3, #4]
 80112fe:	4b11      	ldr	r3, [pc, #68]	; (8011344 <vPortFree+0xb4>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	4013      	ands	r3, r2
 8011304:	2b00      	cmp	r3, #0
 8011306:	d019      	beq.n	801133c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d115      	bne.n	801133c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	685a      	ldr	r2, [r3, #4]
 8011314:	4b0b      	ldr	r3, [pc, #44]	; (8011344 <vPortFree+0xb4>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	43db      	mvns	r3, r3
 801131a:	401a      	ands	r2, r3
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011320:	f001 fe60 	bl	8012fe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	685a      	ldr	r2, [r3, #4]
 8011328:	4b07      	ldr	r3, [pc, #28]	; (8011348 <vPortFree+0xb8>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4413      	add	r3, r2
 801132e:	4a06      	ldr	r2, [pc, #24]	; (8011348 <vPortFree+0xb8>)
 8011330:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011332:	6938      	ldr	r0, [r7, #16]
 8011334:	f000 f86c 	bl	8011410 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011338:	f001 fe62 	bl	8013000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801133c:	bf00      	nop
 801133e:	3718      	adds	r7, #24
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}
 8011344:	20055ef8 	.word	0x20055ef8
 8011348:	20055ef0 	.word	0x20055ef0

0801134c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801134c:	b480      	push	{r7}
 801134e:	b085      	sub	sp, #20
 8011350:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011352:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 8011356:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011358:	4b27      	ldr	r3, [pc, #156]	; (80113f8 <prvHeapInit+0xac>)
 801135a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f003 0307 	and.w	r3, r3, #7
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00c      	beq.n	8011380 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	3307      	adds	r3, #7
 801136a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f023 0307 	bic.w	r3, r3, #7
 8011372:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011374:	68ba      	ldr	r2, [r7, #8]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	1ad3      	subs	r3, r2, r3
 801137a:	4a1f      	ldr	r2, [pc, #124]	; (80113f8 <prvHeapInit+0xac>)
 801137c:	4413      	add	r3, r2
 801137e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011384:	4a1d      	ldr	r2, [pc, #116]	; (80113fc <prvHeapInit+0xb0>)
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801138a:	4b1c      	ldr	r3, [pc, #112]	; (80113fc <prvHeapInit+0xb0>)
 801138c:	2200      	movs	r2, #0
 801138e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	68ba      	ldr	r2, [r7, #8]
 8011394:	4413      	add	r3, r2
 8011396:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011398:	2208      	movs	r2, #8
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	1a9b      	subs	r3, r3, r2
 801139e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f023 0307 	bic.w	r3, r3, #7
 80113a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	4a15      	ldr	r2, [pc, #84]	; (8011400 <prvHeapInit+0xb4>)
 80113ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80113ae:	4b14      	ldr	r3, [pc, #80]	; (8011400 <prvHeapInit+0xb4>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2200      	movs	r2, #0
 80113b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80113b6:	4b12      	ldr	r3, [pc, #72]	; (8011400 <prvHeapInit+0xb4>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2200      	movs	r2, #0
 80113bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	68fa      	ldr	r2, [r7, #12]
 80113c6:	1ad2      	subs	r2, r2, r3
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80113cc:	4b0c      	ldr	r3, [pc, #48]	; (8011400 <prvHeapInit+0xb4>)
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	4a0a      	ldr	r2, [pc, #40]	; (8011404 <prvHeapInit+0xb8>)
 80113da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	4a09      	ldr	r2, [pc, #36]	; (8011408 <prvHeapInit+0xbc>)
 80113e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80113e4:	4b09      	ldr	r3, [pc, #36]	; (801140c <prvHeapInit+0xc0>)
 80113e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80113ea:	601a      	str	r2, [r3, #0]
}
 80113ec:	bf00      	nop
 80113ee:	3714      	adds	r7, #20
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr
 80113f8:	20023ee4 	.word	0x20023ee4
 80113fc:	20055ee4 	.word	0x20055ee4
 8011400:	20055eec 	.word	0x20055eec
 8011404:	20055ef4 	.word	0x20055ef4
 8011408:	20055ef0 	.word	0x20055ef0
 801140c:	20055ef8 	.word	0x20055ef8

08011410 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011410:	b480      	push	{r7}
 8011412:	b085      	sub	sp, #20
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011418:	4b28      	ldr	r3, [pc, #160]	; (80114bc <prvInsertBlockIntoFreeList+0xac>)
 801141a:	60fb      	str	r3, [r7, #12]
 801141c:	e002      	b.n	8011424 <prvInsertBlockIntoFreeList+0x14>
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	60fb      	str	r3, [r7, #12]
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	429a      	cmp	r2, r3
 801142c:	d8f7      	bhi.n	801141e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	68ba      	ldr	r2, [r7, #8]
 8011438:	4413      	add	r3, r2
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	429a      	cmp	r2, r3
 801143e:	d108      	bne.n	8011452 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	685a      	ldr	r2, [r3, #4]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	441a      	add	r2, r3
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	68ba      	ldr	r2, [r7, #8]
 801145c:	441a      	add	r2, r3
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	429a      	cmp	r2, r3
 8011464:	d118      	bne.n	8011498 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	4b15      	ldr	r3, [pc, #84]	; (80114c0 <prvInsertBlockIntoFreeList+0xb0>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	429a      	cmp	r2, r3
 8011470:	d00d      	beq.n	801148e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	685a      	ldr	r2, [r3, #4]
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	441a      	add	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	601a      	str	r2, [r3, #0]
 801148c:	e008      	b.n	80114a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801148e:	4b0c      	ldr	r3, [pc, #48]	; (80114c0 <prvInsertBlockIntoFreeList+0xb0>)
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	601a      	str	r2, [r3, #0]
 8011496:	e003      	b.n	80114a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80114a0:	68fa      	ldr	r2, [r7, #12]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d002      	beq.n	80114ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	687a      	ldr	r2, [r7, #4]
 80114ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114ae:	bf00      	nop
 80114b0:	3714      	adds	r7, #20
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr
 80114ba:	bf00      	nop
 80114bc:	20055ee4 	.word	0x20055ee4
 80114c0:	20055eec 	.word	0x20055eec

080114c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f103 0208 	add.w	r2, r3, #8
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f04f 32ff 	mov.w	r2, #4294967295
 80114dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f103 0208 	add.w	r2, r3, #8
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f103 0208 	add.w	r2, r3, #8
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2200      	movs	r2, #0
 80114f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80114f8:	bf00      	nop
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011512:	bf00      	nop
 8011514:	370c      	adds	r7, #12
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801151e:	b480      	push	{r7}
 8011520:	b085      	sub	sp, #20
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
 8011526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	68fa      	ldr	r2, [r7, #12]
 8011532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	689a      	ldr	r2, [r3, #8]
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	689b      	ldr	r3, [r3, #8]
 8011540:	683a      	ldr	r2, [r7, #0]
 8011542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	683a      	ldr	r2, [r7, #0]
 8011548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	687a      	ldr	r2, [r7, #4]
 801154e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	1c5a      	adds	r2, r3, #1
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	601a      	str	r2, [r3, #0]
}
 801155a:	bf00      	nop
 801155c:	3714      	adds	r7, #20
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr

08011566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011566:	b480      	push	{r7}
 8011568:	b085      	sub	sp, #20
 801156a:	af00      	add	r7, sp, #0
 801156c:	6078      	str	r0, [r7, #4]
 801156e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801157c:	d103      	bne.n	8011586 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	691b      	ldr	r3, [r3, #16]
 8011582:	60fb      	str	r3, [r7, #12]
 8011584:	e00c      	b.n	80115a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	3308      	adds	r3, #8
 801158a:	60fb      	str	r3, [r7, #12]
 801158c:	e002      	b.n	8011594 <vListInsert+0x2e>
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	60fb      	str	r3, [r7, #12]
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	68ba      	ldr	r2, [r7, #8]
 801159c:	429a      	cmp	r2, r3
 801159e:	d2f6      	bcs.n	801158e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	685a      	ldr	r2, [r3, #4]
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	685b      	ldr	r3, [r3, #4]
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	683a      	ldr	r2, [r7, #0]
 80115ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	1c5a      	adds	r2, r3, #1
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	601a      	str	r2, [r3, #0]
}
 80115cc:	bf00      	nop
 80115ce:	3714      	adds	r7, #20
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80115d8:	b480      	push	{r7}
 80115da:	b085      	sub	sp, #20
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	691b      	ldr	r3, [r3, #16]
 80115e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	6892      	ldr	r2, [r2, #8]
 80115ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	689b      	ldr	r3, [r3, #8]
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	6852      	ldr	r2, [r2, #4]
 80115f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	429a      	cmp	r2, r3
 8011602:	d103      	bne.n	801160c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	689a      	ldr	r2, [r3, #8]
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2200      	movs	r2, #0
 8011610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	1e5a      	subs	r2, r3, #1
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
}
 8011620:	4618      	mov	r0, r3
 8011622:	3714      	adds	r7, #20
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801162c:	b480      	push	{r7}
 801162e:	b085      	sub	sp, #20
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	3b04      	subs	r3, #4
 801163c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	3b04      	subs	r3, #4
 801164a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	f023 0201 	bic.w	r2, r3, #1
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	3b04      	subs	r3, #4
 801165a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801165c:	4a0c      	ldr	r2, [pc, #48]	; (8011690 <pxPortInitialiseStack+0x64>)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	3b14      	subs	r3, #20
 8011666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	3b04      	subs	r3, #4
 8011672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f06f 0202 	mvn.w	r2, #2
 801167a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	3b20      	subs	r3, #32
 8011680:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011682:	68fb      	ldr	r3, [r7, #12]
}
 8011684:	4618      	mov	r0, r3
 8011686:	3714      	adds	r7, #20
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr
 8011690:	08011695 	.word	0x08011695

08011694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011694:	b480      	push	{r7}
 8011696:	b085      	sub	sp, #20
 8011698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801169e:	4b14      	ldr	r3, [pc, #80]	; (80116f0 <prvTaskExitError+0x5c>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116a6:	d00c      	beq.n	80116c2 <prvTaskExitError+0x2e>
	__asm volatile
 80116a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80116ac:	b672      	cpsid	i
 80116ae:	f383 8811 	msr	BASEPRI, r3
 80116b2:	f3bf 8f6f 	isb	sy
 80116b6:	f3bf 8f4f 	dsb	sy
 80116ba:	b662      	cpsie	i
 80116bc:	60fb      	str	r3, [r7, #12]
}
 80116be:	bf00      	nop
 80116c0:	e7fe      	b.n	80116c0 <prvTaskExitError+0x2c>
	__asm volatile
 80116c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80116c6:	b672      	cpsid	i
 80116c8:	f383 8811 	msr	BASEPRI, r3
 80116cc:	f3bf 8f6f 	isb	sy
 80116d0:	f3bf 8f4f 	dsb	sy
 80116d4:	b662      	cpsie	i
 80116d6:	60bb      	str	r3, [r7, #8]
}
 80116d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80116da:	bf00      	nop
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d0fc      	beq.n	80116dc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80116e2:	bf00      	nop
 80116e4:	bf00      	nop
 80116e6:	3714      	adds	r7, #20
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	20000018 	.word	0x20000018
	...

08011700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011700:	4b07      	ldr	r3, [pc, #28]	; (8011720 <pxCurrentTCBConst2>)
 8011702:	6819      	ldr	r1, [r3, #0]
 8011704:	6808      	ldr	r0, [r1, #0]
 8011706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170a:	f380 8809 	msr	PSP, r0
 801170e:	f3bf 8f6f 	isb	sy
 8011712:	f04f 0000 	mov.w	r0, #0
 8011716:	f380 8811 	msr	BASEPRI, r0
 801171a:	4770      	bx	lr
 801171c:	f3af 8000 	nop.w

08011720 <pxCurrentTCBConst2>:
 8011720:	20055f04 	.word	0x20055f04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011724:	bf00      	nop
 8011726:	bf00      	nop

08011728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011728:	4808      	ldr	r0, [pc, #32]	; (801174c <prvPortStartFirstTask+0x24>)
 801172a:	6800      	ldr	r0, [r0, #0]
 801172c:	6800      	ldr	r0, [r0, #0]
 801172e:	f380 8808 	msr	MSP, r0
 8011732:	f04f 0000 	mov.w	r0, #0
 8011736:	f380 8814 	msr	CONTROL, r0
 801173a:	b662      	cpsie	i
 801173c:	b661      	cpsie	f
 801173e:	f3bf 8f4f 	dsb	sy
 8011742:	f3bf 8f6f 	isb	sy
 8011746:	df00      	svc	0
 8011748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801174a:	bf00      	nop
 801174c:	e000ed08 	.word	0xe000ed08

08011750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011756:	4b37      	ldr	r3, [pc, #220]	; (8011834 <xPortStartScheduler+0xe4>)
 8011758:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	b2db      	uxtb	r3, r3
 8011760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	22ff      	movs	r2, #255	; 0xff
 8011766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	b2db      	uxtb	r3, r3
 801176e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011770:	78fb      	ldrb	r3, [r7, #3]
 8011772:	b2db      	uxtb	r3, r3
 8011774:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011778:	b2da      	uxtb	r2, r3
 801177a:	4b2f      	ldr	r3, [pc, #188]	; (8011838 <xPortStartScheduler+0xe8>)
 801177c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801177e:	4b2f      	ldr	r3, [pc, #188]	; (801183c <xPortStartScheduler+0xec>)
 8011780:	2207      	movs	r2, #7
 8011782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011784:	e009      	b.n	801179a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011786:	4b2d      	ldr	r3, [pc, #180]	; (801183c <xPortStartScheduler+0xec>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	3b01      	subs	r3, #1
 801178c:	4a2b      	ldr	r2, [pc, #172]	; (801183c <xPortStartScheduler+0xec>)
 801178e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011790:	78fb      	ldrb	r3, [r7, #3]
 8011792:	b2db      	uxtb	r3, r3
 8011794:	005b      	lsls	r3, r3, #1
 8011796:	b2db      	uxtb	r3, r3
 8011798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801179a:	78fb      	ldrb	r3, [r7, #3]
 801179c:	b2db      	uxtb	r3, r3
 801179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117a2:	2b80      	cmp	r3, #128	; 0x80
 80117a4:	d0ef      	beq.n	8011786 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80117a6:	4b25      	ldr	r3, [pc, #148]	; (801183c <xPortStartScheduler+0xec>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	f1c3 0307 	rsb	r3, r3, #7
 80117ae:	2b04      	cmp	r3, #4
 80117b0:	d00c      	beq.n	80117cc <xPortStartScheduler+0x7c>
	__asm volatile
 80117b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80117b6:	b672      	cpsid	i
 80117b8:	f383 8811 	msr	BASEPRI, r3
 80117bc:	f3bf 8f6f 	isb	sy
 80117c0:	f3bf 8f4f 	dsb	sy
 80117c4:	b662      	cpsie	i
 80117c6:	60bb      	str	r3, [r7, #8]
}
 80117c8:	bf00      	nop
 80117ca:	e7fe      	b.n	80117ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80117cc:	4b1b      	ldr	r3, [pc, #108]	; (801183c <xPortStartScheduler+0xec>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	021b      	lsls	r3, r3, #8
 80117d2:	4a1a      	ldr	r2, [pc, #104]	; (801183c <xPortStartScheduler+0xec>)
 80117d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80117d6:	4b19      	ldr	r3, [pc, #100]	; (801183c <xPortStartScheduler+0xec>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80117de:	4a17      	ldr	r2, [pc, #92]	; (801183c <xPortStartScheduler+0xec>)
 80117e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	b2da      	uxtb	r2, r3
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80117ea:	4b15      	ldr	r3, [pc, #84]	; (8011840 <xPortStartScheduler+0xf0>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	4a14      	ldr	r2, [pc, #80]	; (8011840 <xPortStartScheduler+0xf0>)
 80117f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80117f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80117f6:	4b12      	ldr	r3, [pc, #72]	; (8011840 <xPortStartScheduler+0xf0>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	4a11      	ldr	r2, [pc, #68]	; (8011840 <xPortStartScheduler+0xf0>)
 80117fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011800:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011802:	f000 f8dd 	bl	80119c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011806:	4b0f      	ldr	r3, [pc, #60]	; (8011844 <xPortStartScheduler+0xf4>)
 8011808:	2200      	movs	r2, #0
 801180a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801180c:	f000 f8fc 	bl	8011a08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011810:	4b0d      	ldr	r3, [pc, #52]	; (8011848 <xPortStartScheduler+0xf8>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4a0c      	ldr	r2, [pc, #48]	; (8011848 <xPortStartScheduler+0xf8>)
 8011816:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801181a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801181c:	f7ff ff84 	bl	8011728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011820:	f001 fd5a 	bl	80132d8 <vTaskSwitchContext>
	prvTaskExitError();
 8011824:	f7ff ff36 	bl	8011694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	e000e400 	.word	0xe000e400
 8011838:	20055efc 	.word	0x20055efc
 801183c:	20055f00 	.word	0x20055f00
 8011840:	e000ed20 	.word	0xe000ed20
 8011844:	20000018 	.word	0x20000018
 8011848:	e000ef34 	.word	0xe000ef34

0801184c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801184c:	b480      	push	{r7}
 801184e:	b083      	sub	sp, #12
 8011850:	af00      	add	r7, sp, #0
	__asm volatile
 8011852:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011856:	b672      	cpsid	i
 8011858:	f383 8811 	msr	BASEPRI, r3
 801185c:	f3bf 8f6f 	isb	sy
 8011860:	f3bf 8f4f 	dsb	sy
 8011864:	b662      	cpsie	i
 8011866:	607b      	str	r3, [r7, #4]
}
 8011868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801186a:	4b10      	ldr	r3, [pc, #64]	; (80118ac <vPortEnterCritical+0x60>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	3301      	adds	r3, #1
 8011870:	4a0e      	ldr	r2, [pc, #56]	; (80118ac <vPortEnterCritical+0x60>)
 8011872:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011874:	4b0d      	ldr	r3, [pc, #52]	; (80118ac <vPortEnterCritical+0x60>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2b01      	cmp	r3, #1
 801187a:	d111      	bne.n	80118a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801187c:	4b0c      	ldr	r3, [pc, #48]	; (80118b0 <vPortEnterCritical+0x64>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2b00      	cmp	r3, #0
 8011884:	d00c      	beq.n	80118a0 <vPortEnterCritical+0x54>
	__asm volatile
 8011886:	f04f 0330 	mov.w	r3, #48	; 0x30
 801188a:	b672      	cpsid	i
 801188c:	f383 8811 	msr	BASEPRI, r3
 8011890:	f3bf 8f6f 	isb	sy
 8011894:	f3bf 8f4f 	dsb	sy
 8011898:	b662      	cpsie	i
 801189a:	603b      	str	r3, [r7, #0]
}
 801189c:	bf00      	nop
 801189e:	e7fe      	b.n	801189e <vPortEnterCritical+0x52>
	}
}
 80118a0:	bf00      	nop
 80118a2:	370c      	adds	r7, #12
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr
 80118ac:	20000018 	.word	0x20000018
 80118b0:	e000ed04 	.word	0xe000ed04

080118b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80118ba:	4b13      	ldr	r3, [pc, #76]	; (8011908 <vPortExitCritical+0x54>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d10c      	bne.n	80118dc <vPortExitCritical+0x28>
	__asm volatile
 80118c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80118c6:	b672      	cpsid	i
 80118c8:	f383 8811 	msr	BASEPRI, r3
 80118cc:	f3bf 8f6f 	isb	sy
 80118d0:	f3bf 8f4f 	dsb	sy
 80118d4:	b662      	cpsie	i
 80118d6:	607b      	str	r3, [r7, #4]
}
 80118d8:	bf00      	nop
 80118da:	e7fe      	b.n	80118da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80118dc:	4b0a      	ldr	r3, [pc, #40]	; (8011908 <vPortExitCritical+0x54>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	3b01      	subs	r3, #1
 80118e2:	4a09      	ldr	r2, [pc, #36]	; (8011908 <vPortExitCritical+0x54>)
 80118e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80118e6:	4b08      	ldr	r3, [pc, #32]	; (8011908 <vPortExitCritical+0x54>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d105      	bne.n	80118fa <vPortExitCritical+0x46>
 80118ee:	2300      	movs	r3, #0
 80118f0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80118f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80118fa:	bf00      	nop
 80118fc:	370c      	adds	r7, #12
 80118fe:	46bd      	mov	sp, r7
 8011900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011904:	4770      	bx	lr
 8011906:	bf00      	nop
 8011908:	20000018 	.word	0x20000018
 801190c:	00000000 	.word	0x00000000

08011910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011910:	f3ef 8009 	mrs	r0, PSP
 8011914:	f3bf 8f6f 	isb	sy
 8011918:	4b15      	ldr	r3, [pc, #84]	; (8011970 <pxCurrentTCBConst>)
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	f01e 0f10 	tst.w	lr, #16
 8011920:	bf08      	it	eq
 8011922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801192a:	6010      	str	r0, [r2, #0]
 801192c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011930:	f04f 0030 	mov.w	r0, #48	; 0x30
 8011934:	b672      	cpsid	i
 8011936:	f380 8811 	msr	BASEPRI, r0
 801193a:	f3bf 8f4f 	dsb	sy
 801193e:	f3bf 8f6f 	isb	sy
 8011942:	b662      	cpsie	i
 8011944:	f001 fcc8 	bl	80132d8 <vTaskSwitchContext>
 8011948:	f04f 0000 	mov.w	r0, #0
 801194c:	f380 8811 	msr	BASEPRI, r0
 8011950:	bc09      	pop	{r0, r3}
 8011952:	6819      	ldr	r1, [r3, #0]
 8011954:	6808      	ldr	r0, [r1, #0]
 8011956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801195a:	f01e 0f10 	tst.w	lr, #16
 801195e:	bf08      	it	eq
 8011960:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011964:	f380 8809 	msr	PSP, r0
 8011968:	f3bf 8f6f 	isb	sy
 801196c:	4770      	bx	lr
 801196e:	bf00      	nop

08011970 <pxCurrentTCBConst>:
 8011970:	20055f04 	.word	0x20055f04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011974:	bf00      	nop
 8011976:	bf00      	nop

08011978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
	__asm volatile
 801197e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011982:	b672      	cpsid	i
 8011984:	f383 8811 	msr	BASEPRI, r3
 8011988:	f3bf 8f6f 	isb	sy
 801198c:	f3bf 8f4f 	dsb	sy
 8011990:	b662      	cpsie	i
 8011992:	607b      	str	r3, [r7, #4]
}
 8011994:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011996:	f001 fbe3 	bl	8013160 <xTaskIncrementTick>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	d003      	beq.n	80119a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80119a0:	4b06      	ldr	r3, [pc, #24]	; (80119bc <SysTick_Handler+0x44>)
 80119a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119a6:	601a      	str	r2, [r3, #0]
 80119a8:	2300      	movs	r3, #0
 80119aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	f383 8811 	msr	BASEPRI, r3
}
 80119b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80119b4:	bf00      	nop
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	e000ed04 	.word	0xe000ed04

080119c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80119c0:	b480      	push	{r7}
 80119c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80119c4:	4b0b      	ldr	r3, [pc, #44]	; (80119f4 <vPortSetupTimerInterrupt+0x34>)
 80119c6:	2200      	movs	r2, #0
 80119c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80119ca:	4b0b      	ldr	r3, [pc, #44]	; (80119f8 <vPortSetupTimerInterrupt+0x38>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80119d0:	4b0a      	ldr	r3, [pc, #40]	; (80119fc <vPortSetupTimerInterrupt+0x3c>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	4a0a      	ldr	r2, [pc, #40]	; (8011a00 <vPortSetupTimerInterrupt+0x40>)
 80119d6:	fba2 2303 	umull	r2, r3, r2, r3
 80119da:	099b      	lsrs	r3, r3, #6
 80119dc:	4a09      	ldr	r2, [pc, #36]	; (8011a04 <vPortSetupTimerInterrupt+0x44>)
 80119de:	3b01      	subs	r3, #1
 80119e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80119e2:	4b04      	ldr	r3, [pc, #16]	; (80119f4 <vPortSetupTimerInterrupt+0x34>)
 80119e4:	2207      	movs	r2, #7
 80119e6:	601a      	str	r2, [r3, #0]
}
 80119e8:	bf00      	nop
 80119ea:	46bd      	mov	sp, r7
 80119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	e000e010 	.word	0xe000e010
 80119f8:	e000e018 	.word	0xe000e018
 80119fc:	2000000c 	.word	0x2000000c
 8011a00:	10624dd3 	.word	0x10624dd3
 8011a04:	e000e014 	.word	0xe000e014

08011a08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011a08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011a18 <vPortEnableVFP+0x10>
 8011a0c:	6801      	ldr	r1, [r0, #0]
 8011a0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011a12:	6001      	str	r1, [r0, #0]
 8011a14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011a16:	bf00      	nop
 8011a18:	e000ed88 	.word	0xe000ed88

08011a1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b085      	sub	sp, #20
 8011a20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011a22:	f3ef 8305 	mrs	r3, IPSR
 8011a26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2b0f      	cmp	r3, #15
 8011a2c:	d916      	bls.n	8011a5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011a2e:	4a19      	ldr	r2, [pc, #100]	; (8011a94 <vPortValidateInterruptPriority+0x78>)
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	4413      	add	r3, r2
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011a38:	4b17      	ldr	r3, [pc, #92]	; (8011a98 <vPortValidateInterruptPriority+0x7c>)
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	7afa      	ldrb	r2, [r7, #11]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d20c      	bcs.n	8011a5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011a42:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a46:	b672      	cpsid	i
 8011a48:	f383 8811 	msr	BASEPRI, r3
 8011a4c:	f3bf 8f6f 	isb	sy
 8011a50:	f3bf 8f4f 	dsb	sy
 8011a54:	b662      	cpsie	i
 8011a56:	607b      	str	r3, [r7, #4]
}
 8011a58:	bf00      	nop
 8011a5a:	e7fe      	b.n	8011a5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011a5c:	4b0f      	ldr	r3, [pc, #60]	; (8011a9c <vPortValidateInterruptPriority+0x80>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011a64:	4b0e      	ldr	r3, [pc, #56]	; (8011aa0 <vPortValidateInterruptPriority+0x84>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d90c      	bls.n	8011a86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8011a6c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a70:	b672      	cpsid	i
 8011a72:	f383 8811 	msr	BASEPRI, r3
 8011a76:	f3bf 8f6f 	isb	sy
 8011a7a:	f3bf 8f4f 	dsb	sy
 8011a7e:	b662      	cpsie	i
 8011a80:	603b      	str	r3, [r7, #0]
}
 8011a82:	bf00      	nop
 8011a84:	e7fe      	b.n	8011a84 <vPortValidateInterruptPriority+0x68>
	}
 8011a86:	bf00      	nop
 8011a88:	3714      	adds	r7, #20
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr
 8011a92:	bf00      	nop
 8011a94:	e000e3f0 	.word	0xe000e3f0
 8011a98:	20055efc 	.word	0x20055efc
 8011a9c:	e000ed0c 	.word	0xe000ed0c
 8011aa0:	20055f00 	.word	0x20055f00

08011aa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d10c      	bne.n	8011ad2 <xQueueGenericReset+0x2e>
	__asm volatile
 8011ab8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011abc:	b672      	cpsid	i
 8011abe:	f383 8811 	msr	BASEPRI, r3
 8011ac2:	f3bf 8f6f 	isb	sy
 8011ac6:	f3bf 8f4f 	dsb	sy
 8011aca:	b662      	cpsie	i
 8011acc:	60bb      	str	r3, [r7, #8]
}
 8011ace:	bf00      	nop
 8011ad0:	e7fe      	b.n	8011ad0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011ad2:	f7ff febb 	bl	801184c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ade:	68f9      	ldr	r1, [r7, #12]
 8011ae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011ae2:	fb01 f303 	mul.w	r3, r1, r3
 8011ae6:	441a      	add	r2, r3
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2200      	movs	r2, #0
 8011af0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	681a      	ldr	r2, [r3, #0]
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b02:	3b01      	subs	r3, #1
 8011b04:	68f9      	ldr	r1, [r7, #12]
 8011b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011b08:	fb01 f303 	mul.w	r3, r1, r3
 8011b0c:	441a      	add	r2, r3
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	22ff      	movs	r2, #255	; 0xff
 8011b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	22ff      	movs	r2, #255	; 0xff
 8011b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d114      	bne.n	8011b52 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	691b      	ldr	r3, [r3, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d01a      	beq.n	8011b66 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	3310      	adds	r3, #16
 8011b34:	4618      	mov	r0, r3
 8011b36:	f001 fc83 	bl	8013440 <xTaskRemoveFromEventList>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d012      	beq.n	8011b66 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011b40:	4b0c      	ldr	r3, [pc, #48]	; (8011b74 <xQueueGenericReset+0xd0>)
 8011b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b46:	601a      	str	r2, [r3, #0]
 8011b48:	f3bf 8f4f 	dsb	sy
 8011b4c:	f3bf 8f6f 	isb	sy
 8011b50:	e009      	b.n	8011b66 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	3310      	adds	r3, #16
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7ff fcb4 	bl	80114c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	3324      	adds	r3, #36	; 0x24
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7ff fcaf 	bl	80114c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011b66:	f7ff fea5 	bl	80118b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011b6a:	2301      	movs	r3, #1
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3710      	adds	r7, #16
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	e000ed04 	.word	0xe000ed04

08011b78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b08e      	sub	sp, #56	; 0x38
 8011b7c:	af02      	add	r7, sp, #8
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
 8011b84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d10c      	bne.n	8011ba6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8011b8c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011b90:	b672      	cpsid	i
 8011b92:	f383 8811 	msr	BASEPRI, r3
 8011b96:	f3bf 8f6f 	isb	sy
 8011b9a:	f3bf 8f4f 	dsb	sy
 8011b9e:	b662      	cpsie	i
 8011ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011ba2:	bf00      	nop
 8011ba4:	e7fe      	b.n	8011ba4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d10c      	bne.n	8011bc6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8011bac:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011bb0:	b672      	cpsid	i
 8011bb2:	f383 8811 	msr	BASEPRI, r3
 8011bb6:	f3bf 8f6f 	isb	sy
 8011bba:	f3bf 8f4f 	dsb	sy
 8011bbe:	b662      	cpsie	i
 8011bc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011bc2:	bf00      	nop
 8011bc4:	e7fe      	b.n	8011bc4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d002      	beq.n	8011bd2 <xQueueGenericCreateStatic+0x5a>
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d001      	beq.n	8011bd6 <xQueueGenericCreateStatic+0x5e>
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	e000      	b.n	8011bd8 <xQueueGenericCreateStatic+0x60>
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d10c      	bne.n	8011bf6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8011bdc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011be0:	b672      	cpsid	i
 8011be2:	f383 8811 	msr	BASEPRI, r3
 8011be6:	f3bf 8f6f 	isb	sy
 8011bea:	f3bf 8f4f 	dsb	sy
 8011bee:	b662      	cpsie	i
 8011bf0:	623b      	str	r3, [r7, #32]
}
 8011bf2:	bf00      	nop
 8011bf4:	e7fe      	b.n	8011bf4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d102      	bne.n	8011c02 <xQueueGenericCreateStatic+0x8a>
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d101      	bne.n	8011c06 <xQueueGenericCreateStatic+0x8e>
 8011c02:	2301      	movs	r3, #1
 8011c04:	e000      	b.n	8011c08 <xQueueGenericCreateStatic+0x90>
 8011c06:	2300      	movs	r3, #0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d10c      	bne.n	8011c26 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8011c0c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c10:	b672      	cpsid	i
 8011c12:	f383 8811 	msr	BASEPRI, r3
 8011c16:	f3bf 8f6f 	isb	sy
 8011c1a:	f3bf 8f4f 	dsb	sy
 8011c1e:	b662      	cpsie	i
 8011c20:	61fb      	str	r3, [r7, #28]
}
 8011c22:	bf00      	nop
 8011c24:	e7fe      	b.n	8011c24 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011c26:	2350      	movs	r3, #80	; 0x50
 8011c28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	2b50      	cmp	r3, #80	; 0x50
 8011c2e:	d00c      	beq.n	8011c4a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8011c30:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c34:	b672      	cpsid	i
 8011c36:	f383 8811 	msr	BASEPRI, r3
 8011c3a:	f3bf 8f6f 	isb	sy
 8011c3e:	f3bf 8f4f 	dsb	sy
 8011c42:	b662      	cpsie	i
 8011c44:	61bb      	str	r3, [r7, #24]
}
 8011c46:	bf00      	nop
 8011c48:	e7fe      	b.n	8011c48 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011c4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00d      	beq.n	8011c72 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c58:	2201      	movs	r2, #1
 8011c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011c5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c64:	9300      	str	r3, [sp, #0]
 8011c66:	4613      	mov	r3, r2
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	68b9      	ldr	r1, [r7, #8]
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f000 f847 	bl	8011d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3730      	adds	r7, #48	; 0x30
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b08a      	sub	sp, #40	; 0x28
 8011c80:	af02      	add	r7, sp, #8
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	4613      	mov	r3, r2
 8011c88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d10c      	bne.n	8011caa <xQueueGenericCreate+0x2e>
	__asm volatile
 8011c90:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c94:	b672      	cpsid	i
 8011c96:	f383 8811 	msr	BASEPRI, r3
 8011c9a:	f3bf 8f6f 	isb	sy
 8011c9e:	f3bf 8f4f 	dsb	sy
 8011ca2:	b662      	cpsie	i
 8011ca4:	613b      	str	r3, [r7, #16]
}
 8011ca6:	bf00      	nop
 8011ca8:	e7fe      	b.n	8011ca8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d102      	bne.n	8011cb6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	61fb      	str	r3, [r7, #28]
 8011cb4:	e004      	b.n	8011cc0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	68ba      	ldr	r2, [r7, #8]
 8011cba:	fb02 f303 	mul.w	r3, r2, r3
 8011cbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011cc0:	69fb      	ldr	r3, [r7, #28]
 8011cc2:	3350      	adds	r3, #80	; 0x50
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7ff fa19 	bl	80110fc <pvPortMalloc>
 8011cca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d011      	beq.n	8011cf6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011cd2:	69bb      	ldr	r3, [r7, #24]
 8011cd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	3350      	adds	r3, #80	; 0x50
 8011cda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011ce4:	79fa      	ldrb	r2, [r7, #7]
 8011ce6:	69bb      	ldr	r3, [r7, #24]
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	4613      	mov	r3, r2
 8011cec:	697a      	ldr	r2, [r7, #20]
 8011cee:	68b9      	ldr	r1, [r7, #8]
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f000 f805 	bl	8011d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011cf6:	69bb      	ldr	r3, [r7, #24]
	}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3720      	adds	r7, #32
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	60f8      	str	r0, [r7, #12]
 8011d08:	60b9      	str	r1, [r7, #8]
 8011d0a:	607a      	str	r2, [r7, #4]
 8011d0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d103      	bne.n	8011d1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	69ba      	ldr	r2, [r7, #24]
 8011d18:	601a      	str	r2, [r3, #0]
 8011d1a:	e002      	b.n	8011d22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	68fa      	ldr	r2, [r7, #12]
 8011d26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011d28:	69bb      	ldr	r3, [r7, #24]
 8011d2a:	68ba      	ldr	r2, [r7, #8]
 8011d2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011d2e:	2101      	movs	r1, #1
 8011d30:	69b8      	ldr	r0, [r7, #24]
 8011d32:	f7ff feb7 	bl	8011aa4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	78fa      	ldrb	r2, [r7, #3]
 8011d3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011d3e:	bf00      	nop
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}

08011d46 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b08a      	sub	sp, #40	; 0x28
 8011d4a:	af02      	add	r7, sp, #8
 8011d4c:	60f8      	str	r0, [r7, #12]
 8011d4e:	60b9      	str	r1, [r7, #8]
 8011d50:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d10c      	bne.n	8011d72 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8011d58:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011d5c:	b672      	cpsid	i
 8011d5e:	f383 8811 	msr	BASEPRI, r3
 8011d62:	f3bf 8f6f 	isb	sy
 8011d66:	f3bf 8f4f 	dsb	sy
 8011d6a:	b662      	cpsie	i
 8011d6c:	61bb      	str	r3, [r7, #24]
}
 8011d6e:	bf00      	nop
 8011d70:	e7fe      	b.n	8011d70 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011d72:	68ba      	ldr	r2, [r7, #8]
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d90c      	bls.n	8011d94 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8011d7a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011d7e:	b672      	cpsid	i
 8011d80:	f383 8811 	msr	BASEPRI, r3
 8011d84:	f3bf 8f6f 	isb	sy
 8011d88:	f3bf 8f4f 	dsb	sy
 8011d8c:	b662      	cpsie	i
 8011d8e:	617b      	str	r3, [r7, #20]
}
 8011d90:	bf00      	nop
 8011d92:	e7fe      	b.n	8011d92 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011d94:	2302      	movs	r3, #2
 8011d96:	9300      	str	r3, [sp, #0]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	68f8      	ldr	r0, [r7, #12]
 8011da0:	f7ff feea 	bl	8011b78 <xQueueGenericCreateStatic>
 8011da4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011da6:	69fb      	ldr	r3, [r7, #28]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d002      	beq.n	8011db2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011dac:	69fb      	ldr	r3, [r7, #28]
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011db2:	69fb      	ldr	r3, [r7, #28]
	}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3720      	adds	r7, #32
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b086      	sub	sp, #24
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d10c      	bne.n	8011de6 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8011dcc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011dd0:	b672      	cpsid	i
 8011dd2:	f383 8811 	msr	BASEPRI, r3
 8011dd6:	f3bf 8f6f 	isb	sy
 8011dda:	f3bf 8f4f 	dsb	sy
 8011dde:	b662      	cpsie	i
 8011de0:	613b      	str	r3, [r7, #16]
}
 8011de2:	bf00      	nop
 8011de4:	e7fe      	b.n	8011de4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011de6:	683a      	ldr	r2, [r7, #0]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d90c      	bls.n	8011e08 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8011dee:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011df2:	b672      	cpsid	i
 8011df4:	f383 8811 	msr	BASEPRI, r3
 8011df8:	f3bf 8f6f 	isb	sy
 8011dfc:	f3bf 8f4f 	dsb	sy
 8011e00:	b662      	cpsie	i
 8011e02:	60fb      	str	r3, [r7, #12]
}
 8011e04:	bf00      	nop
 8011e06:	e7fe      	b.n	8011e06 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011e08:	2202      	movs	r2, #2
 8011e0a:	2100      	movs	r1, #0
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7ff ff35 	bl	8011c7c <xQueueGenericCreate>
 8011e12:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d002      	beq.n	8011e20 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	683a      	ldr	r2, [r7, #0]
 8011e1e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011e20:	697b      	ldr	r3, [r7, #20]
	}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3718      	adds	r7, #24
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}
	...

08011e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b08e      	sub	sp, #56	; 0x38
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	607a      	str	r2, [r7, #4]
 8011e38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d10c      	bne.n	8011e62 <xQueueGenericSend+0x36>
	__asm volatile
 8011e48:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011e4c:	b672      	cpsid	i
 8011e4e:	f383 8811 	msr	BASEPRI, r3
 8011e52:	f3bf 8f6f 	isb	sy
 8011e56:	f3bf 8f4f 	dsb	sy
 8011e5a:	b662      	cpsie	i
 8011e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011e5e:	bf00      	nop
 8011e60:	e7fe      	b.n	8011e60 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d103      	bne.n	8011e70 <xQueueGenericSend+0x44>
 8011e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d101      	bne.n	8011e74 <xQueueGenericSend+0x48>
 8011e70:	2301      	movs	r3, #1
 8011e72:	e000      	b.n	8011e76 <xQueueGenericSend+0x4a>
 8011e74:	2300      	movs	r3, #0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d10c      	bne.n	8011e94 <xQueueGenericSend+0x68>
	__asm volatile
 8011e7a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011e7e:	b672      	cpsid	i
 8011e80:	f383 8811 	msr	BASEPRI, r3
 8011e84:	f3bf 8f6f 	isb	sy
 8011e88:	f3bf 8f4f 	dsb	sy
 8011e8c:	b662      	cpsie	i
 8011e8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011e90:	bf00      	nop
 8011e92:	e7fe      	b.n	8011e92 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	2b02      	cmp	r3, #2
 8011e98:	d103      	bne.n	8011ea2 <xQueueGenericSend+0x76>
 8011e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d101      	bne.n	8011ea6 <xQueueGenericSend+0x7a>
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	e000      	b.n	8011ea8 <xQueueGenericSend+0x7c>
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10c      	bne.n	8011ec6 <xQueueGenericSend+0x9a>
	__asm volatile
 8011eac:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011eb0:	b672      	cpsid	i
 8011eb2:	f383 8811 	msr	BASEPRI, r3
 8011eb6:	f3bf 8f6f 	isb	sy
 8011eba:	f3bf 8f4f 	dsb	sy
 8011ebe:	b662      	cpsie	i
 8011ec0:	623b      	str	r3, [r7, #32]
}
 8011ec2:	bf00      	nop
 8011ec4:	e7fe      	b.n	8011ec4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ec6:	f001 fc81 	bl	80137cc <xTaskGetSchedulerState>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d102      	bne.n	8011ed6 <xQueueGenericSend+0xaa>
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d101      	bne.n	8011eda <xQueueGenericSend+0xae>
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	e000      	b.n	8011edc <xQueueGenericSend+0xb0>
 8011eda:	2300      	movs	r3, #0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d10c      	bne.n	8011efa <xQueueGenericSend+0xce>
	__asm volatile
 8011ee0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011ee4:	b672      	cpsid	i
 8011ee6:	f383 8811 	msr	BASEPRI, r3
 8011eea:	f3bf 8f6f 	isb	sy
 8011eee:	f3bf 8f4f 	dsb	sy
 8011ef2:	b662      	cpsie	i
 8011ef4:	61fb      	str	r3, [r7, #28]
}
 8011ef6:	bf00      	nop
 8011ef8:	e7fe      	b.n	8011ef8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011efa:	f7ff fca7 	bl	801184c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d302      	bcc.n	8011f10 <xQueueGenericSend+0xe4>
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	2b02      	cmp	r3, #2
 8011f0e:	d129      	bne.n	8011f64 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011f10:	683a      	ldr	r2, [r7, #0]
 8011f12:	68b9      	ldr	r1, [r7, #8]
 8011f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f16:	f000 fc82 	bl	801281e <prvCopyDataToQueue>
 8011f1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d010      	beq.n	8011f46 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f26:	3324      	adds	r3, #36	; 0x24
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f001 fa89 	bl	8013440 <xTaskRemoveFromEventList>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d013      	beq.n	8011f5c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011f34:	4b3f      	ldr	r3, [pc, #252]	; (8012034 <xQueueGenericSend+0x208>)
 8011f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f3a:	601a      	str	r2, [r3, #0]
 8011f3c:	f3bf 8f4f 	dsb	sy
 8011f40:	f3bf 8f6f 	isb	sy
 8011f44:	e00a      	b.n	8011f5c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d007      	beq.n	8011f5c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011f4c:	4b39      	ldr	r3, [pc, #228]	; (8012034 <xQueueGenericSend+0x208>)
 8011f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f52:	601a      	str	r2, [r3, #0]
 8011f54:	f3bf 8f4f 	dsb	sy
 8011f58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011f5c:	f7ff fcaa 	bl	80118b4 <vPortExitCritical>
				return pdPASS;
 8011f60:	2301      	movs	r3, #1
 8011f62:	e063      	b.n	801202c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d103      	bne.n	8011f72 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f6a:	f7ff fca3 	bl	80118b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	e05c      	b.n	801202c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d106      	bne.n	8011f86 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f78:	f107 0314 	add.w	r3, r7, #20
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f001 fac5 	bl	801350c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f82:	2301      	movs	r3, #1
 8011f84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f86:	f7ff fc95 	bl	80118b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f8a:	f001 f82b 	bl	8012fe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f8e:	f7ff fc5d 	bl	801184c <vPortEnterCritical>
 8011f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f98:	b25b      	sxtb	r3, r3
 8011f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9e:	d103      	bne.n	8011fa8 <xQueueGenericSend+0x17c>
 8011fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fae:	b25b      	sxtb	r3, r3
 8011fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb4:	d103      	bne.n	8011fbe <xQueueGenericSend+0x192>
 8011fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb8:	2200      	movs	r2, #0
 8011fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fbe:	f7ff fc79 	bl	80118b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011fc2:	1d3a      	adds	r2, r7, #4
 8011fc4:	f107 0314 	add.w	r3, r7, #20
 8011fc8:	4611      	mov	r1, r2
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f001 fab4 	bl	8013538 <xTaskCheckForTimeOut>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d124      	bne.n	8012020 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fd8:	f000 fd19 	bl	8012a0e <prvIsQueueFull>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d018      	beq.n	8012014 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe4:	3310      	adds	r3, #16
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	4611      	mov	r1, r2
 8011fea:	4618      	mov	r0, r3
 8011fec:	f001 f9d4 	bl	8013398 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ff2:	f000 fca4 	bl	801293e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011ff6:	f001 f803 	bl	8013000 <xTaskResumeAll>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	f47f af7c 	bne.w	8011efa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8012002:	4b0c      	ldr	r3, [pc, #48]	; (8012034 <xQueueGenericSend+0x208>)
 8012004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012008:	601a      	str	r2, [r3, #0]
 801200a:	f3bf 8f4f 	dsb	sy
 801200e:	f3bf 8f6f 	isb	sy
 8012012:	e772      	b.n	8011efa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012016:	f000 fc92 	bl	801293e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801201a:	f000 fff1 	bl	8013000 <xTaskResumeAll>
 801201e:	e76c      	b.n	8011efa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012022:	f000 fc8c 	bl	801293e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012026:	f000 ffeb 	bl	8013000 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801202a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801202c:	4618      	mov	r0, r3
 801202e:	3738      	adds	r7, #56	; 0x38
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}
 8012034:	e000ed04 	.word	0xe000ed04

08012038 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b08e      	sub	sp, #56	; 0x38
 801203c:	af00      	add	r7, sp, #0
 801203e:	60f8      	str	r0, [r7, #12]
 8012040:	60b9      	str	r1, [r7, #8]
 8012042:	607a      	str	r2, [r7, #4]
 8012044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204c:	2b00      	cmp	r3, #0
 801204e:	d10c      	bne.n	801206a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8012050:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012054:	b672      	cpsid	i
 8012056:	f383 8811 	msr	BASEPRI, r3
 801205a:	f3bf 8f6f 	isb	sy
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	b662      	cpsie	i
 8012064:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012066:	bf00      	nop
 8012068:	e7fe      	b.n	8012068 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d103      	bne.n	8012078 <xQueueGenericSendFromISR+0x40>
 8012070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012074:	2b00      	cmp	r3, #0
 8012076:	d101      	bne.n	801207c <xQueueGenericSendFromISR+0x44>
 8012078:	2301      	movs	r3, #1
 801207a:	e000      	b.n	801207e <xQueueGenericSendFromISR+0x46>
 801207c:	2300      	movs	r3, #0
 801207e:	2b00      	cmp	r3, #0
 8012080:	d10c      	bne.n	801209c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8012082:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012086:	b672      	cpsid	i
 8012088:	f383 8811 	msr	BASEPRI, r3
 801208c:	f3bf 8f6f 	isb	sy
 8012090:	f3bf 8f4f 	dsb	sy
 8012094:	b662      	cpsie	i
 8012096:	623b      	str	r3, [r7, #32]
}
 8012098:	bf00      	nop
 801209a:	e7fe      	b.n	801209a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	2b02      	cmp	r3, #2
 80120a0:	d103      	bne.n	80120aa <xQueueGenericSendFromISR+0x72>
 80120a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120a6:	2b01      	cmp	r3, #1
 80120a8:	d101      	bne.n	80120ae <xQueueGenericSendFromISR+0x76>
 80120aa:	2301      	movs	r3, #1
 80120ac:	e000      	b.n	80120b0 <xQueueGenericSendFromISR+0x78>
 80120ae:	2300      	movs	r3, #0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d10c      	bne.n	80120ce <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80120b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80120b8:	b672      	cpsid	i
 80120ba:	f383 8811 	msr	BASEPRI, r3
 80120be:	f3bf 8f6f 	isb	sy
 80120c2:	f3bf 8f4f 	dsb	sy
 80120c6:	b662      	cpsie	i
 80120c8:	61fb      	str	r3, [r7, #28]
}
 80120ca:	bf00      	nop
 80120cc:	e7fe      	b.n	80120cc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80120ce:	f7ff fca5 	bl	8011a1c <vPortValidateInterruptPriority>
	__asm volatile
 80120d2:	f3ef 8211 	mrs	r2, BASEPRI
 80120d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80120da:	b672      	cpsid	i
 80120dc:	f383 8811 	msr	BASEPRI, r3
 80120e0:	f3bf 8f6f 	isb	sy
 80120e4:	f3bf 8f4f 	dsb	sy
 80120e8:	b662      	cpsie	i
 80120ea:	61ba      	str	r2, [r7, #24]
 80120ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80120ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80120f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80120f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d302      	bcc.n	8012104 <xQueueGenericSendFromISR+0xcc>
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	2b02      	cmp	r3, #2
 8012102:	d12c      	bne.n	801215e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801210a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801210e:	683a      	ldr	r2, [r7, #0]
 8012110:	68b9      	ldr	r1, [r7, #8]
 8012112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012114:	f000 fb83 	bl	801281e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012118:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012120:	d112      	bne.n	8012148 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012126:	2b00      	cmp	r3, #0
 8012128:	d016      	beq.n	8012158 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212c:	3324      	adds	r3, #36	; 0x24
 801212e:	4618      	mov	r0, r3
 8012130:	f001 f986 	bl	8013440 <xTaskRemoveFromEventList>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d00e      	beq.n	8012158 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d00b      	beq.n	8012158 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2201      	movs	r2, #1
 8012144:	601a      	str	r2, [r3, #0]
 8012146:	e007      	b.n	8012158 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012148:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801214c:	3301      	adds	r3, #1
 801214e:	b2db      	uxtb	r3, r3
 8012150:	b25a      	sxtb	r2, r3
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012158:	2301      	movs	r3, #1
 801215a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801215c:	e001      	b.n	8012162 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801215e:	2300      	movs	r3, #0
 8012160:	637b      	str	r3, [r7, #52]	; 0x34
 8012162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012164:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	f383 8811 	msr	BASEPRI, r3
}
 801216c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801216e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012170:	4618      	mov	r0, r3
 8012172:	3738      	adds	r7, #56	; 0x38
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b08e      	sub	sp, #56	; 0x38
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012188:	2b00      	cmp	r3, #0
 801218a:	d10c      	bne.n	80121a6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801218c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012190:	b672      	cpsid	i
 8012192:	f383 8811 	msr	BASEPRI, r3
 8012196:	f3bf 8f6f 	isb	sy
 801219a:	f3bf 8f4f 	dsb	sy
 801219e:	b662      	cpsie	i
 80121a0:	623b      	str	r3, [r7, #32]
}
 80121a2:	bf00      	nop
 80121a4:	e7fe      	b.n	80121a4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80121a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d00c      	beq.n	80121c8 <xQueueGiveFromISR+0x50>
	__asm volatile
 80121ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80121b2:	b672      	cpsid	i
 80121b4:	f383 8811 	msr	BASEPRI, r3
 80121b8:	f3bf 8f6f 	isb	sy
 80121bc:	f3bf 8f4f 	dsb	sy
 80121c0:	b662      	cpsie	i
 80121c2:	61fb      	str	r3, [r7, #28]
}
 80121c4:	bf00      	nop
 80121c6:	e7fe      	b.n	80121c6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80121c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d103      	bne.n	80121d8 <xQueueGiveFromISR+0x60>
 80121d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d2:	689b      	ldr	r3, [r3, #8]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d101      	bne.n	80121dc <xQueueGiveFromISR+0x64>
 80121d8:	2301      	movs	r3, #1
 80121da:	e000      	b.n	80121de <xQueueGiveFromISR+0x66>
 80121dc:	2300      	movs	r3, #0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10c      	bne.n	80121fc <xQueueGiveFromISR+0x84>
	__asm volatile
 80121e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80121e6:	b672      	cpsid	i
 80121e8:	f383 8811 	msr	BASEPRI, r3
 80121ec:	f3bf 8f6f 	isb	sy
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	b662      	cpsie	i
 80121f6:	61bb      	str	r3, [r7, #24]
}
 80121f8:	bf00      	nop
 80121fa:	e7fe      	b.n	80121fa <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80121fc:	f7ff fc0e 	bl	8011a1c <vPortValidateInterruptPriority>
	__asm volatile
 8012200:	f3ef 8211 	mrs	r2, BASEPRI
 8012204:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012208:	b672      	cpsid	i
 801220a:	f383 8811 	msr	BASEPRI, r3
 801220e:	f3bf 8f6f 	isb	sy
 8012212:	f3bf 8f4f 	dsb	sy
 8012216:	b662      	cpsie	i
 8012218:	617a      	str	r2, [r7, #20]
 801221a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801221c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801221e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012224:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801222a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801222c:	429a      	cmp	r2, r3
 801222e:	d22b      	bcs.n	8012288 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223c:	1c5a      	adds	r2, r3, #1
 801223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012240:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012242:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224a:	d112      	bne.n	8012272 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012250:	2b00      	cmp	r3, #0
 8012252:	d016      	beq.n	8012282 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012256:	3324      	adds	r3, #36	; 0x24
 8012258:	4618      	mov	r0, r3
 801225a:	f001 f8f1 	bl	8013440 <xTaskRemoveFromEventList>
 801225e:	4603      	mov	r3, r0
 8012260:	2b00      	cmp	r3, #0
 8012262:	d00e      	beq.n	8012282 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d00b      	beq.n	8012282 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	2201      	movs	r2, #1
 801226e:	601a      	str	r2, [r3, #0]
 8012270:	e007      	b.n	8012282 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012276:	3301      	adds	r3, #1
 8012278:	b2db      	uxtb	r3, r3
 801227a:	b25a      	sxtb	r2, r3
 801227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012282:	2301      	movs	r3, #1
 8012284:	637b      	str	r3, [r7, #52]	; 0x34
 8012286:	e001      	b.n	801228c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012288:	2300      	movs	r3, #0
 801228a:	637b      	str	r3, [r7, #52]	; 0x34
 801228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	f383 8811 	msr	BASEPRI, r3
}
 8012296:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801229a:	4618      	mov	r0, r3
 801229c:	3738      	adds	r7, #56	; 0x38
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
	...

080122a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b08c      	sub	sp, #48	; 0x30
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	60b9      	str	r1, [r7, #8]
 80122ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80122b0:	2300      	movs	r3, #0
 80122b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80122b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d10c      	bne.n	80122d8 <xQueueReceive+0x34>
	__asm volatile
 80122be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122c2:	b672      	cpsid	i
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	b662      	cpsie	i
 80122d2:	623b      	str	r3, [r7, #32]
}
 80122d4:	bf00      	nop
 80122d6:	e7fe      	b.n	80122d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d103      	bne.n	80122e6 <xQueueReceive+0x42>
 80122de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d101      	bne.n	80122ea <xQueueReceive+0x46>
 80122e6:	2301      	movs	r3, #1
 80122e8:	e000      	b.n	80122ec <xQueueReceive+0x48>
 80122ea:	2300      	movs	r3, #0
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10c      	bne.n	801230a <xQueueReceive+0x66>
	__asm volatile
 80122f0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122f4:	b672      	cpsid	i
 80122f6:	f383 8811 	msr	BASEPRI, r3
 80122fa:	f3bf 8f6f 	isb	sy
 80122fe:	f3bf 8f4f 	dsb	sy
 8012302:	b662      	cpsie	i
 8012304:	61fb      	str	r3, [r7, #28]
}
 8012306:	bf00      	nop
 8012308:	e7fe      	b.n	8012308 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801230a:	f001 fa5f 	bl	80137cc <xTaskGetSchedulerState>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d102      	bne.n	801231a <xQueueReceive+0x76>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d101      	bne.n	801231e <xQueueReceive+0x7a>
 801231a:	2301      	movs	r3, #1
 801231c:	e000      	b.n	8012320 <xQueueReceive+0x7c>
 801231e:	2300      	movs	r3, #0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d10c      	bne.n	801233e <xQueueReceive+0x9a>
	__asm volatile
 8012324:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012328:	b672      	cpsid	i
 801232a:	f383 8811 	msr	BASEPRI, r3
 801232e:	f3bf 8f6f 	isb	sy
 8012332:	f3bf 8f4f 	dsb	sy
 8012336:	b662      	cpsie	i
 8012338:	61bb      	str	r3, [r7, #24]
}
 801233a:	bf00      	nop
 801233c:	e7fe      	b.n	801233c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801233e:	f7ff fa85 	bl	801184c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012346:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234a:	2b00      	cmp	r3, #0
 801234c:	d01f      	beq.n	801238e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801234e:	68b9      	ldr	r1, [r7, #8]
 8012350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012352:	f000 face 	bl	80128f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012358:	1e5a      	subs	r2, r3, #1
 801235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012360:	691b      	ldr	r3, [r3, #16]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d00f      	beq.n	8012386 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012368:	3310      	adds	r3, #16
 801236a:	4618      	mov	r0, r3
 801236c:	f001 f868 	bl	8013440 <xTaskRemoveFromEventList>
 8012370:	4603      	mov	r3, r0
 8012372:	2b00      	cmp	r3, #0
 8012374:	d007      	beq.n	8012386 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012376:	4b3d      	ldr	r3, [pc, #244]	; (801246c <xQueueReceive+0x1c8>)
 8012378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801237c:	601a      	str	r2, [r3, #0]
 801237e:	f3bf 8f4f 	dsb	sy
 8012382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012386:	f7ff fa95 	bl	80118b4 <vPortExitCritical>
				return pdPASS;
 801238a:	2301      	movs	r3, #1
 801238c:	e069      	b.n	8012462 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d103      	bne.n	801239c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012394:	f7ff fa8e 	bl	80118b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012398:	2300      	movs	r3, #0
 801239a:	e062      	b.n	8012462 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d106      	bne.n	80123b0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123a2:	f107 0310 	add.w	r3, r7, #16
 80123a6:	4618      	mov	r0, r3
 80123a8:	f001 f8b0 	bl	801350c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123ac:	2301      	movs	r3, #1
 80123ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123b0:	f7ff fa80 	bl	80118b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123b4:	f000 fe16 	bl	8012fe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123b8:	f7ff fa48 	bl	801184c <vPortEnterCritical>
 80123bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123c2:	b25b      	sxtb	r3, r3
 80123c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123c8:	d103      	bne.n	80123d2 <xQueueReceive+0x12e>
 80123ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123cc:	2200      	movs	r2, #0
 80123ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123d8:	b25b      	sxtb	r3, r3
 80123da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123de:	d103      	bne.n	80123e8 <xQueueReceive+0x144>
 80123e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e2:	2200      	movs	r2, #0
 80123e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123e8:	f7ff fa64 	bl	80118b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123ec:	1d3a      	adds	r2, r7, #4
 80123ee:	f107 0310 	add.w	r3, r7, #16
 80123f2:	4611      	mov	r1, r2
 80123f4:	4618      	mov	r0, r3
 80123f6:	f001 f89f 	bl	8013538 <xTaskCheckForTimeOut>
 80123fa:	4603      	mov	r3, r0
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d123      	bne.n	8012448 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012402:	f000 faee 	bl	80129e2 <prvIsQueueEmpty>
 8012406:	4603      	mov	r3, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	d017      	beq.n	801243c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240e:	3324      	adds	r3, #36	; 0x24
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	4611      	mov	r1, r2
 8012414:	4618      	mov	r0, r3
 8012416:	f000 ffbf 	bl	8013398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801241a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801241c:	f000 fa8f 	bl	801293e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012420:	f000 fdee 	bl	8013000 <xTaskResumeAll>
 8012424:	4603      	mov	r3, r0
 8012426:	2b00      	cmp	r3, #0
 8012428:	d189      	bne.n	801233e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801242a:	4b10      	ldr	r3, [pc, #64]	; (801246c <xQueueReceive+0x1c8>)
 801242c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012430:	601a      	str	r2, [r3, #0]
 8012432:	f3bf 8f4f 	dsb	sy
 8012436:	f3bf 8f6f 	isb	sy
 801243a:	e780      	b.n	801233e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801243c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801243e:	f000 fa7e 	bl	801293e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012442:	f000 fddd 	bl	8013000 <xTaskResumeAll>
 8012446:	e77a      	b.n	801233e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801244a:	f000 fa78 	bl	801293e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801244e:	f000 fdd7 	bl	8013000 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012454:	f000 fac5 	bl	80129e2 <prvIsQueueEmpty>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	f43f af6f 	beq.w	801233e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012462:	4618      	mov	r0, r3
 8012464:	3730      	adds	r7, #48	; 0x30
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	e000ed04 	.word	0xe000ed04

08012470 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b08e      	sub	sp, #56	; 0x38
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801247a:	2300      	movs	r3, #0
 801247c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012482:	2300      	movs	r3, #0
 8012484:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012488:	2b00      	cmp	r3, #0
 801248a:	d10c      	bne.n	80124a6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 801248c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012490:	b672      	cpsid	i
 8012492:	f383 8811 	msr	BASEPRI, r3
 8012496:	f3bf 8f6f 	isb	sy
 801249a:	f3bf 8f4f 	dsb	sy
 801249e:	b662      	cpsie	i
 80124a0:	623b      	str	r3, [r7, #32]
}
 80124a2:	bf00      	nop
 80124a4:	e7fe      	b.n	80124a4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80124a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00c      	beq.n	80124c8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80124ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80124b2:	b672      	cpsid	i
 80124b4:	f383 8811 	msr	BASEPRI, r3
 80124b8:	f3bf 8f6f 	isb	sy
 80124bc:	f3bf 8f4f 	dsb	sy
 80124c0:	b662      	cpsie	i
 80124c2:	61fb      	str	r3, [r7, #28]
}
 80124c4:	bf00      	nop
 80124c6:	e7fe      	b.n	80124c6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124c8:	f001 f980 	bl	80137cc <xTaskGetSchedulerState>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d102      	bne.n	80124d8 <xQueueSemaphoreTake+0x68>
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d101      	bne.n	80124dc <xQueueSemaphoreTake+0x6c>
 80124d8:	2301      	movs	r3, #1
 80124da:	e000      	b.n	80124de <xQueueSemaphoreTake+0x6e>
 80124dc:	2300      	movs	r3, #0
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d10c      	bne.n	80124fc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80124e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80124e6:	b672      	cpsid	i
 80124e8:	f383 8811 	msr	BASEPRI, r3
 80124ec:	f3bf 8f6f 	isb	sy
 80124f0:	f3bf 8f4f 	dsb	sy
 80124f4:	b662      	cpsie	i
 80124f6:	61bb      	str	r3, [r7, #24]
}
 80124f8:	bf00      	nop
 80124fa:	e7fe      	b.n	80124fa <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80124fc:	f7ff f9a6 	bl	801184c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012504:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012508:	2b00      	cmp	r3, #0
 801250a:	d024      	beq.n	8012556 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250e:	1e5a      	subs	r2, r3, #1
 8012510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012512:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d104      	bne.n	8012526 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801251c:	f001 fad4 	bl	8013ac8 <pvTaskIncrementMutexHeldCount>
 8012520:	4602      	mov	r2, r0
 8012522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012524:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012528:	691b      	ldr	r3, [r3, #16]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d00f      	beq.n	801254e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012530:	3310      	adds	r3, #16
 8012532:	4618      	mov	r0, r3
 8012534:	f000 ff84 	bl	8013440 <xTaskRemoveFromEventList>
 8012538:	4603      	mov	r3, r0
 801253a:	2b00      	cmp	r3, #0
 801253c:	d007      	beq.n	801254e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801253e:	4b55      	ldr	r3, [pc, #340]	; (8012694 <xQueueSemaphoreTake+0x224>)
 8012540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012544:	601a      	str	r2, [r3, #0]
 8012546:	f3bf 8f4f 	dsb	sy
 801254a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801254e:	f7ff f9b1 	bl	80118b4 <vPortExitCritical>
				return pdPASS;
 8012552:	2301      	movs	r3, #1
 8012554:	e099      	b.n	801268a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d113      	bne.n	8012584 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255e:	2b00      	cmp	r3, #0
 8012560:	d00c      	beq.n	801257c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8012562:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012566:	b672      	cpsid	i
 8012568:	f383 8811 	msr	BASEPRI, r3
 801256c:	f3bf 8f6f 	isb	sy
 8012570:	f3bf 8f4f 	dsb	sy
 8012574:	b662      	cpsie	i
 8012576:	617b      	str	r3, [r7, #20]
}
 8012578:	bf00      	nop
 801257a:	e7fe      	b.n	801257a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801257c:	f7ff f99a 	bl	80118b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012580:	2300      	movs	r3, #0
 8012582:	e082      	b.n	801268a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012586:	2b00      	cmp	r3, #0
 8012588:	d106      	bne.n	8012598 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801258a:	f107 030c 	add.w	r3, r7, #12
 801258e:	4618      	mov	r0, r3
 8012590:	f000 ffbc 	bl	801350c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012594:	2301      	movs	r3, #1
 8012596:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012598:	f7ff f98c 	bl	80118b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801259c:	f000 fd22 	bl	8012fe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80125a0:	f7ff f954 	bl	801184c <vPortEnterCritical>
 80125a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125aa:	b25b      	sxtb	r3, r3
 80125ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b0:	d103      	bne.n	80125ba <xQueueSemaphoreTake+0x14a>
 80125b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b4:	2200      	movs	r2, #0
 80125b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80125ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125c0:	b25b      	sxtb	r3, r3
 80125c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c6:	d103      	bne.n	80125d0 <xQueueSemaphoreTake+0x160>
 80125c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ca:	2200      	movs	r2, #0
 80125cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80125d0:	f7ff f970 	bl	80118b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80125d4:	463a      	mov	r2, r7
 80125d6:	f107 030c 	add.w	r3, r7, #12
 80125da:	4611      	mov	r1, r2
 80125dc:	4618      	mov	r0, r3
 80125de:	f000 ffab 	bl	8013538 <xTaskCheckForTimeOut>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d132      	bne.n	801264e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125ea:	f000 f9fa 	bl	80129e2 <prvIsQueueEmpty>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d026      	beq.n	8012642 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80125f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d109      	bne.n	8012610 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80125fc:	f7ff f926 	bl	801184c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012602:	689b      	ldr	r3, [r3, #8]
 8012604:	4618      	mov	r0, r3
 8012606:	f001 f8ff 	bl	8013808 <xTaskPriorityInherit>
 801260a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801260c:	f7ff f952 	bl	80118b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012612:	3324      	adds	r3, #36	; 0x24
 8012614:	683a      	ldr	r2, [r7, #0]
 8012616:	4611      	mov	r1, r2
 8012618:	4618      	mov	r0, r3
 801261a:	f000 febd 	bl	8013398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801261e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012620:	f000 f98d 	bl	801293e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012624:	f000 fcec 	bl	8013000 <xTaskResumeAll>
 8012628:	4603      	mov	r3, r0
 801262a:	2b00      	cmp	r3, #0
 801262c:	f47f af66 	bne.w	80124fc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8012630:	4b18      	ldr	r3, [pc, #96]	; (8012694 <xQueueSemaphoreTake+0x224>)
 8012632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012636:	601a      	str	r2, [r3, #0]
 8012638:	f3bf 8f4f 	dsb	sy
 801263c:	f3bf 8f6f 	isb	sy
 8012640:	e75c      	b.n	80124fc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012644:	f000 f97b 	bl	801293e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012648:	f000 fcda 	bl	8013000 <xTaskResumeAll>
 801264c:	e756      	b.n	80124fc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801264e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012650:	f000 f975 	bl	801293e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012654:	f000 fcd4 	bl	8013000 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801265a:	f000 f9c2 	bl	80129e2 <prvIsQueueEmpty>
 801265e:	4603      	mov	r3, r0
 8012660:	2b00      	cmp	r3, #0
 8012662:	f43f af4b 	beq.w	80124fc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00d      	beq.n	8012688 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801266c:	f7ff f8ee 	bl	801184c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012672:	f000 f8bc 	bl	80127ee <prvGetDisinheritPriorityAfterTimeout>
 8012676:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267a:	689b      	ldr	r3, [r3, #8]
 801267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801267e:	4618      	mov	r0, r3
 8012680:	f001 f99c 	bl	80139bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012684:	f7ff f916 	bl	80118b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012688:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801268a:	4618      	mov	r0, r3
 801268c:	3738      	adds	r7, #56	; 0x38
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	e000ed04 	.word	0xe000ed04

08012698 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b08e      	sub	sp, #56	; 0x38
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	60b9      	str	r1, [r7, #8]
 80126a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80126a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d10c      	bne.n	80126c8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80126ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80126b2:	b672      	cpsid	i
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	b662      	cpsie	i
 80126c2:	623b      	str	r3, [r7, #32]
}
 80126c4:	bf00      	nop
 80126c6:	e7fe      	b.n	80126c6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d103      	bne.n	80126d6 <xQueueReceiveFromISR+0x3e>
 80126ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d101      	bne.n	80126da <xQueueReceiveFromISR+0x42>
 80126d6:	2301      	movs	r3, #1
 80126d8:	e000      	b.n	80126dc <xQueueReceiveFromISR+0x44>
 80126da:	2300      	movs	r3, #0
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d10c      	bne.n	80126fa <xQueueReceiveFromISR+0x62>
	__asm volatile
 80126e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80126e4:	b672      	cpsid	i
 80126e6:	f383 8811 	msr	BASEPRI, r3
 80126ea:	f3bf 8f6f 	isb	sy
 80126ee:	f3bf 8f4f 	dsb	sy
 80126f2:	b662      	cpsie	i
 80126f4:	61fb      	str	r3, [r7, #28]
}
 80126f6:	bf00      	nop
 80126f8:	e7fe      	b.n	80126f8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80126fa:	f7ff f98f 	bl	8011a1c <vPortValidateInterruptPriority>
	__asm volatile
 80126fe:	f3ef 8211 	mrs	r2, BASEPRI
 8012702:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012706:	b672      	cpsid	i
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	b662      	cpsie	i
 8012716:	61ba      	str	r2, [r7, #24]
 8012718:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801271a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801271c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012722:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012726:	2b00      	cmp	r3, #0
 8012728:	d02f      	beq.n	801278a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012734:	68b9      	ldr	r1, [r7, #8]
 8012736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012738:	f000 f8db 	bl	80128f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273e:	1e5a      	subs	r2, r3, #1
 8012740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012742:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801274c:	d112      	bne.n	8012774 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012750:	691b      	ldr	r3, [r3, #16]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d016      	beq.n	8012784 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012758:	3310      	adds	r3, #16
 801275a:	4618      	mov	r0, r3
 801275c:	f000 fe70 	bl	8013440 <xTaskRemoveFromEventList>
 8012760:	4603      	mov	r3, r0
 8012762:	2b00      	cmp	r3, #0
 8012764:	d00e      	beq.n	8012784 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d00b      	beq.n	8012784 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2201      	movs	r2, #1
 8012770:	601a      	str	r2, [r3, #0]
 8012772:	e007      	b.n	8012784 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012778:	3301      	adds	r3, #1
 801277a:	b2db      	uxtb	r3, r3
 801277c:	b25a      	sxtb	r2, r3
 801277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012784:	2301      	movs	r3, #1
 8012786:	637b      	str	r3, [r7, #52]	; 0x34
 8012788:	e001      	b.n	801278e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801278a:	2300      	movs	r3, #0
 801278c:	637b      	str	r3, [r7, #52]	; 0x34
 801278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012790:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	f383 8811 	msr	BASEPRI, r3
}
 8012798:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801279a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801279c:	4618      	mov	r0, r3
 801279e:	3738      	adds	r7, #56	; 0x38
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b084      	sub	sp, #16
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d10c      	bne.n	80127d0 <vQueueDelete+0x2c>
	__asm volatile
 80127b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127ba:	b672      	cpsid	i
 80127bc:	f383 8811 	msr	BASEPRI, r3
 80127c0:	f3bf 8f6f 	isb	sy
 80127c4:	f3bf 8f4f 	dsb	sy
 80127c8:	b662      	cpsie	i
 80127ca:	60bb      	str	r3, [r7, #8]
}
 80127cc:	bf00      	nop
 80127ce:	e7fe      	b.n	80127ce <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80127d0:	68f8      	ldr	r0, [r7, #12]
 80127d2:	f000 f95f 	bl	8012a94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d102      	bne.n	80127e6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80127e0:	68f8      	ldr	r0, [r7, #12]
 80127e2:	f7fe fd55 	bl	8011290 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80127e6:	bf00      	nop
 80127e8:	3710      	adds	r7, #16
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}

080127ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80127ee:	b480      	push	{r7}
 80127f0:	b085      	sub	sp, #20
 80127f2:	af00      	add	r7, sp, #0
 80127f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d006      	beq.n	801280c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012808:	60fb      	str	r3, [r7, #12]
 801280a:	e001      	b.n	8012810 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801280c:	2300      	movs	r3, #0
 801280e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012810:	68fb      	ldr	r3, [r7, #12]
	}
 8012812:	4618      	mov	r0, r3
 8012814:	3714      	adds	r7, #20
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr

0801281e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801281e:	b580      	push	{r7, lr}
 8012820:	b086      	sub	sp, #24
 8012822:	af00      	add	r7, sp, #0
 8012824:	60f8      	str	r0, [r7, #12]
 8012826:	60b9      	str	r1, [r7, #8]
 8012828:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801282a:	2300      	movs	r3, #0
 801282c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012832:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012838:	2b00      	cmp	r3, #0
 801283a:	d10d      	bne.n	8012858 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d14d      	bne.n	80128e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	689b      	ldr	r3, [r3, #8]
 8012848:	4618      	mov	r0, r3
 801284a:	f001 f845 	bl	80138d8 <xTaskPriorityDisinherit>
 801284e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2200      	movs	r2, #0
 8012854:	609a      	str	r2, [r3, #8]
 8012856:	e043      	b.n	80128e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d119      	bne.n	8012892 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	6858      	ldr	r0, [r3, #4]
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012866:	461a      	mov	r2, r3
 8012868:	68b9      	ldr	r1, [r7, #8]
 801286a:	f012 fe71 	bl	8025550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	685a      	ldr	r2, [r3, #4]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012876:	441a      	add	r2, r3
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	685a      	ldr	r2, [r3, #4]
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	689b      	ldr	r3, [r3, #8]
 8012884:	429a      	cmp	r2, r3
 8012886:	d32b      	bcc.n	80128e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	605a      	str	r2, [r3, #4]
 8012890:	e026      	b.n	80128e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	68d8      	ldr	r0, [r3, #12]
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801289a:	461a      	mov	r2, r3
 801289c:	68b9      	ldr	r1, [r7, #8]
 801289e:	f012 fe57 	bl	8025550 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	68da      	ldr	r2, [r3, #12]
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128aa:	425b      	negs	r3, r3
 80128ac:	441a      	add	r2, r3
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	68da      	ldr	r2, [r3, #12]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d207      	bcs.n	80128ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	689a      	ldr	r2, [r3, #8]
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128c6:	425b      	negs	r3, r3
 80128c8:	441a      	add	r2, r3
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	d105      	bne.n	80128e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d002      	beq.n	80128e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	3b01      	subs	r3, #1
 80128de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	1c5a      	adds	r2, r3, #1
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80128e8:	697b      	ldr	r3, [r7, #20]
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3718      	adds	r7, #24
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}

080128f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80128f2:	b580      	push	{r7, lr}
 80128f4:	b082      	sub	sp, #8
 80128f6:	af00      	add	r7, sp, #0
 80128f8:	6078      	str	r0, [r7, #4]
 80128fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012900:	2b00      	cmp	r3, #0
 8012902:	d018      	beq.n	8012936 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	68da      	ldr	r2, [r3, #12]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801290c:	441a      	add	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	68da      	ldr	r2, [r3, #12]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	689b      	ldr	r3, [r3, #8]
 801291a:	429a      	cmp	r2, r3
 801291c:	d303      	bcc.n	8012926 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	68d9      	ldr	r1, [r3, #12]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801292e:	461a      	mov	r2, r3
 8012930:	6838      	ldr	r0, [r7, #0]
 8012932:	f012 fe0d 	bl	8025550 <memcpy>
	}
}
 8012936:	bf00      	nop
 8012938:	3708      	adds	r7, #8
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}

0801293e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801293e:	b580      	push	{r7, lr}
 8012940:	b084      	sub	sp, #16
 8012942:	af00      	add	r7, sp, #0
 8012944:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012946:	f7fe ff81 	bl	801184c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012950:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012952:	e011      	b.n	8012978 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012958:	2b00      	cmp	r3, #0
 801295a:	d012      	beq.n	8012982 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3324      	adds	r3, #36	; 0x24
 8012960:	4618      	mov	r0, r3
 8012962:	f000 fd6d 	bl	8013440 <xTaskRemoveFromEventList>
 8012966:	4603      	mov	r3, r0
 8012968:	2b00      	cmp	r3, #0
 801296a:	d001      	beq.n	8012970 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801296c:	f000 fe4a 	bl	8013604 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012970:	7bfb      	ldrb	r3, [r7, #15]
 8012972:	3b01      	subs	r3, #1
 8012974:	b2db      	uxtb	r3, r3
 8012976:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801297c:	2b00      	cmp	r3, #0
 801297e:	dce9      	bgt.n	8012954 <prvUnlockQueue+0x16>
 8012980:	e000      	b.n	8012984 <prvUnlockQueue+0x46>
					break;
 8012982:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	22ff      	movs	r2, #255	; 0xff
 8012988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801298c:	f7fe ff92 	bl	80118b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012990:	f7fe ff5c 	bl	801184c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801299a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801299c:	e011      	b.n	80129c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	691b      	ldr	r3, [r3, #16]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d012      	beq.n	80129cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	3310      	adds	r3, #16
 80129aa:	4618      	mov	r0, r3
 80129ac:	f000 fd48 	bl	8013440 <xTaskRemoveFromEventList>
 80129b0:	4603      	mov	r3, r0
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d001      	beq.n	80129ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80129b6:	f000 fe25 	bl	8013604 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80129ba:	7bbb      	ldrb	r3, [r7, #14]
 80129bc:	3b01      	subs	r3, #1
 80129be:	b2db      	uxtb	r3, r3
 80129c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80129c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	dce9      	bgt.n	801299e <prvUnlockQueue+0x60>
 80129ca:	e000      	b.n	80129ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80129cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	22ff      	movs	r2, #255	; 0xff
 80129d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80129d6:	f7fe ff6d 	bl	80118b4 <vPortExitCritical>
}
 80129da:	bf00      	nop
 80129dc:	3710      	adds	r7, #16
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b084      	sub	sp, #16
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80129ea:	f7fe ff2f 	bl	801184c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d102      	bne.n	80129fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80129f6:	2301      	movs	r3, #1
 80129f8:	60fb      	str	r3, [r7, #12]
 80129fa:	e001      	b.n	8012a00 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80129fc:	2300      	movs	r3, #0
 80129fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a00:	f7fe ff58 	bl	80118b4 <vPortExitCritical>

	return xReturn;
 8012a04:	68fb      	ldr	r3, [r7, #12]
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3710      	adds	r7, #16
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}

08012a0e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b084      	sub	sp, #16
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a16:	f7fe ff19 	bl	801184c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d102      	bne.n	8012a2c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012a26:	2301      	movs	r3, #1
 8012a28:	60fb      	str	r3, [r7, #12]
 8012a2a:	e001      	b.n	8012a30 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a30:	f7fe ff40 	bl	80118b4 <vPortExitCritical>

	return xReturn;
 8012a34:	68fb      	ldr	r3, [r7, #12]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3710      	adds	r7, #16
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
	...

08012a40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012a40:	b480      	push	{r7}
 8012a42:	b085      	sub	sp, #20
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	60fb      	str	r3, [r7, #12]
 8012a4e:	e014      	b.n	8012a7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012a50:	4a0f      	ldr	r2, [pc, #60]	; (8012a90 <vQueueAddToRegistry+0x50>)
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d10b      	bne.n	8012a74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012a5c:	490c      	ldr	r1, [pc, #48]	; (8012a90 <vQueueAddToRegistry+0x50>)
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	683a      	ldr	r2, [r7, #0]
 8012a62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012a66:	4a0a      	ldr	r2, [pc, #40]	; (8012a90 <vQueueAddToRegistry+0x50>)
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	00db      	lsls	r3, r3, #3
 8012a6c:	4413      	add	r3, r2
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012a72:	e006      	b.n	8012a82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	3301      	adds	r3, #1
 8012a78:	60fb      	str	r3, [r7, #12]
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2b07      	cmp	r3, #7
 8012a7e:	d9e7      	bls.n	8012a50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012a80:	bf00      	nop
 8012a82:	bf00      	nop
 8012a84:	3714      	adds	r7, #20
 8012a86:	46bd      	mov	sp, r7
 8012a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8c:	4770      	bx	lr
 8012a8e:	bf00      	nop
 8012a90:	20056f14 	.word	0x20056f14

08012a94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012a94:	b480      	push	{r7}
 8012a96:	b085      	sub	sp, #20
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	60fb      	str	r3, [r7, #12]
 8012aa0:	e016      	b.n	8012ad0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012aa2:	4a10      	ldr	r2, [pc, #64]	; (8012ae4 <vQueueUnregisterQueue+0x50>)
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	00db      	lsls	r3, r3, #3
 8012aa8:	4413      	add	r3, r2
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d10b      	bne.n	8012aca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012ab2:	4a0c      	ldr	r2, [pc, #48]	; (8012ae4 <vQueueUnregisterQueue+0x50>)
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	2100      	movs	r1, #0
 8012ab8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012abc:	4a09      	ldr	r2, [pc, #36]	; (8012ae4 <vQueueUnregisterQueue+0x50>)
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	00db      	lsls	r3, r3, #3
 8012ac2:	4413      	add	r3, r2
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	605a      	str	r2, [r3, #4]
				break;
 8012ac8:	e006      	b.n	8012ad8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	3301      	adds	r3, #1
 8012ace:	60fb      	str	r3, [r7, #12]
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2b07      	cmp	r3, #7
 8012ad4:	d9e5      	bls.n	8012aa2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012ad6:	bf00      	nop
 8012ad8:	bf00      	nop
 8012ada:	3714      	adds	r7, #20
 8012adc:	46bd      	mov	sp, r7
 8012ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae2:	4770      	bx	lr
 8012ae4:	20056f14 	.word	0x20056f14

08012ae8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b086      	sub	sp, #24
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	60f8      	str	r0, [r7, #12]
 8012af0:	60b9      	str	r1, [r7, #8]
 8012af2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012af8:	f7fe fea8 	bl	801184c <vPortEnterCritical>
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b02:	b25b      	sxtb	r3, r3
 8012b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b08:	d103      	bne.n	8012b12 <vQueueWaitForMessageRestricted+0x2a>
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b18:	b25b      	sxtb	r3, r3
 8012b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b1e:	d103      	bne.n	8012b28 <vQueueWaitForMessageRestricted+0x40>
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	2200      	movs	r2, #0
 8012b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b28:	f7fe fec4 	bl	80118b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d106      	bne.n	8012b42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	3324      	adds	r3, #36	; 0x24
 8012b38:	687a      	ldr	r2, [r7, #4]
 8012b3a:	68b9      	ldr	r1, [r7, #8]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f000 fc51 	bl	80133e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012b42:	6978      	ldr	r0, [r7, #20]
 8012b44:	f7ff fefb 	bl	801293e <prvUnlockQueue>
	}
 8012b48:	bf00      	nop
 8012b4a:	3718      	adds	r7, #24
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b08e      	sub	sp, #56	; 0x38
 8012b54:	af04      	add	r7, sp, #16
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	607a      	str	r2, [r7, #4]
 8012b5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d10c      	bne.n	8012b7e <xTaskCreateStatic+0x2e>
	__asm volatile
 8012b64:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b68:	b672      	cpsid	i
 8012b6a:	f383 8811 	msr	BASEPRI, r3
 8012b6e:	f3bf 8f6f 	isb	sy
 8012b72:	f3bf 8f4f 	dsb	sy
 8012b76:	b662      	cpsie	i
 8012b78:	623b      	str	r3, [r7, #32]
}
 8012b7a:	bf00      	nop
 8012b7c:	e7fe      	b.n	8012b7c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d10c      	bne.n	8012b9e <xTaskCreateStatic+0x4e>
	__asm volatile
 8012b84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b88:	b672      	cpsid	i
 8012b8a:	f383 8811 	msr	BASEPRI, r3
 8012b8e:	f3bf 8f6f 	isb	sy
 8012b92:	f3bf 8f4f 	dsb	sy
 8012b96:	b662      	cpsie	i
 8012b98:	61fb      	str	r3, [r7, #28]
}
 8012b9a:	bf00      	nop
 8012b9c:	e7fe      	b.n	8012b9c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012b9e:	235c      	movs	r3, #92	; 0x5c
 8012ba0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	2b5c      	cmp	r3, #92	; 0x5c
 8012ba6:	d00c      	beq.n	8012bc2 <xTaskCreateStatic+0x72>
	__asm volatile
 8012ba8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012bac:	b672      	cpsid	i
 8012bae:	f383 8811 	msr	BASEPRI, r3
 8012bb2:	f3bf 8f6f 	isb	sy
 8012bb6:	f3bf 8f4f 	dsb	sy
 8012bba:	b662      	cpsie	i
 8012bbc:	61bb      	str	r3, [r7, #24]
}
 8012bbe:	bf00      	nop
 8012bc0:	e7fe      	b.n	8012bc0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012bc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d01e      	beq.n	8012c08 <xTaskCreateStatic+0xb8>
 8012bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d01b      	beq.n	8012c08 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bdc:	2202      	movs	r2, #2
 8012bde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012be2:	2300      	movs	r3, #0
 8012be4:	9303      	str	r3, [sp, #12]
 8012be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be8:	9302      	str	r3, [sp, #8]
 8012bea:	f107 0314 	add.w	r3, r7, #20
 8012bee:	9301      	str	r3, [sp, #4]
 8012bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf2:	9300      	str	r3, [sp, #0]
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	68b9      	ldr	r1, [r7, #8]
 8012bfa:	68f8      	ldr	r0, [r7, #12]
 8012bfc:	f000 f850 	bl	8012ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c02:	f000 f8df 	bl	8012dc4 <prvAddNewTaskToReadyList>
 8012c06:	e001      	b.n	8012c0c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012c0c:	697b      	ldr	r3, [r7, #20]
	}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	3728      	adds	r7, #40	; 0x28
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}

08012c16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012c16:	b580      	push	{r7, lr}
 8012c18:	b08c      	sub	sp, #48	; 0x30
 8012c1a:	af04      	add	r7, sp, #16
 8012c1c:	60f8      	str	r0, [r7, #12]
 8012c1e:	60b9      	str	r1, [r7, #8]
 8012c20:	603b      	str	r3, [r7, #0]
 8012c22:	4613      	mov	r3, r2
 8012c24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012c26:	88fb      	ldrh	r3, [r7, #6]
 8012c28:	009b      	lsls	r3, r3, #2
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fe fa66 	bl	80110fc <pvPortMalloc>
 8012c30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d00e      	beq.n	8012c56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012c38:	205c      	movs	r0, #92	; 0x5c
 8012c3a:	f7fe fa5f 	bl	80110fc <pvPortMalloc>
 8012c3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d003      	beq.n	8012c4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	697a      	ldr	r2, [r7, #20]
 8012c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8012c4c:	e005      	b.n	8012c5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012c4e:	6978      	ldr	r0, [r7, #20]
 8012c50:	f7fe fb1e 	bl	8011290 <vPortFree>
 8012c54:	e001      	b.n	8012c5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012c56:	2300      	movs	r3, #0
 8012c58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012c5a:	69fb      	ldr	r3, [r7, #28]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d017      	beq.n	8012c90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	2200      	movs	r2, #0
 8012c64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012c68:	88fa      	ldrh	r2, [r7, #6]
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	9303      	str	r3, [sp, #12]
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	9302      	str	r3, [sp, #8]
 8012c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c74:	9301      	str	r3, [sp, #4]
 8012c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c78:	9300      	str	r3, [sp, #0]
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	68b9      	ldr	r1, [r7, #8]
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f000 f80e 	bl	8012ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c84:	69f8      	ldr	r0, [r7, #28]
 8012c86:	f000 f89d 	bl	8012dc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	61bb      	str	r3, [r7, #24]
 8012c8e:	e002      	b.n	8012c96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012c90:	f04f 33ff 	mov.w	r3, #4294967295
 8012c94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012c96:	69bb      	ldr	r3, [r7, #24]
	}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3720      	adds	r7, #32
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}

08012ca0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b088      	sub	sp, #32
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	60f8      	str	r0, [r7, #12]
 8012ca8:	60b9      	str	r1, [r7, #8]
 8012caa:	607a      	str	r2, [r7, #4]
 8012cac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	009b      	lsls	r3, r3, #2
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	21a5      	movs	r1, #165	; 0xa5
 8012cba:	f012 fc57 	bl	802556c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cc2:	6879      	ldr	r1, [r7, #4]
 8012cc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012cc8:	440b      	add	r3, r1
 8012cca:	009b      	lsls	r3, r3, #2
 8012ccc:	4413      	add	r3, r2
 8012cce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	f023 0307 	bic.w	r3, r3, #7
 8012cd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	f003 0307 	and.w	r3, r3, #7
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d00c      	beq.n	8012cfc <prvInitialiseNewTask+0x5c>
	__asm volatile
 8012ce2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ce6:	b672      	cpsid	i
 8012ce8:	f383 8811 	msr	BASEPRI, r3
 8012cec:	f3bf 8f6f 	isb	sy
 8012cf0:	f3bf 8f4f 	dsb	sy
 8012cf4:	b662      	cpsie	i
 8012cf6:	617b      	str	r3, [r7, #20]
}
 8012cf8:	bf00      	nop
 8012cfa:	e7fe      	b.n	8012cfa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d01f      	beq.n	8012d42 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d02:	2300      	movs	r3, #0
 8012d04:	61fb      	str	r3, [r7, #28]
 8012d06:	e012      	b.n	8012d2e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012d08:	68ba      	ldr	r2, [r7, #8]
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	7819      	ldrb	r1, [r3, #0]
 8012d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	4413      	add	r3, r2
 8012d16:	3334      	adds	r3, #52	; 0x34
 8012d18:	460a      	mov	r2, r1
 8012d1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012d1c:	68ba      	ldr	r2, [r7, #8]
 8012d1e:	69fb      	ldr	r3, [r7, #28]
 8012d20:	4413      	add	r3, r2
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d006      	beq.n	8012d36 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d28:	69fb      	ldr	r3, [r7, #28]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	61fb      	str	r3, [r7, #28]
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	2b0f      	cmp	r3, #15
 8012d32:	d9e9      	bls.n	8012d08 <prvInitialiseNewTask+0x68>
 8012d34:	e000      	b.n	8012d38 <prvInitialiseNewTask+0x98>
			{
				break;
 8012d36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012d40:	e003      	b.n	8012d4a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d44:	2200      	movs	r2, #0
 8012d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d4c:	2b37      	cmp	r3, #55	; 0x37
 8012d4e:	d901      	bls.n	8012d54 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012d50:	2337      	movs	r3, #55	; 0x37
 8012d52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d62:	2200      	movs	r2, #0
 8012d64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	3304      	adds	r3, #4
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fe fbca 	bl	8011504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d72:	3318      	adds	r3, #24
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7fe fbc5 	bl	8011504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d92:	2200      	movs	r2, #0
 8012d94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d98:	2200      	movs	r2, #0
 8012d9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012d9e:	683a      	ldr	r2, [r7, #0]
 8012da0:	68f9      	ldr	r1, [r7, #12]
 8012da2:	69b8      	ldr	r0, [r7, #24]
 8012da4:	f7fe fc42 	bl	801162c <pxPortInitialiseStack>
 8012da8:	4602      	mov	r2, r0
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012dba:	bf00      	nop
 8012dbc:	3720      	adds	r7, #32
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
	...

08012dc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012dcc:	f7fe fd3e 	bl	801184c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012dd0:	4b2d      	ldr	r3, [pc, #180]	; (8012e88 <prvAddNewTaskToReadyList+0xc4>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	4a2c      	ldr	r2, [pc, #176]	; (8012e88 <prvAddNewTaskToReadyList+0xc4>)
 8012dd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012dda:	4b2c      	ldr	r3, [pc, #176]	; (8012e8c <prvAddNewTaskToReadyList+0xc8>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d109      	bne.n	8012df6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012de2:	4a2a      	ldr	r2, [pc, #168]	; (8012e8c <prvAddNewTaskToReadyList+0xc8>)
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012de8:	4b27      	ldr	r3, [pc, #156]	; (8012e88 <prvAddNewTaskToReadyList+0xc4>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d110      	bne.n	8012e12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012df0:	f000 fc2c 	bl	801364c <prvInitialiseTaskLists>
 8012df4:	e00d      	b.n	8012e12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012df6:	4b26      	ldr	r3, [pc, #152]	; (8012e90 <prvAddNewTaskToReadyList+0xcc>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d109      	bne.n	8012e12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012dfe:	4b23      	ldr	r3, [pc, #140]	; (8012e8c <prvAddNewTaskToReadyList+0xc8>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d802      	bhi.n	8012e12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012e0c:	4a1f      	ldr	r2, [pc, #124]	; (8012e8c <prvAddNewTaskToReadyList+0xc8>)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012e12:	4b20      	ldr	r3, [pc, #128]	; (8012e94 <prvAddNewTaskToReadyList+0xd0>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	3301      	adds	r3, #1
 8012e18:	4a1e      	ldr	r2, [pc, #120]	; (8012e94 <prvAddNewTaskToReadyList+0xd0>)
 8012e1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012e1c:	4b1d      	ldr	r3, [pc, #116]	; (8012e94 <prvAddNewTaskToReadyList+0xd0>)
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e28:	4b1b      	ldr	r3, [pc, #108]	; (8012e98 <prvAddNewTaskToReadyList+0xd4>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d903      	bls.n	8012e38 <prvAddNewTaskToReadyList+0x74>
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e34:	4a18      	ldr	r2, [pc, #96]	; (8012e98 <prvAddNewTaskToReadyList+0xd4>)
 8012e36:	6013      	str	r3, [r2, #0]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e3c:	4613      	mov	r3, r2
 8012e3e:	009b      	lsls	r3, r3, #2
 8012e40:	4413      	add	r3, r2
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	4a15      	ldr	r2, [pc, #84]	; (8012e9c <prvAddNewTaskToReadyList+0xd8>)
 8012e46:	441a      	add	r2, r3
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	3304      	adds	r3, #4
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	4610      	mov	r0, r2
 8012e50:	f7fe fb65 	bl	801151e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012e54:	f7fe fd2e 	bl	80118b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012e58:	4b0d      	ldr	r3, [pc, #52]	; (8012e90 <prvAddNewTaskToReadyList+0xcc>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d00e      	beq.n	8012e7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012e60:	4b0a      	ldr	r3, [pc, #40]	; (8012e8c <prvAddNewTaskToReadyList+0xc8>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d207      	bcs.n	8012e7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012e6e:	4b0c      	ldr	r3, [pc, #48]	; (8012ea0 <prvAddNewTaskToReadyList+0xdc>)
 8012e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e74:	601a      	str	r2, [r3, #0]
 8012e76:	f3bf 8f4f 	dsb	sy
 8012e7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e7e:	bf00      	nop
 8012e80:	3708      	adds	r7, #8
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	200563d8 	.word	0x200563d8
 8012e8c:	20055f04 	.word	0x20055f04
 8012e90:	200563e4 	.word	0x200563e4
 8012e94:	200563f4 	.word	0x200563f4
 8012e98:	200563e0 	.word	0x200563e0
 8012e9c:	20055f08 	.word	0x20055f08
 8012ea0:	e000ed04 	.word	0xe000ed04

08012ea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b084      	sub	sp, #16
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012eac:	2300      	movs	r3, #0
 8012eae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d019      	beq.n	8012eea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012eb6:	4b14      	ldr	r3, [pc, #80]	; (8012f08 <vTaskDelay+0x64>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00c      	beq.n	8012ed8 <vTaskDelay+0x34>
	__asm volatile
 8012ebe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ec2:	b672      	cpsid	i
 8012ec4:	f383 8811 	msr	BASEPRI, r3
 8012ec8:	f3bf 8f6f 	isb	sy
 8012ecc:	f3bf 8f4f 	dsb	sy
 8012ed0:	b662      	cpsie	i
 8012ed2:	60bb      	str	r3, [r7, #8]
}
 8012ed4:	bf00      	nop
 8012ed6:	e7fe      	b.n	8012ed6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012ed8:	f000 f884 	bl	8012fe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012edc:	2100      	movs	r1, #0
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f000 fe06 	bl	8013af0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012ee4:	f000 f88c 	bl	8013000 <xTaskResumeAll>
 8012ee8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d107      	bne.n	8012f00 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8012ef0:	4b06      	ldr	r3, [pc, #24]	; (8012f0c <vTaskDelay+0x68>)
 8012ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ef6:	601a      	str	r2, [r3, #0]
 8012ef8:	f3bf 8f4f 	dsb	sy
 8012efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f00:	bf00      	nop
 8012f02:	3710      	adds	r7, #16
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	20056400 	.word	0x20056400
 8012f0c:	e000ed04 	.word	0xe000ed04

08012f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b08a      	sub	sp, #40	; 0x28
 8012f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f16:	2300      	movs	r3, #0
 8012f18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f1e:	463a      	mov	r2, r7
 8012f20:	1d39      	adds	r1, r7, #4
 8012f22:	f107 0308 	add.w	r3, r7, #8
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7fe f8b4 	bl	8011094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f2c:	6839      	ldr	r1, [r7, #0]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	68ba      	ldr	r2, [r7, #8]
 8012f32:	9202      	str	r2, [sp, #8]
 8012f34:	9301      	str	r3, [sp, #4]
 8012f36:	2300      	movs	r3, #0
 8012f38:	9300      	str	r3, [sp, #0]
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	460a      	mov	r2, r1
 8012f3e:	4923      	ldr	r1, [pc, #140]	; (8012fcc <vTaskStartScheduler+0xbc>)
 8012f40:	4823      	ldr	r0, [pc, #140]	; (8012fd0 <vTaskStartScheduler+0xc0>)
 8012f42:	f7ff fe05 	bl	8012b50 <xTaskCreateStatic>
 8012f46:	4603      	mov	r3, r0
 8012f48:	4a22      	ldr	r2, [pc, #136]	; (8012fd4 <vTaskStartScheduler+0xc4>)
 8012f4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012f4c:	4b21      	ldr	r3, [pc, #132]	; (8012fd4 <vTaskStartScheduler+0xc4>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d002      	beq.n	8012f5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012f54:	2301      	movs	r3, #1
 8012f56:	617b      	str	r3, [r7, #20]
 8012f58:	e001      	b.n	8012f5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	d102      	bne.n	8012f6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012f64:	f000 fe18 	bl	8013b98 <xTimerCreateTimerTask>
 8012f68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d118      	bne.n	8012fa2 <vTaskStartScheduler+0x92>
	__asm volatile
 8012f70:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f74:	b672      	cpsid	i
 8012f76:	f383 8811 	msr	BASEPRI, r3
 8012f7a:	f3bf 8f6f 	isb	sy
 8012f7e:	f3bf 8f4f 	dsb	sy
 8012f82:	b662      	cpsie	i
 8012f84:	613b      	str	r3, [r7, #16]
}
 8012f86:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012f88:	4b13      	ldr	r3, [pc, #76]	; (8012fd8 <vTaskStartScheduler+0xc8>)
 8012f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012f90:	4b12      	ldr	r3, [pc, #72]	; (8012fdc <vTaskStartScheduler+0xcc>)
 8012f92:	2201      	movs	r2, #1
 8012f94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012f96:	4b12      	ldr	r3, [pc, #72]	; (8012fe0 <vTaskStartScheduler+0xd0>)
 8012f98:	2200      	movs	r2, #0
 8012f9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012f9c:	f7fe fbd8 	bl	8011750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012fa0:	e010      	b.n	8012fc4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fa8:	d10c      	bne.n	8012fc4 <vTaskStartScheduler+0xb4>
	__asm volatile
 8012faa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fae:	b672      	cpsid	i
 8012fb0:	f383 8811 	msr	BASEPRI, r3
 8012fb4:	f3bf 8f6f 	isb	sy
 8012fb8:	f3bf 8f4f 	dsb	sy
 8012fbc:	b662      	cpsie	i
 8012fbe:	60fb      	str	r3, [r7, #12]
}
 8012fc0:	bf00      	nop
 8012fc2:	e7fe      	b.n	8012fc2 <vTaskStartScheduler+0xb2>
}
 8012fc4:	bf00      	nop
 8012fc6:	3718      	adds	r7, #24
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	080274bc 	.word	0x080274bc
 8012fd0:	0801361d 	.word	0x0801361d
 8012fd4:	200563fc 	.word	0x200563fc
 8012fd8:	200563f8 	.word	0x200563f8
 8012fdc:	200563e4 	.word	0x200563e4
 8012fe0:	200563dc 	.word	0x200563dc

08012fe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012fe8:	4b04      	ldr	r3, [pc, #16]	; (8012ffc <vTaskSuspendAll+0x18>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	3301      	adds	r3, #1
 8012fee:	4a03      	ldr	r2, [pc, #12]	; (8012ffc <vTaskSuspendAll+0x18>)
 8012ff0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012ff2:	bf00      	nop
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr
 8012ffc:	20056400 	.word	0x20056400

08013000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013006:	2300      	movs	r3, #0
 8013008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801300a:	2300      	movs	r3, #0
 801300c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801300e:	4b43      	ldr	r3, [pc, #268]	; (801311c <xTaskResumeAll+0x11c>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d10c      	bne.n	8013030 <xTaskResumeAll+0x30>
	__asm volatile
 8013016:	f04f 0330 	mov.w	r3, #48	; 0x30
 801301a:	b672      	cpsid	i
 801301c:	f383 8811 	msr	BASEPRI, r3
 8013020:	f3bf 8f6f 	isb	sy
 8013024:	f3bf 8f4f 	dsb	sy
 8013028:	b662      	cpsie	i
 801302a:	603b      	str	r3, [r7, #0]
}
 801302c:	bf00      	nop
 801302e:	e7fe      	b.n	801302e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013030:	f7fe fc0c 	bl	801184c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013034:	4b39      	ldr	r3, [pc, #228]	; (801311c <xTaskResumeAll+0x11c>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	3b01      	subs	r3, #1
 801303a:	4a38      	ldr	r2, [pc, #224]	; (801311c <xTaskResumeAll+0x11c>)
 801303c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801303e:	4b37      	ldr	r3, [pc, #220]	; (801311c <xTaskResumeAll+0x11c>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d162      	bne.n	801310c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013046:	4b36      	ldr	r3, [pc, #216]	; (8013120 <xTaskResumeAll+0x120>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d05e      	beq.n	801310c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801304e:	e02f      	b.n	80130b0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013050:	4b34      	ldr	r3, [pc, #208]	; (8013124 <xTaskResumeAll+0x124>)
 8013052:	68db      	ldr	r3, [r3, #12]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	3318      	adds	r3, #24
 801305c:	4618      	mov	r0, r3
 801305e:	f7fe fabb 	bl	80115d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	3304      	adds	r3, #4
 8013066:	4618      	mov	r0, r3
 8013068:	f7fe fab6 	bl	80115d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013070:	4b2d      	ldr	r3, [pc, #180]	; (8013128 <xTaskResumeAll+0x128>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	429a      	cmp	r2, r3
 8013076:	d903      	bls.n	8013080 <xTaskResumeAll+0x80>
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307c:	4a2a      	ldr	r2, [pc, #168]	; (8013128 <xTaskResumeAll+0x128>)
 801307e:	6013      	str	r3, [r2, #0]
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013084:	4613      	mov	r3, r2
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	4413      	add	r3, r2
 801308a:	009b      	lsls	r3, r3, #2
 801308c:	4a27      	ldr	r2, [pc, #156]	; (801312c <xTaskResumeAll+0x12c>)
 801308e:	441a      	add	r2, r3
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	3304      	adds	r3, #4
 8013094:	4619      	mov	r1, r3
 8013096:	4610      	mov	r0, r2
 8013098:	f7fe fa41 	bl	801151e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130a0:	4b23      	ldr	r3, [pc, #140]	; (8013130 <xTaskResumeAll+0x130>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d302      	bcc.n	80130b0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80130aa:	4b22      	ldr	r3, [pc, #136]	; (8013134 <xTaskResumeAll+0x134>)
 80130ac:	2201      	movs	r2, #1
 80130ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80130b0:	4b1c      	ldr	r3, [pc, #112]	; (8013124 <xTaskResumeAll+0x124>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d1cb      	bne.n	8013050 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d001      	beq.n	80130c2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80130be:	f000 fb65 	bl	801378c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80130c2:	4b1d      	ldr	r3, [pc, #116]	; (8013138 <xTaskResumeAll+0x138>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d010      	beq.n	80130f0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80130ce:	f000 f847 	bl	8013160 <xTaskIncrementTick>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d002      	beq.n	80130de <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80130d8:	4b16      	ldr	r3, [pc, #88]	; (8013134 <xTaskResumeAll+0x134>)
 80130da:	2201      	movs	r2, #1
 80130dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	3b01      	subs	r3, #1
 80130e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d1f1      	bne.n	80130ce <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80130ea:	4b13      	ldr	r3, [pc, #76]	; (8013138 <xTaskResumeAll+0x138>)
 80130ec:	2200      	movs	r2, #0
 80130ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80130f0:	4b10      	ldr	r3, [pc, #64]	; (8013134 <xTaskResumeAll+0x134>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d009      	beq.n	801310c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80130f8:	2301      	movs	r3, #1
 80130fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80130fc:	4b0f      	ldr	r3, [pc, #60]	; (801313c <xTaskResumeAll+0x13c>)
 80130fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013102:	601a      	str	r2, [r3, #0]
 8013104:	f3bf 8f4f 	dsb	sy
 8013108:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801310c:	f7fe fbd2 	bl	80118b4 <vPortExitCritical>

	return xAlreadyYielded;
 8013110:	68bb      	ldr	r3, [r7, #8]
}
 8013112:	4618      	mov	r0, r3
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	20056400 	.word	0x20056400
 8013120:	200563d8 	.word	0x200563d8
 8013124:	20056398 	.word	0x20056398
 8013128:	200563e0 	.word	0x200563e0
 801312c:	20055f08 	.word	0x20055f08
 8013130:	20055f04 	.word	0x20055f04
 8013134:	200563ec 	.word	0x200563ec
 8013138:	200563e8 	.word	0x200563e8
 801313c:	e000ed04 	.word	0xe000ed04

08013140 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013140:	b480      	push	{r7}
 8013142:	b083      	sub	sp, #12
 8013144:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013146:	4b05      	ldr	r3, [pc, #20]	; (801315c <xTaskGetTickCount+0x1c>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801314c:	687b      	ldr	r3, [r7, #4]
}
 801314e:	4618      	mov	r0, r3
 8013150:	370c      	adds	r7, #12
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop
 801315c:	200563dc 	.word	0x200563dc

08013160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b086      	sub	sp, #24
 8013164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013166:	2300      	movs	r3, #0
 8013168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801316a:	4b50      	ldr	r3, [pc, #320]	; (80132ac <xTaskIncrementTick+0x14c>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	f040 808b 	bne.w	801328a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013174:	4b4e      	ldr	r3, [pc, #312]	; (80132b0 <xTaskIncrementTick+0x150>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	3301      	adds	r3, #1
 801317a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801317c:	4a4c      	ldr	r2, [pc, #304]	; (80132b0 <xTaskIncrementTick+0x150>)
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d122      	bne.n	80131ce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8013188:	4b4a      	ldr	r3, [pc, #296]	; (80132b4 <xTaskIncrementTick+0x154>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d00c      	beq.n	80131ac <xTaskIncrementTick+0x4c>
	__asm volatile
 8013192:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013196:	b672      	cpsid	i
 8013198:	f383 8811 	msr	BASEPRI, r3
 801319c:	f3bf 8f6f 	isb	sy
 80131a0:	f3bf 8f4f 	dsb	sy
 80131a4:	b662      	cpsie	i
 80131a6:	603b      	str	r3, [r7, #0]
}
 80131a8:	bf00      	nop
 80131aa:	e7fe      	b.n	80131aa <xTaskIncrementTick+0x4a>
 80131ac:	4b41      	ldr	r3, [pc, #260]	; (80132b4 <xTaskIncrementTick+0x154>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	60fb      	str	r3, [r7, #12]
 80131b2:	4b41      	ldr	r3, [pc, #260]	; (80132b8 <xTaskIncrementTick+0x158>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	4a3f      	ldr	r2, [pc, #252]	; (80132b4 <xTaskIncrementTick+0x154>)
 80131b8:	6013      	str	r3, [r2, #0]
 80131ba:	4a3f      	ldr	r2, [pc, #252]	; (80132b8 <xTaskIncrementTick+0x158>)
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	6013      	str	r3, [r2, #0]
 80131c0:	4b3e      	ldr	r3, [pc, #248]	; (80132bc <xTaskIncrementTick+0x15c>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	3301      	adds	r3, #1
 80131c6:	4a3d      	ldr	r2, [pc, #244]	; (80132bc <xTaskIncrementTick+0x15c>)
 80131c8:	6013      	str	r3, [r2, #0]
 80131ca:	f000 fadf 	bl	801378c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80131ce:	4b3c      	ldr	r3, [pc, #240]	; (80132c0 <xTaskIncrementTick+0x160>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	693a      	ldr	r2, [r7, #16]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d349      	bcc.n	801326c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131d8:	4b36      	ldr	r3, [pc, #216]	; (80132b4 <xTaskIncrementTick+0x154>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d104      	bne.n	80131ec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131e2:	4b37      	ldr	r3, [pc, #220]	; (80132c0 <xTaskIncrementTick+0x160>)
 80131e4:	f04f 32ff 	mov.w	r2, #4294967295
 80131e8:	601a      	str	r2, [r3, #0]
					break;
 80131ea:	e03f      	b.n	801326c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131ec:	4b31      	ldr	r3, [pc, #196]	; (80132b4 <xTaskIncrementTick+0x154>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	685b      	ldr	r3, [r3, #4]
 80131fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80131fc:	693a      	ldr	r2, [r7, #16]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	429a      	cmp	r2, r3
 8013202:	d203      	bcs.n	801320c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013204:	4a2e      	ldr	r2, [pc, #184]	; (80132c0 <xTaskIncrementTick+0x160>)
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801320a:	e02f      	b.n	801326c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	3304      	adds	r3, #4
 8013210:	4618      	mov	r0, r3
 8013212:	f7fe f9e1 	bl	80115d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801321a:	2b00      	cmp	r3, #0
 801321c:	d004      	beq.n	8013228 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	3318      	adds	r3, #24
 8013222:	4618      	mov	r0, r3
 8013224:	f7fe f9d8 	bl	80115d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801322c:	4b25      	ldr	r3, [pc, #148]	; (80132c4 <xTaskIncrementTick+0x164>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	429a      	cmp	r2, r3
 8013232:	d903      	bls.n	801323c <xTaskIncrementTick+0xdc>
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013238:	4a22      	ldr	r2, [pc, #136]	; (80132c4 <xTaskIncrementTick+0x164>)
 801323a:	6013      	str	r3, [r2, #0]
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013240:	4613      	mov	r3, r2
 8013242:	009b      	lsls	r3, r3, #2
 8013244:	4413      	add	r3, r2
 8013246:	009b      	lsls	r3, r3, #2
 8013248:	4a1f      	ldr	r2, [pc, #124]	; (80132c8 <xTaskIncrementTick+0x168>)
 801324a:	441a      	add	r2, r3
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	3304      	adds	r3, #4
 8013250:	4619      	mov	r1, r3
 8013252:	4610      	mov	r0, r2
 8013254:	f7fe f963 	bl	801151e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325c:	4b1b      	ldr	r3, [pc, #108]	; (80132cc <xTaskIncrementTick+0x16c>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013262:	429a      	cmp	r2, r3
 8013264:	d3b8      	bcc.n	80131d8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8013266:	2301      	movs	r3, #1
 8013268:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801326a:	e7b5      	b.n	80131d8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801326c:	4b17      	ldr	r3, [pc, #92]	; (80132cc <xTaskIncrementTick+0x16c>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013272:	4915      	ldr	r1, [pc, #84]	; (80132c8 <xTaskIncrementTick+0x168>)
 8013274:	4613      	mov	r3, r2
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	4413      	add	r3, r2
 801327a:	009b      	lsls	r3, r3, #2
 801327c:	440b      	add	r3, r1
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b01      	cmp	r3, #1
 8013282:	d907      	bls.n	8013294 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8013284:	2301      	movs	r3, #1
 8013286:	617b      	str	r3, [r7, #20]
 8013288:	e004      	b.n	8013294 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801328a:	4b11      	ldr	r3, [pc, #68]	; (80132d0 <xTaskIncrementTick+0x170>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	3301      	adds	r3, #1
 8013290:	4a0f      	ldr	r2, [pc, #60]	; (80132d0 <xTaskIncrementTick+0x170>)
 8013292:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013294:	4b0f      	ldr	r3, [pc, #60]	; (80132d4 <xTaskIncrementTick+0x174>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d001      	beq.n	80132a0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801329c:	2301      	movs	r3, #1
 801329e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80132a0:	697b      	ldr	r3, [r7, #20]
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3718      	adds	r7, #24
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}
 80132aa:	bf00      	nop
 80132ac:	20056400 	.word	0x20056400
 80132b0:	200563dc 	.word	0x200563dc
 80132b4:	20056390 	.word	0x20056390
 80132b8:	20056394 	.word	0x20056394
 80132bc:	200563f0 	.word	0x200563f0
 80132c0:	200563f8 	.word	0x200563f8
 80132c4:	200563e0 	.word	0x200563e0
 80132c8:	20055f08 	.word	0x20055f08
 80132cc:	20055f04 	.word	0x20055f04
 80132d0:	200563e8 	.word	0x200563e8
 80132d4:	200563ec 	.word	0x200563ec

080132d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80132d8:	b480      	push	{r7}
 80132da:	b085      	sub	sp, #20
 80132dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132de:	4b29      	ldr	r3, [pc, #164]	; (8013384 <vTaskSwitchContext+0xac>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d003      	beq.n	80132ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80132e6:	4b28      	ldr	r3, [pc, #160]	; (8013388 <vTaskSwitchContext+0xb0>)
 80132e8:	2201      	movs	r2, #1
 80132ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80132ec:	e043      	b.n	8013376 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80132ee:	4b26      	ldr	r3, [pc, #152]	; (8013388 <vTaskSwitchContext+0xb0>)
 80132f0:	2200      	movs	r2, #0
 80132f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132f4:	4b25      	ldr	r3, [pc, #148]	; (801338c <vTaskSwitchContext+0xb4>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	60fb      	str	r3, [r7, #12]
 80132fa:	e012      	b.n	8013322 <vTaskSwitchContext+0x4a>
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d10c      	bne.n	801331c <vTaskSwitchContext+0x44>
	__asm volatile
 8013302:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013306:	b672      	cpsid	i
 8013308:	f383 8811 	msr	BASEPRI, r3
 801330c:	f3bf 8f6f 	isb	sy
 8013310:	f3bf 8f4f 	dsb	sy
 8013314:	b662      	cpsie	i
 8013316:	607b      	str	r3, [r7, #4]
}
 8013318:	bf00      	nop
 801331a:	e7fe      	b.n	801331a <vTaskSwitchContext+0x42>
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	3b01      	subs	r3, #1
 8013320:	60fb      	str	r3, [r7, #12]
 8013322:	491b      	ldr	r1, [pc, #108]	; (8013390 <vTaskSwitchContext+0xb8>)
 8013324:	68fa      	ldr	r2, [r7, #12]
 8013326:	4613      	mov	r3, r2
 8013328:	009b      	lsls	r3, r3, #2
 801332a:	4413      	add	r3, r2
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	440b      	add	r3, r1
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d0e2      	beq.n	80132fc <vTaskSwitchContext+0x24>
 8013336:	68fa      	ldr	r2, [r7, #12]
 8013338:	4613      	mov	r3, r2
 801333a:	009b      	lsls	r3, r3, #2
 801333c:	4413      	add	r3, r2
 801333e:	009b      	lsls	r3, r3, #2
 8013340:	4a13      	ldr	r2, [pc, #76]	; (8013390 <vTaskSwitchContext+0xb8>)
 8013342:	4413      	add	r3, r2
 8013344:	60bb      	str	r3, [r7, #8]
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	685a      	ldr	r2, [r3, #4]
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	605a      	str	r2, [r3, #4]
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	685a      	ldr	r2, [r3, #4]
 8013354:	68bb      	ldr	r3, [r7, #8]
 8013356:	3308      	adds	r3, #8
 8013358:	429a      	cmp	r2, r3
 801335a:	d104      	bne.n	8013366 <vTaskSwitchContext+0x8e>
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	685b      	ldr	r3, [r3, #4]
 8013360:	685a      	ldr	r2, [r3, #4]
 8013362:	68bb      	ldr	r3, [r7, #8]
 8013364:	605a      	str	r2, [r3, #4]
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	4a09      	ldr	r2, [pc, #36]	; (8013394 <vTaskSwitchContext+0xbc>)
 801336e:	6013      	str	r3, [r2, #0]
 8013370:	4a06      	ldr	r2, [pc, #24]	; (801338c <vTaskSwitchContext+0xb4>)
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	6013      	str	r3, [r2, #0]
}
 8013376:	bf00      	nop
 8013378:	3714      	adds	r7, #20
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	20056400 	.word	0x20056400
 8013388:	200563ec 	.word	0x200563ec
 801338c:	200563e0 	.word	0x200563e0
 8013390:	20055f08 	.word	0x20055f08
 8013394:	20055f04 	.word	0x20055f04

08013398 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b084      	sub	sp, #16
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d10c      	bne.n	80133c2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80133a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133ac:	b672      	cpsid	i
 80133ae:	f383 8811 	msr	BASEPRI, r3
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	f3bf 8f4f 	dsb	sy
 80133ba:	b662      	cpsie	i
 80133bc:	60fb      	str	r3, [r7, #12]
}
 80133be:	bf00      	nop
 80133c0:	e7fe      	b.n	80133c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133c2:	4b07      	ldr	r3, [pc, #28]	; (80133e0 <vTaskPlaceOnEventList+0x48>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	3318      	adds	r3, #24
 80133c8:	4619      	mov	r1, r3
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f7fe f8cb 	bl	8011566 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80133d0:	2101      	movs	r1, #1
 80133d2:	6838      	ldr	r0, [r7, #0]
 80133d4:	f000 fb8c 	bl	8013af0 <prvAddCurrentTaskToDelayedList>
}
 80133d8:	bf00      	nop
 80133da:	3710      	adds	r7, #16
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	20055f04 	.word	0x20055f04

080133e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b086      	sub	sp, #24
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	60b9      	str	r1, [r7, #8]
 80133ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d10c      	bne.n	8013410 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80133f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133fa:	b672      	cpsid	i
 80133fc:	f383 8811 	msr	BASEPRI, r3
 8013400:	f3bf 8f6f 	isb	sy
 8013404:	f3bf 8f4f 	dsb	sy
 8013408:	b662      	cpsie	i
 801340a:	617b      	str	r3, [r7, #20]
}
 801340c:	bf00      	nop
 801340e:	e7fe      	b.n	801340e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013410:	4b0a      	ldr	r3, [pc, #40]	; (801343c <vTaskPlaceOnEventListRestricted+0x58>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	3318      	adds	r3, #24
 8013416:	4619      	mov	r1, r3
 8013418:	68f8      	ldr	r0, [r7, #12]
 801341a:	f7fe f880 	bl	801151e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d002      	beq.n	801342a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8013424:	f04f 33ff 	mov.w	r3, #4294967295
 8013428:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801342a:	6879      	ldr	r1, [r7, #4]
 801342c:	68b8      	ldr	r0, [r7, #8]
 801342e:	f000 fb5f 	bl	8013af0 <prvAddCurrentTaskToDelayedList>
	}
 8013432:	bf00      	nop
 8013434:	3718      	adds	r7, #24
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
 801343a:	bf00      	nop
 801343c:	20055f04 	.word	0x20055f04

08013440 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b086      	sub	sp, #24
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	68db      	ldr	r3, [r3, #12]
 801344e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d10c      	bne.n	8013470 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8013456:	f04f 0330 	mov.w	r3, #48	; 0x30
 801345a:	b672      	cpsid	i
 801345c:	f383 8811 	msr	BASEPRI, r3
 8013460:	f3bf 8f6f 	isb	sy
 8013464:	f3bf 8f4f 	dsb	sy
 8013468:	b662      	cpsie	i
 801346a:	60fb      	str	r3, [r7, #12]
}
 801346c:	bf00      	nop
 801346e:	e7fe      	b.n	801346e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	3318      	adds	r3, #24
 8013474:	4618      	mov	r0, r3
 8013476:	f7fe f8af 	bl	80115d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801347a:	4b1e      	ldr	r3, [pc, #120]	; (80134f4 <xTaskRemoveFromEventList+0xb4>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d11d      	bne.n	80134be <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013482:	693b      	ldr	r3, [r7, #16]
 8013484:	3304      	adds	r3, #4
 8013486:	4618      	mov	r0, r3
 8013488:	f7fe f8a6 	bl	80115d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013490:	4b19      	ldr	r3, [pc, #100]	; (80134f8 <xTaskRemoveFromEventList+0xb8>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	429a      	cmp	r2, r3
 8013496:	d903      	bls.n	80134a0 <xTaskRemoveFromEventList+0x60>
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801349c:	4a16      	ldr	r2, [pc, #88]	; (80134f8 <xTaskRemoveFromEventList+0xb8>)
 801349e:	6013      	str	r3, [r2, #0]
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a4:	4613      	mov	r3, r2
 80134a6:	009b      	lsls	r3, r3, #2
 80134a8:	4413      	add	r3, r2
 80134aa:	009b      	lsls	r3, r3, #2
 80134ac:	4a13      	ldr	r2, [pc, #76]	; (80134fc <xTaskRemoveFromEventList+0xbc>)
 80134ae:	441a      	add	r2, r3
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	3304      	adds	r3, #4
 80134b4:	4619      	mov	r1, r3
 80134b6:	4610      	mov	r0, r2
 80134b8:	f7fe f831 	bl	801151e <vListInsertEnd>
 80134bc:	e005      	b.n	80134ca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80134be:	693b      	ldr	r3, [r7, #16]
 80134c0:	3318      	adds	r3, #24
 80134c2:	4619      	mov	r1, r3
 80134c4:	480e      	ldr	r0, [pc, #56]	; (8013500 <xTaskRemoveFromEventList+0xc0>)
 80134c6:	f7fe f82a 	bl	801151e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134ce:	4b0d      	ldr	r3, [pc, #52]	; (8013504 <xTaskRemoveFromEventList+0xc4>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d905      	bls.n	80134e4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80134d8:	2301      	movs	r3, #1
 80134da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80134dc:	4b0a      	ldr	r3, [pc, #40]	; (8013508 <xTaskRemoveFromEventList+0xc8>)
 80134de:	2201      	movs	r2, #1
 80134e0:	601a      	str	r2, [r3, #0]
 80134e2:	e001      	b.n	80134e8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80134e4:	2300      	movs	r3, #0
 80134e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80134e8:	697b      	ldr	r3, [r7, #20]
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3718      	adds	r7, #24
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
 80134f2:	bf00      	nop
 80134f4:	20056400 	.word	0x20056400
 80134f8:	200563e0 	.word	0x200563e0
 80134fc:	20055f08 	.word	0x20055f08
 8013500:	20056398 	.word	0x20056398
 8013504:	20055f04 	.word	0x20055f04
 8013508:	200563ec 	.word	0x200563ec

0801350c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013514:	4b06      	ldr	r3, [pc, #24]	; (8013530 <vTaskInternalSetTimeOutState+0x24>)
 8013516:	681a      	ldr	r2, [r3, #0]
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801351c:	4b05      	ldr	r3, [pc, #20]	; (8013534 <vTaskInternalSetTimeOutState+0x28>)
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	605a      	str	r2, [r3, #4]
}
 8013524:	bf00      	nop
 8013526:	370c      	adds	r7, #12
 8013528:	46bd      	mov	sp, r7
 801352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352e:	4770      	bx	lr
 8013530:	200563f0 	.word	0x200563f0
 8013534:	200563dc 	.word	0x200563dc

08013538 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b088      	sub	sp, #32
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d10c      	bne.n	8013562 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8013548:	f04f 0330 	mov.w	r3, #48	; 0x30
 801354c:	b672      	cpsid	i
 801354e:	f383 8811 	msr	BASEPRI, r3
 8013552:	f3bf 8f6f 	isb	sy
 8013556:	f3bf 8f4f 	dsb	sy
 801355a:	b662      	cpsie	i
 801355c:	613b      	str	r3, [r7, #16]
}
 801355e:	bf00      	nop
 8013560:	e7fe      	b.n	8013560 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d10c      	bne.n	8013582 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8013568:	f04f 0330 	mov.w	r3, #48	; 0x30
 801356c:	b672      	cpsid	i
 801356e:	f383 8811 	msr	BASEPRI, r3
 8013572:	f3bf 8f6f 	isb	sy
 8013576:	f3bf 8f4f 	dsb	sy
 801357a:	b662      	cpsie	i
 801357c:	60fb      	str	r3, [r7, #12]
}
 801357e:	bf00      	nop
 8013580:	e7fe      	b.n	8013580 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8013582:	f7fe f963 	bl	801184c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013586:	4b1d      	ldr	r3, [pc, #116]	; (80135fc <xTaskCheckForTimeOut+0xc4>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	69ba      	ldr	r2, [r7, #24]
 8013592:	1ad3      	subs	r3, r2, r3
 8013594:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801359e:	d102      	bne.n	80135a6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80135a0:	2300      	movs	r3, #0
 80135a2:	61fb      	str	r3, [r7, #28]
 80135a4:	e023      	b.n	80135ee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	4b15      	ldr	r3, [pc, #84]	; (8013600 <xTaskCheckForTimeOut+0xc8>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d007      	beq.n	80135c2 <xTaskCheckForTimeOut+0x8a>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	69ba      	ldr	r2, [r7, #24]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d302      	bcc.n	80135c2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80135bc:	2301      	movs	r3, #1
 80135be:	61fb      	str	r3, [r7, #28]
 80135c0:	e015      	b.n	80135ee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	697a      	ldr	r2, [r7, #20]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d20b      	bcs.n	80135e4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	1ad2      	subs	r2, r2, r3
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f7ff ff97 	bl	801350c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80135de:	2300      	movs	r3, #0
 80135e0:	61fb      	str	r3, [r7, #28]
 80135e2:	e004      	b.n	80135ee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	2200      	movs	r2, #0
 80135e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80135ea:	2301      	movs	r3, #1
 80135ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80135ee:	f7fe f961 	bl	80118b4 <vPortExitCritical>

	return xReturn;
 80135f2:	69fb      	ldr	r3, [r7, #28]
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3720      	adds	r7, #32
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}
 80135fc:	200563dc 	.word	0x200563dc
 8013600:	200563f0 	.word	0x200563f0

08013604 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013604:	b480      	push	{r7}
 8013606:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013608:	4b03      	ldr	r3, [pc, #12]	; (8013618 <vTaskMissedYield+0x14>)
 801360a:	2201      	movs	r2, #1
 801360c:	601a      	str	r2, [r3, #0]
}
 801360e:	bf00      	nop
 8013610:	46bd      	mov	sp, r7
 8013612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013616:	4770      	bx	lr
 8013618:	200563ec 	.word	0x200563ec

0801361c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013624:	f000 f852 	bl	80136cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013628:	4b06      	ldr	r3, [pc, #24]	; (8013644 <prvIdleTask+0x28>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2b01      	cmp	r3, #1
 801362e:	d9f9      	bls.n	8013624 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013630:	4b05      	ldr	r3, [pc, #20]	; (8013648 <prvIdleTask+0x2c>)
 8013632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013636:	601a      	str	r2, [r3, #0]
 8013638:	f3bf 8f4f 	dsb	sy
 801363c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013640:	e7f0      	b.n	8013624 <prvIdleTask+0x8>
 8013642:	bf00      	nop
 8013644:	20055f08 	.word	0x20055f08
 8013648:	e000ed04 	.word	0xe000ed04

0801364c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b082      	sub	sp, #8
 8013650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013652:	2300      	movs	r3, #0
 8013654:	607b      	str	r3, [r7, #4]
 8013656:	e00c      	b.n	8013672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	4613      	mov	r3, r2
 801365c:	009b      	lsls	r3, r3, #2
 801365e:	4413      	add	r3, r2
 8013660:	009b      	lsls	r3, r3, #2
 8013662:	4a12      	ldr	r2, [pc, #72]	; (80136ac <prvInitialiseTaskLists+0x60>)
 8013664:	4413      	add	r3, r2
 8013666:	4618      	mov	r0, r3
 8013668:	f7fd ff2c 	bl	80114c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	3301      	adds	r3, #1
 8013670:	607b      	str	r3, [r7, #4]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2b37      	cmp	r3, #55	; 0x37
 8013676:	d9ef      	bls.n	8013658 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013678:	480d      	ldr	r0, [pc, #52]	; (80136b0 <prvInitialiseTaskLists+0x64>)
 801367a:	f7fd ff23 	bl	80114c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801367e:	480d      	ldr	r0, [pc, #52]	; (80136b4 <prvInitialiseTaskLists+0x68>)
 8013680:	f7fd ff20 	bl	80114c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013684:	480c      	ldr	r0, [pc, #48]	; (80136b8 <prvInitialiseTaskLists+0x6c>)
 8013686:	f7fd ff1d 	bl	80114c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801368a:	480c      	ldr	r0, [pc, #48]	; (80136bc <prvInitialiseTaskLists+0x70>)
 801368c:	f7fd ff1a 	bl	80114c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013690:	480b      	ldr	r0, [pc, #44]	; (80136c0 <prvInitialiseTaskLists+0x74>)
 8013692:	f7fd ff17 	bl	80114c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013696:	4b0b      	ldr	r3, [pc, #44]	; (80136c4 <prvInitialiseTaskLists+0x78>)
 8013698:	4a05      	ldr	r2, [pc, #20]	; (80136b0 <prvInitialiseTaskLists+0x64>)
 801369a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801369c:	4b0a      	ldr	r3, [pc, #40]	; (80136c8 <prvInitialiseTaskLists+0x7c>)
 801369e:	4a05      	ldr	r2, [pc, #20]	; (80136b4 <prvInitialiseTaskLists+0x68>)
 80136a0:	601a      	str	r2, [r3, #0]
}
 80136a2:	bf00      	nop
 80136a4:	3708      	adds	r7, #8
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	20055f08 	.word	0x20055f08
 80136b0:	20056368 	.word	0x20056368
 80136b4:	2005637c 	.word	0x2005637c
 80136b8:	20056398 	.word	0x20056398
 80136bc:	200563ac 	.word	0x200563ac
 80136c0:	200563c4 	.word	0x200563c4
 80136c4:	20056390 	.word	0x20056390
 80136c8:	20056394 	.word	0x20056394

080136cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136d2:	e019      	b.n	8013708 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80136d4:	f7fe f8ba 	bl	801184c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136d8:	4b10      	ldr	r3, [pc, #64]	; (801371c <prvCheckTasksWaitingTermination+0x50>)
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	3304      	adds	r3, #4
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7fd ff77 	bl	80115d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80136ea:	4b0d      	ldr	r3, [pc, #52]	; (8013720 <prvCheckTasksWaitingTermination+0x54>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	3b01      	subs	r3, #1
 80136f0:	4a0b      	ldr	r2, [pc, #44]	; (8013720 <prvCheckTasksWaitingTermination+0x54>)
 80136f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80136f4:	4b0b      	ldr	r3, [pc, #44]	; (8013724 <prvCheckTasksWaitingTermination+0x58>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	3b01      	subs	r3, #1
 80136fa:	4a0a      	ldr	r2, [pc, #40]	; (8013724 <prvCheckTasksWaitingTermination+0x58>)
 80136fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80136fe:	f7fe f8d9 	bl	80118b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f000 f810 	bl	8013728 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013708:	4b06      	ldr	r3, [pc, #24]	; (8013724 <prvCheckTasksWaitingTermination+0x58>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d1e1      	bne.n	80136d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013710:	bf00      	nop
 8013712:	bf00      	nop
 8013714:	3708      	adds	r7, #8
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	200563ac 	.word	0x200563ac
 8013720:	200563d8 	.word	0x200563d8
 8013724:	200563c0 	.word	0x200563c0

08013728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013736:	2b00      	cmp	r3, #0
 8013738:	d108      	bne.n	801374c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801373e:	4618      	mov	r0, r3
 8013740:	f7fd fda6 	bl	8011290 <vPortFree>
				vPortFree( pxTCB );
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f7fd fda3 	bl	8011290 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801374a:	e01a      	b.n	8013782 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013752:	2b01      	cmp	r3, #1
 8013754:	d103      	bne.n	801375e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f7fd fd9a 	bl	8011290 <vPortFree>
	}
 801375c:	e011      	b.n	8013782 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013764:	2b02      	cmp	r3, #2
 8013766:	d00c      	beq.n	8013782 <prvDeleteTCB+0x5a>
	__asm volatile
 8013768:	f04f 0330 	mov.w	r3, #48	; 0x30
 801376c:	b672      	cpsid	i
 801376e:	f383 8811 	msr	BASEPRI, r3
 8013772:	f3bf 8f6f 	isb	sy
 8013776:	f3bf 8f4f 	dsb	sy
 801377a:	b662      	cpsie	i
 801377c:	60fb      	str	r3, [r7, #12]
}
 801377e:	bf00      	nop
 8013780:	e7fe      	b.n	8013780 <prvDeleteTCB+0x58>
	}
 8013782:	bf00      	nop
 8013784:	3710      	adds	r7, #16
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}
	...

0801378c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801378c:	b480      	push	{r7}
 801378e:	b083      	sub	sp, #12
 8013790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013792:	4b0c      	ldr	r3, [pc, #48]	; (80137c4 <prvResetNextTaskUnblockTime+0x38>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d104      	bne.n	80137a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801379c:	4b0a      	ldr	r3, [pc, #40]	; (80137c8 <prvResetNextTaskUnblockTime+0x3c>)
 801379e:	f04f 32ff 	mov.w	r2, #4294967295
 80137a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80137a4:	e008      	b.n	80137b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137a6:	4b07      	ldr	r3, [pc, #28]	; (80137c4 <prvResetNextTaskUnblockTime+0x38>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	68db      	ldr	r3, [r3, #12]
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	4a04      	ldr	r2, [pc, #16]	; (80137c8 <prvResetNextTaskUnblockTime+0x3c>)
 80137b6:	6013      	str	r3, [r2, #0]
}
 80137b8:	bf00      	nop
 80137ba:	370c      	adds	r7, #12
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr
 80137c4:	20056390 	.word	0x20056390
 80137c8:	200563f8 	.word	0x200563f8

080137cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80137cc:	b480      	push	{r7}
 80137ce:	b083      	sub	sp, #12
 80137d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80137d2:	4b0b      	ldr	r3, [pc, #44]	; (8013800 <xTaskGetSchedulerState+0x34>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d102      	bne.n	80137e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80137da:	2301      	movs	r3, #1
 80137dc:	607b      	str	r3, [r7, #4]
 80137de:	e008      	b.n	80137f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137e0:	4b08      	ldr	r3, [pc, #32]	; (8013804 <xTaskGetSchedulerState+0x38>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d102      	bne.n	80137ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80137e8:	2302      	movs	r3, #2
 80137ea:	607b      	str	r3, [r7, #4]
 80137ec:	e001      	b.n	80137f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80137ee:	2300      	movs	r3, #0
 80137f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80137f2:	687b      	ldr	r3, [r7, #4]
	}
 80137f4:	4618      	mov	r0, r3
 80137f6:	370c      	adds	r7, #12
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr
 8013800:	200563e4 	.word	0x200563e4
 8013804:	20056400 	.word	0x20056400

08013808 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013814:	2300      	movs	r3, #0
 8013816:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d051      	beq.n	80138c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013822:	4b2a      	ldr	r3, [pc, #168]	; (80138cc <xTaskPriorityInherit+0xc4>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013828:	429a      	cmp	r2, r3
 801382a:	d241      	bcs.n	80138b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	699b      	ldr	r3, [r3, #24]
 8013830:	2b00      	cmp	r3, #0
 8013832:	db06      	blt.n	8013842 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013834:	4b25      	ldr	r3, [pc, #148]	; (80138cc <xTaskPriorityInherit+0xc4>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801383a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	6959      	ldr	r1, [r3, #20]
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801384a:	4613      	mov	r3, r2
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	4413      	add	r3, r2
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	4a1f      	ldr	r2, [pc, #124]	; (80138d0 <xTaskPriorityInherit+0xc8>)
 8013854:	4413      	add	r3, r2
 8013856:	4299      	cmp	r1, r3
 8013858:	d122      	bne.n	80138a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	3304      	adds	r3, #4
 801385e:	4618      	mov	r0, r3
 8013860:	f7fd feba 	bl	80115d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013864:	4b19      	ldr	r3, [pc, #100]	; (80138cc <xTaskPriorityInherit+0xc4>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013872:	4b18      	ldr	r3, [pc, #96]	; (80138d4 <xTaskPriorityInherit+0xcc>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	429a      	cmp	r2, r3
 8013878:	d903      	bls.n	8013882 <xTaskPriorityInherit+0x7a>
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801387e:	4a15      	ldr	r2, [pc, #84]	; (80138d4 <xTaskPriorityInherit+0xcc>)
 8013880:	6013      	str	r3, [r2, #0]
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013886:	4613      	mov	r3, r2
 8013888:	009b      	lsls	r3, r3, #2
 801388a:	4413      	add	r3, r2
 801388c:	009b      	lsls	r3, r3, #2
 801388e:	4a10      	ldr	r2, [pc, #64]	; (80138d0 <xTaskPriorityInherit+0xc8>)
 8013890:	441a      	add	r2, r3
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	3304      	adds	r3, #4
 8013896:	4619      	mov	r1, r3
 8013898:	4610      	mov	r0, r2
 801389a:	f7fd fe40 	bl	801151e <vListInsertEnd>
 801389e:	e004      	b.n	80138aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80138a0:	4b0a      	ldr	r3, [pc, #40]	; (80138cc <xTaskPriorityInherit+0xc4>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80138aa:	2301      	movs	r3, #1
 80138ac:	60fb      	str	r3, [r7, #12]
 80138ae:	e008      	b.n	80138c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80138b4:	4b05      	ldr	r3, [pc, #20]	; (80138cc <xTaskPriorityInherit+0xc4>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d201      	bcs.n	80138c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80138be:	2301      	movs	r3, #1
 80138c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80138c2:	68fb      	ldr	r3, [r7, #12]
	}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3710      	adds	r7, #16
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	20055f04 	.word	0x20055f04
 80138d0:	20055f08 	.word	0x20055f08
 80138d4:	200563e0 	.word	0x200563e0

080138d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b086      	sub	sp, #24
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80138e4:	2300      	movs	r3, #0
 80138e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d05a      	beq.n	80139a4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80138ee:	4b30      	ldr	r3, [pc, #192]	; (80139b0 <xTaskPriorityDisinherit+0xd8>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	693a      	ldr	r2, [r7, #16]
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d00c      	beq.n	8013912 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80138f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80138fc:	b672      	cpsid	i
 80138fe:	f383 8811 	msr	BASEPRI, r3
 8013902:	f3bf 8f6f 	isb	sy
 8013906:	f3bf 8f4f 	dsb	sy
 801390a:	b662      	cpsie	i
 801390c:	60fb      	str	r3, [r7, #12]
}
 801390e:	bf00      	nop
 8013910:	e7fe      	b.n	8013910 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013916:	2b00      	cmp	r3, #0
 8013918:	d10c      	bne.n	8013934 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801391a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801391e:	b672      	cpsid	i
 8013920:	f383 8811 	msr	BASEPRI, r3
 8013924:	f3bf 8f6f 	isb	sy
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	b662      	cpsie	i
 801392e:	60bb      	str	r3, [r7, #8]
}
 8013930:	bf00      	nop
 8013932:	e7fe      	b.n	8013932 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013938:	1e5a      	subs	r2, r3, #1
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013946:	429a      	cmp	r2, r3
 8013948:	d02c      	beq.n	80139a4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801394e:	2b00      	cmp	r3, #0
 8013950:	d128      	bne.n	80139a4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	3304      	adds	r3, #4
 8013956:	4618      	mov	r0, r3
 8013958:	f7fd fe3e 	bl	80115d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013968:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013974:	4b0f      	ldr	r3, [pc, #60]	; (80139b4 <xTaskPriorityDisinherit+0xdc>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	429a      	cmp	r2, r3
 801397a:	d903      	bls.n	8013984 <xTaskPriorityDisinherit+0xac>
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013980:	4a0c      	ldr	r2, [pc, #48]	; (80139b4 <xTaskPriorityDisinherit+0xdc>)
 8013982:	6013      	str	r3, [r2, #0]
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013988:	4613      	mov	r3, r2
 801398a:	009b      	lsls	r3, r3, #2
 801398c:	4413      	add	r3, r2
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	4a09      	ldr	r2, [pc, #36]	; (80139b8 <xTaskPriorityDisinherit+0xe0>)
 8013992:	441a      	add	r2, r3
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	3304      	adds	r3, #4
 8013998:	4619      	mov	r1, r3
 801399a:	4610      	mov	r0, r2
 801399c:	f7fd fdbf 	bl	801151e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80139a0:	2301      	movs	r3, #1
 80139a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80139a4:	697b      	ldr	r3, [r7, #20]
	}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3718      	adds	r7, #24
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	20055f04 	.word	0x20055f04
 80139b4:	200563e0 	.word	0x200563e0
 80139b8:	20055f08 	.word	0x20055f08

080139bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b088      	sub	sp, #32
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80139ca:	2301      	movs	r3, #1
 80139cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d06e      	beq.n	8013ab2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80139d4:	69bb      	ldr	r3, [r7, #24]
 80139d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d10c      	bne.n	80139f6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80139dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80139e0:	b672      	cpsid	i
 80139e2:	f383 8811 	msr	BASEPRI, r3
 80139e6:	f3bf 8f6f 	isb	sy
 80139ea:	f3bf 8f4f 	dsb	sy
 80139ee:	b662      	cpsie	i
 80139f0:	60fb      	str	r3, [r7, #12]
}
 80139f2:	bf00      	nop
 80139f4:	e7fe      	b.n	80139f4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139fa:	683a      	ldr	r2, [r7, #0]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d902      	bls.n	8013a06 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	61fb      	str	r3, [r7, #28]
 8013a04:	e002      	b.n	8013a0c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013a06:	69bb      	ldr	r3, [r7, #24]
 8013a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a10:	69fa      	ldr	r2, [r7, #28]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d04d      	beq.n	8013ab2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013a16:	69bb      	ldr	r3, [r7, #24]
 8013a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a1a:	697a      	ldr	r2, [r7, #20]
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d148      	bne.n	8013ab2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013a20:	4b26      	ldr	r3, [pc, #152]	; (8013abc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	69ba      	ldr	r2, [r7, #24]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d10c      	bne.n	8013a44 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8013a2a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013a2e:	b672      	cpsid	i
 8013a30:	f383 8811 	msr	BASEPRI, r3
 8013a34:	f3bf 8f6f 	isb	sy
 8013a38:	f3bf 8f4f 	dsb	sy
 8013a3c:	b662      	cpsie	i
 8013a3e:	60bb      	str	r3, [r7, #8]
}
 8013a40:	bf00      	nop
 8013a42:	e7fe      	b.n	8013a42 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013a44:	69bb      	ldr	r3, [r7, #24]
 8013a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013a4a:	69bb      	ldr	r3, [r7, #24]
 8013a4c:	69fa      	ldr	r2, [r7, #28]
 8013a4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013a50:	69bb      	ldr	r3, [r7, #24]
 8013a52:	699b      	ldr	r3, [r3, #24]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	db04      	blt.n	8013a62 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013a62:	69bb      	ldr	r3, [r7, #24]
 8013a64:	6959      	ldr	r1, [r3, #20]
 8013a66:	693a      	ldr	r2, [r7, #16]
 8013a68:	4613      	mov	r3, r2
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	4413      	add	r3, r2
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	4a13      	ldr	r2, [pc, #76]	; (8013ac0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013a72:	4413      	add	r3, r2
 8013a74:	4299      	cmp	r1, r3
 8013a76:	d11c      	bne.n	8013ab2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	3304      	adds	r3, #4
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fd fdab 	bl	80115d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a86:	4b0f      	ldr	r3, [pc, #60]	; (8013ac4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d903      	bls.n	8013a96 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a92:	4a0c      	ldr	r2, [pc, #48]	; (8013ac4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8013a94:	6013      	str	r3, [r2, #0]
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	4413      	add	r3, r2
 8013aa0:	009b      	lsls	r3, r3, #2
 8013aa2:	4a07      	ldr	r2, [pc, #28]	; (8013ac0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013aa4:	441a      	add	r2, r3
 8013aa6:	69bb      	ldr	r3, [r7, #24]
 8013aa8:	3304      	adds	r3, #4
 8013aaa:	4619      	mov	r1, r3
 8013aac:	4610      	mov	r0, r2
 8013aae:	f7fd fd36 	bl	801151e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ab2:	bf00      	nop
 8013ab4:	3720      	adds	r7, #32
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	20055f04 	.word	0x20055f04
 8013ac0:	20055f08 	.word	0x20055f08
 8013ac4:	200563e0 	.word	0x200563e0

08013ac8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013ac8:	b480      	push	{r7}
 8013aca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013acc:	4b07      	ldr	r3, [pc, #28]	; (8013aec <pvTaskIncrementMutexHeldCount+0x24>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d004      	beq.n	8013ade <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013ad4:	4b05      	ldr	r3, [pc, #20]	; (8013aec <pvTaskIncrementMutexHeldCount+0x24>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ada:	3201      	adds	r2, #1
 8013adc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013ade:	4b03      	ldr	r3, [pc, #12]	; (8013aec <pvTaskIncrementMutexHeldCount+0x24>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
	}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aea:	4770      	bx	lr
 8013aec:	20055f04 	.word	0x20055f04

08013af0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013afa:	4b21      	ldr	r3, [pc, #132]	; (8013b80 <prvAddCurrentTaskToDelayedList+0x90>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b00:	4b20      	ldr	r3, [pc, #128]	; (8013b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	3304      	adds	r3, #4
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fd fd66 	bl	80115d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b12:	d10a      	bne.n	8013b2a <prvAddCurrentTaskToDelayedList+0x3a>
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d007      	beq.n	8013b2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b1a:	4b1a      	ldr	r3, [pc, #104]	; (8013b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	3304      	adds	r3, #4
 8013b20:	4619      	mov	r1, r3
 8013b22:	4819      	ldr	r0, [pc, #100]	; (8013b88 <prvAddCurrentTaskToDelayedList+0x98>)
 8013b24:	f7fd fcfb 	bl	801151e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013b28:	e026      	b.n	8013b78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013b2a:	68fa      	ldr	r2, [r7, #12]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	4413      	add	r3, r2
 8013b30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013b32:	4b14      	ldr	r3, [pc, #80]	; (8013b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	68ba      	ldr	r2, [r7, #8]
 8013b38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013b3a:	68ba      	ldr	r2, [r7, #8]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d209      	bcs.n	8013b56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b42:	4b12      	ldr	r3, [pc, #72]	; (8013b8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	4b0f      	ldr	r3, [pc, #60]	; (8013b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	3304      	adds	r3, #4
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	4610      	mov	r0, r2
 8013b50:	f7fd fd09 	bl	8011566 <vListInsert>
}
 8013b54:	e010      	b.n	8013b78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b56:	4b0e      	ldr	r3, [pc, #56]	; (8013b90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013b58:	681a      	ldr	r2, [r3, #0]
 8013b5a:	4b0a      	ldr	r3, [pc, #40]	; (8013b84 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	3304      	adds	r3, #4
 8013b60:	4619      	mov	r1, r3
 8013b62:	4610      	mov	r0, r2
 8013b64:	f7fd fcff 	bl	8011566 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013b68:	4b0a      	ldr	r3, [pc, #40]	; (8013b94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	68ba      	ldr	r2, [r7, #8]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d202      	bcs.n	8013b78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013b72:	4a08      	ldr	r2, [pc, #32]	; (8013b94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	6013      	str	r3, [r2, #0]
}
 8013b78:	bf00      	nop
 8013b7a:	3710      	adds	r7, #16
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	200563dc 	.word	0x200563dc
 8013b84:	20055f04 	.word	0x20055f04
 8013b88:	200563c4 	.word	0x200563c4
 8013b8c:	20056394 	.word	0x20056394
 8013b90:	20056390 	.word	0x20056390
 8013b94:	200563f8 	.word	0x200563f8

08013b98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b08a      	sub	sp, #40	; 0x28
 8013b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013ba2:	f000 fb15 	bl	80141d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013ba6:	4b1d      	ldr	r3, [pc, #116]	; (8013c1c <xTimerCreateTimerTask+0x84>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d021      	beq.n	8013bf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013bb6:	1d3a      	adds	r2, r7, #4
 8013bb8:	f107 0108 	add.w	r1, r7, #8
 8013bbc:	f107 030c 	add.w	r3, r7, #12
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7fd fa81 	bl	80110c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013bc6:	6879      	ldr	r1, [r7, #4]
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	68fa      	ldr	r2, [r7, #12]
 8013bcc:	9202      	str	r2, [sp, #8]
 8013bce:	9301      	str	r3, [sp, #4]
 8013bd0:	2302      	movs	r3, #2
 8013bd2:	9300      	str	r3, [sp, #0]
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	460a      	mov	r2, r1
 8013bd8:	4911      	ldr	r1, [pc, #68]	; (8013c20 <xTimerCreateTimerTask+0x88>)
 8013bda:	4812      	ldr	r0, [pc, #72]	; (8013c24 <xTimerCreateTimerTask+0x8c>)
 8013bdc:	f7fe ffb8 	bl	8012b50 <xTaskCreateStatic>
 8013be0:	4603      	mov	r3, r0
 8013be2:	4a11      	ldr	r2, [pc, #68]	; (8013c28 <xTimerCreateTimerTask+0x90>)
 8013be4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013be6:	4b10      	ldr	r3, [pc, #64]	; (8013c28 <xTimerCreateTimerTask+0x90>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d001      	beq.n	8013bf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013bee:	2301      	movs	r3, #1
 8013bf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10c      	bne.n	8013c12 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8013bf8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013bfc:	b672      	cpsid	i
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	b662      	cpsie	i
 8013c0c:	613b      	str	r3, [r7, #16]
}
 8013c0e:	bf00      	nop
 8013c10:	e7fe      	b.n	8013c10 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8013c12:	697b      	ldr	r3, [r7, #20]
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3718      	adds	r7, #24
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	20056434 	.word	0x20056434
 8013c20:	080274c4 	.word	0x080274c4
 8013c24:	08013d69 	.word	0x08013d69
 8013c28:	20056438 	.word	0x20056438

08013c2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b08a      	sub	sp, #40	; 0x28
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	60f8      	str	r0, [r7, #12]
 8013c34:	60b9      	str	r1, [r7, #8]
 8013c36:	607a      	str	r2, [r7, #4]
 8013c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d10c      	bne.n	8013c5e <xTimerGenericCommand+0x32>
	__asm volatile
 8013c44:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c48:	b672      	cpsid	i
 8013c4a:	f383 8811 	msr	BASEPRI, r3
 8013c4e:	f3bf 8f6f 	isb	sy
 8013c52:	f3bf 8f4f 	dsb	sy
 8013c56:	b662      	cpsie	i
 8013c58:	623b      	str	r3, [r7, #32]
}
 8013c5a:	bf00      	nop
 8013c5c:	e7fe      	b.n	8013c5c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013c5e:	4b1a      	ldr	r3, [pc, #104]	; (8013cc8 <xTimerGenericCommand+0x9c>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d02a      	beq.n	8013cbc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	2b05      	cmp	r3, #5
 8013c76:	dc18      	bgt.n	8013caa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013c78:	f7ff fda8 	bl	80137cc <xTaskGetSchedulerState>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	2b02      	cmp	r3, #2
 8013c80:	d109      	bne.n	8013c96 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013c82:	4b11      	ldr	r3, [pc, #68]	; (8013cc8 <xTimerGenericCommand+0x9c>)
 8013c84:	6818      	ldr	r0, [r3, #0]
 8013c86:	f107 0110 	add.w	r1, r7, #16
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c8e:	f7fe f8cd 	bl	8011e2c <xQueueGenericSend>
 8013c92:	6278      	str	r0, [r7, #36]	; 0x24
 8013c94:	e012      	b.n	8013cbc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013c96:	4b0c      	ldr	r3, [pc, #48]	; (8013cc8 <xTimerGenericCommand+0x9c>)
 8013c98:	6818      	ldr	r0, [r3, #0]
 8013c9a:	f107 0110 	add.w	r1, r7, #16
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	f7fe f8c3 	bl	8011e2c <xQueueGenericSend>
 8013ca6:	6278      	str	r0, [r7, #36]	; 0x24
 8013ca8:	e008      	b.n	8013cbc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013caa:	4b07      	ldr	r3, [pc, #28]	; (8013cc8 <xTimerGenericCommand+0x9c>)
 8013cac:	6818      	ldr	r0, [r3, #0]
 8013cae:	f107 0110 	add.w	r1, r7, #16
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	683a      	ldr	r2, [r7, #0]
 8013cb6:	f7fe f9bf 	bl	8012038 <xQueueGenericSendFromISR>
 8013cba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3728      	adds	r7, #40	; 0x28
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	20056434 	.word	0x20056434

08013ccc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b088      	sub	sp, #32
 8013cd0:	af02      	add	r7, sp, #8
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cd6:	4b23      	ldr	r3, [pc, #140]	; (8013d64 <prvProcessExpiredTimer+0x98>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	68db      	ldr	r3, [r3, #12]
 8013cdc:	68db      	ldr	r3, [r3, #12]
 8013cde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	3304      	adds	r3, #4
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fd fc77 	bl	80115d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cf0:	f003 0304 	and.w	r3, r3, #4
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d024      	beq.n	8013d42 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	699a      	ldr	r2, [r3, #24]
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	18d1      	adds	r1, r2, r3
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	683a      	ldr	r2, [r7, #0]
 8013d04:	6978      	ldr	r0, [r7, #20]
 8013d06:	f000 f8d3 	bl	8013eb0 <prvInsertTimerInActiveList>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d021      	beq.n	8013d54 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013d10:	2300      	movs	r3, #0
 8013d12:	9300      	str	r3, [sp, #0]
 8013d14:	2300      	movs	r3, #0
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	2100      	movs	r1, #0
 8013d1a:	6978      	ldr	r0, [r7, #20]
 8013d1c:	f7ff ff86 	bl	8013c2c <xTimerGenericCommand>
 8013d20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d115      	bne.n	8013d54 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8013d28:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d2c:	b672      	cpsid	i
 8013d2e:	f383 8811 	msr	BASEPRI, r3
 8013d32:	f3bf 8f6f 	isb	sy
 8013d36:	f3bf 8f4f 	dsb	sy
 8013d3a:	b662      	cpsie	i
 8013d3c:	60fb      	str	r3, [r7, #12]
}
 8013d3e:	bf00      	nop
 8013d40:	e7fe      	b.n	8013d40 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d48:	f023 0301 	bic.w	r3, r3, #1
 8013d4c:	b2da      	uxtb	r2, r3
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	6a1b      	ldr	r3, [r3, #32]
 8013d58:	6978      	ldr	r0, [r7, #20]
 8013d5a:	4798      	blx	r3
}
 8013d5c:	bf00      	nop
 8013d5e:	3718      	adds	r7, #24
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}
 8013d64:	2005642c 	.word	0x2005642c

08013d68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013d70:	f107 0308 	add.w	r3, r7, #8
 8013d74:	4618      	mov	r0, r3
 8013d76:	f000 f857 	bl	8013e28 <prvGetNextExpireTime>
 8013d7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	4619      	mov	r1, r3
 8013d80:	68f8      	ldr	r0, [r7, #12]
 8013d82:	f000 f803 	bl	8013d8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013d86:	f000 f8d5 	bl	8013f34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013d8a:	e7f1      	b.n	8013d70 <prvTimerTask+0x8>

08013d8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b084      	sub	sp, #16
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013d96:	f7ff f925 	bl	8012fe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013d9a:	f107 0308 	add.w	r3, r7, #8
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f000 f866 	bl	8013e70 <prvSampleTimeNow>
 8013da4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d130      	bne.n	8013e0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d10a      	bne.n	8013dc8 <prvProcessTimerOrBlockTask+0x3c>
 8013db2:	687a      	ldr	r2, [r7, #4]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d806      	bhi.n	8013dc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013dba:	f7ff f921 	bl	8013000 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013dbe:	68f9      	ldr	r1, [r7, #12]
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f7ff ff83 	bl	8013ccc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013dc6:	e024      	b.n	8013e12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d008      	beq.n	8013de0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013dce:	4b13      	ldr	r3, [pc, #76]	; (8013e1c <prvProcessTimerOrBlockTask+0x90>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d101      	bne.n	8013ddc <prvProcessTimerOrBlockTask+0x50>
 8013dd8:	2301      	movs	r3, #1
 8013dda:	e000      	b.n	8013dde <prvProcessTimerOrBlockTask+0x52>
 8013ddc:	2300      	movs	r3, #0
 8013dde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013de0:	4b0f      	ldr	r3, [pc, #60]	; (8013e20 <prvProcessTimerOrBlockTask+0x94>)
 8013de2:	6818      	ldr	r0, [r3, #0]
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	683a      	ldr	r2, [r7, #0]
 8013dec:	4619      	mov	r1, r3
 8013dee:	f7fe fe7b 	bl	8012ae8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013df2:	f7ff f905 	bl	8013000 <xTaskResumeAll>
 8013df6:	4603      	mov	r3, r0
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d10a      	bne.n	8013e12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013dfc:	4b09      	ldr	r3, [pc, #36]	; (8013e24 <prvProcessTimerOrBlockTask+0x98>)
 8013dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e02:	601a      	str	r2, [r3, #0]
 8013e04:	f3bf 8f4f 	dsb	sy
 8013e08:	f3bf 8f6f 	isb	sy
}
 8013e0c:	e001      	b.n	8013e12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013e0e:	f7ff f8f7 	bl	8013000 <xTaskResumeAll>
}
 8013e12:	bf00      	nop
 8013e14:	3710      	adds	r7, #16
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	20056430 	.word	0x20056430
 8013e20:	20056434 	.word	0x20056434
 8013e24:	e000ed04 	.word	0xe000ed04

08013e28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b085      	sub	sp, #20
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013e30:	4b0e      	ldr	r3, [pc, #56]	; (8013e6c <prvGetNextExpireTime+0x44>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d101      	bne.n	8013e3e <prvGetNextExpireTime+0x16>
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	e000      	b.n	8013e40 <prvGetNextExpireTime+0x18>
 8013e3e:	2200      	movs	r2, #0
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d105      	bne.n	8013e58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013e4c:	4b07      	ldr	r3, [pc, #28]	; (8013e6c <prvGetNextExpireTime+0x44>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	68db      	ldr	r3, [r3, #12]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	60fb      	str	r3, [r7, #12]
 8013e56:	e001      	b.n	8013e5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3714      	adds	r7, #20
 8013e62:	46bd      	mov	sp, r7
 8013e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e68:	4770      	bx	lr
 8013e6a:	bf00      	nop
 8013e6c:	2005642c 	.word	0x2005642c

08013e70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b084      	sub	sp, #16
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013e78:	f7ff f962 	bl	8013140 <xTaskGetTickCount>
 8013e7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013e7e:	4b0b      	ldr	r3, [pc, #44]	; (8013eac <prvSampleTimeNow+0x3c>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	68fa      	ldr	r2, [r7, #12]
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d205      	bcs.n	8013e94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013e88:	f000 f93c 	bl	8014104 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2201      	movs	r2, #1
 8013e90:	601a      	str	r2, [r3, #0]
 8013e92:	e002      	b.n	8013e9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2200      	movs	r2, #0
 8013e98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013e9a:	4a04      	ldr	r2, [pc, #16]	; (8013eac <prvSampleTimeNow+0x3c>)
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3710      	adds	r7, #16
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
 8013eaa:	bf00      	nop
 8013eac:	2005643c 	.word	0x2005643c

08013eb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b086      	sub	sp, #24
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	60f8      	str	r0, [r7, #12]
 8013eb8:	60b9      	str	r1, [r7, #8]
 8013eba:	607a      	str	r2, [r7, #4]
 8013ebc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	68ba      	ldr	r2, [r7, #8]
 8013ec6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	68fa      	ldr	r2, [r7, #12]
 8013ecc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013ece:	68ba      	ldr	r2, [r7, #8]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d812      	bhi.n	8013efc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	1ad2      	subs	r2, r2, r3
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	699b      	ldr	r3, [r3, #24]
 8013ee0:	429a      	cmp	r2, r3
 8013ee2:	d302      	bcc.n	8013eea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	617b      	str	r3, [r7, #20]
 8013ee8:	e01b      	b.n	8013f22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013eea:	4b10      	ldr	r3, [pc, #64]	; (8013f2c <prvInsertTimerInActiveList+0x7c>)
 8013eec:	681a      	ldr	r2, [r3, #0]
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	4610      	mov	r0, r2
 8013ef6:	f7fd fb36 	bl	8011566 <vListInsert>
 8013efa:	e012      	b.n	8013f22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d206      	bcs.n	8013f12 <prvInsertTimerInActiveList+0x62>
 8013f04:	68ba      	ldr	r2, [r7, #8]
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d302      	bcc.n	8013f12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	617b      	str	r3, [r7, #20]
 8013f10:	e007      	b.n	8013f22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013f12:	4b07      	ldr	r3, [pc, #28]	; (8013f30 <prvInsertTimerInActiveList+0x80>)
 8013f14:	681a      	ldr	r2, [r3, #0]
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	3304      	adds	r3, #4
 8013f1a:	4619      	mov	r1, r3
 8013f1c:	4610      	mov	r0, r2
 8013f1e:	f7fd fb22 	bl	8011566 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013f22:	697b      	ldr	r3, [r7, #20]
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3718      	adds	r7, #24
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}
 8013f2c:	20056430 	.word	0x20056430
 8013f30:	2005642c 	.word	0x2005642c

08013f34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b08e      	sub	sp, #56	; 0x38
 8013f38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013f3a:	e0d0      	b.n	80140de <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	da1a      	bge.n	8013f78 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013f42:	1d3b      	adds	r3, r7, #4
 8013f44:	3304      	adds	r3, #4
 8013f46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d10c      	bne.n	8013f68 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8013f4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f52:	b672      	cpsid	i
 8013f54:	f383 8811 	msr	BASEPRI, r3
 8013f58:	f3bf 8f6f 	isb	sy
 8013f5c:	f3bf 8f4f 	dsb	sy
 8013f60:	b662      	cpsie	i
 8013f62:	61fb      	str	r3, [r7, #28]
}
 8013f64:	bf00      	nop
 8013f66:	e7fe      	b.n	8013f66 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f6e:	6850      	ldr	r0, [r2, #4]
 8013f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f72:	6892      	ldr	r2, [r2, #8]
 8013f74:	4611      	mov	r1, r2
 8013f76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	f2c0 80ae 	blt.w	80140dc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f86:	695b      	ldr	r3, [r3, #20]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d004      	beq.n	8013f96 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8e:	3304      	adds	r3, #4
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7fd fb21 	bl	80115d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013f96:	463b      	mov	r3, r7
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ff ff69 	bl	8013e70 <prvSampleTimeNow>
 8013f9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2b09      	cmp	r3, #9
 8013fa4:	f200 809b 	bhi.w	80140de <prvProcessReceivedCommands+0x1aa>
 8013fa8:	a201      	add	r2, pc, #4	; (adr r2, 8013fb0 <prvProcessReceivedCommands+0x7c>)
 8013faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fae:	bf00      	nop
 8013fb0:	08013fd9 	.word	0x08013fd9
 8013fb4:	08013fd9 	.word	0x08013fd9
 8013fb8:	08013fd9 	.word	0x08013fd9
 8013fbc:	08014051 	.word	0x08014051
 8013fc0:	08014065 	.word	0x08014065
 8013fc4:	080140b3 	.word	0x080140b3
 8013fc8:	08013fd9 	.word	0x08013fd9
 8013fcc:	08013fd9 	.word	0x08013fd9
 8013fd0:	08014051 	.word	0x08014051
 8013fd4:	08014065 	.word	0x08014065
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fde:	f043 0301 	orr.w	r3, r3, #1
 8013fe2:	b2da      	uxtb	r2, r3
 8013fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013fea:	68ba      	ldr	r2, [r7, #8]
 8013fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fee:	699b      	ldr	r3, [r3, #24]
 8013ff0:	18d1      	adds	r1, r2, r3
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ff8:	f7ff ff5a 	bl	8013eb0 <prvInsertTimerInActiveList>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d06d      	beq.n	80140de <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014004:	6a1b      	ldr	r3, [r3, #32]
 8014006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014008:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014010:	f003 0304 	and.w	r3, r3, #4
 8014014:	2b00      	cmp	r3, #0
 8014016:	d062      	beq.n	80140de <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014018:	68ba      	ldr	r2, [r7, #8]
 801401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401c:	699b      	ldr	r3, [r3, #24]
 801401e:	441a      	add	r2, r3
 8014020:	2300      	movs	r3, #0
 8014022:	9300      	str	r3, [sp, #0]
 8014024:	2300      	movs	r3, #0
 8014026:	2100      	movs	r1, #0
 8014028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801402a:	f7ff fdff 	bl	8013c2c <xTimerGenericCommand>
 801402e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014030:	6a3b      	ldr	r3, [r7, #32]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d153      	bne.n	80140de <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8014036:	f04f 0330 	mov.w	r3, #48	; 0x30
 801403a:	b672      	cpsid	i
 801403c:	f383 8811 	msr	BASEPRI, r3
 8014040:	f3bf 8f6f 	isb	sy
 8014044:	f3bf 8f4f 	dsb	sy
 8014048:	b662      	cpsie	i
 801404a:	61bb      	str	r3, [r7, #24]
}
 801404c:	bf00      	nop
 801404e:	e7fe      	b.n	801404e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014056:	f023 0301 	bic.w	r3, r3, #1
 801405a:	b2da      	uxtb	r2, r3
 801405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801405e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014062:	e03c      	b.n	80140de <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801406a:	f043 0301 	orr.w	r3, r3, #1
 801406e:	b2da      	uxtb	r2, r3
 8014070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014076:	68ba      	ldr	r2, [r7, #8]
 8014078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407e:	699b      	ldr	r3, [r3, #24]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d10c      	bne.n	801409e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8014084:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014088:	b672      	cpsid	i
 801408a:	f383 8811 	msr	BASEPRI, r3
 801408e:	f3bf 8f6f 	isb	sy
 8014092:	f3bf 8f4f 	dsb	sy
 8014096:	b662      	cpsie	i
 8014098:	617b      	str	r3, [r7, #20]
}
 801409a:	bf00      	nop
 801409c:	e7fe      	b.n	801409c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a0:	699a      	ldr	r2, [r3, #24]
 80140a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a4:	18d1      	adds	r1, r2, r3
 80140a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140ac:	f7ff ff00 	bl	8013eb0 <prvInsertTimerInActiveList>
					break;
 80140b0:	e015      	b.n	80140de <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80140b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140b8:	f003 0302 	and.w	r3, r3, #2
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d103      	bne.n	80140c8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80140c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140c2:	f7fd f8e5 	bl	8011290 <vPortFree>
 80140c6:	e00a      	b.n	80140de <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80140c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140ce:	f023 0301 	bic.w	r3, r3, #1
 80140d2:	b2da      	uxtb	r2, r3
 80140d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80140da:	e000      	b.n	80140de <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80140dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80140de:	4b08      	ldr	r3, [pc, #32]	; (8014100 <prvProcessReceivedCommands+0x1cc>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	1d39      	adds	r1, r7, #4
 80140e4:	2200      	movs	r2, #0
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fe f8dc 	bl	80122a4 <xQueueReceive>
 80140ec:	4603      	mov	r3, r0
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	f47f af24 	bne.w	8013f3c <prvProcessReceivedCommands+0x8>
	}
}
 80140f4:	bf00      	nop
 80140f6:	bf00      	nop
 80140f8:	3730      	adds	r7, #48	; 0x30
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	20056434 	.word	0x20056434

08014104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b088      	sub	sp, #32
 8014108:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801410a:	e04a      	b.n	80141a2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801410c:	4b2e      	ldr	r3, [pc, #184]	; (80141c8 <prvSwitchTimerLists+0xc4>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014116:	4b2c      	ldr	r3, [pc, #176]	; (80141c8 <prvSwitchTimerLists+0xc4>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	68db      	ldr	r3, [r3, #12]
 801411c:	68db      	ldr	r3, [r3, #12]
 801411e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	3304      	adds	r3, #4
 8014124:	4618      	mov	r0, r3
 8014126:	f7fd fa57 	bl	80115d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	6a1b      	ldr	r3, [r3, #32]
 801412e:	68f8      	ldr	r0, [r7, #12]
 8014130:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014138:	f003 0304 	and.w	r3, r3, #4
 801413c:	2b00      	cmp	r3, #0
 801413e:	d030      	beq.n	80141a2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	699b      	ldr	r3, [r3, #24]
 8014144:	693a      	ldr	r2, [r7, #16]
 8014146:	4413      	add	r3, r2
 8014148:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801414a:	68ba      	ldr	r2, [r7, #8]
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	429a      	cmp	r2, r3
 8014150:	d90e      	bls.n	8014170 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	68ba      	ldr	r2, [r7, #8]
 8014156:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	68fa      	ldr	r2, [r7, #12]
 801415c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801415e:	4b1a      	ldr	r3, [pc, #104]	; (80141c8 <prvSwitchTimerLists+0xc4>)
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	3304      	adds	r3, #4
 8014166:	4619      	mov	r1, r3
 8014168:	4610      	mov	r0, r2
 801416a:	f7fd f9fc 	bl	8011566 <vListInsert>
 801416e:	e018      	b.n	80141a2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014170:	2300      	movs	r3, #0
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	2300      	movs	r3, #0
 8014176:	693a      	ldr	r2, [r7, #16]
 8014178:	2100      	movs	r1, #0
 801417a:	68f8      	ldr	r0, [r7, #12]
 801417c:	f7ff fd56 	bl	8013c2c <xTimerGenericCommand>
 8014180:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d10c      	bne.n	80141a2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8014188:	f04f 0330 	mov.w	r3, #48	; 0x30
 801418c:	b672      	cpsid	i
 801418e:	f383 8811 	msr	BASEPRI, r3
 8014192:	f3bf 8f6f 	isb	sy
 8014196:	f3bf 8f4f 	dsb	sy
 801419a:	b662      	cpsie	i
 801419c:	603b      	str	r3, [r7, #0]
}
 801419e:	bf00      	nop
 80141a0:	e7fe      	b.n	80141a0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80141a2:	4b09      	ldr	r3, [pc, #36]	; (80141c8 <prvSwitchTimerLists+0xc4>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d1af      	bne.n	801410c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80141ac:	4b06      	ldr	r3, [pc, #24]	; (80141c8 <prvSwitchTimerLists+0xc4>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80141b2:	4b06      	ldr	r3, [pc, #24]	; (80141cc <prvSwitchTimerLists+0xc8>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	4a04      	ldr	r2, [pc, #16]	; (80141c8 <prvSwitchTimerLists+0xc4>)
 80141b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80141ba:	4a04      	ldr	r2, [pc, #16]	; (80141cc <prvSwitchTimerLists+0xc8>)
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	6013      	str	r3, [r2, #0]
}
 80141c0:	bf00      	nop
 80141c2:	3718      	adds	r7, #24
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}
 80141c8:	2005642c 	.word	0x2005642c
 80141cc:	20056430 	.word	0x20056430

080141d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80141d6:	f7fd fb39 	bl	801184c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80141da:	4b15      	ldr	r3, [pc, #84]	; (8014230 <prvCheckForValidListAndQueue+0x60>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d120      	bne.n	8014224 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80141e2:	4814      	ldr	r0, [pc, #80]	; (8014234 <prvCheckForValidListAndQueue+0x64>)
 80141e4:	f7fd f96e 	bl	80114c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80141e8:	4813      	ldr	r0, [pc, #76]	; (8014238 <prvCheckForValidListAndQueue+0x68>)
 80141ea:	f7fd f96b 	bl	80114c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80141ee:	4b13      	ldr	r3, [pc, #76]	; (801423c <prvCheckForValidListAndQueue+0x6c>)
 80141f0:	4a10      	ldr	r2, [pc, #64]	; (8014234 <prvCheckForValidListAndQueue+0x64>)
 80141f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80141f4:	4b12      	ldr	r3, [pc, #72]	; (8014240 <prvCheckForValidListAndQueue+0x70>)
 80141f6:	4a10      	ldr	r2, [pc, #64]	; (8014238 <prvCheckForValidListAndQueue+0x68>)
 80141f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80141fa:	2300      	movs	r3, #0
 80141fc:	9300      	str	r3, [sp, #0]
 80141fe:	4b11      	ldr	r3, [pc, #68]	; (8014244 <prvCheckForValidListAndQueue+0x74>)
 8014200:	4a11      	ldr	r2, [pc, #68]	; (8014248 <prvCheckForValidListAndQueue+0x78>)
 8014202:	2110      	movs	r1, #16
 8014204:	200a      	movs	r0, #10
 8014206:	f7fd fcb7 	bl	8011b78 <xQueueGenericCreateStatic>
 801420a:	4603      	mov	r3, r0
 801420c:	4a08      	ldr	r2, [pc, #32]	; (8014230 <prvCheckForValidListAndQueue+0x60>)
 801420e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014210:	4b07      	ldr	r3, [pc, #28]	; (8014230 <prvCheckForValidListAndQueue+0x60>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d005      	beq.n	8014224 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014218:	4b05      	ldr	r3, [pc, #20]	; (8014230 <prvCheckForValidListAndQueue+0x60>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	490b      	ldr	r1, [pc, #44]	; (801424c <prvCheckForValidListAndQueue+0x7c>)
 801421e:	4618      	mov	r0, r3
 8014220:	f7fe fc0e 	bl	8012a40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014224:	f7fd fb46 	bl	80118b4 <vPortExitCritical>
}
 8014228:	bf00      	nop
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}
 801422e:	bf00      	nop
 8014230:	20056434 	.word	0x20056434
 8014234:	20056404 	.word	0x20056404
 8014238:	20056418 	.word	0x20056418
 801423c:	2005642c 	.word	0x2005642c
 8014240:	20056430 	.word	0x20056430
 8014244:	200564e0 	.word	0x200564e0
 8014248:	20056440 	.word	0x20056440
 801424c:	080274cc 	.word	0x080274cc

08014250 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014250:	8880      	ldrh	r0, [r0, #4]
 8014252:	4770      	bx	lr

08014254 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014254:	2300      	movs	r3, #0
 8014256:	8083      	strh	r3, [r0, #4]
 8014258:	4770      	bx	lr
	...

0801425c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801425e:	6803      	ldr	r3, [r0, #0]
 8014260:	460e      	mov	r6, r1
 8014262:	2100      	movs	r1, #0
 8014264:	4605      	mov	r5, r0
 8014266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014268:	4798      	blx	r3
 801426a:	4604      	mov	r4, r0
 801426c:	682b      	ldr	r3, [r5, #0]
 801426e:	4628      	mov	r0, r5
 8014270:	1b34      	subs	r4, r6, r4
 8014272:	6a1b      	ldr	r3, [r3, #32]
 8014274:	b2a4      	uxth	r4, r4
 8014276:	4798      	blx	r3
 8014278:	88ab      	ldrh	r3, [r5, #4]
 801427a:	fbb4 f4f0 	udiv	r4, r4, r0
 801427e:	42a3      	cmp	r3, r4
 8014280:	d805      	bhi.n	801428e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8014282:	4b0e      	ldr	r3, [pc, #56]	; (80142bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014284:	211e      	movs	r1, #30
 8014286:	4a0e      	ldr	r2, [pc, #56]	; (80142c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014288:	480e      	ldr	r0, [pc, #56]	; (80142c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801428a:	f011 f8e3 	bl	8025454 <__assert_func>
 801428e:	682b      	ldr	r3, [r5, #0]
 8014290:	2100      	movs	r1, #0
 8014292:	4628      	mov	r0, r5
 8014294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014296:	4798      	blx	r3
 8014298:	682b      	ldr	r3, [r5, #0]
 801429a:	4607      	mov	r7, r0
 801429c:	4628      	mov	r0, r5
 801429e:	6a1b      	ldr	r3, [r3, #32]
 80142a0:	4798      	blx	r3
 80142a2:	1bf3      	subs	r3, r6, r7
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	fbb3 f2f0 	udiv	r2, r3, r0
 80142aa:	fb02 3010 	mls	r0, r2, r0, r3
 80142ae:	b118      	cbz	r0, 80142b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80142b0:	4b05      	ldr	r3, [pc, #20]	; (80142c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80142b2:	211f      	movs	r1, #31
 80142b4:	4a02      	ldr	r2, [pc, #8]	; (80142c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80142b6:	e7e7      	b.n	8014288 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80142b8:	4620      	mov	r0, r4
 80142ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142bc:	08027ef0 	.word	0x08027ef0
 80142c0:	0802805e 	.word	0x0802805e
 80142c4:	08027f05 	.word	0x08027f05
 80142c8:	08027f33 	.word	0x08027f33

080142cc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80142cc:	b538      	push	{r3, r4, r5, lr}
 80142ce:	6803      	ldr	r3, [r0, #0]
 80142d0:	460d      	mov	r5, r1
 80142d2:	4604      	mov	r4, r0
 80142d4:	6a1b      	ldr	r3, [r3, #32]
 80142d6:	4798      	blx	r3
 80142d8:	4285      	cmp	r5, r0
 80142da:	d905      	bls.n	80142e8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80142dc:	4b0c      	ldr	r3, [pc, #48]	; (8014310 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80142de:	2130      	movs	r1, #48	; 0x30
 80142e0:	4a0c      	ldr	r2, [pc, #48]	; (8014314 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80142e2:	480d      	ldr	r0, [pc, #52]	; (8014318 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80142e4:	f011 f8b6 	bl	8025454 <__assert_func>
 80142e8:	6823      	ldr	r3, [r4, #0]
 80142ea:	4620      	mov	r0, r4
 80142ec:	88a5      	ldrh	r5, [r4, #4]
 80142ee:	69db      	ldr	r3, [r3, #28]
 80142f0:	4798      	blx	r3
 80142f2:	4285      	cmp	r5, r0
 80142f4:	d303      	bcc.n	80142fe <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80142f6:	4b09      	ldr	r3, [pc, #36]	; (801431c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80142f8:	2131      	movs	r1, #49	; 0x31
 80142fa:	4a06      	ldr	r2, [pc, #24]	; (8014314 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80142fc:	e7f1      	b.n	80142e2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80142fe:	6823      	ldr	r3, [r4, #0]
 8014300:	4620      	mov	r0, r4
 8014302:	88a1      	ldrh	r1, [r4, #4]
 8014304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014306:	4798      	blx	r3
 8014308:	88a3      	ldrh	r3, [r4, #4]
 801430a:	3301      	adds	r3, #1
 801430c:	80a3      	strh	r3, [r4, #4]
 801430e:	bd38      	pop	{r3, r4, r5, pc}
 8014310:	08027fad 	.word	0x08027fad
 8014314:	080280a1 	.word	0x080280a1
 8014318:	08027f05 	.word	0x08027f05
 801431c:	08027fc4 	.word	0x08027fc4

08014320 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014320:	b570      	push	{r4, r5, r6, lr}
 8014322:	6803      	ldr	r3, [r0, #0]
 8014324:	4616      	mov	r6, r2
 8014326:	4604      	mov	r4, r0
 8014328:	460d      	mov	r5, r1
 801432a:	6a1b      	ldr	r3, [r3, #32]
 801432c:	4798      	blx	r3
 801432e:	4286      	cmp	r6, r0
 8014330:	d905      	bls.n	801433e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8014332:	4b06      	ldr	r3, [pc, #24]	; (801434c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014334:	213a      	movs	r1, #58	; 0x3a
 8014336:	4a06      	ldr	r2, [pc, #24]	; (8014350 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014338:	4806      	ldr	r0, [pc, #24]	; (8014354 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801433a:	f011 f88b 	bl	8025454 <__assert_func>
 801433e:	6823      	ldr	r3, [r4, #0]
 8014340:	4629      	mov	r1, r5
 8014342:	4620      	mov	r0, r4
 8014344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801434a:	4718      	bx	r3
 801434c:	08027fad 	.word	0x08027fad
 8014350:	08028014 	.word	0x08028014
 8014354:	08027f05 	.word	0x08027f05

08014358 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014358:	4770      	bx	lr
	...

0801435c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801435c:	4a02      	ldr	r2, [pc, #8]	; (8014368 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801435e:	6002      	str	r2, [r0, #0]
 8014360:	2200      	movs	r2, #0
 8014362:	8082      	strh	r2, [r0, #4]
 8014364:	4770      	bx	lr
 8014366:	bf00      	nop
 8014368:	08027fe8 	.word	0x08027fe8

0801436c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801436c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801436e:	2000      	movs	r0, #0
 8014370:	b12b      	cbz	r3, 801437e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014372:	b920      	cbnz	r0, 801437e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014374:	1a5a      	subs	r2, r3, r1
 8014376:	699b      	ldr	r3, [r3, #24]
 8014378:	4250      	negs	r0, r2
 801437a:	4150      	adcs	r0, r2
 801437c:	e7f8      	b.n	8014370 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801437e:	4770      	bx	lr

08014380 <_ZN8touchgfx9Container9removeAllEv>:
 8014380:	2200      	movs	r2, #0
 8014382:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014384:	b123      	cbz	r3, 8014390 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014386:	6999      	ldr	r1, [r3, #24]
 8014388:	6281      	str	r1, [r0, #40]	; 0x28
 801438a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801438e:	e7f8      	b.n	8014382 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014390:	4770      	bx	lr

08014392 <_ZN8touchgfx9Container6unlinkEv>:
 8014392:	2300      	movs	r3, #0
 8014394:	6283      	str	r3, [r0, #40]	; 0x28
 8014396:	4770      	bx	lr

08014398 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801439c:	461f      	mov	r7, r3
 801439e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80143a2:	460d      	mov	r5, r1
 80143a4:	4616      	mov	r6, r2
 80143a6:	b103      	cbz	r3, 80143aa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80143a8:	6038      	str	r0, [r7, #0]
 80143aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80143ac:	b314      	cbz	r4, 80143f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80143ae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80143b2:	b1eb      	cbz	r3, 80143f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80143b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80143b8:	428d      	cmp	r5, r1
 80143ba:	db19      	blt.n	80143f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80143bc:	b289      	uxth	r1, r1
 80143be:	8923      	ldrh	r3, [r4, #8]
 80143c0:	440b      	add	r3, r1
 80143c2:	b21b      	sxth	r3, r3
 80143c4:	429d      	cmp	r5, r3
 80143c6:	da13      	bge.n	80143f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80143c8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80143cc:	4296      	cmp	r6, r2
 80143ce:	db0f      	blt.n	80143f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80143d0:	b292      	uxth	r2, r2
 80143d2:	8963      	ldrh	r3, [r4, #10]
 80143d4:	4413      	add	r3, r2
 80143d6:	b21b      	sxth	r3, r3
 80143d8:	429e      	cmp	r6, r3
 80143da:	da09      	bge.n	80143f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80143dc:	6823      	ldr	r3, [r4, #0]
 80143de:	1ab2      	subs	r2, r6, r2
 80143e0:	1a69      	subs	r1, r5, r1
 80143e2:	4620      	mov	r0, r4
 80143e4:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80143e8:	b212      	sxth	r2, r2
 80143ea:	463b      	mov	r3, r7
 80143ec:	b209      	sxth	r1, r1
 80143ee:	47c0      	blx	r8
 80143f0:	69a4      	ldr	r4, [r4, #24]
 80143f2:	e7db      	b.n	80143ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80143f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143f8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80143f8:	2200      	movs	r2, #0
 80143fa:	8002      	strh	r2, [r0, #0]
 80143fc:	8042      	strh	r2, [r0, #2]
 80143fe:	8082      	strh	r2, [r0, #4]
 8014400:	80c2      	strh	r2, [r0, #6]
 8014402:	4770      	bx	lr

08014404 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014404:	b570      	push	{r4, r5, r6, lr}
 8014406:	460d      	mov	r5, r1
 8014408:	4616      	mov	r6, r2
 801440a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801440c:	b13c      	cbz	r4, 801441e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801440e:	6823      	ldr	r3, [r4, #0]
 8014410:	4620      	mov	r0, r4
 8014412:	4632      	mov	r2, r6
 8014414:	4629      	mov	r1, r5
 8014416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014418:	4798      	blx	r3
 801441a:	69a4      	ldr	r4, [r4, #24]
 801441c:	e7f6      	b.n	801440c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801441e:	bd70      	pop	{r4, r5, r6, pc}

08014420 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014420:	b538      	push	{r3, r4, r5, lr}
 8014422:	460d      	mov	r5, r1
 8014424:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014426:	b134      	cbz	r4, 8014436 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014428:	682b      	ldr	r3, [r5, #0]
 801442a:	4621      	mov	r1, r4
 801442c:	4628      	mov	r0, r5
 801442e:	689b      	ldr	r3, [r3, #8]
 8014430:	4798      	blx	r3
 8014432:	69a4      	ldr	r4, [r4, #24]
 8014434:	e7f7      	b.n	8014426 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014436:	bd38      	pop	{r3, r4, r5, pc}

08014438 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014438:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801443a:	b19b      	cbz	r3, 8014464 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801443c:	428b      	cmp	r3, r1
 801443e:	d109      	bne.n	8014454 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014440:	699a      	ldr	r2, [r3, #24]
 8014442:	2100      	movs	r1, #0
 8014444:	6159      	str	r1, [r3, #20]
 8014446:	6282      	str	r2, [r0, #40]	; 0x28
 8014448:	b902      	cbnz	r2, 801444c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801444a:	4770      	bx	lr
 801444c:	6199      	str	r1, [r3, #24]
 801444e:	4770      	bx	lr
 8014450:	4613      	mov	r3, r2
 8014452:	b13a      	cbz	r2, 8014464 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014454:	699a      	ldr	r2, [r3, #24]
 8014456:	428a      	cmp	r2, r1
 8014458:	d1fa      	bne.n	8014450 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801445a:	698a      	ldr	r2, [r1, #24]
 801445c:	619a      	str	r2, [r3, #24]
 801445e:	2300      	movs	r3, #0
 8014460:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014464:	4770      	bx	lr

08014466 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014466:	b410      	push	{r4}
 8014468:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801446a:	4604      	mov	r4, r0
 801446c:	b92b      	cbnz	r3, 801447a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801446e:	6803      	ldr	r3, [r0, #0]
 8014470:	4611      	mov	r1, r2
 8014472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014478:	4718      	bx	r3
 801447a:	b941      	cbnz	r1, 801448e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801447c:	6193      	str	r3, [r2, #24]
 801447e:	6282      	str	r2, [r0, #40]	; 0x28
 8014480:	6154      	str	r4, [r2, #20]
 8014482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014486:	4770      	bx	lr
 8014488:	4603      	mov	r3, r0
 801448a:	2800      	cmp	r0, #0
 801448c:	d0f9      	beq.n	8014482 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801448e:	4299      	cmp	r1, r3
 8014490:	6998      	ldr	r0, [r3, #24]
 8014492:	d1f9      	bne.n	8014488 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014494:	6190      	str	r0, [r2, #24]
 8014496:	618a      	str	r2, [r1, #24]
 8014498:	e7f2      	b.n	8014480 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801449c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801449c:	4288      	cmp	r0, r1
 801449e:	b508      	push	{r3, lr}
 80144a0:	d105      	bne.n	80144ae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80144a2:	4b11      	ldr	r3, [pc, #68]	; (80144e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80144a4:	2121      	movs	r1, #33	; 0x21
 80144a6:	4a11      	ldr	r2, [pc, #68]	; (80144ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80144a8:	4811      	ldr	r0, [pc, #68]	; (80144f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80144aa:	f010 ffd3 	bl	8025454 <__assert_func>
 80144ae:	694b      	ldr	r3, [r1, #20]
 80144b0:	b11b      	cbz	r3, 80144ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80144b2:	4b10      	ldr	r3, [pc, #64]	; (80144f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80144b4:	2122      	movs	r1, #34	; 0x22
 80144b6:	4a0d      	ldr	r2, [pc, #52]	; (80144ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80144b8:	e7f6      	b.n	80144a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80144ba:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80144be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80144c0:	b913      	cbnz	r3, 80144c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80144c2:	6281      	str	r1, [r0, #40]	; 0x28
 80144c4:	bd08      	pop	{r3, pc}
 80144c6:	4613      	mov	r3, r2
 80144c8:	699a      	ldr	r2, [r3, #24]
 80144ca:	b12a      	cbz	r2, 80144d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80144cc:	428b      	cmp	r3, r1
 80144ce:	d1fa      	bne.n	80144c6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80144d0:	4b09      	ldr	r3, [pc, #36]	; (80144f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80144d2:	2133      	movs	r1, #51	; 0x33
 80144d4:	4a05      	ldr	r2, [pc, #20]	; (80144ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80144d6:	e7e7      	b.n	80144a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80144d8:	428b      	cmp	r3, r1
 80144da:	d103      	bne.n	80144e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80144dc:	4b06      	ldr	r3, [pc, #24]	; (80144f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80144de:	2136      	movs	r1, #54	; 0x36
 80144e0:	4a02      	ldr	r2, [pc, #8]	; (80144ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80144e2:	e7e1      	b.n	80144a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80144e4:	6199      	str	r1, [r3, #24]
 80144e6:	e7ed      	b.n	80144c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80144e8:	080280df 	.word	0x080280df
 80144ec:	08028230 	.word	0x08028230
 80144f0:	0802810b 	.word	0x0802810b
 80144f4:	0802813e 	.word	0x0802813e
 80144f8:	08028174 	.word	0x08028174

080144fc <_ZN8touchgfx4RectaNERKS0_>:
 80144fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014500:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014504:	888c      	ldrh	r4, [r1, #4]
 8014506:	f9b0 9000 	ldrsh.w	r9, [r0]
 801450a:	443c      	add	r4, r7
 801450c:	b2a4      	uxth	r4, r4
 801450e:	fa0f f884 	sxth.w	r8, r4
 8014512:	45c1      	cmp	r9, r8
 8014514:	da2f      	bge.n	8014576 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014516:	8882      	ldrh	r2, [r0, #4]
 8014518:	444a      	add	r2, r9
 801451a:	b292      	uxth	r2, r2
 801451c:	fa0f fe82 	sxth.w	lr, r2
 8014520:	4577      	cmp	r7, lr
 8014522:	da28      	bge.n	8014576 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014524:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014528:	88cb      	ldrh	r3, [r1, #6]
 801452a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801452e:	442b      	add	r3, r5
 8014530:	b21b      	sxth	r3, r3
 8014532:	429e      	cmp	r6, r3
 8014534:	da1f      	bge.n	8014576 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014536:	88c3      	ldrh	r3, [r0, #6]
 8014538:	4433      	add	r3, r6
 801453a:	b29b      	uxth	r3, r3
 801453c:	fa0f fc83 	sxth.w	ip, r3
 8014540:	4565      	cmp	r5, ip
 8014542:	da18      	bge.n	8014576 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014544:	454f      	cmp	r7, r9
 8014546:	bfb8      	it	lt
 8014548:	464f      	movlt	r7, r9
 801454a:	42b5      	cmp	r5, r6
 801454c:	bfb8      	it	lt
 801454e:	4635      	movlt	r5, r6
 8014550:	45f0      	cmp	r8, lr
 8014552:	bfd8      	it	le
 8014554:	4622      	movle	r2, r4
 8014556:	1bd2      	subs	r2, r2, r7
 8014558:	8082      	strh	r2, [r0, #4]
 801455a:	884a      	ldrh	r2, [r1, #2]
 801455c:	88c9      	ldrh	r1, [r1, #6]
 801455e:	8007      	strh	r7, [r0, #0]
 8014560:	440a      	add	r2, r1
 8014562:	8045      	strh	r5, [r0, #2]
 8014564:	b292      	uxth	r2, r2
 8014566:	b211      	sxth	r1, r2
 8014568:	458c      	cmp	ip, r1
 801456a:	bfa8      	it	ge
 801456c:	4613      	movge	r3, r2
 801456e:	1b5b      	subs	r3, r3, r5
 8014570:	80c3      	strh	r3, [r0, #6]
 8014572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014576:	2300      	movs	r3, #0
 8014578:	8003      	strh	r3, [r0, #0]
 801457a:	8043      	strh	r3, [r0, #2]
 801457c:	8083      	strh	r3, [r0, #4]
 801457e:	80c3      	strh	r3, [r0, #6]
 8014580:	e7f7      	b.n	8014572 <_ZN8touchgfx4RectaNERKS0_+0x76>

08014582 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014582:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	dd06      	ble.n	8014598 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801458a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801458e:	2800      	cmp	r0, #0
 8014590:	bfcc      	ite	gt
 8014592:	2000      	movgt	r0, #0
 8014594:	2001      	movle	r0, #1
 8014596:	4770      	bx	lr
 8014598:	2001      	movs	r0, #1
 801459a:	4770      	bx	lr

0801459c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801459c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145a0:	2300      	movs	r3, #0
 80145a2:	4604      	mov	r4, r0
 80145a4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80145a6:	8003      	strh	r3, [r0, #0]
 80145a8:	8043      	strh	r3, [r0, #2]
 80145aa:	8083      	strh	r3, [r0, #4]
 80145ac:	80c3      	strh	r3, [r0, #6]
 80145ae:	2d00      	cmp	r5, #0
 80145b0:	d040      	beq.n	8014634 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80145b2:	1d28      	adds	r0, r5, #4
 80145b4:	f7ff ffe5 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 80145b8:	b988      	cbnz	r0, 80145de <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80145ba:	4620      	mov	r0, r4
 80145bc:	f7ff ffe1 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 80145c0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80145c4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80145c8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80145cc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80145d0:	b138      	cbz	r0, 80145e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80145d2:	8022      	strh	r2, [r4, #0]
 80145d4:	8063      	strh	r3, [r4, #2]
 80145d6:	f8a4 e004 	strh.w	lr, [r4, #4]
 80145da:	f8a4 c006 	strh.w	ip, [r4, #6]
 80145de:	69ad      	ldr	r5, [r5, #24]
 80145e0:	e7e5      	b.n	80145ae <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80145e2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80145e6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80145ea:	4290      	cmp	r0, r2
 80145ec:	4607      	mov	r7, r0
 80145ee:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80145f2:	460e      	mov	r6, r1
 80145f4:	bfa8      	it	ge
 80145f6:	4617      	movge	r7, r2
 80145f8:	4299      	cmp	r1, r3
 80145fa:	4472      	add	r2, lr
 80145fc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014600:	bfa8      	it	ge
 8014602:	461e      	movge	r6, r3
 8014604:	4440      	add	r0, r8
 8014606:	4471      	add	r1, lr
 8014608:	4463      	add	r3, ip
 801460a:	b200      	sxth	r0, r0
 801460c:	8027      	strh	r7, [r4, #0]
 801460e:	b212      	sxth	r2, r2
 8014610:	8066      	strh	r6, [r4, #2]
 8014612:	b209      	sxth	r1, r1
 8014614:	b21b      	sxth	r3, r3
 8014616:	4290      	cmp	r0, r2
 8014618:	bfac      	ite	ge
 801461a:	ebc7 0200 	rsbge	r2, r7, r0
 801461e:	ebc7 0202 	rsblt	r2, r7, r2
 8014622:	4299      	cmp	r1, r3
 8014624:	bfac      	ite	ge
 8014626:	ebc6 0301 	rsbge	r3, r6, r1
 801462a:	ebc6 0303 	rsblt	r3, r6, r3
 801462e:	80a2      	strh	r2, [r4, #4]
 8014630:	80e3      	strh	r3, [r4, #6]
 8014632:	e7d4      	b.n	80145de <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014634:	4620      	mov	r0, r4
 8014636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801463a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801463a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801463e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014642:	b383      	cbz	r3, 80146a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014644:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014646:	b374      	cbz	r4, 80146a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014648:	f9b1 5000 	ldrsh.w	r5, [r1]
 801464c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014650:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014654:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014658:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801465c:	b303      	cbz	r3, 80146a0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801465e:	4668      	mov	r0, sp
 8014660:	1d21      	adds	r1, r4, #4
 8014662:	f8ad 5000 	strh.w	r5, [sp]
 8014666:	f8ad 6002 	strh.w	r6, [sp, #2]
 801466a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801466e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014672:	f7ff ff43 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 8014676:	4668      	mov	r0, sp
 8014678:	f7ff ff83 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 801467c:	b980      	cbnz	r0, 80146a0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801467e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014682:	4669      	mov	r1, sp
 8014684:	88a2      	ldrh	r2, [r4, #4]
 8014686:	4620      	mov	r0, r4
 8014688:	1a9b      	subs	r3, r3, r2
 801468a:	88e2      	ldrh	r2, [r4, #6]
 801468c:	f8ad 3000 	strh.w	r3, [sp]
 8014690:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014694:	1a9b      	subs	r3, r3, r2
 8014696:	f8ad 3002 	strh.w	r3, [sp, #2]
 801469a:	6823      	ldr	r3, [r4, #0]
 801469c:	689b      	ldr	r3, [r3, #8]
 801469e:	4798      	blx	r3
 80146a0:	69a4      	ldr	r4, [r4, #24]
 80146a2:	2c00      	cmp	r4, #0
 80146a4:	d1d8      	bne.n	8014658 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80146a6:	b002      	add	sp, #8
 80146a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146ac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80146ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80146ae:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80146b2:	460d      	mov	r5, r1
 80146b4:	4616      	mov	r6, r2
 80146b6:	b323      	cbz	r3, 8014702 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80146b8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80146ba:	b314      	cbz	r4, 8014702 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80146bc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80146c0:	b1eb      	cbz	r3, 80146fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80146c2:	6828      	ldr	r0, [r5, #0]
 80146c4:	466b      	mov	r3, sp
 80146c6:	6869      	ldr	r1, [r5, #4]
 80146c8:	c303      	stmia	r3!, {r0, r1}
 80146ca:	4668      	mov	r0, sp
 80146cc:	1d21      	adds	r1, r4, #4
 80146ce:	f7ff ff15 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 80146d2:	4668      	mov	r0, sp
 80146d4:	f7ff ff55 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 80146d8:	b988      	cbnz	r0, 80146fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80146da:	f8bd 3000 	ldrh.w	r3, [sp]
 80146de:	4669      	mov	r1, sp
 80146e0:	88a2      	ldrh	r2, [r4, #4]
 80146e2:	4620      	mov	r0, r4
 80146e4:	1a9b      	subs	r3, r3, r2
 80146e6:	88e2      	ldrh	r2, [r4, #6]
 80146e8:	f8ad 3000 	strh.w	r3, [sp]
 80146ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80146f0:	1a9b      	subs	r3, r3, r2
 80146f2:	4632      	mov	r2, r6
 80146f4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80146f8:	6823      	ldr	r3, [r4, #0]
 80146fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146fc:	4798      	blx	r3
 80146fe:	69a4      	ldr	r4, [r4, #24]
 8014700:	e7db      	b.n	80146ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014702:	b002      	add	sp, #8
 8014704:	bd70      	pop	{r4, r5, r6, pc}

08014706 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8014706:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801470a:	4770      	bx	lr

0801470c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801470c:	4770      	bx	lr

0801470e <_ZN8touchgfx3HAL10FlushCacheEv>:
 801470e:	4770      	bx	lr

08014710 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014710:	6803      	ldr	r3, [r0, #0]
 8014712:	b513      	push	{r0, r1, r4, lr}
 8014714:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8014718:	2300      	movs	r3, #0
 801471a:	e9cd 3300 	strd	r3, r3, [sp]
 801471e:	466b      	mov	r3, sp
 8014720:	47a0      	blx	r4
 8014722:	b002      	add	sp, #8
 8014724:	bd10      	pop	{r4, pc}

08014726 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014726:	2301      	movs	r3, #1
 8014728:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801472c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014730:	4770      	bx	lr

08014732 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014732:	2301      	movs	r3, #1
 8014734:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014738:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801473c:	4770      	bx	lr

0801473e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801473e:	6843      	ldr	r3, [r0, #4]
 8014740:	2201      	movs	r2, #1
 8014742:	725a      	strb	r2, [r3, #9]
 8014744:	6840      	ldr	r0, [r0, #4]
 8014746:	6803      	ldr	r3, [r0, #0]
 8014748:	691b      	ldr	r3, [r3, #16]
 801474a:	4718      	bx	r3

0801474c <_ZN8touchgfx3HAL8flushDMAEv>:
 801474c:	6840      	ldr	r0, [r0, #4]
 801474e:	6803      	ldr	r3, [r0, #0]
 8014750:	689b      	ldr	r3, [r3, #8]
 8014752:	4718      	bx	r3

08014754 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8014754:	b530      	push	{r4, r5, lr}
 8014756:	b08b      	sub	sp, #44	; 0x2c
 8014758:	6804      	ldr	r4, [r0, #0]
 801475a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801475e:	9508      	str	r5, [sp, #32]
 8014760:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8014764:	9507      	str	r5, [sp, #28]
 8014766:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801476a:	9506      	str	r5, [sp, #24]
 801476c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8014770:	9505      	str	r5, [sp, #20]
 8014772:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8014776:	9504      	str	r5, [sp, #16]
 8014778:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801477c:	9503      	str	r5, [sp, #12]
 801477e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014782:	9502      	str	r5, [sp, #8]
 8014784:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8014788:	e9cd 3500 	strd	r3, r5, [sp]
 801478c:	4613      	mov	r3, r2
 801478e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014790:	2200      	movs	r2, #0
 8014792:	47a0      	blx	r4
 8014794:	b00b      	add	sp, #44	; 0x2c
 8014796:	bd30      	pop	{r4, r5, pc}

08014798 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014798:	4b04      	ldr	r3, [pc, #16]	; (80147ac <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	b123      	cbz	r3, 80147a8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801479e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80147a2:	f080 0001 	eor.w	r0, r0, #1
 80147a6:	4770      	bx	lr
 80147a8:	2001      	movs	r0, #1
 80147aa:	4770      	bx	lr
 80147ac:	2005653a 	.word	0x2005653a

080147b0 <_ZN8touchgfx3HAL8endFrameEv>:
 80147b0:	b510      	push	{r4, lr}
 80147b2:	4604      	mov	r4, r0
 80147b4:	6840      	ldr	r0, [r0, #4]
 80147b6:	6803      	ldr	r3, [r0, #0]
 80147b8:	689b      	ldr	r3, [r3, #8]
 80147ba:	4798      	blx	r3
 80147bc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80147c0:	b113      	cbz	r3, 80147c8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80147c2:	2301      	movs	r3, #1
 80147c4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80147c8:	bd10      	pop	{r4, pc}

080147ca <_ZN8touchgfx3HAL10initializeEv>:
 80147ca:	b510      	push	{r4, lr}
 80147cc:	4604      	mov	r4, r0
 80147ce:	f7ee fb35 	bl	8002e3c <_ZN8touchgfx10OSWrappers10initializeEv>
 80147d2:	6860      	ldr	r0, [r4, #4]
 80147d4:	6803      	ldr	r3, [r0, #0]
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	4798      	blx	r3
 80147da:	68e0      	ldr	r0, [r4, #12]
 80147dc:	6803      	ldr	r3, [r0, #0]
 80147de:	689b      	ldr	r3, [r3, #8]
 80147e0:	4798      	blx	r3
 80147e2:	6823      	ldr	r3, [r4, #0]
 80147e4:	4620      	mov	r0, r4
 80147e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147ec:	4718      	bx	r3

080147ee <_ZN8touchgfx3HAL9taskEntryEv>:
 80147ee:	b508      	push	{r3, lr}
 80147f0:	6803      	ldr	r3, [r0, #0]
 80147f2:	4604      	mov	r4, r0
 80147f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147f6:	4798      	blx	r3
 80147f8:	6823      	ldr	r3, [r4, #0]
 80147fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147fc:	4620      	mov	r0, r4
 80147fe:	4798      	blx	r3
 8014800:	f7ee fb92 	bl	8002f28 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014804:	6823      	ldr	r3, [r4, #0]
 8014806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014808:	e7f8      	b.n	80147fc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801480c <_ZN8touchgfx3HAL4tickEv>:
 801480c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801480e:	6803      	ldr	r3, [r0, #0]
 8014810:	4604      	mov	r4, r0
 8014812:	4d5c      	ldr	r5, [pc, #368]	; (8014984 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014814:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014818:	4798      	blx	r3
 801481a:	2800      	cmp	r0, #0
 801481c:	f000 8097 	beq.w	801494e <_ZN8touchgfx3HAL4tickEv+0x142>
 8014820:	2001      	movs	r0, #1
 8014822:	2600      	movs	r6, #0
 8014824:	f7ee f8dc 	bl	80029e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014828:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801482c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014830:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014834:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8014838:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801483c:	b133      	cbz	r3, 801484c <_ZN8touchgfx3HAL4tickEv+0x40>
 801483e:	6823      	ldr	r3, [r4, #0]
 8014840:	4620      	mov	r0, r4
 8014842:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014846:	4798      	blx	r3
 8014848:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801484c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014850:	2601      	movs	r6, #1
 8014852:	6862      	ldr	r2, [r4, #4]
 8014854:	f083 0301 	eor.w	r3, r3, #1
 8014858:	702e      	strb	r6, [r5, #0]
 801485a:	7253      	strb	r3, [r2, #9]
 801485c:	f003 fcac 	bl	80181b8 <_ZN8touchgfx11Application11getInstanceEv>
 8014860:	6803      	ldr	r3, [r0, #0]
 8014862:	4631      	mov	r1, r6
 8014864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014866:	4798      	blx	r3
 8014868:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801486c:	b90b      	cbnz	r3, 8014872 <_ZN8touchgfx3HAL4tickEv+0x66>
 801486e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014872:	f003 fca1 	bl	80181b8 <_ZN8touchgfx11Application11getInstanceEv>
 8014876:	6803      	ldr	r3, [r0, #0]
 8014878:	695b      	ldr	r3, [r3, #20]
 801487a:	4798      	blx	r3
 801487c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801487e:	6803      	ldr	r3, [r0, #0]
 8014880:	691b      	ldr	r3, [r3, #16]
 8014882:	4798      	blx	r3
 8014884:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014888:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801488c:	3b01      	subs	r3, #1
 801488e:	b2db      	uxtb	r3, r3
 8014890:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014894:	b10a      	cbz	r2, 801489a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014896:	2b00      	cmp	r3, #0
 8014898:	d1eb      	bne.n	8014872 <_ZN8touchgfx3HAL4tickEv+0x66>
 801489a:	4a3b      	ldr	r2, [pc, #236]	; (8014988 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801489c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80148a0:	7813      	ldrb	r3, [r2, #0]
 80148a2:	3301      	adds	r3, #1
 80148a4:	b25b      	sxtb	r3, r3
 80148a6:	4299      	cmp	r1, r3
 80148a8:	7013      	strb	r3, [r2, #0]
 80148aa:	dc10      	bgt.n	80148ce <_ZN8touchgfx3HAL4tickEv+0xc2>
 80148ac:	2300      	movs	r3, #0
 80148ae:	68e0      	ldr	r0, [r4, #12]
 80148b0:	a902      	add	r1, sp, #8
 80148b2:	7013      	strb	r3, [r2, #0]
 80148b4:	aa03      	add	r2, sp, #12
 80148b6:	6803      	ldr	r3, [r0, #0]
 80148b8:	68db      	ldr	r3, [r3, #12]
 80148ba:	4798      	blx	r3
 80148bc:	6823      	ldr	r3, [r4, #0]
 80148be:	2800      	cmp	r0, #0
 80148c0:	d051      	beq.n	8014966 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80148c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80148c6:	4620      	mov	r0, r4
 80148c8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80148cc:	4798      	blx	r3
 80148ce:	2300      	movs	r3, #0
 80148d0:	6960      	ldr	r0, [r4, #20]
 80148d2:	f88d 3007 	strb.w	r3, [sp, #7]
 80148d6:	b158      	cbz	r0, 80148f0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80148d8:	6803      	ldr	r3, [r0, #0]
 80148da:	f10d 0107 	add.w	r1, sp, #7
 80148de:	68db      	ldr	r3, [r3, #12]
 80148e0:	4798      	blx	r3
 80148e2:	b128      	cbz	r0, 80148f0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80148e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80148ea:	6803      	ldr	r3, [r0, #0]
 80148ec:	68db      	ldr	r3, [r3, #12]
 80148ee:	4798      	blx	r3
 80148f0:	f104 001c 	add.w	r0, r4, #28
 80148f4:	f00e ff5e 	bl	80237b4 <_ZN8touchgfx8Gestures4tickEv>
 80148f8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80148fc:	b30b      	cbz	r3, 8014942 <_ZN8touchgfx3HAL4tickEv+0x136>
 80148fe:	6920      	ldr	r0, [r4, #16]
 8014900:	6803      	ldr	r3, [r0, #0]
 8014902:	691b      	ldr	r3, [r3, #16]
 8014904:	4798      	blx	r3
 8014906:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014908:	4606      	mov	r6, r0
 801490a:	b903      	cbnz	r3, 801490e <_ZN8touchgfx3HAL4tickEv+0x102>
 801490c:	6720      	str	r0, [r4, #112]	; 0x70
 801490e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014910:	4a1e      	ldr	r2, [pc, #120]	; (801498c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8014912:	1af3      	subs	r3, r6, r3
 8014914:	4293      	cmp	r3, r2
 8014916:	d914      	bls.n	8014942 <_ZN8touchgfx3HAL4tickEv+0x136>
 8014918:	6920      	ldr	r0, [r4, #16]
 801491a:	6803      	ldr	r3, [r0, #0]
 801491c:	699b      	ldr	r3, [r3, #24]
 801491e:	4798      	blx	r3
 8014920:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014922:	2264      	movs	r2, #100	; 0x64
 8014924:	1af3      	subs	r3, r6, r3
 8014926:	fbb3 f3f2 	udiv	r3, r3, r2
 801492a:	fbb0 f0f3 	udiv	r0, r0, r3
 801492e:	2800      	cmp	r0, #0
 8014930:	dc1e      	bgt.n	8014970 <_ZN8touchgfx3HAL4tickEv+0x164>
 8014932:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8014936:	6920      	ldr	r0, [r4, #16]
 8014938:	2100      	movs	r1, #0
 801493a:	6803      	ldr	r3, [r0, #0]
 801493c:	69db      	ldr	r3, [r3, #28]
 801493e:	4798      	blx	r3
 8014940:	6726      	str	r6, [r4, #112]	; 0x70
 8014942:	f003 fc39 	bl	80181b8 <_ZN8touchgfx11Application11getInstanceEv>
 8014946:	6803      	ldr	r3, [r0, #0]
 8014948:	2100      	movs	r1, #0
 801494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801494c:	4798      	blx	r3
 801494e:	6823      	ldr	r3, [r4, #0]
 8014950:	4620      	mov	r0, r4
 8014952:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014956:	4798      	blx	r3
 8014958:	2001      	movs	r0, #1
 801495a:	f7ee f84c 	bl	80029f6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801495e:	2300      	movs	r3, #0
 8014960:	702b      	strb	r3, [r5, #0]
 8014962:	b004      	add	sp, #16
 8014964:	bd70      	pop	{r4, r5, r6, pc}
 8014966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801496a:	4620      	mov	r0, r4
 801496c:	4798      	blx	r3
 801496e:	e7ae      	b.n	80148ce <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014970:	2863      	cmp	r0, #99	; 0x63
 8014972:	bfcb      	itete	gt
 8014974:	2300      	movgt	r3, #0
 8014976:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801497a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801497e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8014982:	e7d8      	b.n	8014936 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8014984:	20056540 	.word	0x20056540
 8014988:	20056541 	.word	0x20056541
 801498c:	05f5e100 	.word	0x05f5e100

08014990 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014990:	f7ee ba96 	b.w	8002ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014994 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014994:	6581      	str	r1, [r0, #88]	; 0x58
 8014996:	301c      	adds	r0, #28
 8014998:	f00e bf0a 	b.w	80237b0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801499c <_ZN8touchgfx3HAL5touchEll>:
 801499c:	b530      	push	{r4, r5, lr}
 801499e:	b087      	sub	sp, #28
 80149a0:	4604      	mov	r4, r0
 80149a2:	a804      	add	r0, sp, #16
 80149a4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80149a8:	f003 f9f2 	bl	8017d90 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80149ac:	9b04      	ldr	r3, [sp, #16]
 80149ae:	a906      	add	r1, sp, #24
 80149b0:	a803      	add	r0, sp, #12
 80149b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80149b6:	9b05      	ldr	r3, [sp, #20]
 80149b8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80149bc:	f003 fa26 	bl	8017e0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80149c0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80149c4:	f104 001c 	add.w	r0, r4, #28
 80149c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80149cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80149d0:	b189      	cbz	r1, 80149f6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80149d2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80149d6:	9300      	str	r3, [sp, #0]
 80149d8:	4613      	mov	r3, r2
 80149da:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80149de:	462a      	mov	r2, r5
 80149e0:	f00e fef6 	bl	80237d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80149e4:	b128      	cbz	r0, 80149f2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80149e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80149ea:	65e3      	str	r3, [r4, #92]	; 0x5c
 80149ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80149f0:	6623      	str	r3, [r4, #96]	; 0x60
 80149f2:	b007      	add	sp, #28
 80149f4:	bd30      	pop	{r4, r5, pc}
 80149f6:	f00e ff2f 	bl	8023858 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80149fa:	2301      	movs	r3, #1
 80149fc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014a00:	e7f1      	b.n	80149e6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08014a02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8014a02:	b570      	push	{r4, r5, r6, lr}
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d050      	beq.n	8014aaa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014a08:	ea81 0002 	eor.w	r0, r1, r2
 8014a0c:	07c6      	lsls	r6, r0, #31
 8014a0e:	d508      	bpl.n	8014a22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8014a10:	3a01      	subs	r2, #1
 8014a12:	18cc      	adds	r4, r1, r3
 8014a14:	42a1      	cmp	r1, r4
 8014a16:	d048      	beq.n	8014aaa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014a18:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014a1c:	f801 0b01 	strb.w	r0, [r1], #1
 8014a20:	e7f8      	b.n	8014a14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014a22:	07d5      	lsls	r5, r2, #31
 8014a24:	bf42      	ittt	mi
 8014a26:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014a2a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8014a2e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d915      	bls.n	8014a62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014a36:	ea82 0001 	eor.w	r0, r2, r1
 8014a3a:	0784      	lsls	r4, r0, #30
 8014a3c:	d02d      	beq.n	8014a9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8014a3e:	1e94      	subs	r4, r2, #2
 8014a40:	4608      	mov	r0, r1
 8014a42:	18ce      	adds	r6, r1, r3
 8014a44:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8014a48:	f820 5b02 	strh.w	r5, [r0], #2
 8014a4c:	1a35      	subs	r5, r6, r0
 8014a4e:	2d01      	cmp	r5, #1
 8014a50:	d8f8      	bhi.n	8014a44 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8014a52:	1e98      	subs	r0, r3, #2
 8014a54:	f003 0301 	and.w	r3, r3, #1
 8014a58:	f020 0001 	bic.w	r0, r0, #1
 8014a5c:	3002      	adds	r0, #2
 8014a5e:	4401      	add	r1, r0
 8014a60:	4402      	add	r2, r0
 8014a62:	1f14      	subs	r4, r2, #4
 8014a64:	4608      	mov	r0, r1
 8014a66:	18ce      	adds	r6, r1, r3
 8014a68:	1a35      	subs	r5, r6, r0
 8014a6a:	2d03      	cmp	r5, #3
 8014a6c:	d810      	bhi.n	8014a90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8014a6e:	089c      	lsrs	r4, r3, #2
 8014a70:	00a0      	lsls	r0, r4, #2
 8014a72:	4401      	add	r1, r0
 8014a74:	3801      	subs	r0, #1
 8014a76:	4402      	add	r2, r0
 8014a78:	f06f 0003 	mvn.w	r0, #3
 8014a7c:	fb00 3404 	mla	r4, r0, r4, r3
 8014a80:	440c      	add	r4, r1
 8014a82:	42a1      	cmp	r1, r4
 8014a84:	d011      	beq.n	8014aaa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014a86:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8014a8a:	f801 3b01 	strb.w	r3, [r1], #1
 8014a8e:	e7f8      	b.n	8014a82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8014a90:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8014a94:	f840 5b04 	str.w	r5, [r0], #4
 8014a98:	e7e6      	b.n	8014a68 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8014a9a:	0790      	lsls	r0, r2, #30
 8014a9c:	d0e1      	beq.n	8014a62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014a9e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014aa2:	3b02      	subs	r3, #2
 8014aa4:	f821 0b02 	strh.w	r0, [r1], #2
 8014aa8:	e7db      	b.n	8014a62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8014aaa:	2001      	movs	r0, #1
 8014aac:	bd70      	pop	{r4, r5, r6, pc}

08014aae <_ZN8touchgfx3HAL7noTouchEv>:
 8014aae:	b510      	push	{r4, lr}
 8014ab0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	b153      	cbz	r3, 8014ace <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014ab8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8014abc:	2101      	movs	r1, #1
 8014abe:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8014ac2:	301c      	adds	r0, #28
 8014ac4:	f00e fec8 	bl	8023858 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014ac8:	2300      	movs	r3, #0
 8014aca:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014ace:	bd10      	pop	{r4, pc}

08014ad0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ad4:	4604      	mov	r4, r0
 8014ad6:	6980      	ldr	r0, [r0, #24]
 8014ad8:	b085      	sub	sp, #20
 8014ada:	460f      	mov	r7, r1
 8014adc:	4690      	mov	r8, r2
 8014ade:	4699      	mov	r9, r3
 8014ae0:	b930      	cbnz	r0, 8014af0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8014ae2:	4b1c      	ldr	r3, [pc, #112]	; (8014b54 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8014ae4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8014ae8:	4a1b      	ldr	r2, [pc, #108]	; (8014b58 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8014aea:	481c      	ldr	r0, [pc, #112]	; (8014b5c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8014aec:	f010 fcb2 	bl	8025454 <__assert_func>
 8014af0:	ad04      	add	r5, sp, #16
 8014af2:	2600      	movs	r6, #0
 8014af4:	f845 6d04 	str.w	r6, [r5, #-4]!
 8014af8:	6806      	ldr	r6, [r0, #0]
 8014afa:	9501      	str	r5, [sp, #4]
 8014afc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8014b00:	9500      	str	r5, [sp, #0]
 8014b02:	6835      	ldr	r5, [r6, #0]
 8014b04:	47a8      	blx	r5
 8014b06:	4d16      	ldr	r5, [pc, #88]	; (8014b60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8014b08:	4606      	mov	r6, r0
 8014b0a:	f8a5 9000 	strh.w	r9, [r5]
 8014b0e:	f7f0 fcbd 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8014b12:	6803      	ldr	r3, [r0, #0]
 8014b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b16:	4798      	blx	r3
 8014b18:	2801      	cmp	r0, #1
 8014b1a:	d012      	beq.n	8014b42 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8014b1c:	d306      	bcc.n	8014b2c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8014b1e:	280d      	cmp	r0, #13
 8014b20:	d80b      	bhi.n	8014b3a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8014b22:	4b10      	ldr	r3, [pc, #64]	; (8014b64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8014b24:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8014b28:	4a0b      	ldr	r2, [pc, #44]	; (8014b58 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8014b2a:	e7de      	b.n	8014aea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8014b2c:	882b      	ldrh	r3, [r5, #0]
 8014b2e:	fb08 7203 	mla	r2, r8, r3, r7
 8014b32:	9b03      	ldr	r3, [sp, #12]
 8014b34:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014b38:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014b3a:	4630      	mov	r0, r6
 8014b3c:	b005      	add	sp, #20
 8014b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b42:	882a      	ldrh	r2, [r5, #0]
 8014b44:	9b03      	ldr	r3, [sp, #12]
 8014b46:	fb08 7202 	mla	r2, r8, r2, r7
 8014b4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014b4e:	1a9a      	subs	r2, r3, r2
 8014b50:	63e2      	str	r2, [r4, #60]	; 0x3c
 8014b52:	e7f2      	b.n	8014b3a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8014b54:	080283d8 	.word	0x080283d8
 8014b58:	0802875d 	.word	0x0802875d
 8014b5c:	0802841d 	.word	0x0802841d
 8014b60:	20056536 	.word	0x20056536
 8014b64:	08028443 	.word	0x08028443

08014b68 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8014b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b6a:	b08b      	sub	sp, #44	; 0x2c
 8014b6c:	4617      	mov	r7, r2
 8014b6e:	4604      	mov	r4, r0
 8014b70:	460e      	mov	r6, r1
 8014b72:	461d      	mov	r5, r3
 8014b74:	f7f0 fc8a 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8014b78:	6803      	ldr	r3, [r0, #0]
 8014b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b7c:	4798      	blx	r3
 8014b7e:	4b0f      	ldr	r3, [pc, #60]	; (8014bbc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 8014b80:	6822      	ldr	r2, [r4, #0]
 8014b82:	4631      	mov	r1, r6
 8014b84:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8014b88:	881b      	ldrh	r3, [r3, #0]
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	9306      	str	r3, [sp, #24]
 8014b8e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014b92:	9305      	str	r3, [sp, #20]
 8014b94:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014b98:	9304      	str	r3, [sp, #16]
 8014b9a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014b9e:	9303      	str	r3, [sp, #12]
 8014ba0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014ba4:	9302      	str	r3, [sp, #8]
 8014ba6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014baa:	e9cd 5300 	strd	r5, r3, [sp]
 8014bae:	463b      	mov	r3, r7
 8014bb0:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	47a8      	blx	r5
 8014bb6:	b00b      	add	sp, #44	; 0x2c
 8014bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bba:	bf00      	nop
 8014bbc:	20056536 	.word	0x20056536

08014bc0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8014bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bc4:	4698      	mov	r8, r3
 8014bc6:	6803      	ldr	r3, [r0, #0]
 8014bc8:	b08b      	sub	sp, #44	; 0x2c
 8014bca:	4617      	mov	r7, r2
 8014bcc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8014bce:	460e      	mov	r6, r1
 8014bd0:	4b11      	ldr	r3, [pc, #68]	; (8014c18 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	f8b3 9000 	ldrh.w	r9, [r3]
 8014bd8:	f7f0 fc58 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8014bdc:	6803      	ldr	r3, [r0, #0]
 8014bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014be0:	4798      	blx	r3
 8014be2:	2302      	movs	r3, #2
 8014be4:	9008      	str	r0, [sp, #32]
 8014be6:	2200      	movs	r2, #0
 8014be8:	4631      	mov	r1, r6
 8014bea:	4620      	mov	r0, r4
 8014bec:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	9305      	str	r3, [sp, #20]
 8014bf4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014bf8:	9304      	str	r3, [sp, #16]
 8014bfa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014bfe:	9303      	str	r3, [sp, #12]
 8014c00:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014c04:	9302      	str	r3, [sp, #8]
 8014c06:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014c0a:	e9cd 8300 	strd	r8, r3, [sp]
 8014c0e:	463b      	mov	r3, r7
 8014c10:	47a8      	blx	r5
 8014c12:	b00b      	add	sp, #44	; 0x2c
 8014c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c18:	20056536 	.word	0x20056536

08014c1c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8014c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c20:	4698      	mov	r8, r3
 8014c22:	6803      	ldr	r3, [r0, #0]
 8014c24:	b087      	sub	sp, #28
 8014c26:	460e      	mov	r6, r1
 8014c28:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8014c2a:	4617      	mov	r7, r2
 8014c2c:	4b0d      	ldr	r3, [pc, #52]	; (8014c64 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8014c2e:	4604      	mov	r4, r0
 8014c30:	f8b3 9000 	ldrh.w	r9, [r3]
 8014c34:	f7f0 fc2a 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8014c38:	6803      	ldr	r3, [r0, #0]
 8014c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c3c:	4798      	blx	r3
 8014c3e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014c42:	463a      	mov	r2, r7
 8014c44:	4631      	mov	r1, r6
 8014c46:	9302      	str	r3, [sp, #8]
 8014c48:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014c4c:	9301      	str	r3, [sp, #4]
 8014c4e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014c52:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	4620      	mov	r0, r4
 8014c5a:	4643      	mov	r3, r8
 8014c5c:	47a8      	blx	r5
 8014c5e:	b007      	add	sp, #28
 8014c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c64:	20056536 	.word	0x20056536

08014c68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c6c:	4604      	mov	r4, r0
 8014c6e:	b08f      	sub	sp, #60	; 0x3c
 8014c70:	4610      	mov	r0, r2
 8014c72:	460d      	mov	r5, r1
 8014c74:	4691      	mov	r9, r2
 8014c76:	461e      	mov	r6, r3
 8014c78:	f006 fabc 	bl	801b1f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014c7c:	2800      	cmp	r0, #0
 8014c7e:	f000 80b3 	beq.w	8014de8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 8014c82:	6823      	ldr	r3, [r4, #0]
 8014c84:	4620      	mov	r0, r4
 8014c86:	f8df b190 	ldr.w	fp, [pc, #400]	; 8014e18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 8014c8a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c90:	4798      	blx	r3
 8014c92:	6823      	ldr	r3, [r4, #0]
 8014c94:	4620      	mov	r0, r4
 8014c96:	f8df a184 	ldr.w	sl, [pc, #388]	; 8014e1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8014c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c9c:	4798      	blx	r3
 8014c9e:	f8bb 3000 	ldrh.w	r3, [fp]
 8014ca2:	4f5a      	ldr	r7, [pc, #360]	; (8014e0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8014ca4:	9300      	str	r3, [sp, #0]
 8014ca6:	f8ba 3000 	ldrh.w	r3, [sl]
 8014caa:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014cae:	4640      	mov	r0, r8
 8014cb0:	9301      	str	r3, [sp, #4]
 8014cb2:	883b      	ldrh	r3, [r7, #0]
 8014cb4:	9302      	str	r3, [sp, #8]
 8014cb6:	4b56      	ldr	r3, [pc, #344]	; (8014e10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8014cb8:	881a      	ldrh	r2, [r3, #0]
 8014cba:	9304      	str	r3, [sp, #16]
 8014cbc:	9203      	str	r2, [sp, #12]
 8014cbe:	f006 fb53 	bl	801b368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014cc2:	8038      	strh	r0, [r7, #0]
 8014cc4:	4640      	mov	r0, r8
 8014cc6:	f006 fb89 	bl	801b3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014cca:	9b04      	ldr	r3, [sp, #16]
 8014ccc:	8018      	strh	r0, [r3, #0]
 8014cce:	4b51      	ldr	r3, [pc, #324]	; (8014e14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014cd0:	781b      	ldrb	r3, [r3, #0]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f040 808b 	bne.w	8014dee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 8014cd8:	883b      	ldrh	r3, [r7, #0]
 8014cda:	f8aa 0000 	strh.w	r0, [sl]
 8014cde:	f8ab 3000 	strh.w	r3, [fp]
 8014ce2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014ce4:	4648      	mov	r0, r9
 8014ce6:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8014ce8:	9304      	str	r3, [sp, #16]
 8014cea:	f006 fa83 	bl	801b1f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014cee:	2200      	movs	r2, #0
 8014cf0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8014cf4:	4611      	mov	r1, r2
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014cfc:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014d00:	f7f1 f9a6 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>
 8014d04:	2301      	movs	r3, #1
 8014d06:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8014d0a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8014d0e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	dd71      	ble.n	8014dfa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8014d16:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	dd6d      	ble.n	8014dfa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8014d1e:	462a      	mov	r2, r5
 8014d20:	ab0a      	add	r3, sp, #40	; 0x28
 8014d22:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014d26:	6851      	ldr	r1, [r2, #4]
 8014d28:	c303      	stmia	r3!, {r0, r1}
 8014d2a:	4631      	mov	r1, r6
 8014d2c:	a80a      	add	r0, sp, #40	; 0x28
 8014d2e:	f7ff fbe5 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 8014d32:	4b36      	ldr	r3, [pc, #216]	; (8014e0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8014d34:	2600      	movs	r6, #0
 8014d36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014d3a:	4b35      	ldr	r3, [pc, #212]	; (8014e10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8014d3c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014d40:	aa0a      	add	r2, sp, #40	; 0x28
 8014d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d46:	960c      	str	r6, [sp, #48]	; 0x30
 8014d48:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014d4c:	ab08      	add	r3, sp, #32
 8014d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d52:	e883 0003 	stmia.w	r3, {r0, r1}
 8014d56:	4618      	mov	r0, r3
 8014d58:	a90c      	add	r1, sp, #48	; 0x30
 8014d5a:	f7ff fbcf 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 8014d5e:	a807      	add	r0, sp, #28
 8014d60:	f006 fc00 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014d64:	4680      	mov	r8, r0
 8014d66:	f7f0 fb91 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8014d6a:	6802      	ldr	r2, [r0, #0]
 8014d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014d6e:	4790      	blx	r2
 8014d70:	4580      	cmp	r8, r0
 8014d72:	d049      	beq.n	8014e08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 8014d74:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014d76:	b150      	cbz	r0, 8014d8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8014d78:	a807      	add	r0, sp, #28
 8014d7a:	f006 fbf3 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014d7e:	4606      	mov	r6, r0
 8014d80:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014d82:	6803      	ldr	r3, [r0, #0]
 8014d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d86:	4798      	blx	r3
 8014d88:	1a33      	subs	r3, r6, r0
 8014d8a:	4258      	negs	r0, r3
 8014d8c:	4158      	adcs	r0, r3
 8014d8e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014d92:	2600      	movs	r6, #0
 8014d94:	696b      	ldr	r3, [r5, #20]
 8014d96:	a908      	add	r1, sp, #32
 8014d98:	682a      	ldr	r2, [r5, #0]
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	9305      	str	r3, [sp, #20]
 8014d9e:	616e      	str	r6, [r5, #20]
 8014da0:	6892      	ldr	r2, [r2, #8]
 8014da2:	4790      	blx	r2
 8014da4:	9b05      	ldr	r3, [sp, #20]
 8014da6:	4652      	mov	r2, sl
 8014da8:	4649      	mov	r1, r9
 8014daa:	616b      	str	r3, [r5, #20]
 8014dac:	4628      	mov	r0, r5
 8014dae:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014db2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014db6:	f7f1 f94b 	bl	8006050 <_ZN8touchgfx8Drawable5setXYEss>
 8014dba:	9b04      	ldr	r3, [sp, #16]
 8014dbc:	9a00      	ldr	r2, [sp, #0]
 8014dbe:	4620      	mov	r0, r4
 8014dc0:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 8014dc4:	4b14      	ldr	r3, [pc, #80]	; (8014e18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014dc6:	801a      	strh	r2, [r3, #0]
 8014dc8:	9a01      	ldr	r2, [sp, #4]
 8014dca:	4b14      	ldr	r3, [pc, #80]	; (8014e1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8014dcc:	801a      	strh	r2, [r3, #0]
 8014dce:	9a02      	ldr	r2, [sp, #8]
 8014dd0:	4b0e      	ldr	r3, [pc, #56]	; (8014e0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8014dd2:	801a      	strh	r2, [r3, #0]
 8014dd4:	4b0e      	ldr	r3, [pc, #56]	; (8014e10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8014dd6:	9a03      	ldr	r2, [sp, #12]
 8014dd8:	801a      	strh	r2, [r3, #0]
 8014dda:	6823      	ldr	r3, [r4, #0]
 8014ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dde:	4798      	blx	r3
 8014de0:	6823      	ldr	r3, [r4, #0]
 8014de2:	4620      	mov	r0, r4
 8014de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014de6:	4798      	blx	r3
 8014de8:	b00f      	add	sp, #60	; 0x3c
 8014dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dee:	883b      	ldrh	r3, [r7, #0]
 8014df0:	f8ab 0000 	strh.w	r0, [fp]
 8014df4:	f8aa 3000 	strh.w	r3, [sl]
 8014df8:	e773      	b.n	8014ce2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8014dfa:	462a      	mov	r2, r5
 8014dfc:	ab0a      	add	r3, sp, #40	; 0x28
 8014dfe:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014e02:	6851      	ldr	r1, [r2, #4]
 8014e04:	c303      	stmia	r3!, {r0, r1}
 8014e06:	e794      	b.n	8014d32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 8014e08:	4630      	mov	r0, r6
 8014e0a:	e7c0      	b.n	8014d8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8014e0c:	20056530 	.word	0x20056530
 8014e10:	20056532 	.word	0x20056532
 8014e14:	20056534 	.word	0x20056534
 8014e18:	20056536 	.word	0x20056536
 8014e1c:	20056538 	.word	0x20056538

08014e20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8014e20:	4b07      	ldr	r3, [pc, #28]	; (8014e40 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8014e22:	b510      	push	{r4, lr}
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	4604      	mov	r4, r0
 8014e28:	b13b      	cbz	r3, 8014e3a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014e2a:	6803      	ldr	r3, [r0, #0]
 8014e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e2e:	4798      	blx	r3
 8014e30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014e32:	4283      	cmp	r3, r0
 8014e34:	d101      	bne.n	8014e3a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014e36:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8014e38:	bd10      	pop	{r4, pc}
 8014e3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014e3c:	e7fc      	b.n	8014e38 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8014e3e:	bf00      	nop
 8014e40:	2005653a 	.word	0x2005653a

08014e44 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e48:	b088      	sub	sp, #32
 8014e4a:	4692      	mov	sl, r2
 8014e4c:	461c      	mov	r4, r3
 8014e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e52:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8014e56:	2500      	movs	r5, #0
 8014e58:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8014e5c:	4606      	mov	r6, r0
 8014e5e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8014e62:	fb09 a404 	mla	r4, r9, r4, sl
 8014e66:	9503      	str	r5, [sp, #12]
 8014e68:	f8ad 8014 	strh.w	r8, [sp, #20]
 8014e6c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014e70:	f88d 501c 	strb.w	r5, [sp, #28]
 8014e74:	e9cd 3100 	strd	r3, r1, [sp]
 8014e78:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014e7c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014e80:	f7ff ffce 	bl	8014e20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014e84:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014e88:	f8ad 901a 	strh.w	r9, [sp, #26]
 8014e8c:	f88d 501e 	strb.w	r5, [sp, #30]
 8014e90:	9404      	str	r4, [sp, #16]
 8014e92:	f88d 501d 	strb.w	r5, [sp, #29]
 8014e96:	f1b8 0f00 	cmp.w	r8, #0
 8014e9a:	d000      	beq.n	8014e9e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 8014e9c:	b937      	cbnz	r7, 8014eac <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 8014e9e:	4b0d      	ldr	r3, [pc, #52]	; (8014ed4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 8014ea0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014ea4:	4a0c      	ldr	r2, [pc, #48]	; (8014ed8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8014ea6:	480d      	ldr	r0, [pc, #52]	; (8014edc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8014ea8:	f010 fad4 	bl	8025454 <__assert_func>
 8014eac:	6833      	ldr	r3, [r6, #0]
 8014eae:	4630      	mov	r0, r6
 8014eb0:	9c00      	ldr	r4, [sp, #0]
 8014eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014eb4:	4798      	blx	r3
 8014eb6:	4220      	tst	r0, r4
 8014eb8:	d104      	bne.n	8014ec4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 8014eba:	4b09      	ldr	r3, [pc, #36]	; (8014ee0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8014ebc:	f240 2105 	movw	r1, #517	; 0x205
 8014ec0:	4a05      	ldr	r2, [pc, #20]	; (8014ed8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8014ec2:	e7f0      	b.n	8014ea6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 8014ec4:	6870      	ldr	r0, [r6, #4]
 8014ec6:	4669      	mov	r1, sp
 8014ec8:	6803      	ldr	r3, [r0, #0]
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	4798      	blx	r3
 8014ece:	b008      	add	sp, #32
 8014ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ed4:	0802826b 	.word	0x0802826b
 8014ed8:	08028598 	.word	0x08028598
 8014edc:	0802841d 	.word	0x0802841d
 8014ee0:	080282a3 	.word	0x080282a3

08014ee4 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee8:	b089      	sub	sp, #36	; 0x24
 8014eea:	4693      	mov	fp, r2
 8014eec:	461d      	mov	r5, r3
 8014eee:	2400      	movs	r4, #0
 8014ef0:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8014ef4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ef8:	468a      	mov	sl, r1
 8014efa:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8014efe:	fb09 b505 	mla	r5, r9, r5, fp
 8014f02:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8014f06:	4606      	mov	r6, r0
 8014f08:	9403      	str	r4, [sp, #12]
 8014f0a:	e9cd 3400 	strd	r3, r4, [sp]
 8014f0e:	f7ff ff87 	bl	8014e20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014f12:	f8ad 8014 	strh.w	r8, [sp, #20]
 8014f16:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014f1a:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014f1e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8014f22:	9504      	str	r5, [sp, #16]
 8014f24:	f8ad 901a 	strh.w	r9, [sp, #26]
 8014f28:	f8cd a00c 	str.w	sl, [sp, #12]
 8014f2c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014f30:	f88d 401e 	strb.w	r4, [sp, #30]
 8014f34:	f1b8 0f00 	cmp.w	r8, #0
 8014f38:	d000      	beq.n	8014f3c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 8014f3a:	b937      	cbnz	r7, 8014f4a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 8014f3c:	4b0d      	ldr	r3, [pc, #52]	; (8014f74 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 8014f3e:	f240 2119 	movw	r1, #537	; 0x219
 8014f42:	4a0d      	ldr	r2, [pc, #52]	; (8014f78 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8014f44:	480d      	ldr	r0, [pc, #52]	; (8014f7c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8014f46:	f010 fa85 	bl	8025454 <__assert_func>
 8014f4a:	6833      	ldr	r3, [r6, #0]
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	9c00      	ldr	r4, [sp, #0]
 8014f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f52:	4798      	blx	r3
 8014f54:	4220      	tst	r0, r4
 8014f56:	d104      	bne.n	8014f62 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 8014f58:	4b09      	ldr	r3, [pc, #36]	; (8014f80 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8014f5a:	f240 211a 	movw	r1, #538	; 0x21a
 8014f5e:	4a06      	ldr	r2, [pc, #24]	; (8014f78 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8014f60:	e7f0      	b.n	8014f44 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8014f62:	6870      	ldr	r0, [r6, #4]
 8014f64:	4669      	mov	r1, sp
 8014f66:	6803      	ldr	r3, [r0, #0]
 8014f68:	685b      	ldr	r3, [r3, #4]
 8014f6a:	4798      	blx	r3
 8014f6c:	b009      	add	sp, #36	; 0x24
 8014f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f72:	bf00      	nop
 8014f74:	080282e8 	.word	0x080282e8
 8014f78:	0802860e 	.word	0x0802860e
 8014f7c:	0802841d 	.word	0x0802841d
 8014f80:	08028320 	.word	0x08028320

08014f84 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8014f84:	b508      	push	{r3, lr}
 8014f86:	290d      	cmp	r1, #13
 8014f88:	d817      	bhi.n	8014fba <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8014f8a:	e8df f001 	tbb	[pc, r1]
 8014f8e:	090b      	.short	0x090b
 8014f90:	0d0d0d07 	.word	0x0d0d0d07
 8014f94:	1414140d 	.word	0x1414140d
 8014f98:	0d0d1414 	.word	0x0d0d1414
 8014f9c:	2020      	movs	r0, #32
 8014f9e:	bd08      	pop	{r3, pc}
 8014fa0:	2018      	movs	r0, #24
 8014fa2:	e7fc      	b.n	8014f9e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014fa4:	2010      	movs	r0, #16
 8014fa6:	e7fa      	b.n	8014f9e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014fa8:	4b05      	ldr	r3, [pc, #20]	; (8014fc0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8014faa:	f240 2177 	movw	r1, #631	; 0x277
 8014fae:	4a05      	ldr	r2, [pc, #20]	; (8014fc4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8014fb0:	4805      	ldr	r0, [pc, #20]	; (8014fc8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8014fb2:	f010 fa4f 	bl	8025454 <__assert_func>
 8014fb6:	2008      	movs	r0, #8
 8014fb8:	e7f1      	b.n	8014f9e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014fba:	2000      	movs	r0, #0
 8014fbc:	e7ef      	b.n	8014f9e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014fbe:	bf00      	nop
 8014fc0:	08028499 	.word	0x08028499
 8014fc4:	08028927 	.word	0x08028927
 8014fc8:	0802841d 	.word	0x0802841d

08014fcc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	460d      	mov	r5, r1
 8014fd0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8014fd4:	4616      	mov	r6, r2
 8014fd6:	461c      	mov	r4, r3
 8014fd8:	f7ff ffd4 	bl	8014f84 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8014fdc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014fe0:	10c0      	asrs	r0, r0, #3
 8014fe2:	fb06 5101 	mla	r1, r6, r1, r5
 8014fe6:	fb00 4001 	mla	r0, r0, r1, r4
 8014fea:	bd70      	pop	{r4, r5, r6, pc}

08014fec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8014fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ff0:	b08a      	sub	sp, #40	; 0x28
 8014ff2:	f04f 0c00 	mov.w	ip, #0
 8014ff6:	4604      	mov	r4, r0
 8014ff8:	469a      	mov	sl, r3
 8014ffa:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8014ffe:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8015002:	2d0b      	cmp	r5, #11
 8015004:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8015008:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801500c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015010:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015014:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8015018:	f8cd c014 	str.w	ip, [sp, #20]
 801501c:	d129      	bne.n	8015072 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 801501e:	2080      	movs	r0, #128	; 0x80
 8015020:	9204      	str	r2, [sp, #16]
 8015022:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015026:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801502a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801502e:	f8ad 701c 	strh.w	r7, [sp, #28]
 8015032:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801503a:	4620      	mov	r0, r4
 801503c:	f7ff fef0 	bl	8014e20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015040:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015044:	4603      	mov	r3, r0
 8015046:	4651      	mov	r1, sl
 8015048:	4620      	mov	r0, r4
 801504a:	e9cd 9800 	strd	r9, r8, [sp]
 801504e:	f7ff ffbd 	bl	8014fcc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015052:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8015056:	9006      	str	r0, [sp, #24]
 8015058:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801505c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8015060:	b107      	cbz	r7, 8015064 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8015062:	b9d6      	cbnz	r6, 801509a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8015064:	4b17      	ldr	r3, [pc, #92]	; (80150c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015066:	f240 11cf 	movw	r1, #463	; 0x1cf
 801506a:	4a17      	ldr	r2, [pc, #92]	; (80150c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801506c:	4817      	ldr	r0, [pc, #92]	; (80150cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 801506e:	f010 f9f1 	bl	8025454 <__assert_func>
 8015072:	2d02      	cmp	r5, #2
 8015074:	d108      	bne.n	8015088 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 8015076:	2bff      	cmp	r3, #255	; 0xff
 8015078:	d104      	bne.n	8015084 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 801507a:	2800      	cmp	r0, #0
 801507c:	bf14      	ite	ne
 801507e:	2040      	movne	r0, #64	; 0x40
 8015080:	2020      	moveq	r0, #32
 8015082:	e7cd      	b.n	8015020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015084:	2040      	movs	r0, #64	; 0x40
 8015086:	e7cb      	b.n	8015020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015088:	2bff      	cmp	r3, #255	; 0xff
 801508a:	d104      	bne.n	8015096 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 801508c:	2800      	cmp	r0, #0
 801508e:	bf14      	ite	ne
 8015090:	2004      	movne	r0, #4
 8015092:	2001      	moveq	r0, #1
 8015094:	e7c4      	b.n	8015020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015096:	2004      	movs	r0, #4
 8015098:	e7c2      	b.n	8015020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 801509a:	6823      	ldr	r3, [r4, #0]
 801509c:	4620      	mov	r0, r4
 801509e:	9d02      	ldr	r5, [sp, #8]
 80150a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150a2:	4798      	blx	r3
 80150a4:	4228      	tst	r0, r5
 80150a6:	d104      	bne.n	80150b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 80150a8:	4b09      	ldr	r3, [pc, #36]	; (80150d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 80150aa:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80150ae:	4a06      	ldr	r2, [pc, #24]	; (80150c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80150b0:	e7dc      	b.n	801506c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 80150b2:	6860      	ldr	r0, [r4, #4]
 80150b4:	a902      	add	r1, sp, #8
 80150b6:	6803      	ldr	r3, [r0, #0]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	4798      	blx	r3
 80150bc:	b00a      	add	sp, #40	; 0x28
 80150be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150c2:	bf00      	nop
 80150c4:	0802826b 	.word	0x0802826b
 80150c8:	080287c1 	.word	0x080287c1
 80150cc:	0802841d 	.word	0x0802841d
 80150d0:	080282a3 	.word	0x080282a3

080150d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80150d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d8:	b08b      	sub	sp, #44	; 0x2c
 80150da:	469b      	mov	fp, r3
 80150dc:	4604      	mov	r4, r0
 80150de:	4692      	mov	sl, r2
 80150e0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80150e4:	2600      	movs	r6, #0
 80150e6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80150ea:	4689      	mov	r9, r1
 80150ec:	2fff      	cmp	r7, #255	; 0xff
 80150ee:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80150f2:	9605      	str	r6, [sp, #20]
 80150f4:	bf14      	ite	ne
 80150f6:	2308      	movne	r3, #8
 80150f8:	2302      	moveq	r3, #2
 80150fa:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80150fe:	f7ff fe8f 	bl	8014e20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015102:	465a      	mov	r2, fp
 8015104:	4603      	mov	r3, r0
 8015106:	4651      	mov	r1, sl
 8015108:	4620      	mov	r0, r4
 801510a:	e9cd 8500 	strd	r8, r5, [sp]
 801510e:	f7ff ff5d 	bl	8014fcc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015112:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015116:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801511a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801511e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015122:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8015126:	f8ad 301e 	strh.w	r3, [sp, #30]
 801512a:	6823      	ldr	r3, [r4, #0]
 801512c:	9d02      	ldr	r5, [sp, #8]
 801512e:	9006      	str	r0, [sp, #24]
 8015130:	4620      	mov	r0, r4
 8015132:	f8ad 6020 	strh.w	r6, [sp, #32]
 8015136:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801513a:	f8cd 9014 	str.w	r9, [sp, #20]
 801513e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015144:	4798      	blx	r3
 8015146:	4228      	tst	r0, r5
 8015148:	d106      	bne.n	8015158 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801514a:	4b07      	ldr	r3, [pc, #28]	; (8015168 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801514c:	f240 212e 	movw	r1, #558	; 0x22e
 8015150:	4a06      	ldr	r2, [pc, #24]	; (801516c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015152:	4807      	ldr	r0, [pc, #28]	; (8015170 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015154:	f010 f97e 	bl	8025454 <__assert_func>
 8015158:	6860      	ldr	r0, [r4, #4]
 801515a:	a902      	add	r1, sp, #8
 801515c:	6803      	ldr	r3, [r0, #0]
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	4798      	blx	r3
 8015162:	b00b      	add	sp, #44	; 0x2c
 8015164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015168:	080282a3 	.word	0x080282a3
 801516c:	08028892 	.word	0x08028892
 8015170:	0802841d 	.word	0x0802841d

08015174 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015174:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015178:	461f      	mov	r7, r3
 801517a:	4b0b      	ldr	r3, [pc, #44]	; (80151a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801517c:	460d      	mov	r5, r1
 801517e:	4616      	mov	r6, r2
 8015180:	f8b3 8000 	ldrh.w	r8, [r3]
 8015184:	4604      	mov	r4, r0
 8015186:	f7f0 f981 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 801518a:	6803      	ldr	r3, [r0, #0]
 801518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801518e:	4798      	blx	r3
 8015190:	463b      	mov	r3, r7
 8015192:	4632      	mov	r2, r6
 8015194:	4629      	mov	r1, r5
 8015196:	e9cd 8000 	strd	r8, r0, [sp]
 801519a:	4620      	mov	r0, r4
 801519c:	f7ff ff16 	bl	8014fcc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80151a0:	b002      	add	sp, #8
 80151a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151a6:	bf00      	nop
 80151a8:	20056536 	.word	0x20056536

080151ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80151ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151b0:	4698      	mov	r8, r3
 80151b2:	b088      	sub	sp, #32
 80151b4:	2300      	movs	r3, #0
 80151b6:	4617      	mov	r7, r2
 80151b8:	4604      	mov	r4, r0
 80151ba:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80151be:	9303      	str	r3, [sp, #12]
 80151c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80151c4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80151c8:	f8ad 6014 	strh.w	r6, [sp, #20]
 80151cc:	f8ad 5016 	strh.w	r5, [sp, #22]
 80151d0:	e9cd 3100 	strd	r3, r1, [sp]
 80151d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80151d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80151dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80151e0:	f88d 301c 	strb.w	r3, [sp, #28]
 80151e4:	f7ff fe1c 	bl	8014e20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80151e8:	4642      	mov	r2, r8
 80151ea:	4603      	mov	r3, r0
 80151ec:	4639      	mov	r1, r7
 80151ee:	4620      	mov	r0, r4
 80151f0:	f7ff ffc0 	bl	8015174 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80151f4:	4b16      	ldr	r3, [pc, #88]	; (8015250 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80151f6:	9004      	str	r0, [sp, #16]
 80151f8:	881b      	ldrh	r3, [r3, #0]
 80151fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80151fe:	f7f0 f945 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8015202:	6803      	ldr	r3, [r0, #0]
 8015204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015206:	4798      	blx	r3
 8015208:	f88d 001e 	strb.w	r0, [sp, #30]
 801520c:	f88d 001d 	strb.w	r0, [sp, #29]
 8015210:	b106      	cbz	r6, 8015214 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015212:	b935      	cbnz	r5, 8015222 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015214:	4b0f      	ldr	r3, [pc, #60]	; (8015254 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8015216:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 801521a:	4a0f      	ldr	r2, [pc, #60]	; (8015258 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801521c:	480f      	ldr	r0, [pc, #60]	; (801525c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801521e:	f010 f919 	bl	8025454 <__assert_func>
 8015222:	6823      	ldr	r3, [r4, #0]
 8015224:	4620      	mov	r0, r4
 8015226:	9d00      	ldr	r5, [sp, #0]
 8015228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801522a:	4798      	blx	r3
 801522c:	4228      	tst	r0, r5
 801522e:	d104      	bne.n	801523a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015230:	4b0b      	ldr	r3, [pc, #44]	; (8015260 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015232:	f240 11ed 	movw	r1, #493	; 0x1ed
 8015236:	4a08      	ldr	r2, [pc, #32]	; (8015258 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015238:	e7f0      	b.n	801521c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801523a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801523c:	4669      	mov	r1, sp
 801523e:	6860      	ldr	r0, [r4, #4]
 8015240:	9303      	str	r3, [sp, #12]
 8015242:	6803      	ldr	r3, [r0, #0]
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	4798      	blx	r3
 8015248:	b008      	add	sp, #32
 801524a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801524e:	bf00      	nop
 8015250:	20056536 	.word	0x20056536
 8015254:	0802826b 	.word	0x0802826b
 8015258:	08028673 	.word	0x08028673
 801525c:	0802841d 	.word	0x0802841d
 8015260:	080282a3 	.word	0x080282a3

08015264 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015264:	b570      	push	{r4, r5, r6, lr}
 8015266:	b08a      	sub	sp, #40	; 0x28
 8015268:	4604      	mov	r4, r0
 801526a:	466b      	mov	r3, sp
 801526c:	e883 0006 	stmia.w	r3, {r1, r2}
 8015270:	4b1f      	ldr	r3, [pc, #124]	; (80152f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015272:	781b      	ldrb	r3, [r3, #0]
 8015274:	b933      	cbnz	r3, 8015284 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8015276:	4b1f      	ldr	r3, [pc, #124]	; (80152f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015278:	f240 213f 	movw	r1, #575	; 0x23f
 801527c:	4a1e      	ldr	r2, [pc, #120]	; (80152f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801527e:	481f      	ldr	r0, [pc, #124]	; (80152fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015280:	f010 f8e8 	bl	8025454 <__assert_func>
 8015284:	2300      	movs	r3, #0
 8015286:	f8bd 5000 	ldrh.w	r5, [sp]
 801528a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801528e:	9305      	str	r3, [sp, #20]
 8015290:	2301      	movs	r3, #1
 8015292:	9302      	str	r3, [sp, #8]
 8015294:	6803      	ldr	r3, [r0, #0]
 8015296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015298:	4798      	blx	r3
 801529a:	4632      	mov	r2, r6
 801529c:	4629      	mov	r1, r5
 801529e:	4603      	mov	r3, r0
 80152a0:	4620      	mov	r0, r4
 80152a2:	f7ff ff67 	bl	8015174 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80152a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80152a8:	9003      	str	r0, [sp, #12]
 80152aa:	9306      	str	r3, [sp, #24]
 80152ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80152b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80152b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80152b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80152bc:	4b10      	ldr	r3, [pc, #64]	; (8015300 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80152be:	881b      	ldrh	r3, [r3, #0]
 80152c0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80152c4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80152c8:	f7f0 f8e0 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 80152cc:	6803      	ldr	r3, [r0, #0]
 80152ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152d0:	4798      	blx	r3
 80152d2:	23ff      	movs	r3, #255	; 0xff
 80152d4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80152d8:	a902      	add	r1, sp, #8
 80152da:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80152de:	6860      	ldr	r0, [r4, #4]
 80152e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80152e4:	6803      	ldr	r3, [r0, #0]
 80152e6:	685b      	ldr	r3, [r3, #4]
 80152e8:	4798      	blx	r3
 80152ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80152ec:	b00a      	add	sp, #40	; 0x28
 80152ee:	bd70      	pop	{r4, r5, r6, pc}
 80152f0:	2005653b 	.word	0x2005653b
 80152f4:	0802836a 	.word	0x0802836a
 80152f8:	08028717 	.word	0x08028717
 80152fc:	0802841d 	.word	0x0802841d
 8015300:	20056536 	.word	0x20056536

08015304 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015306:	b08b      	sub	sp, #44	; 0x2c
 8015308:	4604      	mov	r4, r0
 801530a:	466d      	mov	r5, sp
 801530c:	e885 0006 	stmia.w	r5, {r1, r2}
 8015310:	461d      	mov	r5, r3
 8015312:	2300      	movs	r3, #0
 8015314:	f8bd 6000 	ldrh.w	r6, [sp]
 8015318:	9305      	str	r3, [sp, #20]
 801531a:	2301      	movs	r3, #1
 801531c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015320:	9302      	str	r3, [sp, #8]
 8015322:	6803      	ldr	r3, [r0, #0]
 8015324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015326:	4798      	blx	r3
 8015328:	463a      	mov	r2, r7
 801532a:	4631      	mov	r1, r6
 801532c:	4603      	mov	r3, r0
 801532e:	4620      	mov	r0, r4
 8015330:	f7ff ff20 	bl	8015174 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015334:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015338:	9003      	str	r0, [sp, #12]
 801533a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801533e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015342:	9506      	str	r5, [sp, #24]
 8015344:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015348:	4b0d      	ldr	r3, [pc, #52]	; (8015380 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801534a:	881b      	ldrh	r3, [r3, #0]
 801534c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015350:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015352:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015356:	f7f0 f899 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 801535a:	6803      	ldr	r3, [r0, #0]
 801535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801535e:	4798      	blx	r3
 8015360:	23ff      	movs	r3, #255	; 0xff
 8015362:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015366:	a902      	add	r1, sp, #8
 8015368:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801536c:	6860      	ldr	r0, [r4, #4]
 801536e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015372:	6803      	ldr	r3, [r0, #0]
 8015374:	685b      	ldr	r3, [r3, #4]
 8015376:	4798      	blx	r3
 8015378:	4628      	mov	r0, r5
 801537a:	b00b      	add	sp, #44	; 0x2c
 801537c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801537e:	bf00      	nop
 8015380:	20056536 	.word	0x20056536

08015384 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015384:	b570      	push	{r4, r5, r6, lr}
 8015386:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801538a:	4604      	mov	r4, r0
 801538c:	b19b      	cbz	r3, 80153b6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801538e:	2002      	movs	r0, #2
 8015390:	f7ed fb3c 	bl	8002a0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015394:	2300      	movs	r3, #0
 8015396:	4620      	mov	r0, r4
 8015398:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801539c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80153a0:	6823      	ldr	r3, [r4, #0]
 80153a2:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80153a6:	f7ff fd3b 	bl	8014e20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80153aa:	4601      	mov	r1, r0
 80153ac:	4620      	mov	r0, r4
 80153ae:	462b      	mov	r3, r5
 80153b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153b4:	4718      	bx	r3
 80153b6:	bd70      	pop	{r4, r5, r6, pc}

080153b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80153b8:	b538      	push	{r3, r4, r5, lr}
 80153ba:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80153be:	4604      	mov	r4, r0
 80153c0:	460d      	mov	r5, r1
 80153c2:	428a      	cmp	r2, r1
 80153c4:	d008      	beq.n	80153d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 80153c6:	2a01      	cmp	r2, #1
 80153c8:	6803      	ldr	r3, [r0, #0]
 80153ca:	d106      	bne.n	80153da <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80153cc:	b929      	cbnz	r1, 80153da <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80153ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80153d2:	4798      	blx	r3
 80153d4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80153d8:	bd38      	pop	{r3, r4, r5, pc}
 80153da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80153de:	4620      	mov	r0, r4
 80153e0:	e7f7      	b.n	80153d2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

080153e4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80153e4:	4b0d      	ldr	r3, [pc, #52]	; (801541c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80153e6:	b510      	push	{r4, lr}
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	4604      	mov	r4, r0
 80153ec:	b95b      	cbnz	r3, 8015406 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80153ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80153f2:	2b02      	cmp	r3, #2
 80153f4:	d007      	beq.n	8015406 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80153f6:	6840      	ldr	r0, [r0, #4]
 80153f8:	f000 f93a 	bl	8015670 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80153fc:	b118      	cbz	r0, 8015406 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80153fe:	6862      	ldr	r2, [r4, #4]
 8015400:	7a53      	ldrb	r3, [r2, #9]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d0fc      	beq.n	8015400 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015406:	f7ed fd4d 	bl	8002ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801540a:	4620      	mov	r0, r4
 801540c:	2100      	movs	r1, #0
 801540e:	f7ff ffd3 	bl	80153b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015412:	4620      	mov	r0, r4
 8015414:	f7ff fd04 	bl	8014e20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015418:	bd10      	pop	{r4, pc}
 801541a:	bf00      	nop
 801541c:	2005653a 	.word	0x2005653a

08015420 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015420:	4770      	bx	lr

08015422 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015422:	2000      	movs	r0, #0
 8015424:	4770      	bx	lr

08015426 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015426:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801542a:	1a13      	subs	r3, r2, r0
 801542c:	4258      	negs	r0, r3
 801542e:	4158      	adcs	r0, r3
 8015430:	4770      	bx	lr

08015432 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015432:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015436:	1a9b      	subs	r3, r3, r2
 8015438:	2b00      	cmp	r3, #0
 801543a:	bfdc      	itt	le
 801543c:	6882      	ldrle	r2, [r0, #8]
 801543e:	189b      	addle	r3, r3, r2
 8015440:	2b01      	cmp	r3, #1
 8015442:	bfcc      	ite	gt
 8015444:	2000      	movgt	r0, #0
 8015446:	2001      	movle	r0, #1
 8015448:	4770      	bx	lr

0801544a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801544a:	6902      	ldr	r2, [r0, #16]
 801544c:	6840      	ldr	r0, [r0, #4]
 801544e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8015452:	4770      	bx	lr

08015454 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015454:	6803      	ldr	r3, [r0, #0]
 8015456:	691b      	ldr	r3, [r3, #16]
 8015458:	4718      	bx	r3

0801545a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801545a:	4770      	bx	lr

0801545c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801545c:	4770      	bx	lr
	...

08015460 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015460:	2301      	movs	r3, #1
 8015462:	b570      	push	{r4, r5, r6, lr}
 8015464:	7203      	strb	r3, [r0, #8]
 8015466:	4604      	mov	r4, r0
 8015468:	6840      	ldr	r0, [r0, #4]
 801546a:	6803      	ldr	r3, [r0, #0]
 801546c:	699b      	ldr	r3, [r3, #24]
 801546e:	4798      	blx	r3
 8015470:	6803      	ldr	r3, [r0, #0]
 8015472:	4605      	mov	r5, r0
 8015474:	2b40      	cmp	r3, #64	; 0x40
 8015476:	d039      	beq.n	80154ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015478:	d815      	bhi.n	80154a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801547a:	2b04      	cmp	r3, #4
 801547c:	d022      	beq.n	80154c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801547e:	d808      	bhi.n	8015492 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015480:	2b01      	cmp	r3, #1
 8015482:	d033      	beq.n	80154ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015484:	2b02      	cmp	r3, #2
 8015486:	d108      	bne.n	801549a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8015488:	6823      	ldr	r3, [r4, #0]
 801548a:	4620      	mov	r0, r4
 801548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801548e:	4798      	blx	r3
 8015490:	e025      	b.n	80154de <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8015492:	2b08      	cmp	r3, #8
 8015494:	d01e      	beq.n	80154d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8015496:	2b20      	cmp	r3, #32
 8015498:	d028      	beq.n	80154ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801549a:	4b17      	ldr	r3, [pc, #92]	; (80154f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 801549c:	218b      	movs	r1, #139	; 0x8b
 801549e:	4a17      	ldr	r2, [pc, #92]	; (80154fc <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80154a0:	4817      	ldr	r0, [pc, #92]	; (8015500 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80154a2:	f00f ffd7 	bl	8025454 <__assert_func>
 80154a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80154aa:	d01f      	beq.n	80154ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80154ac:	d804      	bhi.n	80154b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 80154ae:	2b80      	cmp	r3, #128	; 0x80
 80154b0:	d01c      	beq.n	80154ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80154b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154b6:	e7ef      	b.n	8015498 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80154b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80154bc:	d016      	beq.n	80154ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80154be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80154c2:	e7e0      	b.n	8015486 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80154c4:	6823      	ldr	r3, [r4, #0]
 80154c6:	7f01      	ldrb	r1, [r0, #28]
 80154c8:	4620      	mov	r0, r4
 80154ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154cc:	4798      	blx	r3
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154d2:	e006      	b.n	80154e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80154d4:	6823      	ldr	r3, [r4, #0]
 80154d6:	7f01      	ldrb	r1, [r0, #28]
 80154d8:	4620      	mov	r0, r4
 80154da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154dc:	4798      	blx	r3
 80154de:	6823      	ldr	r3, [r4, #0]
 80154e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154e2:	4629      	mov	r1, r5
 80154e4:	4620      	mov	r0, r4
 80154e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154ea:	4718      	bx	r3
 80154ec:	6823      	ldr	r3, [r4, #0]
 80154ee:	4620      	mov	r0, r4
 80154f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154f2:	4798      	blx	r3
 80154f4:	e7eb      	b.n	80154ce <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80154f6:	bf00      	nop
 80154f8:	08028970 	.word	0x08028970
 80154fc:	08028a80 	.word	0x08028a80
 8015500:	08028995 	.word	0x08028995

08015504 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015504:	b570      	push	{r4, r5, r6, lr}
 8015506:	4604      	mov	r4, r0
 8015508:	460e      	mov	r6, r1
 801550a:	6860      	ldr	r0, [r4, #4]
 801550c:	6803      	ldr	r3, [r0, #0]
 801550e:	685b      	ldr	r3, [r3, #4]
 8015510:	4798      	blx	r3
 8015512:	2800      	cmp	r0, #0
 8015514:	d1f9      	bne.n	801550a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015516:	4d0d      	ldr	r5, [pc, #52]	; (801554c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015518:	6828      	ldr	r0, [r5, #0]
 801551a:	6803      	ldr	r3, [r0, #0]
 801551c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801551e:	4798      	blx	r3
 8015520:	f7ed fcda 	bl	8002ed8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015524:	6828      	ldr	r0, [r5, #0]
 8015526:	2101      	movs	r1, #1
 8015528:	f7ff ff46 	bl	80153b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801552c:	6860      	ldr	r0, [r4, #4]
 801552e:	4631      	mov	r1, r6
 8015530:	6803      	ldr	r3, [r0, #0]
 8015532:	689b      	ldr	r3, [r3, #8]
 8015534:	4798      	blx	r3
 8015536:	6823      	ldr	r3, [r4, #0]
 8015538:	4620      	mov	r0, r4
 801553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801553c:	4798      	blx	r3
 801553e:	6828      	ldr	r0, [r5, #0]
 8015540:	6803      	ldr	r3, [r0, #0]
 8015542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015548:	4718      	bx	r3
 801554a:	bf00      	nop
 801554c:	2005653c 	.word	0x2005653c

08015550 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015550:	b508      	push	{r3, lr}
 8015552:	f7ed fca7 	bl	8002ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801555a:	f7ed bcb1 	b.w	8002ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801555e <_ZN8touchgfx13DMA_Interface5startEv>:
 801555e:	b510      	push	{r4, lr}
 8015560:	4604      	mov	r4, r0
 8015562:	6840      	ldr	r0, [r0, #4]
 8015564:	6803      	ldr	r3, [r0, #0]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	4798      	blx	r3
 801556a:	b948      	cbnz	r0, 8015580 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801556c:	7a63      	ldrb	r3, [r4, #9]
 801556e:	b13b      	cbz	r3, 8015580 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015570:	7a23      	ldrb	r3, [r4, #8]
 8015572:	b92b      	cbnz	r3, 8015580 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015574:	6823      	ldr	r3, [r4, #0]
 8015576:	4620      	mov	r0, r4
 8015578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801557a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801557e:	4718      	bx	r3
 8015580:	bd10      	pop	{r4, pc}
	...

08015584 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015584:	b510      	push	{r4, lr}
 8015586:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801558a:	1b12      	subs	r2, r2, r4
 801558c:	2a00      	cmp	r2, #0
 801558e:	bfdc      	itt	le
 8015590:	6883      	ldrle	r3, [r0, #8]
 8015592:	18d2      	addle	r2, r2, r3
 8015594:	2a01      	cmp	r2, #1
 8015596:	dd18      	ble.n	80155ca <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8015598:	6843      	ldr	r3, [r0, #4]
 801559a:	f101 021c 	add.w	r2, r1, #28
 801559e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80155a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80155a6:	4291      	cmp	r1, r2
 80155a8:	f843 4b04 	str.w	r4, [r3], #4
 80155ac:	d1f9      	bne.n	80155a2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80155ae:	880a      	ldrh	r2, [r1, #0]
 80155b0:	801a      	strh	r2, [r3, #0]
 80155b2:	788a      	ldrb	r2, [r1, #2]
 80155b4:	709a      	strb	r2, [r3, #2]
 80155b6:	68c3      	ldr	r3, [r0, #12]
 80155b8:	6882      	ldr	r2, [r0, #8]
 80155ba:	f3bf 8f5b 	dmb	ish
 80155be:	3301      	adds	r3, #1
 80155c0:	429a      	cmp	r2, r3
 80155c2:	bfd8      	it	le
 80155c4:	1a9b      	suble	r3, r3, r2
 80155c6:	60c3      	str	r3, [r0, #12]
 80155c8:	bd10      	pop	{r4, pc}
 80155ca:	4b03      	ldr	r3, [pc, #12]	; (80155d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80155cc:	2139      	movs	r1, #57	; 0x39
 80155ce:	4a03      	ldr	r2, [pc, #12]	; (80155dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80155d0:	4803      	ldr	r0, [pc, #12]	; (80155e0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80155d2:	f00f ff3f 	bl	8025454 <__assert_func>
 80155d6:	bf00      	nop
 80155d8:	080289bb 	.word	0x080289bb
 80155dc:	08028ab0 	.word	0x08028ab0
 80155e0:	08028995 	.word	0x08028995

080155e4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80155e4:	b510      	push	{r4, lr}
 80155e6:	6803      	ldr	r3, [r0, #0]
 80155e8:	4604      	mov	r4, r0
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	4798      	blx	r3
 80155ee:	b128      	cbz	r0, 80155fc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80155f0:	4b07      	ldr	r3, [pc, #28]	; (8015610 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80155f2:	213f      	movs	r1, #63	; 0x3f
 80155f4:	4a07      	ldr	r2, [pc, #28]	; (8015614 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80155f6:	4808      	ldr	r0, [pc, #32]	; (8015618 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80155f8:	f00f ff2c 	bl	8025454 <__assert_func>
 80155fc:	6923      	ldr	r3, [r4, #16]
 80155fe:	68a2      	ldr	r2, [r4, #8]
 8015600:	f3bf 8f5b 	dmb	ish
 8015604:	3301      	adds	r3, #1
 8015606:	429a      	cmp	r2, r3
 8015608:	bfd8      	it	le
 801560a:	1a9b      	suble	r3, r3, r2
 801560c:	6123      	str	r3, [r4, #16]
 801560e:	bd10      	pop	{r4, pc}
 8015610:	080289de 	.word	0x080289de
 8015614:	08028afe 	.word	0x08028afe
 8015618:	08028995 	.word	0x08028995

0801561c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801561c:	b570      	push	{r4, r5, r6, lr}
 801561e:	4604      	mov	r4, r0
 8015620:	6840      	ldr	r0, [r0, #4]
 8015622:	6803      	ldr	r3, [r0, #0]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	4798      	blx	r3
 8015628:	4605      	mov	r5, r0
 801562a:	b930      	cbnz	r0, 801563a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801562c:	7a23      	ldrb	r3, [r4, #8]
 801562e:	b123      	cbz	r3, 801563a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015630:	6860      	ldr	r0, [r4, #4]
 8015632:	6803      	ldr	r3, [r0, #0]
 8015634:	695b      	ldr	r3, [r3, #20]
 8015636:	4798      	blx	r3
 8015638:	7225      	strb	r5, [r4, #8]
 801563a:	6860      	ldr	r0, [r4, #4]
 801563c:	6803      	ldr	r3, [r0, #0]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	4798      	blx	r3
 8015642:	b928      	cbnz	r0, 8015650 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015644:	6823      	ldr	r3, [r4, #0]
 8015646:	4620      	mov	r0, r4
 8015648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801564a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801564e:	4718      	bx	r3
 8015650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015654:	f7ed bc4c 	b.w	8002ef0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015658 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015658:	b510      	push	{r4, lr}
 801565a:	6082      	str	r2, [r0, #8]
 801565c:	2200      	movs	r2, #0
 801565e:	4c03      	ldr	r4, [pc, #12]	; (801566c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015660:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015664:	e9c0 4100 	strd	r4, r1, [r0]
 8015668:	bd10      	pop	{r4, pc}
 801566a:	bf00      	nop
 801566c:	08028a64 	.word	0x08028a64

08015670 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015670:	6840      	ldr	r0, [r0, #4]
 8015672:	6803      	ldr	r3, [r0, #0]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	4718      	bx	r3

08015678 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8015678:	2001      	movs	r0, #1
 801567a:	4770      	bx	lr

0801567c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801567c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015680:	460d      	mov	r5, r1
 8015682:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015686:	b085      	sub	sp, #20
 8015688:	4690      	mov	r8, r2
 801568a:	4411      	add	r1, r2
 801568c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015690:	4699      	mov	r9, r3
 8015692:	6803      	ldr	r3, [r0, #0]
 8015694:	60c1      	str	r1, [r0, #12]
 8015696:	4604      	mov	r4, r0
 8015698:	990c      	ldr	r1, [sp, #48]	; 0x30
 801569a:	440a      	add	r2, r1
 801569c:	6102      	str	r2, [r0, #16]
 801569e:	68db      	ldr	r3, [r3, #12]
 80156a0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80156a4:	4798      	blx	r3
 80156a6:	2800      	cmp	r0, #0
 80156a8:	d03a      	beq.n	8015720 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 80156aa:	44c8      	add	r8, r9
 80156ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80156b0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80156b4:	4445      	add	r5, r8
 80156b6:	442e      	add	r6, r5
 80156b8:	6823      	ldr	r3, [r4, #0]
 80156ba:	f10d 020f 	add.w	r2, sp, #15
 80156be:	a903      	add	r1, sp, #12
 80156c0:	4620      	mov	r0, r4
 80156c2:	9200      	str	r2, [sp, #0]
 80156c4:	f10d 020d 	add.w	r2, sp, #13
 80156c8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80156cc:	f10d 030e 	add.w	r3, sp, #14
 80156d0:	47c0      	blx	r8
 80156d2:	b1f0      	cbz	r0, 8015712 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 80156d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80156d8:	7a20      	ldrb	r0, [r4, #8]
 80156da:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80156de:	4358      	muls	r0, r3
 80156e0:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80156e4:	1c43      	adds	r3, r0, #1
 80156e6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80156ea:	7838      	ldrb	r0, [r7, #0]
 80156ec:	121b      	asrs	r3, r3, #8
 80156ee:	fb10 f003 	smulbb	r0, r0, r3
 80156f2:	b283      	uxth	r3, r0
 80156f4:	1c58      	adds	r0, r3, #1
 80156f6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80156fa:	6823      	ldr	r3, [r4, #0]
 80156fc:	1200      	asrs	r0, r0, #8
 80156fe:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8015702:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8015706:	28ff      	cmp	r0, #255	; 0xff
 8015708:	d10d      	bne.n	8015726 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 801570a:	9100      	str	r1, [sp, #0]
 801570c:	4629      	mov	r1, r5
 801570e:	4620      	mov	r0, r4
 8015710:	47c0      	blx	r8
 8015712:	68e3      	ldr	r3, [r4, #12]
 8015714:	3503      	adds	r5, #3
 8015716:	3701      	adds	r7, #1
 8015718:	3301      	adds	r3, #1
 801571a:	42ae      	cmp	r6, r5
 801571c:	60e3      	str	r3, [r4, #12]
 801571e:	d8cb      	bhi.n	80156b8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 8015720:	b005      	add	sp, #20
 8015722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015726:	fa1f fc80 	uxth.w	ip, r0
 801572a:	43c0      	mvns	r0, r0
 801572c:	f895 e002 	ldrb.w	lr, [r5, #2]
 8015730:	fb12 f20c 	smulbb	r2, r2, ip
 8015734:	b2c0      	uxtb	r0, r0
 8015736:	fb13 f30c 	smulbb	r3, r3, ip
 801573a:	fb0e 2200 	mla	r2, lr, r0, r2
 801573e:	f895 e001 	ldrb.w	lr, [r5, #1]
 8015742:	fb11 f10c 	smulbb	r1, r1, ip
 8015746:	fb0e 3300 	mla	r3, lr, r0, r3
 801574a:	f895 e000 	ldrb.w	lr, [r5]
 801574e:	b292      	uxth	r2, r2
 8015750:	b29b      	uxth	r3, r3
 8015752:	fb0e 1000 	mla	r0, lr, r0, r1
 8015756:	1c59      	adds	r1, r3, #1
 8015758:	b280      	uxth	r0, r0
 801575a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801575e:	1c51      	adds	r1, r2, #1
 8015760:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015764:	1c41      	adds	r1, r0, #1
 8015766:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801576a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801576e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015772:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015776:	9000      	str	r0, [sp, #0]
 8015778:	e7c8      	b.n	801570c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0801577a <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801577a:	f89d 0000 	ldrb.w	r0, [sp]
 801577e:	704b      	strb	r3, [r1, #1]
 8015780:	7008      	strb	r0, [r1, #0]
 8015782:	708a      	strb	r2, [r1, #2]
 8015784:	4770      	bx	lr

08015786 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8015786:	4413      	add	r3, r2
 8015788:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801578c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801578e:	4419      	add	r1, r3
 8015790:	7a03      	ldrb	r3, [r0, #8]
 8015792:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 8015796:	2bff      	cmp	r3, #255	; 0xff
 8015798:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801579c:	440e      	add	r6, r1
 801579e:	d13d      	bne.n	801581c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 80157a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80157a4:	3103      	adds	r1, #3
 80157a6:	7d87      	ldrb	r7, [r0, #22]
 80157a8:	2bff      	cmp	r3, #255	; 0xff
 80157aa:	d10a      	bne.n	80157c2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 80157ac:	f801 7c03 	strb.w	r7, [r1, #-3]
 80157b0:	7d43      	ldrb	r3, [r0, #21]
 80157b2:	f801 3c02 	strb.w	r3, [r1, #-2]
 80157b6:	7d03      	ldrb	r3, [r0, #20]
 80157b8:	f801 3c01 	strb.w	r3, [r1, #-1]
 80157bc:	428e      	cmp	r6, r1
 80157be:	d8ef      	bhi.n	80157a0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 80157c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157c2:	b29a      	uxth	r2, r3
 80157c4:	43db      	mvns	r3, r3
 80157c6:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80157ca:	fb17 f702 	smulbb	r7, r7, r2
 80157ce:	b2db      	uxtb	r3, r3
 80157d0:	fb05 7503 	mla	r5, r5, r3, r7
 80157d4:	b2ad      	uxth	r5, r5
 80157d6:	1c6f      	adds	r7, r5, #1
 80157d8:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80157dc:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 80157e0:	fb17 f703 	smulbb	r7, r7, r3
 80157e4:	122d      	asrs	r5, r5, #8
 80157e6:	f801 5c03 	strb.w	r5, [r1, #-3]
 80157ea:	7d45      	ldrb	r5, [r0, #21]
 80157ec:	fb05 7502 	mla	r5, r5, r2, r7
 80157f0:	b2ad      	uxth	r5, r5
 80157f2:	1c6f      	adds	r7, r5, #1
 80157f4:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80157f8:	122d      	asrs	r5, r5, #8
 80157fa:	f801 5c02 	strb.w	r5, [r1, #-2]
 80157fe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8015802:	7d07      	ldrb	r7, [r0, #20]
 8015804:	fb15 f303 	smulbb	r3, r5, r3
 8015808:	fb07 3202 	mla	r2, r7, r2, r3
 801580c:	b292      	uxth	r2, r2
 801580e:	1c53      	adds	r3, r2, #1
 8015810:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8015814:	1212      	asrs	r2, r2, #8
 8015816:	f801 2c01 	strb.w	r2, [r1, #-1]
 801581a:	e7cf      	b.n	80157bc <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 801581c:	3103      	adds	r1, #3
 801581e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8015822:	428e      	cmp	r6, r1
 8015824:	7a03      	ldrb	r3, [r0, #8]
 8015826:	f101 0103 	add.w	r1, r1, #3
 801582a:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801582e:	fb02 f303 	mul.w	r3, r2, r3
 8015832:	f103 0201 	add.w	r2, r3, #1
 8015836:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801583a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801583e:	b295      	uxth	r5, r2
 8015840:	ea6f 0202 	mvn.w	r2, r2
 8015844:	b2d3      	uxtb	r3, r2
 8015846:	7d82      	ldrb	r2, [r0, #22]
 8015848:	fb1c fc03 	smulbb	ip, ip, r3
 801584c:	fb02 c205 	mla	r2, r2, r5, ip
 8015850:	b292      	uxth	r2, r2
 8015852:	f102 0c01 	add.w	ip, r2, #1
 8015856:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801585a:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801585e:	fb1c fc03 	smulbb	ip, ip, r3
 8015862:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015866:	f801 2c06 	strb.w	r2, [r1, #-6]
 801586a:	7d42      	ldrb	r2, [r0, #21]
 801586c:	fb02 c205 	mla	r2, r2, r5, ip
 8015870:	b292      	uxth	r2, r2
 8015872:	f102 0c01 	add.w	ip, r2, #1
 8015876:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801587a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801587e:	f801 2c05 	strb.w	r2, [r1, #-5]
 8015882:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8015886:	f890 c014 	ldrb.w	ip, [r0, #20]
 801588a:	fb12 f303 	smulbb	r3, r2, r3
 801588e:	fb0c 3305 	mla	r3, ip, r5, r3
 8015892:	b29b      	uxth	r3, r3
 8015894:	f103 0201 	add.w	r2, r3, #1
 8015898:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801589c:	ea4f 2323 	mov.w	r3, r3, asr #8
 80158a0:	f801 3c04 	strb.w	r3, [r1, #-4]
 80158a4:	d8bb      	bhi.n	801581e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 80158a6:	e78b      	b.n	80157c0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

080158a8 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 80158a8:	b510      	push	{r4, lr}
 80158aa:	7d04      	ldrb	r4, [r0, #20]
 80158ac:	700c      	strb	r4, [r1, #0]
 80158ae:	7d41      	ldrb	r1, [r0, #21]
 80158b0:	7011      	strb	r1, [r2, #0]
 80158b2:	7d82      	ldrb	r2, [r0, #22]
 80158b4:	2001      	movs	r0, #1
 80158b6:	701a      	strb	r2, [r3, #0]
 80158b8:	22ff      	movs	r2, #255	; 0xff
 80158ba:	9b02      	ldr	r3, [sp, #8]
 80158bc:	701a      	strb	r2, [r3, #0]
 80158be:	bd10      	pop	{r4, pc}

080158c0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80158c0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80158c4:	4770      	bx	lr

080158c6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80158c6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80158ca:	4770      	bx	lr

080158cc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80158cc:	6281      	str	r1, [r0, #40]	; 0x28
 80158ce:	4770      	bx	lr

080158d0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80158d0:	b510      	push	{r4, lr}
 80158d2:	2200      	movs	r2, #0
 80158d4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80158d8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80158dc:	8002      	strh	r2, [r0, #0]
 80158de:	8042      	strh	r2, [r0, #2]
 80158e0:	8084      	strh	r4, [r0, #4]
 80158e2:	80c1      	strh	r1, [r0, #6]
 80158e4:	bd10      	pop	{r4, pc}

080158e6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80158e6:	2200      	movs	r2, #0
 80158e8:	8002      	strh	r2, [r0, #0]
 80158ea:	8042      	strh	r2, [r0, #2]
 80158ec:	8082      	strh	r2, [r0, #4]
 80158ee:	80c2      	strh	r2, [r0, #6]
 80158f0:	4770      	bx	lr
	...

080158f4 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80158f4:	b508      	push	{r3, lr}
 80158f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80158f8:	b928      	cbnz	r0, 8015906 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80158fa:	4b03      	ldr	r3, [pc, #12]	; (8015908 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80158fc:	2126      	movs	r1, #38	; 0x26
 80158fe:	4a03      	ldr	r2, [pc, #12]	; (801590c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8015900:	4803      	ldr	r0, [pc, #12]	; (8015910 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8015902:	f00f fda7 	bl	8025454 <__assert_func>
 8015906:	bd08      	pop	{r3, pc}
 8015908:	08028b70 	.word	0x08028b70
 801590c:	08028c50 	.word	0x08028c50
 8015910:	08028b97 	.word	0x08028b97

08015914 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8015914:	b510      	push	{r4, lr}
 8015916:	f9b1 4000 	ldrsh.w	r4, [r1]
 801591a:	888a      	ldrh	r2, [r1, #4]
 801591c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015920:	4422      	add	r2, r4
 8015922:	b212      	sxth	r2, r2
 8015924:	4293      	cmp	r3, r2
 8015926:	da15      	bge.n	8015954 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015928:	8882      	ldrh	r2, [r0, #4]
 801592a:	4413      	add	r3, r2
 801592c:	b21b      	sxth	r3, r3
 801592e:	429c      	cmp	r4, r3
 8015930:	da10      	bge.n	8015954 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015932:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015936:	88c9      	ldrh	r1, [r1, #6]
 8015938:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801593c:	4419      	add	r1, r3
 801593e:	b209      	sxth	r1, r1
 8015940:	428a      	cmp	r2, r1
 8015942:	da07      	bge.n	8015954 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015944:	88c0      	ldrh	r0, [r0, #6]
 8015946:	4410      	add	r0, r2
 8015948:	b200      	sxth	r0, r0
 801594a:	4283      	cmp	r3, r0
 801594c:	bfac      	ite	ge
 801594e:	2000      	movge	r0, #0
 8015950:	2001      	movlt	r0, #1
 8015952:	bd10      	pop	{r4, pc}
 8015954:	2000      	movs	r0, #0
 8015956:	e7fc      	b.n	8015952 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015958 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8015958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801595c:	b08b      	sub	sp, #44	; 0x2c
 801595e:	4604      	mov	r4, r0
 8015960:	6808      	ldr	r0, [r1, #0]
 8015962:	f04f 0a00 	mov.w	sl, #0
 8015966:	6849      	ldr	r1, [r1, #4]
 8015968:	ab04      	add	r3, sp, #16
 801596a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 801596e:	c303      	stmia	r3!, {r0, r1}
 8015970:	4b35      	ldr	r3, [pc, #212]	; (8015a48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8015972:	4621      	mov	r1, r4
 8015974:	a806      	add	r0, sp, #24
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	2b01      	cmp	r3, #1
 801597a:	6823      	ldr	r3, [r4, #0]
 801597c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801597e:	bf1f      	itttt	ne
 8015980:	f10d 090e 	addne.w	r9, sp, #14
 8015984:	ae05      	addne	r6, sp, #20
 8015986:	f10d 0516 	addne.w	r5, sp, #22
 801598a:	f10d 0812 	addne.w	r8, sp, #18
 801598e:	bf01      	itttt	eq
 8015990:	f10d 0916 	addeq.w	r9, sp, #22
 8015994:	f10d 060e 	addeq.w	r6, sp, #14
 8015998:	ad05      	addeq	r5, sp, #20
 801599a:	f10d 0810 	addeq.w	r8, sp, #16
 801599e:	4798      	blx	r3
 80159a0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80159a4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d042      	beq.n	8015a32 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 80159ac:	4293      	cmp	r3, r2
 80159ae:	bfa8      	it	ge
 80159b0:	4613      	movge	r3, r2
 80159b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80159b6:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80159ba:	2f00      	cmp	r7, #0
 80159bc:	dd21      	ble.n	8015a02 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 80159be:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80159c2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80159c6:	f9b6 2000 	ldrsh.w	r2, [r6]
 80159ca:	f9b9 3000 	ldrsh.w	r3, [r9]
 80159ce:	f8ad 0020 	strh.w	r0, [sp, #32]
 80159d2:	a808      	add	r0, sp, #32
 80159d4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80159d8:	a906      	add	r1, sp, #24
 80159da:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80159de:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80159e2:	f7ff ff97 	bl	8015914 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80159e6:	9001      	str	r0, [sp, #4]
 80159e8:	b1d0      	cbz	r0, 8015a20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80159ea:	6822      	ldr	r2, [r4, #0]
 80159ec:	a908      	add	r1, sp, #32
 80159ee:	4620      	mov	r0, r4
 80159f0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80159f2:	4790      	blx	r2
 80159f4:	b9a0      	cbnz	r0, 8015a20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80159f6:	107f      	asrs	r7, r7, #1
 80159f8:	9b01      	ldr	r3, [sp, #4]
 80159fa:	f8ad 700e 	strh.w	r7, [sp, #14]
 80159fe:	469a      	mov	sl, r3
 8015a00:	e7d9      	b.n	80159b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8015a02:	d10d      	bne.n	8015a20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8015a04:	2301      	movs	r3, #1
 8015a06:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015a0a:	f8b8 2000 	ldrh.w	r2, [r8]
 8015a0e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8015a12:	440a      	add	r2, r1
 8015a14:	f8a8 2000 	strh.w	r2, [r8]
 8015a18:	882b      	ldrh	r3, [r5, #0]
 8015a1a:	1a5b      	subs	r3, r3, r1
 8015a1c:	802b      	strh	r3, [r5, #0]
 8015a1e:	e7bf      	b.n	80159a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015a20:	f1ba 0f00 	cmp.w	sl, #0
 8015a24:	d0f1      	beq.n	8015a0a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8015a26:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8015a2a:	455b      	cmp	r3, fp
 8015a2c:	bf08      	it	eq
 8015a2e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8015a30:	e7eb      	b.n	8015a0a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8015a32:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015a36:	429a      	cmp	r2, r3
 8015a38:	bf04      	itt	eq
 8015a3a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8015a3e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8015a40:	b00b      	add	sp, #44	; 0x2c
 8015a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a46:	bf00      	nop
 8015a48:	20056534 	.word	0x20056534

08015a4c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8015a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a4e:	b085      	sub	sp, #20
 8015a50:	6803      	ldr	r3, [r0, #0]
 8015a52:	4604      	mov	r4, r0
 8015a54:	4601      	mov	r1, r0
 8015a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a58:	4668      	mov	r0, sp
 8015a5a:	4798      	blx	r3
 8015a5c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8015a60:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8015a64:	2300      	movs	r3, #0
 8015a66:	a902      	add	r1, sp, #8
 8015a68:	4668      	mov	r0, sp
 8015a6a:	9302      	str	r3, [sp, #8]
 8015a6c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8015a70:	f8ad 500e 	strh.w	r5, [sp, #14]
 8015a74:	f7ff ff4e 	bl	8015914 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015a78:	b340      	cbz	r0, 8015acc <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 8015a7a:	f9bd 2000 	ldrsh.w	r2, [sp]
 8015a7e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8015a82:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8015a86:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015a8a:	443a      	add	r2, r7
 8015a8c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8015a90:	f8ad 0000 	strh.w	r0, [sp]
 8015a94:	b292      	uxth	r2, r2
 8015a96:	f8ad 1002 	strh.w	r1, [sp, #2]
 8015a9a:	b217      	sxth	r7, r2
 8015a9c:	42be      	cmp	r6, r7
 8015a9e:	bfd8      	it	le
 8015aa0:	b2b2      	uxthle	r2, r6
 8015aa2:	1a12      	subs	r2, r2, r0
 8015aa4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015aa8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015aac:	4413      	add	r3, r2
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	b21a      	sxth	r2, r3
 8015ab2:	4295      	cmp	r5, r2
 8015ab4:	bfd8      	it	le
 8015ab6:	b2ab      	uxthle	r3, r5
 8015ab8:	1a5b      	subs	r3, r3, r1
 8015aba:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015abe:	6823      	ldr	r3, [r4, #0]
 8015ac0:	4669      	mov	r1, sp
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	691b      	ldr	r3, [r3, #16]
 8015ac6:	4798      	blx	r3
 8015ac8:	b005      	add	sp, #20
 8015aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015acc:	e9cd 0000 	strd	r0, r0, [sp]
 8015ad0:	e7f5      	b.n	8015abe <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08015ad4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	2101      	movs	r1, #1
 8015ad8:	8082      	strh	r2, [r0, #4]
 8015ada:	80c2      	strh	r2, [r0, #6]
 8015adc:	8102      	strh	r2, [r0, #8]
 8015ade:	8142      	strh	r2, [r0, #10]
 8015ae0:	8182      	strh	r2, [r0, #12]
 8015ae2:	81c2      	strh	r2, [r0, #14]
 8015ae4:	8202      	strh	r2, [r0, #16]
 8015ae6:	8242      	strh	r2, [r0, #18]
 8015ae8:	61c2      	str	r2, [r0, #28]
 8015aea:	8402      	strh	r2, [r0, #32]
 8015aec:	8442      	strh	r2, [r0, #34]	; 0x22
 8015aee:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015af2:	6282      	str	r2, [r0, #40]	; 0x28
 8015af4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8015af8:	4905      	ldr	r1, [pc, #20]	; (8015b10 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 8015afa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015afe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015b02:	6001      	str	r1, [r0, #0]
 8015b04:	8582      	strh	r2, [r0, #44]	; 0x2c
 8015b06:	22ff      	movs	r2, #255	; 0xff
 8015b08:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8015b0c:	4770      	bx	lr
 8015b0e:	bf00      	nop
 8015b10:	08028bdc 	.word	0x08028bdc

08015b14 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8015b14:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8015b18:	4602      	mov	r2, r0
 8015b1a:	cb03      	ldmia	r3!, {r0, r1}
 8015b1c:	6010      	str	r0, [r2, #0]
 8015b1e:	4610      	mov	r0, r2
 8015b20:	6051      	str	r1, [r2, #4]
 8015b22:	4770      	bx	lr

08015b24 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8015b24:	b507      	push	{r0, r1, r2, lr}
 8015b26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015b2a:	ab01      	add	r3, sp, #4
 8015b2c:	6809      	ldr	r1, [r1, #0]
 8015b2e:	6800      	ldr	r0, [r0, #0]
 8015b30:	f003 fc74 	bl	801941c <_ZN8touchgfx6muldivElllRl>
 8015b34:	b003      	add	sp, #12
 8015b36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015b3c <_ZN8touchgfx7CWRUtil4sineEi>:
 8015b3c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015b40:	fb90 f3f2 	sdiv	r3, r0, r2
 8015b44:	fb03 0312 	mls	r3, r3, r2, r0
 8015b48:	4413      	add	r3, r2
 8015b4a:	fb93 f0f2 	sdiv	r0, r3, r2
 8015b4e:	fb02 3010 	mls	r0, r2, r0, r3
 8015b52:	4b0a      	ldr	r3, [pc, #40]	; (8015b7c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8015b54:	285a      	cmp	r0, #90	; 0x5a
 8015b56:	dc02      	bgt.n	8015b5e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8015b58:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8015b5c:	4770      	bx	lr
 8015b5e:	28b4      	cmp	r0, #180	; 0xb4
 8015b60:	dc02      	bgt.n	8015b68 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8015b62:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8015b66:	e7f7      	b.n	8015b58 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8015b68:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8015b6c:	bfd4      	ite	le
 8015b6e:	38b4      	suble	r0, #180	; 0xb4
 8015b70:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8015b74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8015b78:	4240      	negs	r0, r0
 8015b7a:	4770      	bx	lr
 8015b7c:	08028cfa 	.word	0x08028cfa

08015b80 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8015b80:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8015b84:	f04f 0300 	mov.w	r3, #0
 8015b88:	bf2c      	ite	cs
 8015b8a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8015b8e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8015b92:	1899      	adds	r1, r3, r2
 8015b94:	4288      	cmp	r0, r1
 8015b96:	bf24      	itt	cs
 8015b98:	1853      	addcs	r3, r2, r1
 8015b9a:	1a40      	subcs	r0, r0, r1
 8015b9c:	0892      	lsrs	r2, r2, #2
 8015b9e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8015ba2:	d1f6      	bne.n	8015b92 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	4770      	bx	lr

08015ba8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8015ba8:	b510      	push	{r4, lr}
 8015baa:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8015bae:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8015bb2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8015bb6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8015bba:	139b      	asrs	r3, r3, #14
 8015bbc:	13a4      	asrs	r4, r4, #14
 8015bbe:	429c      	cmp	r4, r3
 8015bc0:	bfb8      	it	lt
 8015bc2:	461c      	movlt	r4, r3
 8015bc4:	2c01      	cmp	r4, #1
 8015bc6:	dd07      	ble.n	8015bd8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8015bc8:	fb91 f1f4 	sdiv	r1, r1, r4
 8015bcc:	fb90 f0f4 	sdiv	r0, r0, r4
 8015bd0:	f7ff ffea 	bl	8015ba8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015bd4:	4360      	muls	r0, r4
 8015bd6:	bd10      	pop	{r4, pc}
 8015bd8:	4340      	muls	r0, r0
 8015bda:	fb01 0001 	mla	r0, r1, r1, r0
 8015bde:	f7ff ffcf 	bl	8015b80 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8015be2:	e7f8      	b.n	8015bd6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08015be4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8015be4:	2800      	cmp	r0, #0
 8015be6:	b508      	push	{r3, lr}
 8015be8:	da05      	bge.n	8015bf6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8015bea:	4240      	negs	r0, r0
 8015bec:	f7ff fffa 	bl	8015be4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8015bf0:	4240      	negs	r0, r0
 8015bf2:	b240      	sxtb	r0, r0
 8015bf4:	bd08      	pop	{r3, pc}
 8015bf6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015bfa:	dc11      	bgt.n	8015c20 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8015bfc:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8015c00:	dd09      	ble.n	8015c16 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8015c02:	4340      	muls	r0, r0
 8015c04:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8015c08:	f7ff ffba 	bl	8015b80 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8015c0c:	f7ff ffea 	bl	8015be4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8015c10:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8015c14:	e7ed      	b.n	8015bf2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8015c16:	3003      	adds	r0, #3
 8015c18:	4b02      	ldr	r3, [pc, #8]	; (8015c24 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8015c1a:	10c0      	asrs	r0, r0, #3
 8015c1c:	5618      	ldrsb	r0, [r3, r0]
 8015c1e:	e7e9      	b.n	8015bf4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8015c20:	2000      	movs	r0, #0
 8015c22:	e7e7      	b.n	8015bf4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8015c24:	08028c9e 	.word	0x08028c9e

08015c28 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8015c28:	1e03      	subs	r3, r0, #0
 8015c2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c2c:	460c      	mov	r4, r1
 8015c2e:	4615      	mov	r5, r2
 8015c30:	db01      	blt.n	8015c36 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8015c32:	2900      	cmp	r1, #0
 8015c34:	da06      	bge.n	8015c44 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8015c36:	4b10      	ldr	r3, [pc, #64]	; (8015c78 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x50>)
 8015c38:	f44f 714b 	mov.w	r1, #812	; 0x32c
 8015c3c:	4a0f      	ldr	r2, [pc, #60]	; (8015c7c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8015c3e:	4810      	ldr	r0, [pc, #64]	; (8015c80 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8015c40:	f00f fc08 	bl	8025454 <__assert_func>
 8015c44:	4299      	cmp	r1, r3
 8015c46:	dd07      	ble.n	8015c58 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x30>
 8015c48:	4619      	mov	r1, r3
 8015c4a:	4620      	mov	r0, r4
 8015c4c:	f7ff ffec 	bl	8015c28 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015c50:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8015c54:	b003      	add	sp, #12
 8015c56:	bd30      	pop	{r4, r5, pc}
 8015c58:	f7ff ffa6 	bl	8015ba8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015c5c:	6028      	str	r0, [r5, #0]
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	d0f8      	beq.n	8015c54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8015c62:	4602      	mov	r2, r0
 8015c64:	ab01      	add	r3, sp, #4
 8015c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	f003 fbd6 	bl	801941c <_ZN8touchgfx6muldivElllRl>
 8015c70:	f7ff ffb8 	bl	8015be4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8015c74:	e7ee      	b.n	8015c54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8015c76:	bf00      	nop
 8015c78:	08028db0 	.word	0x08028db0
 8015c7c:	08028e74 	.word	0x08028e74
 8015c80:	08028dc1 	.word	0x08028dc1

08015c84 <_ZN8touchgfx4LineC1Ev>:
 8015c84:	b510      	push	{r4, lr}
 8015c86:	4604      	mov	r4, r0
 8015c88:	f7ff ff24 	bl	8015ad4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8015c8c:	4b0c      	ldr	r3, [pc, #48]	; (8015cc0 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8015c8e:	2220      	movs	r2, #32
 8015c90:	4620      	mov	r0, r4
 8015c92:	6023      	str	r3, [r4, #0]
 8015c94:	2300      	movs	r3, #0
 8015c96:	6422      	str	r2, [r4, #64]	; 0x40
 8015c98:	2212      	movs	r2, #18
 8015c9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8015c9e:	6722      	str	r2, [r4, #112]	; 0x70
 8015ca0:	60a3      	str	r3, [r4, #8]
 8015ca2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8015ca6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8015caa:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015cae:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8015cb2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8015cb6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8015cba:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8015cbe:	bd10      	pop	{r4, pc}
 8015cc0:	08028e00 	.word	0x08028e00

08015cc4 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8015cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8015cca:	4604      	mov	r4, r0
 8015ccc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015cce:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8015cd0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015cd2:	1af6      	subs	r6, r6, r3
 8015cd4:	eba5 0502 	sub.w	r5, r5, r2
 8015cd8:	f040 808e 	bne.w	8015df8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x134>
 8015cdc:	b955      	cbnz	r5, 8015cf4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x30>
 8015cde:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8015ce2:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015ce6:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8015cea:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8015cee:	b003      	add	sp, #12
 8015cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf4:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8015cf8:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8015cfc:	f04f 0802 	mov.w	r8, #2
 8015d00:	463a      	mov	r2, r7
 8015d02:	4629      	mov	r1, r5
 8015d04:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015d06:	f003 fba8 	bl	801945a <_ZN8touchgfx6muldivElll>
 8015d0a:	4631      	mov	r1, r6
 8015d0c:	463a      	mov	r2, r7
 8015d0e:	fb90 f5f8 	sdiv	r5, r0, r8
 8015d12:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015d14:	f003 fba1 	bl	801945a <_ZN8touchgfx6muldivElll>
 8015d18:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8015d1c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8015d1e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8015d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d22:	fb90 f0f8 	sdiv	r0, r0, r8
 8015d26:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8015d2a:	eba8 0305 	sub.w	r3, r8, r5
 8015d2e:	f1ba 0f00 	cmp.w	sl, #0
 8015d32:	f040 80b8 	bne.w	8015ea6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e2>
 8015d36:	64a3      	str	r3, [r4, #72]	; 0x48
 8015d38:	1843      	adds	r3, r0, r1
 8015d3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8015d3c:	1b7b      	subs	r3, r7, r5
 8015d3e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015d40:	1983      	adds	r3, r0, r6
 8015d42:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015d44:	19eb      	adds	r3, r5, r7
 8015d46:	6523      	str	r3, [r4, #80]	; 0x50
 8015d48:	1a33      	subs	r3, r6, r0
 8015d4a:	6623      	str	r3, [r4, #96]	; 0x60
 8015d4c:	eb05 0308 	add.w	r3, r5, r8
 8015d50:	6563      	str	r3, [r4, #84]	; 0x54
 8015d52:	1a0b      	subs	r3, r1, r0
 8015d54:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 8015d58:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8015d5c:	6663      	str	r3, [r4, #100]	; 0x64
 8015d5e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8015d62:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
 8015d66:	4672      	mov	r2, lr
 8015d68:	9301      	str	r3, [sp, #4]
 8015d6a:	f8cd c000 	str.w	ip, [sp]
 8015d6e:	f859 bb04 	ldr.w	fp, [r9], #4
 8015d72:	9b00      	ldr	r3, [sp, #0]
 8015d74:	45de      	cmp	lr, fp
 8015d76:	bfa8      	it	ge
 8015d78:	46de      	movge	lr, fp
 8015d7a:	455a      	cmp	r2, fp
 8015d7c:	bfb8      	it	lt
 8015d7e:	465a      	movlt	r2, fp
 8015d80:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8015d84:	45dc      	cmp	ip, fp
 8015d86:	bfa8      	it	ge
 8015d88:	46dc      	movge	ip, fp
 8015d8a:	455b      	cmp	r3, fp
 8015d8c:	bfb8      	it	lt
 8015d8e:	465b      	movlt	r3, fp
 8015d90:	9300      	str	r3, [sp, #0]
 8015d92:	9b01      	ldr	r3, [sp, #4]
 8015d94:	454b      	cmp	r3, r9
 8015d96:	d1ea      	bne.n	8015d6e <_ZN8touchgfx4Line17updateCachedShapeEv+0xaa>
 8015d98:	f04f 0920 	mov.w	r9, #32
 8015d9c:	9b00      	ldr	r3, [sp, #0]
 8015d9e:	f1ba 0f01 	cmp.w	sl, #1
 8015da2:	fb92 f2f9 	sdiv	r2, r2, r9
 8015da6:	fb93 f3f9 	sdiv	r3, r3, r9
 8015daa:	fb9e fef9 	sdiv	lr, lr, r9
 8015dae:	fb9c fcf9 	sdiv	ip, ip, r9
 8015db2:	f102 0201 	add.w	r2, r2, #1
 8015db6:	f103 0301 	add.w	r3, r3, #1
 8015dba:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
 8015dbe:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
 8015dc2:	eba2 0e0e 	sub.w	lr, r2, lr
 8015dc6:	eba3 0c0c 	sub.w	ip, r3, ip
 8015dca:	f8a4 e06c 	strh.w	lr, [r4, #108]	; 0x6c
 8015dce:	f8a4 c06e 	strh.w	ip, [r4, #110]	; 0x6e
 8015dd2:	d18c      	bne.n	8015cee <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8015dd4:	eba8 0305 	sub.w	r3, r8, r5
 8015dd8:	64a3      	str	r3, [r4, #72]	; 0x48
 8015dda:	1843      	adds	r3, r0, r1
 8015ddc:	65a3      	str	r3, [r4, #88]	; 0x58
 8015dde:	1b7b      	subs	r3, r7, r5
 8015de0:	442f      	add	r7, r5
 8015de2:	4445      	add	r5, r8
 8015de4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015de6:	1983      	adds	r3, r0, r6
 8015de8:	1a36      	subs	r6, r6, r0
 8015dea:	1a08      	subs	r0, r1, r0
 8015dec:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015dee:	6527      	str	r7, [r4, #80]	; 0x50
 8015df0:	6626      	str	r6, [r4, #96]	; 0x60
 8015df2:	6565      	str	r5, [r4, #84]	; 0x54
 8015df4:	6660      	str	r0, [r4, #100]	; 0x64
 8015df6:	e77a      	b.n	8015cee <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 8015df8:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8015dfc:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8015e00:	2d00      	cmp	r5, #0
 8015e02:	f43f af7b 	beq.w	8015cfc <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8015e06:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8015e0a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8015e0e:	fb93 f2f7 	sdiv	r2, r3, r7
 8015e12:	fb07 3312 	mls	r3, r7, r2, r3
 8015e16:	b34b      	cbz	r3, 8015e6c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a8>
 8015e18:	fb97 f2f3 	sdiv	r2, r7, r3
 8015e1c:	fb03 7712 	mls	r7, r3, r2, r7
 8015e20:	2f00      	cmp	r7, #0
 8015e22:	d1f4      	bne.n	8015e0e <_ZN8touchgfx4Line17updateCachedShapeEv+0x14a>
 8015e24:	2b01      	cmp	r3, #1
 8015e26:	f24b 5204 	movw	r2, #46340	; 0xb504
 8015e2a:	bf18      	it	ne
 8015e2c:	fb96 f6f3 	sdivne	r6, r6, r3
 8015e30:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8015e34:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8015e38:	bf18      	it	ne
 8015e3a:	fb95 f5f3 	sdivne	r5, r5, r3
 8015e3e:	4291      	cmp	r1, r2
 8015e40:	dd16      	ble.n	8015e70 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ac>
 8015e42:	2d00      	cmp	r5, #0
 8015e44:	da47      	bge.n	8015ed6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x212>
 8015e46:	4b26      	ldr	r3, [pc, #152]	; (8015ee0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x21c>)
 8015e48:	429d      	cmp	r5, r3
 8015e4a:	da25      	bge.n	8015e98 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d4>
 8015e4c:	426a      	negs	r2, r5
 8015e4e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8015e52:	fb91 f1f3 	sdiv	r1, r1, r3
 8015e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e5a:	4299      	cmp	r1, r3
 8015e5c:	bfcc      	ite	gt
 8015e5e:	1c4b      	addgt	r3, r1, #1
 8015e60:	3301      	addle	r3, #1
 8015e62:	fb96 f6f3 	sdiv	r6, r6, r3
 8015e66:	fb95 f5f3 	sdiv	r5, r5, r3
 8015e6a:	e00f      	b.n	8015e8c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8015e6c:	463b      	mov	r3, r7
 8015e6e:	e7d9      	b.n	8015e24 <_ZN8touchgfx4Line17updateCachedShapeEv+0x160>
 8015e70:	2d00      	cmp	r5, #0
 8015e72:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e76:	da11      	bge.n	8015e9c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d8>
 8015e78:	4269      	negs	r1, r5
 8015e7a:	f24b 5304 	movw	r3, #46340	; 0xb504
 8015e7e:	fb93 f3f1 	sdiv	r3, r3, r1
 8015e82:	429a      	cmp	r2, r3
 8015e84:	bfa8      	it	ge
 8015e86:	461a      	movge	r2, r3
 8015e88:	4356      	muls	r6, r2
 8015e8a:	4355      	muls	r5, r2
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f7ff fe8a 	bl	8015ba8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015e94:	4607      	mov	r7, r0
 8015e96:	e731      	b.n	8015cfc <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8015e98:	2200      	movs	r2, #0
 8015e9a:	e7ed      	b.n	8015e78 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b4>
 8015e9c:	4629      	mov	r1, r5
 8015e9e:	e7ec      	b.n	8015e7a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8015ea0:	4629      	mov	r1, r5
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	e7e9      	b.n	8015e7a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 8015ea6:	1a1b      	subs	r3, r3, r0
 8015ea8:	64a3      	str	r3, [r4, #72]	; 0x48
 8015eaa:	1843      	adds	r3, r0, r1
 8015eac:	1b5b      	subs	r3, r3, r5
 8015eae:	65a3      	str	r3, [r4, #88]	; 0x58
 8015eb0:	1b7b      	subs	r3, r7, r5
 8015eb2:	4403      	add	r3, r0
 8015eb4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015eb6:	1983      	adds	r3, r0, r6
 8015eb8:	442b      	add	r3, r5
 8015eba:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015ebc:	19eb      	adds	r3, r5, r7
 8015ebe:	4403      	add	r3, r0
 8015ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8015ec2:	1a33      	subs	r3, r6, r0
 8015ec4:	442b      	add	r3, r5
 8015ec6:	6623      	str	r3, [r4, #96]	; 0x60
 8015ec8:	eb05 0308 	add.w	r3, r5, r8
 8015ecc:	1a1b      	subs	r3, r3, r0
 8015ece:	6563      	str	r3, [r4, #84]	; 0x54
 8015ed0:	1a0b      	subs	r3, r1, r0
 8015ed2:	1b5b      	subs	r3, r3, r5
 8015ed4:	e73e      	b.n	8015d54 <_ZN8touchgfx4Line17updateCachedShapeEv+0x90>
 8015ed6:	4295      	cmp	r5, r2
 8015ed8:	dde2      	ble.n	8015ea0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1dc>
 8015eda:	462a      	mov	r2, r5
 8015edc:	e7b7      	b.n	8015e4e <_ZN8touchgfx4Line17updateCachedShapeEv+0x18a>
 8015ede:	bf00      	nop
 8015ee0:	ffff4afc 	.word	0xffff4afc

08015ee4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8015ee4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015ee6:	428b      	cmp	r3, r1
 8015ee8:	d102      	bne.n	8015ef0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8015eea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015eec:	4293      	cmp	r3, r2
 8015eee:	d003      	beq.n	8015ef8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8015ef0:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8015ef4:	f7ff bee6 	b.w	8015cc4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8015ef8:	4770      	bx	lr

08015efa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8015efa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015efc:	428b      	cmp	r3, r1
 8015efe:	d102      	bne.n	8015f06 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8015f00:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015f02:	4293      	cmp	r3, r2
 8015f04:	d003      	beq.n	8015f0e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8015f06:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8015f0a:	f7ff bedb 	b.w	8015cc4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8015f0e:	4770      	bx	lr

08015f10 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8015f10:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8015f14:	f7ff bed6 	b.w	8015cc4 <_ZN8touchgfx4Line17updateCachedShapeEv>

08015f18 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8015f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f1c:	b0b3      	sub	sp, #204	; 0xcc
 8015f1e:	4604      	mov	r4, r0
 8015f20:	460a      	mov	r2, r1
 8015f22:	4601      	mov	r1, r0
 8015f24:	a803      	add	r0, sp, #12
 8015f26:	ad32      	add	r5, sp, #200	; 0xc8
 8015f28:	f00d fd48 	bl	80239bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8015f30:	f845 3dc8 	str.w	r3, [r5, #-200]!
 8015f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015f38:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015f3a:	1ac0      	subs	r0, r0, r3
 8015f3c:	eba1 0102 	sub.w	r1, r1, r2
 8015f40:	d43c      	bmi.n	8015fbc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8015f42:	2900      	cmp	r1, #0
 8015f44:	462a      	mov	r2, r5
 8015f46:	db33      	blt.n	8015fb0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8015f48:	f7ff fe6e 	bl	8015c28 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015f4c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8015f50:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8015f52:	a803      	add	r0, sp, #12
 8015f54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015f56:	f00d fefc 	bl	8023d52 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015f5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8015f5c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8015f5e:	a803      	add	r0, sp, #12
 8015f60:	f00d fe86 	bl	8023c70 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015f64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015f68:	2b01      	cmp	r3, #1
 8015f6a:	d137      	bne.n	8015fdc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8015f6c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8015f6e:	2eb3      	cmp	r6, #179	; 0xb3
 8015f70:	dc34      	bgt.n	8015fdc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8015f72:	eba7 0906 	sub.w	r9, r7, r6
 8015f76:	4648      	mov	r0, r9
 8015f78:	f7ff fde0 	bl	8015b3c <_ZN8touchgfx7CWRUtil4sineEi>
 8015f7c:	a901      	add	r1, sp, #4
 8015f7e:	9001      	str	r0, [sp, #4]
 8015f80:	4628      	mov	r0, r5
 8015f82:	f7ff fdcf 	bl	8015b24 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015f86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015f88:	eb00 0801 	add.w	r8, r0, r1
 8015f8c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8015f90:	f7ff fdd4 	bl	8015b3c <_ZN8touchgfx7CWRUtil4sineEi>
 8015f94:	a902      	add	r1, sp, #8
 8015f96:	9002      	str	r0, [sp, #8]
 8015f98:	4628      	mov	r0, r5
 8015f9a:	f7ff fdc3 	bl	8015b24 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015f9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015fa0:	4641      	mov	r1, r8
 8015fa2:	1a12      	subs	r2, r2, r0
 8015fa4:	a803      	add	r0, sp, #12
 8015fa6:	f00d fe63 	bl	8023c70 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015faa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015fac:	441e      	add	r6, r3
 8015fae:	e7de      	b.n	8015f6e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8015fb0:	4249      	negs	r1, r1
 8015fb2:	f7ff fe39 	bl	8015c28 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015fb6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8015fba:	e7c9      	b.n	8015f50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015fbc:	2900      	cmp	r1, #0
 8015fbe:	f1c0 0000 	rsb	r0, r0, #0
 8015fc2:	462a      	mov	r2, r5
 8015fc4:	db04      	blt.n	8015fd0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8015fc6:	f7ff fe2f 	bl	8015c28 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015fca:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8015fce:	e7bf      	b.n	8015f50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015fd0:	4249      	negs	r1, r1
 8015fd2:	f7ff fe29 	bl	8015c28 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015fd6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8015fda:	e7b9      	b.n	8015f50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015fdc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8015fde:	a803      	add	r0, sp, #12
 8015fe0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8015fe2:	f00d fe45 	bl	8023c70 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015fe8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8015fea:	a803      	add	r0, sp, #12
 8015fec:	f00d fe40 	bl	8023c70 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015ff0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	d123      	bne.n	8016040 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8015ff8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8015ffa:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8015ffe:	2e00      	cmp	r6, #0
 8016000:	dd1e      	ble.n	8016040 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016002:	eb06 0907 	add.w	r9, r6, r7
 8016006:	4648      	mov	r0, r9
 8016008:	f7ff fd98 	bl	8015b3c <_ZN8touchgfx7CWRUtil4sineEi>
 801600c:	a901      	add	r1, sp, #4
 801600e:	9001      	str	r0, [sp, #4]
 8016010:	4628      	mov	r0, r5
 8016012:	f7ff fd87 	bl	8015b24 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016016:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016018:	eb00 0801 	add.w	r8, r0, r1
 801601c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016020:	f7ff fd8c 	bl	8015b3c <_ZN8touchgfx7CWRUtil4sineEi>
 8016024:	a902      	add	r1, sp, #8
 8016026:	9002      	str	r0, [sp, #8]
 8016028:	4628      	mov	r0, r5
 801602a:	f7ff fd7b 	bl	8015b24 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801602e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016030:	4641      	mov	r1, r8
 8016032:	1a12      	subs	r2, r2, r0
 8016034:	a803      	add	r0, sp, #12
 8016036:	f00d fe1b 	bl	8023c70 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801603a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801603c:	1af6      	subs	r6, r6, r3
 801603e:	e7de      	b.n	8015ffe <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8016040:	21ff      	movs	r1, #255	; 0xff
 8016042:	a803      	add	r0, sp, #12
 8016044:	f00d ff89 	bl	8023f5a <_ZN8touchgfx6Canvas6renderEh>
 8016048:	4604      	mov	r4, r0
 801604a:	a803      	add	r0, sp, #12
 801604c:	f00d ffc4 	bl	8023fd8 <_ZN8touchgfx6CanvasD1Ev>
 8016050:	4620      	mov	r0, r4
 8016052:	b033      	add	sp, #204	; 0xcc
 8016054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016058 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8016058:	2200      	movs	r2, #0
 801605a:	8002      	strh	r2, [r0, #0]
 801605c:	8042      	strh	r2, [r0, #2]
 801605e:	8082      	strh	r2, [r0, #4]
 8016060:	80c2      	strh	r2, [r0, #6]
 8016062:	4770      	bx	lr

08016064 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8016064:	b570      	push	{r4, r5, r6, lr}
 8016066:	6803      	ldr	r3, [r0, #0]
 8016068:	4604      	mov	r4, r0
 801606a:	4615      	mov	r5, r2
 801606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801606e:	4798      	blx	r3
 8016070:	6823      	ldr	r3, [r4, #0]
 8016072:	4629      	mov	r1, r5
 8016074:	4620      	mov	r0, r4
 8016076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801607c:	4718      	bx	r3
	...

08016080 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016080:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016086:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016088:	4299      	cmp	r1, r3
 801608a:	d029      	beq.n	80160e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801608c:	4b15      	ldr	r3, [pc, #84]	; (80160e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	b92b      	cbnz	r3, 801609e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8016092:	4b15      	ldr	r3, [pc, #84]	; (80160e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016094:	21ae      	movs	r1, #174	; 0xae
 8016096:	4a15      	ldr	r2, [pc, #84]	; (80160ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016098:	4815      	ldr	r0, [pc, #84]	; (80160f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801609a:	f00f f9db 	bl	8025454 <__assert_func>
 801609e:	4a15      	ldr	r2, [pc, #84]	; (80160f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80160a0:	8812      	ldrh	r2, [r2, #0]
 80160a2:	428a      	cmp	r2, r1
 80160a4:	d803      	bhi.n	80160ae <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80160a6:	4b14      	ldr	r3, [pc, #80]	; (80160f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80160a8:	21af      	movs	r1, #175	; 0xaf
 80160aa:	4a10      	ldr	r2, [pc, #64]	; (80160ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80160ac:	e7f4      	b.n	8016098 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80160ae:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80160b2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80160b6:	4b11      	ldr	r3, [pc, #68]	; (80160fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80160b8:	7854      	ldrb	r4, [r2, #1]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80160c0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80160c4:	682b      	ldr	r3, [r5, #0]
 80160c6:	69de      	ldr	r6, [r3, #28]
 80160c8:	4b0d      	ldr	r3, [pc, #52]	; (8016100 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80160ca:	6818      	ldr	r0, [r3, #0]
 80160cc:	f7f2 f856 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 80160d0:	2300      	movs	r3, #0
 80160d2:	4602      	mov	r2, r0
 80160d4:	4621      	mov	r1, r4
 80160d6:	9300      	str	r3, [sp, #0]
 80160d8:	4628      	mov	r0, r5
 80160da:	47b0      	blx	r6
 80160dc:	b002      	add	sp, #8
 80160de:	bd70      	pop	{r4, r5, r6, pc}
 80160e0:	2000      	movs	r0, #0
 80160e2:	e7fb      	b.n	80160dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80160e4:	200565ac 	.word	0x200565ac
 80160e8:	08028edf 	.word	0x08028edf
 80160ec:	08029014 	.word	0x08029014
 80160f0:	08028f21 	.word	0x08028f21
 80160f4:	200565b0 	.word	0x200565b0
 80160f8:	08028f4a 	.word	0x08028f4a
 80160fc:	200565b4 	.word	0x200565b4
 8016100:	200565b8 	.word	0x200565b8

08016104 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8016104:	b570      	push	{r4, r5, r6, lr}
 8016106:	6803      	ldr	r3, [r0, #0]
 8016108:	4604      	mov	r4, r0
 801610a:	b28d      	uxth	r5, r1
 801610c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801610e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8016110:	4b10      	ldr	r3, [pc, #64]	; (8016154 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	b92b      	cbnz	r3, 8016122 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8016116:	4b10      	ldr	r3, [pc, #64]	; (8016158 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8016118:	21ae      	movs	r1, #174	; 0xae
 801611a:	4a10      	ldr	r2, [pc, #64]	; (801615c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801611c:	4810      	ldr	r0, [pc, #64]	; (8016160 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801611e:	f00f f999 	bl	8025454 <__assert_func>
 8016122:	4910      	ldr	r1, [pc, #64]	; (8016164 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8016124:	8809      	ldrh	r1, [r1, #0]
 8016126:	4291      	cmp	r1, r2
 8016128:	d803      	bhi.n	8016132 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801612a:	4b0f      	ldr	r3, [pc, #60]	; (8016168 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801612c:	21af      	movs	r1, #175	; 0xaf
 801612e:	4a0b      	ldr	r2, [pc, #44]	; (801615c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8016130:	e7f4      	b.n	801611c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8016132:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016136:	4b0d      	ldr	r3, [pc, #52]	; (801616c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801613e:	6803      	ldr	r3, [r0, #0]
 8016140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016142:	4798      	blx	r3
 8016144:	1a29      	subs	r1, r5, r0
 8016146:	4633      	mov	r3, r6
 8016148:	4620      	mov	r0, r4
 801614a:	b209      	sxth	r1, r1
 801614c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016150:	4718      	bx	r3
 8016152:	bf00      	nop
 8016154:	200565ac 	.word	0x200565ac
 8016158:	08028edf 	.word	0x08028edf
 801615c:	08029014 	.word	0x08029014
 8016160:	08028f21 	.word	0x08028f21
 8016164:	200565b0 	.word	0x200565b0
 8016168:	08028f4a 	.word	0x08028f4a
 801616c:	200565b4 	.word	0x200565b4

08016170 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016178:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801617a:	b08c      	sub	sp, #48	; 0x30
 801617c:	4604      	mov	r4, r0
 801617e:	4293      	cmp	r3, r2
 8016180:	4688      	mov	r8, r1
 8016182:	d05f      	beq.n	8016244 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016184:	4e31      	ldr	r6, [pc, #196]	; (801624c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8016186:	6832      	ldr	r2, [r6, #0]
 8016188:	b92a      	cbnz	r2, 8016196 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801618a:	4b31      	ldr	r3, [pc, #196]	; (8016250 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801618c:	21ae      	movs	r1, #174	; 0xae
 801618e:	4a31      	ldr	r2, [pc, #196]	; (8016254 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016190:	4831      	ldr	r0, [pc, #196]	; (8016258 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8016192:	f00f f95f 	bl	8025454 <__assert_func>
 8016196:	4d31      	ldr	r5, [pc, #196]	; (801625c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8016198:	8829      	ldrh	r1, [r5, #0]
 801619a:	4299      	cmp	r1, r3
 801619c:	d803      	bhi.n	80161a6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801619e:	4b30      	ldr	r3, [pc, #192]	; (8016260 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80161a0:	21af      	movs	r1, #175	; 0xaf
 80161a2:	4a2c      	ldr	r2, [pc, #176]	; (8016254 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80161a4:	e7f4      	b.n	8016190 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80161a6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80161aa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80161ae:	4b2d      	ldr	r3, [pc, #180]	; (8016264 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80161b6:	2a00      	cmp	r2, #0
 80161b8:	d044      	beq.n	8016244 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80161ba:	784b      	ldrb	r3, [r1, #1]
 80161bc:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80161c0:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80161c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80161c8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80161cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80161d0:	4b25      	ldr	r3, [pc, #148]	; (8016268 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80161d2:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80161dc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80161e0:	9207      	str	r2, [sp, #28]
 80161e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80161e4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80161e8:	f88d a020 	strb.w	sl, [sp, #32]
 80161ec:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80161f0:	9009      	str	r0, [sp, #36]	; 0x24
 80161f2:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80161f6:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80161fa:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80161fe:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8016202:	b10a      	cbz	r2, 8016208 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8016204:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8016206:	b907      	cbnz	r7, 801620a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8016208:	689f      	ldr	r7, [r3, #8]
 801620a:	f10d 0914 	add.w	r9, sp, #20
 801620e:	4621      	mov	r1, r4
 8016210:	4648      	mov	r0, r9
 8016212:	f002 fff5 	bl	8019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016216:	6833      	ldr	r3, [r6, #0]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d0b6      	beq.n	801618a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801621c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801621e:	882b      	ldrh	r3, [r5, #0]
 8016220:	428b      	cmp	r3, r1
 8016222:	d9bc      	bls.n	801619e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8016224:	4b11      	ldr	r3, [pc, #68]	; (801626c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8016226:	6818      	ldr	r0, [r3, #0]
 8016228:	f7f1 ffa8 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 801622c:	2300      	movs	r3, #0
 801622e:	9001      	str	r0, [sp, #4]
 8016230:	4638      	mov	r0, r7
 8016232:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016236:	ab07      	add	r3, sp, #28
 8016238:	9300      	str	r3, [sp, #0]
 801623a:	4643      	mov	r3, r8
 801623c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8016240:	f7f1 ff2d 	bl	800809e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016244:	b00c      	add	sp, #48	; 0x30
 8016246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801624a:	bf00      	nop
 801624c:	200565ac 	.word	0x200565ac
 8016250:	08028edf 	.word	0x08028edf
 8016254:	08029014 	.word	0x08029014
 8016258:	08028f21 	.word	0x08028f21
 801625c:	200565b0 	.word	0x200565b0
 8016260:	08028f4a 	.word	0x08028f4a
 8016264:	200565b4 	.word	0x200565b4
 8016268:	2005653c 	.word	0x2005653c
 801626c:	200565b8 	.word	0x200565b8

08016270 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016270:	b40e      	push	{r1, r2, r3}
 8016272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801627a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801627c:	b09a      	sub	sp, #104	; 0x68
 801627e:	4605      	mov	r5, r0
 8016280:	4293      	cmp	r3, r2
 8016282:	d067      	beq.n	8016354 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 8016284:	aa24      	add	r2, sp, #144	; 0x90
 8016286:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8016368 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 801628a:	9202      	str	r2, [sp, #8]
 801628c:	f8da 2000 	ldr.w	r2, [sl]
 8016290:	b92a      	cbnz	r2, 801629e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8016292:	4b31      	ldr	r3, [pc, #196]	; (8016358 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8016294:	21ae      	movs	r1, #174	; 0xae
 8016296:	4a31      	ldr	r2, [pc, #196]	; (801635c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8016298:	4831      	ldr	r0, [pc, #196]	; (8016360 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801629a:	f00f f8db 	bl	8025454 <__assert_func>
 801629e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 801636c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 80162a2:	f8b8 1000 	ldrh.w	r1, [r8]
 80162a6:	4299      	cmp	r1, r3
 80162a8:	d803      	bhi.n	80162b2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80162aa:	4b2e      	ldr	r3, [pc, #184]	; (8016364 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80162ac:	21af      	movs	r1, #175	; 0xaf
 80162ae:	4a2b      	ldr	r2, [pc, #172]	; (801635c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 80162b0:	e7f2      	b.n	8016298 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80162b2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8016370 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80162b6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80162ba:	f8d9 3000 	ldr.w	r3, [r9]
 80162be:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80162c2:	6823      	ldr	r3, [r4, #0]
 80162c4:	4620      	mov	r0, r4
 80162c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162c8:	4798      	blx	r3
 80162ca:	4607      	mov	r7, r0
 80162cc:	b206      	sxth	r6, r0
 80162ce:	a803      	add	r0, sp, #12
 80162d0:	f003 fc55 	bl	8019b7e <_ZN8touchgfx12TextProviderC1Ev>
 80162d4:	6823      	ldr	r3, [r4, #0]
 80162d6:	4620      	mov	r0, r4
 80162d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162da:	4798      	blx	r3
 80162dc:	6823      	ldr	r3, [r4, #0]
 80162de:	4683      	mov	fp, r0
 80162e0:	4620      	mov	r0, r4
 80162e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162e4:	4798      	blx	r3
 80162e6:	465b      	mov	r3, fp
 80162e8:	9000      	str	r0, [sp, #0]
 80162ea:	a803      	add	r0, sp, #12
 80162ec:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80162ee:	9a02      	ldr	r2, [sp, #8]
 80162f0:	f003 fc92 	bl	8019c18 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80162f4:	f8da 3000 	ldr.w	r3, [sl]
 80162f8:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d0c8      	beq.n	8016292 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8016300:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8016302:	f8b8 0000 	ldrh.w	r0, [r8]
 8016306:	4290      	cmp	r0, r2
 8016308:	d9cf      	bls.n	80162aa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801630a:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 801630e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016312:	f8d9 3000 	ldr.w	r3, [r9]
 8016316:	7862      	ldrb	r2, [r4, #1]
 8016318:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 801631c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016320:	9400      	str	r4, [sp, #0]
 8016322:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016326:	a803      	add	r0, sp, #12
 8016328:	f001 fad1 	bl	80178ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801632c:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8016330:	b203      	sxth	r3, r0
 8016332:	18b1      	adds	r1, r6, r2
 8016334:	2900      	cmp	r1, #0
 8016336:	dd0b      	ble.n	8016350 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8016338:	3b01      	subs	r3, #1
 801633a:	fb13 f302 	smulbb	r3, r3, r2
 801633e:	fb17 3300 	smlabb	r3, r7, r0, r3
 8016342:	b21e      	sxth	r6, r3
 8016344:	4630      	mov	r0, r6
 8016346:	b01a      	add	sp, #104	; 0x68
 8016348:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801634c:	b003      	add	sp, #12
 801634e:	4770      	bx	lr
 8016350:	2b00      	cmp	r3, #0
 8016352:	dcf7      	bgt.n	8016344 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8016354:	2600      	movs	r6, #0
 8016356:	e7f5      	b.n	8016344 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8016358:	08028edf 	.word	0x08028edf
 801635c:	08029014 	.word	0x08029014
 8016360:	08028f21 	.word	0x08028f21
 8016364:	08028f4a 	.word	0x08028f4a
 8016368:	200565ac 	.word	0x200565ac
 801636c:	200565b0 	.word	0x200565b0
 8016370:	200565b4 	.word	0x200565b4

08016374 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8016374:	b570      	push	{r4, r5, r6, lr}
 8016376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801637a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801637c:	4604      	mov	r4, r0
 801637e:	4299      	cmp	r1, r3
 8016380:	d01e      	beq.n	80163c0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8016382:	6803      	ldr	r3, [r0, #0]
 8016384:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8016386:	4b0f      	ldr	r3, [pc, #60]	; (80163c4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	b92b      	cbnz	r3, 8016398 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801638c:	4b0e      	ldr	r3, [pc, #56]	; (80163c8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801638e:	21ae      	movs	r1, #174	; 0xae
 8016390:	4a0e      	ldr	r2, [pc, #56]	; (80163cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016392:	480f      	ldr	r0, [pc, #60]	; (80163d0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8016394:	f00f f85e 	bl	8025454 <__assert_func>
 8016398:	4b0e      	ldr	r3, [pc, #56]	; (80163d4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801639a:	881b      	ldrh	r3, [r3, #0]
 801639c:	428b      	cmp	r3, r1
 801639e:	d803      	bhi.n	80163a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80163a0:	4b0d      	ldr	r3, [pc, #52]	; (80163d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80163a2:	21af      	movs	r1, #175	; 0xaf
 80163a4:	4a09      	ldr	r2, [pc, #36]	; (80163cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80163a6:	e7f4      	b.n	8016392 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80163a8:	4b0c      	ldr	r3, [pc, #48]	; (80163dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80163aa:	6818      	ldr	r0, [r3, #0]
 80163ac:	f7f1 fee6 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 80163b0:	2300      	movs	r3, #0
 80163b2:	4601      	mov	r1, r0
 80163b4:	46ac      	mov	ip, r5
 80163b6:	4620      	mov	r0, r4
 80163b8:	461a      	mov	r2, r3
 80163ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163be:	4760      	bx	ip
 80163c0:	2000      	movs	r0, #0
 80163c2:	bd70      	pop	{r4, r5, r6, pc}
 80163c4:	200565ac 	.word	0x200565ac
 80163c8:	08028edf 	.word	0x08028edf
 80163cc:	08029014 	.word	0x08029014
 80163d0:	08028f21 	.word	0x08028f21
 80163d4:	200565b0 	.word	0x200565b0
 80163d8:	08028f4a 	.word	0x08028f4a
 80163dc:	200565b8 	.word	0x200565b8

080163e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80163e0:	b538      	push	{r3, r4, r5, lr}
 80163e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163e6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80163e8:	4604      	mov	r4, r0
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d014      	beq.n	8016418 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80163ee:	6803      	ldr	r3, [r0, #0]
 80163f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80163f2:	4798      	blx	r3
 80163f4:	6823      	ldr	r3, [r4, #0]
 80163f6:	4605      	mov	r5, r0
 80163f8:	4620      	mov	r0, r4
 80163fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80163fc:	4798      	blx	r3
 80163fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016402:	b22d      	sxth	r5, r5
 8016404:	4601      	mov	r1, r0
 8016406:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801640a:	bf06      	itte	eq
 801640c:	4602      	moveq	r2, r0
 801640e:	4629      	moveq	r1, r5
 8016410:	462a      	movne	r2, r5
 8016412:	4620      	mov	r0, r4
 8016414:	f7ef fe3a 	bl	800608c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016418:	bd38      	pop	{r3, r4, r5, pc}

0801641a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801641a:	888a      	ldrh	r2, [r1, #4]
 801641c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801641e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016422:	b922      	cbnz	r2, 801642e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8016424:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016428:	b90b      	cbnz	r3, 801642e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801642a:	f7ff bfd9 	b.w	80163e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801642e:	4770      	bx	lr

08016430 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016430:	2300      	movs	r3, #0
 8016432:	8083      	strh	r3, [r0, #4]
 8016434:	80c3      	strh	r3, [r0, #6]
 8016436:	8003      	strh	r3, [r0, #0]
 8016438:	8043      	strh	r3, [r0, #2]
 801643a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801643e:	2bff      	cmp	r3, #255	; 0xff
 8016440:	bf01      	itttt	eq
 8016442:	890b      	ldrheq	r3, [r1, #8]
 8016444:	8083      	strheq	r3, [r0, #4]
 8016446:	894b      	ldrheq	r3, [r1, #10]
 8016448:	80c3      	strheq	r3, [r0, #6]
 801644a:	4770      	bx	lr

0801644c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801644c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801644e:	4604      	mov	r4, r0
 8016450:	466b      	mov	r3, sp
 8016452:	6808      	ldr	r0, [r1, #0]
 8016454:	6849      	ldr	r1, [r1, #4]
 8016456:	c303      	stmia	r3!, {r0, r1}
 8016458:	6823      	ldr	r3, [r4, #0]
 801645a:	4669      	mov	r1, sp
 801645c:	4620      	mov	r0, r4
 801645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016460:	4798      	blx	r3
 8016462:	4b08      	ldr	r3, [pc, #32]	; (8016484 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801646a:	b10a      	cbz	r2, 8016470 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801646c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801646e:	b900      	cbnz	r0, 8016472 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016470:	6898      	ldr	r0, [r3, #8]
 8016472:	6803      	ldr	r3, [r0, #0]
 8016474:	4669      	mov	r1, sp
 8016476:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016478:	699d      	ldr	r5, [r3, #24]
 801647a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801647e:	47a8      	blx	r5
 8016480:	b003      	add	sp, #12
 8016482:	bd30      	pop	{r4, r5, pc}
 8016484:	2005653c 	.word	0x2005653c

08016488 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8016488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801648a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801648e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016490:	4606      	mov	r6, r0
 8016492:	4299      	cmp	r1, r3
 8016494:	d02a      	beq.n	80164ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8016496:	4b16      	ldr	r3, [pc, #88]	; (80164f0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	b92b      	cbnz	r3, 80164a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801649c:	4b15      	ldr	r3, [pc, #84]	; (80164f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801649e:	21ae      	movs	r1, #174	; 0xae
 80164a0:	4a15      	ldr	r2, [pc, #84]	; (80164f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80164a2:	4816      	ldr	r0, [pc, #88]	; (80164fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 80164a4:	f00e ffd6 	bl	8025454 <__assert_func>
 80164a8:	4a15      	ldr	r2, [pc, #84]	; (8016500 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 80164aa:	8812      	ldrh	r2, [r2, #0]
 80164ac:	428a      	cmp	r2, r1
 80164ae:	d803      	bhi.n	80164b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 80164b0:	4b14      	ldr	r3, [pc, #80]	; (8016504 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 80164b2:	21af      	movs	r1, #175	; 0xaf
 80164b4:	4a10      	ldr	r2, [pc, #64]	; (80164f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80164b6:	e7f4      	b.n	80164a2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 80164b8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80164bc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80164c0:	4b11      	ldr	r3, [pc, #68]	; (8016508 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 80164c2:	7854      	ldrb	r4, [r2, #1]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80164ca:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80164ce:	682b      	ldr	r3, [r5, #0]
 80164d0:	69df      	ldr	r7, [r3, #28]
 80164d2:	4b0e      	ldr	r3, [pc, #56]	; (801650c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 80164d4:	6818      	ldr	r0, [r3, #0]
 80164d6:	f7f1 fe51 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 80164da:	2300      	movs	r3, #0
 80164dc:	4602      	mov	r2, r0
 80164de:	4621      	mov	r1, r4
 80164e0:	9300      	str	r3, [sp, #0]
 80164e2:	4628      	mov	r0, r5
 80164e4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80164e6:	47b8      	blx	r7
 80164e8:	b003      	add	sp, #12
 80164ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164ec:	2000      	movs	r0, #0
 80164ee:	e7fb      	b.n	80164e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 80164f0:	200565ac 	.word	0x200565ac
 80164f4:	08028edf 	.word	0x08028edf
 80164f8:	08029120 	.word	0x08029120
 80164fc:	08028f21 	.word	0x08028f21
 8016500:	200565b0 	.word	0x200565b0
 8016504:	08028f4a 	.word	0x08028f4a
 8016508:	200565b4 	.word	0x200565b4
 801650c:	200565b8 	.word	0x200565b8

08016510 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8016510:	b570      	push	{r4, r5, r6, lr}
 8016512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016516:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016518:	4604      	mov	r4, r0
 801651a:	4299      	cmp	r1, r3
 801651c:	d01e      	beq.n	801655c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801651e:	6803      	ldr	r3, [r0, #0]
 8016520:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8016522:	4b0f      	ldr	r3, [pc, #60]	; (8016560 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	b92b      	cbnz	r3, 8016534 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8016528:	4b0e      	ldr	r3, [pc, #56]	; (8016564 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801652a:	21ae      	movs	r1, #174	; 0xae
 801652c:	4a0e      	ldr	r2, [pc, #56]	; (8016568 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801652e:	480f      	ldr	r0, [pc, #60]	; (801656c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8016530:	f00e ff90 	bl	8025454 <__assert_func>
 8016534:	4b0e      	ldr	r3, [pc, #56]	; (8016570 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8016536:	881b      	ldrh	r3, [r3, #0]
 8016538:	428b      	cmp	r3, r1
 801653a:	d803      	bhi.n	8016544 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801653c:	4b0d      	ldr	r3, [pc, #52]	; (8016574 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801653e:	21af      	movs	r1, #175	; 0xaf
 8016540:	4a09      	ldr	r2, [pc, #36]	; (8016568 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8016542:	e7f4      	b.n	801652e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8016544:	4b0c      	ldr	r3, [pc, #48]	; (8016578 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8016546:	6818      	ldr	r0, [r3, #0]
 8016548:	f7f1 fe18 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 801654c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801654e:	4601      	mov	r1, r0
 8016550:	46ac      	mov	ip, r5
 8016552:	4620      	mov	r0, r4
 8016554:	2300      	movs	r3, #0
 8016556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801655a:	4760      	bx	ip
 801655c:	2000      	movs	r0, #0
 801655e:	bd70      	pop	{r4, r5, r6, pc}
 8016560:	200565ac 	.word	0x200565ac
 8016564:	08028edf 	.word	0x08028edf
 8016568:	08029120 	.word	0x08029120
 801656c:	08028f21 	.word	0x08028f21
 8016570:	200565b0 	.word	0x200565b0
 8016574:	08028f4a 	.word	0x08028f4a
 8016578:	200565b8 	.word	0x200565b8

0801657c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801657c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016584:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016586:	b08c      	sub	sp, #48	; 0x30
 8016588:	4604      	mov	r4, r0
 801658a:	4293      	cmp	r3, r2
 801658c:	460e      	mov	r6, r1
 801658e:	d05d      	beq.n	801664c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8016590:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8016670 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8016594:	f8d8 2000 	ldr.w	r2, [r8]
 8016598:	b92a      	cbnz	r2, 80165a6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801659a:	4b2e      	ldr	r3, [pc, #184]	; (8016654 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801659c:	21ae      	movs	r1, #174	; 0xae
 801659e:	4a2e      	ldr	r2, [pc, #184]	; (8016658 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80165a0:	482e      	ldr	r0, [pc, #184]	; (801665c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 80165a2:	f00e ff57 	bl	8025454 <__assert_func>
 80165a6:	4f2e      	ldr	r7, [pc, #184]	; (8016660 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 80165a8:	8839      	ldrh	r1, [r7, #0]
 80165aa:	4299      	cmp	r1, r3
 80165ac:	d803      	bhi.n	80165b6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 80165ae:	4b2d      	ldr	r3, [pc, #180]	; (8016664 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 80165b0:	21af      	movs	r1, #175	; 0xaf
 80165b2:	4a29      	ldr	r2, [pc, #164]	; (8016658 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80165b4:	e7f4      	b.n	80165a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 80165b6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80165ba:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80165be:	4b2a      	ldr	r3, [pc, #168]	; (8016668 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80165c6:	2a00      	cmp	r2, #0
 80165c8:	d040      	beq.n	801664c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80165ca:	784b      	ldrb	r3, [r1, #1]
 80165cc:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 80165d0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80165d4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80165d8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80165dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80165e0:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80165e4:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80165e8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80165ec:	ad05      	add	r5, sp, #20
 80165ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80165f0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80165f4:	9207      	str	r2, [sp, #28]
 80165f6:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80165fa:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80165fe:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8016602:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8016606:	f88d a020 	strb.w	sl, [sp, #32]
 801660a:	9009      	str	r0, [sp, #36]	; 0x24
 801660c:	f7ee ff3e 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8016610:	4621      	mov	r1, r4
 8016612:	4681      	mov	r9, r0
 8016614:	4628      	mov	r0, r5
 8016616:	f002 fdf3 	bl	8019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801661a:	f8d8 3000 	ldr.w	r3, [r8]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d0bb      	beq.n	801659a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8016622:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016624:	883b      	ldrh	r3, [r7, #0]
 8016626:	428b      	cmp	r3, r1
 8016628:	d9c1      	bls.n	80165ae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801662a:	4b10      	ldr	r3, [pc, #64]	; (801666c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801662c:	6818      	ldr	r0, [r3, #0]
 801662e:	f7f1 fda5 	bl	800817c <_ZNK8touchgfx5Texts7getTextEt>
 8016632:	2300      	movs	r3, #0
 8016634:	9303      	str	r3, [sp, #12]
 8016636:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016638:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801663c:	ab07      	add	r3, sp, #28
 801663e:	4648      	mov	r0, r9
 8016640:	9300      	str	r3, [sp, #0]
 8016642:	4633      	mov	r3, r6
 8016644:	e895 0006 	ldmia.w	r5, {r1, r2}
 8016648:	f7f1 fd29 	bl	800809e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801664c:	b00c      	add	sp, #48	; 0x30
 801664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016652:	bf00      	nop
 8016654:	08028edf 	.word	0x08028edf
 8016658:	08029120 	.word	0x08029120
 801665c:	08028f21 	.word	0x08028f21
 8016660:	200565b0 	.word	0x200565b0
 8016664:	08028f4a 	.word	0x08028f4a
 8016668:	200565b4 	.word	0x200565b4
 801666c:	200565b8 	.word	0x200565b8
 8016670:	200565ac 	.word	0x200565ac

08016674 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8016674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016678:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801667a:	4604      	mov	r4, r0
 801667c:	460e      	mov	r6, r1
 801667e:	b08e      	sub	sp, #56	; 0x38
 8016680:	b218      	sxth	r0, r3
 8016682:	8921      	ldrh	r1, [r4, #8]
 8016684:	005b      	lsls	r3, r3, #1
 8016686:	8962      	ldrh	r2, [r4, #10]
 8016688:	f8ad 0000 	strh.w	r0, [sp]
 801668c:	b29b      	uxth	r3, r3
 801668e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8016692:	1ac9      	subs	r1, r1, r3
 8016694:	1ad3      	subs	r3, r2, r3
 8016696:	b209      	sxth	r1, r1
 8016698:	b21b      	sxth	r3, r3
 801669a:	2900      	cmp	r1, #0
 801669c:	f8ad 1004 	strh.w	r1, [sp, #4]
 80166a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80166a4:	dd5e      	ble.n	8016764 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	dd5c      	ble.n	8016764 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80166aa:	6830      	ldr	r0, [r6, #0]
 80166ac:	ab02      	add	r3, sp, #8
 80166ae:	6871      	ldr	r1, [r6, #4]
 80166b0:	c303      	stmia	r3!, {r0, r1}
 80166b2:	4669      	mov	r1, sp
 80166b4:	a802      	add	r0, sp, #8
 80166b6:	f7fd ff21 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 80166ba:	4620      	mov	r0, r4
 80166bc:	a902      	add	r1, sp, #8
 80166be:	f7ff fec5 	bl	801644c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80166c2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d05f      	beq.n	8016788 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80166c8:	8963      	ldrh	r3, [r4, #10]
 80166ca:	b202      	sxth	r2, r0
 80166cc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80166d0:	2500      	movs	r5, #0
 80166d2:	1a1f      	subs	r7, r3, r0
 80166d4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80166d8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80166dc:	b21b      	sxth	r3, r3
 80166de:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80166e2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80166e6:	af04      	add	r7, sp, #16
 80166e8:	1a09      	subs	r1, r1, r0
 80166ea:	9506      	str	r5, [sp, #24]
 80166ec:	f8ad 201e 	strh.w	r2, [sp, #30]
 80166f0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80166f4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80166f8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80166fc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8016700:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8016704:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8016708:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 801670c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8016710:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016714:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016718:	ab06      	add	r3, sp, #24
 801671a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801671e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016722:	e887 0003 	stmia.w	r7, {r0, r1}
 8016726:	4631      	mov	r1, r6
 8016728:	4638      	mov	r0, r7
 801672a:	f7fd fee7 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 801672e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016732:	2b00      	cmp	r3, #0
 8016734:	dd12      	ble.n	801675c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8016736:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801673a:	2b00      	cmp	r3, #0
 801673c:	dd0e      	ble.n	801675c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801673e:	6823      	ldr	r3, [r4, #0]
 8016740:	4639      	mov	r1, r7
 8016742:	4620      	mov	r0, r4
 8016744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016746:	4798      	blx	r3
 8016748:	f7ee fea0 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 801674c:	6803      	ldr	r3, [r0, #0]
 801674e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016750:	4639      	mov	r1, r7
 8016752:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8016756:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801675a:	47c0      	blx	r8
 801675c:	3501      	adds	r5, #1
 801675e:	2d04      	cmp	r5, #4
 8016760:	d1da      	bne.n	8016718 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8016762:	e011      	b.n	8016788 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8016764:	6830      	ldr	r0, [r6, #0]
 8016766:	ab06      	add	r3, sp, #24
 8016768:	6871      	ldr	r1, [r6, #4]
 801676a:	c303      	stmia	r3!, {r0, r1}
 801676c:	6823      	ldr	r3, [r4, #0]
 801676e:	a906      	add	r1, sp, #24
 8016770:	4620      	mov	r0, r4
 8016772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016774:	4798      	blx	r3
 8016776:	f7ee fe89 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 801677a:	6803      	ldr	r3, [r0, #0]
 801677c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801677e:	a906      	add	r1, sp, #24
 8016780:	699d      	ldr	r5, [r3, #24]
 8016782:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016786:	47a8      	blx	r5
 8016788:	b00e      	add	sp, #56	; 0x38
 801678a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016790 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8016790:	4b02      	ldr	r3, [pc, #8]	; (801679c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8016792:	6018      	str	r0, [r3, #0]
 8016794:	4b02      	ldr	r3, [pc, #8]	; (80167a0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8016796:	6019      	str	r1, [r3, #0]
 8016798:	4770      	bx	lr
 801679a:	bf00      	nop
 801679c:	20056544 	.word	0x20056544
 80167a0:	20056558 	.word	0x20056558

080167a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80167a4:	b538      	push	{r3, r4, r5, lr}
 80167a6:	4c2b      	ldr	r4, [pc, #172]	; (8016854 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80167a8:	4b2b      	ldr	r3, [pc, #172]	; (8016858 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80167aa:	6821      	ldr	r1, [r4, #0]
 80167ac:	681a      	ldr	r2, [r3, #0]
 80167ae:	4281      	cmp	r1, r0
 80167b0:	4d2a      	ldr	r5, [pc, #168]	; (801685c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80167b2:	492b      	ldr	r1, [pc, #172]	; (8016860 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80167b4:	d108      	bne.n	80167c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80167b6:	682b      	ldr	r3, [r5, #0]
 80167b8:	4293      	cmp	r3, r2
 80167ba:	d105      	bne.n	80167c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80167bc:	6808      	ldr	r0, [r1, #0]
 80167be:	280f      	cmp	r0, #15
 80167c0:	bf94      	ite	ls
 80167c2:	2000      	movls	r0, #0
 80167c4:	2001      	movhi	r0, #1
 80167c6:	bd38      	pop	{r3, r4, r5, pc}
 80167c8:	4b26      	ldr	r3, [pc, #152]	; (8016864 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80167ca:	6020      	str	r0, [r4, #0]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	602a      	str	r2, [r5, #0]
 80167d0:	4298      	cmp	r0, r3
 80167d2:	d905      	bls.n	80167e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80167d4:	4b24      	ldr	r3, [pc, #144]	; (8016868 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80167d6:	2137      	movs	r1, #55	; 0x37
 80167d8:	4a24      	ldr	r2, [pc, #144]	; (801686c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80167da:	4825      	ldr	r0, [pc, #148]	; (8016870 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80167dc:	f00e fe3a 	bl	8025454 <__assert_func>
 80167e0:	f010 0403 	ands.w	r4, r0, #3
 80167e4:	bf1f      	itttt	ne
 80167e6:	f1c4 0504 	rsbne	r5, r4, #4
 80167ea:	3b04      	subne	r3, #4
 80167ec:	1952      	addne	r2, r2, r5
 80167ee:	191b      	addne	r3, r3, r4
 80167f0:	4d20      	ldr	r5, [pc, #128]	; (8016874 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80167f2:	4402      	add	r2, r0
 80167f4:	1a1b      	subs	r3, r3, r0
 80167f6:	3001      	adds	r0, #1
 80167f8:	602a      	str	r2, [r5, #0]
 80167fa:	f020 0401 	bic.w	r4, r0, #1
 80167fe:	42a3      	cmp	r3, r4
 8016800:	d203      	bcs.n	801680a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8016802:	4b19      	ldr	r3, [pc, #100]	; (8016868 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016804:	214a      	movs	r1, #74	; 0x4a
 8016806:	4a19      	ldr	r2, [pc, #100]	; (801686c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016808:	e7e7      	b.n	80167da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801680a:	f010 0002 	ands.w	r0, r0, #2
 801680e:	bf1f      	itttt	ne
 8016810:	f1c0 0504 	rsbne	r5, r0, #4
 8016814:	1952      	addne	r2, r2, r5
 8016816:	1f05      	subne	r5, r0, #4
 8016818:	195b      	addne	r3, r3, r5
 801681a:	4422      	add	r2, r4
 801681c:	4d16      	ldr	r5, [pc, #88]	; (8016878 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801681e:	1b1b      	subs	r3, r3, r4
 8016820:	602a      	str	r2, [r5, #0]
 8016822:	429c      	cmp	r4, r3
 8016824:	d903      	bls.n	801682e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8016826:	4b10      	ldr	r3, [pc, #64]	; (8016868 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016828:	215d      	movs	r1, #93	; 0x5d
 801682a:	4a10      	ldr	r2, [pc, #64]	; (801686c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801682c:	e7d5      	b.n	80167da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801682e:	b120      	cbz	r0, 801683a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8016830:	f1c0 0504 	rsb	r5, r0, #4
 8016834:	3804      	subs	r0, #4
 8016836:	442a      	add	r2, r5
 8016838:	4403      	add	r3, r0
 801683a:	1b1b      	subs	r3, r3, r4
 801683c:	4422      	add	r2, r4
 801683e:	480f      	ldr	r0, [pc, #60]	; (801687c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8016840:	2b0f      	cmp	r3, #15
 8016842:	600b      	str	r3, [r1, #0]
 8016844:	6002      	str	r2, [r0, #0]
 8016846:	d803      	bhi.n	8016850 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8016848:	4b0d      	ldr	r3, [pc, #52]	; (8016880 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801684a:	2170      	movs	r1, #112	; 0x70
 801684c:	4a07      	ldr	r2, [pc, #28]	; (801686c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801684e:	e7c4      	b.n	80167da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016850:	2001      	movs	r0, #1
 8016852:	e7b8      	b.n	80167c6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8016854:	2005654c 	.word	0x2005654c
 8016858:	20056544 	.word	0x20056544
 801685c:	20056554 	.word	0x20056554
 8016860:	2005655c 	.word	0x2005655c
 8016864:	20056558 	.word	0x20056558
 8016868:	080291b4 	.word	0x080291b4
 801686c:	0802927c 	.word	0x0802927c
 8016870:	080291ed 	.word	0x080291ed
 8016874:	20056560 	.word	0x20056560
 8016878:	20056550 	.word	0x20056550
 801687c:	20056548 	.word	0x20056548
 8016880:	08029237 	.word	0x08029237

08016884 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8016884:	4b04      	ldr	r3, [pc, #16]	; (8016898 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8016886:	6818      	ldr	r0, [r3, #0]
 8016888:	b120      	cbz	r0, 8016894 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801688a:	4b04      	ldr	r3, [pc, #16]	; (801689c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801688c:	6818      	ldr	r0, [r3, #0]
 801688e:	3000      	adds	r0, #0
 8016890:	bf18      	it	ne
 8016892:	2001      	movne	r0, #1
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop
 8016898:	20056544 	.word	0x20056544
 801689c:	20056558 	.word	0x20056558

080168a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80168a0:	4b01      	ldr	r3, [pc, #4]	; (80168a8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80168a2:	6818      	ldr	r0, [r3, #0]
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	2005654c 	.word	0x2005654c

080168ac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80168ac:	4b01      	ldr	r3, [pc, #4]	; (80168b4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80168ae:	6818      	ldr	r0, [r3, #0]
 80168b0:	4770      	bx	lr
 80168b2:	bf00      	nop
 80168b4:	20056554 	.word	0x20056554

080168b8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80168b8:	4b01      	ldr	r3, [pc, #4]	; (80168c0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80168ba:	6818      	ldr	r0, [r3, #0]
 80168bc:	4770      	bx	lr
 80168be:	bf00      	nop
 80168c0:	20056560 	.word	0x20056560

080168c4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80168c4:	4b01      	ldr	r3, [pc, #4]	; (80168cc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80168c6:	6818      	ldr	r0, [r3, #0]
 80168c8:	4770      	bx	lr
 80168ca:	bf00      	nop
 80168cc:	20056550 	.word	0x20056550

080168d0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80168d0:	4b01      	ldr	r3, [pc, #4]	; (80168d8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80168d2:	6818      	ldr	r0, [r3, #0]
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop
 80168d8:	20056548 	.word	0x20056548

080168dc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80168dc:	4b01      	ldr	r3, [pc, #4]	; (80168e4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80168de:	6818      	ldr	r0, [r3, #0]
 80168e0:	4770      	bx	lr
 80168e2:	bf00      	nop
 80168e4:	2005655c 	.word	0x2005655c

080168e8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80168e8:	4b01      	ldr	r3, [pc, #4]	; (80168f0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80168ea:	6019      	str	r1, [r3, #0]
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop
 80168f0:	20056564 	.word	0x20056564

080168f4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80168f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f8:	4696      	mov	lr, r2
 80168fa:	b097      	sub	sp, #92	; 0x5c
 80168fc:	4605      	mov	r5, r0
 80168fe:	4614      	mov	r4, r2
 8016900:	460e      	mov	r6, r1
 8016902:	461f      	mov	r7, r3
 8016904:	f10d 0c1c 	add.w	ip, sp, #28
 8016908:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801690c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016910:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8016914:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016918:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801691c:	f8de 3000 	ldr.w	r3, [lr]
 8016920:	f104 0e14 	add.w	lr, r4, #20
 8016924:	f8cc 3000 	str.w	r3, [ip]
 8016928:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801692c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016930:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016934:	f8de 3000 	ldr.w	r3, [lr]
 8016938:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801693c:	f8cc 3000 	str.w	r3, [ip]
 8016940:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016944:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016948:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801694c:	f8de 3000 	ldr.w	r3, [lr]
 8016950:	4631      	mov	r1, r6
 8016952:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016954:	4628      	mov	r0, r5
 8016956:	f8cc 3000 	str.w	r3, [ip]
 801695a:	682b      	ldr	r3, [r5, #0]
 801695c:	9201      	str	r2, [sp, #4]
 801695e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016960:	f8cd 8008 	str.w	r8, [sp, #8]
 8016964:	9200      	str	r2, [sp, #0]
 8016966:	aa07      	add	r2, sp, #28
 8016968:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801696c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8016970:	463b      	mov	r3, r7
 8016972:	47d8      	blx	fp
 8016974:	46a6      	mov	lr, r4
 8016976:	f10d 0c1c 	add.w	ip, sp, #28
 801697a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801697e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016982:	f8de 3000 	ldr.w	r3, [lr]
 8016986:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801698a:	343c      	adds	r4, #60	; 0x3c
 801698c:	f8cc 3000 	str.w	r3, [ip]
 8016990:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016994:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016998:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801699c:	f8de 3000 	ldr.w	r3, [lr]
 80169a0:	f8cc 3000 	str.w	r3, [ip]
 80169a4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80169a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169ae:	6823      	ldr	r3, [r4, #0]
 80169b0:	4631      	mov	r1, r6
 80169b2:	4628      	mov	r0, r5
 80169b4:	f8cc 3000 	str.w	r3, [ip]
 80169b8:	682b      	ldr	r3, [r5, #0]
 80169ba:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80169be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80169c0:	f8cd 8008 	str.w	r8, [sp, #8]
 80169c4:	9201      	str	r2, [sp, #4]
 80169c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80169c8:	9200      	str	r2, [sp, #0]
 80169ca:	aa07      	add	r2, sp, #28
 80169cc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80169ce:	463b      	mov	r3, r7
 80169d0:	47a0      	blx	r4
 80169d2:	b017      	add	sp, #92	; 0x5c
 80169d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080169d8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80169d8:	2000      	movs	r0, #0
 80169da:	4770      	bx	lr

080169dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80169dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e0:	b08d      	sub	sp, #52	; 0x34
 80169e2:	4688      	mov	r8, r1
 80169e4:	f8d3 c000 	ldr.w	ip, [r3]
 80169e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80169ea:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80169ee:	680f      	ldr	r7, [r1, #0]
 80169f0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80169f4:	eba7 070c 	sub.w	r7, r7, ip
 80169f8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80169fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8016a00:	42bc      	cmp	r4, r7
 8016a02:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016a04:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016a08:	bfa8      	it	ge
 8016a0a:	463c      	movge	r4, r7
 8016a0c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016a10:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016a14:	ee07 4a90 	vmov	s15, r4
 8016a18:	eb09 0e0c 	add.w	lr, r9, ip
 8016a1c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8016a20:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016a24:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016a28:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8016a2c:	4571      	cmp	r1, lr
 8016a2e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016a32:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016a36:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016a3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016a3e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016a42:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016a46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016a4a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016a4e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016a52:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016a56:	f340 808c 	ble.w	8016b72 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016a5a:	eba1 060e 	sub.w	r6, r1, lr
 8016a5e:	fb96 f5f4 	sdiv	r5, r6, r4
 8016a62:	ee07 5a10 	vmov	s14, r5
 8016a66:	2d00      	cmp	r5, #0
 8016a68:	fb04 6615 	mls	r6, r4, r5, r6
 8016a6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016a70:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016a74:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016a78:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016a7c:	dd12      	ble.n	8016aa4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016a7e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016a82:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016a86:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016a8a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a92:	bf14      	ite	ne
 8016a94:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016a98:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016a9c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016aa0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016aa4:	fb05 f204 	mul.w	r2, r5, r4
 8016aa8:	1abf      	subs	r7, r7, r2
 8016aaa:	4494      	add	ip, r2
 8016aac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016ab0:	4411      	add	r1, r2
 8016ab2:	eb09 020c 	add.w	r2, r9, ip
 8016ab6:	b209      	sxth	r1, r1
 8016ab8:	443a      	add	r2, r7
 8016aba:	428a      	cmp	r2, r1
 8016abc:	bfc4      	itt	gt
 8016abe:	eba1 0209 	subgt.w	r2, r1, r9
 8016ac2:	eba2 070c 	subgt.w	r7, r2, ip
 8016ac6:	2f00      	cmp	r7, #0
 8016ac8:	dd50      	ble.n	8016b6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016aca:	fb97 f1f4 	sdiv	r1, r7, r4
 8016ace:	fb04 7211 	mls	r2, r4, r1, r7
 8016ad2:	b90a      	cbnz	r2, 8016ad8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016ad4:	3901      	subs	r1, #1
 8016ad6:	4622      	mov	r2, r4
 8016ad8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016adc:	6840      	ldr	r0, [r0, #4]
 8016ade:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016ae2:	44b6      	add	lr, r6
 8016ae4:	f8d0 a000 	ldr.w	sl, [r0]
 8016ae8:	2900      	cmp	r1, #0
 8016aea:	bfcc      	ite	gt
 8016aec:	46a1      	movgt	r9, r4
 8016aee:	4691      	movle	r9, r2
 8016af0:	900b      	str	r0, [sp, #44]	; 0x2c
 8016af2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016af4:	fb04 e505 	mla	r5, r4, r5, lr
 8016af8:	eef0 6a42 	vmov.f32	s13, s4
 8016afc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016b00:	9008      	str	r0, [sp, #32]
 8016b02:	eeb0 7a61 	vmov.f32	s14, s3
 8016b06:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016b08:	695b      	ldr	r3, [r3, #20]
 8016b0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016b0e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016b12:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016b16:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016b18:	445b      	add	r3, fp
 8016b1a:	9307      	str	r3, [sp, #28]
 8016b1c:	ee16 3a90 	vmov	r3, s13
 8016b20:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016b24:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016b28:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016b2c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016b30:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016b34:	ee17 7a90 	vmov	r7, s15
 8016b38:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016b3c:	fb97 f7f4 	sdiv	r7, r7, r4
 8016b40:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016b44:	ee17 ca90 	vmov	ip, s15
 8016b48:	fb9c fcf4 	sdiv	ip, ip, r4
 8016b4c:	fb0c 3306 	mla	r3, ip, r6, r3
 8016b50:	9302      	str	r3, [sp, #8]
 8016b52:	ee17 3a10 	vmov	r3, s14
 8016b56:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016b5a:	fb07 3706 	mla	r7, r7, r6, r3
 8016b5e:	eba9 0306 	sub.w	r3, r9, r6
 8016b62:	e9cd 4700 	strd	r4, r7, [sp]
 8016b66:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016b6a:	47a0      	blx	r4
 8016b6c:	b00d      	add	sp, #52	; 0x34
 8016b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b72:	2500      	movs	r5, #0
 8016b74:	462e      	mov	r6, r5
 8016b76:	e799      	b.n	8016aac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b7c:	b0db      	sub	sp, #364	; 0x16c
 8016b7e:	461d      	mov	r5, r3
 8016b80:	4614      	mov	r4, r2
 8016b82:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016b86:	910f      	str	r1, [sp, #60]	; 0x3c
 8016b88:	4629      	mov	r1, r5
 8016b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8016b8c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016b90:	9009      	str	r0, [sp, #36]	; 0x24
 8016b92:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b94:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016b98:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016b9c:	9310      	str	r3, [sp, #64]	; 0x40
 8016b9e:	6803      	ldr	r3, [r0, #0]
 8016ba0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8016ba2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016ba6:	47b8      	blx	r7
 8016ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016baa:	6058      	str	r0, [r3, #4]
 8016bac:	2800      	cmp	r0, #0
 8016bae:	f000 83a1 	beq.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016bb2:	682b      	ldr	r3, [r5, #0]
 8016bb4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016bb8:	ed94 7a02 	vldr	s14, [r4, #8]
 8016bbc:	9314      	str	r3, [sp, #80]	; 0x50
 8016bbe:	686b      	ldr	r3, [r5, #4]
 8016bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bc4:	9315      	str	r3, [sp, #84]	; 0x54
 8016bc6:	4bc1      	ldr	r3, [pc, #772]	; (8016ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016bc8:	7819      	ldrb	r1, [r3, #0]
 8016bca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016bce:	2900      	cmp	r1, #0
 8016bd0:	bf16      	itet	ne
 8016bd2:	4619      	movne	r1, r3
 8016bd4:	4611      	moveq	r1, r2
 8016bd6:	4613      	movne	r3, r2
 8016bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bdc:	9116      	str	r1, [sp, #88]	; 0x58
 8016bde:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016be2:	f240 8387 	bls.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016be6:	ed94 7a07 	vldr	s14, [r4, #28]
 8016bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf2:	f240 837f 	bls.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016bf6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c02:	f240 8377 	bls.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c06:	6822      	ldr	r2, [r4, #0]
 8016c08:	4bb1      	ldr	r3, [pc, #708]	; (8016ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	f2c0 8372 	blt.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c10:	49b0      	ldr	r1, [pc, #704]	; (8016ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016c12:	6963      	ldr	r3, [r4, #20]
 8016c14:	428a      	cmp	r2, r1
 8016c16:	f300 836d 	bgt.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c1a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016c1e:	48ae      	ldr	r0, [pc, #696]	; (8016ed8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016c20:	33ff      	adds	r3, #255	; 0xff
 8016c22:	4283      	cmp	r3, r0
 8016c24:	f200 8366 	bhi.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016c2a:	4dac      	ldr	r5, [pc, #688]	; (8016edc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016c2c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016c30:	33ff      	adds	r3, #255	; 0xff
 8016c32:	42ab      	cmp	r3, r5
 8016c34:	f200 835e 	bhi.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c38:	6862      	ldr	r2, [r4, #4]
 8016c3a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016c3e:	33ff      	adds	r3, #255	; 0xff
 8016c40:	4283      	cmp	r3, r0
 8016c42:	f200 8357 	bhi.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c46:	69a1      	ldr	r1, [r4, #24]
 8016c48:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016c4c:	33ff      	adds	r3, #255	; 0xff
 8016c4e:	4283      	cmp	r3, r0
 8016c50:	f200 8350 	bhi.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016c56:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016c5a:	30ff      	adds	r0, #255	; 0xff
 8016c5c:	42a8      	cmp	r0, r5
 8016c5e:	f200 8349 	bhi.w	80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c62:	428a      	cmp	r2, r1
 8016c64:	f280 8110 	bge.w	8016e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016c68:	429a      	cmp	r2, r3
 8016c6a:	f300 8119 	bgt.w	8016ea0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016c6e:	4299      	cmp	r1, r3
 8016c70:	f280 811d 	bge.w	8016eae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016c74:	2502      	movs	r5, #2
 8016c76:	2701      	movs	r7, #1
 8016c78:	46a9      	mov	r9, r5
 8016c7a:	46b8      	mov	r8, r7
 8016c7c:	f04f 0a00 	mov.w	sl, #0
 8016c80:	4621      	mov	r1, r4
 8016c82:	a849      	add	r0, sp, #292	; 0x124
 8016c84:	f003 fd3e 	bl	801a704 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016c88:	4622      	mov	r2, r4
 8016c8a:	4653      	mov	r3, sl
 8016c8c:	a949      	add	r1, sp, #292	; 0x124
 8016c8e:	f8cd 9000 	str.w	r9, [sp]
 8016c92:	a819      	add	r0, sp, #100	; 0x64
 8016c94:	f003 fe66 	bl	801a964 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016c98:	4622      	mov	r2, r4
 8016c9a:	4653      	mov	r3, sl
 8016c9c:	a949      	add	r1, sp, #292	; 0x124
 8016c9e:	f8cd 8000 	str.w	r8, [sp]
 8016ca2:	a829      	add	r0, sp, #164	; 0xa4
 8016ca4:	f003 fe5e 	bl	801a964 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016ca8:	4643      	mov	r3, r8
 8016caa:	4622      	mov	r2, r4
 8016cac:	a949      	add	r1, sp, #292	; 0x124
 8016cae:	f8cd 9000 	str.w	r9, [sp]
 8016cb2:	a839      	add	r0, sp, #228	; 0xe4
 8016cb4:	f003 fe56 	bl	801a964 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016cb8:	42af      	cmp	r7, r5
 8016cba:	af12      	add	r7, sp, #72	; 0x48
 8016cbc:	bfb7      	itett	lt
 8016cbe:	2300      	movlt	r3, #0
 8016cc0:	2301      	movge	r3, #1
 8016cc2:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016cc4:	ac19      	addlt	r4, sp, #100	; 0x64
 8016cc6:	bfb1      	iteee	lt
 8016cc8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016cca:	ad19      	addge	r5, sp, #100	; 0x64
 8016ccc:	930e      	strge	r3, [sp, #56]	; 0x38
 8016cce:	ac29      	addge	r4, sp, #164	; 0xa4
 8016cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016cd6:	e887 0003 	stmia.w	r7, {r0, r1}
 8016cda:	b928      	cbnz	r0, 8016ce8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016cdc:	4b80      	ldr	r3, [pc, #512]	; (8016ee0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016cde:	6818      	ldr	r0, [r3, #0]
 8016ce0:	6803      	ldr	r3, [r0, #0]
 8016ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ce4:	4798      	blx	r3
 8016ce6:	6038      	str	r0, [r7, #0]
 8016ce8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016cea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016cf2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8016cf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016cf8:	6963      	ldr	r3, [r4, #20]
 8016cfa:	440b      	add	r3, r1
 8016cfc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016d00:	4408      	add	r0, r1
 8016d02:	b200      	sxth	r0, r0
 8016d04:	4283      	cmp	r3, r0
 8016d06:	900d      	str	r0, [sp, #52]	; 0x34
 8016d08:	f280 80dd 	bge.w	8016ec6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016d0c:	428b      	cmp	r3, r1
 8016d0e:	da08      	bge.n	8016d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016d10:	2a00      	cmp	r2, #0
 8016d12:	dd06      	ble.n	8016d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016d14:	1acb      	subs	r3, r1, r3
 8016d16:	429a      	cmp	r2, r3
 8016d18:	f2c0 80e4 	blt.w	8016ee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	f300 80e2 	bgt.w	8016ee6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016d22:	6967      	ldr	r7, [r4, #20]
 8016d24:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d2a:	443b      	add	r3, r7
 8016d2c:	461f      	mov	r7, r3
 8016d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d30:	1bdf      	subs	r7, r3, r7
 8016d32:	4297      	cmp	r7, r2
 8016d34:	bfa8      	it	ge
 8016d36:	4617      	movge	r7, r2
 8016d38:	2f00      	cmp	r7, #0
 8016d3a:	f340 8166 	ble.w	801700a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016d3e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016d40:	6829      	ldr	r1, [r5, #0]
 8016d42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016d46:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016d4a:	4411      	add	r1, r2
 8016d4c:	6820      	ldr	r0, [r4, #0]
 8016d4e:	4299      	cmp	r1, r3
 8016d50:	dd1a      	ble.n	8016d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016d52:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016d56:	4402      	add	r2, r0
 8016d58:	440b      	add	r3, r1
 8016d5a:	b21b      	sxth	r3, r3
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	dc13      	bgt.n	8016d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016d60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d62:	a912      	add	r1, sp, #72	; 0x48
 8016d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	9206      	str	r2, [sp, #24]
 8016d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d6e:	9500      	str	r5, [sp, #0]
 8016d70:	9205      	str	r2, [sp, #20]
 8016d72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d74:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016d78:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016d7a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016d7e:	aa49      	add	r2, sp, #292	; 0x124
 8016d80:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8016d84:	4623      	mov	r3, r4
 8016d86:	47c8      	blx	r9
 8016d88:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016d8c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016d90:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d98:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016d9c:	68a1      	ldr	r1, [r4, #8]
 8016d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016da2:	ed94 6a08 	vldr	s12, [r4, #32]
 8016da6:	edd4 6a07 	vldr	s13, [r4, #28]
 8016daa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016dae:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016db2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016db6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016dba:	edc4 6a07 	vstr	s13, [r4, #28]
 8016dbe:	441a      	add	r2, r3
 8016dc0:	6963      	ldr	r3, [r4, #20]
 8016dc2:	3301      	adds	r3, #1
 8016dc4:	6022      	str	r2, [r4, #0]
 8016dc6:	6163      	str	r3, [r4, #20]
 8016dc8:	69a3      	ldr	r3, [r4, #24]
 8016dca:	3b01      	subs	r3, #1
 8016dcc:	61a3      	str	r3, [r4, #24]
 8016dce:	6923      	ldr	r3, [r4, #16]
 8016dd0:	440b      	add	r3, r1
 8016dd2:	68e1      	ldr	r1, [r4, #12]
 8016dd4:	428b      	cmp	r3, r1
 8016dd6:	6123      	str	r3, [r4, #16]
 8016dd8:	db15      	blt.n	8016e06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016dda:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016dde:	3201      	adds	r2, #1
 8016de0:	1a5b      	subs	r3, r3, r1
 8016de2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016de6:	6022      	str	r2, [r4, #0]
 8016de8:	6123      	str	r3, [r4, #16]
 8016dea:	edc4 6a07 	vstr	s13, [r4, #28]
 8016dee:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016df2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016df6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016dfa:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e02:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016e06:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016e0a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016e0e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016e12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e16:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016e1a:	68a9      	ldr	r1, [r5, #8]
 8016e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e20:	ed95 6a08 	vldr	s12, [r5, #32]
 8016e24:	edd5 6a07 	vldr	s13, [r5, #28]
 8016e28:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016e2c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016e30:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016e34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e38:	edc5 6a07 	vstr	s13, [r5, #28]
 8016e3c:	441a      	add	r2, r3
 8016e3e:	696b      	ldr	r3, [r5, #20]
 8016e40:	3301      	adds	r3, #1
 8016e42:	602a      	str	r2, [r5, #0]
 8016e44:	616b      	str	r3, [r5, #20]
 8016e46:	69ab      	ldr	r3, [r5, #24]
 8016e48:	3b01      	subs	r3, #1
 8016e4a:	61ab      	str	r3, [r5, #24]
 8016e4c:	692b      	ldr	r3, [r5, #16]
 8016e4e:	440b      	add	r3, r1
 8016e50:	68e9      	ldr	r1, [r5, #12]
 8016e52:	428b      	cmp	r3, r1
 8016e54:	612b      	str	r3, [r5, #16]
 8016e56:	db15      	blt.n	8016e84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016e58:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016e5c:	3201      	adds	r2, #1
 8016e5e:	1a5b      	subs	r3, r3, r1
 8016e60:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016e64:	602a      	str	r2, [r5, #0]
 8016e66:	612b      	str	r3, [r5, #16]
 8016e68:	edc5 6a07 	vstr	s13, [r5, #28]
 8016e6c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016e70:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016e74:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016e78:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e80:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016e84:	3f01      	subs	r7, #1
 8016e86:	e757      	b.n	8016d38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016e88:	4299      	cmp	r1, r3
 8016e8a:	dc13      	bgt.n	8016eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	da14      	bge.n	8016eba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016e90:	2502      	movs	r5, #2
 8016e92:	2703      	movs	r7, #3
 8016e94:	f04f 0800 	mov.w	r8, #0
 8016e98:	46a9      	mov	r9, r5
 8016e9a:	f04f 0a01 	mov.w	sl, #1
 8016e9e:	e6ef      	b.n	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016ea0:	2501      	movs	r5, #1
 8016ea2:	2700      	movs	r7, #0
 8016ea4:	46a9      	mov	r9, r5
 8016ea6:	46b8      	mov	r8, r7
 8016ea8:	f04f 0a02 	mov.w	sl, #2
 8016eac:	e6e8      	b.n	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016eae:	2501      	movs	r5, #1
 8016eb0:	2702      	movs	r7, #2
 8016eb2:	e6e1      	b.n	8016c78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016eb4:	2500      	movs	r5, #0
 8016eb6:	2701      	movs	r7, #1
 8016eb8:	e7f4      	b.n	8016ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016eba:	2702      	movs	r7, #2
 8016ebc:	2503      	movs	r5, #3
 8016ebe:	f04f 0900 	mov.w	r9, #0
 8016ec2:	46b8      	mov	r8, r7
 8016ec4:	e7e9      	b.n	8016e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	e728      	b.n	8016d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016eca:	bf00      	nop
 8016ecc:	20056534 	.word	0x20056534
 8016ed0:	fffd8f01 	.word	0xfffd8f01
 8016ed4:	00027100 	.word	0x00027100
 8016ed8:	0004e1ff 	.word	0x0004e1ff
 8016edc:	0004e1fe 	.word	0x0004e1fe
 8016ee0:	2005653c 	.word	0x2005653c
 8016ee4:	4613      	mov	r3, r2
 8016ee6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016ee8:	469e      	mov	lr, r3
 8016eea:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016eec:	469c      	mov	ip, r3
 8016eee:	9111      	str	r1, [sp, #68]	; 0x44
 8016ef0:	f04f 0900 	mov.w	r9, #0
 8016ef4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016ef8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016efc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016f00:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016f04:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016f08:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016f0c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016f10:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016f14:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016f18:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016f1c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016f20:	f1bc 0f00 	cmp.w	ip, #0
 8016f24:	d147      	bne.n	8016fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016f26:	eb03 0c07 	add.w	ip, r3, r7
 8016f2a:	1ad7      	subs	r7, r2, r3
 8016f2c:	f1b9 0f00 	cmp.w	r9, #0
 8016f30:	d009      	beq.n	8016f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016f32:	9029      	str	r0, [sp, #164]	; 0xa4
 8016f34:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016f38:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016f3c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016f40:	912d      	str	r1, [sp, #180]	; 0xb4
 8016f42:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016f46:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016f48:	f04f 0800 	mov.w	r8, #0
 8016f4c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016f50:	9111      	str	r1, [sp, #68]	; 0x44
 8016f52:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016f56:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016f5a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016f5e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016f62:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016f66:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016f6a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016f6e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016f72:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016f76:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016f7a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016f7e:	f1be 0f00 	cmp.w	lr, #0
 8016f82:	d031      	beq.n	8016fe8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016f84:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016f86:	4450      	add	r0, sl
 8016f88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016f8c:	4431      	add	r1, r6
 8016f8e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016f92:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016f96:	4549      	cmp	r1, r9
 8016f98:	db08      	blt.n	8016fac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016f9a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016f9e:	3001      	adds	r0, #1
 8016fa0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016fa4:	eba1 0109 	sub.w	r1, r1, r9
 8016fa8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016fac:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016fb0:	f04f 0801 	mov.w	r8, #1
 8016fb4:	e7e3      	b.n	8016f7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016fb6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016fb8:	4450      	add	r0, sl
 8016fba:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016fbe:	4431      	add	r1, r6
 8016fc0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016fc4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016fc8:	4541      	cmp	r1, r8
 8016fca:	db08      	blt.n	8016fde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016fcc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016fd0:	3001      	adds	r0, #1
 8016fd2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016fd6:	eba1 0108 	sub.w	r1, r1, r8
 8016fda:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016fde:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016fe2:	f04f 0901 	mov.w	r9, #1
 8016fe6:	e79b      	b.n	8016f20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016fe8:	449c      	add	ip, r3
 8016fea:	1aff      	subs	r7, r7, r3
 8016fec:	f1b8 0f00 	cmp.w	r8, #0
 8016ff0:	d009      	beq.n	8017006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016ff2:	9019      	str	r0, [sp, #100]	; 0x64
 8016ff4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016ff8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016ffc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017000:	911d      	str	r1, [sp, #116]	; 0x74
 8017002:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017006:	1ad2      	subs	r2, r2, r3
 8017008:	e68b      	b.n	8016d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801700a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801700c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801700e:	2b00      	cmp	r3, #0
 8017010:	f000 80d1 	beq.w	80171b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017014:	ad19      	add	r5, sp, #100	; 0x64
 8017016:	ac39      	add	r4, sp, #228	; 0xe4
 8017018:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801701a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801701e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017022:	930c      	str	r3, [sp, #48]	; 0x30
 8017024:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017026:	6963      	ldr	r3, [r4, #20]
 8017028:	440b      	add	r3, r1
 801702a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801702e:	4408      	add	r0, r1
 8017030:	b200      	sxth	r0, r0
 8017032:	4283      	cmp	r3, r0
 8017034:	900d      	str	r0, [sp, #52]	; 0x34
 8017036:	f280 80c1 	bge.w	80171bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801703a:	428b      	cmp	r3, r1
 801703c:	da08      	bge.n	8017050 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801703e:	2a00      	cmp	r2, #0
 8017040:	dd06      	ble.n	8017050 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017042:	1acb      	subs	r3, r1, r3
 8017044:	429a      	cmp	r2, r3
 8017046:	f2c0 80bb 	blt.w	80171c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801704a:	2b00      	cmp	r3, #0
 801704c:	f300 80b9 	bgt.w	80171c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017050:	6967      	ldr	r7, [r4, #20]
 8017052:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017058:	443b      	add	r3, r7
 801705a:	461f      	mov	r7, r3
 801705c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801705e:	1bdf      	subs	r7, r3, r7
 8017060:	4297      	cmp	r7, r2
 8017062:	bfa8      	it	ge
 8017064:	4617      	movge	r7, r2
 8017066:	2f00      	cmp	r7, #0
 8017068:	f340 813c 	ble.w	80172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801706c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801706e:	6829      	ldr	r1, [r5, #0]
 8017070:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017074:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017078:	4411      	add	r1, r2
 801707a:	6820      	ldr	r0, [r4, #0]
 801707c:	4299      	cmp	r1, r3
 801707e:	dd1a      	ble.n	80170b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017080:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017084:	4402      	add	r2, r0
 8017086:	440b      	add	r3, r1
 8017088:	b21b      	sxth	r3, r3
 801708a:	429a      	cmp	r2, r3
 801708c:	dc13      	bgt.n	80170b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801708e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017090:	a912      	add	r1, sp, #72	; 0x48
 8017092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	9206      	str	r2, [sp, #24]
 801709a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801709c:	9500      	str	r5, [sp, #0]
 801709e:	9205      	str	r2, [sp, #20]
 80170a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170a2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80170a6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80170a8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80170ac:	aa49      	add	r2, sp, #292	; 0x124
 80170ae:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 80170b2:	4623      	mov	r3, r4
 80170b4:	47c8      	blx	r9
 80170b6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80170ba:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80170be:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80170c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80170c6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80170ca:	68a1      	ldr	r1, [r4, #8]
 80170cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80170d0:	ed94 6a08 	vldr	s12, [r4, #32]
 80170d4:	edd4 6a07 	vldr	s13, [r4, #28]
 80170d8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80170dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80170e0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80170e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80170e8:	edc4 6a07 	vstr	s13, [r4, #28]
 80170ec:	441a      	add	r2, r3
 80170ee:	6963      	ldr	r3, [r4, #20]
 80170f0:	3301      	adds	r3, #1
 80170f2:	6022      	str	r2, [r4, #0]
 80170f4:	6163      	str	r3, [r4, #20]
 80170f6:	69a3      	ldr	r3, [r4, #24]
 80170f8:	3b01      	subs	r3, #1
 80170fa:	61a3      	str	r3, [r4, #24]
 80170fc:	6923      	ldr	r3, [r4, #16]
 80170fe:	440b      	add	r3, r1
 8017100:	68e1      	ldr	r1, [r4, #12]
 8017102:	428b      	cmp	r3, r1
 8017104:	6123      	str	r3, [r4, #16]
 8017106:	db15      	blt.n	8017134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017108:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801710c:	3201      	adds	r2, #1
 801710e:	1a5b      	subs	r3, r3, r1
 8017110:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017114:	6022      	str	r2, [r4, #0]
 8017116:	6123      	str	r3, [r4, #16]
 8017118:	edc4 6a07 	vstr	s13, [r4, #28]
 801711c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017120:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017124:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017128:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801712c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017130:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017134:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017138:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801713c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017144:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017148:	68a9      	ldr	r1, [r5, #8]
 801714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801714e:	ed95 6a08 	vldr	s12, [r5, #32]
 8017152:	edd5 6a07 	vldr	s13, [r5, #28]
 8017156:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801715a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801715e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017162:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017166:	edc5 6a07 	vstr	s13, [r5, #28]
 801716a:	441a      	add	r2, r3
 801716c:	696b      	ldr	r3, [r5, #20]
 801716e:	3301      	adds	r3, #1
 8017170:	602a      	str	r2, [r5, #0]
 8017172:	616b      	str	r3, [r5, #20]
 8017174:	69ab      	ldr	r3, [r5, #24]
 8017176:	3b01      	subs	r3, #1
 8017178:	61ab      	str	r3, [r5, #24]
 801717a:	692b      	ldr	r3, [r5, #16]
 801717c:	440b      	add	r3, r1
 801717e:	68e9      	ldr	r1, [r5, #12]
 8017180:	428b      	cmp	r3, r1
 8017182:	612b      	str	r3, [r5, #16]
 8017184:	db15      	blt.n	80171b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017186:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801718a:	3201      	adds	r2, #1
 801718c:	1a5b      	subs	r3, r3, r1
 801718e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017192:	602a      	str	r2, [r5, #0]
 8017194:	612b      	str	r3, [r5, #16]
 8017196:	edc5 6a07 	vstr	s13, [r5, #28]
 801719a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801719e:	ee36 7a87 	vadd.f32	s14, s13, s14
 80171a2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80171a6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80171aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171ae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80171b2:	3f01      	subs	r7, #1
 80171b4:	e757      	b.n	8017066 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80171b6:	ad39      	add	r5, sp, #228	; 0xe4
 80171b8:	ac19      	add	r4, sp, #100	; 0x64
 80171ba:	e72d      	b.n	8017018 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80171bc:	4613      	mov	r3, r2
 80171be:	e744      	b.n	801704a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80171c0:	4613      	mov	r3, r2
 80171c2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80171c4:	469e      	mov	lr, r3
 80171c6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80171ca:	461f      	mov	r7, r3
 80171cc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80171d0:	f04f 0900 	mov.w	r9, #0
 80171d4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80171d8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80171dc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80171e0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80171e4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80171e8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80171ea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80171ee:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80171f2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80171f6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80171fa:	960e      	str	r6, [sp, #56]	; 0x38
 80171fc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017200:	2f00      	cmp	r7, #0
 8017202:	d146      	bne.n	8017292 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017204:	449c      	add	ip, r3
 8017206:	1ad7      	subs	r7, r2, r3
 8017208:	f1b9 0f00 	cmp.w	r9, #0
 801720c:	d009      	beq.n	8017222 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801720e:	9039      	str	r0, [sp, #228]	; 0xe4
 8017210:	913d      	str	r1, [sp, #244]	; 0xf4
 8017212:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017216:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801721a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801721e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017222:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017224:	f04f 0800 	mov.w	r8, #0
 8017228:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801722c:	910e      	str	r1, [sp, #56]	; 0x38
 801722e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017232:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017236:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801723a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801723e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017242:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017246:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801724a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801724e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017252:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017256:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801725a:	f1be 0f00 	cmp.w	lr, #0
 801725e:	d030      	beq.n	80172c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017260:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017262:	4450      	add	r0, sl
 8017264:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017268:	4431      	add	r1, r6
 801726a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801726e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017272:	4549      	cmp	r1, r9
 8017274:	db08      	blt.n	8017288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017276:	ee77 7a85 	vadd.f32	s15, s15, s10
 801727a:	3001      	adds	r0, #1
 801727c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017280:	eba1 0109 	sub.w	r1, r1, r9
 8017284:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017288:	f10e 3eff 	add.w	lr, lr, #4294967295
 801728c:	f04f 0801 	mov.w	r8, #1
 8017290:	e7e3      	b.n	801725a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017292:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017294:	4450      	add	r0, sl
 8017296:	ee37 7a24 	vadd.f32	s14, s14, s9
 801729a:	4431      	add	r1, r6
 801729c:	ee77 7a84 	vadd.f32	s15, s15, s8
 80172a0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80172a4:	4541      	cmp	r1, r8
 80172a6:	db08      	blt.n	80172ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80172a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80172ac:	3001      	adds	r0, #1
 80172ae:	ee37 7a25 	vadd.f32	s14, s14, s11
 80172b2:	eba1 0108 	sub.w	r1, r1, r8
 80172b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80172ba:	3f01      	subs	r7, #1
 80172bc:	f04f 0901 	mov.w	r9, #1
 80172c0:	e79e      	b.n	8017200 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80172c2:	449c      	add	ip, r3
 80172c4:	1aff      	subs	r7, r7, r3
 80172c6:	f1b8 0f00 	cmp.w	r8, #0
 80172ca:	d009      	beq.n	80172e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80172cc:	9019      	str	r0, [sp, #100]	; 0x64
 80172ce:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80172d2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80172d6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80172da:	911d      	str	r1, [sp, #116]	; 0x74
 80172dc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80172e0:	1ad2      	subs	r2, r2, r3
 80172e2:	e6b5      	b.n	8017050 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80172e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	b923      	cbnz	r3, 80172f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80172ea:	4b04      	ldr	r3, [pc, #16]	; (80172fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80172ec:	6818      	ldr	r0, [r3, #0]
 80172ee:	6803      	ldr	r3, [r0, #0]
 80172f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172f2:	4798      	blx	r3
 80172f4:	b05b      	add	sp, #364	; 0x16c
 80172f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172fa:	bf00      	nop
 80172fc:	2005653c 	.word	0x2005653c

08017300 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017300:	b570      	push	{r4, r5, r6, lr}
 8017302:	4604      	mov	r4, r0
 8017304:	2500      	movs	r5, #0
 8017306:	9804      	ldr	r0, [sp, #16]
 8017308:	7223      	strb	r3, [r4, #8]
 801730a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801730e:	8025      	strh	r5, [r4, #0]
 8017310:	6061      	str	r1, [r4, #4]
 8017312:	7263      	strb	r3, [r4, #9]
 8017314:	60e0      	str	r0, [r4, #12]
 8017316:	8222      	strh	r2, [r4, #16]
 8017318:	8265      	strh	r5, [r4, #18]
 801731a:	82a5      	strh	r5, [r4, #20]
 801731c:	82e5      	strh	r5, [r4, #22]
 801731e:	8325      	strh	r5, [r4, #24]
 8017320:	8365      	strh	r5, [r4, #26]
 8017322:	83a5      	strh	r5, [r4, #28]
 8017324:	77a5      	strb	r5, [r4, #30]
 8017326:	6803      	ldr	r3, [r0, #0]
 8017328:	695b      	ldr	r3, [r3, #20]
 801732a:	4798      	blx	r3
 801732c:	4606      	mov	r6, r0
 801732e:	b1f8      	cbz	r0, 8017370 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017330:	68e0      	ldr	r0, [r4, #12]
 8017332:	4631      	mov	r1, r6
 8017334:	6803      	ldr	r3, [r0, #0]
 8017336:	68db      	ldr	r3, [r3, #12]
 8017338:	4798      	blx	r3
 801733a:	7b43      	ldrb	r3, [r0, #13]
 801733c:	7a82      	ldrb	r2, [r0, #10]
 801733e:	4605      	mov	r5, r0
 8017340:	005b      	lsls	r3, r3, #1
 8017342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017346:	4313      	orrs	r3, r2
 8017348:	83a3      	strh	r3, [r4, #28]
 801734a:	7a63      	ldrb	r3, [r4, #9]
 801734c:	2b04      	cmp	r3, #4
 801734e:	d10f      	bne.n	8017370 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017350:	68e0      	ldr	r0, [r4, #12]
 8017352:	462a      	mov	r2, r5
 8017354:	4631      	mov	r1, r6
 8017356:	6803      	ldr	r3, [r0, #0]
 8017358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801735a:	4798      	blx	r3
 801735c:	7b6b      	ldrb	r3, [r5, #13]
 801735e:	005b      	lsls	r3, r3, #1
 8017360:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017364:	7aab      	ldrb	r3, [r5, #10]
 8017366:	4313      	orrs	r3, r2
 8017368:	4418      	add	r0, r3
 801736a:	8ba3      	ldrh	r3, [r4, #28]
 801736c:	4418      	add	r0, r3
 801736e:	83a0      	strh	r0, [r4, #28]
 8017370:	4620      	mov	r0, r4
 8017372:	bd70      	pop	{r4, r5, r6, pc}

08017374 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017378:	2400      	movs	r4, #0
 801737a:	b085      	sub	sp, #20
 801737c:	4681      	mov	r9, r0
 801737e:	4688      	mov	r8, r1
 8017380:	4692      	mov	sl, r2
 8017382:	469b      	mov	fp, r3
 8017384:	4627      	mov	r7, r4
 8017386:	4625      	mov	r5, r4
 8017388:	4626      	mov	r6, r4
 801738a:	4554      	cmp	r4, sl
 801738c:	da2a      	bge.n	80173e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801738e:	2300      	movs	r3, #0
 8017390:	9303      	str	r3, [sp, #12]
 8017392:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017396:	429d      	cmp	r5, r3
 8017398:	d004      	beq.n	80173a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801739a:	f242 030b 	movw	r3, #8203	; 0x200b
 801739e:	429d      	cmp	r5, r3
 80173a0:	bf18      	it	ne
 80173a2:	462f      	movne	r7, r5
 80173a4:	ab03      	add	r3, sp, #12
 80173a6:	4642      	mov	r2, r8
 80173a8:	4659      	mov	r1, fp
 80173aa:	4648      	mov	r0, r9
 80173ac:	f002 ff30 	bl	801a210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80173b0:	4605      	mov	r5, r0
 80173b2:	b1b8      	cbz	r0, 80173e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80173b4:	280a      	cmp	r0, #10
 80173b6:	d015      	beq.n	80173e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80173b8:	9a03      	ldr	r2, [sp, #12]
 80173ba:	b18a      	cbz	r2, 80173e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80173bc:	7b50      	ldrb	r0, [r2, #13]
 80173be:	4639      	mov	r1, r7
 80173c0:	7a93      	ldrb	r3, [r2, #10]
 80173c2:	0040      	lsls	r0, r0, #1
 80173c4:	8895      	ldrh	r5, [r2, #4]
 80173c6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80173ca:	4303      	orrs	r3, r0
 80173cc:	4640      	mov	r0, r8
 80173ce:	9301      	str	r3, [sp, #4]
 80173d0:	f8d8 3000 	ldr.w	r3, [r8]
 80173d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173d6:	4798      	blx	r3
 80173d8:	9b01      	ldr	r3, [sp, #4]
 80173da:	4418      	add	r0, r3
 80173dc:	4406      	add	r6, r0
 80173de:	b2b6      	uxth	r6, r6
 80173e0:	3401      	adds	r4, #1
 80173e2:	e7d2      	b.n	801738a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80173e4:	4630      	mov	r0, r6
 80173e6:	b005      	add	sp, #20
 80173e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080173ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80173ec:	2a02      	cmp	r2, #2
 80173ee:	b530      	push	{r4, r5, lr}
 80173f0:	d011      	beq.n	8017416 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80173f2:	2a03      	cmp	r2, #3
 80173f4:	d01c      	beq.n	8017430 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80173f6:	2a01      	cmp	r2, #1
 80173f8:	d10c      	bne.n	8017414 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80173fa:	888b      	ldrh	r3, [r1, #4]
 80173fc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017400:	8801      	ldrh	r1, [r0, #0]
 8017402:	1a9b      	subs	r3, r3, r2
 8017404:	8844      	ldrh	r4, [r0, #2]
 8017406:	1a5b      	subs	r3, r3, r1
 8017408:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801740c:	8004      	strh	r4, [r0, #0]
 801740e:	8043      	strh	r3, [r0, #2]
 8017410:	8081      	strh	r1, [r0, #4]
 8017412:	80c2      	strh	r2, [r0, #6]
 8017414:	bd30      	pop	{r4, r5, pc}
 8017416:	88cb      	ldrh	r3, [r1, #6]
 8017418:	88c2      	ldrh	r2, [r0, #6]
 801741a:	1a9b      	subs	r3, r3, r2
 801741c:	8842      	ldrh	r2, [r0, #2]
 801741e:	1a9b      	subs	r3, r3, r2
 8017420:	888a      	ldrh	r2, [r1, #4]
 8017422:	8881      	ldrh	r1, [r0, #4]
 8017424:	8043      	strh	r3, [r0, #2]
 8017426:	1a52      	subs	r2, r2, r1
 8017428:	8801      	ldrh	r1, [r0, #0]
 801742a:	1a52      	subs	r2, r2, r1
 801742c:	8002      	strh	r2, [r0, #0]
 801742e:	e7f1      	b.n	8017414 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017430:	88cb      	ldrh	r3, [r1, #6]
 8017432:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017436:	8841      	ldrh	r1, [r0, #2]
 8017438:	1a9b      	subs	r3, r3, r2
 801743a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801743e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017442:	1a5b      	subs	r3, r3, r1
 8017444:	8045      	strh	r5, [r0, #2]
 8017446:	8082      	strh	r2, [r0, #4]
 8017448:	8003      	strh	r3, [r0, #0]
 801744a:	80c4      	strh	r4, [r0, #6]
 801744c:	e7e2      	b.n	8017414 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801744e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801744e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017452:	b09f      	sub	sp, #124	; 0x7c
 8017454:	9116      	str	r1, [sp, #88]	; 0x58
 8017456:	9317      	str	r3, [sp, #92]	; 0x5c
 8017458:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801745a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801745c:	8809      	ldrh	r1, [r1, #0]
 801745e:	889b      	ldrh	r3, [r3, #4]
 8017460:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8017464:	440b      	add	r3, r1
 8017466:	9212      	str	r2, [sp, #72]	; 0x48
 8017468:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801746c:	b21b      	sxth	r3, r3
 801746e:	9011      	str	r0, [sp, #68]	; 0x44
 8017470:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8017474:	9310      	str	r3, [sp, #64]	; 0x40
 8017476:	f8d8 3000 	ldr.w	r3, [r8]
 801747a:	7a59      	ldrb	r1, [r3, #9]
 801747c:	7a1b      	ldrb	r3, [r3, #8]
 801747e:	9114      	str	r1, [sp, #80]	; 0x50
 8017480:	9315      	str	r3, [sp, #84]	; 0x54
 8017482:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017484:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017488:	2a00      	cmp	r2, #0
 801748a:	d067      	beq.n	801755c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801748c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017490:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017492:	2b04      	cmp	r3, #4
 8017494:	bf14      	ite	ne
 8017496:	2301      	movne	r3, #1
 8017498:	2302      	moveq	r3, #2
 801749a:	4413      	add	r3, r2
 801749c:	f04f 0900 	mov.w	r9, #0
 80174a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80174a2:	464c      	mov	r4, r9
 80174a4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80174a8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80174ac:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80174b0:	4293      	cmp	r3, r2
 80174b2:	f280 808c 	bge.w	80175ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80174b6:	2300      	movs	r3, #0
 80174b8:	931c      	str	r3, [sp, #112]	; 0x70
 80174ba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80174be:	429c      	cmp	r4, r3
 80174c0:	d006      	beq.n	80174d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80174c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174c4:	f242 020b 	movw	r2, #8203	; 0x200b
 80174c8:	4294      	cmp	r4, r2
 80174ca:	bf18      	it	ne
 80174cc:	4623      	movne	r3, r4
 80174ce:	930d      	str	r3, [sp, #52]	; 0x34
 80174d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174d2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80174d4:	f8d8 2000 	ldr.w	r2, [r8]
 80174d8:	428b      	cmp	r3, r1
 80174da:	db41      	blt.n	8017560 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80174dc:	6813      	ldr	r3, [r2, #0]
 80174de:	4610      	mov	r0, r2
 80174e0:	695b      	ldr	r3, [r3, #20]
 80174e2:	4798      	blx	r3
 80174e4:	4604      	mov	r4, r0
 80174e6:	f8d8 0000 	ldr.w	r0, [r8]
 80174ea:	aa1d      	add	r2, sp, #116	; 0x74
 80174ec:	4621      	mov	r1, r4
 80174ee:	6803      	ldr	r3, [r0, #0]
 80174f0:	689e      	ldr	r6, [r3, #8]
 80174f2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80174f6:	47b0      	blx	r6
 80174f8:	901c      	str	r0, [sp, #112]	; 0x70
 80174fa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80174fe:	429c      	cmp	r4, r3
 8017500:	f000 80ea 	beq.w	80176d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017504:	f242 030b 	movw	r3, #8203	; 0x200b
 8017508:	429c      	cmp	r4, r3
 801750a:	f000 80e5 	beq.w	80176d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801750e:	2c00      	cmp	r4, #0
 8017510:	f000 80f7 	beq.w	8017702 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8017514:	2c0a      	cmp	r4, #10
 8017516:	d060      	beq.n	80175da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017518:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801751a:	b36a      	cbz	r2, 8017578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801751c:	8894      	ldrh	r4, [r2, #4]
 801751e:	f1bb 0f00 	cmp.w	fp, #0
 8017522:	d03b      	beq.n	801759c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8017524:	f892 900d 	ldrb.w	r9, [r2, #13]
 8017528:	f1bb 0f01 	cmp.w	fp, #1
 801752c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017530:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8017534:	f892 900a 	ldrb.w	r9, [r2, #10]
 8017538:	ea49 0903 	orr.w	r9, r9, r3
 801753c:	d134      	bne.n	80175a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801753e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017540:	eba5 0509 	sub.w	r5, r5, r9
 8017544:	2b00      	cmp	r3, #0
 8017546:	d14f      	bne.n	80175e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8017548:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801754a:	eb09 0305 	add.w	r3, r9, r5
 801754e:	4413      	add	r3, r2
 8017550:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017552:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017556:	4293      	cmp	r3, r2
 8017558:	da51      	bge.n	80175fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801755a:	e038      	b.n	80175ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801755c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801755e:	e79d      	b.n	801749c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8017560:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017564:	4659      	mov	r1, fp
 8017566:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017568:	9301      	str	r3, [sp, #4]
 801756a:	ab1d      	add	r3, sp, #116	; 0x74
 801756c:	9300      	str	r3, [sp, #0]
 801756e:	ab1c      	add	r3, sp, #112	; 0x70
 8017570:	f002 fea6 	bl	801a2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017574:	4604      	mov	r4, r0
 8017576:	e7c0      	b.n	80174fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8017578:	f8d8 0000 	ldr.w	r0, [r8]
 801757c:	6803      	ldr	r3, [r0, #0]
 801757e:	691b      	ldr	r3, [r3, #16]
 8017580:	4798      	blx	r3
 8017582:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017586:	4298      	cmp	r0, r3
 8017588:	f000 80a6 	beq.w	80176d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801758c:	f242 030b 	movw	r3, #8203	; 0x200b
 8017590:	4298      	cmp	r0, r3
 8017592:	f000 80a1 	beq.w	80176d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017596:	f1bb 0f00 	cmp.w	fp, #0
 801759a:	d100      	bne.n	801759e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801759c:	444d      	add	r5, r9
 801759e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80175a0:	2a00      	cmp	r2, #0
 80175a2:	d1bf      	bne.n	8017524 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80175a4:	4691      	mov	r9, r2
 80175a6:	e097      	b.n	80176d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80175a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	f000 80ab 	beq.w	8017706 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80175b0:	f1bb 0f00 	cmp.w	fp, #0
 80175b4:	d118      	bne.n	80175e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80175b6:	f8d8 0000 	ldr.w	r0, [r8]
 80175ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80175bc:	6803      	ldr	r3, [r0, #0]
 80175be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175c0:	4798      	blx	r3
 80175c2:	4405      	add	r5, r0
 80175c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80175c8:	1aeb      	subs	r3, r5, r3
 80175ca:	4293      	cmp	r3, r2
 80175cc:	dd17      	ble.n	80175fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80175ce:	2c00      	cmp	r4, #0
 80175d0:	f000 8097 	beq.w	8017702 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80175d4:	2c0a      	cmp	r4, #10
 80175d6:	f040 8085 	bne.w	80176e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80175da:	240a      	movs	r4, #10
 80175dc:	fab4 f084 	clz	r0, r4
 80175e0:	0940      	lsrs	r0, r0, #5
 80175e2:	b01f      	add	sp, #124	; 0x7c
 80175e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175e8:	f8d8 0000 	ldr.w	r0, [r8]
 80175ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80175ee:	6803      	ldr	r3, [r0, #0]
 80175f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175f2:	4798      	blx	r3
 80175f4:	f1bb 0f01 	cmp.w	fp, #1
 80175f8:	eba5 0500 	sub.w	r5, r5, r0
 80175fc:	d0a4      	beq.n	8017548 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80175fe:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017600:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017602:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017606:	f9b3 6000 	ldrsh.w	r6, [r3]
 801760a:	7b43      	ldrb	r3, [r0, #13]
 801760c:	4429      	add	r1, r5
 801760e:	015b      	lsls	r3, r3, #5
 8017610:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017614:	7983      	ldrb	r3, [r0, #6]
 8017616:	4313      	orrs	r3, r2
 8017618:	440b      	add	r3, r1
 801761a:	42b3      	cmp	r3, r6
 801761c:	db5c      	blt.n	80176d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801761e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017620:	4299      	cmp	r1, r3
 8017622:	da59      	bge.n	80176d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8017624:	f8d8 0000 	ldr.w	r0, [r8]
 8017628:	42ae      	cmp	r6, r5
 801762a:	6803      	ldr	r3, [r0, #0]
 801762c:	bfcc      	ite	gt
 801762e:	1b76      	subgt	r6, r6, r5
 8017630:	2600      	movle	r6, #0
 8017632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017634:	bfc8      	it	gt
 8017636:	b2b6      	uxthgt	r6, r6
 8017638:	4798      	blx	r3
 801763a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801763c:	7b5a      	ldrb	r2, [r3, #13]
 801763e:	00d1      	lsls	r1, r2, #3
 8017640:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8017644:	7a19      	ldrb	r1, [r3, #8]
 8017646:	4339      	orrs	r1, r7
 8017648:	0657      	lsls	r7, r2, #25
 801764a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801764c:	bf48      	it	mi
 801764e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8017652:	4407      	add	r7, r0
 8017654:	bf48      	it	mi
 8017656:	b209      	sxthmi	r1, r1
 8017658:	1a7f      	subs	r7, r7, r1
 801765a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801765c:	b2bf      	uxth	r7, r7
 801765e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017662:	fa0f fa87 	sxth.w	sl, r7
 8017666:	4551      	cmp	r1, sl
 8017668:	dd3a      	ble.n	80176e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801766a:	0112      	lsls	r2, r2, #4
 801766c:	79d8      	ldrb	r0, [r3, #7]
 801766e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017672:	4302      	orrs	r2, r0
 8017674:	4492      	add	sl, r2
 8017676:	4551      	cmp	r1, sl
 8017678:	dc2e      	bgt.n	80176d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801767a:	1bcf      	subs	r7, r1, r7
 801767c:	468a      	mov	sl, r1
 801767e:	b2bf      	uxth	r7, r7
 8017680:	9319      	str	r3, [sp, #100]	; 0x64
 8017682:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017684:	f8d8 0000 	ldr.w	r0, [r8]
 8017688:	681a      	ldr	r2, [r3, #0]
 801768a:	6801      	ldr	r1, [r0, #0]
 801768c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801768e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017690:	9313      	str	r3, [sp, #76]	; 0x4c
 8017692:	9218      	str	r2, [sp, #96]	; 0x60
 8017694:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8017696:	4788      	blx	r1
 8017698:	f898 1006 	ldrb.w	r1, [r8, #6]
 801769c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801769e:	910b      	str	r1, [sp, #44]	; 0x2c
 80176a0:	f898 100e 	ldrb.w	r1, [r8, #14]
 80176a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80176a6:	910a      	str	r1, [sp, #40]	; 0x28
 80176a8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80176ac:	9109      	str	r1, [sp, #36]	; 0x24
 80176ae:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80176b2:	9305      	str	r3, [sp, #20]
 80176b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80176b6:	9206      	str	r2, [sp, #24]
 80176b8:	e9cd a601 	strd	sl, r6, [sp, #4]
 80176bc:	442e      	add	r6, r5
 80176be:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80176c2:	b236      	sxth	r6, r6
 80176c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80176c6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80176ca:	9600      	str	r6, [sp, #0]
 80176cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80176ce:	681a      	ldr	r2, [r3, #0]
 80176d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80176d2:	685b      	ldr	r3, [r3, #4]
 80176d4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80176d6:	47b0      	blx	r6
 80176d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176da:	3301      	adds	r3, #1
 80176dc:	930e      	str	r3, [sp, #56]	; 0x38
 80176de:	e6e5      	b.n	80174ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80176e0:	2700      	movs	r7, #0
 80176e2:	e7cd      	b.n	8017680 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80176e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80176e6:	3501      	adds	r5, #1
 80176e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80176ea:	429d      	cmp	r5, r3
 80176ec:	f6bf af76 	bge.w	80175dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80176f0:	4659      	mov	r1, fp
 80176f2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80176f4:	f7f0 fc22 	bl	8007f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80176f8:	4604      	mov	r4, r0
 80176fa:	b110      	cbz	r0, 8017702 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80176fc:	280a      	cmp	r0, #10
 80176fe:	d1f2      	bne.n	80176e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8017700:	e76b      	b.n	80175da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017702:	2400      	movs	r4, #0
 8017704:	e76a      	b.n	80175dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8017706:	f1bb 0f00 	cmp.w	fp, #0
 801770a:	f43f af5b 	beq.w	80175c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801770e:	e776      	b.n	80175fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08017710 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017710:	b530      	push	{r4, r5, lr}
 8017712:	8a44      	ldrh	r4, [r0, #18]
 8017714:	8ac5      	ldrh	r5, [r0, #22]
 8017716:	82c3      	strh	r3, [r0, #22]
 8017718:	442c      	add	r4, r5
 801771a:	1ae4      	subs	r4, r4, r3
 801771c:	8b03      	ldrh	r3, [r0, #24]
 801771e:	8244      	strh	r4, [r0, #18]
 8017720:	8a84      	ldrh	r4, [r0, #20]
 8017722:	4422      	add	r2, r4
 8017724:	440c      	add	r4, r1
 8017726:	1a59      	subs	r1, r3, r1
 8017728:	8342      	strh	r2, [r0, #26]
 801772a:	8284      	strh	r4, [r0, #20]
 801772c:	8301      	strh	r1, [r0, #24]
 801772e:	bd30      	pop	{r4, r5, pc}

08017730 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8017730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017734:	7a43      	ldrb	r3, [r0, #9]
 8017736:	b087      	sub	sp, #28
 8017738:	4604      	mov	r4, r0
 801773a:	460f      	mov	r7, r1
 801773c:	1eda      	subs	r2, r3, #3
 801773e:	b2d2      	uxtb	r2, r2
 8017740:	2900      	cmp	r1, #0
 8017742:	d036      	beq.n	80177b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8017744:	2a01      	cmp	r2, #1
 8017746:	d932      	bls.n	80177ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8017748:	1e58      	subs	r0, r3, #1
 801774a:	f1d0 0b00 	rsbs	fp, r0, #0
 801774e:	eb4b 0b00 	adc.w	fp, fp, r0
 8017752:	1e99      	subs	r1, r3, #2
 8017754:	424b      	negs	r3, r1
 8017756:	414b      	adcs	r3, r1
 8017758:	9303      	str	r3, [sp, #12]
 801775a:	2300      	movs	r3, #0
 801775c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017760:	2500      	movs	r5, #0
 8017762:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8017766:	46a9      	mov	r9, r5
 8017768:	8265      	strh	r5, [r4, #18]
 801776a:	82a5      	strh	r5, [r4, #20]
 801776c:	2300      	movs	r3, #0
 801776e:	9305      	str	r3, [sp, #20]
 8017770:	8823      	ldrh	r3, [r4, #0]
 8017772:	2b20      	cmp	r3, #32
 8017774:	d02b      	beq.n	80177ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8017776:	eba3 020a 	sub.w	r2, r3, sl
 801777a:	4256      	negs	r6, r2
 801777c:	4156      	adcs	r6, r2
 801777e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017782:	4293      	cmp	r3, r2
 8017784:	d004      	beq.n	8017790 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8017786:	4553      	cmp	r3, sl
 8017788:	bf16      	itet	ne
 801778a:	4699      	movne	r9, r3
 801778c:	2601      	moveq	r6, #1
 801778e:	2600      	movne	r6, #0
 8017790:	ab05      	add	r3, sp, #20
 8017792:	68e2      	ldr	r2, [r4, #12]
 8017794:	7a21      	ldrb	r1, [r4, #8]
 8017796:	6860      	ldr	r0, [r4, #4]
 8017798:	f002 fd3a 	bl	801a210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801779c:	8020      	strh	r0, [r4, #0]
 801779e:	b9c8      	cbnz	r0, 80177d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80177a0:	8b22      	ldrh	r2, [r4, #24]
 80177a2:	2300      	movs	r3, #0
 80177a4:	4611      	mov	r1, r2
 80177a6:	4620      	mov	r0, r4
 80177a8:	f7ff ffb2 	bl	8017710 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80177ac:	e066      	b.n	801787c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80177ae:	468b      	mov	fp, r1
 80177b0:	e7cf      	b.n	8017752 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80177b2:	3b01      	subs	r3, #1
 80177b4:	2a01      	cmp	r2, #1
 80177b6:	9103      	str	r1, [sp, #12]
 80177b8:	468b      	mov	fp, r1
 80177ba:	bf8c      	ite	hi
 80177bc:	2200      	movhi	r2, #0
 80177be:	2201      	movls	r2, #1
 80177c0:	2b01      	cmp	r3, #1
 80177c2:	9202      	str	r2, [sp, #8]
 80177c4:	bf8c      	ite	hi
 80177c6:	2300      	movhi	r3, #0
 80177c8:	2301      	movls	r3, #1
 80177ca:	9301      	str	r3, [sp, #4]
 80177cc:	e7c8      	b.n	8017760 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80177ce:	4699      	mov	r9, r3
 80177d0:	2601      	movs	r6, #1
 80177d2:	e7dd      	b.n	8017790 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80177d4:	8ae3      	ldrh	r3, [r4, #22]
 80177d6:	280a      	cmp	r0, #10
 80177d8:	f103 0301 	add.w	r3, r3, #1
 80177dc:	82e3      	strh	r3, [r4, #22]
 80177de:	d0df      	beq.n	80177a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80177e0:	9a05      	ldr	r2, [sp, #20]
 80177e2:	bb42      	cbnz	r2, 8017836 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80177e4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80177e8:	4298      	cmp	r0, r3
 80177ea:	d001      	beq.n	80177f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80177ec:	4550      	cmp	r0, sl
 80177ee:	d1bd      	bne.n	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80177f0:	8823      	ldrh	r3, [r4, #0]
 80177f2:	8b21      	ldrh	r1, [r4, #24]
 80177f4:	2b20      	cmp	r3, #32
 80177f6:	d001      	beq.n	80177fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80177f8:	4553      	cmp	r3, sl
 80177fa:	d131      	bne.n	8017860 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80177fc:	2e00      	cmp	r6, #0
 80177fe:	bf0a      	itet	eq
 8017800:	460d      	moveq	r5, r1
 8017802:	4630      	movne	r0, r6
 8017804:	2001      	moveq	r0, #1
 8017806:	440a      	add	r2, r1
 8017808:	8aa3      	ldrh	r3, [r4, #20]
 801780a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801780e:	b292      	uxth	r2, r2
 8017810:	8322      	strh	r2, [r4, #24]
 8017812:	4413      	add	r3, r2
 8017814:	2f00      	cmp	r7, #0
 8017816:	d03a      	beq.n	801788e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8017818:	f1bb 0f00 	cmp.w	fp, #0
 801781c:	d102      	bne.n	8017824 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801781e:	9903      	ldr	r1, [sp, #12]
 8017820:	b301      	cbz	r1, 8017864 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8017822:	b1f8      	cbz	r0, 8017864 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8017824:	8ba1      	ldrh	r1, [r4, #28]
 8017826:	4419      	add	r1, r3
 8017828:	458c      	cmp	ip, r1
 801782a:	da2a      	bge.n	8017882 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801782c:	8a61      	ldrh	r1, [r4, #18]
 801782e:	b341      	cbz	r1, 8017882 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8017830:	4563      	cmp	r3, ip
 8017832:	dd9b      	ble.n	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017834:	e01c      	b.n	8017870 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8017836:	8893      	ldrh	r3, [r2, #4]
 8017838:	4649      	mov	r1, r9
 801783a:	8023      	strh	r3, [r4, #0]
 801783c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8017840:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8017844:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8017848:	f892 800a 	ldrb.w	r8, [r2, #10]
 801784c:	ea48 0800 	orr.w	r8, r8, r0
 8017850:	68e0      	ldr	r0, [r4, #12]
 8017852:	6803      	ldr	r3, [r0, #0]
 8017854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017856:	4798      	blx	r3
 8017858:	eb08 0200 	add.w	r2, r8, r0
 801785c:	b292      	uxth	r2, r2
 801785e:	e7c7      	b.n	80177f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8017860:	2000      	movs	r0, #0
 8017862:	e7d0      	b.n	8017806 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8017864:	4563      	cmp	r3, ip
 8017866:	dd81      	ble.n	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017868:	8a63      	ldrh	r3, [r4, #18]
 801786a:	2b00      	cmp	r3, #0
 801786c:	f43f af7e 	beq.w	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017870:	2301      	movs	r3, #1
 8017872:	8ba2      	ldrh	r2, [r4, #28]
 8017874:	77a3      	strb	r3, [r4, #30]
 8017876:	8b63      	ldrh	r3, [r4, #26]
 8017878:	4413      	add	r3, r2
 801787a:	8363      	strh	r3, [r4, #26]
 801787c:	b007      	add	sp, #28
 801787e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017882:	2300      	movs	r3, #0
 8017884:	4611      	mov	r1, r2
 8017886:	4620      	mov	r0, r4
 8017888:	f7ff ff42 	bl	8017710 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801788c:	e76e      	b.n	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801788e:	4563      	cmp	r3, ip
 8017890:	dd14      	ble.n	80178bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8017892:	9b02      	ldr	r3, [sp, #8]
 8017894:	b113      	cbz	r3, 801789c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8017896:	2301      	movs	r3, #1
 8017898:	460a      	mov	r2, r1
 801789a:	e783      	b.n	80177a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801789c:	9b01      	ldr	r3, [sp, #4]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	f43f af64 	beq.w	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80178a4:	2800      	cmp	r0, #0
 80178a6:	f47f af61 	bne.w	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80178aa:	b116      	cbz	r6, 80178b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80178ac:	2301      	movs	r3, #1
 80178ae:	462a      	mov	r2, r5
 80178b0:	e779      	b.n	80177a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80178b2:	8a63      	ldrh	r3, [r4, #18]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	f43f af59 	beq.w	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80178ba:	e7df      	b.n	801787c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80178bc:	2800      	cmp	r0, #0
 80178be:	f47f af55 	bne.w	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80178c2:	2e00      	cmp	r6, #0
 80178c4:	f43f af52 	beq.w	801776c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80178c8:	2301      	movs	r3, #1
 80178ca:	462a      	mov	r2, r5
 80178cc:	e7db      	b.n	8017886 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080178ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80178ce:	b530      	push	{r4, r5, lr}
 80178d0:	4605      	mov	r5, r0
 80178d2:	b08b      	sub	sp, #44	; 0x2c
 80178d4:	b191      	cbz	r1, 80178fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80178d6:	2401      	movs	r4, #1
 80178d8:	e9cd 3100 	strd	r3, r1, [sp]
 80178dc:	4613      	mov	r3, r2
 80178de:	4601      	mov	r1, r0
 80178e0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80178e4:	a802      	add	r0, sp, #8
 80178e6:	f7ff fd0b 	bl	8017300 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80178ea:	2100      	movs	r1, #0
 80178ec:	a802      	add	r0, sp, #8
 80178ee:	f7ff ff1f 	bl	8017730 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80178f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80178f6:	b163      	cbz	r3, 8017912 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80178f8:	3401      	adds	r4, #1
 80178fa:	e7f6      	b.n	80178ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80178fc:	2401      	movs	r4, #1
 80178fe:	f002 fd7f 	bl	801a400 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017902:	280a      	cmp	r0, #10
 8017904:	4628      	mov	r0, r5
 8017906:	bf08      	it	eq
 8017908:	3401      	addeq	r4, #1
 801790a:	f002 fd79 	bl	801a400 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801790e:	2800      	cmp	r0, #0
 8017910:	d1f7      	bne.n	8017902 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8017912:	b2a0      	uxth	r0, r4
 8017914:	b00b      	add	sp, #44	; 0x2c
 8017916:	bd30      	pop	{r4, r5, pc}

08017918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801791c:	b0df      	sub	sp, #380	; 0x17c
 801791e:	4689      	mov	r9, r1
 8017920:	461c      	mov	r4, r3
 8017922:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 8017926:	900a      	str	r0, [sp, #40]	; 0x28
 8017928:	f1ba 0f00 	cmp.w	sl, #0
 801792c:	f000 80b1 	beq.w	8017a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	2b00      	cmp	r3, #0
 8017934:	f000 80ad 	beq.w	8017a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8017938:	7ba3      	ldrb	r3, [r4, #14]
 801793a:	2b00      	cmp	r3, #0
 801793c:	f000 80a9 	beq.w	8017a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8017940:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8017944:	6810      	ldr	r0, [r2, #0]
 8017946:	6851      	ldr	r1, [r2, #4]
 8017948:	2500      	movs	r5, #0
 801794a:	4643      	mov	r3, r8
 801794c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8017950:	950f      	str	r5, [sp, #60]	; 0x3c
 8017952:	af19      	add	r7, sp, #100	; 0x64
 8017954:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017958:	79a2      	ldrb	r2, [r4, #6]
 801795a:	c303      	stmia	r3!, {r0, r1}
 801795c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8017960:	a90f      	add	r1, sp, #60	; 0x3c
 8017962:	4640      	mov	r0, r8
 8017964:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017968:	f7ff fd40 	bl	80173ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801796c:	a90f      	add	r1, sp, #60	; 0x3c
 801796e:	79a2      	ldrb	r2, [r4, #6]
 8017970:	4608      	mov	r0, r1
 8017972:	f7ff fd3b 	bl	80173ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017976:	4638      	mov	r0, r7
 8017978:	f002 f901 	bl	8019b7e <_ZN8touchgfx12TextProviderC1Ev>
 801797c:	6820      	ldr	r0, [r4, #0]
 801797e:	6803      	ldr	r3, [r0, #0]
 8017980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017982:	4798      	blx	r3
 8017984:	4606      	mov	r6, r0
 8017986:	6820      	ldr	r0, [r4, #0]
 8017988:	6803      	ldr	r3, [r0, #0]
 801798a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801798c:	4798      	blx	r3
 801798e:	4633      	mov	r3, r6
 8017990:	9000      	str	r0, [sp, #0]
 8017992:	4651      	mov	r1, sl
 8017994:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8017996:	4638      	mov	r0, r7
 8017998:	f002 f93e 	bl	8019c18 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801799c:	7923      	ldrb	r3, [r4, #4]
 801799e:	6820      	ldr	r0, [r4, #0]
 80179a0:	9308      	str	r3, [sp, #32]
 80179a2:	6803      	ldr	r3, [r0, #0]
 80179a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179a6:	4798      	blx	r3
 80179a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179ac:	181e      	adds	r6, r3, r0
 80179ae:	42ae      	cmp	r6, r5
 80179b0:	dd06      	ble.n	80179c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80179b2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80179b6:	4282      	cmp	r2, r0
 80179b8:	bfa4      	itt	ge
 80179ba:	189d      	addge	r5, r3, r2
 80179bc:	fb95 f5f6 	sdivge	r5, r5, r6
 80179c0:	a830      	add	r0, sp, #192	; 0xc0
 80179c2:	f002 f8dc 	bl	8019b7e <_ZN8touchgfx12TextProviderC1Ev>
 80179c6:	7c23      	ldrb	r3, [r4, #16]
 80179c8:	b17b      	cbz	r3, 80179ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80179ca:	6820      	ldr	r0, [r4, #0]
 80179cc:	6803      	ldr	r3, [r0, #0]
 80179ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179d0:	4798      	blx	r3
 80179d2:	4683      	mov	fp, r0
 80179d4:	6820      	ldr	r0, [r4, #0]
 80179d6:	6803      	ldr	r3, [r0, #0]
 80179d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80179da:	4798      	blx	r3
 80179dc:	465b      	mov	r3, fp
 80179de:	9000      	str	r0, [sp, #0]
 80179e0:	4651      	mov	r1, sl
 80179e2:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80179e4:	a830      	add	r0, sp, #192	; 0xc0
 80179e6:	f002 f917 	bl	8019c18 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80179ea:	7c21      	ldrb	r1, [r4, #16]
 80179ec:	a811      	add	r0, sp, #68	; 0x44
 80179ee:	7963      	ldrb	r3, [r4, #5]
 80179f0:	9101      	str	r1, [sp, #4]
 80179f2:	6821      	ldr	r1, [r4, #0]
 80179f4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80179f8:	9100      	str	r1, [sp, #0]
 80179fa:	a930      	add	r1, sp, #192	; 0xc0
 80179fc:	f7ff fc80 	bl	8017300 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017a00:	7c23      	ldrb	r3, [r4, #16]
 8017a02:	b9bb      	cbnz	r3, 8017a34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 8017a04:	fa1f fa86 	uxth.w	sl, r6
 8017a08:	2d00      	cmp	r5, #0
 8017a0a:	dd45      	ble.n	8017a98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017a0c:	4638      	mov	r0, r7
 8017a0e:	f002 fcf7 	bl	801a400 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017a12:	2800      	cmp	r0, #0
 8017a14:	d03d      	beq.n	8017a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8017a16:	280a      	cmp	r0, #10
 8017a18:	d1f6      	bne.n	8017a08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 8017a1a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017a1e:	3d01      	subs	r5, #1
 8017a20:	4453      	add	r3, sl
 8017a22:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017a26:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8017a2a:	eba3 030a 	sub.w	r3, r3, sl
 8017a2e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017a32:	e7e9      	b.n	8017a08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 8017a34:	0073      	lsls	r3, r6, #1
 8017a36:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8017a3a:	fa1f fa86 	uxth.w	sl, r6
 8017a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8017a40:	2d00      	cmp	r5, #0
 8017a42:	dd29      	ble.n	8017a98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017a44:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017a48:	a811      	add	r0, sp, #68	; 0x44
 8017a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a4c:	428b      	cmp	r3, r1
 8017a4e:	bfd4      	ite	le
 8017a50:	2100      	movle	r1, #0
 8017a52:	2101      	movgt	r1, #1
 8017a54:	f7ff fe6c 	bl	8017730 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017a58:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8017a5c:	3b01      	subs	r3, #1
 8017a5e:	b29b      	uxth	r3, r3
 8017a60:	455b      	cmp	r3, fp
 8017a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a64:	d005      	beq.n	8017a72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8017a66:	7961      	ldrb	r1, [r4, #5]
 8017a68:	4638      	mov	r0, r7
 8017a6a:	f7f0 fa67 	bl	8007f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a70:	e7f4      	b.n	8017a5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8017a72:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017a76:	3d01      	subs	r5, #1
 8017a78:	4453      	add	r3, sl
 8017a7a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017a7e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8017a82:	eba3 030a 	sub.w	r3, r3, sl
 8017a86:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017a8a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d1d6      	bne.n	8017a40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 8017a92:	b05f      	add	sp, #380	; 0x17c
 8017a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a98:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8017a9c:	ad47      	add	r5, sp, #284	; 0x11c
 8017a9e:	f04f 0b00 	mov.w	fp, #0
 8017aa2:	7c23      	ldrb	r3, [r4, #16]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d067      	beq.n	8017b78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8017aa8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017aac:	a811      	add	r0, sp, #68	; 0x44
 8017aae:	458a      	cmp	sl, r1
 8017ab0:	bfd4      	ite	le
 8017ab2:	2100      	movle	r1, #0
 8017ab4:	2101      	movgt	r1, #1
 8017ab6:	f7ff fe3b 	bl	8017730 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017aba:	9b08      	ldr	r3, [sp, #32]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d056      	beq.n	8017b6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017ac0:	7c23      	ldrb	r3, [r4, #16]
 8017ac2:	225c      	movs	r2, #92	; 0x5c
 8017ac4:	4639      	mov	r1, r7
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8017aca:	f00d fd41 	bl	8025550 <memcpy>
 8017ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d059      	beq.n	8017b88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8017ad4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8017ad8:	7922      	ldrb	r2, [r4, #4]
 8017ada:	2a01      	cmp	r2, #1
 8017adc:	d13d      	bne.n	8017b5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8017ade:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8017ae2:	1ac0      	subs	r0, r0, r3
 8017ae4:	2302      	movs	r3, #2
 8017ae6:	fb90 f0f3 	sdiv	r0, r0, r3
 8017aea:	b200      	sxth	r0, r0
 8017aec:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017af0:	4418      	add	r0, r3
 8017af2:	7c23      	ldrb	r3, [r4, #16]
 8017af4:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d03a      	beq.n	8017b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8017afc:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8017b00:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8017b04:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017b08:	9500      	str	r5, [sp, #0]
 8017b0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017b0c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017b10:	e9cd b703 	strd	fp, r7, [sp, #12]
 8017b14:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8017b18:	464a      	mov	r2, r9
 8017b1a:	2100      	movs	r1, #0
 8017b1c:	f7ff fc97 	bl	801744e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017b20:	2800      	cmp	r0, #0
 8017b22:	d1b6      	bne.n	8017a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8017b24:	b2b2      	uxth	r2, r6
 8017b26:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017b2a:	4611      	mov	r1, r2
 8017b2c:	4413      	add	r3, r2
 8017b2e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017b32:	b21b      	sxth	r3, r3
 8017b34:	1a52      	subs	r2, r2, r1
 8017b36:	7c21      	ldrb	r1, [r4, #16]
 8017b38:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017b3c:	b212      	sxth	r2, r2
 8017b3e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8017b42:	b109      	cbz	r1, 8017b48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8017b44:	42b2      	cmp	r2, r6
 8017b46:	dba4      	blt.n	8017a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8017b48:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8017b4c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8017b50:	440a      	add	r2, r1
 8017b52:	b212      	sxth	r2, r2
 8017b54:	4293      	cmp	r3, r2
 8017b56:	dda4      	ble.n	8017aa2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 8017b58:	e79b      	b.n	8017a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8017b5a:	2a02      	cmp	r2, #2
 8017b5c:	d105      	bne.n	8017b6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8017b5e:	7be2      	ldrb	r2, [r4, #15]
 8017b60:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8017b64:	1a80      	subs	r0, r0, r2
 8017b66:	1ac0      	subs	r0, r0, r3
 8017b68:	e7bf      	b.n	8017aea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 8017b6a:	2000      	movs	r0, #0
 8017b6c:	e7be      	b.n	8017aec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8017b6e:	7be0      	ldrb	r0, [r4, #15]
 8017b70:	e7bc      	b.n	8017aec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8017b72:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017b76:	e7c3      	b.n	8017b00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8017b78:	9b08      	ldr	r3, [sp, #32]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d0f7      	beq.n	8017b6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017b7e:	225c      	movs	r2, #92	; 0x5c
 8017b80:	4639      	mov	r1, r7
 8017b82:	4628      	mov	r0, r5
 8017b84:	f00d fce4 	bl	8025550 <memcpy>
 8017b88:	2300      	movs	r3, #0
 8017b8a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017b8e:	6821      	ldr	r1, [r4, #0]
 8017b90:	4628      	mov	r0, r5
 8017b92:	f7ff fbef 	bl	8017374 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017b96:	b203      	sxth	r3, r0
 8017b98:	e79e      	b.n	8017ad8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

08017b9a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017b9a:	2b02      	cmp	r3, #2
 8017b9c:	b510      	push	{r4, lr}
 8017b9e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017ba2:	d00b      	beq.n	8017bbc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8017ba4:	2b03      	cmp	r3, #3
 8017ba6:	d00e      	beq.n	8017bc6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8017ba8:	2b01      	cmp	r3, #1
 8017baa:	d001      	beq.n	8017bb0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8017bac:	1860      	adds	r0, r4, r1
 8017bae:	bd10      	pop	{r4, pc}
 8017bb0:	8880      	ldrh	r0, [r0, #4]
 8017bb2:	4420      	add	r0, r4
 8017bb4:	b200      	sxth	r0, r0
 8017bb6:	1a80      	subs	r0, r0, r2
 8017bb8:	3801      	subs	r0, #1
 8017bba:	e7f8      	b.n	8017bae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8017bbc:	8880      	ldrh	r0, [r0, #4]
 8017bbe:	4420      	add	r0, r4
 8017bc0:	b200      	sxth	r0, r0
 8017bc2:	1a40      	subs	r0, r0, r1
 8017bc4:	e7f8      	b.n	8017bb8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017bc6:	18a0      	adds	r0, r4, r2
 8017bc8:	e7f1      	b.n	8017bae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08017bca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017bca:	2b02      	cmp	r3, #2
 8017bcc:	b510      	push	{r4, lr}
 8017bce:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8017bd2:	d006      	beq.n	8017be2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8017bd4:	2b03      	cmp	r3, #3
 8017bd6:	d00a      	beq.n	8017bee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017bd8:	2b01      	cmp	r3, #1
 8017bda:	bf14      	ite	ne
 8017bdc:	18a0      	addne	r0, r4, r2
 8017bde:	1860      	addeq	r0, r4, r1
 8017be0:	bd10      	pop	{r4, pc}
 8017be2:	88c0      	ldrh	r0, [r0, #6]
 8017be4:	4420      	add	r0, r4
 8017be6:	b200      	sxth	r0, r0
 8017be8:	1a80      	subs	r0, r0, r2
 8017bea:	3801      	subs	r0, #1
 8017bec:	e7f8      	b.n	8017be0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8017bee:	88c0      	ldrh	r0, [r0, #6]
 8017bf0:	4420      	add	r0, r4
 8017bf2:	b200      	sxth	r0, r0
 8017bf4:	1a40      	subs	r0, r0, r1
 8017bf6:	e7f8      	b.n	8017bea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

08017bf8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017bf8:	4b01      	ldr	r3, [pc, #4]	; (8017c00 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	601a      	str	r2, [r3, #0]
 8017bfe:	4770      	bx	lr
 8017c00:	20056564 	.word	0x20056564

08017c04 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017c04:	4603      	mov	r3, r0
 8017c06:	b1c8      	cbz	r0, 8017c3c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017c08:	0c02      	lsrs	r2, r0, #16
 8017c0a:	0412      	lsls	r2, r2, #16
 8017c0c:	b9a2      	cbnz	r2, 8017c38 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8017c0e:	0403      	lsls	r3, r0, #16
 8017c10:	2010      	movs	r0, #16
 8017c12:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017c16:	bf04      	itt	eq
 8017c18:	021b      	lsleq	r3, r3, #8
 8017c1a:	3008      	addeq	r0, #8
 8017c1c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017c20:	bf04      	itt	eq
 8017c22:	011b      	lsleq	r3, r3, #4
 8017c24:	3004      	addeq	r0, #4
 8017c26:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017c2a:	bf04      	itt	eq
 8017c2c:	009b      	lsleq	r3, r3, #2
 8017c2e:	3002      	addeq	r0, #2
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	db04      	blt.n	8017c3e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017c34:	3001      	adds	r0, #1
 8017c36:	4770      	bx	lr
 8017c38:	2000      	movs	r0, #0
 8017c3a:	e7ea      	b.n	8017c12 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8017c3c:	2020      	movs	r0, #32
 8017c3e:	4770      	bx	lr

08017c40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c44:	b087      	sub	sp, #28
 8017c46:	4681      	mov	r9, r0
 8017c48:	4698      	mov	r8, r3
 8017c4a:	4610      	mov	r0, r2
 8017c4c:	460d      	mov	r5, r1
 8017c4e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017c52:	b981      	cbnz	r1, 8017c76 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017c54:	b14b      	cbz	r3, 8017c6a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017c56:	460b      	mov	r3, r1
 8017c58:	464a      	mov	r2, r9
 8017c5a:	4641      	mov	r1, r8
 8017c5c:	e9cd 4700 	strd	r4, r7, [sp]
 8017c60:	f7ff ffee 	bl	8017c40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017c64:	b007      	add	sp, #28
 8017c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017c6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017c72:	603b      	str	r3, [r7, #0]
 8017c74:	e7f6      	b.n	8017c64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017c76:	fa32 fa01 	lsrs.w	sl, r2, r1
 8017c7a:	d107      	bne.n	8017c8c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8017c7c:	fb09 f602 	mul.w	r6, r9, r2
 8017c80:	fbb6 f0f4 	udiv	r0, r6, r4
 8017c84:	fb04 6610 	mls	r6, r4, r0, r6
 8017c88:	603e      	str	r6, [r7, #0]
 8017c8a:	e7eb      	b.n	8017c64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017c8c:	2601      	movs	r6, #1
 8017c8e:	fa09 fb01 	lsl.w	fp, r9, r1
 8017c92:	408e      	lsls	r6, r1
 8017c94:	fbbb f3f4 	udiv	r3, fp, r4
 8017c98:	3e01      	subs	r6, #1
 8017c9a:	9302      	str	r3, [sp, #8]
 8017c9c:	fb0a f303 	mul.w	r3, sl, r3
 8017ca0:	4016      	ands	r6, r2
 8017ca2:	9303      	str	r3, [sp, #12]
 8017ca4:	4630      	mov	r0, r6
 8017ca6:	f7ff ffad 	bl	8017c04 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017caa:	464a      	mov	r2, r9
 8017cac:	460b      	mov	r3, r1
 8017cae:	4601      	mov	r1, r0
 8017cb0:	4630      	mov	r0, r6
 8017cb2:	e9cd 4700 	strd	r4, r7, [sp]
 8017cb6:	f7ff ffc3 	bl	8017c40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017cba:	9b02      	ldr	r3, [sp, #8]
 8017cbc:	4606      	mov	r6, r0
 8017cbe:	eb05 0108 	add.w	r1, r5, r8
 8017cc2:	fb04 bb13 	mls	fp, r4, r3, fp
 8017cc6:	4658      	mov	r0, fp
 8017cc8:	f7ff ff9c 	bl	8017c04 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017ccc:	ab05      	add	r3, sp, #20
 8017cce:	465a      	mov	r2, fp
 8017cd0:	e9cd 4300 	strd	r4, r3, [sp]
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	4650      	mov	r0, sl
 8017cd8:	f7ff ffb2 	bl	8017c40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017cdc:	6839      	ldr	r1, [r7, #0]
 8017cde:	9a05      	ldr	r2, [sp, #20]
 8017ce0:	9b03      	ldr	r3, [sp, #12]
 8017ce2:	4411      	add	r1, r2
 8017ce4:	fbb1 f2f4 	udiv	r2, r1, r4
 8017ce8:	18d3      	adds	r3, r2, r3
 8017cea:	fb04 1412 	mls	r4, r4, r2, r1
 8017cee:	441e      	add	r6, r3
 8017cf0:	603c      	str	r4, [r7, #0]
 8017cf2:	4430      	add	r0, r6
 8017cf4:	e7b6      	b.n	8017c64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08017cf6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017cf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017cfa:	b085      	sub	sp, #20
 8017cfc:	f1b0 0900 	subs.w	r9, r0, #0
 8017d00:	461d      	mov	r5, r3
 8017d02:	4617      	mov	r7, r2
 8017d04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017d06:	bfbb      	ittet	lt
 8017d08:	f1c9 0900 	rsblt	r9, r9, #0
 8017d0c:	f04f 36ff 	movlt.w	r6, #4294967295
 8017d10:	2601      	movge	r6, #1
 8017d12:	6823      	ldrlt	r3, [r4, #0]
 8017d14:	bfbc      	itt	lt
 8017d16:	425b      	neglt	r3, r3
 8017d18:	6023      	strlt	r3, [r4, #0]
 8017d1a:	2a00      	cmp	r2, #0
 8017d1c:	da04      	bge.n	8017d28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8017d1e:	6823      	ldr	r3, [r4, #0]
 8017d20:	4257      	negs	r7, r2
 8017d22:	4276      	negs	r6, r6
 8017d24:	425b      	negs	r3, r3
 8017d26:	6023      	str	r3, [r4, #0]
 8017d28:	2d00      	cmp	r5, #0
 8017d2a:	4638      	mov	r0, r7
 8017d2c:	bfba      	itte	lt
 8017d2e:	426d      	neglt	r5, r5
 8017d30:	f04f 38ff 	movlt.w	r8, #4294967295
 8017d34:	f04f 0801 	movge.w	r8, #1
 8017d38:	f7ff ff64 	bl	8017c04 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017d3c:	ab03      	add	r3, sp, #12
 8017d3e:	463a      	mov	r2, r7
 8017d40:	e9cd 5300 	strd	r5, r3, [sp]
 8017d44:	4603      	mov	r3, r0
 8017d46:	4648      	mov	r0, r9
 8017d48:	f7ff ff7a 	bl	8017c40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017d4c:	6823      	ldr	r3, [r4, #0]
 8017d4e:	9a03      	ldr	r2, [sp, #12]
 8017d50:	4546      	cmp	r6, r8
 8017d52:	441a      	add	r2, r3
 8017d54:	fb92 f3f5 	sdiv	r3, r2, r5
 8017d58:	4418      	add	r0, r3
 8017d5a:	fb05 2313 	mls	r3, r5, r3, r2
 8017d5e:	bf18      	it	ne
 8017d60:	4240      	negne	r0, r0
 8017d62:	1c72      	adds	r2, r6, #1
 8017d64:	6023      	str	r3, [r4, #0]
 8017d66:	d105      	bne.n	8017d74 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	f1c3 0200 	rsb	r2, r3, #0
 8017d6e:	db0b      	blt.n	8017d88 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017d70:	6022      	str	r2, [r4, #0]
 8017d72:	e006      	b.n	8017d82 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017d74:	2e01      	cmp	r6, #1
 8017d76:	d104      	bne.n	8017d82 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	da02      	bge.n	8017d82 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017d7c:	442b      	add	r3, r5
 8017d7e:	3801      	subs	r0, #1
 8017d80:	6023      	str	r3, [r4, #0]
 8017d82:	b005      	add	sp, #20
 8017d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d88:	3801      	subs	r0, #1
 8017d8a:	1b52      	subs	r2, r2, r5
 8017d8c:	e7f0      	b.n	8017d70 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017d90 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017d90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017d94:	4c1c      	ldr	r4, [pc, #112]	; (8017e08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017d96:	4605      	mov	r5, r0
 8017d98:	6807      	ldr	r7, [r0, #0]
 8017d9a:	69a3      	ldr	r3, [r4, #24]
 8017d9c:	b92b      	cbnz	r3, 8017daa <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017d9e:	6840      	ldr	r0, [r0, #4]
 8017da0:	e9c5 7000 	strd	r7, r0, [r5]
 8017da4:	b004      	add	sp, #16
 8017da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017daa:	f04f 0802 	mov.w	r8, #2
 8017dae:	68a2      	ldr	r2, [r4, #8]
 8017db0:	ae04      	add	r6, sp, #16
 8017db2:	6820      	ldr	r0, [r4, #0]
 8017db4:	fb93 f1f8 	sdiv	r1, r3, r8
 8017db8:	440a      	add	r2, r1
 8017dba:	69e1      	ldr	r1, [r4, #28]
 8017dbc:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017dc0:	463a      	mov	r2, r7
 8017dc2:	9600      	str	r6, [sp, #0]
 8017dc4:	f7ff ff97 	bl	8017cf6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017dc8:	69a3      	ldr	r3, [r4, #24]
 8017dca:	4607      	mov	r7, r0
 8017dcc:	686a      	ldr	r2, [r5, #4]
 8017dce:	6a21      	ldr	r1, [r4, #32]
 8017dd0:	9600      	str	r6, [sp, #0]
 8017dd2:	6860      	ldr	r0, [r4, #4]
 8017dd4:	f7ff ff8f 	bl	8017cf6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017dd8:	69a3      	ldr	r3, [r4, #24]
 8017dda:	6962      	ldr	r2, [r4, #20]
 8017ddc:	4407      	add	r7, r0
 8017dde:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017de0:	9600      	str	r6, [sp, #0]
 8017de2:	68e0      	ldr	r0, [r4, #12]
 8017de4:	fb93 f8f8 	sdiv	r8, r3, r8
 8017de8:	4442      	add	r2, r8
 8017dea:	9203      	str	r2, [sp, #12]
 8017dec:	682a      	ldr	r2, [r5, #0]
 8017dee:	f7ff ff82 	bl	8017cf6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017df2:	4680      	mov	r8, r0
 8017df4:	9600      	str	r6, [sp, #0]
 8017df6:	69a3      	ldr	r3, [r4, #24]
 8017df8:	686a      	ldr	r2, [r5, #4]
 8017dfa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017dfc:	6920      	ldr	r0, [r4, #16]
 8017dfe:	f7ff ff7a 	bl	8017cf6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017e02:	4440      	add	r0, r8
 8017e04:	e7cc      	b.n	8017da0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017e06:	bf00      	nop
 8017e08:	20056568 	.word	0x20056568

08017e0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017e0c:	4b07      	ldr	r3, [pc, #28]	; (8017e2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017e0e:	b510      	push	{r4, lr}
 8017e10:	781b      	ldrb	r3, [r3, #0]
 8017e12:	2b01      	cmp	r3, #1
 8017e14:	d108      	bne.n	8017e28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017e16:	4b06      	ldr	r3, [pc, #24]	; (8017e30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017e18:	880c      	ldrh	r4, [r1, #0]
 8017e1a:	881b      	ldrh	r3, [r3, #0]
 8017e1c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017e20:	3b01      	subs	r3, #1
 8017e22:	1b1b      	subs	r3, r3, r4
 8017e24:	8003      	strh	r3, [r0, #0]
 8017e26:	800a      	strh	r2, [r1, #0]
 8017e28:	bd10      	pop	{r4, pc}
 8017e2a:	bf00      	nop
 8017e2c:	20056534 	.word	0x20056534
 8017e30:	20056538 	.word	0x20056538

08017e34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017e34:	4b0a      	ldr	r3, [pc, #40]	; (8017e60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017e36:	b510      	push	{r4, lr}
 8017e38:	781b      	ldrb	r3, [r3, #0]
 8017e3a:	2b01      	cmp	r3, #1
 8017e3c:	d10e      	bne.n	8017e5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017e3e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017e42:	8843      	ldrh	r3, [r0, #2]
 8017e44:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017e48:	18ca      	adds	r2, r1, r3
 8017e4a:	4b06      	ldr	r3, [pc, #24]	; (8017e64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017e4c:	8044      	strh	r4, [r0, #2]
 8017e4e:	881b      	ldrh	r3, [r3, #0]
 8017e50:	1a9b      	subs	r3, r3, r2
 8017e52:	8003      	strh	r3, [r0, #0]
 8017e54:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017e58:	8081      	strh	r1, [r0, #4]
 8017e5a:	80c3      	strh	r3, [r0, #6]
 8017e5c:	bd10      	pop	{r4, pc}
 8017e5e:	bf00      	nop
 8017e60:	20056534 	.word	0x20056534
 8017e64:	20056530 	.word	0x20056530

08017e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017e68:	4b07      	ldr	r3, [pc, #28]	; (8017e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017e6a:	b510      	push	{r4, lr}
 8017e6c:	781b      	ldrb	r3, [r3, #0]
 8017e6e:	2b01      	cmp	r3, #1
 8017e70:	d108      	bne.n	8017e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017e72:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017e76:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017e7a:	8003      	strh	r3, [r0, #0]
 8017e7c:	8893      	ldrh	r3, [r2, #4]
 8017e7e:	3b01      	subs	r3, #1
 8017e80:	1b1b      	subs	r3, r3, r4
 8017e82:	800b      	strh	r3, [r1, #0]
 8017e84:	bd10      	pop	{r4, pc}
 8017e86:	bf00      	nop
 8017e88:	20056534 	.word	0x20056534

08017e8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017e8c:	4b08      	ldr	r3, [pc, #32]	; (8017eb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017e8e:	b513      	push	{r0, r1, r4, lr}
 8017e90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e94:	2400      	movs	r4, #0
 8017e96:	4b07      	ldr	r3, [pc, #28]	; (8017eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8017e98:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017e9c:	466a      	mov	r2, sp
 8017e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ea2:	9400      	str	r4, [sp, #0]
 8017ea4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017ea8:	f7ff ffde 	bl	8017e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017eac:	b002      	add	sp, #8
 8017eae:	bd10      	pop	{r4, pc}
 8017eb0:	20056530 	.word	0x20056530
 8017eb4:	20056532 	.word	0x20056532

08017eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017eb8:	4b0a      	ldr	r3, [pc, #40]	; (8017ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017eba:	460a      	mov	r2, r1
 8017ebc:	b510      	push	{r4, lr}
 8017ebe:	781b      	ldrb	r3, [r3, #0]
 8017ec0:	2b01      	cmp	r3, #1
 8017ec2:	d10d      	bne.n	8017ee0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017ec4:	8881      	ldrh	r1, [r0, #4]
 8017ec6:	8803      	ldrh	r3, [r0, #0]
 8017ec8:	440b      	add	r3, r1
 8017eca:	4601      	mov	r1, r0
 8017ecc:	3b01      	subs	r3, #1
 8017ece:	f821 3b02 	strh.w	r3, [r1], #2
 8017ed2:	f7ff ffc9 	bl	8017e68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017ed6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017eda:	88c2      	ldrh	r2, [r0, #6]
 8017edc:	80c3      	strh	r3, [r0, #6]
 8017ede:	8082      	strh	r2, [r0, #4]
 8017ee0:	bd10      	pop	{r4, pc}
 8017ee2:	bf00      	nop
 8017ee4:	20056534 	.word	0x20056534

08017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017ee8:	4b09      	ldr	r3, [pc, #36]	; (8017f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017eea:	b507      	push	{r0, r1, r2, lr}
 8017eec:	2100      	movs	r1, #0
 8017eee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ef2:	4b08      	ldr	r3, [pc, #32]	; (8017f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8017ef4:	9100      	str	r1, [sp, #0]
 8017ef6:	4669      	mov	r1, sp
 8017ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017efc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017f00:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017f04:	f7ff ffd8 	bl	8017eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017f08:	b003      	add	sp, #12
 8017f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f0e:	bf00      	nop
 8017f10:	20056530 	.word	0x20056530
 8017f14:	20056532 	.word	0x20056532

08017f18 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017f18:	4b06      	ldr	r3, [pc, #24]	; (8017f34 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017f1a:	2100      	movs	r1, #0
 8017f1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f20:	4b05      	ldr	r3, [pc, #20]	; (8017f38 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017f22:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8017f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f2a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8017f2e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8017f32:	4770      	bx	lr
 8017f34:	20056530 	.word	0x20056530
 8017f38:	20056532 	.word	0x20056532

08017f3c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017f3c:	4b03      	ldr	r3, [pc, #12]	; (8017f4c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017f3e:	6818      	ldr	r0, [r3, #0]
 8017f40:	b110      	cbz	r0, 8017f48 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017f42:	6803      	ldr	r3, [r0, #0]
 8017f44:	699b      	ldr	r3, [r3, #24]
 8017f46:	4718      	bx	r3
 8017f48:	4770      	bx	lr
 8017f4a:	bf00      	nop
 8017f4c:	20056598 	.word	0x20056598

08017f50 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017f50:	4770      	bx	lr
	...

08017f54 <_ZN8touchgfx11Application4drawEv>:
 8017f54:	4b09      	ldr	r3, [pc, #36]	; (8017f7c <_ZN8touchgfx11Application4drawEv+0x28>)
 8017f56:	b507      	push	{r0, r1, r2, lr}
 8017f58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f5c:	2100      	movs	r1, #0
 8017f5e:	4b08      	ldr	r3, [pc, #32]	; (8017f80 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017f60:	9100      	str	r1, [sp, #0]
 8017f62:	4669      	mov	r1, sp
 8017f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f68:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017f6c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017f70:	6803      	ldr	r3, [r0, #0]
 8017f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f74:	4798      	blx	r3
 8017f76:	b003      	add	sp, #12
 8017f78:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f7c:	20056530 	.word	0x20056530
 8017f80:	20056532 	.word	0x20056532

08017f84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017f84:	4b03      	ldr	r3, [pc, #12]	; (8017f94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017f86:	6818      	ldr	r0, [r3, #0]
 8017f88:	b110      	cbz	r0, 8017f90 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017f8a:	6803      	ldr	r3, [r0, #0]
 8017f8c:	69db      	ldr	r3, [r3, #28]
 8017f8e:	4718      	bx	r3
 8017f90:	4770      	bx	lr
 8017f92:	bf00      	nop
 8017f94:	20056598 	.word	0x20056598

08017f98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017f98:	4b03      	ldr	r3, [pc, #12]	; (8017fa8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017f9a:	6818      	ldr	r0, [r3, #0]
 8017f9c:	b110      	cbz	r0, 8017fa4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017f9e:	6803      	ldr	r3, [r0, #0]
 8017fa0:	6a1b      	ldr	r3, [r3, #32]
 8017fa2:	4718      	bx	r3
 8017fa4:	4770      	bx	lr
 8017fa6:	bf00      	nop
 8017fa8:	20056598 	.word	0x20056598

08017fac <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017fac:	4b03      	ldr	r3, [pc, #12]	; (8017fbc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017fae:	6818      	ldr	r0, [r3, #0]
 8017fb0:	b110      	cbz	r0, 8017fb8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017fb2:	6803      	ldr	r3, [r0, #0]
 8017fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fb6:	4718      	bx	r3
 8017fb8:	4770      	bx	lr
 8017fba:	bf00      	nop
 8017fbc:	20056598 	.word	0x20056598

08017fc0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017fc0:	b570      	push	{r4, r5, r6, lr}
 8017fc2:	4d34      	ldr	r5, [pc, #208]	; (8018094 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8017fc4:	4604      	mov	r4, r0
 8017fc6:	6828      	ldr	r0, [r5, #0]
 8017fc8:	b140      	cbz	r0, 8017fdc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017fca:	7a03      	ldrb	r3, [r0, #8]
 8017fcc:	b933      	cbnz	r3, 8017fdc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017fce:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8017fd2:	6803      	ldr	r3, [r0, #0]
 8017fd4:	689b      	ldr	r3, [r3, #8]
 8017fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fda:	4718      	bx	r3
 8017fdc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8017fe0:	b97b      	cbnz	r3, 8018002 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017fe2:	b170      	cbz	r0, 8018002 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017fe4:	7a03      	ldrb	r3, [r0, #8]
 8017fe6:	b163      	cbz	r3, 8018002 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017fe8:	4b2b      	ldr	r3, [pc, #172]	; (8018098 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8017fea:	6818      	ldr	r0, [r3, #0]
 8017fec:	b110      	cbz	r0, 8017ff4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017fee:	6803      	ldr	r3, [r0, #0]
 8017ff0:	691b      	ldr	r3, [r3, #16]
 8017ff2:	4798      	blx	r3
 8017ff4:	6828      	ldr	r0, [r5, #0]
 8017ff6:	6803      	ldr	r3, [r0, #0]
 8017ff8:	68db      	ldr	r3, [r3, #12]
 8017ffa:	4798      	blx	r3
 8017ffc:	2301      	movs	r3, #1
 8017ffe:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018002:	2500      	movs	r5, #0
 8018004:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018008:	42a8      	cmp	r0, r5
 801800a:	dd0c      	ble.n	8018026 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801800c:	1963      	adds	r3, r4, r5
 801800e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018012:	b132      	cbz	r2, 8018022 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8018014:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018018:	4413      	add	r3, r2
 801801a:	6858      	ldr	r0, [r3, #4]
 801801c:	6803      	ldr	r3, [r0, #0]
 801801e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018020:	4798      	blx	r3
 8018022:	3501      	adds	r5, #1
 8018024:	e7ee      	b.n	8018004 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018026:	2300      	movs	r3, #0
 8018028:	461a      	mov	r2, r3
 801802a:	4298      	cmp	r0, r3
 801802c:	d114      	bne.n	8018058 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801802e:	1d25      	adds	r5, r4, #4
 8018030:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8018034:	1e48      	subs	r0, r1, #1
 8018036:	b280      	uxth	r0, r0
 8018038:	4291      	cmp	r1, r2
 801803a:	dd24      	ble.n	8018086 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801803c:	4288      	cmp	r0, r1
 801803e:	d2fb      	bcs.n	8018038 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8018040:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8018044:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8018048:	3304      	adds	r3, #4
 801804a:	428b      	cmp	r3, r1
 801804c:	d018      	beq.n	8018080 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801804e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8018052:	f843 6c04 	str.w	r6, [r3, #-4]
 8018056:	e7f8      	b.n	801804a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8018058:	18e1      	adds	r1, r4, r3
 801805a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801805e:	b16d      	cbz	r5, 801807c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8018060:	429a      	cmp	r2, r3
 8018062:	d00a      	beq.n	801807a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8018064:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8018068:	4431      	add	r1, r6
 801806a:	684e      	ldr	r6, [r1, #4]
 801806c:	b291      	uxth	r1, r2
 801806e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8018072:	604e      	str	r6, [r1, #4]
 8018074:	18a1      	adds	r1, r4, r2
 8018076:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801807a:	3201      	adds	r2, #1
 801807c:	3301      	adds	r3, #1
 801807e:	e7d4      	b.n	801802a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8018080:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8018084:	e7d4      	b.n	8018030 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8018086:	4b04      	ldr	r3, [pc, #16]	; (8018098 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8018088:	6818      	ldr	r0, [r3, #0]
 801808a:	b110      	cbz	r0, 8018092 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801808c:	6803      	ldr	r3, [r0, #0]
 801808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018090:	e7a1      	b.n	8017fd6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018092:	bd70      	pop	{r4, r5, r6, pc}
 8018094:	2005659c 	.word	0x2005659c
 8018098:	20056598 	.word	0x20056598

0801809c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801809c:	b570      	push	{r4, r5, r6, lr}
 801809e:	4606      	mov	r6, r0
 80180a0:	460c      	mov	r4, r1
 80180a2:	b929      	cbnz	r1, 80180b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80180a4:	4b0c      	ldr	r3, [pc, #48]	; (80180d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80180a6:	2167      	movs	r1, #103	; 0x67
 80180a8:	4a0c      	ldr	r2, [pc, #48]	; (80180dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80180aa:	480d      	ldr	r0, [pc, #52]	; (80180e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80180ac:	f00d f9d2 	bl	8025454 <__assert_func>
 80180b0:	2300      	movs	r3, #0
 80180b2:	4d0c      	ldr	r5, [pc, #48]	; (80180e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80180b4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80180b8:	6828      	ldr	r0, [r5, #0]
 80180ba:	b110      	cbz	r0, 80180c2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80180bc:	6803      	ldr	r3, [r0, #0]
 80180be:	695b      	ldr	r3, [r3, #20]
 80180c0:	4798      	blx	r3
 80180c2:	602c      	str	r4, [r5, #0]
 80180c4:	4620      	mov	r0, r4
 80180c6:	6823      	ldr	r3, [r4, #0]
 80180c8:	68db      	ldr	r3, [r3, #12]
 80180ca:	4798      	blx	r3
 80180cc:	6833      	ldr	r3, [r6, #0]
 80180ce:	4630      	mov	r0, r6
 80180d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180d6:	4718      	bx	r3
 80180d8:	08029314 	.word	0x08029314
 80180dc:	080293e4 	.word	0x080293e4
 80180e0:	0802931e 	.word	0x0802931e
 80180e4:	20056598 	.word	0x20056598

080180e8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80180e8:	b570      	push	{r4, r5, r6, lr}
 80180ea:	f9b1 4000 	ldrsh.w	r4, [r1]
 80180ee:	f9b0 5000 	ldrsh.w	r5, [r0]
 80180f2:	42ac      	cmp	r4, r5
 80180f4:	db18      	blt.n	8018128 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80180f6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80180fa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80180fe:	429a      	cmp	r2, r3
 8018100:	db12      	blt.n	8018128 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018102:	8886      	ldrh	r6, [r0, #4]
 8018104:	4435      	add	r5, r6
 8018106:	888e      	ldrh	r6, [r1, #4]
 8018108:	4434      	add	r4, r6
 801810a:	b22d      	sxth	r5, r5
 801810c:	b224      	sxth	r4, r4
 801810e:	42a5      	cmp	r5, r4
 8018110:	db0a      	blt.n	8018128 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018112:	88c0      	ldrh	r0, [r0, #6]
 8018114:	4418      	add	r0, r3
 8018116:	88cb      	ldrh	r3, [r1, #6]
 8018118:	441a      	add	r2, r3
 801811a:	b200      	sxth	r0, r0
 801811c:	b212      	sxth	r2, r2
 801811e:	4290      	cmp	r0, r2
 8018120:	bfb4      	ite	lt
 8018122:	2000      	movlt	r0, #0
 8018124:	2001      	movge	r0, #1
 8018126:	bd70      	pop	{r4, r5, r6, pc}
 8018128:	2000      	movs	r0, #0
 801812a:	e7fc      	b.n	8018126 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801812c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801812e:	4604      	mov	r4, r0
 8018130:	4608      	mov	r0, r1
 8018132:	460d      	mov	r5, r1
 8018134:	f7fc fa25 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018138:	b978      	cbnz	r0, 801815a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801813a:	4620      	mov	r0, r4
 801813c:	f7fc fa21 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018140:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018144:	b150      	cbz	r0, 801815c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018146:	8026      	strh	r6, [r4, #0]
 8018148:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801814c:	8063      	strh	r3, [r4, #2]
 801814e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018152:	80a3      	strh	r3, [r4, #4]
 8018154:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018158:	80e3      	strh	r3, [r4, #6]
 801815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801815c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018160:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018164:	42b1      	cmp	r1, r6
 8018166:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801816a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801816e:	460f      	mov	r7, r1
 8018170:	88ed      	ldrh	r5, [r5, #6]
 8018172:	bfa8      	it	ge
 8018174:	4637      	movge	r7, r6
 8018176:	4293      	cmp	r3, r2
 8018178:	4618      	mov	r0, r3
 801817a:	4466      	add	r6, ip
 801817c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018180:	bfa8      	it	ge
 8018182:	4610      	movge	r0, r2
 8018184:	442a      	add	r2, r5
 8018186:	88e5      	ldrh	r5, [r4, #6]
 8018188:	4461      	add	r1, ip
 801818a:	b236      	sxth	r6, r6
 801818c:	8027      	strh	r7, [r4, #0]
 801818e:	442b      	add	r3, r5
 8018190:	b209      	sxth	r1, r1
 8018192:	b212      	sxth	r2, r2
 8018194:	8060      	strh	r0, [r4, #2]
 8018196:	b21b      	sxth	r3, r3
 8018198:	428e      	cmp	r6, r1
 801819a:	bfac      	ite	ge
 801819c:	ebc7 0106 	rsbge	r1, r7, r6
 80181a0:	ebc7 0101 	rsblt	r1, r7, r1
 80181a4:	429a      	cmp	r2, r3
 80181a6:	bfac      	ite	ge
 80181a8:	ebc0 0202 	rsbge	r2, r0, r2
 80181ac:	ebc0 0203 	rsblt	r2, r0, r3
 80181b0:	80a1      	strh	r1, [r4, #4]
 80181b2:	80e2      	strh	r2, [r4, #6]
 80181b4:	e7d1      	b.n	801815a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080181b8 <_ZN8touchgfx11Application11getInstanceEv>:
 80181b8:	4b01      	ldr	r3, [pc, #4]	; (80181c0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80181ba:	6818      	ldr	r0, [r3, #0]
 80181bc:	4770      	bx	lr
 80181be:	bf00      	nop
 80181c0:	200565a8 	.word	0x200565a8

080181c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80181c4:	2300      	movs	r3, #0
 80181c6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80181ca:	30a8      	adds	r0, #168	; 0xa8
 80181cc:	f820 3c24 	strh.w	r3, [r0, #-36]
 80181d0:	f802 3b01 	strb.w	r3, [r2], #1
 80181d4:	4282      	cmp	r2, r0
 80181d6:	d1fb      	bne.n	80181d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80181d8:	4770      	bx	lr

080181da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80181da:	4603      	mov	r3, r0
 80181dc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80181e0:	2200      	movs	r2, #0
 80181e2:	801a      	strh	r2, [r3, #0]
 80181e4:	3308      	adds	r3, #8
 80181e6:	f823 2c06 	strh.w	r2, [r3, #-6]
 80181ea:	f823 2c04 	strh.w	r2, [r3, #-4]
 80181ee:	f823 2c02 	strh.w	r2, [r3, #-2]
 80181f2:	428b      	cmp	r3, r1
 80181f4:	d1f5      	bne.n	80181e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80181f6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80181fa:	4770      	bx	lr

080181fc <_ZN8touchgfx11ApplicationC1Ev>:
 80181fc:	b570      	push	{r4, r5, r6, lr}
 80181fe:	4b1a      	ldr	r3, [pc, #104]	; (8018268 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018200:	2500      	movs	r5, #0
 8018202:	4604      	mov	r4, r0
 8018204:	30a8      	adds	r0, #168	; 0xa8
 8018206:	f840 3ca8 	str.w	r3, [r0, #-168]
 801820a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801820e:	f7ff ffe4 	bl	80181da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018212:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018216:	f7ff ffe0 	bl	80181da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801821a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801821e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8018222:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018226:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801822a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801822e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8018232:	490e      	ldr	r1, [pc, #56]	; (801826c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018234:	480e      	ldr	r0, [pc, #56]	; (8018270 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018236:	f00b fa69 	bl	802370c <CRC_Lock>
 801823a:	4e0e      	ldr	r6, [pc, #56]	; (8018274 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801823c:	4b0e      	ldr	r3, [pc, #56]	; (8018278 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801823e:	b158      	cbz	r0, 8018258 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8018240:	801d      	strh	r5, [r3, #0]
 8018242:	2300      	movs	r3, #0
 8018244:	4a0d      	ldr	r2, [pc, #52]	; (801827c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018246:	4620      	mov	r0, r4
 8018248:	6013      	str	r3, [r2, #0]
 801824a:	4a0d      	ldr	r2, [pc, #52]	; (8018280 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801824c:	6033      	str	r3, [r6, #0]
 801824e:	6013      	str	r3, [r2, #0]
 8018250:	f7ff ffb8 	bl	80181c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018254:	4620      	mov	r0, r4
 8018256:	bd70      	pop	{r4, r5, r6, pc}
 8018258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801825c:	2002      	movs	r0, #2
 801825e:	801a      	strh	r2, [r3, #0]
 8018260:	6030      	str	r0, [r6, #0]
 8018262:	f001 fb41 	bl	80198e8 <_ZN8touchgfx6Screen4drawEv>
 8018266:	e7ec      	b.n	8018242 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8018268:	080293a8 	.word	0x080293a8
 801826c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018270:	f407a5c2 	.word	0xf407a5c2
 8018274:	20056598 	.word	0x20056598
 8018278:	2000001c 	.word	0x2000001c
 801827c:	200565a8 	.word	0x200565a8
 8018280:	2005659c 	.word	0x2005659c

08018284 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018284:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018288:	428b      	cmp	r3, r1
 801828a:	b510      	push	{r4, lr}
 801828c:	d90e      	bls.n	80182ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801828e:	3b01      	subs	r3, #1
 8018290:	b29b      	uxth	r3, r3
 8018292:	428b      	cmp	r3, r1
 8018294:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018298:	d908      	bls.n	80182ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801829a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801829e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80182a2:	681a      	ldr	r2, [r3, #0]
 80182a4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80182a8:	685a      	ldr	r2, [r3, #4]
 80182aa:	6062      	str	r2, [r4, #4]
 80182ac:	bd10      	pop	{r4, pc}
	...

080182b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80182b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182b2:	466b      	mov	r3, sp
 80182b4:	4604      	mov	r4, r0
 80182b6:	e883 0006 	stmia.w	r3, {r1, r2}
 80182ba:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80182be:	2a07      	cmp	r2, #7
 80182c0:	d906      	bls.n	80182d0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80182c2:	4b09      	ldr	r3, [pc, #36]	; (80182e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80182c4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80182c8:	4a08      	ldr	r2, [pc, #32]	; (80182ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80182ca:	4809      	ldr	r0, [pc, #36]	; (80182f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80182cc:	f00d f8c2 	bl	8025454 <__assert_func>
 80182d0:	1c51      	adds	r1, r2, #1
 80182d2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80182d6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80182da:	cb03      	ldmia	r3!, {r0, r1}
 80182dc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80182e0:	6069      	str	r1, [r5, #4]
 80182e2:	b003      	add	sp, #12
 80182e4:	bd30      	pop	{r4, r5, pc}
 80182e6:	bf00      	nop
 80182e8:	08029348 	.word	0x08029348
 80182ec:	08029428 	.word	0x08029428
 80182f0:	08029377 	.word	0x08029377

080182f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80182f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182f8:	b08d      	sub	sp, #52	; 0x34
 80182fa:	4683      	mov	fp, r0
 80182fc:	ac08      	add	r4, sp, #32
 80182fe:	4620      	mov	r0, r4
 8018300:	e884 0006 	stmia.w	r4, {r1, r2}
 8018304:	f7fc f93d 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018308:	2800      	cmp	r0, #0
 801830a:	d16a      	bne.n	80183e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801830c:	9402      	str	r4, [sp, #8]
 801830e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8018312:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8018316:	2400      	movs	r4, #0
 8018318:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801831c:	9301      	str	r3, [sp, #4]
 801831e:	36a0      	adds	r6, #160	; 0xa0
 8018320:	42a5      	cmp	r5, r4
 8018322:	d00d      	beq.n	8018340 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8018324:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8018328:	9802      	ldr	r0, [sp, #8]
 801832a:	f7ff fedd 	bl	80180e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801832e:	b128      	cbz	r0, 801833c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8018330:	1e69      	subs	r1, r5, #1
 8018332:	9801      	ldr	r0, [sp, #4]
 8018334:	1b09      	subs	r1, r1, r4
 8018336:	b289      	uxth	r1, r1
 8018338:	f7ff ffa4 	bl	8018284 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801833c:	3401      	adds	r4, #1
 801833e:	e7ef      	b.n	8018320 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018340:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8018344:	1e7b      	subs	r3, r7, #1
 8018346:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801834a:	9703      	str	r7, [sp, #12]
 801834c:	9300      	str	r3, [sp, #0]
 801834e:	2400      	movs	r4, #0
 8018350:	4655      	mov	r5, sl
 8018352:	9704      	str	r7, [sp, #16]
 8018354:	4626      	mov	r6, r4
 8018356:	9b04      	ldr	r3, [sp, #16]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d078      	beq.n	801844e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801835c:	9902      	ldr	r1, [sp, #8]
 801835e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018362:	f7fd fad7 	bl	8015914 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018366:	b360      	cbz	r0, 80183c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018368:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801836c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8018370:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8018374:	45e6      	cmp	lr, ip
 8018376:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801837a:	db35      	blt.n	80183e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801837c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018380:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018384:	4472      	add	r2, lr
 8018386:	4463      	add	r3, ip
 8018388:	b212      	sxth	r2, r2
 801838a:	b21b      	sxth	r3, r3
 801838c:	429a      	cmp	r2, r3
 801838e:	dc2b      	bgt.n	80183e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018390:	fa1f f288 	uxth.w	r2, r8
 8018394:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018398:	45c1      	cmp	r9, r8
 801839a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801839e:	4413      	add	r3, r2
 80183a0:	fa1f fc89 	uxth.w	ip, r9
 80183a4:	b29b      	uxth	r3, r3
 80183a6:	fa0f fe83 	sxth.w	lr, r3
 80183aa:	db0f      	blt.n	80183cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 80183ac:	eba3 030c 	sub.w	r3, r3, ip
 80183b0:	1ac9      	subs	r1, r1, r3
 80183b2:	b209      	sxth	r1, r1
 80183b4:	2900      	cmp	r1, #0
 80183b6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80183ba:	dd12      	ble.n	80183e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80183bc:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 80183c0:	4604      	mov	r4, r0
 80183c2:	9b04      	ldr	r3, [sp, #16]
 80183c4:	3d08      	subs	r5, #8
 80183c6:	3b01      	subs	r3, #1
 80183c8:	9304      	str	r3, [sp, #16]
 80183ca:	e7c4      	b.n	8018356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80183cc:	4461      	add	r1, ip
 80183ce:	b209      	sxth	r1, r1
 80183d0:	4571      	cmp	r1, lr
 80183d2:	dc3a      	bgt.n	801844a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80183d4:	eba2 020c 	sub.w	r2, r2, ip
 80183d8:	b212      	sxth	r2, r2
 80183da:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80183de:	2a00      	cmp	r2, #0
 80183e0:	dcee      	bgt.n	80183c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80183e2:	b00d      	add	sp, #52	; 0x34
 80183e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183e8:	45c1      	cmp	r9, r8
 80183ea:	db2e      	blt.n	801844a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80183ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80183f0:	4499      	add	r9, r3
 80183f2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80183f6:	4498      	add	r8, r3
 80183f8:	fa0f f989 	sxth.w	r9, r9
 80183fc:	fa0f f888 	sxth.w	r8, r8
 8018400:	45c1      	cmp	r9, r8
 8018402:	dc22      	bgt.n	801844a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018404:	fa1f f28c 	uxth.w	r2, ip
 8018408:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801840c:	45e6      	cmp	lr, ip
 801840e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8018412:	4413      	add	r3, r2
 8018414:	fa1f f88e 	uxth.w	r8, lr
 8018418:	b29b      	uxth	r3, r3
 801841a:	fa0f f983 	sxth.w	r9, r3
 801841e:	db0a      	blt.n	8018436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8018420:	eba3 0308 	sub.w	r3, r3, r8
 8018424:	1ac9      	subs	r1, r1, r3
 8018426:	b209      	sxth	r1, r1
 8018428:	2900      	cmp	r1, #0
 801842a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801842e:	ddd8      	ble.n	80183e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018430:	f8ad 9020 	strh.w	r9, [sp, #32]
 8018434:	e7c4      	b.n	80183c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018436:	4441      	add	r1, r8
 8018438:	b209      	sxth	r1, r1
 801843a:	4549      	cmp	r1, r9
 801843c:	dc05      	bgt.n	801844a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801843e:	eba2 0208 	sub.w	r2, r2, r8
 8018442:	b212      	sxth	r2, r2
 8018444:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018448:	e7c9      	b.n	80183de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801844a:	4606      	mov	r6, r0
 801844c:	e7b9      	b.n	80183c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801844e:	2c00      	cmp	r4, #0
 8018450:	f47f af7d 	bne.w	801834e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8018454:	2e00      	cmp	r6, #0
 8018456:	f000 81dc 	beq.w	8018812 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801845a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801845e:	4655      	mov	r5, sl
 8018460:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8018464:	b2b9      	uxth	r1, r7
 8018466:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801846a:	b2b3      	uxth	r3, r6
 801846c:	9104      	str	r1, [sp, #16]
 801846e:	9804      	ldr	r0, [sp, #16]
 8018470:	441a      	add	r2, r3
 8018472:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018476:	b292      	uxth	r2, r2
 8018478:	4401      	add	r1, r0
 801847a:	fa0f f882 	sxth.w	r8, r2
 801847e:	b289      	uxth	r1, r1
 8018480:	9105      	str	r1, [sp, #20]
 8018482:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8018486:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801848a:	9b03      	ldr	r3, [sp, #12]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d054      	beq.n	801853a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8018490:	9902      	ldr	r1, [sp, #8]
 8018492:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018496:	f7fd fa3d 	bl	8015914 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801849a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801849e:	b1d8      	cbz	r0, 80184d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80184a0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80184a4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80184a8:	4576      	cmp	r6, lr
 80184aa:	dc26      	bgt.n	80184fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80184ac:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80184b0:	44f4      	add	ip, lr
 80184b2:	fa0f fc8c 	sxth.w	ip, ip
 80184b6:	45e0      	cmp	r8, ip
 80184b8:	db1f      	blt.n	80184fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80184ba:	428f      	cmp	r7, r1
 80184bc:	fa1f fc81 	uxth.w	ip, r1
 80184c0:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80184c4:	dc0f      	bgt.n	80184e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80184c6:	9805      	ldr	r0, [sp, #20]
 80184c8:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80184cc:	eba0 0c0c 	sub.w	ip, r0, ip
 80184d0:	eba1 010c 	sub.w	r1, r1, ip
 80184d4:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80184d8:	4620      	mov	r0, r4
 80184da:	9903      	ldr	r1, [sp, #12]
 80184dc:	3d08      	subs	r5, #8
 80184de:	4604      	mov	r4, r0
 80184e0:	3901      	subs	r1, #1
 80184e2:	9103      	str	r1, [sp, #12]
 80184e4:	e7cf      	b.n	8018486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 80184e6:	4461      	add	r1, ip
 80184e8:	b209      	sxth	r1, r1
 80184ea:	4549      	cmp	r1, r9
 80184ec:	dcf5      	bgt.n	80184da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80184ee:	9904      	ldr	r1, [sp, #16]
 80184f0:	eba1 0c0c 	sub.w	ip, r1, ip
 80184f4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80184f8:	e7ee      	b.n	80184d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80184fa:	428f      	cmp	r7, r1
 80184fc:	dced      	bgt.n	80184da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80184fe:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8018502:	4461      	add	r1, ip
 8018504:	b209      	sxth	r1, r1
 8018506:	4589      	cmp	r9, r1
 8018508:	dbe7      	blt.n	80184da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801850a:	4576      	cmp	r6, lr
 801850c:	fa1f fc8e 	uxth.w	ip, lr
 8018510:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8018514:	dc08      	bgt.n	8018528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8018516:	eba2 0c0c 	sub.w	ip, r2, ip
 801851a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801851e:	eba1 010c 	sub.w	r1, r1, ip
 8018522:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8018526:	e7d7      	b.n	80184d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018528:	4461      	add	r1, ip
 801852a:	b209      	sxth	r1, r1
 801852c:	4588      	cmp	r8, r1
 801852e:	dbd4      	blt.n	80184da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018530:	eba3 0c0c 	sub.w	ip, r3, ip
 8018534:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8018538:	e7ce      	b.n	80184d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801853a:	2c00      	cmp	r4, #0
 801853c:	f000 8169 	beq.w	8018812 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018540:	9b00      	ldr	r3, [sp, #0]
 8018542:	3301      	adds	r3, #1
 8018544:	f000 8165 	beq.w	8018812 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018548:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801854c:	9802      	ldr	r0, [sp, #8]
 801854e:	4621      	mov	r1, r4
 8018550:	f7ff fdca 	bl	80180e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018554:	b120      	cbz	r0, 8018560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8018556:	f8bd 1000 	ldrh.w	r1, [sp]
 801855a:	9801      	ldr	r0, [sp, #4]
 801855c:	f7ff fe92 	bl	8018284 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018560:	9902      	ldr	r1, [sp, #8]
 8018562:	4620      	mov	r0, r4
 8018564:	f7fd f9d6 	bl	8015914 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018568:	2800      	cmp	r0, #0
 801856a:	f000 809b 	beq.w	80186a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801856e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8018572:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8018576:	fa1f f288 	uxth.w	r2, r8
 801857a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801857e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8018582:	19d5      	adds	r5, r2, r7
 8018584:	b2a1      	uxth	r1, r4
 8018586:	45a0      	cmp	r8, r4
 8018588:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801858c:	fa1f f985 	uxth.w	r9, r5
 8018590:	440b      	add	r3, r1
 8018592:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8018596:	fa0f f589 	sxth.w	r5, r9
 801859a:	b29b      	uxth	r3, r3
 801859c:	9503      	str	r5, [sp, #12]
 801859e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80185a2:	9507      	str	r5, [sp, #28]
 80185a4:	f340 809d 	ble.w	80186e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80185a8:	1a52      	subs	r2, r2, r1
 80185aa:	4584      	cmp	ip, r0
 80185ac:	fa0f fe83 	sxth.w	lr, r3
 80185b0:	b292      	uxth	r2, r2
 80185b2:	b215      	sxth	r5, r2
 80185b4:	dd2f      	ble.n	8018616 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80185b6:	9e00      	ldr	r6, [sp, #0]
 80185b8:	fa1f fc8c 	uxth.w	ip, ip
 80185bc:	b280      	uxth	r0, r0
 80185be:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80185c2:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 80185c6:	9e03      	ldr	r6, [sp, #12]
 80185c8:	ebac 0300 	sub.w	r3, ip, r0
 80185cc:	448c      	add	ip, r1
 80185ce:	eba6 060e 	sub.w	r6, r6, lr
 80185d2:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	4470      	add	r0, lr
 80185da:	fa0f fc8c 	sxth.w	ip, ip
 80185de:	b21c      	sxth	r4, r3
 80185e0:	b200      	sxth	r0, r0
 80185e2:	4366      	muls	r6, r4
 80185e4:	ebac 0000 	sub.w	r0, ip, r0
 80185e8:	4368      	muls	r0, r5
 80185ea:	4286      	cmp	r6, r0
 80185ec:	db09      	blt.n	8018602 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 80185ee:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80185f2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80185f6:	4417      	add	r7, r2
 80185f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80185fc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8018600:	e685      	b.n	801830e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018602:	440b      	add	r3, r1
 8018604:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8018608:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801860c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8018610:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018614:	e67b      	b.n	801830e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018616:	9e03      	ldr	r6, [sp, #12]
 8018618:	45b6      	cmp	lr, r6
 801861a:	da28      	bge.n	801866e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801861c:	9b00      	ldr	r3, [sp, #0]
 801861e:	eba6 060e 	sub.w	r6, r6, lr
 8018622:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8018626:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801862a:	eb04 030c 	add.w	r3, r4, ip
 801862e:	fa1f f883 	uxth.w	r8, r3
 8018632:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8018636:	4403      	add	r3, r0
 8018638:	fa0f f988 	sxth.w	r9, r8
 801863c:	eba0 000c 	sub.w	r0, r0, ip
 8018640:	eba3 0308 	sub.w	r3, r3, r8
 8018644:	4368      	muls	r0, r5
 8018646:	b29b      	uxth	r3, r3
 8018648:	fa0f f883 	sxth.w	r8, r3
 801864c:	fb08 f606 	mul.w	r6, r8, r6
 8018650:	42b0      	cmp	r0, r6
 8018652:	dc06      	bgt.n	8018662 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8018654:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8018658:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801865c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8018660:	e7c9      	b.n	80185f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8018662:	4423      	add	r3, r4
 8018664:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8018668:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801866c:	e64f      	b.n	801830e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801866e:	eba3 0309 	sub.w	r3, r3, r9
 8018672:	9807      	ldr	r0, [sp, #28]
 8018674:	b29b      	uxth	r3, r3
 8018676:	2806      	cmp	r0, #6
 8018678:	fa0f fc83 	sxth.w	ip, r3
 801867c:	d818      	bhi.n	80186b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801867e:	4652      	mov	r2, sl
 8018680:	ab0a      	add	r3, sp, #40	; 0x28
 8018682:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8018686:	6851      	ldr	r1, [r2, #4]
 8018688:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801868c:	c303      	stmia	r3!, {r0, r1}
 801868e:	9b03      	ldr	r3, [sp, #12]
 8018690:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8018694:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8018698:	ab0a      	add	r3, sp, #40	; 0x28
 801869a:	9801      	ldr	r0, [sp, #4]
 801869c:	e893 0006 	ldmia.w	r3, {r1, r2}
 80186a0:	f7ff fe06 	bl	80182b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80186a4:	9b00      	ldr	r3, [sp, #0]
 80186a6:	f1aa 0a08 	sub.w	sl, sl, #8
 80186aa:	3b01      	subs	r3, #1
 80186ac:	9300      	str	r3, [sp, #0]
 80186ae:	e747      	b.n	8018540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80186b0:	9800      	ldr	r0, [sp, #0]
 80186b2:	45ac      	cmp	ip, r5
 80186b4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80186b8:	db0c      	blt.n	80186d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 80186ba:	4417      	add	r7, r2
 80186bc:	4458      	add	r0, fp
 80186be:	f8ad 4020 	strh.w	r4, [sp, #32]
 80186c2:	b2bf      	uxth	r7, r7
 80186c4:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 80186c8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80186cc:	440f      	add	r7, r1
 80186ce:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80186d2:	e61c      	b.n	801830e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80186d4:	4458      	add	r0, fp
 80186d6:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 80186da:	443b      	add	r3, r7
 80186dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80186e0:	e615      	b.n	801830e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80186e2:	fa1f f18c 	uxth.w	r1, ip
 80186e6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80186ea:	b282      	uxth	r2, r0
 80186ec:	4584      	cmp	ip, r0
 80186ee:	eb01 0e05 	add.w	lr, r1, r5
 80186f2:	9204      	str	r2, [sp, #16]
 80186f4:	fa1f fe8e 	uxth.w	lr, lr
 80186f8:	9e04      	ldr	r6, [sp, #16]
 80186fa:	fa0f f28e 	sxth.w	r2, lr
 80186fe:	9205      	str	r2, [sp, #20]
 8018700:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8018704:	4432      	add	r2, r6
 8018706:	b292      	uxth	r2, r2
 8018708:	9206      	str	r2, [sp, #24]
 801870a:	da26      	bge.n	801875a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801870c:	eba3 0309 	sub.w	r3, r3, r9
 8018710:	eba2 020e 	sub.w	r2, r2, lr
 8018714:	eba0 000c 	sub.w	r0, r0, ip
 8018718:	eba4 0408 	sub.w	r4, r4, r8
 801871c:	b29b      	uxth	r3, r3
 801871e:	b292      	uxth	r2, r2
 8018720:	fa0f fa83 	sxth.w	sl, r3
 8018724:	b211      	sxth	r1, r2
 8018726:	fb0a f000 	mul.w	r0, sl, r0
 801872a:	434c      	muls	r4, r1
 801872c:	42a0      	cmp	r0, r4
 801872e:	9800      	ldr	r0, [sp, #0]
 8018730:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8018734:	dc06      	bgt.n	8018744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8018736:	4458      	add	r0, fp
 8018738:	9a05      	ldr	r2, [sp, #20]
 801873a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801873e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8018742:	e7ca      	b.n	80186da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8018744:	eb0b 0300 	add.w	r3, fp, r0
 8018748:	9903      	ldr	r1, [sp, #12]
 801874a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801874e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8018752:	442a      	add	r2, r5
 8018754:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018758:	e5d9      	b.n	801830e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801875a:	9e04      	ldr	r6, [sp, #16]
 801875c:	9a03      	ldr	r2, [sp, #12]
 801875e:	1b89      	subs	r1, r1, r6
 8018760:	b21e      	sxth	r6, r3
 8018762:	b289      	uxth	r1, r1
 8018764:	4296      	cmp	r6, r2
 8018766:	fa0f fc81 	sxth.w	ip, r1
 801876a:	dd25      	ble.n	80187b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801876c:	eba3 0309 	sub.w	r3, r3, r9
 8018770:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8018774:	9e05      	ldr	r6, [sp, #20]
 8018776:	eba4 0408 	sub.w	r4, r4, r8
 801877a:	b29b      	uxth	r3, r3
 801877c:	eba6 0902 	sub.w	r9, r6, r2
 8018780:	fb0c f404 	mul.w	r4, ip, r4
 8018784:	b218      	sxth	r0, r3
 8018786:	9a00      	ldr	r2, [sp, #0]
 8018788:	fb00 f909 	mul.w	r9, r0, r9
 801878c:	00d2      	lsls	r2, r2, #3
 801878e:	454c      	cmp	r4, r9
 8018790:	db03      	blt.n	801879a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8018792:	445a      	add	r2, fp
 8018794:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8018798:	e79f      	b.n	80186da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801879a:	eb0b 0302 	add.w	r3, fp, r2
 801879e:	9a03      	ldr	r2, [sp, #12]
 80187a0:	4429      	add	r1, r5
 80187a2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80187a6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80187aa:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80187ae:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80187b2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80187b6:	e5aa      	b.n	801830e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80187b8:	9b06      	ldr	r3, [sp, #24]
 80187ba:	9c07      	ldr	r4, [sp, #28]
 80187bc:	eba3 020e 	sub.w	r2, r3, lr
 80187c0:	2c06      	cmp	r4, #6
 80187c2:	b292      	uxth	r2, r2
 80187c4:	b213      	sxth	r3, r2
 80187c6:	d80d      	bhi.n	80187e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 80187c8:	4651      	mov	r1, sl
 80187ca:	aa0a      	add	r2, sp, #40	; 0x28
 80187cc:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 80187d0:	6849      	ldr	r1, [r1, #4]
 80187d2:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 80187d6:	9b05      	ldr	r3, [sp, #20]
 80187d8:	c203      	stmia	r2!, {r0, r1}
 80187da:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80187de:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 80187e2:	e759      	b.n	8018698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 80187e4:	9c00      	ldr	r4, [sp, #0]
 80187e6:	4563      	cmp	r3, ip
 80187e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80187ec:	db0d      	blt.n	801880a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 80187ee:	4429      	add	r1, r5
 80187f0:	9a04      	ldr	r2, [sp, #16]
 80187f2:	445c      	add	r4, fp
 80187f4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80187f8:	b289      	uxth	r1, r1
 80187fa:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80187fe:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8018802:	4411      	add	r1, r2
 8018804:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8018808:	e581      	b.n	801830e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801880a:	445c      	add	r4, fp
 801880c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8018810:	e79f      	b.n	8018752 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8018812:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8018816:	2f07      	cmp	r7, #7
 8018818:	d806      	bhi.n	8018828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801881a:	ab08      	add	r3, sp, #32
 801881c:	9801      	ldr	r0, [sp, #4]
 801881e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018822:	f7ff fd45 	bl	80182b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018826:	e5dc      	b.n	80183e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018828:	f107 39ff 	add.w	r9, r7, #4294967295
 801882c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8018830:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8018834:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8018838:	f04f 35ff 	mov.w	r5, #4294967295
 801883c:	2400      	movs	r4, #0
 801883e:	9304      	str	r3, [sp, #16]
 8018840:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8018844:	f109 32ff 	add.w	r2, r9, #4294967295
 8018848:	9300      	str	r3, [sp, #0]
 801884a:	4690      	mov	r8, r2
 801884c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8018850:	9303      	str	r3, [sp, #12]
 8018852:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018856:	f1b8 3fff 	cmp.w	r8, #4294967295
 801885a:	6818      	ldr	r0, [r3, #0]
 801885c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8018860:	9206      	str	r2, [sp, #24]
 8018862:	bf16      	itet	ne
 8018864:	9904      	ldrne	r1, [sp, #16]
 8018866:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801886a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801886e:	9305      	str	r3, [sp, #20]
 8018870:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8018874:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8018878:	fb16 f601 	smulbb	r6, r6, r1
 801887c:	6859      	ldr	r1, [r3, #4]
 801887e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018882:	4671      	mov	r1, lr
 8018884:	a80a      	add	r0, sp, #40	; 0x28
 8018886:	f7ff fc51 	bl	801812c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801888a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801888e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018892:	9b03      	ldr	r3, [sp, #12]
 8018894:	9a00      	ldr	r2, [sp, #0]
 8018896:	fb11 f100 	smulbb	r1, r1, r0
 801889a:	2008      	movs	r0, #8
 801889c:	fb02 6603 	mla	r6, r2, r3, r6
 80188a0:	1b8e      	subs	r6, r1, r6
 80188a2:	fb91 f1f0 	sdiv	r1, r1, r0
 80188a6:	42b1      	cmp	r1, r6
 80188a8:	dc21      	bgt.n	80188ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80188aa:	4556      	cmp	r6, sl
 80188ac:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80188b0:	da03      	bge.n	80188ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 80188b2:	b1e6      	cbz	r6, 80188ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80188b4:	46b2      	mov	sl, r6
 80188b6:	4645      	mov	r5, r8
 80188b8:	464c      	mov	r4, r9
 80188ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80188be:	f118 0f02 	cmn.w	r8, #2
 80188c2:	d1c8      	bne.n	8018856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 80188c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80188c8:	f1a7 0708 	sub.w	r7, r7, #8
 80188cc:	4691      	mov	r9, r2
 80188ce:	d1b7      	bne.n	8018840 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80188d0:	9b01      	ldr	r3, [sp, #4]
 80188d2:	b2a6      	uxth	r6, r4
 80188d4:	00e4      	lsls	r4, r4, #3
 80188d6:	1918      	adds	r0, r3, r4
 80188d8:	1c6b      	adds	r3, r5, #1
 80188da:	d10b      	bne.n	80188f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 80188dc:	4601      	mov	r1, r0
 80188de:	9802      	ldr	r0, [sp, #8]
 80188e0:	f7ff fc24 	bl	801812c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80188e4:	4631      	mov	r1, r6
 80188e6:	9801      	ldr	r0, [sp, #4]
 80188e8:	f7ff fccc 	bl	8018284 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80188ec:	e50f      	b.n	801830e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80188ee:	4645      	mov	r5, r8
 80188f0:	464c      	mov	r4, r9
 80188f2:	e7ed      	b.n	80188d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 80188f4:	9b01      	ldr	r3, [sp, #4]
 80188f6:	00ed      	lsls	r5, r5, #3
 80188f8:	445c      	add	r4, fp
 80188fa:	1959      	adds	r1, r3, r5
 80188fc:	445d      	add	r5, fp
 80188fe:	f7ff fc15 	bl	801812c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018902:	9b02      	ldr	r3, [sp, #8]
 8018904:	cb03      	ldmia	r3!, {r0, r1}
 8018906:	9b02      	ldr	r3, [sp, #8]
 8018908:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801890c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8018910:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8018914:	6861      	ldr	r1, [r4, #4]
 8018916:	c303      	stmia	r3!, {r0, r1}
 8018918:	e7e4      	b.n	80188e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801891c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801891c:	4b1d      	ldr	r3, [pc, #116]	; (8018994 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801891e:	b530      	push	{r4, r5, lr}
 8018920:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018924:	b085      	sub	sp, #20
 8018926:	4b1c      	ldr	r3, [pc, #112]	; (8018998 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8018928:	460c      	mov	r4, r1
 801892a:	2100      	movs	r1, #0
 801892c:	4605      	mov	r5, r0
 801892e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018932:	6820      	ldr	r0, [r4, #0]
 8018934:	9100      	str	r1, [sp, #0]
 8018936:	f8ad 3006 	strh.w	r3, [sp, #6]
 801893a:	ab02      	add	r3, sp, #8
 801893c:	6861      	ldr	r1, [r4, #4]
 801893e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018942:	c303      	stmia	r3!, {r0, r1}
 8018944:	4669      	mov	r1, sp
 8018946:	a802      	add	r0, sp, #8
 8018948:	f7fb fdd8 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 801894c:	ab02      	add	r3, sp, #8
 801894e:	cb03      	ldmia	r3!, {r0, r1}
 8018950:	4b12      	ldr	r3, [pc, #72]	; (801899c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8018952:	6020      	str	r0, [r4, #0]
 8018954:	6818      	ldr	r0, [r3, #0]
 8018956:	6061      	str	r1, [r4, #4]
 8018958:	b138      	cbz	r0, 801896a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801895a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801895e:	b133      	cbz	r3, 801896e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8018960:	6821      	ldr	r1, [r4, #0]
 8018962:	4628      	mov	r0, r5
 8018964:	6862      	ldr	r2, [r4, #4]
 8018966:	f7ff fcc5 	bl	80182f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801896a:	b005      	add	sp, #20
 801896c:	bd30      	pop	{r4, r5, pc}
 801896e:	6803      	ldr	r3, [r0, #0]
 8018970:	4621      	mov	r1, r4
 8018972:	689b      	ldr	r3, [r3, #8]
 8018974:	4798      	blx	r3
 8018976:	4b0a      	ldr	r3, [pc, #40]	; (80189a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8018978:	6818      	ldr	r0, [r3, #0]
 801897a:	b118      	cbz	r0, 8018984 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801897c:	6803      	ldr	r3, [r0, #0]
 801897e:	4621      	mov	r1, r4
 8018980:	689b      	ldr	r3, [r3, #8]
 8018982:	4798      	blx	r3
 8018984:	4b07      	ldr	r3, [pc, #28]	; (80189a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8018986:	4621      	mov	r1, r4
 8018988:	6818      	ldr	r0, [r3, #0]
 801898a:	6803      	ldr	r3, [r0, #0]
 801898c:	699b      	ldr	r3, [r3, #24]
 801898e:	4798      	blx	r3
 8018990:	e7eb      	b.n	801896a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8018992:	bf00      	nop
 8018994:	20056530 	.word	0x20056530
 8018998:	20056532 	.word	0x20056532
 801899c:	20056598 	.word	0x20056598
 80189a0:	20056594 	.word	0x20056594
 80189a4:	2005653c 	.word	0x2005653c

080189a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80189a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189ac:	4604      	mov	r4, r0
 80189ae:	b09b      	sub	sp, #108	; 0x6c
 80189b0:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80189b4:	b129      	cbz	r1, 80189c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80189b6:	2300      	movs	r3, #0
 80189b8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80189bc:	b01b      	add	sp, #108	; 0x6c
 80189be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c2:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80189c6:	4630      	mov	r0, r6
 80189c8:	f7fb fddb 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189cc:	4605      	mov	r5, r0
 80189ce:	b940      	cbnz	r0, 80189e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 80189d0:	4620      	mov	r0, r4
 80189d2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80189d6:	f7ff fc8d 	bl	80182f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80189da:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80189de:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80189e2:	4ba6      	ldr	r3, [pc, #664]	; (8018c7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	b33b      	cbz	r3, 8018a38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80189e8:	4da5      	ldr	r5, [pc, #660]	; (8018c80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80189ea:	4628      	mov	r0, r5
 80189ec:	f7fb fdc9 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189f0:	4606      	mov	r6, r0
 80189f2:	bb08      	cbnz	r0, 8018a38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80189f4:	4628      	mov	r0, r5
 80189f6:	f7ff fa1d 	bl	8017e34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80189fa:	6829      	ldr	r1, [r5, #0]
 80189fc:	686a      	ldr	r2, [r5, #4]
 80189fe:	4620      	mov	r0, r4
 8018a00:	f7ff fc78 	bl	80182f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018a04:	802e      	strh	r6, [r5, #0]
 8018a06:	806e      	strh	r6, [r5, #2]
 8018a08:	80ae      	strh	r6, [r5, #4]
 8018a0a:	80ee      	strh	r6, [r5, #6]
 8018a0c:	4f9d      	ldr	r7, [pc, #628]	; (8018c84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8018a0e:	a809      	add	r0, sp, #36	; 0x24
 8018a10:	f7ff fbe3 	bl	80181da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018a14:	883d      	ldrh	r5, [r7, #0]
 8018a16:	462e      	mov	r6, r5
 8018a18:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018a1c:	42b3      	cmp	r3, r6
 8018a1e:	d910      	bls.n	8018a42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8018a20:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018a24:	3601      	adds	r6, #1
 8018a26:	a809      	add	r0, sp, #36	; 0x24
 8018a28:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8018a2c:	b2b6      	uxth	r6, r6
 8018a2e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8018a32:	f7ff fc3d 	bl	80182b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018a36:	e7ef      	b.n	8018a18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018a38:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d1e5      	bne.n	8018a0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8018a40:	e7bc      	b.n	80189bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018a42:	462e      	mov	r6, r5
 8018a44:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8018a48:	42b3      	cmp	r3, r6
 8018a4a:	d90b      	bls.n	8018a64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8018a4c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018a50:	3601      	adds	r6, #1
 8018a52:	4620      	mov	r0, r4
 8018a54:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8018a58:	b2b6      	uxth	r6, r6
 8018a5a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8018a5e:	f7ff fc49 	bl	80182f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018a62:	e7ef      	b.n	8018a44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8018a64:	4a88      	ldr	r2, [pc, #544]	; (8018c88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8018a66:	6813      	ldr	r3, [r2, #0]
 8018a68:	4690      	mov	r8, r2
 8018a6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018a6e:	2b01      	cmp	r3, #1
 8018a70:	f040 8094 	bne.w	8018b9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8018a74:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8018a78:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8018a7c:	f04f 0900 	mov.w	r9, #0
 8018a80:	33aa      	adds	r3, #170	; 0xaa
 8018a82:	42a8      	cmp	r0, r5
 8018a84:	f103 0308 	add.w	r3, r3, #8
 8018a88:	dd0a      	ble.n	8018aa0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8018a8a:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018a8e:	3501      	adds	r5, #1
 8018a90:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8018a94:	440a      	add	r2, r1
 8018a96:	b212      	sxth	r2, r2
 8018a98:	4591      	cmp	r9, r2
 8018a9a:	bfb8      	it	lt
 8018a9c:	4691      	movlt	r9, r2
 8018a9e:	e7f0      	b.n	8018a82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8018aa0:	4b7a      	ldr	r3, [pc, #488]	; (8018c8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8018aa2:	4e7b      	ldr	r6, [pc, #492]	; (8018c90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8018aa4:	881d      	ldrh	r5, [r3, #0]
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	2d0f      	cmp	r5, #15
 8018aaa:	bf8c      	ite	hi
 8018aac:	08ed      	lsrhi	r5, r5, #3
 8018aae:	2501      	movls	r5, #1
 8018ab0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018ab4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018ab8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8018abc:	f8d8 0000 	ldr.w	r0, [r8]
 8018ac0:	440b      	add	r3, r1
 8018ac2:	6802      	ldr	r2, [r0, #0]
 8018ac4:	b21b      	sxth	r3, r3
 8018ac6:	4599      	cmp	r9, r3
 8018ac8:	dd4b      	ble.n	8018b62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8018aca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8018ace:	4798      	blx	r3
 8018ad0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018ad4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018ad8:	4413      	add	r3, r2
 8018ada:	b21b      	sxth	r3, r3
 8018adc:	195a      	adds	r2, r3, r5
 8018ade:	4290      	cmp	r0, r2
 8018ae0:	da07      	bge.n	8018af2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8018ae2:	4581      	cmp	r9, r0
 8018ae4:	dd05      	ble.n	8018af2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8018ae6:	4298      	cmp	r0, r3
 8018ae8:	da33      	bge.n	8018b52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	dd31      	ble.n	8018b52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8018aee:	4648      	mov	r0, r9
 8018af0:	e004      	b.n	8018afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8018af2:	4298      	cmp	r0, r3
 8018af4:	dbfb      	blt.n	8018aee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8018af6:	4548      	cmp	r0, r9
 8018af8:	bfa8      	it	ge
 8018afa:	4648      	movge	r0, r9
 8018afc:	f9b6 2000 	ldrsh.w	r2, [r6]
 8018b00:	2100      	movs	r1, #0
 8018b02:	1ac0      	subs	r0, r0, r3
 8018b04:	f8b7 a000 	ldrh.w	sl, [r7]
 8018b08:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018b0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018b10:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018b14:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018b18:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018b1c:	4553      	cmp	r3, sl
 8018b1e:	d9c9      	bls.n	8018ab4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8018b20:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8018b24:	ab07      	add	r3, sp, #28
 8018b26:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018b2a:	6851      	ldr	r1, [r2, #4]
 8018b2c:	c303      	stmia	r3!, {r0, r1}
 8018b2e:	a807      	add	r0, sp, #28
 8018b30:	a905      	add	r1, sp, #20
 8018b32:	f7fb fce3 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 8018b36:	a807      	add	r0, sp, #28
 8018b38:	f7fb fd23 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b3c:	b920      	cbnz	r0, 8018b48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8018b3e:	6823      	ldr	r3, [r4, #0]
 8018b40:	a907      	add	r1, sp, #28
 8018b42:	4620      	mov	r0, r4
 8018b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b46:	4798      	blx	r3
 8018b48:	f10a 0a01 	add.w	sl, sl, #1
 8018b4c:	fa1f fa8a 	uxth.w	sl, sl
 8018b50:	e7e2      	b.n	8018b18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8018b52:	f8d8 0000 	ldr.w	r0, [r8]
 8018b56:	2101      	movs	r1, #1
 8018b58:	6803      	ldr	r3, [r0, #0]
 8018b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018b5e:	4798      	blx	r3
 8018b60:	e7a8      	b.n	8018ab4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8018b62:	6a13      	ldr	r3, [r2, #32]
 8018b64:	4798      	blx	r3
 8018b66:	4b4b      	ldr	r3, [pc, #300]	; (8018c94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8018b68:	781b      	ldrb	r3, [r3, #0]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	f43f af26 	beq.w	80189bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018b70:	2300      	movs	r3, #0
 8018b72:	883d      	ldrh	r5, [r7, #0]
 8018b74:	34ea      	adds	r4, #234	; 0xea
 8018b76:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8018b7a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8018b7e:	42ab      	cmp	r3, r5
 8018b80:	f67f af1c 	bls.w	80189bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018b84:	ab1a      	add	r3, sp, #104	; 0x68
 8018b86:	4620      	mov	r0, r4
 8018b88:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018b8c:	3501      	adds	r5, #1
 8018b8e:	3b44      	subs	r3, #68	; 0x44
 8018b90:	b2ad      	uxth	r5, r5
 8018b92:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018b96:	f7ff fb8b 	bl	80182b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018b9a:	e7ee      	b.n	8018b7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8018b9c:	2b02      	cmp	r3, #2
 8018b9e:	f040 813d 	bne.w	8018e1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8018ba2:	4b3d      	ldr	r3, [pc, #244]	; (8018c98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	2b01      	cmp	r3, #1
 8018ba8:	d02c      	beq.n	8018c04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8018baa:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8018bae:	883a      	ldrh	r2, [r7, #0]
 8018bb0:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8018bb4:	3201      	adds	r2, #1
 8018bb6:	b292      	uxth	r2, r2
 8018bb8:	2900      	cmp	r1, #0
 8018bba:	d0d4      	beq.n	8018b66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8018bbc:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8018bc0:	4610      	mov	r0, r2
 8018bc2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8018bc6:	f04f 0a00 	mov.w	sl, #0
 8018bca:	441d      	add	r5, r3
 8018bcc:	b22d      	sxth	r5, r5
 8018bce:	b283      	uxth	r3, r0
 8018bd0:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8018bd4:	4299      	cmp	r1, r3
 8018bd6:	f240 80c3 	bls.w	8018d60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8018bda:	4426      	add	r6, r4
 8018bdc:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8018be0:	4684      	mov	ip, r0
 8018be2:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8018be6:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8018bea:	4573      	cmp	r3, lr
 8018bec:	f340 80a5 	ble.w	8018d3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8018bf0:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8018bf4:	4475      	add	r5, lr
 8018bf6:	b22d      	sxth	r5, r5
 8018bf8:	429d      	cmp	r5, r3
 8018bfa:	bfa8      	it	ge
 8018bfc:	461d      	movge	r5, r3
 8018bfe:	3001      	adds	r0, #1
 8018c00:	46e2      	mov	sl, ip
 8018c02:	e7e4      	b.n	8018bce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8018c04:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8018c08:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8018c0c:	f1bb 0f00 	cmp.w	fp, #0
 8018c10:	d0a9      	beq.n	8018b66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8018c12:	883b      	ldrh	r3, [r7, #0]
 8018c14:	2600      	movs	r6, #0
 8018c16:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8018c1a:	3301      	adds	r3, #1
 8018c1c:	b29b      	uxth	r3, r3
 8018c1e:	b299      	uxth	r1, r3
 8018c20:	00f5      	lsls	r5, r6, #3
 8018c22:	458b      	cmp	fp, r1
 8018c24:	d93a      	bls.n	8018c9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8018c26:	4425      	add	r5, r4
 8018c28:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018c2c:	469c      	mov	ip, r3
 8018c2e:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8018c32:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8018c36:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8018c3a:	4408      	add	r0, r1
 8018c3c:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8018c40:	4471      	add	r1, lr
 8018c42:	b200      	sxth	r0, r0
 8018c44:	b209      	sxth	r1, r1
 8018c46:	4288      	cmp	r0, r1
 8018c48:	da06      	bge.n	8018c58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8018c4a:	4586      	cmp	lr, r0
 8018c4c:	4672      	mov	r2, lr
 8018c4e:	bfb8      	it	lt
 8018c50:	4602      	movlt	r2, r0
 8018c52:	3301      	adds	r3, #1
 8018c54:	4666      	mov	r6, ip
 8018c56:	e7e2      	b.n	8018c1e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8018c58:	d10b      	bne.n	8018c72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8018c5a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8018c5e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8018c62:	458c      	cmp	ip, r1
 8018c64:	bfb4      	ite	lt
 8018c66:	469c      	movlt	ip, r3
 8018c68:	46b4      	movge	ip, r6
 8018c6a:	4572      	cmp	r2, lr
 8018c6c:	bfb8      	it	lt
 8018c6e:	4672      	movlt	r2, lr
 8018c70:	e7ef      	b.n	8018c52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8018c72:	428a      	cmp	r2, r1
 8018c74:	46b4      	mov	ip, r6
 8018c76:	bfb8      	it	lt
 8018c78:	460a      	movlt	r2, r1
 8018c7a:	e7ea      	b.n	8018c52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8018c7c:	20056594 	.word	0x20056594
 8018c80:	200565a0 	.word	0x200565a0
 8018c84:	2000001c 	.word	0x2000001c
 8018c88:	2005653c 	.word	0x2005653c
 8018c8c:	20056532 	.word	0x20056532
 8018c90:	20056530 	.word	0x20056530
 8018c94:	2005653a 	.word	0x2005653a
 8018c98:	20056534 	.word	0x20056534
 8018c9c:	1961      	adds	r1, r4, r5
 8018c9e:	ab07      	add	r3, sp, #28
 8018ca0:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8018ca4:	6849      	ldr	r1, [r1, #4]
 8018ca6:	c303      	stmia	r3!, {r0, r1}
 8018ca8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018cac:	a807      	add	r0, sp, #28
 8018cae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018cb2:	2b13      	cmp	r3, #19
 8018cb4:	440b      	add	r3, r1
 8018cb6:	bfd8      	it	le
 8018cb8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018cbc:	1a9b      	subs	r3, r3, r2
 8018cbe:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018cc2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018cc6:	f7ff f90f 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018cca:	a807      	add	r0, sp, #28
 8018ccc:	f7fb fc59 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018cd0:	2800      	cmp	r0, #0
 8018cd2:	d199      	bne.n	8018c08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8018cd4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018cd8:	4425      	add	r5, r4
 8018cda:	f8d8 0000 	ldr.w	r0, [r8]
 8018cde:	f1bc 0f14 	cmp.w	ip, #20
 8018ce2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018ce6:	f8d0 e000 	ldr.w	lr, [r0]
 8018cea:	bfa8      	it	ge
 8018cec:	f04f 0c14 	movge.w	ip, #20
 8018cf0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018cf4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018cf8:	fa1f fc8c 	uxth.w	ip, ip
 8018cfc:	f8cd c000 	str.w	ip, [sp]
 8018d00:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 8018d04:	47d0      	blx	sl
 8018d06:	4682      	mov	sl, r0
 8018d08:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018d0c:	a807      	add	r0, sp, #28
 8018d0e:	f7ff f891 	bl	8017e34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018d12:	6823      	ldr	r3, [r4, #0]
 8018d14:	4620      	mov	r0, r4
 8018d16:	a907      	add	r1, sp, #28
 8018d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d1a:	4798      	blx	r3
 8018d1c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8018d20:	eba0 000a 	sub.w	r0, r0, sl
 8018d24:	b200      	sxth	r0, r0
 8018d26:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8018d2a:	2800      	cmp	r0, #0
 8018d2c:	f47f af6c 	bne.w	8018c08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8018d30:	b2b1      	uxth	r1, r6
 8018d32:	4648      	mov	r0, r9
 8018d34:	f7ff faa6 	bl	8018284 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018d38:	e766      	b.n	8018c08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8018d3a:	d10c      	bne.n	8018d56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8018d3c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8018d40:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8018d44:	45b4      	cmp	ip, r6
 8018d46:	bfb4      	ite	lt
 8018d48:	4684      	movlt	ip, r0
 8018d4a:	46d4      	movge	ip, sl
 8018d4c:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8018d50:	4433      	add	r3, r6
 8018d52:	b21b      	sxth	r3, r3
 8018d54:	e750      	b.n	8018bf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8018d56:	4575      	cmp	r5, lr
 8018d58:	46d4      	mov	ip, sl
 8018d5a:	bfa8      	it	ge
 8018d5c:	4675      	movge	r5, lr
 8018d5e:	e74e      	b.n	8018bfe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8018d60:	eb0b 0006 	add.w	r0, fp, r6
 8018d64:	4426      	add	r6, r4
 8018d66:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8018d6a:	f1b9 0f13 	cmp.w	r9, #19
 8018d6e:	bfdc      	itt	le
 8018d70:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8018d74:	444d      	addle	r5, r9
 8018d76:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8018d7a:	bfd8      	it	le
 8018d7c:	b22d      	sxthle	r5, r5
 8018d7e:	f7fb fc00 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d82:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018d86:	2800      	cmp	r0, #0
 8018d88:	f47f af16 	bne.w	8018bb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8018d8c:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8018d90:	fa1f f989 	uxth.w	r9, r9
 8018d94:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018d98:	eba5 050c 	sub.w	r5, r5, ip
 8018d9c:	fa1f f28c 	uxth.w	r2, ip
 8018da0:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8018da4:	eb02 0009 	add.w	r0, r2, r9
 8018da8:	2d14      	cmp	r5, #20
 8018daa:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8018dae:	bfa8      	it	ge
 8018db0:	2514      	movge	r5, #20
 8018db2:	b200      	sxth	r0, r0
 8018db4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018db8:	b289      	uxth	r1, r1
 8018dba:	fa1f fe85 	uxth.w	lr, r5
 8018dbe:	eba0 000c 	sub.w	r0, r0, ip
 8018dc2:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018dc6:	4586      	cmp	lr, r0
 8018dc8:	f8d8 0000 	ldr.w	r0, [r8]
 8018dcc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018dd0:	b29b      	uxth	r3, r3
 8018dd2:	bfb8      	it	lt
 8018dd4:	46f1      	movlt	r9, lr
 8018dd6:	6805      	ldr	r5, [r0, #0]
 8018dd8:	f8cd 9000 	str.w	r9, [sp]
 8018ddc:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 8018de0:	47a8      	blx	r5
 8018de2:	6823      	ldr	r3, [r4, #0]
 8018de4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018de8:	a907      	add	r1, sp, #28
 8018dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018dec:	4620      	mov	r0, r4
 8018dee:	4798      	blx	r3
 8018df0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018df4:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8018df8:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8018dfc:	1a5b      	subs	r3, r3, r1
 8018dfe:	440a      	add	r2, r1
 8018e00:	b21b      	sxth	r3, r3
 8018e02:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8018e06:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	f47f aecf 	bne.w	8018bae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8018e10:	fa1f f18a 	uxth.w	r1, sl
 8018e14:	4658      	mov	r0, fp
 8018e16:	f7ff fa35 	bl	8018284 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018e1a:	e6c8      	b.n	8018bae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8018e1c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018e20:	42ab      	cmp	r3, r5
 8018e22:	f67f aea0 	bls.w	8018b66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8018e26:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018e2a:	ab07      	add	r3, sp, #28
 8018e2c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018e30:	6851      	ldr	r1, [r2, #4]
 8018e32:	c303      	stmia	r3!, {r0, r1}
 8018e34:	a807      	add	r0, sp, #28
 8018e36:	f7fb fba4 	bl	8014582 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018e3a:	b920      	cbnz	r0, 8018e46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8018e3c:	6823      	ldr	r3, [r4, #0]
 8018e3e:	a907      	add	r1, sp, #28
 8018e40:	4620      	mov	r0, r4
 8018e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e44:	4798      	blx	r3
 8018e46:	3501      	adds	r5, #1
 8018e48:	b2ad      	uxth	r5, r5
 8018e4a:	e7e7      	b.n	8018e1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08018e4c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018e4c:	4b03      	ldr	r3, [pc, #12]	; (8018e5c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018e4e:	2200      	movs	r2, #0
 8018e50:	801a      	strh	r2, [r3, #0]
 8018e52:	805a      	strh	r2, [r3, #2]
 8018e54:	809a      	strh	r2, [r3, #4]
 8018e56:	80da      	strh	r2, [r3, #6]
 8018e58:	4770      	bx	lr
 8018e5a:	bf00      	nop
 8018e5c:	200565a0 	.word	0x200565a0

08018e60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e64:	b09b      	sub	sp, #108	; 0x6c
 8018e66:	4606      	mov	r6, r0
 8018e68:	4614      	mov	r4, r2
 8018e6a:	468a      	mov	sl, r1
 8018e6c:	a803      	add	r0, sp, #12
 8018e6e:	461d      	mov	r5, r3
 8018e70:	f000 fe85 	bl	8019b7e <_ZN8touchgfx12TextProviderC1Ev>
 8018e74:	6833      	ldr	r3, [r6, #0]
 8018e76:	4630      	mov	r0, r6
 8018e78:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e7e:	4798      	blx	r3
 8018e80:	6833      	ldr	r3, [r6, #0]
 8018e82:	4607      	mov	r7, r0
 8018e84:	4630      	mov	r0, r6
 8018e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e88:	4798      	blx	r3
 8018e8a:	462a      	mov	r2, r5
 8018e8c:	2500      	movs	r5, #0
 8018e8e:	4621      	mov	r1, r4
 8018e90:	9000      	str	r0, [sp, #0]
 8018e92:	463b      	mov	r3, r7
 8018e94:	462c      	mov	r4, r5
 8018e96:	46a9      	mov	r9, r5
 8018e98:	46a8      	mov	r8, r5
 8018e9a:	a803      	add	r0, sp, #12
 8018e9c:	f000 febc 	bl	8019c18 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	9302      	str	r3, [sp, #8]
 8018ea4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018ea8:	429c      	cmp	r4, r3
 8018eaa:	d002      	beq.n	8018eb2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018eac:	455c      	cmp	r4, fp
 8018eae:	bf18      	it	ne
 8018eb0:	4625      	movne	r5, r4
 8018eb2:	ab02      	add	r3, sp, #8
 8018eb4:	4632      	mov	r2, r6
 8018eb6:	4651      	mov	r1, sl
 8018eb8:	a803      	add	r0, sp, #12
 8018eba:	f001 f9a9 	bl	801a210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018ebe:	4604      	mov	r4, r0
 8018ec0:	b108      	cbz	r0, 8018ec6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018ec2:	280a      	cmp	r0, #10
 8018ec4:	d10a      	bne.n	8018edc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018ec6:	45c1      	cmp	r9, r8
 8018ec8:	bf38      	it	cc
 8018eca:	46c1      	movcc	r9, r8
 8018ecc:	f04f 0800 	mov.w	r8, #0
 8018ed0:	2c00      	cmp	r4, #0
 8018ed2:	d1e5      	bne.n	8018ea0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018ed4:	4648      	mov	r0, r9
 8018ed6:	b01b      	add	sp, #108	; 0x6c
 8018ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018edc:	9a02      	ldr	r2, [sp, #8]
 8018ede:	2a00      	cmp	r2, #0
 8018ee0:	d0de      	beq.n	8018ea0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018ee2:	7b57      	ldrb	r7, [r2, #13]
 8018ee4:	4629      	mov	r1, r5
 8018ee6:	6833      	ldr	r3, [r6, #0]
 8018ee8:	007f      	lsls	r7, r7, #1
 8018eea:	8894      	ldrh	r4, [r2, #4]
 8018eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018eee:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018ef2:	7a97      	ldrb	r7, [r2, #10]
 8018ef4:	4307      	orrs	r7, r0
 8018ef6:	4630      	mov	r0, r6
 8018ef8:	4798      	blx	r3
 8018efa:	4438      	add	r0, r7
 8018efc:	4480      	add	r8, r0
 8018efe:	fa1f f888 	uxth.w	r8, r8
 8018f02:	e7e5      	b.n	8018ed0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018f04 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018f04:	b508      	push	{r3, lr}
 8018f06:	6803      	ldr	r3, [r0, #0]
 8018f08:	68db      	ldr	r3, [r3, #12]
 8018f0a:	4798      	blx	r3
 8018f0c:	b128      	cbz	r0, 8018f1a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018f0e:	7b43      	ldrb	r3, [r0, #13]
 8018f10:	7a80      	ldrb	r0, [r0, #10]
 8018f12:	005b      	lsls	r3, r3, #1
 8018f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f18:	4318      	orrs	r0, r3
 8018f1a:	bd08      	pop	{r3, pc}

08018f1c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018f1c:	b40e      	push	{r1, r2, r3}
 8018f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f20:	b09c      	sub	sp, #112	; 0x70
 8018f22:	4605      	mov	r5, r0
 8018f24:	ab21      	add	r3, sp, #132	; 0x84
 8018f26:	a805      	add	r0, sp, #20
 8018f28:	f853 4b04 	ldr.w	r4, [r3], #4
 8018f2c:	9303      	str	r3, [sp, #12]
 8018f2e:	f000 fe26 	bl	8019b7e <_ZN8touchgfx12TextProviderC1Ev>
 8018f32:	682b      	ldr	r3, [r5, #0]
 8018f34:	4628      	mov	r0, r5
 8018f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f38:	4798      	blx	r3
 8018f3a:	682b      	ldr	r3, [r5, #0]
 8018f3c:	4606      	mov	r6, r0
 8018f3e:	4628      	mov	r0, r5
 8018f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f42:	4798      	blx	r3
 8018f44:	4633      	mov	r3, r6
 8018f46:	4621      	mov	r1, r4
 8018f48:	ae1c      	add	r6, sp, #112	; 0x70
 8018f4a:	2400      	movs	r4, #0
 8018f4c:	9000      	str	r0, [sp, #0]
 8018f4e:	9a03      	ldr	r2, [sp, #12]
 8018f50:	a805      	add	r0, sp, #20
 8018f52:	f000 fe61 	bl	8019c18 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018f56:	f846 4d60 	str.w	r4, [r6, #-96]!
 8018f5a:	462a      	mov	r2, r5
 8018f5c:	4633      	mov	r3, r6
 8018f5e:	4621      	mov	r1, r4
 8018f60:	a805      	add	r0, sp, #20
 8018f62:	f001 f955 	bl	801a210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018f66:	b300      	cbz	r0, 8018faa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018f68:	280a      	cmp	r0, #10
 8018f6a:	d01a      	beq.n	8018fa2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018f6c:	9f04      	ldr	r7, [sp, #16]
 8018f6e:	b1c7      	cbz	r7, 8018fa2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018f70:	7b78      	ldrb	r0, [r7, #13]
 8018f72:	7a3b      	ldrb	r3, [r7, #8]
 8018f74:	00c1      	lsls	r1, r0, #3
 8018f76:	88aa      	ldrh	r2, [r5, #4]
 8018f78:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018f7c:	4319      	orrs	r1, r3
 8018f7e:	0643      	lsls	r3, r0, #25
 8018f80:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018f84:	bf48      	it	mi
 8018f86:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018f8a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018f8e:	bf48      	it	mi
 8018f90:	b219      	sxthmi	r1, r3
 8018f92:	79fb      	ldrb	r3, [r7, #7]
 8018f94:	4303      	orrs	r3, r0
 8018f96:	4413      	add	r3, r2
 8018f98:	1a5b      	subs	r3, r3, r1
 8018f9a:	b29b      	uxth	r3, r3
 8018f9c:	42a3      	cmp	r3, r4
 8018f9e:	bfc8      	it	gt
 8018fa0:	b21c      	sxthgt	r4, r3
 8018fa2:	4633      	mov	r3, r6
 8018fa4:	462a      	mov	r2, r5
 8018fa6:	2100      	movs	r1, #0
 8018fa8:	e7da      	b.n	8018f60 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8018faa:	b2a0      	uxth	r0, r4
 8018fac:	b01c      	add	sp, #112	; 0x70
 8018fae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018fb2:	b003      	add	sp, #12
 8018fb4:	4770      	bx	lr

08018fb6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018fb6:	b40e      	push	{r1, r2, r3}
 8018fb8:	b570      	push	{r4, r5, r6, lr}
 8018fba:	b09b      	sub	sp, #108	; 0x6c
 8018fbc:	4604      	mov	r4, r0
 8018fbe:	ab1f      	add	r3, sp, #124	; 0x7c
 8018fc0:	a803      	add	r0, sp, #12
 8018fc2:	f853 5b04 	ldr.w	r5, [r3], #4
 8018fc6:	9302      	str	r3, [sp, #8]
 8018fc8:	f000 fdd9 	bl	8019b7e <_ZN8touchgfx12TextProviderC1Ev>
 8018fcc:	6823      	ldr	r3, [r4, #0]
 8018fce:	4620      	mov	r0, r4
 8018fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fd2:	4798      	blx	r3
 8018fd4:	6823      	ldr	r3, [r4, #0]
 8018fd6:	4606      	mov	r6, r0
 8018fd8:	4620      	mov	r0, r4
 8018fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018fdc:	2401      	movs	r4, #1
 8018fde:	4798      	blx	r3
 8018fe0:	4633      	mov	r3, r6
 8018fe2:	9000      	str	r0, [sp, #0]
 8018fe4:	4629      	mov	r1, r5
 8018fe6:	9a02      	ldr	r2, [sp, #8]
 8018fe8:	a803      	add	r0, sp, #12
 8018fea:	f000 fe15 	bl	8019c18 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018fee:	a803      	add	r0, sp, #12
 8018ff0:	f001 fa06 	bl	801a400 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018ff4:	b2a3      	uxth	r3, r4
 8018ff6:	b138      	cbz	r0, 8019008 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018ff8:	280a      	cmp	r0, #10
 8018ffa:	a803      	add	r0, sp, #12
 8018ffc:	bf04      	itt	eq
 8018ffe:	3301      	addeq	r3, #1
 8019000:	b21c      	sxtheq	r4, r3
 8019002:	f001 f9fd 	bl	801a400 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019006:	e7f5      	b.n	8018ff4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019008:	4618      	mov	r0, r3
 801900a:	b01b      	add	sp, #108	; 0x6c
 801900c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019010:	b003      	add	sp, #12
 8019012:	4770      	bx	lr

08019014 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019014:	b40e      	push	{r1, r2, r3}
 8019016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019018:	b09c      	sub	sp, #112	; 0x70
 801901a:	4604      	mov	r4, r0
 801901c:	ab21      	add	r3, sp, #132	; 0x84
 801901e:	a805      	add	r0, sp, #20
 8019020:	f853 5b04 	ldr.w	r5, [r3], #4
 8019024:	9303      	str	r3, [sp, #12]
 8019026:	f000 fdaa 	bl	8019b7e <_ZN8touchgfx12TextProviderC1Ev>
 801902a:	6823      	ldr	r3, [r4, #0]
 801902c:	4620      	mov	r0, r4
 801902e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019030:	4798      	blx	r3
 8019032:	6823      	ldr	r3, [r4, #0]
 8019034:	4606      	mov	r6, r0
 8019036:	4620      	mov	r0, r4
 8019038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801903a:	4798      	blx	r3
 801903c:	4633      	mov	r3, r6
 801903e:	4629      	mov	r1, r5
 8019040:	9000      	str	r0, [sp, #0]
 8019042:	9a03      	ldr	r2, [sp, #12]
 8019044:	a805      	add	r0, sp, #20
 8019046:	f000 fde7 	bl	8019c18 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801904a:	ad1c      	add	r5, sp, #112	; 0x70
 801904c:	2100      	movs	r1, #0
 801904e:	26ff      	movs	r6, #255	; 0xff
 8019050:	4622      	mov	r2, r4
 8019052:	a805      	add	r0, sp, #20
 8019054:	f845 1d60 	str.w	r1, [r5, #-96]!
 8019058:	462b      	mov	r3, r5
 801905a:	f001 f8d9 	bl	801a210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801905e:	b1d8      	cbz	r0, 8019098 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8019060:	280a      	cmp	r0, #10
 8019062:	d012      	beq.n	801908a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019064:	9804      	ldr	r0, [sp, #16]
 8019066:	b180      	cbz	r0, 801908a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019068:	7b47      	ldrb	r7, [r0, #13]
 801906a:	7922      	ldrb	r2, [r4, #4]
 801906c:	00fb      	lsls	r3, r7, #3
 801906e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019072:	7a03      	ldrb	r3, [r0, #8]
 8019074:	430b      	orrs	r3, r1
 8019076:	0679      	lsls	r1, r7, #25
 8019078:	bf44      	itt	mi
 801907a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801907e:	b21b      	sxthmi	r3, r3
 8019080:	1ad3      	subs	r3, r2, r3
 8019082:	b2db      	uxtb	r3, r3
 8019084:	429e      	cmp	r6, r3
 8019086:	bf28      	it	cs
 8019088:	461e      	movcs	r6, r3
 801908a:	462b      	mov	r3, r5
 801908c:	4622      	mov	r2, r4
 801908e:	2100      	movs	r1, #0
 8019090:	a805      	add	r0, sp, #20
 8019092:	f001 f8bd 	bl	801a210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019096:	e7e2      	b.n	801905e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8019098:	4630      	mov	r0, r6
 801909a:	b01c      	add	sp, #112	; 0x70
 801909c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80190a0:	b003      	add	sp, #12
 80190a2:	4770      	bx	lr

080190a4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80190a4:	b513      	push	{r0, r1, r4, lr}
 80190a6:	1d01      	adds	r1, r0, #4
 80190a8:	4603      	mov	r3, r0
 80190aa:	466a      	mov	r2, sp
 80190ac:	c903      	ldmia	r1, {r0, r1}
 80190ae:	e882 0003 	stmia.w	r2, {r0, r1}
 80190b2:	2100      	movs	r1, #0
 80190b4:	4618      	mov	r0, r3
 80190b6:	9100      	str	r1, [sp, #0]
 80190b8:	6819      	ldr	r1, [r3, #0]
 80190ba:	690c      	ldr	r4, [r1, #16]
 80190bc:	4611      	mov	r1, r2
 80190be:	47a0      	blx	r4
 80190c0:	b002      	add	sp, #8
 80190c2:	bd10      	pop	{r4, pc}

080190c4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80190c4:	b538      	push	{r3, r4, r5, lr}
 80190c6:	680b      	ldr	r3, [r1, #0]
 80190c8:	460c      	mov	r4, r1
 80190ca:	4605      	mov	r5, r0
 80190cc:	68db      	ldr	r3, [r3, #12]
 80190ce:	4798      	blx	r3
 80190d0:	6823      	ldr	r3, [r4, #0]
 80190d2:	4620      	mov	r0, r4
 80190d4:	4629      	mov	r1, r5
 80190d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190d8:	4798      	blx	r3
 80190da:	4628      	mov	r0, r5
 80190dc:	bd38      	pop	{r3, r4, r5, pc}

080190de <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80190de:	b410      	push	{r4}
 80190e0:	880a      	ldrh	r2, [r1, #0]
 80190e2:	8884      	ldrh	r4, [r0, #4]
 80190e4:	4422      	add	r2, r4
 80190e6:	800a      	strh	r2, [r1, #0]
 80190e8:	884a      	ldrh	r2, [r1, #2]
 80190ea:	88c4      	ldrh	r4, [r0, #6]
 80190ec:	4422      	add	r2, r4
 80190ee:	804a      	strh	r2, [r1, #2]
 80190f0:	6940      	ldr	r0, [r0, #20]
 80190f2:	b120      	cbz	r0, 80190fe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80190f4:	6803      	ldr	r3, [r0, #0]
 80190f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190fc:	4718      	bx	r3
 80190fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019102:	4770      	bx	lr

08019104 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019106:	460b      	mov	r3, r1
 8019108:	b085      	sub	sp, #20
 801910a:	4604      	mov	r4, r0
 801910c:	b901      	cbnz	r1, 8019110 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801910e:	b322      	cbz	r2, 801915a <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 8019110:	1d27      	adds	r7, r4, #4
 8019112:	466e      	mov	r6, sp
 8019114:	88e5      	ldrh	r5, [r4, #6]
 8019116:	e897 0003 	ldmia.w	r7, {r0, r1}
 801911a:	442a      	add	r2, r5
 801911c:	e886 0003 	stmia.w	r6, {r0, r1}
 8019120:	88a1      	ldrh	r1, [r4, #4]
 8019122:	4620      	mov	r0, r4
 8019124:	b215      	sxth	r5, r2
 8019126:	4419      	add	r1, r3
 8019128:	6823      	ldr	r3, [r4, #0]
 801912a:	b209      	sxth	r1, r1
 801912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801912e:	4798      	blx	r3
 8019130:	6823      	ldr	r3, [r4, #0]
 8019132:	4629      	mov	r1, r5
 8019134:	4620      	mov	r0, r4
 8019136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019138:	ad02      	add	r5, sp, #8
 801913a:	4798      	blx	r3
 801913c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019140:	e885 0003 	stmia.w	r5, {r0, r1}
 8019144:	6960      	ldr	r0, [r4, #20]
 8019146:	b150      	cbz	r0, 801915e <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8019148:	6803      	ldr	r3, [r0, #0]
 801914a:	4631      	mov	r1, r6
 801914c:	691b      	ldr	r3, [r3, #16]
 801914e:	4798      	blx	r3
 8019150:	6960      	ldr	r0, [r4, #20]
 8019152:	6803      	ldr	r3, [r0, #0]
 8019154:	691b      	ldr	r3, [r3, #16]
 8019156:	4629      	mov	r1, r5
 8019158:	4798      	blx	r3
 801915a:	b005      	add	sp, #20
 801915c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801915e:	f7ff f82b 	bl	80181b8 <_ZN8touchgfx11Application11getInstanceEv>
 8019162:	6803      	ldr	r3, [r0, #0]
 8019164:	4631      	mov	r1, r6
 8019166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019168:	4798      	blx	r3
 801916a:	f7ff f825 	bl	80181b8 <_ZN8touchgfx11Application11getInstanceEv>
 801916e:	6803      	ldr	r3, [r0, #0]
 8019170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019172:	e7f0      	b.n	8019156 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08019174 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019176:	8882      	ldrh	r2, [r0, #4]
 8019178:	4605      	mov	r5, r0
 801917a:	880b      	ldrh	r3, [r1, #0]
 801917c:	460c      	mov	r4, r1
 801917e:	4413      	add	r3, r2
 8019180:	800b      	strh	r3, [r1, #0]
 8019182:	884b      	ldrh	r3, [r1, #2]
 8019184:	88c2      	ldrh	r2, [r0, #6]
 8019186:	4413      	add	r3, r2
 8019188:	4602      	mov	r2, r0
 801918a:	804b      	strh	r3, [r1, #2]
 801918c:	466b      	mov	r3, sp
 801918e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019192:	6851      	ldr	r1, [r2, #4]
 8019194:	c303      	stmia	r3!, {r0, r1}
 8019196:	4621      	mov	r1, r4
 8019198:	4668      	mov	r0, sp
 801919a:	f7fb f9af 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 801919e:	466b      	mov	r3, sp
 80191a0:	cb03      	ldmia	r3!, {r0, r1}
 80191a2:	6020      	str	r0, [r4, #0]
 80191a4:	6061      	str	r1, [r4, #4]
 80191a6:	6968      	ldr	r0, [r5, #20]
 80191a8:	b128      	cbz	r0, 80191b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 80191aa:	6803      	ldr	r3, [r0, #0]
 80191ac:	691b      	ldr	r3, [r3, #16]
 80191ae:	4621      	mov	r1, r4
 80191b0:	4798      	blx	r3
 80191b2:	b003      	add	sp, #12
 80191b4:	bd30      	pop	{r4, r5, pc}
 80191b6:	f7fe ffff 	bl	80181b8 <_ZN8touchgfx11Application11getInstanceEv>
 80191ba:	6803      	ldr	r3, [r0, #0]
 80191bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191be:	e7f6      	b.n	80191ae <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080191c0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80191c0:	b570      	push	{r4, r5, r6, lr}
 80191c2:	8882      	ldrh	r2, [r0, #4]
 80191c4:	460c      	mov	r4, r1
 80191c6:	880b      	ldrh	r3, [r1, #0]
 80191c8:	4605      	mov	r5, r0
 80191ca:	4413      	add	r3, r2
 80191cc:	800b      	strh	r3, [r1, #0]
 80191ce:	884b      	ldrh	r3, [r1, #2]
 80191d0:	88c2      	ldrh	r2, [r0, #6]
 80191d2:	4413      	add	r3, r2
 80191d4:	804b      	strh	r3, [r1, #2]
 80191d6:	1d01      	adds	r1, r0, #4
 80191d8:	4620      	mov	r0, r4
 80191da:	f7fb f98f 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 80191de:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	dd0b      	ble.n	80191fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80191e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	dd07      	ble.n	80191fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80191ee:	6968      	ldr	r0, [r5, #20]
 80191f0:	b128      	cbz	r0, 80191fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80191f2:	6803      	ldr	r3, [r0, #0]
 80191f4:	4621      	mov	r1, r4
 80191f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191fc:	4718      	bx	r3
 80191fe:	bd70      	pop	{r4, r5, r6, pc}

08019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019200:	b510      	push	{r4, lr}
 8019202:	2300      	movs	r3, #0
 8019204:	4604      	mov	r4, r0
 8019206:	4608      	mov	r0, r1
 8019208:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801920c:	8023      	strh	r3, [r4, #0]
 801920e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019212:	8063      	strh	r3, [r4, #2]
 8019214:	6803      	ldr	r3, [r0, #0]
 8019216:	80a1      	strh	r1, [r4, #4]
 8019218:	4621      	mov	r1, r4
 801921a:	80e2      	strh	r2, [r4, #6]
 801921c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801921e:	4798      	blx	r3
 8019220:	4620      	mov	r0, r4
 8019222:	bd10      	pop	{r4, pc}

08019224 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019224:	b530      	push	{r4, r5, lr}
 8019226:	8083      	strh	r3, [r0, #4]
 8019228:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801922c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019230:	7183      	strb	r3, [r0, #6]
 8019232:	79c3      	ldrb	r3, [r0, #7]
 8019234:	6101      	str	r1, [r0, #16]
 8019236:	f365 0306 	bfi	r3, r5, #0, #7
 801923a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801923e:	8282      	strh	r2, [r0, #20]
 8019240:	f365 13c7 	bfi	r3, r5, #7, #1
 8019244:	71c3      	strb	r3, [r0, #7]
 8019246:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801924a:	7203      	strb	r3, [r0, #8]
 801924c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019250:	7243      	strb	r3, [r0, #9]
 8019252:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019256:	8143      	strh	r3, [r0, #10]
 8019258:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801925c:	8183      	strh	r3, [r0, #12]
 801925e:	4b01      	ldr	r3, [pc, #4]	; (8019264 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019260:	6003      	str	r3, [r0, #0]
 8019262:	bd30      	pop	{r4, r5, pc}
 8019264:	080294fc 	.word	0x080294fc

08019268 <_ZNK8touchgfx9ConstFont4findEt>:
 8019268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801926a:	6904      	ldr	r4, [r0, #16]
 801926c:	b3bc      	cbz	r4, 80192de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801926e:	88a3      	ldrh	r3, [r4, #4]
 8019270:	8a82      	ldrh	r2, [r0, #20]
 8019272:	1acb      	subs	r3, r1, r3
 8019274:	f102 32ff 	add.w	r2, r2, #4294967295
 8019278:	d431      	bmi.n	80192de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801927a:	4293      	cmp	r3, r2
 801927c:	dd0c      	ble.n	8019298 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801927e:	230e      	movs	r3, #14
 8019280:	fb03 4302 	mla	r3, r3, r2, r4
 8019284:	889b      	ldrh	r3, [r3, #4]
 8019286:	1a5b      	subs	r3, r3, r1
 8019288:	1ad3      	subs	r3, r2, r3
 801928a:	429a      	cmp	r2, r3
 801928c:	db27      	blt.n	80192de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801928e:	2b00      	cmp	r3, #0
 8019290:	bfbc      	itt	lt
 8019292:	2302      	movlt	r3, #2
 8019294:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019298:	2500      	movs	r5, #0
 801929a:	260e      	movs	r6, #14
 801929c:	4295      	cmp	r5, r2
 801929e:	dc1e      	bgt.n	80192de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80192a0:	fb06 4003 	mla	r0, r6, r3, r4
 80192a4:	8887      	ldrh	r7, [r0, #4]
 80192a6:	42b9      	cmp	r1, r7
 80192a8:	d01a      	beq.n	80192e0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80192aa:	d20d      	bcs.n	80192c8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80192ac:	1e5a      	subs	r2, r3, #1
 80192ae:	4295      	cmp	r5, r2
 80192b0:	dc15      	bgt.n	80192de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80192b2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80192b6:	1a5b      	subs	r3, r3, r1
 80192b8:	1ad3      	subs	r3, r2, r3
 80192ba:	429a      	cmp	r2, r3
 80192bc:	db0f      	blt.n	80192de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80192be:	429d      	cmp	r5, r3
 80192c0:	ddec      	ble.n	801929c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80192c2:	1953      	adds	r3, r2, r5
 80192c4:	105b      	asrs	r3, r3, #1
 80192c6:	e7e9      	b.n	801929c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80192c8:	1c5d      	adds	r5, r3, #1
 80192ca:	42aa      	cmp	r2, r5
 80192cc:	db07      	blt.n	80192de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80192ce:	8a43      	ldrh	r3, [r0, #18]
 80192d0:	1acb      	subs	r3, r1, r3
 80192d2:	442b      	add	r3, r5
 80192d4:	429d      	cmp	r5, r3
 80192d6:	dc02      	bgt.n	80192de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80192d8:	429a      	cmp	r2, r3
 80192da:	dadf      	bge.n	801929c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80192dc:	e7f1      	b.n	80192c2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80192de:	2000      	movs	r0, #0
 80192e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080192e2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80192e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192e4:	4604      	mov	r4, r0
 80192e6:	4617      	mov	r7, r2
 80192e8:	461e      	mov	r6, r3
 80192ea:	b911      	cbnz	r1, 80192f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80192ec:	2500      	movs	r5, #0
 80192ee:	4628      	mov	r0, r5
 80192f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192f2:	290a      	cmp	r1, #10
 80192f4:	d0fa      	beq.n	80192ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80192f6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80192fa:	4291      	cmp	r1, r2
 80192fc:	d0f6      	beq.n	80192ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80192fe:	f242 020b 	movw	r2, #8203	; 0x200b
 8019302:	4291      	cmp	r1, r2
 8019304:	d0f2      	beq.n	80192ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019306:	f7ff ffaf 	bl	8019268 <_ZNK8touchgfx9ConstFont4findEt>
 801930a:	4605      	mov	r5, r0
 801930c:	b950      	cbnz	r0, 8019324 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801930e:	6823      	ldr	r3, [r4, #0]
 8019310:	4620      	mov	r0, r4
 8019312:	691b      	ldr	r3, [r3, #16]
 8019314:	4798      	blx	r3
 8019316:	4601      	mov	r1, r0
 8019318:	4620      	mov	r0, r4
 801931a:	f7ff ffa5 	bl	8019268 <_ZNK8touchgfx9ConstFont4findEt>
 801931e:	4605      	mov	r5, r0
 8019320:	2800      	cmp	r0, #0
 8019322:	d0e3      	beq.n	80192ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019324:	6823      	ldr	r3, [r4, #0]
 8019326:	4629      	mov	r1, r5
 8019328:	4620      	mov	r0, r4
 801932a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801932c:	4798      	blx	r3
 801932e:	6038      	str	r0, [r7, #0]
 8019330:	6823      	ldr	r3, [r4, #0]
 8019332:	4620      	mov	r0, r4
 8019334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019336:	4798      	blx	r3
 8019338:	7030      	strb	r0, [r6, #0]
 801933a:	e7d8      	b.n	80192ee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801933c <_ZN8touchgfx6memsetEPvhm>:
 801933c:	4402      	add	r2, r0
 801933e:	4290      	cmp	r0, r2
 8019340:	d002      	beq.n	8019348 <_ZN8touchgfx6memsetEPvhm+0xc>
 8019342:	f800 1b01 	strb.w	r1, [r0], #1
 8019346:	e7fa      	b.n	801933e <_ZN8touchgfx6memsetEPvhm+0x2>
 8019348:	4770      	bx	lr

0801934a <_ZN8touchgfx4clzuEm>:
 801934a:	4603      	mov	r3, r0
 801934c:	b1c8      	cbz	r0, 8019382 <_ZN8touchgfx4clzuEm+0x38>
 801934e:	0c02      	lsrs	r2, r0, #16
 8019350:	0412      	lsls	r2, r2, #16
 8019352:	b9a2      	cbnz	r2, 801937e <_ZN8touchgfx4clzuEm+0x34>
 8019354:	0403      	lsls	r3, r0, #16
 8019356:	2010      	movs	r0, #16
 8019358:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801935c:	bf04      	itt	eq
 801935e:	021b      	lsleq	r3, r3, #8
 8019360:	3008      	addeq	r0, #8
 8019362:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019366:	bf04      	itt	eq
 8019368:	011b      	lsleq	r3, r3, #4
 801936a:	3004      	addeq	r0, #4
 801936c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019370:	bf04      	itt	eq
 8019372:	009b      	lsleq	r3, r3, #2
 8019374:	3002      	addeq	r0, #2
 8019376:	2b00      	cmp	r3, #0
 8019378:	db04      	blt.n	8019384 <_ZN8touchgfx4clzuEm+0x3a>
 801937a:	3001      	adds	r0, #1
 801937c:	4770      	bx	lr
 801937e:	2000      	movs	r0, #0
 8019380:	e7ea      	b.n	8019358 <_ZN8touchgfx4clzuEm+0xe>
 8019382:	2020      	movs	r0, #32
 8019384:	4770      	bx	lr

08019386 <_ZN8touchgfx7muldivuEmmmRm>:
 8019386:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801938a:	4680      	mov	r8, r0
 801938c:	460f      	mov	r7, r1
 801938e:	4615      	mov	r5, r2
 8019390:	461e      	mov	r6, r3
 8019392:	f7ff ffda 	bl	801934a <_ZN8touchgfx4clzuEm>
 8019396:	b998      	cbnz	r0, 80193c0 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8019398:	4608      	mov	r0, r1
 801939a:	f7ff ffd6 	bl	801934a <_ZN8touchgfx4clzuEm>
 801939e:	2800      	cmp	r0, #0
 80193a0:	dd08      	ble.n	80193b4 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 80193a2:	4633      	mov	r3, r6
 80193a4:	462a      	mov	r2, r5
 80193a6:	4641      	mov	r1, r8
 80193a8:	4638      	mov	r0, r7
 80193aa:	f7ff ffec 	bl	8019386 <_ZN8touchgfx7muldivuEmmmRm>
 80193ae:	b003      	add	sp, #12
 80193b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b4:	f04f 33ff 	mov.w	r3, #4294967295
 80193b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80193bc:	6033      	str	r3, [r6, #0]
 80193be:	e7f6      	b.n	80193ae <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80193c0:	fa31 f900 	lsrs.w	r9, r1, r0
 80193c4:	fb01 f308 	mul.w	r3, r1, r8
 80193c8:	d105      	bne.n	80193d6 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 80193ca:	fbb3 f0f5 	udiv	r0, r3, r5
 80193ce:	fb05 3510 	mls	r5, r5, r0, r3
 80193d2:	6035      	str	r5, [r6, #0]
 80193d4:	e7eb      	b.n	80193ae <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80193d6:	2301      	movs	r3, #1
 80193d8:	fa08 fb00 	lsl.w	fp, r8, r0
 80193dc:	462a      	mov	r2, r5
 80193de:	4641      	mov	r1, r8
 80193e0:	fa03 f000 	lsl.w	r0, r3, r0
 80193e4:	4633      	mov	r3, r6
 80193e6:	fbbb faf5 	udiv	sl, fp, r5
 80193ea:	3801      	subs	r0, #1
 80193ec:	fb09 f40a 	mul.w	r4, r9, sl
 80193f0:	4038      	ands	r0, r7
 80193f2:	f7ff ffc8 	bl	8019386 <_ZN8touchgfx7muldivuEmmmRm>
 80193f6:	462a      	mov	r2, r5
 80193f8:	4607      	mov	r7, r0
 80193fa:	ab01      	add	r3, sp, #4
 80193fc:	fb05 b11a 	mls	r1, r5, sl, fp
 8019400:	4648      	mov	r0, r9
 8019402:	f7ff ffc0 	bl	8019386 <_ZN8touchgfx7muldivuEmmmRm>
 8019406:	9b01      	ldr	r3, [sp, #4]
 8019408:	6832      	ldr	r2, [r6, #0]
 801940a:	441a      	add	r2, r3
 801940c:	fbb2 f3f5 	udiv	r3, r2, r5
 8019410:	441c      	add	r4, r3
 8019412:	fb05 2513 	mls	r5, r5, r3, r2
 8019416:	443c      	add	r4, r7
 8019418:	4420      	add	r0, r4
 801941a:	e7da      	b.n	80193d2 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801941c <_ZN8touchgfx6muldivElllRl>:
 801941c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801941e:	2800      	cmp	r0, #0
 8019420:	461e      	mov	r6, r3
 8019422:	bfba      	itte	lt
 8019424:	4240      	neglt	r0, r0
 8019426:	f04f 34ff 	movlt.w	r4, #4294967295
 801942a:	2401      	movge	r4, #1
 801942c:	2900      	cmp	r1, #0
 801942e:	bfbc      	itt	lt
 8019430:	4249      	neglt	r1, r1
 8019432:	4264      	neglt	r4, r4
 8019434:	2a00      	cmp	r2, #0
 8019436:	bfb6      	itet	lt
 8019438:	4265      	neglt	r5, r4
 801943a:	4625      	movge	r5, r4
 801943c:	4252      	neglt	r2, r2
 801943e:	4288      	cmp	r0, r1
 8019440:	bfc2      	ittt	gt
 8019442:	4603      	movgt	r3, r0
 8019444:	4608      	movgt	r0, r1
 8019446:	4619      	movgt	r1, r3
 8019448:	ab01      	add	r3, sp, #4
 801944a:	f7ff ff9c 	bl	8019386 <_ZN8touchgfx7muldivuEmmmRm>
 801944e:	9b01      	ldr	r3, [sp, #4]
 8019450:	4368      	muls	r0, r5
 8019452:	435c      	muls	r4, r3
 8019454:	6034      	str	r4, [r6, #0]
 8019456:	b002      	add	sp, #8
 8019458:	bd70      	pop	{r4, r5, r6, pc}

0801945a <_ZN8touchgfx6muldivElll>:
 801945a:	b513      	push	{r0, r1, r4, lr}
 801945c:	4614      	mov	r4, r2
 801945e:	ab01      	add	r3, sp, #4
 8019460:	f7ff ffdc 	bl	801941c <_ZN8touchgfx6muldivElllRl>
 8019464:	2800      	cmp	r0, #0
 8019466:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801946a:	9b01      	ldr	r3, [sp, #4]
 801946c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8019470:	db0a      	blt.n	8019488 <_ZN8touchgfx6muldivElll+0x2e>
 8019472:	2b00      	cmp	r3, #0
 8019474:	f102 0201 	add.w	r2, r2, #1
 8019478:	bfb8      	it	lt
 801947a:	425b      	neglt	r3, r3
 801947c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8019480:	db00      	blt.n	8019484 <_ZN8touchgfx6muldivElll+0x2a>
 8019482:	3001      	adds	r0, #1
 8019484:	b002      	add	sp, #8
 8019486:	bd10      	pop	{r4, pc}
 8019488:	2b00      	cmp	r3, #0
 801948a:	bfb8      	it	lt
 801948c:	425b      	neglt	r3, r3
 801948e:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8019492:	bfc8      	it	gt
 8019494:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8019498:	e7f4      	b.n	8019484 <_ZN8touchgfx6muldivElll+0x2a>

0801949a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801949a:	2000      	movs	r0, #0
 801949c:	4770      	bx	lr

0801949e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801949e:	2001      	movs	r0, #1
 80194a0:	4770      	bx	lr

080194a2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80194a2:	2002      	movs	r0, #2
 80194a4:	4770      	bx	lr

080194a6 <_ZN8touchgfx12GestureEventD1Ev>:
 80194a6:	4770      	bx	lr

080194a8 <_ZN8touchgfx9DragEventD1Ev>:
 80194a8:	4770      	bx	lr

080194aa <_ZN8touchgfx10ClickEventD1Ev>:
 80194aa:	4770      	bx	lr

080194ac <_ZN8touchgfx10ClickEventD0Ev>:
 80194ac:	b510      	push	{r4, lr}
 80194ae:	4604      	mov	r4, r0
 80194b0:	210c      	movs	r1, #12
 80194b2:	f00b fe50 	bl	8025156 <_ZdlPvj>
 80194b6:	4620      	mov	r0, r4
 80194b8:	bd10      	pop	{r4, pc}

080194ba <_ZN8touchgfx9DragEventD0Ev>:
 80194ba:	b510      	push	{r4, lr}
 80194bc:	4604      	mov	r4, r0
 80194be:	2110      	movs	r1, #16
 80194c0:	f00b fe49 	bl	8025156 <_ZdlPvj>
 80194c4:	4620      	mov	r0, r4
 80194c6:	bd10      	pop	{r4, pc}

080194c8 <_ZN8touchgfx12GestureEventD0Ev>:
 80194c8:	b510      	push	{r4, lr}
 80194ca:	4604      	mov	r4, r0
 80194cc:	210c      	movs	r1, #12
 80194ce:	f00b fe42 	bl	8025156 <_ZdlPvj>
 80194d2:	4620      	mov	r0, r4
 80194d4:	bd10      	pop	{r4, pc}
	...

080194d8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80194d8:	b530      	push	{r4, r5, lr}
 80194da:	460d      	mov	r5, r1
 80194dc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80194de:	b087      	sub	sp, #28
 80194e0:	4604      	mov	r4, r0
 80194e2:	b301      	cbz	r1, 8019526 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80194e4:	a801      	add	r0, sp, #4
 80194e6:	f7ff fe8b 	bl	8019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80194ea:	892a      	ldrh	r2, [r5, #8]
 80194ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80194f0:	7928      	ldrb	r0, [r5, #4]
 80194f2:	1ad2      	subs	r2, r2, r3
 80194f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80194f6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80194fa:	441a      	add	r2, r3
 80194fc:	896b      	ldrh	r3, [r5, #10]
 80194fe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019502:	f88d 0010 	strb.w	r0, [sp, #16]
 8019506:	1b5b      	subs	r3, r3, r5
 8019508:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801950a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801950c:	442b      	add	r3, r5
 801950e:	4d07      	ldr	r5, [pc, #28]	; (801952c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019510:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019514:	a903      	add	r1, sp, #12
 8019516:	9503      	str	r5, [sp, #12]
 8019518:	f8ad 2014 	strh.w	r2, [sp, #20]
 801951c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019520:	6803      	ldr	r3, [r0, #0]
 8019522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019524:	4798      	blx	r3
 8019526:	b007      	add	sp, #28
 8019528:	bd30      	pop	{r4, r5, pc}
 801952a:	bf00      	nop
 801952c:	0802957c 	.word	0x0802957c

08019530 <_ZNK8touchgfx4Rect9intersectEss>:
 8019530:	b510      	push	{r4, lr}
 8019532:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019536:	428b      	cmp	r3, r1
 8019538:	dc10      	bgt.n	801955c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801953a:	8884      	ldrh	r4, [r0, #4]
 801953c:	4423      	add	r3, r4
 801953e:	b21b      	sxth	r3, r3
 8019540:	4299      	cmp	r1, r3
 8019542:	da0b      	bge.n	801955c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019544:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019548:	4293      	cmp	r3, r2
 801954a:	dc07      	bgt.n	801955c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801954c:	88c0      	ldrh	r0, [r0, #6]
 801954e:	4418      	add	r0, r3
 8019550:	b200      	sxth	r0, r0
 8019552:	4282      	cmp	r2, r0
 8019554:	bfac      	ite	ge
 8019556:	2000      	movge	r0, #0
 8019558:	2001      	movlt	r0, #1
 801955a:	bd10      	pop	{r4, pc}
 801955c:	2000      	movs	r0, #0
 801955e:	e7fc      	b.n	801955a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019560 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019562:	460c      	mov	r4, r1
 8019564:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019566:	b089      	sub	sp, #36	; 0x24
 8019568:	4605      	mov	r5, r0
 801956a:	2900      	cmp	r1, #0
 801956c:	d054      	beq.n	8019618 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801956e:	4668      	mov	r0, sp
 8019570:	f7ff fe46 	bl	8019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019574:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019576:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019578:	4668      	mov	r0, sp
 801957a:	8922      	ldrh	r2, [r4, #8]
 801957c:	88e1      	ldrh	r1, [r4, #6]
 801957e:	443a      	add	r2, r7
 8019580:	4431      	add	r1, r6
 8019582:	b212      	sxth	r2, r2
 8019584:	b209      	sxth	r1, r1
 8019586:	f7ff ffd3 	bl	8019530 <_ZNK8touchgfx4Rect9intersectEss>
 801958a:	b1d0      	cbz	r0, 80195c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801958c:	89a2      	ldrh	r2, [r4, #12]
 801958e:	4668      	mov	r0, sp
 8019590:	8961      	ldrh	r1, [r4, #10]
 8019592:	443a      	add	r2, r7
 8019594:	4431      	add	r1, r6
 8019596:	b212      	sxth	r2, r2
 8019598:	b209      	sxth	r1, r1
 801959a:	f7ff ffc9 	bl	8019530 <_ZNK8touchgfx4Rect9intersectEss>
 801959e:	4603      	mov	r3, r0
 80195a0:	b978      	cbnz	r0, 80195c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80195a2:	4a1e      	ldr	r2, [pc, #120]	; (801961c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 80195a4:	a904      	add	r1, sp, #16
 80195a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80195a8:	9204      	str	r2, [sp, #16]
 80195aa:	2202      	movs	r2, #2
 80195ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80195b0:	f88d 2014 	strb.w	r2, [sp, #20]
 80195b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80195b8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80195bc:	6803      	ldr	r3, [r0, #0]
 80195be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195c0:	4798      	blx	r3
 80195c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80195c4:	a802      	add	r0, sp, #8
 80195c6:	f7ff fe1b 	bl	8019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80195ca:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80195ce:	88e0      	ldrh	r0, [r4, #6]
 80195d0:	8961      	ldrh	r1, [r4, #10]
 80195d2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80195d6:	1a80      	subs	r0, r0, r2
 80195d8:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80195dc:	1a89      	subs	r1, r1, r2
 80195de:	8923      	ldrh	r3, [r4, #8]
 80195e0:	4460      	add	r0, ip
 80195e2:	89a2      	ldrh	r2, [r4, #12]
 80195e4:	4461      	add	r1, ip
 80195e6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80195e8:	eba3 030e 	sub.w	r3, r3, lr
 80195ec:	eba2 020e 	sub.w	r2, r2, lr
 80195f0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80195f4:	7927      	ldrb	r7, [r4, #4]
 80195f6:	4433      	add	r3, r6
 80195f8:	4432      	add	r2, r6
 80195fa:	4c09      	ldr	r4, [pc, #36]	; (8019620 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80195fc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80195fe:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019602:	a904      	add	r1, sp, #16
 8019604:	9404      	str	r4, [sp, #16]
 8019606:	f88d 7014 	strb.w	r7, [sp, #20]
 801960a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801960e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019612:	6803      	ldr	r3, [r0, #0]
 8019614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019616:	4798      	blx	r3
 8019618:	b009      	add	sp, #36	; 0x24
 801961a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801961c:	08029554 	.word	0x08029554
 8019620:	08029568 	.word	0x08029568

08019624 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019628:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801962c:	b0a1      	sub	sp, #132	; 0x84
 801962e:	4604      	mov	r4, r0
 8019630:	460d      	mov	r5, r1
 8019632:	790b      	ldrb	r3, [r1, #4]
 8019634:	f1b9 0f00 	cmp.w	r9, #0
 8019638:	d00f      	beq.n	801965a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801963a:	2b00      	cmp	r3, #0
 801963c:	f040 80a2 	bne.w	8019784 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019640:	b021      	add	sp, #132	; 0x84
 8019642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019646:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801964a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801964e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019652:	1d20      	adds	r0, r4, #4
 8019654:	f7fa fea0 	bl	8014398 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019658:	e094      	b.n	8019784 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801965a:	2b00      	cmp	r3, #0
 801965c:	d1f0      	bne.n	8019640 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801965e:	4b5f      	ldr	r3, [pc, #380]	; (80197dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019666:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801966a:	f1ba 0f03 	cmp.w	sl, #3
 801966e:	ddea      	ble.n	8019646 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019670:	f1ba 0f0c 	cmp.w	sl, #12
 8019674:	f04f 0303 	mov.w	r3, #3
 8019678:	f04f 0600 	mov.w	r6, #0
 801967c:	4958      	ldr	r1, [pc, #352]	; (80197e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801967e:	bfd8      	it	le
 8019680:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019684:	960a      	str	r6, [sp, #40]	; 0x28
 8019686:	bfd8      	it	le
 8019688:	fb92 f3f3 	sdivle	r3, r2, r3
 801968c:	9301      	str	r3, [sp, #4]
 801968e:	4b55      	ldr	r3, [pc, #340]	; (80197e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019690:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019694:	4b54      	ldr	r3, [pc, #336]	; (80197e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019696:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801969a:	2248      	movs	r2, #72	; 0x48
 801969c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80196a0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80196a4:	ab0e      	add	r3, sp, #56	; 0x38
 80196a6:	4618      	mov	r0, r3
 80196a8:	f00b ff52 	bl	8025550 <memcpy>
 80196ac:	f04f 32ff 	mov.w	r2, #4294967295
 80196b0:	f8cd a008 	str.w	sl, [sp, #8]
 80196b4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80196b8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80196bc:	46b3      	mov	fp, r6
 80196be:	fb93 f3f2 	sdiv	r3, r3, r2
 80196c2:	b29b      	uxth	r3, r3
 80196c4:	9303      	str	r3, [sp, #12]
 80196c6:	2300      	movs	r3, #0
 80196c8:	9a03      	ldr	r2, [sp, #12]
 80196ca:	88ef      	ldrh	r7, [r5, #6]
 80196cc:	a80a      	add	r0, sp, #40	; 0x28
 80196ce:	9309      	str	r3, [sp, #36]	; 0x24
 80196d0:	9b07      	ldr	r3, [sp, #28]
 80196d2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80196d6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80196da:	fb13 f302 	smulbb	r3, r3, r2
 80196de:	b29b      	uxth	r3, r3
 80196e0:	9304      	str	r3, [sp, #16]
 80196e2:	9b07      	ldr	r3, [sp, #28]
 80196e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80196e8:	685b      	ldr	r3, [r3, #4]
 80196ea:	fb13 f302 	smulbb	r3, r3, r2
 80196ee:	b29b      	uxth	r3, r3
 80196f0:	9305      	str	r3, [sp, #20]
 80196f2:	9b04      	ldr	r3, [sp, #16]
 80196f4:	441f      	add	r7, r3
 80196f6:	9b05      	ldr	r3, [sp, #20]
 80196f8:	4498      	add	r8, r3
 80196fa:	b23f      	sxth	r7, r7
 80196fc:	fa0f f888 	sxth.w	r8, r8
 8019700:	4639      	mov	r1, r7
 8019702:	4642      	mov	r2, r8
 8019704:	f7ff ff14 	bl	8019530 <_ZNK8touchgfx4Rect9intersectEss>
 8019708:	b380      	cbz	r0, 801976c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801970a:	4639      	mov	r1, r7
 801970c:	ab09      	add	r3, sp, #36	; 0x24
 801970e:	4642      	mov	r2, r8
 8019710:	1d20      	adds	r0, r4, #4
 8019712:	f7fa fe41 	bl	8014398 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019718:	b341      	cbz	r1, 801976c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801971a:	4549      	cmp	r1, r9
 801971c:	d026      	beq.n	801976c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801971e:	a80c      	add	r0, sp, #48	; 0x30
 8019720:	f7ff fd6e 	bl	8019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019724:	2002      	movs	r0, #2
 8019726:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801972a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801972e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019732:	fb92 f2f0 	sdiv	r2, r2, r0
 8019736:	440a      	add	r2, r1
 8019738:	1a99      	subs	r1, r3, r2
 801973a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801973e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019742:	fb93 f3f0 	sdiv	r3, r3, r0
 8019746:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801974a:	4403      	add	r3, r0
 801974c:	1ad3      	subs	r3, r2, r3
 801974e:	9a06      	ldr	r2, [sp, #24]
 8019750:	435b      	muls	r3, r3
 8019752:	fb01 3301 	mla	r3, r1, r1, r3
 8019756:	4293      	cmp	r3, r2
 8019758:	d208      	bcs.n	801976c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801975a:	9a04      	ldr	r2, [sp, #16]
 801975c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019760:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019762:	9a05      	ldr	r2, [sp, #20]
 8019764:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019768:	86e2      	strh	r2, [r4, #54]	; 0x36
 801976a:	9306      	str	r3, [sp, #24]
 801976c:	f10b 0b02 	add.w	fp, fp, #2
 8019770:	f1bb 0f08 	cmp.w	fp, #8
 8019774:	dda7      	ble.n	80196c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019776:	9b02      	ldr	r3, [sp, #8]
 8019778:	3601      	adds	r6, #1
 801977a:	4453      	add	r3, sl
 801977c:	9302      	str	r3, [sp, #8]
 801977e:	9b01      	ldr	r3, [sp, #4]
 8019780:	42b3      	cmp	r3, r6
 8019782:	d199      	bne.n	80196b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019784:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019786:	2900      	cmp	r1, #0
 8019788:	f43f af5a 	beq.w	8019640 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801978c:	a80c      	add	r0, sp, #48	; 0x30
 801978e:	2600      	movs	r6, #0
 8019790:	f7ff fd36 	bl	8019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019794:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019798:	88ea      	ldrh	r2, [r5, #6]
 801979a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801979e:	1ad2      	subs	r2, r2, r3
 80197a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80197a2:	7929      	ldrb	r1, [r5, #4]
 80197a4:	441a      	add	r2, r3
 80197a6:	892b      	ldrh	r3, [r5, #8]
 80197a8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80197ac:	a90e      	add	r1, sp, #56	; 0x38
 80197ae:	1a1b      	subs	r3, r3, r0
 80197b0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80197b2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80197b6:	4403      	add	r3, r0
 80197b8:	480c      	ldr	r0, [pc, #48]	; (80197ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 80197ba:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80197be:	900e      	str	r0, [sp, #56]	; 0x38
 80197c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80197c2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80197c6:	6803      	ldr	r3, [r0, #0]
 80197c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197ca:	4798      	blx	r3
 80197cc:	792b      	ldrb	r3, [r5, #4]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	f43f af36 	beq.w	8019640 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80197d4:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80197d8:	e732      	b.n	8019640 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80197da:	bf00      	nop
 80197dc:	2005653c 	.word	0x2005653c
 80197e0:	080274d4 	.word	0x080274d4
 80197e4:	20056530 	.word	0x20056530
 80197e8:	20056532 	.word	0x20056532
 80197ec:	08029554 	.word	0x08029554

080197f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80197f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197f2:	4604      	mov	r4, r0
 80197f4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80197f8:	3201      	adds	r2, #1
 80197fa:	d112      	bne.n	8019822 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80197fc:	2500      	movs	r5, #0
 80197fe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019802:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019806:	6803      	ldr	r3, [r0, #0]
 8019808:	9500      	str	r5, [sp, #0]
 801980a:	466d      	mov	r5, sp
 801980c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019810:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019814:	4629      	mov	r1, r5
 8019816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019818:	4798      	blx	r3
 801981a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801981e:	e884 0003 	stmia.w	r4, {r0, r1}
 8019822:	4620      	mov	r0, r4
 8019824:	b003      	add	sp, #12
 8019826:	bd30      	pop	{r4, r5, pc}

08019828 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019828:	b513      	push	{r0, r1, r4, lr}
 801982a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801982e:	4604      	mov	r4, r0
 8019830:	3301      	adds	r3, #1
 8019832:	d109      	bne.n	8019848 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019834:	4601      	mov	r1, r0
 8019836:	4668      	mov	r0, sp
 8019838:	f7ff fce2 	bl	8019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801983c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019840:	8423      	strh	r3, [r4, #32]
 8019842:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019846:	8463      	strh	r3, [r4, #34]	; 0x22
 8019848:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801984c:	b002      	add	sp, #8
 801984e:	bd10      	pop	{r4, pc}

08019850 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019850:	b513      	push	{r0, r1, r4, lr}
 8019852:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019856:	4604      	mov	r4, r0
 8019858:	3301      	adds	r3, #1
 801985a:	d109      	bne.n	8019870 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801985c:	4601      	mov	r1, r0
 801985e:	4668      	mov	r0, sp
 8019860:	f7ff fcce 	bl	8019200 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019864:	f8bd 3000 	ldrh.w	r3, [sp]
 8019868:	8423      	strh	r3, [r4, #32]
 801986a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801986e:	8463      	strh	r3, [r4, #34]	; 0x22
 8019870:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019874:	b002      	add	sp, #8
 8019876:	bd10      	pop	{r4, pc}

08019878 <_ZN8touchgfx6ScreenC1Ev>:
 8019878:	b570      	push	{r4, r5, r6, lr}
 801987a:	4b17      	ldr	r3, [pc, #92]	; (80198d8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801987c:	4605      	mov	r5, r0
 801987e:	4a17      	ldr	r2, [pc, #92]	; (80198dc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019880:	2101      	movs	r1, #1
 8019882:	f845 3b04 	str.w	r3, [r5], #4
 8019886:	2300      	movs	r3, #0
 8019888:	6042      	str	r2, [r0, #4]
 801988a:	4604      	mov	r4, r0
 801988c:	8103      	strh	r3, [r0, #8]
 801988e:	8143      	strh	r3, [r0, #10]
 8019890:	8183      	strh	r3, [r0, #12]
 8019892:	81c3      	strh	r3, [r0, #14]
 8019894:	8203      	strh	r3, [r0, #16]
 8019896:	8243      	strh	r3, [r0, #18]
 8019898:	8283      	strh	r3, [r0, #20]
 801989a:	82c3      	strh	r3, [r0, #22]
 801989c:	6203      	str	r3, [r0, #32]
 801989e:	8483      	strh	r3, [r0, #36]	; 0x24
 80198a0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80198a2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80198a6:	6343      	str	r3, [r0, #52]	; 0x34
 80198a8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80198ac:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80198b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80198b4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80198b8:	4b09      	ldr	r3, [pc, #36]	; (80198e0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80198ba:	4628      	mov	r0, r5
 80198bc:	f9b3 6000 	ldrsh.w	r6, [r3]
 80198c0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80198c2:	4a08      	ldr	r2, [pc, #32]	; (80198e4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80198c4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80198c8:	4798      	blx	r3
 80198ca:	6863      	ldr	r3, [r4, #4]
 80198cc:	4628      	mov	r0, r5
 80198ce:	4631      	mov	r1, r6
 80198d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198d2:	4798      	blx	r3
 80198d4:	4620      	mov	r0, r4
 80198d6:	bd70      	pop	{r4, r5, r6, pc}
 80198d8:	08029590 	.word	0x08029590
 80198dc:	080281b0 	.word	0x080281b0
 80198e0:	20056532 	.word	0x20056532
 80198e4:	20056530 	.word	0x20056530

080198e8 <_ZN8touchgfx6Screen4drawEv>:
 80198e8:	4b09      	ldr	r3, [pc, #36]	; (8019910 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80198ea:	b507      	push	{r0, r1, r2, lr}
 80198ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80198f0:	2100      	movs	r1, #0
 80198f2:	4b08      	ldr	r3, [pc, #32]	; (8019914 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80198f4:	9100      	str	r1, [sp, #0]
 80198f6:	4669      	mov	r1, sp
 80198f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019900:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019904:	6803      	ldr	r3, [r0, #0]
 8019906:	689b      	ldr	r3, [r3, #8]
 8019908:	4798      	blx	r3
 801990a:	b003      	add	sp, #12
 801990c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019910:	20056530 	.word	0x20056530
 8019914:	20056532 	.word	0x20056532

08019918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801991c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019920:	b089      	sub	sp, #36	; 0x24
 8019922:	4680      	mov	r8, r0
 8019924:	460c      	mov	r4, r1
 8019926:	2b00      	cmp	r3, #0
 8019928:	4615      	mov	r5, r2
 801992a:	dd0e      	ble.n	801994a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801992c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019930:	2b00      	cmp	r3, #0
 8019932:	dd0a      	ble.n	801994a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019934:	4628      	mov	r0, r5
 8019936:	f7ff ff5b 	bl	80197f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801993a:	4621      	mov	r1, r4
 801993c:	f7fb ffea 	bl	8015914 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019940:	69eb      	ldr	r3, [r5, #28]
 8019942:	b928      	cbnz	r0, 8019950 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019944:	461d      	mov	r5, r3
 8019946:	2b00      	cmp	r3, #0
 8019948:	d1f4      	bne.n	8019934 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801994a:	b009      	add	sp, #36	; 0x24
 801994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019950:	ae04      	add	r6, sp, #16
 8019952:	2b00      	cmp	r3, #0
 8019954:	f000 80b5 	beq.w	8019ac2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019958:	682b      	ldr	r3, [r5, #0]
 801995a:	4629      	mov	r1, r5
 801995c:	a802      	add	r0, sp, #8
 801995e:	68db      	ldr	r3, [r3, #12]
 8019960:	4798      	blx	r3
 8019962:	4628      	mov	r0, r5
 8019964:	f7ff ff60 	bl	8019828 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019968:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801996c:	4407      	add	r7, r0
 801996e:	4628      	mov	r0, r5
 8019970:	f7ff ff6e 	bl	8019850 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019974:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019978:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801997c:	b23f      	sxth	r7, r7
 801997e:	4418      	add	r0, r3
 8019980:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019984:	4621      	mov	r1, r4
 8019986:	f8ad 2014 	strh.w	r2, [sp, #20]
 801998a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801998e:	4630      	mov	r0, r6
 8019990:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019994:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019998:	f7fa fdb0 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 801999c:	4628      	mov	r0, r5
 801999e:	f7ff ff27 	bl	80197f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80199a2:	ab06      	add	r3, sp, #24
 80199a4:	4602      	mov	r2, r0
 80199a6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80199aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80199ae:	4611      	mov	r1, r2
 80199b0:	4618      	mov	r0, r3
 80199b2:	f7fa fda3 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 80199b6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80199ba:	f9b4 1000 	ldrsh.w	r1, [r4]
 80199be:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80199c2:	4299      	cmp	r1, r3
 80199c4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80199c8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80199cc:	d10b      	bne.n	80199e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80199ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80199d2:	4552      	cmp	r2, sl
 80199d4:	d107      	bne.n	80199e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80199d6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80199da:	455a      	cmp	r2, fp
 80199dc:	d103      	bne.n	80199e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80199de:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80199e2:	454a      	cmp	r2, r9
 80199e4:	d06d      	beq.n	8019ac2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80199e6:	f1bb 0f00 	cmp.w	fp, #0
 80199ea:	dd65      	ble.n	8019ab8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80199ec:	f1b9 0f00 	cmp.w	r9, #0
 80199f0:	dd62      	ble.n	8019ab8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80199f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80199f6:	fa1f f08a 	uxth.w	r0, sl
 80199fa:	4552      	cmp	r2, sl
 80199fc:	9000      	str	r0, [sp, #0]
 80199fe:	da12      	bge.n	8019a26 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8019a00:	9301      	str	r3, [sp, #4]
 8019a02:	9b00      	ldr	r3, [sp, #0]
 8019a04:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019a08:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019a0c:	1a9a      	subs	r2, r3, r2
 8019a0e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019a12:	4631      	mov	r1, r6
 8019a14:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019a18:	4640      	mov	r0, r8
 8019a1a:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019a1e:	69ea      	ldr	r2, [r5, #28]
 8019a20:	f7ff ff7a 	bl	8019918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a24:	9b01      	ldr	r3, [sp, #4]
 8019a26:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019a2a:	b29f      	uxth	r7, r3
 8019a2c:	429a      	cmp	r2, r3
 8019a2e:	da0d      	bge.n	8019a4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019a30:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019a34:	1aba      	subs	r2, r7, r2
 8019a36:	f8ad a012 	strh.w	sl, [sp, #18]
 8019a3a:	4631      	mov	r1, r6
 8019a3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019a40:	4640      	mov	r0, r8
 8019a42:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019a46:	69ea      	ldr	r2, [r5, #28]
 8019a48:	f7ff ff66 	bl	8019918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a4c:	8822      	ldrh	r2, [r4, #0]
 8019a4e:	445f      	add	r7, fp
 8019a50:	88a3      	ldrh	r3, [r4, #4]
 8019a52:	b2bf      	uxth	r7, r7
 8019a54:	4413      	add	r3, r2
 8019a56:	b23a      	sxth	r2, r7
 8019a58:	b29b      	uxth	r3, r3
 8019a5a:	b219      	sxth	r1, r3
 8019a5c:	4291      	cmp	r1, r2
 8019a5e:	dd0d      	ble.n	8019a7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019a60:	1bdb      	subs	r3, r3, r7
 8019a62:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019a66:	f8ad a012 	strh.w	sl, [sp, #18]
 8019a6a:	4631      	mov	r1, r6
 8019a6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019a70:	4640      	mov	r0, r8
 8019a72:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019a76:	69ea      	ldr	r2, [r5, #28]
 8019a78:	f7ff ff4e 	bl	8019918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a7c:	88e2      	ldrh	r2, [r4, #6]
 8019a7e:	8863      	ldrh	r3, [r4, #2]
 8019a80:	4413      	add	r3, r2
 8019a82:	9a00      	ldr	r2, [sp, #0]
 8019a84:	444a      	add	r2, r9
 8019a86:	b29b      	uxth	r3, r3
 8019a88:	fa1f f982 	uxth.w	r9, r2
 8019a8c:	b219      	sxth	r1, r3
 8019a8e:	fa0f f289 	sxth.w	r2, r9
 8019a92:	428a      	cmp	r2, r1
 8019a94:	da15      	bge.n	8019ac2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019a96:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019a9a:	eba3 0309 	sub.w	r3, r3, r9
 8019a9e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019aa2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019aa6:	4631      	mov	r1, r6
 8019aa8:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019aac:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019ab0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ab4:	69ea      	ldr	r2, [r5, #28]
 8019ab6:	e001      	b.n	8019abc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019ab8:	69ea      	ldr	r2, [r5, #28]
 8019aba:	4621      	mov	r1, r4
 8019abc:	4640      	mov	r0, r8
 8019abe:	f7ff ff2b 	bl	8019918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019ac2:	4628      	mov	r0, r5
 8019ac4:	f7ff fe94 	bl	80197f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019ac8:	6861      	ldr	r1, [r4, #4]
 8019aca:	4602      	mov	r2, r0
 8019acc:	4633      	mov	r3, r6
 8019ace:	6820      	ldr	r0, [r4, #0]
 8019ad0:	c303      	stmia	r3!, {r0, r1}
 8019ad2:	4611      	mov	r1, r2
 8019ad4:	4630      	mov	r0, r6
 8019ad6:	f7fa fd11 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 8019ada:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	f77f af33 	ble.w	801994a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019ae4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	f77f af2e 	ble.w	801994a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019aee:	4628      	mov	r0, r5
 8019af0:	f7ff fe9a 	bl	8019828 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019af4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019af8:	1a18      	subs	r0, r3, r0
 8019afa:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019afe:	4628      	mov	r0, r5
 8019b00:	f7ff fea6 	bl	8019850 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019b04:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019b08:	4631      	mov	r1, r6
 8019b0a:	1a18      	subs	r0, r3, r0
 8019b0c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019b10:	4628      	mov	r0, r5
 8019b12:	682b      	ldr	r3, [r5, #0]
 8019b14:	689b      	ldr	r3, [r3, #8]
 8019b16:	4798      	blx	r3
 8019b18:	e717      	b.n	801994a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08019b1a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019b1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	aa02      	add	r2, sp, #8
 8019b20:	4604      	mov	r4, r0
 8019b22:	3004      	adds	r0, #4
 8019b24:	f842 3d04 	str.w	r3, [r2, #-4]!
 8019b28:	460d      	mov	r5, r1
 8019b2a:	f7fa fdbf 	bl	80146ac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019b2e:	9a01      	ldr	r2, [sp, #4]
 8019b30:	b11a      	cbz	r2, 8019b3a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8019b32:	4629      	mov	r1, r5
 8019b34:	4620      	mov	r0, r4
 8019b36:	f7ff feef 	bl	8019918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019b3a:	b003      	add	sp, #12
 8019b3c:	bd30      	pop	{r4, r5, pc}

08019b3e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019b3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b40:	4602      	mov	r2, r0
 8019b42:	4604      	mov	r4, r0
 8019b44:	460d      	mov	r5, r1
 8019b46:	466b      	mov	r3, sp
 8019b48:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019b4c:	6851      	ldr	r1, [r2, #4]
 8019b4e:	c303      	stmia	r3!, {r0, r1}
 8019b50:	4629      	mov	r1, r5
 8019b52:	4668      	mov	r0, sp
 8019b54:	f7fa fcd2 	bl	80144fc <_ZN8touchgfx4RectaNERKS0_>
 8019b58:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019b5c:	4669      	mov	r1, sp
 8019b5e:	b123      	cbz	r3, 8019b6a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8019b60:	4620      	mov	r0, r4
 8019b62:	f7ff ffda 	bl	8019b1a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019b66:	b003      	add	sp, #12
 8019b68:	bd30      	pop	{r4, r5, pc}
 8019b6a:	1d20      	adds	r0, r4, #4
 8019b6c:	f7fa fd65 	bl	801463a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019b70:	e7f9      	b.n	8019b66 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08019b72 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019b72:	460b      	mov	r3, r1
 8019b74:	680a      	ldr	r2, [r1, #0]
 8019b76:	1d01      	adds	r1, r0, #4
 8019b78:	6992      	ldr	r2, [r2, #24]
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	4710      	bx	r2

08019b7e <_ZN8touchgfx12TextProviderC1Ev>:
 8019b7e:	b538      	push	{r3, r4, r5, lr}
 8019b80:	2500      	movs	r5, #0
 8019b82:	4604      	mov	r4, r0
 8019b84:	220e      	movs	r2, #14
 8019b86:	7405      	strb	r5, [r0, #16]
 8019b88:	4629      	mov	r1, r5
 8019b8a:	82c5      	strh	r5, [r0, #22]
 8019b8c:	8305      	strh	r5, [r0, #24]
 8019b8e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8019b90:	8605      	strh	r5, [r0, #48]	; 0x30
 8019b92:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019b94:	8705      	strh	r5, [r0, #56]	; 0x38
 8019b96:	e9c0 5500 	strd	r5, r5, [r0]
 8019b9a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8019b9e:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 8019ba2:	3044      	adds	r0, #68	; 0x44
 8019ba4:	f00b fce2 	bl	802556c <memset>
 8019ba8:	2301      	movs	r3, #1
 8019baa:	4620      	mov	r0, r4
 8019bac:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8019bb0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8019bb4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8019bb8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8019bbc:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8019bc0:	f7ee fa62 	bl	8008088 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	bd38      	pop	{r3, r4, r5, pc}

08019bc8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019bc8:	b530      	push	{r4, r5, lr}
 8019bca:	2500      	movs	r5, #0
 8019bcc:	2401      	movs	r4, #1
 8019bce:	6843      	ldr	r3, [r0, #4]
 8019bd0:	b913      	cbnz	r3, 8019bd8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019bd2:	6803      	ldr	r3, [r0, #0]
 8019bd4:	b1f3      	cbz	r3, 8019c14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019bd6:	6043      	str	r3, [r0, #4]
 8019bd8:	7c03      	ldrb	r3, [r0, #16]
 8019bda:	b143      	cbz	r3, 8019bee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019bdc:	68c3      	ldr	r3, [r0, #12]
 8019bde:	b12b      	cbz	r3, 8019bec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019be0:	881a      	ldrh	r2, [r3, #0]
 8019be2:	b11a      	cbz	r2, 8019bec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019be4:	1c9a      	adds	r2, r3, #2
 8019be6:	60c2      	str	r2, [r0, #12]
 8019be8:	8818      	ldrh	r0, [r3, #0]
 8019bea:	bd30      	pop	{r4, r5, pc}
 8019bec:	7405      	strb	r5, [r0, #16]
 8019bee:	6843      	ldr	r3, [r0, #4]
 8019bf0:	8819      	ldrh	r1, [r3, #0]
 8019bf2:	b179      	cbz	r1, 8019c14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019bf4:	1c9a      	adds	r2, r3, #2
 8019bf6:	2902      	cmp	r1, #2
 8019bf8:	6042      	str	r2, [r0, #4]
 8019bfa:	d1f5      	bne.n	8019be8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019bfc:	6883      	ldr	r3, [r0, #8]
 8019bfe:	1d1a      	adds	r2, r3, #4
 8019c00:	6082      	str	r2, [r0, #8]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	60c3      	str	r3, [r0, #12]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d0e1      	beq.n	8019bce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c0a:	881b      	ldrh	r3, [r3, #0]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d0de      	beq.n	8019bce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c10:	7404      	strb	r4, [r0, #16]
 8019c12:	e7dc      	b.n	8019bce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c14:	2000      	movs	r0, #0
 8019c16:	e7e8      	b.n	8019bea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019c18 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019c18:	b410      	push	{r4}
 8019c1a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019c1c:	9b01      	ldr	r3, [sp, #4]
 8019c1e:	6082      	str	r2, [r0, #8]
 8019c20:	6403      	str	r3, [r0, #64]	; 0x40
 8019c22:	2300      	movs	r3, #0
 8019c24:	6001      	str	r1, [r0, #0]
 8019c26:	6043      	str	r3, [r0, #4]
 8019c28:	60c3      	str	r3, [r0, #12]
 8019c2a:	7403      	strb	r3, [r0, #16]
 8019c2c:	8603      	strh	r3, [r0, #48]	; 0x30
 8019c2e:	8303      	strh	r3, [r0, #24]
 8019c30:	8703      	strh	r3, [r0, #56]	; 0x38
 8019c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c36:	f7ee ba27 	b.w	8008088 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019c3a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c3c:	4605      	mov	r5, r0
 8019c3e:	4608      	mov	r0, r1
 8019c40:	b1f1      	cbz	r1, 8019c80 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019c42:	f105 0444 	add.w	r4, r5, #68	; 0x44
 8019c46:	460b      	mov	r3, r1
 8019c48:	f101 0708 	add.w	r7, r1, #8
 8019c4c:	4622      	mov	r2, r4
 8019c4e:	6818      	ldr	r0, [r3, #0]
 8019c50:	3308      	adds	r3, #8
 8019c52:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019c56:	4626      	mov	r6, r4
 8019c58:	42bb      	cmp	r3, r7
 8019c5a:	c603      	stmia	r6!, {r0, r1}
 8019c5c:	4634      	mov	r4, r6
 8019c5e:	d1f6      	bne.n	8019c4e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019c60:	6818      	ldr	r0, [r3, #0]
 8019c62:	6030      	str	r0, [r6, #0]
 8019c64:	4610      	mov	r0, r2
 8019c66:	889b      	ldrh	r3, [r3, #4]
 8019c68:	80b3      	strh	r3, [r6, #4]
 8019c6a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8019c6e:	015b      	lsls	r3, r3, #5
 8019c70:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019c74:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8019c78:	430b      	orrs	r3, r1
 8019c7a:	425b      	negs	r3, r3
 8019c7c:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 8019c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019c82 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019c82:	b538      	push	{r3, r4, r5, lr}
 8019c84:	460c      	mov	r4, r1
 8019c86:	6811      	ldr	r1, [r2, #0]
 8019c88:	4610      	mov	r0, r2
 8019c8a:	68cd      	ldr	r5, [r1, #12]
 8019c8c:	4619      	mov	r1, r3
 8019c8e:	47a8      	blx	r5
 8019c90:	2800      	cmp	r0, #0
 8019c92:	bf08      	it	eq
 8019c94:	4620      	moveq	r0, r4
 8019c96:	bd38      	pop	{r3, r4, r5, pc}

08019c98 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	4615      	mov	r5, r2
 8019c9e:	4608      	mov	r0, r1
 8019ca0:	b93a      	cbnz	r2, 8019cb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019ca2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8019ca6:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 8019caa:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8019cae:	4628      	mov	r0, r5
 8019cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cb2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8019cb6:	8893      	ldrh	r3, [r2, #4]
 8019cb8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8019cbc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019cc0:	79ee      	ldrb	r6, [r5, #7]
 8019cc2:	4316      	orrs	r6, r2
 8019cc4:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8019cc8:	189a      	adds	r2, r3, r2
 8019cca:	b2b7      	uxth	r7, r6
 8019ccc:	b291      	uxth	r1, r2
 8019cce:	291d      	cmp	r1, #29
 8019cd0:	f200 8084 	bhi.w	8019ddc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8019cd4:	2201      	movs	r2, #1
 8019cd6:	10f6      	asrs	r6, r6, #3
 8019cd8:	408a      	lsls	r2, r1
 8019cda:	4978      	ldr	r1, [pc, #480]	; (8019ebc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8019cdc:	420a      	tst	r2, r1
 8019cde:	d12e      	bne.n	8019d3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8019ce0:	f412 7f60 	tst.w	r2, #896	; 0x380
 8019ce4:	d07a      	beq.n	8019ddc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8019ce6:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8019cea:	462b      	mov	r3, r5
 8019cec:	f105 0e08 	add.w	lr, r5, #8
 8019cf0:	4615      	mov	r5, r2
 8019cf2:	6818      	ldr	r0, [r3, #0]
 8019cf4:	3308      	adds	r3, #8
 8019cf6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019cfa:	4694      	mov	ip, r2
 8019cfc:	4573      	cmp	r3, lr
 8019cfe:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019d02:	4662      	mov	r2, ip
 8019d04:	d1f5      	bne.n	8019cf2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8019d06:	6818      	ldr	r0, [r3, #0]
 8019d08:	f8cc 0000 	str.w	r0, [ip]
 8019d0c:	889b      	ldrh	r3, [r3, #4]
 8019d0e:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019d12:	b2b3      	uxth	r3, r6
 8019d14:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 8019d18:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8019d1c:	1aca      	subs	r2, r1, r3
 8019d1e:	1bcf      	subs	r7, r1, r7
 8019d20:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8019d24:	b292      	uxth	r2, r2
 8019d26:	1afb      	subs	r3, r7, r3
 8019d28:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 8019d2c:	10d2      	asrs	r2, r2, #3
 8019d2e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8019d32:	4302      	orrs	r2, r0
 8019d34:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8019d38:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8019d3c:	e7b7      	b.n	8019cae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019d3e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019d40:	b92b      	cbnz	r3, 8019d4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8019d42:	4b5f      	ldr	r3, [pc, #380]	; (8019ec0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8019d44:	21bf      	movs	r1, #191	; 0xbf
 8019d46:	4a5f      	ldr	r2, [pc, #380]	; (8019ec4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8019d48:	485f      	ldr	r0, [pc, #380]	; (8019ec8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8019d4a:	f00b fb83 	bl	8025454 <__assert_func>
 8019d4e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8019d50:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019d54:	8b59      	ldrh	r1, [r3, #26]
 8019d56:	f640 6333 	movw	r3, #3635	; 0xe33
 8019d5a:	4299      	cmp	r1, r3
 8019d5c:	d110      	bne.n	8019d80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8019d5e:	6803      	ldr	r3, [r0, #0]
 8019d60:	68db      	ldr	r3, [r3, #12]
 8019d62:	4798      	blx	r3
 8019d64:	7b41      	ldrb	r1, [r0, #13]
 8019d66:	00cb      	lsls	r3, r1, #3
 8019d68:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019d6c:	7a03      	ldrb	r3, [r0, #8]
 8019d6e:	0648      	lsls	r0, r1, #25
 8019d70:	ea43 0302 	orr.w	r3, r3, r2
 8019d74:	bf44      	itt	mi
 8019d76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019d7a:	b21b      	sxthmi	r3, r3
 8019d7c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019d80:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8019d84:	462a      	mov	r2, r5
 8019d86:	f105 0c08 	add.w	ip, r5, #8
 8019d8a:	443b      	add	r3, r7
 8019d8c:	4433      	add	r3, r6
 8019d8e:	f104 0644 	add.w	r6, r4, #68	; 0x44
 8019d92:	b29b      	uxth	r3, r3
 8019d94:	4635      	mov	r5, r6
 8019d96:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019d9a:	6810      	ldr	r0, [r2, #0]
 8019d9c:	3208      	adds	r2, #8
 8019d9e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8019da2:	4637      	mov	r7, r6
 8019da4:	4562      	cmp	r2, ip
 8019da6:	c703      	stmia	r7!, {r0, r1}
 8019da8:	463e      	mov	r6, r7
 8019daa:	d1f6      	bne.n	8019d9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8019dac:	6810      	ldr	r0, [r2, #0]
 8019dae:	6038      	str	r0, [r7, #0]
 8019db0:	8892      	ldrh	r2, [r2, #4]
 8019db2:	80ba      	strh	r2, [r7, #4]
 8019db4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8019db8:	10db      	asrs	r3, r3, #3
 8019dba:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8019dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019dc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019dc6:	4313      	orrs	r3, r2
 8019dc8:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8019dcc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8019dd0:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8019dd4:	1a9b      	subs	r3, r3, r2
 8019dd6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8019dda:	e768      	b.n	8019cae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019ddc:	f023 0204 	bic.w	r2, r3, #4
 8019de0:	f640 611b 	movw	r1, #3611	; 0xe1b
 8019de4:	428a      	cmp	r2, r1
 8019de6:	d003      	beq.n	8019df0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8019de8:	f640 621d 	movw	r2, #3613	; 0xe1d
 8019dec:	4293      	cmp	r3, r2
 8019dee:	d120      	bne.n	8019e32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8019df0:	3b01      	subs	r3, #1
 8019df2:	4602      	mov	r2, r0
 8019df4:	4629      	mov	r1, r5
 8019df6:	4620      	mov	r0, r4
 8019df8:	b29b      	uxth	r3, r3
 8019dfa:	f7ff ff42 	bl	8019c82 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019dfe:	7b41      	ldrb	r1, [r0, #13]
 8019e00:	00cb      	lsls	r3, r1, #3
 8019e02:	0649      	lsls	r1, r1, #25
 8019e04:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019e08:	7a03      	ldrb	r3, [r0, #8]
 8019e0a:	ea43 0302 	orr.w	r3, r3, r2
 8019e0e:	bf44      	itt	mi
 8019e10:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019e14:	b21b      	sxthmi	r3, r3
 8019e16:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019e1a:	7b6b      	ldrb	r3, [r5, #13]
 8019e1c:	7aaa      	ldrb	r2, [r5, #10]
 8019e1e:	005b      	lsls	r3, r3, #1
 8019e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e24:	4313      	orrs	r3, r2
 8019e26:	115a      	asrs	r2, r3, #5
 8019e28:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019e2c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8019e30:	e035      	b.n	8019e9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8019e32:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019e36:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019e3a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8019e3e:	7a2a      	ldrb	r2, [r5, #8]
 8019e40:	ea42 0201 	orr.w	r2, r2, r1
 8019e44:	f640 6109 	movw	r1, #3593	; 0xe09
 8019e48:	bf1c      	itt	ne
 8019e4a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019e4e:	b212      	sxthne	r2, r2
 8019e50:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8019e54:	f023 0210 	bic.w	r2, r3, #16
 8019e58:	428a      	cmp	r2, r1
 8019e5a:	d003      	beq.n	8019e64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8019e5c:	f640 6213 	movw	r2, #3603	; 0xe13
 8019e60:	4293      	cmp	r3, r2
 8019e62:	d129      	bne.n	8019eb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8019e64:	7b6e      	ldrb	r6, [r5, #13]
 8019e66:	4629      	mov	r1, r5
 8019e68:	0076      	lsls	r6, r6, #1
 8019e6a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019e6e:	7aae      	ldrb	r6, [r5, #10]
 8019e70:	4316      	orrs	r6, r2
 8019e72:	f640 6213 	movw	r2, #3603	; 0xe13
 8019e76:	4293      	cmp	r3, r2
 8019e78:	4602      	mov	r2, r0
 8019e7a:	4620      	mov	r0, r4
 8019e7c:	bf16      	itet	ne
 8019e7e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019e82:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019e86:	b29b      	uxthne	r3, r3
 8019e88:	f7ff fefb 	bl	8019c82 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019e8c:	7b43      	ldrb	r3, [r0, #13]
 8019e8e:	7a82      	ldrb	r2, [r0, #10]
 8019e90:	005b      	lsls	r3, r3, #1
 8019e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e96:	4313      	orrs	r3, r2
 8019e98:	1af6      	subs	r6, r6, r3
 8019e9a:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 8019e9e:	7b69      	ldrb	r1, [r5, #13]
 8019ea0:	00cb      	lsls	r3, r1, #3
 8019ea2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019ea6:	7a2b      	ldrb	r3, [r5, #8]
 8019ea8:	4313      	orrs	r3, r2
 8019eaa:	064a      	lsls	r2, r1, #25
 8019eac:	bf44      	itt	mi
 8019eae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019eb2:	b21b      	sxthmi	r3, r3
 8019eb4:	1bdb      	subs	r3, r3, r7
 8019eb6:	e73f      	b.n	8019d38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8019eb8:	2300      	movs	r3, #0
 8019eba:	e7b7      	b.n	8019e2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8019ebc:	3fc00079 	.word	0x3fc00079
 8019ec0:	080295bc 	.word	0x080295bc
 8019ec4:	0802982e 	.word	0x0802982e
 8019ec8:	080295c5 	.word	0x080295c5

08019ecc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ed0:	4604      	mov	r4, r0
 8019ed2:	b942      	cbnz	r2, 8019ee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019ed8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8019edc:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 8019ee0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8019ee4:	e046      	b.n	8019f74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8019ee6:	7b51      	ldrb	r1, [r2, #13]
 8019ee8:	8893      	ldrh	r3, [r2, #4]
 8019eea:	010f      	lsls	r7, r1, #4
 8019eec:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8019ef0:	79d7      	ldrb	r7, [r2, #7]
 8019ef2:	4307      	orrs	r7, r0
 8019ef4:	2f04      	cmp	r7, #4
 8019ef6:	b2bd      	uxth	r5, r7
 8019ef8:	bfcc      	ite	gt
 8019efa:	08bf      	lsrgt	r7, r7, #2
 8019efc:	2701      	movle	r7, #1
 8019efe:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019f02:	f200 80ab 	bhi.w	801a05c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8019f06:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8019f0a:	4283      	cmp	r3, r0
 8019f0c:	d216      	bcs.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019f0e:	f240 605b 	movw	r0, #1627	; 0x65b
 8019f12:	4283      	cmp	r3, r0
 8019f14:	d859      	bhi.n	8019fca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8019f16:	f240 6057 	movw	r0, #1623	; 0x657
 8019f1a:	4283      	cmp	r3, r0
 8019f1c:	d20e      	bcs.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019f1e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019f22:	d24a      	bcs.n	8019fba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8019f24:	f240 604e 	movw	r0, #1614	; 0x64e
 8019f28:	4283      	cmp	r3, r0
 8019f2a:	d207      	bcs.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019f2c:	f240 601a 	movw	r0, #1562	; 0x61a
 8019f30:	4283      	cmp	r3, r0
 8019f32:	d02a      	beq.n	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019f34:	d821      	bhi.n	8019f7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8019f36:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019f3a:	d35b      	bcc.n	8019ff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019f3c:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 8019f40:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019f44:	f040 80d0 	bne.w	801a0e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8019f48:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 8019f4c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019f50:	f040 80ca 	bne.w	801a0e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8019f54:	00cb      	lsls	r3, r1, #3
 8019f56:	0649      	lsls	r1, r1, #25
 8019f58:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019f5c:	7a13      	ldrb	r3, [r2, #8]
 8019f5e:	ea43 0300 	orr.w	r3, r3, r0
 8019f62:	bf44      	itt	mi
 8019f64:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019f68:	b21b      	sxthmi	r3, r3
 8019f6a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019f6e:	1b5d      	subs	r5, r3, r5
 8019f70:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8019f74:	4610      	mov	r0, r2
 8019f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f7a:	f240 604b 	movw	r0, #1611	; 0x64b
 8019f7e:	4283      	cmp	r3, r0
 8019f80:	d338      	bcc.n	8019ff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019f82:	f240 604c 	movw	r0, #1612	; 0x64c
 8019f86:	4283      	cmp	r3, r0
 8019f88:	d9d8      	bls.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019f8a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8019f8e:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 8019f92:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019f96:	f040 80f2 	bne.w	801a17e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8019f9a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019f9e:	f040 80ee 	bne.w	801a17e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8019fa2:	00cb      	lsls	r3, r1, #3
 8019fa4:	064e      	lsls	r6, r1, #25
 8019fa6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019faa:	7a13      	ldrb	r3, [r2, #8]
 8019fac:	ea43 0300 	orr.w	r3, r3, r0
 8019fb0:	bf44      	itt	mi
 8019fb2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019fb6:	b21b      	sxthmi	r3, r3
 8019fb8:	e7d9      	b.n	8019f6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8019fba:	f240 6054 	movw	r0, #1620	; 0x654
 8019fbe:	4283      	cmp	r3, r0
 8019fc0:	d8e3      	bhi.n	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019fc2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019fc6:	d9e0      	bls.n	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019fc8:	e7b8      	b.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019fca:	f240 6074 	movw	r0, #1652	; 0x674
 8019fce:	4283      	cmp	r3, r0
 8019fd0:	d0b4      	beq.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019fd2:	d82d      	bhi.n	801a030 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8019fd4:	f240 605e 	movw	r0, #1630	; 0x65e
 8019fd8:	4283      	cmp	r3, r0
 8019fda:	d804      	bhi.n	8019fe6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8019fdc:	f240 605d 	movw	r0, #1629	; 0x65d
 8019fe0:	4283      	cmp	r3, r0
 8019fe2:	d3d2      	bcc.n	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019fe4:	e7aa      	b.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019fe6:	f240 605f 	movw	r0, #1631	; 0x65f
 8019fea:	4283      	cmp	r3, r0
 8019fec:	d0cd      	beq.n	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019fee:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8019ff2:	d0a3      	beq.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019ff4:	00cb      	lsls	r3, r1, #3
 8019ff6:	0649      	lsls	r1, r1, #25
 8019ff8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019ffc:	7a13      	ldrb	r3, [r2, #8]
 8019ffe:	ea43 0300 	orr.w	r3, r3, r0
 801a002:	bf44      	itt	mi
 801a004:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a008:	b21b      	sxthmi	r3, r3
 801a00a:	1b5d      	subs	r5, r3, r5
 801a00c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a010:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801a014:	7b53      	ldrb	r3, [r2, #13]
 801a016:	015b      	lsls	r3, r3, #5
 801a018:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a01c:	7993      	ldrb	r3, [r2, #6]
 801a01e:	430b      	orrs	r3, r1
 801a020:	2105      	movs	r1, #5
 801a022:	005b      	lsls	r3, r3, #1
 801a024:	fb93 f3f1 	sdiv	r3, r3, r1
 801a028:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a02c:	440b      	add	r3, r1
 801a02e:	e757      	b.n	8019ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a030:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801a034:	4283      	cmp	r3, r0
 801a036:	d809      	bhi.n	801a04c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801a038:	f240 60df 	movw	r0, #1759	; 0x6df
 801a03c:	4283      	cmp	r3, r0
 801a03e:	f4bf af7d 	bcs.w	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a042:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801a046:	2b05      	cmp	r3, #5
 801a048:	d8d4      	bhi.n	8019ff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a04a:	e777      	b.n	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a04c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801a050:	4283      	cmp	r3, r0
 801a052:	d09a      	beq.n	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a054:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801a058:	4283      	cmp	r3, r0
 801a05a:	e7ca      	b.n	8019ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801a05c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801a060:	d22b      	bcs.n	801a0ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801a062:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801a066:	4283      	cmp	r3, r0
 801a068:	d28f      	bcs.n	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a06a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a06e:	4283      	cmp	r3, r0
 801a070:	d816      	bhi.n	801a0a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801a072:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801a076:	4283      	cmp	r3, r0
 801a078:	f4bf af60 	bcs.w	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a07c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801a080:	4283      	cmp	r3, r0
 801a082:	d80a      	bhi.n	801a09a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801a084:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801a088:	4283      	cmp	r3, r0
 801a08a:	f4bf af57 	bcs.w	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a08e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801a092:	4283      	cmp	r3, r0
 801a094:	f43f af79 	beq.w	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a098:	e7ac      	b.n	8019ff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a09a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801a09e:	e7f8      	b.n	801a092 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801a0a0:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801a0a4:	4283      	cmp	r3, r0
 801a0a6:	d802      	bhi.n	801a0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801a0a8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a0ac:	e798      	b.n	8019fe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801a0ae:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801a0b2:	4283      	cmp	r3, r0
 801a0b4:	f47f af42 	bne.w	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a0b8:	e767      	b.n	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a0ba:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801a0be:	4283      	cmp	r3, r0
 801a0c0:	f43f af63 	beq.w	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a0c4:	d802      	bhi.n	801a0cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801a0c6:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801a0ca:	e7f2      	b.n	801a0b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801a0cc:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801a0d0:	4283      	cmp	r3, r0
 801a0d2:	d805      	bhi.n	801a0e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801a0d4:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801a0d8:	4283      	cmp	r3, r0
 801a0da:	f4ff af2f 	bcc.w	8019f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a0de:	e754      	b.n	8019f8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a0e0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801a0e4:	4283      	cmp	r3, r0
 801a0e6:	e7af      	b.n	801a048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801a0e8:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 801a0ec:	4617      	mov	r7, r2
 801a0ee:	f102 0808 	add.w	r8, r2, #8
 801a0f2:	4666      	mov	r6, ip
 801a0f4:	6838      	ldr	r0, [r7, #0]
 801a0f6:	3708      	adds	r7, #8
 801a0f8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a0fc:	46e6      	mov	lr, ip
 801a0fe:	4547      	cmp	r7, r8
 801a100:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a104:	46f4      	mov	ip, lr
 801a106:	d1f5      	bne.n	801a0f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801a108:	6838      	ldr	r0, [r7, #0]
 801a10a:	f8ce 0000 	str.w	r0, [lr]
 801a10e:	88b9      	ldrh	r1, [r7, #4]
 801a110:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a114:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801a118:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a11c:	d009      	beq.n	801a132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801a11e:	7b51      	ldrb	r1, [r2, #13]
 801a120:	7992      	ldrb	r2, [r2, #6]
 801a122:	0149      	lsls	r1, r1, #5
 801a124:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a128:	4311      	orrs	r1, r2
 801a12a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a12e:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801a132:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a136:	d00d      	beq.n	801a154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801a138:	442b      	add	r3, r5
 801a13a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801a13e:	b29b      	uxth	r3, r3
 801a140:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a144:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801a148:	10db      	asrs	r3, r3, #3
 801a14a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a14e:	4313      	orrs	r3, r2
 801a150:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801a154:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801a158:	00cb      	lsls	r3, r1, #3
 801a15a:	064f      	lsls	r7, r1, #25
 801a15c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a160:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801a164:	ea43 0302 	orr.w	r3, r3, r2
 801a168:	bf44      	itt	mi
 801a16a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a16e:	b21b      	sxthmi	r3, r3
 801a170:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a174:	1b5d      	subs	r5, r3, r5
 801a176:	4632      	mov	r2, r6
 801a178:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801a17c:	e6fa      	b.n	8019f74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801a17e:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 801a182:	4694      	mov	ip, r2
 801a184:	f102 0908 	add.w	r9, r2, #8
 801a188:	4676      	mov	r6, lr
 801a18a:	f8dc 0000 	ldr.w	r0, [ip]
 801a18e:	f10c 0c08 	add.w	ip, ip, #8
 801a192:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801a196:	46f0      	mov	r8, lr
 801a198:	45cc      	cmp	ip, r9
 801a19a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a19e:	46c6      	mov	lr, r8
 801a1a0:	d1f3      	bne.n	801a18a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801a1a2:	f8dc 0000 	ldr.w	r0, [ip]
 801a1a6:	f8c8 0000 	str.w	r0, [r8]
 801a1aa:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801a1ae:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a1b2:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801a1b6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a1ba:	d009      	beq.n	801a1d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801a1bc:	7b51      	ldrb	r1, [r2, #13]
 801a1be:	7992      	ldrb	r2, [r2, #6]
 801a1c0:	0149      	lsls	r1, r1, #5
 801a1c2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a1c6:	4311      	orrs	r1, r2
 801a1c8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a1cc:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801a1d0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a1d4:	d00d      	beq.n	801a1f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801a1d6:	1bdb      	subs	r3, r3, r7
 801a1d8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801a1dc:	b29b      	uxth	r3, r3
 801a1de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a1e2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801a1e6:	10db      	asrs	r3, r3, #3
 801a1e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a1ec:	4313      	orrs	r3, r2
 801a1ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801a1f2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801a1f6:	00cb      	lsls	r3, r1, #3
 801a1f8:	0648      	lsls	r0, r1, #25
 801a1fa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a1fe:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801a202:	ea43 0302 	orr.w	r3, r3, r2
 801a206:	bf44      	itt	mi
 801a208:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a20c:	b21b      	sxthmi	r3, r3
 801a20e:	e7b1      	b.n	801a174 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801a210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a214:	461e      	mov	r6, r3
 801a216:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801a218:	4604      	mov	r4, r0
 801a21a:	4617      	mov	r7, r2
 801a21c:	b92b      	cbnz	r3, 801a22a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801a21e:	4b25      	ldr	r3, [pc, #148]	; (801a2b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801a220:	21bf      	movs	r1, #191	; 0xbf
 801a222:	4a25      	ldr	r2, [pc, #148]	; (801a2b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801a224:	4825      	ldr	r0, [pc, #148]	; (801a2bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801a226:	f00b f915 	bl	8025454 <__assert_func>
 801a22a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a22c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a230:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801a234:	f7ed fe82 	bl	8007f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a238:	4605      	mov	r5, r0
 801a23a:	b918      	cbnz	r0, 801a244 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801a23c:	6030      	str	r0, [r6, #0]
 801a23e:	4628      	mov	r0, r5
 801a240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a244:	683b      	ldr	r3, [r7, #0]
 801a246:	4601      	mov	r1, r0
 801a248:	4638      	mov	r0, r7
 801a24a:	68db      	ldr	r3, [r3, #12]
 801a24c:	4798      	blx	r3
 801a24e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801a252:	4602      	mov	r2, r0
 801a254:	6030      	str	r0, [r6, #0]
 801a256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a25a:	d213      	bcs.n	801a284 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801a25c:	4643      	mov	r3, r8
 801a25e:	4639      	mov	r1, r7
 801a260:	4620      	mov	r0, r4
 801a262:	f7ff fe33 	bl	8019ecc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a266:	6030      	str	r0, [r6, #0]
 801a268:	6833      	ldr	r3, [r6, #0]
 801a26a:	b143      	cbz	r3, 801a27e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801a26c:	7b5a      	ldrb	r2, [r3, #13]
 801a26e:	7a9b      	ldrb	r3, [r3, #10]
 801a270:	0052      	lsls	r2, r2, #1
 801a272:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a276:	4313      	orrs	r3, r2
 801a278:	bf0c      	ite	eq
 801a27a:	2301      	moveq	r3, #1
 801a27c:	2300      	movne	r3, #0
 801a27e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a282:	e7dc      	b.n	801a23e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801a284:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a288:	b29b      	uxth	r3, r3
 801a28a:	2b7f      	cmp	r3, #127	; 0x7f
 801a28c:	d804      	bhi.n	801a298 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801a28e:	4639      	mov	r1, r7
 801a290:	4620      	mov	r0, r4
 801a292:	f7ff fd01 	bl	8019c98 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a296:	e7e6      	b.n	801a266 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801a298:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d0e3      	beq.n	801a268 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801a2a0:	f640 1302 	movw	r3, #2306	; 0x902
 801a2a4:	429d      	cmp	r5, r3
 801a2a6:	d1df      	bne.n	801a268 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801a2a8:	4601      	mov	r1, r0
 801a2aa:	4620      	mov	r0, r4
 801a2ac:	f7ff fcc5 	bl	8019c3a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a2b0:	e7d9      	b.n	801a266 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801a2b2:	bf00      	nop
 801a2b4:	080295bc 	.word	0x080295bc
 801a2b8:	0802982e 	.word	0x0802982e
 801a2bc:	080295c5 	.word	0x080295c5

0801a2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2c4:	461e      	mov	r6, r3
 801a2c6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801a2c8:	4604      	mov	r4, r0
 801a2ca:	4617      	mov	r7, r2
 801a2cc:	b92b      	cbnz	r3, 801a2da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801a2ce:	4b26      	ldr	r3, [pc, #152]	; (801a368 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801a2d0:	21bf      	movs	r1, #191	; 0xbf
 801a2d2:	4a26      	ldr	r2, [pc, #152]	; (801a36c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801a2d4:	4826      	ldr	r0, [pc, #152]	; (801a370 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801a2d6:	f00b f8bd 	bl	8025454 <__assert_func>
 801a2da:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a2dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a2e0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801a2e4:	f7ed fe2a 	bl	8007f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a2e8:	4605      	mov	r5, r0
 801a2ea:	b918      	cbnz	r0, 801a2f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801a2ec:	6030      	str	r0, [r6, #0]
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	4601      	mov	r1, r0
 801a2f8:	4638      	mov	r0, r7
 801a2fa:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801a2fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a302:	47c8      	blx	r9
 801a304:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801a308:	4602      	mov	r2, r0
 801a30a:	6030      	str	r0, [r6, #0]
 801a30c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a310:	d213      	bcs.n	801a33a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801a312:	4643      	mov	r3, r8
 801a314:	4639      	mov	r1, r7
 801a316:	4620      	mov	r0, r4
 801a318:	f7ff fdd8 	bl	8019ecc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a31c:	6030      	str	r0, [r6, #0]
 801a31e:	6833      	ldr	r3, [r6, #0]
 801a320:	b143      	cbz	r3, 801a334 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801a322:	7b5a      	ldrb	r2, [r3, #13]
 801a324:	7a9b      	ldrb	r3, [r3, #10]
 801a326:	0052      	lsls	r2, r2, #1
 801a328:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a32c:	4313      	orrs	r3, r2
 801a32e:	bf0c      	ite	eq
 801a330:	2301      	moveq	r3, #1
 801a332:	2300      	movne	r3, #0
 801a334:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a338:	e7d9      	b.n	801a2ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801a33a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a33e:	b29b      	uxth	r3, r3
 801a340:	2b7f      	cmp	r3, #127	; 0x7f
 801a342:	d804      	bhi.n	801a34e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801a344:	4639      	mov	r1, r7
 801a346:	4620      	mov	r0, r4
 801a348:	f7ff fca6 	bl	8019c98 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a34c:	e7e6      	b.n	801a31c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801a34e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801a352:	2b00      	cmp	r3, #0
 801a354:	d0e3      	beq.n	801a31e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801a356:	f640 1302 	movw	r3, #2306	; 0x902
 801a35a:	429d      	cmp	r5, r3
 801a35c:	d1df      	bne.n	801a31e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801a35e:	4601      	mov	r1, r0
 801a360:	4620      	mov	r0, r4
 801a362:	f7ff fc6a 	bl	8019c3a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a366:	e7d9      	b.n	801a31c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801a368:	080295bc 	.word	0x080295bc
 801a36c:	0802982e 	.word	0x0802982e
 801a370:	080295c5 	.word	0x080295c5

0801a374 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a374:	b510      	push	{r4, lr}
 801a376:	4604      	mov	r4, r0
 801a378:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801a37a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a37c:	b9d9      	cbnz	r1, 801a3b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801a37e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a380:	2b0a      	cmp	r3, #10
 801a382:	d036      	beq.n	801a3f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801a384:	4620      	mov	r0, r4
 801a386:	f7ff fc1f 	bl	8019bc8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a38a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a38c:	2b09      	cmp	r3, #9
 801a38e:	d906      	bls.n	801a39e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801a390:	4b18      	ldr	r3, [pc, #96]	; (801a3f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801a392:	f240 1103 	movw	r1, #259	; 0x103
 801a396:	4a18      	ldr	r2, [pc, #96]	; (801a3f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801a398:	4818      	ldr	r0, [pc, #96]	; (801a3fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801a39a:	f00b f85b 	bl	8025454 <__assert_func>
 801a39e:	1c5a      	adds	r2, r3, #1
 801a3a0:	8622      	strh	r2, [r4, #48]	; 0x30
 801a3a2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801a3a4:	4413      	add	r3, r2
 801a3a6:	b29b      	uxth	r3, r3
 801a3a8:	2b09      	cmp	r3, #9
 801a3aa:	bf88      	it	hi
 801a3ac:	3b0a      	subhi	r3, #10
 801a3ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a3b2:	8358      	strh	r0, [r3, #26]
 801a3b4:	e7e3      	b.n	801a37e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801a3b6:	2b0a      	cmp	r3, #10
 801a3b8:	d01b      	beq.n	801a3f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801a3ba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a3bc:	3901      	subs	r1, #1
 801a3be:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801a3c2:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801a3c4:	8721      	strh	r1, [r4, #56]	; 0x38
 801a3c6:	1c51      	adds	r1, r2, #1
 801a3c8:	b289      	uxth	r1, r1
 801a3ca:	2901      	cmp	r1, #1
 801a3cc:	bf8a      	itet	hi
 801a3ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a3d2:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801a3d4:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801a3d6:	2b09      	cmp	r3, #9
 801a3d8:	d8da      	bhi.n	801a390 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801a3da:	1c5a      	adds	r2, r3, #1
 801a3dc:	8622      	strh	r2, [r4, #48]	; 0x30
 801a3de:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801a3e0:	4413      	add	r3, r2
 801a3e2:	b29b      	uxth	r3, r3
 801a3e4:	2b09      	cmp	r3, #9
 801a3e6:	bf88      	it	hi
 801a3e8:	3b0a      	subhi	r3, #10
 801a3ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a3ee:	8358      	strh	r0, [r3, #26]
 801a3f0:	e7c2      	b.n	801a378 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801a3f2:	bd10      	pop	{r4, pc}
 801a3f4:	080295f1 	.word	0x080295f1
 801a3f8:	08029984 	.word	0x08029984
 801a3fc:	080295c5 	.word	0x080295c5

0801a400 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a400:	b538      	push	{r3, r4, r5, lr}
 801a402:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801a404:	4604      	mov	r4, r0
 801a406:	b92a      	cbnz	r2, 801a414 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801a408:	4b13      	ldr	r3, [pc, #76]	; (801a458 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801a40a:	21d4      	movs	r1, #212	; 0xd4
 801a40c:	4a13      	ldr	r2, [pc, #76]	; (801a45c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801a40e:	4814      	ldr	r0, [pc, #80]	; (801a460 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801a410:	f00b f820 	bl	8025454 <__assert_func>
 801a414:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a416:	3a01      	subs	r2, #1
 801a418:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801a41c:	8b4d      	ldrh	r5, [r1, #26]
 801a41e:	8602      	strh	r2, [r0, #48]	; 0x30
 801a420:	1c5a      	adds	r2, r3, #1
 801a422:	b292      	uxth	r2, r2
 801a424:	2a09      	cmp	r2, #9
 801a426:	bf8a      	itet	hi
 801a428:	3b09      	subhi	r3, #9
 801a42a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801a42c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801a42e:	f7ff ffa1 	bl	801a374 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a432:	8b23      	ldrh	r3, [r4, #24]
 801a434:	2b01      	cmp	r3, #1
 801a436:	bf9c      	itt	ls
 801a438:	3301      	addls	r3, #1
 801a43a:	8323      	strhls	r3, [r4, #24]
 801a43c:	8ae3      	ldrh	r3, [r4, #22]
 801a43e:	b90b      	cbnz	r3, 801a444 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801a440:	2302      	movs	r3, #2
 801a442:	82e3      	strh	r3, [r4, #22]
 801a444:	8ae3      	ldrh	r3, [r4, #22]
 801a446:	4628      	mov	r0, r5
 801a448:	3b01      	subs	r3, #1
 801a44a:	b29b      	uxth	r3, r3
 801a44c:	82e3      	strh	r3, [r4, #22]
 801a44e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a452:	8265      	strh	r5, [r4, #18]
 801a454:	bd38      	pop	{r3, r4, r5, pc}
 801a456:	bf00      	nop
 801a458:	080295bc 	.word	0x080295bc
 801a45c:	080298d9 	.word	0x080298d9
 801a460:	080295c5 	.word	0x080295c5

0801a464 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a464:	428a      	cmp	r2, r1
 801a466:	b538      	push	{r3, r4, r5, lr}
 801a468:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801a46a:	d90c      	bls.n	801a486 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801a46c:	b92c      	cbnz	r4, 801a47a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801a46e:	4b1c      	ldr	r3, [pc, #112]	; (801a4e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801a470:	21e0      	movs	r1, #224	; 0xe0
 801a472:	4a1c      	ldr	r2, [pc, #112]	; (801a4e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801a474:	481c      	ldr	r0, [pc, #112]	; (801a4e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801a476:	f00a ffed 	bl	8025454 <__assert_func>
 801a47a:	3c01      	subs	r4, #1
 801a47c:	4b1b      	ldr	r3, [pc, #108]	; (801a4ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801a47e:	4a1c      	ldr	r2, [pc, #112]	; (801a4f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801a480:	21c4      	movs	r1, #196	; 0xc4
 801a482:	8604      	strh	r4, [r0, #48]	; 0x30
 801a484:	e7f6      	b.n	801a474 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801a486:	428c      	cmp	r4, r1
 801a488:	d203      	bcs.n	801a492 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801a48a:	4b1a      	ldr	r3, [pc, #104]	; (801a4f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801a48c:	21ca      	movs	r1, #202	; 0xca
 801a48e:	4a1a      	ldr	r2, [pc, #104]	; (801a4f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801a490:	e7f0      	b.n	801a474 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801a492:	1a64      	subs	r4, r4, r1
 801a494:	250a      	movs	r5, #10
 801a496:	8604      	strh	r4, [r0, #48]	; 0x30
 801a498:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801a49a:	4421      	add	r1, r4
 801a49c:	b289      	uxth	r1, r1
 801a49e:	2909      	cmp	r1, #9
 801a4a0:	bf88      	it	hi
 801a4a2:	390a      	subhi	r1, #10
 801a4a4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801a4a6:	b1ba      	cbz	r2, 801a4d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801a4a8:	3a01      	subs	r2, #1
 801a4aa:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801a4ac:	b292      	uxth	r2, r2
 801a4ae:	2909      	cmp	r1, #9
 801a4b0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801a4b4:	d903      	bls.n	801a4be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801a4b6:	4b11      	ldr	r3, [pc, #68]	; (801a4fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801a4b8:	21e5      	movs	r1, #229	; 0xe5
 801a4ba:	4a11      	ldr	r2, [pc, #68]	; (801a500 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801a4bc:	e7da      	b.n	801a474 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801a4be:	3101      	adds	r1, #1
 801a4c0:	8601      	strh	r1, [r0, #48]	; 0x30
 801a4c2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801a4c4:	b901      	cbnz	r1, 801a4c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801a4c6:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801a4c8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801a4ca:	3901      	subs	r1, #1
 801a4cc:	b289      	uxth	r1, r1
 801a4ce:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801a4d0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a4d4:	834c      	strh	r4, [r1, #26]
 801a4d6:	e7e6      	b.n	801a4a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801a4d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4dc:	f7ff bf4a 	b.w	801a374 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a4e0:	080295bc 	.word	0x080295bc
 801a4e4:	080296b2 	.word	0x080296b2
 801a4e8:	080295c5 	.word	0x080295c5
 801a4ec:	080295fd 	.word	0x080295fd
 801a4f0:	0802975c 	.word	0x0802975c
 801a4f4:	0802960b 	.word	0x0802960b
 801a4f8:	08029a33 	.word	0x08029a33
 801a4fc:	08029617 	.word	0x08029617
 801a500:	0802962a 	.word	0x0802962a

0801a504 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a504:	3a01      	subs	r2, #1
 801a506:	b570      	push	{r4, r5, r6, lr}
 801a508:	b292      	uxth	r2, r2
 801a50a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a50e:	42b2      	cmp	r2, r6
 801a510:	d019      	beq.n	801a546 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801a512:	8b04      	ldrh	r4, [r0, #24]
 801a514:	f831 5b02 	ldrh.w	r5, [r1], #2
 801a518:	4294      	cmp	r4, r2
 801a51a:	d805      	bhi.n	801a528 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801a51c:	4b19      	ldr	r3, [pc, #100]	; (801a584 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801a51e:	4a1a      	ldr	r2, [pc, #104]	; (801a588 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801a520:	21c4      	movs	r1, #196	; 0xc4
 801a522:	481a      	ldr	r0, [pc, #104]	; (801a58c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801a524:	f00a ff96 	bl	8025454 <__assert_func>
 801a528:	8ac4      	ldrh	r4, [r0, #22]
 801a52a:	4414      	add	r4, r2
 801a52c:	3a01      	subs	r2, #1
 801a52e:	b2a4      	uxth	r4, r4
 801a530:	b292      	uxth	r2, r2
 801a532:	2c01      	cmp	r4, #1
 801a534:	bf88      	it	hi
 801a536:	3c02      	subhi	r4, #2
 801a538:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a53c:	8a64      	ldrh	r4, [r4, #18]
 801a53e:	42ac      	cmp	r4, r5
 801a540:	d0e5      	beq.n	801a50e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801a542:	2000      	movs	r0, #0
 801a544:	bd70      	pop	{r4, r5, r6, pc}
 801a546:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a54a:	2400      	movs	r4, #0
 801a54c:	4413      	add	r3, r2
 801a54e:	b2a2      	uxth	r2, r4
 801a550:	429a      	cmp	r2, r3
 801a552:	da14      	bge.n	801a57e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801a554:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801a556:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801a55a:	4296      	cmp	r6, r2
 801a55c:	d802      	bhi.n	801a564 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801a55e:	4b09      	ldr	r3, [pc, #36]	; (801a584 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801a560:	4a0b      	ldr	r2, [pc, #44]	; (801a590 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801a562:	e7dd      	b.n	801a520 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801a564:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801a566:	3401      	adds	r4, #1
 801a568:	4432      	add	r2, r6
 801a56a:	b292      	uxth	r2, r2
 801a56c:	2a09      	cmp	r2, #9
 801a56e:	bf88      	it	hi
 801a570:	3a0a      	subhi	r2, #10
 801a572:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a576:	8b52      	ldrh	r2, [r2, #26]
 801a578:	42aa      	cmp	r2, r5
 801a57a:	d0e8      	beq.n	801a54e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801a57c:	e7e1      	b.n	801a542 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a57e:	2001      	movs	r0, #1
 801a580:	e7e0      	b.n	801a544 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a582:	bf00      	nop
 801a584:	080295fd 	.word	0x080295fd
 801a588:	08029ab7 	.word	0x08029ab7
 801a58c:	080295c5 	.word	0x080295c5
 801a590:	0802975c 	.word	0x0802975c

0801a594 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a598:	4605      	mov	r5, r0
 801a59a:	4616      	mov	r6, r2
 801a59c:	1c8c      	adds	r4, r1, #2
 801a59e:	8809      	ldrh	r1, [r1, #0]
 801a5a0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a5a4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a5a8:	42b3      	cmp	r3, r6
 801a5aa:	d124      	bne.n	801a5f6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a5ac:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a5b0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a5b4:	f001 070f 	and.w	r7, r1, #15
 801a5b8:	4652      	mov	r2, sl
 801a5ba:	f8cd 8000 	str.w	r8, [sp]
 801a5be:	464b      	mov	r3, r9
 801a5c0:	4621      	mov	r1, r4
 801a5c2:	4628      	mov	r0, r5
 801a5c4:	f7ff ff9e 	bl	801a504 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a5c8:	4683      	mov	fp, r0
 801a5ca:	b168      	cbz	r0, 801a5e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a5cc:	eb0a 0109 	add.w	r1, sl, r9
 801a5d0:	463a      	mov	r2, r7
 801a5d2:	4628      	mov	r0, r5
 801a5d4:	4441      	add	r1, r8
 801a5d6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a5da:	4649      	mov	r1, r9
 801a5dc:	f7ff ff42 	bl	801a464 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a5e0:	4658      	mov	r0, fp
 801a5e2:	b003      	add	sp, #12
 801a5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5e8:	eb07 010a 	add.w	r1, r7, sl
 801a5ec:	4449      	add	r1, r9
 801a5ee:	4441      	add	r1, r8
 801a5f0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a5f4:	e7d2      	b.n	801a59c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a5f6:	f04f 0b00 	mov.w	fp, #0
 801a5fa:	e7f1      	b.n	801a5e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a5fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a5fc:	b570      	push	{r4, r5, r6, lr}
 801a5fe:	8810      	ldrh	r0, [r2, #0]
 801a600:	4298      	cmp	r0, r3
 801a602:	d817      	bhi.n	801a634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a604:	1e48      	subs	r0, r1, #1
 801a606:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a60a:	4298      	cmp	r0, r3
 801a60c:	d312      	bcc.n	801a634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a60e:	2400      	movs	r4, #0
 801a610:	428c      	cmp	r4, r1
 801a612:	d20f      	bcs.n	801a634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a614:	1860      	adds	r0, r4, r1
 801a616:	1040      	asrs	r0, r0, #1
 801a618:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a61c:	0085      	lsls	r5, r0, #2
 801a61e:	42b3      	cmp	r3, r6
 801a620:	d902      	bls.n	801a628 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a622:	3001      	adds	r0, #1
 801a624:	b284      	uxth	r4, r0
 801a626:	e7f3      	b.n	801a610 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a628:	d201      	bcs.n	801a62e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a62a:	b281      	uxth	r1, r0
 801a62c:	e7f0      	b.n	801a610 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a62e:	442a      	add	r2, r5
 801a630:	8850      	ldrh	r0, [r2, #2]
 801a632:	bd70      	pop	{r4, r5, r6, pc}
 801a634:	2000      	movs	r0, #0
 801a636:	e7fc      	b.n	801a632 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a638 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a63c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a63e:	4604      	mov	r4, r0
 801a640:	260b      	movs	r6, #11
 801a642:	886f      	ldrh	r7, [r5, #2]
 801a644:	087f      	lsrs	r7, r7, #1
 801a646:	3e01      	subs	r6, #1
 801a648:	d01b      	beq.n	801a682 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801a64a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a64c:	b92b      	cbnz	r3, 801a65a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801a64e:	4b0e      	ldr	r3, [pc, #56]	; (801a688 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801a650:	21bf      	movs	r1, #191	; 0xbf
 801a652:	4a0e      	ldr	r2, [pc, #56]	; (801a68c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801a654:	480e      	ldr	r0, [pc, #56]	; (801a690 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801a656:	f00a fefd 	bl	8025454 <__assert_func>
 801a65a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a65c:	462a      	mov	r2, r5
 801a65e:	4639      	mov	r1, r7
 801a660:	4620      	mov	r0, r4
 801a662:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a666:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801a66a:	4643      	mov	r3, r8
 801a66c:	f7ff ffc6 	bl	801a5fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a670:	b138      	cbz	r0, 801a682 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801a672:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a676:	4642      	mov	r2, r8
 801a678:	4620      	mov	r0, r4
 801a67a:	f7ff ff8b 	bl	801a594 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a67e:	2800      	cmp	r0, #0
 801a680:	d1e1      	bne.n	801a646 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a686:	bf00      	nop
 801a688:	080295bc 	.word	0x080295bc
 801a68c:	0802982e 	.word	0x0802982e
 801a690:	080295c5 	.word	0x080295c5

0801a694 <_ZN8touchgfx8ceil28_4El>:
 801a694:	f110 030f 	adds.w	r3, r0, #15
 801a698:	d401      	bmi.n	801a69e <_ZN8touchgfx8ceil28_4El+0xa>
 801a69a:	1118      	asrs	r0, r3, #4
 801a69c:	4770      	bx	lr
 801a69e:	2210      	movs	r2, #16
 801a6a0:	f1c0 0001 	rsb	r0, r0, #1
 801a6a4:	fb93 f3f2 	sdiv	r3, r3, r2
 801a6a8:	f010 000f 	ands.w	r0, r0, #15
 801a6ac:	bf18      	it	ne
 801a6ae:	2001      	movne	r0, #1
 801a6b0:	1a18      	subs	r0, r3, r0
 801a6b2:	4770      	bx	lr

0801a6b4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801a6b4:	2900      	cmp	r1, #0
 801a6b6:	b538      	push	{r3, r4, r5, lr}
 801a6b8:	dc05      	bgt.n	801a6c6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801a6ba:	4b0f      	ldr	r3, [pc, #60]	; (801a6f8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801a6bc:	21f7      	movs	r1, #247	; 0xf7
 801a6be:	4a0f      	ldr	r2, [pc, #60]	; (801a6fc <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801a6c0:	480f      	ldr	r0, [pc, #60]	; (801a700 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801a6c2:	f00a fec7 	bl	8025454 <__assert_func>
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	db06      	blt.n	801a6d8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801a6ca:	fb90 f4f1 	sdiv	r4, r0, r1
 801a6ce:	fb01 0114 	mls	r1, r1, r4, r0
 801a6d2:	6014      	str	r4, [r2, #0]
 801a6d4:	6019      	str	r1, [r3, #0]
 801a6d6:	bd38      	pop	{r3, r4, r5, pc}
 801a6d8:	4240      	negs	r0, r0
 801a6da:	fb90 f4f1 	sdiv	r4, r0, r1
 801a6de:	4265      	negs	r5, r4
 801a6e0:	fb01 0014 	mls	r0, r1, r4, r0
 801a6e4:	6015      	str	r5, [r2, #0]
 801a6e6:	6018      	str	r0, [r3, #0]
 801a6e8:	2800      	cmp	r0, #0
 801a6ea:	d0f4      	beq.n	801a6d6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801a6ec:	6810      	ldr	r0, [r2, #0]
 801a6ee:	3801      	subs	r0, #1
 801a6f0:	6010      	str	r0, [r2, #0]
 801a6f2:	6818      	ldr	r0, [r3, #0]
 801a6f4:	1a09      	subs	r1, r1, r0
 801a6f6:	e7ed      	b.n	801a6d4 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801a6f8:	08029b88 	.word	0x08029b88
 801a6fc:	08029bc7 	.word	0x08029bc7
 801a700:	08029b98 	.word	0x08029b98

0801a704 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a704:	b570      	push	{r4, r5, r6, lr}
 801a706:	694a      	ldr	r2, [r1, #20]
 801a708:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a70a:	684b      	ldr	r3, [r1, #4]
 801a70c:	1b54      	subs	r4, r2, r5
 801a70e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a710:	f000 8106 	beq.w	801a920 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801a714:	1b9b      	subs	r3, r3, r6
 801a716:	d003      	beq.n	801a720 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a718:	4363      	muls	r3, r4
 801a71a:	2210      	movs	r2, #16
 801a71c:	fb93 f3f2 	sdiv	r3, r3, r2
 801a720:	680c      	ldr	r4, [r1, #0]
 801a722:	698a      	ldr	r2, [r1, #24]
 801a724:	1b65      	subs	r5, r4, r5
 801a726:	f000 80fd 	beq.w	801a924 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801a72a:	1b92      	subs	r2, r2, r6
 801a72c:	d003      	beq.n	801a736 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a72e:	436a      	muls	r2, r5
 801a730:	2410      	movs	r4, #16
 801a732:	fb92 f2f4 	sdiv	r2, r2, r4
 801a736:	1a9b      	subs	r3, r3, r2
 801a738:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801a960 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801a73c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a740:	460a      	mov	r2, r1
 801a742:	ee07 3a90 	vmov	s15, r3
 801a746:	f100 040c 	add.w	r4, r0, #12
 801a74a:	4603      	mov	r3, r0
 801a74c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a750:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a754:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a758:	eeb1 6a43 	vneg.f32	s12, s6
 801a75c:	edd2 7a02 	vldr	s15, [r2, #8]
 801a760:	3214      	adds	r2, #20
 801a762:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a766:	ece3 6a01 	vstmia	r3!, {s13}
 801a76a:	429c      	cmp	r4, r3
 801a76c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a770:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a774:	edc3 7a02 	vstr	s15, [r3, #8]
 801a778:	ed52 7a01 	vldr	s15, [r2, #-4]
 801a77c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a780:	edc3 7a05 	vstr	s15, [r3, #20]
 801a784:	d1ea      	bne.n	801a75c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a786:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a788:	698b      	ldr	r3, [r1, #24]
 801a78a:	edd0 4a02 	vldr	s9, [r0, #8]
 801a78e:	1a9b      	subs	r3, r3, r2
 801a790:	edd0 3a00 	vldr	s7, [r0]
 801a794:	edd0 6a01 	vldr	s13, [r0, #4]
 801a798:	ee07 3a90 	vmov	s15, r3
 801a79c:	684b      	ldr	r3, [r1, #4]
 801a79e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a7a2:	ed90 5a05 	vldr	s10, [r0, #20]
 801a7a6:	1a9b      	subs	r3, r3, r2
 801a7a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a7ac:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a7b0:	ed90 2a03 	vldr	s4, [r0, #12]
 801a7b4:	ee07 3a10 	vmov	s14, r3
 801a7b8:	edd0 5a04 	vldr	s11, [r0, #16]
 801a7bc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a7c0:	ed90 1a07 	vldr	s2, [r0, #28]
 801a7c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7c8:	edd0 2a06 	vldr	s5, [r0, #24]
 801a7cc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a7d0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a7d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7d8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a7dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a7e0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a7e4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801a7e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a7ea:	694a      	ldr	r2, [r1, #20]
 801a7ec:	1b13      	subs	r3, r2, r4
 801a7ee:	ee07 3a10 	vmov	s14, r3
 801a7f2:	680b      	ldr	r3, [r1, #0]
 801a7f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7f8:	1b1b      	subs	r3, r3, r4
 801a7fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7fe:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a802:	ee07 3a10 	vmov	s14, r3
 801a806:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a80a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a80e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a812:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a816:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801a81a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a81c:	698b      	ldr	r3, [r1, #24]
 801a81e:	1a9b      	subs	r3, r3, r2
 801a820:	ee06 3a90 	vmov	s13, r3
 801a824:	684b      	ldr	r3, [r1, #4]
 801a826:	1a9b      	subs	r3, r3, r2
 801a828:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a82c:	ee07 3a10 	vmov	s14, r3
 801a830:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a834:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a838:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a83c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a840:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a844:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a848:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801a84c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a84e:	694a      	ldr	r2, [r1, #20]
 801a850:	1b13      	subs	r3, r2, r4
 801a852:	ee07 3a10 	vmov	s14, r3
 801a856:	680b      	ldr	r3, [r1, #0]
 801a858:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a85c:	1b1b      	subs	r3, r3, r4
 801a85e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a862:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a866:	ee07 3a10 	vmov	s14, r3
 801a86a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a86e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a872:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a876:	edd0 5a08 	vldr	s11, [r0, #32]
 801a87a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a87e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a882:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a886:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801a88a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a88c:	698b      	ldr	r3, [r1, #24]
 801a88e:	1a9b      	subs	r3, r3, r2
 801a890:	ee07 3a10 	vmov	s14, r3
 801a894:	684b      	ldr	r3, [r1, #4]
 801a896:	1a9b      	subs	r3, r3, r2
 801a898:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a89c:	ee01 3a90 	vmov	s3, r3
 801a8a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a8a4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a8a8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a8ac:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a8b0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a8b4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a8b8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a8bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a8be:	694a      	ldr	r2, [r1, #20]
 801a8c0:	1b13      	subs	r3, r2, r4
 801a8c2:	ee03 3a10 	vmov	s6, r3
 801a8c6:	680b      	ldr	r3, [r1, #0]
 801a8c8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a8cc:	1b1b      	subs	r3, r3, r4
 801a8ce:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a8d2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a8d6:	ee03 3a10 	vmov	s6, r3
 801a8da:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a8de:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a8e2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a8e6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a8ea:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a8ee:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801a8f2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a8f6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8fe:	dd13      	ble.n	801a928 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801a900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a904:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a908:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a90a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a90e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a916:	dd15      	ble.n	801a944 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801a918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a91c:	6403      	str	r3, [r0, #64]	; 0x40
 801a91e:	bd70      	pop	{r4, r5, r6, pc}
 801a920:	4623      	mov	r3, r4
 801a922:	e6fd      	b.n	801a720 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a924:	462a      	mov	r2, r5
 801a926:	e706      	b.n	801a736 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a928:	d502      	bpl.n	801a930 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801a92a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a92e:	e7e9      	b.n	801a904 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801a930:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a934:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a938:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a940:	dade      	bge.n	801a900 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801a942:	e7f2      	b.n	801a92a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a944:	d502      	bpl.n	801a94c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801a946:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a94a:	e7e7      	b.n	801a91c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a94c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a950:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a954:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a95c:	dadc      	bge.n	801a918 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a95e:	e7f2      	b.n	801a946 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a960:	3d800000 	.word	0x3d800000

0801a964 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a968:	f04f 0814 	mov.w	r8, #20
 801a96c:	4604      	mov	r4, r0
 801a96e:	4617      	mov	r7, r2
 801a970:	460d      	mov	r5, r1
 801a972:	fb08 f903 	mul.w	r9, r8, r3
 801a976:	461e      	mov	r6, r3
 801a978:	eb02 0a09 	add.w	sl, r2, r9
 801a97c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801a980:	f7ff fe88 	bl	801a694 <_ZN8touchgfx8ceil28_4El>
 801a984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a986:	6160      	str	r0, [r4, #20]
 801a988:	fb08 f803 	mul.w	r8, r8, r3
 801a98c:	9001      	str	r0, [sp, #4]
 801a98e:	eb07 0b08 	add.w	fp, r7, r8
 801a992:	f8db 0004 	ldr.w	r0, [fp, #4]
 801a996:	f7ff fe7d 	bl	801a694 <_ZN8touchgfx8ceil28_4El>
 801a99a:	9a01      	ldr	r2, [sp, #4]
 801a99c:	1a80      	subs	r0, r0, r2
 801a99e:	61a0      	str	r0, [r4, #24]
 801a9a0:	2800      	cmp	r0, #0
 801a9a2:	f000 8088 	beq.w	801aab6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801a9a6:	f857 3009 	ldr.w	r3, [r7, r9]
 801a9aa:	f857 c008 	ldr.w	ip, [r7, r8]
 801a9ae:	f8db 0004 	ldr.w	r0, [fp, #4]
 801a9b2:	ebac 0c03 	sub.w	ip, ip, r3
 801a9b6:	f8da 1004 	ldr.w	r1, [sl, #4]
 801a9ba:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801a9be:	1a40      	subs	r0, r0, r1
 801a9c0:	fb0b f202 	mul.w	r2, fp, r2
 801a9c4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801a9c8:	fb0c 2211 	mls	r2, ip, r1, r2
 801a9cc:	4641      	mov	r1, r8
 801a9ce:	fb00 2003 	mla	r0, r0, r3, r2
 801a9d2:	f104 0310 	add.w	r3, r4, #16
 801a9d6:	4622      	mov	r2, r4
 801a9d8:	3801      	subs	r0, #1
 801a9da:	4440      	add	r0, r8
 801a9dc:	f7ff fe6a 	bl	801a6b4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801a9e0:	f104 0308 	add.w	r3, r4, #8
 801a9e4:	1d22      	adds	r2, r4, #4
 801a9e6:	4641      	mov	r1, r8
 801a9e8:	4658      	mov	r0, fp
 801a9ea:	f7ff fe63 	bl	801a6b4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801a9ee:	f8c4 800c 	str.w	r8, [r4, #12]
 801a9f2:	6962      	ldr	r2, [r4, #20]
 801a9f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a9f8:	eddf 6a31 	vldr	s13, [pc, #196]	; 801aac0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a9fc:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801aa00:	6822      	ldr	r2, [r4, #0]
 801aa02:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801aa06:	ee07 3a10 	vmov	s14, r3
 801aa0a:	f857 3009 	ldr.w	r3, [r7, r9]
 801aa0e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801aa12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aa16:	ee07 3a90 	vmov	s15, r3
 801aa1a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801aa1e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801aa22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801aa2a:	edd3 6a00 	vldr	s13, [r3]
 801aa2e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801aa32:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801aa36:	eee6 6a27 	vfma.f32	s13, s12, s15
 801aa3a:	edc4 6a07 	vstr	s13, [r4, #28]
 801aa3e:	edd4 6a01 	vldr	s13, [r4, #4]
 801aa42:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801aa46:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801aa4a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801aa4e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801aa52:	ed84 6a08 	vstr	s12, [r4, #32]
 801aa56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801aa58:	6262      	str	r2, [r4, #36]	; 0x24
 801aa5a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801aa5e:	ed93 6a03 	vldr	s12, [r3, #12]
 801aa62:	eea5 6a87 	vfma.f32	s12, s11, s14
 801aa66:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801aa6a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801aa6e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801aa72:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801aa76:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801aa7a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801aa7e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801aa82:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801aa84:	6322      	str	r2, [r4, #48]	; 0x30
 801aa86:	ed93 6a06 	vldr	s12, [r3, #24]
 801aa8a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801aa8e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801aa92:	eeb0 7a46 	vmov.f32	s14, s12
 801aa96:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801aa9a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801aa9e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801aaa2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801aaa6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801aaaa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aaae:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801aab2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801aab4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801aab6:	4620      	mov	r0, r4
 801aab8:	b003      	add	sp, #12
 801aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabe:	bf00      	nop
 801aac0:	3d800000 	.word	0x3d800000

0801aac4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801aac4:	4602      	mov	r2, r0
 801aac6:	b148      	cbz	r0, 801aadc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801aac8:	2300      	movs	r3, #0
 801aaca:	b298      	uxth	r0, r3
 801aacc:	3301      	adds	r3, #1
 801aace:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801aad2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801aad6:	2900      	cmp	r1, #0
 801aad8:	d1f7      	bne.n	801aaca <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801aada:	4770      	bx	lr
 801aadc:	4770      	bx	lr

0801aade <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801aade:	b530      	push	{r4, r5, lr}
 801aae0:	4604      	mov	r4, r0
 801aae2:	b159      	cbz	r1, 801aafc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801aae4:	b148      	cbz	r0, 801aafa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801aae6:	2300      	movs	r3, #0
 801aae8:	b298      	uxth	r0, r3
 801aaea:	4282      	cmp	r2, r0
 801aaec:	d905      	bls.n	801aafa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801aaee:	5ccd      	ldrb	r5, [r1, r3]
 801aaf0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801aaf4:	3301      	adds	r3, #1
 801aaf6:	2d00      	cmp	r5, #0
 801aaf8:	d1f6      	bne.n	801aae8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801aafa:	bd30      	pop	{r4, r5, pc}
 801aafc:	4608      	mov	r0, r1
 801aafe:	e7fc      	b.n	801aafa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801ab00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801ab00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab02:	468c      	mov	ip, r1
 801ab04:	b08b      	sub	sp, #44	; 0x2c
 801ab06:	2100      	movs	r1, #0
 801ab08:	ae01      	add	r6, sp, #4
 801ab0a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ab0e:	211f      	movs	r1, #31
 801ab10:	fbb0 f7f3 	udiv	r7, r0, r3
 801ab14:	fb03 0517 	mls	r5, r3, r7, r0
 801ab18:	4638      	mov	r0, r7
 801ab1a:	b2ec      	uxtb	r4, r5
 801ab1c:	2d09      	cmp	r5, #9
 801ab1e:	bfd4      	ite	le
 801ab20:	3430      	addle	r4, #48	; 0x30
 801ab22:	3457      	addgt	r4, #87	; 0x57
 801ab24:	b2e4      	uxtb	r4, r4
 801ab26:	558c      	strb	r4, [r1, r6]
 801ab28:	1e4c      	subs	r4, r1, #1
 801ab2a:	b92f      	cbnz	r7, 801ab38 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801ab2c:	4431      	add	r1, r6
 801ab2e:	4660      	mov	r0, ip
 801ab30:	f7ff ffd5 	bl	801aade <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ab34:	b00b      	add	sp, #44	; 0x2c
 801ab36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab38:	4621      	mov	r1, r4
 801ab3a:	e7e9      	b.n	801ab10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801ab3c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801ab3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab3e:	4607      	mov	r7, r0
 801ab40:	b08b      	sub	sp, #44	; 0x2c
 801ab42:	4608      	mov	r0, r1
 801ab44:	b341      	cbz	r1, 801ab98 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ab46:	1e99      	subs	r1, r3, #2
 801ab48:	2922      	cmp	r1, #34	; 0x22
 801ab4a:	d825      	bhi.n	801ab98 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ab4c:	2100      	movs	r1, #0
 801ab4e:	463c      	mov	r4, r7
 801ab50:	261f      	movs	r6, #31
 801ab52:	f10d 0c04 	add.w	ip, sp, #4
 801ab56:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ab5a:	1e71      	subs	r1, r6, #1
 801ab5c:	fb94 fef3 	sdiv	lr, r4, r3
 801ab60:	fb03 441e 	mls	r4, r3, lr, r4
 801ab64:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801ab68:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801ab6c:	b2ec      	uxtb	r4, r5
 801ab6e:	2d09      	cmp	r5, #9
 801ab70:	bfd4      	ite	le
 801ab72:	3430      	addle	r4, #48	; 0x30
 801ab74:	3457      	addgt	r4, #87	; 0x57
 801ab76:	b2e4      	uxtb	r4, r4
 801ab78:	f80c 4006 	strb.w	r4, [ip, r6]
 801ab7c:	4674      	mov	r4, lr
 801ab7e:	b96c      	cbnz	r4, 801ab9c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801ab80:	2f00      	cmp	r7, #0
 801ab82:	da05      	bge.n	801ab90 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801ab84:	ab0a      	add	r3, sp, #40	; 0x28
 801ab86:	4419      	add	r1, r3
 801ab88:	232d      	movs	r3, #45	; 0x2d
 801ab8a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801ab8e:	1eb1      	subs	r1, r6, #2
 801ab90:	3101      	adds	r1, #1
 801ab92:	4461      	add	r1, ip
 801ab94:	f7ff ffa3 	bl	801aade <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ab98:	b00b      	add	sp, #44	; 0x2c
 801ab9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab9c:	460e      	mov	r6, r1
 801ab9e:	e7dc      	b.n	801ab5a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801aba0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aba4:	b085      	sub	sp, #20
 801aba6:	4691      	mov	r9, r2
 801aba8:	6802      	ldr	r2, [r0, #0]
 801abaa:	4688      	mov	r8, r1
 801abac:	461c      	mov	r4, r3
 801abae:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801abb2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801abb6:	4683      	mov	fp, r0
 801abb8:	4610      	mov	r0, r2
 801abba:	9103      	str	r1, [sp, #12]
 801abbc:	9302      	str	r3, [sp, #8]
 801abbe:	9201      	str	r2, [sp, #4]
 801abc0:	f7ff ff80 	bl	801aac4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801abc4:	f1b8 0f00 	cmp.w	r8, #0
 801abc8:	bf0c      	ite	eq
 801abca:	4684      	moveq	ip, r0
 801abcc:	f100 0c01 	addne.w	ip, r0, #1
 801abd0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801abd4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801abd8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801abda:	fa1f fc8c 	uxth.w	ip, ip
 801abde:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801abe0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801abe4:	9903      	ldr	r1, [sp, #12]
 801abe6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801abea:	d041      	beq.n	801ac70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801abec:	d834      	bhi.n	801ac58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801abee:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801abf2:	d059      	beq.n	801aca8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801abf4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801abf8:	d03a      	beq.n	801ac70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801abfa:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801abfe:	d034      	beq.n	801ac6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ac00:	2400      	movs	r4, #0
 801ac02:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801ac06:	3a01      	subs	r2, #1
 801ac08:	b169      	cbz	r1, 801ac26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ac0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ac0c:	458c      	cmp	ip, r1
 801ac0e:	da09      	bge.n	801ac24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ac10:	eba1 010c 	sub.w	r1, r1, ip
 801ac14:	b289      	uxth	r1, r1
 801ac16:	b933      	cbnz	r3, 801ac26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ac18:	2e00      	cmp	r6, #0
 801ac1a:	d051      	beq.n	801acc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ac1c:	2800      	cmp	r0, #0
 801ac1e:	d04f      	beq.n	801acc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ac20:	440c      	add	r4, r1
 801ac22:	b2a4      	uxth	r4, r4
 801ac24:	2100      	movs	r1, #0
 801ac26:	682b      	ldr	r3, [r5, #0]
 801ac28:	4293      	cmp	r3, r2
 801ac2a:	da07      	bge.n	801ac3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ac2c:	f1b8 0f00 	cmp.w	r8, #0
 801ac30:	d004      	beq.n	801ac3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ac32:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ac36:	682b      	ldr	r3, [r5, #0]
 801ac38:	3301      	adds	r3, #1
 801ac3a:	602b      	str	r3, [r5, #0]
 801ac3c:	2730      	movs	r7, #48	; 0x30
 801ac3e:	2c00      	cmp	r4, #0
 801ac40:	d04e      	beq.n	801ace0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ac42:	682e      	ldr	r6, [r5, #0]
 801ac44:	3c01      	subs	r4, #1
 801ac46:	42b2      	cmp	r2, r6
 801ac48:	b2a4      	uxth	r4, r4
 801ac4a:	dd49      	ble.n	801ace0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ac4c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ac50:	682b      	ldr	r3, [r5, #0]
 801ac52:	3301      	adds	r3, #1
 801ac54:	602b      	str	r3, [r5, #0]
 801ac56:	e7f2      	b.n	801ac3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801ac58:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801ac5c:	d01d      	beq.n	801ac9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801ac5e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801ac62:	d002      	beq.n	801ac6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ac64:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801ac68:	e7c9      	b.n	801abfe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801ac6a:	4684      	mov	ip, r0
 801ac6c:	f04f 0800 	mov.w	r8, #0
 801ac70:	2c00      	cmp	r4, #0
 801ac72:	d0c6      	beq.n	801ac02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ac74:	b947      	cbnz	r7, 801ac88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ac76:	2801      	cmp	r0, #1
 801ac78:	d106      	bne.n	801ac88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ac7a:	8814      	ldrh	r4, [r2, #0]
 801ac7c:	2c30      	cmp	r4, #48	; 0x30
 801ac7e:	bf02      	ittt	eq
 801ac80:	3202      	addeq	r2, #2
 801ac82:	4638      	moveq	r0, r7
 801ac84:	f8cb 2000 	streq.w	r2, [fp]
 801ac88:	45bc      	cmp	ip, r7
 801ac8a:	da14      	bge.n	801acb6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801ac8c:	b2bf      	uxth	r7, r7
 801ac8e:	eba7 040c 	sub.w	r4, r7, ip
 801ac92:	46bc      	mov	ip, r7
 801ac94:	b2a4      	uxth	r4, r4
 801ac96:	2600      	movs	r6, #0
 801ac98:	e7b3      	b.n	801ac02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ac9a:	4684      	mov	ip, r0
 801ac9c:	b16c      	cbz	r4, 801acba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801ac9e:	42b8      	cmp	r0, r7
 801aca0:	dd00      	ble.n	801aca4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801aca2:	b2b8      	uxth	r0, r7
 801aca4:	2400      	movs	r4, #0
 801aca6:	e003      	b.n	801acb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801aca8:	f04f 0c01 	mov.w	ip, #1
 801acac:	2400      	movs	r4, #0
 801acae:	4660      	mov	r0, ip
 801acb0:	4626      	mov	r6, r4
 801acb2:	46a0      	mov	r8, r4
 801acb4:	e7a5      	b.n	801ac02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801acb6:	2400      	movs	r4, #0
 801acb8:	e7ed      	b.n	801ac96 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801acba:	4626      	mov	r6, r4
 801acbc:	46a0      	mov	r8, r4
 801acbe:	e7a0      	b.n	801ac02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801acc0:	2900      	cmp	r1, #0
 801acc2:	d0b0      	beq.n	801ac26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801acc4:	2720      	movs	r7, #32
 801acc6:	682e      	ldr	r6, [r5, #0]
 801acc8:	2900      	cmp	r1, #0
 801acca:	d0ac      	beq.n	801ac26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801accc:	3901      	subs	r1, #1
 801acce:	4296      	cmp	r6, r2
 801acd0:	b289      	uxth	r1, r1
 801acd2:	daa7      	bge.n	801ac24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801acd4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801acd8:	682b      	ldr	r3, [r5, #0]
 801acda:	3301      	adds	r3, #1
 801acdc:	602b      	str	r3, [r5, #0]
 801acde:	e7f2      	b.n	801acc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801ace0:	b188      	cbz	r0, 801ad06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ace2:	682b      	ldr	r3, [r5, #0]
 801ace4:	3801      	subs	r0, #1
 801ace6:	429a      	cmp	r2, r3
 801ace8:	b280      	uxth	r0, r0
 801acea:	dd0c      	ble.n	801ad06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801acec:	f8db 3000 	ldr.w	r3, [fp]
 801acf0:	1c9c      	adds	r4, r3, #2
 801acf2:	f8cb 4000 	str.w	r4, [fp]
 801acf6:	881c      	ldrh	r4, [r3, #0]
 801acf8:	682b      	ldr	r3, [r5, #0]
 801acfa:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801acfe:	682b      	ldr	r3, [r5, #0]
 801ad00:	3301      	adds	r3, #1
 801ad02:	602b      	str	r3, [r5, #0]
 801ad04:	e7ec      	b.n	801ace0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ad06:	2620      	movs	r6, #32
 801ad08:	b151      	cbz	r1, 801ad20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ad0a:	6828      	ldr	r0, [r5, #0]
 801ad0c:	3901      	subs	r1, #1
 801ad0e:	4282      	cmp	r2, r0
 801ad10:	b289      	uxth	r1, r1
 801ad12:	dd05      	ble.n	801ad20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ad14:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801ad18:	682b      	ldr	r3, [r5, #0]
 801ad1a:	3301      	adds	r3, #1
 801ad1c:	602b      	str	r3, [r5, #0]
 801ad1e:	e7f3      	b.n	801ad08 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801ad20:	b005      	add	sp, #20
 801ad22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801ad26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad2a:	2400      	movs	r4, #0
 801ad2c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801ad30:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801ad34:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801ad38:	8014      	strh	r4, [r2, #0]
 801ad3a:	701c      	strb	r4, [r3, #0]
 801ad3c:	f888 4000 	strb.w	r4, [r8]
 801ad40:	f88c 4000 	strb.w	r4, [ip]
 801ad44:	f88e 4000 	strb.w	r4, [lr]
 801ad48:	703c      	strb	r4, [r7, #0]
 801ad4a:	6804      	ldr	r4, [r0, #0]
 801ad4c:	b1a4      	cbz	r4, 801ad78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801ad4e:	8824      	ldrh	r4, [r4, #0]
 801ad50:	f04f 0901 	mov.w	r9, #1
 801ad54:	b314      	cbz	r4, 801ad9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ad56:	2c2b      	cmp	r4, #43	; 0x2b
 801ad58:	d001      	beq.n	801ad5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801ad5a:	2c20      	cmp	r4, #32
 801ad5c:	d110      	bne.n	801ad80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801ad5e:	8014      	strh	r4, [r2, #0]
 801ad60:	6804      	ldr	r4, [r0, #0]
 801ad62:	b10c      	cbz	r4, 801ad68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801ad64:	3402      	adds	r4, #2
 801ad66:	6004      	str	r4, [r0, #0]
 801ad68:	680c      	ldr	r4, [r1, #0]
 801ad6a:	b10c      	cbz	r4, 801ad70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801ad6c:	3401      	adds	r4, #1
 801ad6e:	600c      	str	r4, [r1, #0]
 801ad70:	6804      	ldr	r4, [r0, #0]
 801ad72:	b17c      	cbz	r4, 801ad94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801ad74:	8824      	ldrh	r4, [r4, #0]
 801ad76:	e7ed      	b.n	801ad54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801ad78:	680c      	ldr	r4, [r1, #0]
 801ad7a:	b17c      	cbz	r4, 801ad9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ad7c:	7824      	ldrb	r4, [r4, #0]
 801ad7e:	e7e7      	b.n	801ad50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801ad80:	2c2d      	cmp	r4, #45	; 0x2d
 801ad82:	d102      	bne.n	801ad8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801ad84:	f883 9000 	strb.w	r9, [r3]
 801ad88:	e7ea      	b.n	801ad60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801ad8a:	2c23      	cmp	r4, #35	; 0x23
 801ad8c:	d107      	bne.n	801ad9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801ad8e:	f888 9000 	strb.w	r9, [r8]
 801ad92:	e7e5      	b.n	801ad60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801ad94:	680c      	ldr	r4, [r1, #0]
 801ad96:	b10c      	cbz	r4, 801ad9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ad98:	7824      	ldrb	r4, [r4, #0]
 801ad9a:	e7db      	b.n	801ad54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801ad9c:	2400      	movs	r4, #0
 801ad9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801ada2:	2b09      	cmp	r3, #9
 801ada4:	d901      	bls.n	801adaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801ada6:	2c2a      	cmp	r4, #42	; 0x2a
 801ada8:	d122      	bne.n	801adf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801adaa:	2301      	movs	r3, #1
 801adac:	2c30      	cmp	r4, #48	; 0x30
 801adae:	f88e 3000 	strb.w	r3, [lr]
 801adb2:	d10d      	bne.n	801add0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801adb4:	f88c 3000 	strb.w	r3, [ip]
 801adb8:	6803      	ldr	r3, [r0, #0]
 801adba:	b10b      	cbz	r3, 801adc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801adbc:	3302      	adds	r3, #2
 801adbe:	6003      	str	r3, [r0, #0]
 801adc0:	680b      	ldr	r3, [r1, #0]
 801adc2:	b10b      	cbz	r3, 801adc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801adc4:	3301      	adds	r3, #1
 801adc6:	600b      	str	r3, [r1, #0]
 801adc8:	6803      	ldr	r3, [r0, #0]
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d02f      	beq.n	801ae2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801adce:	881c      	ldrh	r4, [r3, #0]
 801add0:	2c2a      	cmp	r4, #42	; 0x2a
 801add2:	d135      	bne.n	801ae40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801add4:	f04f 33ff 	mov.w	r3, #4294967295
 801add8:	6033      	str	r3, [r6, #0]
 801adda:	6803      	ldr	r3, [r0, #0]
 801addc:	b10b      	cbz	r3, 801ade2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801adde:	3302      	adds	r3, #2
 801ade0:	6003      	str	r3, [r0, #0]
 801ade2:	680b      	ldr	r3, [r1, #0]
 801ade4:	b10b      	cbz	r3, 801adea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801ade6:	3301      	adds	r3, #1
 801ade8:	600b      	str	r3, [r1, #0]
 801adea:	6803      	ldr	r3, [r0, #0]
 801adec:	b31b      	cbz	r3, 801ae36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801adee:	881c      	ldrh	r4, [r3, #0]
 801adf0:	2c2e      	cmp	r4, #46	; 0x2e
 801adf2:	d11a      	bne.n	801ae2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801adf4:	2301      	movs	r3, #1
 801adf6:	703b      	strb	r3, [r7, #0]
 801adf8:	6803      	ldr	r3, [r0, #0]
 801adfa:	b10b      	cbz	r3, 801ae00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801adfc:	3302      	adds	r3, #2
 801adfe:	6003      	str	r3, [r0, #0]
 801ae00:	680b      	ldr	r3, [r1, #0]
 801ae02:	b10b      	cbz	r3, 801ae08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801ae04:	3301      	adds	r3, #1
 801ae06:	600b      	str	r3, [r1, #0]
 801ae08:	6803      	ldr	r3, [r0, #0]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d036      	beq.n	801ae7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801ae0e:	881b      	ldrh	r3, [r3, #0]
 801ae10:	2b2a      	cmp	r3, #42	; 0x2a
 801ae12:	d137      	bne.n	801ae84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ae14:	f04f 33ff 	mov.w	r3, #4294967295
 801ae18:	602b      	str	r3, [r5, #0]
 801ae1a:	6803      	ldr	r3, [r0, #0]
 801ae1c:	b10b      	cbz	r3, 801ae22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801ae1e:	3302      	adds	r3, #2
 801ae20:	6003      	str	r3, [r0, #0]
 801ae22:	680b      	ldr	r3, [r1, #0]
 801ae24:	b10b      	cbz	r3, 801ae2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ae26:	3301      	adds	r3, #1
 801ae28:	600b      	str	r3, [r1, #0]
 801ae2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae2e:	680c      	ldr	r4, [r1, #0]
 801ae30:	b134      	cbz	r4, 801ae40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ae32:	7824      	ldrb	r4, [r4, #0]
 801ae34:	e7cc      	b.n	801add0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ae36:	680b      	ldr	r3, [r1, #0]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d0f6      	beq.n	801ae2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ae3c:	781c      	ldrb	r4, [r3, #0]
 801ae3e:	e7d7      	b.n	801adf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ae40:	2300      	movs	r3, #0
 801ae42:	220a      	movs	r2, #10
 801ae44:	6033      	str	r3, [r6, #0]
 801ae46:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ae4a:	fa1f f38c 	uxth.w	r3, ip
 801ae4e:	2b09      	cmp	r3, #9
 801ae50:	d8ce      	bhi.n	801adf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ae52:	6833      	ldr	r3, [r6, #0]
 801ae54:	fb02 c303 	mla	r3, r2, r3, ip
 801ae58:	6033      	str	r3, [r6, #0]
 801ae5a:	6803      	ldr	r3, [r0, #0]
 801ae5c:	b10b      	cbz	r3, 801ae62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801ae5e:	3302      	adds	r3, #2
 801ae60:	6003      	str	r3, [r0, #0]
 801ae62:	680b      	ldr	r3, [r1, #0]
 801ae64:	b10b      	cbz	r3, 801ae6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801ae66:	3301      	adds	r3, #1
 801ae68:	600b      	str	r3, [r1, #0]
 801ae6a:	6803      	ldr	r3, [r0, #0]
 801ae6c:	b10b      	cbz	r3, 801ae72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801ae6e:	881c      	ldrh	r4, [r3, #0]
 801ae70:	e7e9      	b.n	801ae46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ae72:	680c      	ldr	r4, [r1, #0]
 801ae74:	2c00      	cmp	r4, #0
 801ae76:	d0e6      	beq.n	801ae46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ae78:	7824      	ldrb	r4, [r4, #0]
 801ae7a:	e7e4      	b.n	801ae46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ae7c:	680b      	ldr	r3, [r1, #0]
 801ae7e:	b10b      	cbz	r3, 801ae84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ae80:	781b      	ldrb	r3, [r3, #0]
 801ae82:	e7c5      	b.n	801ae10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801ae84:	2200      	movs	r2, #0
 801ae86:	240a      	movs	r4, #10
 801ae88:	602a      	str	r2, [r5, #0]
 801ae8a:	3b30      	subs	r3, #48	; 0x30
 801ae8c:	682a      	ldr	r2, [r5, #0]
 801ae8e:	b29e      	uxth	r6, r3
 801ae90:	2e09      	cmp	r6, #9
 801ae92:	d813      	bhi.n	801aebc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801ae94:	fb04 3302 	mla	r3, r4, r2, r3
 801ae98:	602b      	str	r3, [r5, #0]
 801ae9a:	6803      	ldr	r3, [r0, #0]
 801ae9c:	b10b      	cbz	r3, 801aea2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801ae9e:	3302      	adds	r3, #2
 801aea0:	6003      	str	r3, [r0, #0]
 801aea2:	680b      	ldr	r3, [r1, #0]
 801aea4:	b10b      	cbz	r3, 801aeaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801aea6:	3301      	adds	r3, #1
 801aea8:	600b      	str	r3, [r1, #0]
 801aeaa:	6803      	ldr	r3, [r0, #0]
 801aeac:	b10b      	cbz	r3, 801aeb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801aeae:	881b      	ldrh	r3, [r3, #0]
 801aeb0:	e7eb      	b.n	801ae8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801aeb2:	680b      	ldr	r3, [r1, #0]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d0e8      	beq.n	801ae8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801aeb8:	781b      	ldrb	r3, [r3, #0]
 801aeba:	e7e6      	b.n	801ae8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801aebc:	2a06      	cmp	r2, #6
 801aebe:	bfa8      	it	ge
 801aec0:	2206      	movge	r2, #6
 801aec2:	602a      	str	r2, [r5, #0]
 801aec4:	e7b1      	b.n	801ae2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801aec6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801aec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeca:	b0a3      	sub	sp, #140	; 0x8c
 801aecc:	2600      	movs	r6, #0
 801aece:	4607      	mov	r7, r0
 801aed0:	4688      	mov	r8, r1
 801aed2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801aed6:	4631      	mov	r1, r6
 801aed8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801aeda:	4648      	mov	r0, r9
 801aedc:	960d      	str	r6, [sp, #52]	; 0x34
 801aede:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801aee2:	2242      	movs	r2, #66	; 0x42
 801aee4:	f00a fb42 	bl	802556c <memset>
 801aee8:	b15f      	cbz	r7, 801af02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801aeea:	f108 3aff 	add.w	sl, r8, #4294967295
 801aeee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aef2:	b152      	cbz	r2, 801af0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801aef4:	8812      	ldrh	r2, [r2, #0]
 801aef6:	b10a      	cbz	r2, 801aefc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801aef8:	459a      	cmp	sl, r3
 801aefa:	dc2e      	bgt.n	801af5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801aefc:	2200      	movs	r2, #0
 801aefe:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801af02:	4638      	mov	r0, r7
 801af04:	b023      	add	sp, #140	; 0x8c
 801af06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af0a:	9a08      	ldr	r2, [sp, #32]
 801af0c:	2a00      	cmp	r2, #0
 801af0e:	d0f5      	beq.n	801aefc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801af10:	7812      	ldrb	r2, [r2, #0]
 801af12:	e7f0      	b.n	801aef6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801af14:	2d00      	cmp	r5, #0
 801af16:	d0ea      	beq.n	801aeee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801af18:	782a      	ldrb	r2, [r5, #0]
 801af1a:	b142      	cbz	r2, 801af2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801af1c:	2a25      	cmp	r2, #37	; 0x25
 801af1e:	d001      	beq.n	801af24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801af20:	459a      	cmp	sl, r3
 801af22:	dc08      	bgt.n	801af36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801af24:	f1bb 0f00 	cmp.w	fp, #0
 801af28:	d121      	bne.n	801af6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801af2a:	2d00      	cmp	r5, #0
 801af2c:	d0df      	beq.n	801aeee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801af2e:	782a      	ldrb	r2, [r5, #0]
 801af30:	f04f 0b00 	mov.w	fp, #0
 801af34:	e01d      	b.n	801af72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801af36:	f1bb 0f00 	cmp.w	fp, #0
 801af3a:	d077      	beq.n	801b02c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801af3c:	f8bb 2000 	ldrh.w	r2, [fp]
 801af40:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801af44:	f1bb 0f00 	cmp.w	fp, #0
 801af48:	d002      	beq.n	801af50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801af4a:	f10b 0202 	add.w	r2, fp, #2
 801af4e:	9209      	str	r2, [sp, #36]	; 0x24
 801af50:	b10d      	cbz	r5, 801af56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801af52:	3501      	adds	r5, #1
 801af54:	9508      	str	r5, [sp, #32]
 801af56:	3301      	adds	r3, #1
 801af58:	930d      	str	r3, [sp, #52]	; 0x34
 801af5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af5c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801af60:	f1bb 0f00 	cmp.w	fp, #0
 801af64:	d0d6      	beq.n	801af14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801af66:	f8bb 2000 	ldrh.w	r2, [fp]
 801af6a:	2a00      	cmp	r2, #0
 801af6c:	d1d6      	bne.n	801af1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801af6e:	f8bb 2000 	ldrh.w	r2, [fp]
 801af72:	2a00      	cmp	r2, #0
 801af74:	d0bb      	beq.n	801aeee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801af76:	459a      	cmp	sl, r3
 801af78:	ddb9      	ble.n	801aeee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801af7a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801af7e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801af82:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801af86:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801af8a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801af8e:	960e      	str	r6, [sp, #56]	; 0x38
 801af90:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801af94:	960f      	str	r6, [sp, #60]	; 0x3c
 801af96:	f1bb 0f00 	cmp.w	fp, #0
 801af9a:	d002      	beq.n	801afa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801af9c:	f10b 0302 	add.w	r3, fp, #2
 801afa0:	9309      	str	r3, [sp, #36]	; 0x24
 801afa2:	b10d      	cbz	r5, 801afa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801afa4:	1c6b      	adds	r3, r5, #1
 801afa6:	9308      	str	r3, [sp, #32]
 801afa8:	ab0f      	add	r3, sp, #60	; 0x3c
 801afaa:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801afae:	a908      	add	r1, sp, #32
 801afb0:	a809      	add	r0, sp, #36	; 0x24
 801afb2:	9305      	str	r3, [sp, #20]
 801afb4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801afb8:	9304      	str	r3, [sp, #16]
 801afba:	ab0e      	add	r3, sp, #56	; 0x38
 801afbc:	9303      	str	r3, [sp, #12]
 801afbe:	ab0c      	add	r3, sp, #48	; 0x30
 801afc0:	9302      	str	r3, [sp, #8]
 801afc2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801afc6:	9301      	str	r3, [sp, #4]
 801afc8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801afcc:	9300      	str	r3, [sp, #0]
 801afce:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801afd2:	f7ff fea8 	bl	801ad26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801afd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801afd8:	2b00      	cmp	r3, #0
 801afda:	bfbf      	itttt	lt
 801afdc:	6823      	ldrlt	r3, [r4, #0]
 801afde:	3404      	addlt	r4, #4
 801afe0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801afe4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801afe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801afe8:	2b00      	cmp	r3, #0
 801afea:	bfbe      	ittt	lt
 801afec:	6823      	ldrlt	r3, [r4, #0]
 801afee:	3404      	addlt	r4, #4
 801aff0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801aff4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801aff8:	bfb8      	it	lt
 801affa:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801affc:	b1d9      	cbz	r1, 801b036 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801affe:	880b      	ldrh	r3, [r1, #0]
 801b000:	2b69      	cmp	r3, #105	; 0x69
 801b002:	d01f      	beq.n	801b044 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b004:	d82f      	bhi.n	801b066 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801b006:	2b58      	cmp	r3, #88	; 0x58
 801b008:	d01c      	beq.n	801b044 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b00a:	d818      	bhi.n	801b03e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801b00c:	2b25      	cmp	r3, #37	; 0x25
 801b00e:	d034      	beq.n	801b07a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801b010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b012:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801b016:	f1bb 0f00 	cmp.w	fp, #0
 801b01a:	f000 80b7 	beq.w	801b18c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801b01e:	f8bb 5000 	ldrh.w	r5, [fp]
 801b022:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801b026:	3301      	adds	r3, #1
 801b028:	930d      	str	r3, [sp, #52]	; 0x34
 801b02a:	e029      	b.n	801b080 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b02c:	b10d      	cbz	r5, 801b032 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801b02e:	782a      	ldrb	r2, [r5, #0]
 801b030:	e786      	b.n	801af40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b032:	462a      	mov	r2, r5
 801b034:	e784      	b.n	801af40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b036:	2a00      	cmp	r2, #0
 801b038:	d0ea      	beq.n	801b010 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b03a:	7813      	ldrb	r3, [r2, #0]
 801b03c:	e7e0      	b.n	801b000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801b03e:	3b63      	subs	r3, #99	; 0x63
 801b040:	2b01      	cmp	r3, #1
 801b042:	d8e5      	bhi.n	801b010 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b044:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801b048:	b329      	cbz	r1, 801b096 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801b04a:	880b      	ldrh	r3, [r1, #0]
 801b04c:	2b69      	cmp	r3, #105	; 0x69
 801b04e:	d063      	beq.n	801b118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b050:	d825      	bhi.n	801b09e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801b052:	2b63      	cmp	r3, #99	; 0x63
 801b054:	d038      	beq.n	801b0c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801b056:	2b64      	cmp	r3, #100	; 0x64
 801b058:	d05e      	beq.n	801b118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b05a:	2b58      	cmp	r3, #88	; 0x58
 801b05c:	d07a      	beq.n	801b154 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801b05e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b062:	4625      	mov	r5, r4
 801b064:	e036      	b.n	801b0d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b066:	2b73      	cmp	r3, #115	; 0x73
 801b068:	d0ec      	beq.n	801b044 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b06a:	d802      	bhi.n	801b072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801b06c:	2b6f      	cmp	r3, #111	; 0x6f
 801b06e:	d1cf      	bne.n	801b010 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b070:	e7e8      	b.n	801b044 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b072:	2b75      	cmp	r3, #117	; 0x75
 801b074:	d0e6      	beq.n	801b044 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b076:	2b78      	cmp	r3, #120	; 0x78
 801b078:	e7f9      	b.n	801b06e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801b07a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b07c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801b080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b082:	b10b      	cbz	r3, 801b088 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801b084:	3302      	adds	r3, #2
 801b086:	9309      	str	r3, [sp, #36]	; 0x24
 801b088:	9b08      	ldr	r3, [sp, #32]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	f43f af2f 	beq.w	801aeee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b090:	3301      	adds	r3, #1
 801b092:	9308      	str	r3, [sp, #32]
 801b094:	e72b      	b.n	801aeee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b096:	2a00      	cmp	r2, #0
 801b098:	d0e1      	beq.n	801b05e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b09a:	7813      	ldrb	r3, [r2, #0]
 801b09c:	e7d6      	b.n	801b04c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801b09e:	2b73      	cmp	r3, #115	; 0x73
 801b0a0:	d036      	beq.n	801b110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801b0a2:	d807      	bhi.n	801b0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801b0a4:	2b6f      	cmp	r3, #111	; 0x6f
 801b0a6:	d1da      	bne.n	801b05e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b0a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0aa:	1d25      	adds	r5, r4, #4
 801b0ac:	2308      	movs	r3, #8
 801b0ae:	eba8 0202 	sub.w	r2, r8, r2
 801b0b2:	e049      	b.n	801b148 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b0b4:	2b75      	cmp	r3, #117	; 0x75
 801b0b6:	d042      	beq.n	801b13e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801b0b8:	2b78      	cmp	r3, #120	; 0x78
 801b0ba:	d1d0      	bne.n	801b05e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b0bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0be:	1d25      	adds	r5, r4, #4
 801b0c0:	2310      	movs	r3, #16
 801b0c2:	eba8 0202 	sub.w	r2, r8, r2
 801b0c6:	e03f      	b.n	801b148 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b0c8:	7823      	ldrb	r3, [r4, #0]
 801b0ca:	1d25      	adds	r5, r4, #4
 801b0cc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801b0d0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d051      	beq.n	801b182 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801b0de:	881a      	ldrh	r2, [r3, #0]
 801b0e0:	a80d      	add	r0, sp, #52	; 0x34
 801b0e2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b0e6:	462c      	mov	r4, r5
 801b0e8:	9005      	str	r0, [sp, #20]
 801b0ea:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801b0ee:	9004      	str	r0, [sp, #16]
 801b0f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b0f2:	9003      	str	r0, [sp, #12]
 801b0f4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801b0f8:	9002      	str	r0, [sp, #8]
 801b0fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b0fc:	9001      	str	r0, [sp, #4]
 801b0fe:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801b102:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801b106:	9000      	str	r0, [sp, #0]
 801b108:	a810      	add	r0, sp, #64	; 0x40
 801b10a:	f7ff fd49 	bl	801aba0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b10e:	e7b7      	b.n	801b080 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b110:	1d25      	adds	r5, r4, #4
 801b112:	6823      	ldr	r3, [r4, #0]
 801b114:	9310      	str	r3, [sp, #64]	; 0x40
 801b116:	e7dd      	b.n	801b0d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b11a:	230a      	movs	r3, #10
 801b11c:	4649      	mov	r1, r9
 801b11e:	6820      	ldr	r0, [r4, #0]
 801b120:	eba8 0202 	sub.w	r2, r8, r2
 801b124:	1d25      	adds	r5, r4, #4
 801b126:	b292      	uxth	r2, r2
 801b128:	f7ff fd08 	bl	801ab3c <_ZN8touchgfx7Unicode4itoaElPtti>
 801b12c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b130:	2b2d      	cmp	r3, #45	; 0x2d
 801b132:	d1cf      	bne.n	801b0d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b134:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b138:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b13a:	3302      	adds	r3, #2
 801b13c:	e7ea      	b.n	801b114 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801b13e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b140:	1d25      	adds	r5, r4, #4
 801b142:	230a      	movs	r3, #10
 801b144:	eba8 0202 	sub.w	r2, r8, r2
 801b148:	b292      	uxth	r2, r2
 801b14a:	4649      	mov	r1, r9
 801b14c:	6820      	ldr	r0, [r4, #0]
 801b14e:	f7ff fcd7 	bl	801ab00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b152:	e7bf      	b.n	801b0d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b156:	2310      	movs	r3, #16
 801b158:	4649      	mov	r1, r9
 801b15a:	6820      	ldr	r0, [r4, #0]
 801b15c:	eba8 0202 	sub.w	r2, r8, r2
 801b160:	1d25      	adds	r5, r4, #4
 801b162:	b292      	uxth	r2, r2
 801b164:	f7ff fccc 	bl	801ab00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b168:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b16c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b170:	2b00      	cmp	r3, #0
 801b172:	d0af      	beq.n	801b0d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b174:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b178:	2919      	cmp	r1, #25
 801b17a:	d8f7      	bhi.n	801b16c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b17c:	3b20      	subs	r3, #32
 801b17e:	8013      	strh	r3, [r2, #0]
 801b180:	e7f4      	b.n	801b16c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b182:	9a08      	ldr	r2, [sp, #32]
 801b184:	2a00      	cmp	r2, #0
 801b186:	d0ab      	beq.n	801b0e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b188:	7812      	ldrb	r2, [r2, #0]
 801b18a:	e7a9      	b.n	801b0e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b18c:	2d00      	cmp	r5, #0
 801b18e:	f43f af48 	beq.w	801b022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801b192:	782d      	ldrb	r5, [r5, #0]
 801b194:	e745      	b.n	801b022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801b196 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b196:	b507      	push	{r0, r1, r2, lr}
 801b198:	9300      	str	r3, [sp, #0]
 801b19a:	4613      	mov	r3, r2
 801b19c:	2200      	movs	r2, #0
 801b19e:	f7ff fe92 	bl	801aec6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801b1a2:	b003      	add	sp, #12
 801b1a4:	f85d fb04 	ldr.w	pc, [sp], #4

0801b1a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b1a8:	b40c      	push	{r2, r3}
 801b1aa:	b507      	push	{r0, r1, r2, lr}
 801b1ac:	ab04      	add	r3, sp, #16
 801b1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1b2:	9301      	str	r3, [sp, #4]
 801b1b4:	f7ff ffef 	bl	801b196 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b1b8:	b003      	add	sp, #12
 801b1ba:	f85d eb04 	ldr.w	lr, [sp], #4
 801b1be:	b002      	add	sp, #8
 801b1c0:	4770      	bx	lr
	...

0801b1c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b1c4:	4b01      	ldr	r3, [pc, #4]	; (801b1cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b1c6:	6018      	str	r0, [r3, #0]
 801b1c8:	4770      	bx	lr
 801b1ca:	bf00      	nop
 801b1cc:	200565bc 	.word	0x200565bc

0801b1d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b1d0:	4b06      	ldr	r3, [pc, #24]	; (801b1ec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b1d2:	881a      	ldrh	r2, [r3, #0]
 801b1d4:	4282      	cmp	r2, r0
 801b1d6:	d807      	bhi.n	801b1e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b1d8:	4b05      	ldr	r3, [pc, #20]	; (801b1f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b1da:	881b      	ldrh	r3, [r3, #0]
 801b1dc:	4413      	add	r3, r2
 801b1de:	4298      	cmp	r0, r3
 801b1e0:	bfac      	ite	ge
 801b1e2:	2000      	movge	r0, #0
 801b1e4:	2001      	movlt	r0, #1
 801b1e6:	4770      	bx	lr
 801b1e8:	2000      	movs	r0, #0
 801b1ea:	4770      	bx	lr
 801b1ec:	200565dc 	.word	0x200565dc
 801b1f0:	200565e0 	.word	0x200565e0

0801b1f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b1f4:	b508      	push	{r3, lr}
 801b1f6:	4601      	mov	r1, r0
 801b1f8:	f7ff ffea 	bl	801b1d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b1fc:	b118      	cbz	r0, 801b206 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b1fe:	4b02      	ldr	r3, [pc, #8]	; (801b208 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b206:	bd08      	pop	{r3, pc}
 801b208:	200565c0 	.word	0x200565c0

0801b20c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b210:	4d28      	ldr	r5, [pc, #160]	; (801b2b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b212:	682b      	ldr	r3, [r5, #0]
 801b214:	2b00      	cmp	r3, #0
 801b216:	d04a      	beq.n	801b2ae <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b218:	4a27      	ldr	r2, [pc, #156]	; (801b2b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b21a:	4e28      	ldr	r6, [pc, #160]	; (801b2bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b21c:	8810      	ldrh	r0, [r2, #0]
 801b21e:	f8b6 8000 	ldrh.w	r8, [r6]
 801b222:	4c27      	ldr	r4, [pc, #156]	; (801b2c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b224:	4440      	add	r0, r8
 801b226:	4f27      	ldr	r7, [pc, #156]	; (801b2c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b228:	1c41      	adds	r1, r0, #1
 801b22a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801b22e:	f021 0101 	bic.w	r1, r1, #1
 801b232:	eb03 020e 	add.w	r2, r3, lr
 801b236:	0409      	lsls	r1, r1, #16
 801b238:	6022      	str	r2, [r4, #0]
 801b23a:	0c09      	lsrs	r1, r1, #16
 801b23c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801b240:	eb0e 010c 	add.w	r1, lr, ip
 801b244:	185a      	adds	r2, r3, r1
 801b246:	603a      	str	r2, [r7, #0]
 801b248:	220e      	movs	r2, #14
 801b24a:	fb02 f208 	mul.w	r2, r2, r8
 801b24e:	3203      	adds	r2, #3
 801b250:	f022 0203 	bic.w	r2, r2, #3
 801b254:	4411      	add	r1, r2
 801b256:	440b      	add	r3, r1
 801b258:	491b      	ldr	r1, [pc, #108]	; (801b2c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b25a:	600b      	str	r3, [r1, #0]
 801b25c:	2300      	movs	r3, #0
 801b25e:	491b      	ldr	r1, [pc, #108]	; (801b2cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b260:	800b      	strh	r3, [r1, #0]
 801b262:	491b      	ldr	r1, [pc, #108]	; (801b2d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b264:	6809      	ldr	r1, [r1, #0]
 801b266:	eba1 010e 	sub.w	r1, r1, lr
 801b26a:	eba1 010c 	sub.w	r1, r1, ip
 801b26e:	469c      	mov	ip, r3
 801b270:	1a8a      	subs	r2, r1, r2
 801b272:	4918      	ldr	r1, [pc, #96]	; (801b2d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801b274:	600a      	str	r2, [r1, #0]
 801b276:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b27a:	4a17      	ldr	r2, [pc, #92]	; (801b2d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801b27c:	8013      	strh	r3, [r2, #0]
 801b27e:	4283      	cmp	r3, r0
 801b280:	d10d      	bne.n	801b29e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801b282:	8835      	ldrh	r5, [r6, #0]
 801b284:	2300      	movs	r3, #0
 801b286:	6838      	ldr	r0, [r7, #0]
 801b288:	240e      	movs	r4, #14
 801b28a:	429d      	cmp	r5, r3
 801b28c:	d90f      	bls.n	801b2ae <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b28e:	fb04 0203 	mla	r2, r4, r3, r0
 801b292:	3301      	adds	r3, #1
 801b294:	7b11      	ldrb	r1, [r2, #12]
 801b296:	f36f 1145 	bfc	r1, #5, #1
 801b29a:	7311      	strb	r1, [r2, #12]
 801b29c:	e7f5      	b.n	801b28a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801b29e:	682a      	ldr	r2, [r5, #0]
 801b2a0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b2a4:	6822      	ldr	r2, [r4, #0]
 801b2a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b2aa:	3301      	adds	r3, #1
 801b2ac:	e7e7      	b.n	801b27e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801b2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2b2:	bf00      	nop
 801b2b4:	200565c0 	.word	0x200565c0
 801b2b8:	200565dc 	.word	0x200565dc
 801b2bc:	200565e0 	.word	0x200565e0
 801b2c0:	200565d4 	.word	0x200565d4
 801b2c4:	200565c4 	.word	0x200565c4
 801b2c8:	200565cc 	.word	0x200565cc
 801b2cc:	200565de 	.word	0x200565de
 801b2d0:	200565c8 	.word	0x200565c8
 801b2d4:	200565d8 	.word	0x200565d8
 801b2d8:	200565d0 	.word	0x200565d0

0801b2dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b2dc:	4b10      	ldr	r3, [pc, #64]	; (801b320 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b2de:	b510      	push	{r4, lr}
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	b9db      	cbnz	r3, 801b31c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b2e4:	b1d1      	cbz	r1, 801b31c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b2e6:	4b0f      	ldr	r3, [pc, #60]	; (801b324 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b2e8:	240e      	movs	r4, #14
 801b2ea:	801a      	strh	r2, [r3, #0]
 801b2ec:	b292      	uxth	r2, r2
 801b2ee:	4b0e      	ldr	r3, [pc, #56]	; (801b328 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b2f0:	881b      	ldrh	r3, [r3, #0]
 801b2f2:	4413      	add	r3, r2
 801b2f4:	4362      	muls	r2, r4
 801b2f6:	2406      	movs	r4, #6
 801b2f8:	fb04 2203 	mla	r2, r4, r3, r2
 801b2fc:	428a      	cmp	r2, r1
 801b2fe:	d305      	bcc.n	801b30c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b300:	4b0a      	ldr	r3, [pc, #40]	; (801b32c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b302:	2135      	movs	r1, #53	; 0x35
 801b304:	4a0a      	ldr	r2, [pc, #40]	; (801b330 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b306:	480b      	ldr	r0, [pc, #44]	; (801b334 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b308:	f00a f8a4 	bl	8025454 <__assert_func>
 801b30c:	4b0a      	ldr	r3, [pc, #40]	; (801b338 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b30e:	6019      	str	r1, [r3, #0]
 801b310:	4b0a      	ldr	r3, [pc, #40]	; (801b33c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b312:	6018      	str	r0, [r3, #0]
 801b314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b318:	f7ff bf78 	b.w	801b20c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b31c:	bd10      	pop	{r4, pc}
 801b31e:	bf00      	nop
 801b320:	200565cc 	.word	0x200565cc
 801b324:	200565e0 	.word	0x200565e0
 801b328:	200565dc 	.word	0x200565dc
 801b32c:	08029c65 	.word	0x08029c65
 801b330:	08029cfa 	.word	0x08029cfa
 801b334:	08029c40 	.word	0x08029c40
 801b338:	200565c8 	.word	0x200565c8
 801b33c:	200565c0 	.word	0x200565c0

0801b340 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b340:	b470      	push	{r4, r5, r6}
 801b342:	4c07      	ldr	r4, [pc, #28]	; (801b360 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b344:	4605      	mov	r5, r0
 801b346:	4610      	mov	r0, r2
 801b348:	9a03      	ldr	r2, [sp, #12]
 801b34a:	6826      	ldr	r6, [r4, #0]
 801b34c:	b936      	cbnz	r6, 801b35c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b34e:	6025      	str	r5, [r4, #0]
 801b350:	4c04      	ldr	r4, [pc, #16]	; (801b364 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b352:	8021      	strh	r1, [r4, #0]
 801b354:	4619      	mov	r1, r3
 801b356:	bc70      	pop	{r4, r5, r6}
 801b358:	f7ff bfc0 	b.w	801b2dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b35c:	bc70      	pop	{r4, r5, r6}
 801b35e:	4770      	bx	lr
 801b360:	200565e4 	.word	0x200565e4
 801b364:	200565dc 	.word	0x200565dc

0801b368 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b368:	b508      	push	{r3, lr}
 801b36a:	4b14      	ldr	r3, [pc, #80]	; (801b3bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b36c:	6819      	ldr	r1, [r3, #0]
 801b36e:	b931      	cbnz	r1, 801b37e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b370:	4b13      	ldr	r3, [pc, #76]	; (801b3c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b372:	f240 4186 	movw	r1, #1158	; 0x486
 801b376:	4a13      	ldr	r2, [pc, #76]	; (801b3c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b378:	4813      	ldr	r0, [pc, #76]	; (801b3c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b37a:	f00a f86b 	bl	8025454 <__assert_func>
 801b37e:	4a13      	ldr	r2, [pc, #76]	; (801b3cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b380:	8803      	ldrh	r3, [r0, #0]
 801b382:	8812      	ldrh	r2, [r2, #0]
 801b384:	4293      	cmp	r3, r2
 801b386:	d204      	bcs.n	801b392 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b388:	2214      	movs	r2, #20
 801b38a:	fb02 1303 	mla	r3, r2, r3, r1
 801b38e:	8918      	ldrh	r0, [r3, #8]
 801b390:	bd08      	pop	{r3, pc}
 801b392:	490f      	ldr	r1, [pc, #60]	; (801b3d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b394:	8809      	ldrh	r1, [r1, #0]
 801b396:	4411      	add	r1, r2
 801b398:	428b      	cmp	r3, r1
 801b39a:	da06      	bge.n	801b3aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b39c:	1a9b      	subs	r3, r3, r2
 801b39e:	4a0d      	ldr	r2, [pc, #52]	; (801b3d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b3a0:	210e      	movs	r1, #14
 801b3a2:	6812      	ldr	r2, [r2, #0]
 801b3a4:	fb01 2303 	mla	r3, r1, r3, r2
 801b3a8:	e7f1      	b.n	801b38e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b3aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b3ae:	4293      	cmp	r3, r2
 801b3b0:	bf0a      	itet	eq
 801b3b2:	4b09      	ldreq	r3, [pc, #36]	; (801b3d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b3b4:	2000      	movne	r0, #0
 801b3b6:	8818      	ldrheq	r0, [r3, #0]
 801b3b8:	e7ea      	b.n	801b390 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b3ba:	bf00      	nop
 801b3bc:	200565e4 	.word	0x200565e4
 801b3c0:	08029cbe 	.word	0x08029cbe
 801b3c4:	08029d71 	.word	0x08029d71
 801b3c8:	08029c40 	.word	0x08029c40
 801b3cc:	200565dc 	.word	0x200565dc
 801b3d0:	200565e0 	.word	0x200565e0
 801b3d4:	200565c4 	.word	0x200565c4
 801b3d8:	20056530 	.word	0x20056530

0801b3dc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b3dc:	b508      	push	{r3, lr}
 801b3de:	4b14      	ldr	r3, [pc, #80]	; (801b430 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b3e0:	6819      	ldr	r1, [r3, #0]
 801b3e2:	b931      	cbnz	r1, 801b3f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b3e4:	4b13      	ldr	r3, [pc, #76]	; (801b434 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b3e6:	f240 419a 	movw	r1, #1178	; 0x49a
 801b3ea:	4a13      	ldr	r2, [pc, #76]	; (801b438 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b3ec:	4813      	ldr	r0, [pc, #76]	; (801b43c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b3ee:	f00a f831 	bl	8025454 <__assert_func>
 801b3f2:	4a13      	ldr	r2, [pc, #76]	; (801b440 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b3f4:	8803      	ldrh	r3, [r0, #0]
 801b3f6:	8812      	ldrh	r2, [r2, #0]
 801b3f8:	4293      	cmp	r3, r2
 801b3fa:	d204      	bcs.n	801b406 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b3fc:	2214      	movs	r2, #20
 801b3fe:	fb02 1303 	mla	r3, r2, r3, r1
 801b402:	8958      	ldrh	r0, [r3, #10]
 801b404:	bd08      	pop	{r3, pc}
 801b406:	490f      	ldr	r1, [pc, #60]	; (801b444 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b408:	8809      	ldrh	r1, [r1, #0]
 801b40a:	4411      	add	r1, r2
 801b40c:	428b      	cmp	r3, r1
 801b40e:	da06      	bge.n	801b41e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b410:	1a9b      	subs	r3, r3, r2
 801b412:	4a0d      	ldr	r2, [pc, #52]	; (801b448 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b414:	210e      	movs	r1, #14
 801b416:	6812      	ldr	r2, [r2, #0]
 801b418:	fb01 2303 	mla	r3, r1, r3, r2
 801b41c:	e7f1      	b.n	801b402 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b41e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b422:	4293      	cmp	r3, r2
 801b424:	bf0a      	itet	eq
 801b426:	4b09      	ldreq	r3, [pc, #36]	; (801b44c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b428:	2000      	movne	r0, #0
 801b42a:	8818      	ldrheq	r0, [r3, #0]
 801b42c:	e7ea      	b.n	801b404 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b42e:	bf00      	nop
 801b430:	200565e4 	.word	0x200565e4
 801b434:	08029cbe 	.word	0x08029cbe
 801b438:	08029d9d 	.word	0x08029d9d
 801b43c:	08029c40 	.word	0x08029c40
 801b440:	200565dc 	.word	0x200565dc
 801b444:	200565e0 	.word	0x200565e0
 801b448:	200565c4 	.word	0x200565c4
 801b44c:	20056532 	.word	0x20056532

0801b450 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b450:	b508      	push	{r3, lr}
 801b452:	4b12      	ldr	r3, [pc, #72]	; (801b49c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b454:	6819      	ldr	r1, [r3, #0]
 801b456:	b931      	cbnz	r1, 801b466 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b458:	4b11      	ldr	r3, [pc, #68]	; (801b4a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b45a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801b45e:	4a11      	ldr	r2, [pc, #68]	; (801b4a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b460:	4811      	ldr	r0, [pc, #68]	; (801b4a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b462:	f009 fff7 	bl	8025454 <__assert_func>
 801b466:	8803      	ldrh	r3, [r0, #0]
 801b468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b46c:	4293      	cmp	r3, r2
 801b46e:	d012      	beq.n	801b496 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b470:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b474:	4293      	cmp	r3, r2
 801b476:	d103      	bne.n	801b480 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b478:	4b0c      	ldr	r3, [pc, #48]	; (801b4ac <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b47e:	bd08      	pop	{r3, pc}
 801b480:	4a0b      	ldr	r2, [pc, #44]	; (801b4b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b482:	6812      	ldr	r2, [r2, #0]
 801b484:	b11a      	cbz	r2, 801b48e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b486:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b48a:	2800      	cmp	r0, #0
 801b48c:	d1f7      	bne.n	801b47e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b48e:	2214      	movs	r2, #20
 801b490:	4353      	muls	r3, r2
 801b492:	58c8      	ldr	r0, [r1, r3]
 801b494:	e7f3      	b.n	801b47e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b496:	2000      	movs	r0, #0
 801b498:	e7f1      	b.n	801b47e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b49a:	bf00      	nop
 801b49c:	200565e4 	.word	0x200565e4
 801b4a0:	08029cbe 	.word	0x08029cbe
 801b4a4:	08029d40 	.word	0x08029d40
 801b4a8:	08029c40 	.word	0x08029c40
 801b4ac:	2005653c 	.word	0x2005653c
 801b4b0:	200565c0 	.word	0x200565c0

0801b4b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b4b4:	8802      	ldrh	r2, [r0, #0]
 801b4b6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b4ba:	429a      	cmp	r2, r3
 801b4bc:	d845      	bhi.n	801b54a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b4be:	4b24      	ldr	r3, [pc, #144]	; (801b550 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b4c0:	8818      	ldrh	r0, [r3, #0]
 801b4c2:	4282      	cmp	r2, r0
 801b4c4:	d221      	bcs.n	801b50a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801b4c6:	4b23      	ldr	r3, [pc, #140]	; (801b554 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b4c8:	6819      	ldr	r1, [r3, #0]
 801b4ca:	2314      	movs	r3, #20
 801b4cc:	fb03 1302 	mla	r3, r3, r2, r1
 801b4d0:	6858      	ldr	r0, [r3, #4]
 801b4d2:	2800      	cmp	r0, #0
 801b4d4:	d03a      	beq.n	801b54c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b4d6:	4920      	ldr	r1, [pc, #128]	; (801b558 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b4d8:	6809      	ldr	r1, [r1, #0]
 801b4da:	2900      	cmp	r1, #0
 801b4dc:	d036      	beq.n	801b54c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b4de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b4e2:	2900      	cmp	r1, #0
 801b4e4:	d032      	beq.n	801b54c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b4e6:	891a      	ldrh	r2, [r3, #8]
 801b4e8:	8958      	ldrh	r0, [r3, #10]
 801b4ea:	4350      	muls	r0, r2
 801b4ec:	7c5a      	ldrb	r2, [r3, #17]
 801b4ee:	7cdb      	ldrb	r3, [r3, #19]
 801b4f0:	0952      	lsrs	r2, r2, #5
 801b4f2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b4f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b4fa:	2b0b      	cmp	r3, #11
 801b4fc:	bf18      	it	ne
 801b4fe:	0040      	lslne	r0, r0, #1
 801b500:	3003      	adds	r0, #3
 801b502:	f020 0003 	bic.w	r0, r0, #3
 801b506:	4408      	add	r0, r1
 801b508:	4770      	bx	lr
 801b50a:	4b14      	ldr	r3, [pc, #80]	; (801b55c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801b50c:	881b      	ldrh	r3, [r3, #0]
 801b50e:	4403      	add	r3, r0
 801b510:	429a      	cmp	r2, r3
 801b512:	da1a      	bge.n	801b54a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b514:	4b12      	ldr	r3, [pc, #72]	; (801b560 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801b516:	1a10      	subs	r0, r2, r0
 801b518:	210e      	movs	r1, #14
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	fb01 3000 	mla	r0, r1, r0, r3
 801b520:	7b03      	ldrb	r3, [r0, #12]
 801b522:	f003 031f 	and.w	r3, r3, #31
 801b526:	2b0b      	cmp	r3, #11
 801b528:	d10b      	bne.n	801b542 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b52a:	8903      	ldrh	r3, [r0, #8]
 801b52c:	8940      	ldrh	r0, [r0, #10]
 801b52e:	4358      	muls	r0, r3
 801b530:	4b09      	ldr	r3, [pc, #36]	; (801b558 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b532:	3003      	adds	r0, #3
 801b534:	6819      	ldr	r1, [r3, #0]
 801b536:	f020 0303 	bic.w	r3, r0, #3
 801b53a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b53e:	4418      	add	r0, r3
 801b540:	4770      	bx	lr
 801b542:	2b0d      	cmp	r3, #13
 801b544:	d101      	bne.n	801b54a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b546:	300d      	adds	r0, #13
 801b548:	4770      	bx	lr
 801b54a:	2000      	movs	r0, #0
 801b54c:	4770      	bx	lr
 801b54e:	bf00      	nop
 801b550:	200565dc 	.word	0x200565dc
 801b554:	200565e4 	.word	0x200565e4
 801b558:	200565c0 	.word	0x200565c0
 801b55c:	200565e0 	.word	0x200565e0
 801b560:	200565c4 	.word	0x200565c4

0801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b564:	4b17      	ldr	r3, [pc, #92]	; (801b5c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b566:	b510      	push	{r4, lr}
 801b568:	6819      	ldr	r1, [r3, #0]
 801b56a:	8803      	ldrh	r3, [r0, #0]
 801b56c:	b1e9      	cbz	r1, 801b5aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801b56e:	4a16      	ldr	r2, [pc, #88]	; (801b5c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b570:	8812      	ldrh	r2, [r2, #0]
 801b572:	429a      	cmp	r2, r3
 801b574:	d90a      	bls.n	801b58c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801b576:	2214      	movs	r2, #20
 801b578:	fb02 1303 	mla	r3, r2, r3, r1
 801b57c:	7c58      	ldrb	r0, [r3, #17]
 801b57e:	0942      	lsrs	r2, r0, #5
 801b580:	7cd8      	ldrb	r0, [r3, #19]
 801b582:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b586:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b58a:	bd10      	pop	{r4, pc}
 801b58c:	490f      	ldr	r1, [pc, #60]	; (801b5cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b58e:	8809      	ldrh	r1, [r1, #0]
 801b590:	4411      	add	r1, r2
 801b592:	428b      	cmp	r3, r1
 801b594:	da09      	bge.n	801b5aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801b596:	1a9b      	subs	r3, r3, r2
 801b598:	4a0d      	ldr	r2, [pc, #52]	; (801b5d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b59a:	210e      	movs	r1, #14
 801b59c:	6812      	ldr	r2, [r2, #0]
 801b59e:	fb01 2303 	mla	r3, r1, r3, r2
 801b5a2:	7b18      	ldrb	r0, [r3, #12]
 801b5a4:	f000 001f 	and.w	r0, r0, #31
 801b5a8:	e7ef      	b.n	801b58a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b5aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b5ae:	4293      	cmp	r3, r2
 801b5b0:	d106      	bne.n	801b5c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b5b2:	f7e9 ff6b 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 801b5b6:	6803      	ldr	r3, [r0, #0]
 801b5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5be:	4718      	bx	r3
 801b5c0:	2000      	movs	r0, #0
 801b5c2:	e7e2      	b.n	801b58a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b5c4:	200565e4 	.word	0x200565e4
 801b5c8:	200565dc 	.word	0x200565dc
 801b5cc:	200565e0 	.word	0x200565e0
 801b5d0:	200565c4 	.word	0x200565c4

0801b5d4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b5d4:	2018      	movs	r0, #24
 801b5d6:	4770      	bx	lr

0801b5d8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b5d8:	2001      	movs	r0, #1
 801b5da:	4770      	bx	lr

0801b5dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5e0:	b085      	sub	sp, #20
 801b5e2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b5e4:	9203      	str	r2, [sp, #12]
 801b5e6:	6870      	ldr	r0, [r6, #4]
 801b5e8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b5ec:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801b5f0:	9101      	str	r1, [sp, #4]
 801b5f2:	fa1f f885 	uxth.w	r8, r5
 801b5f6:	43ed      	mvns	r5, r5
 801b5f8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b5fc:	b2ed      	uxtb	r5, r5
 801b5fe:	fb00 2404 	mla	r4, r0, r4, r2
 801b602:	6832      	ldr	r2, [r6, #0]
 801b604:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b608:	4414      	add	r4, r2
 801b60a:	f8dc 2000 	ldr.w	r2, [ip]
 801b60e:	9202      	str	r2, [sp, #8]
 801b610:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b614:	f102 0e04 	add.w	lr, r2, #4
 801b618:	9a01      	ldr	r2, [sp, #4]
 801b61a:	2a00      	cmp	r2, #0
 801b61c:	dc03      	bgt.n	801b626 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b61e:	9a03      	ldr	r2, [sp, #12]
 801b620:	2a00      	cmp	r2, #0
 801b622:	f340 8116 	ble.w	801b852 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b628:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b62c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b630:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b632:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b636:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	dd0e      	ble.n	801b65c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b63e:	1406      	asrs	r6, r0, #16
 801b640:	d405      	bmi.n	801b64e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b642:	4556      	cmp	r6, sl
 801b644:	da03      	bge.n	801b64e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b646:	1416      	asrs	r6, r2, #16
 801b648:	d401      	bmi.n	801b64e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b64a:	454e      	cmp	r6, r9
 801b64c:	db07      	blt.n	801b65e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b64e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b650:	3b01      	subs	r3, #1
 801b652:	3403      	adds	r4, #3
 801b654:	4430      	add	r0, r6
 801b656:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b658:	4432      	add	r2, r6
 801b65a:	e7ee      	b.n	801b63a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b65c:	d063      	beq.n	801b726 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b65e:	1e5e      	subs	r6, r3, #1
 801b660:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b662:	fb07 0706 	mla	r7, r7, r6, r0
 801b666:	143f      	asrs	r7, r7, #16
 801b668:	d454      	bmi.n	801b714 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b66a:	4557      	cmp	r7, sl
 801b66c:	da52      	bge.n	801b714 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b66e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801b670:	fb07 2606 	mla	r6, r7, r6, r2
 801b674:	1436      	asrs	r6, r6, #16
 801b676:	d44d      	bmi.n	801b714 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b678:	454e      	cmp	r6, r9
 801b67a:	da4b      	bge.n	801b714 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b67c:	1ce6      	adds	r6, r4, #3
 801b67e:	4699      	mov	r9, r3
 801b680:	f1b9 0f00 	cmp.w	r9, #0
 801b684:	f106 0603 	add.w	r6, r6, #3
 801b688:	dd48      	ble.n	801b71c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801b68a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b68e:	1417      	asrs	r7, r2, #16
 801b690:	9902      	ldr	r1, [sp, #8]
 801b692:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b696:	f109 39ff 	add.w	r9, r9, #4294967295
 801b69a:	fb0b 1707 	mla	r7, fp, r7, r1
 801b69e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b6a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b6a4:	f817 700a 	ldrb.w	r7, [r7, sl]
 801b6a8:	fb1b fb05 	smulbb	fp, fp, r5
 801b6ac:	4408      	add	r0, r1
 801b6ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b6b0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b6b4:	440a      	add	r2, r1
 801b6b6:	eb0e 0a07 	add.w	sl, lr, r7
 801b6ba:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801b6be:	fb07 b708 	mla	r7, r7, r8, fp
 801b6c2:	b2bf      	uxth	r7, r7
 801b6c4:	f107 0b01 	add.w	fp, r7, #1
 801b6c8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b6cc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b6d0:	fb1b fb05 	smulbb	fp, fp, r5
 801b6d4:	123f      	asrs	r7, r7, #8
 801b6d6:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b6da:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b6de:	fb07 b708 	mla	r7, r7, r8, fp
 801b6e2:	b2bf      	uxth	r7, r7
 801b6e4:	f107 0b01 	add.w	fp, r7, #1
 801b6e8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b6ec:	123f      	asrs	r7, r7, #8
 801b6ee:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b6f2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b6f6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b6fa:	fb1a fa05 	smulbb	sl, sl, r5
 801b6fe:	fb07 a708 	mla	r7, r7, r8, sl
 801b702:	b2bf      	uxth	r7, r7
 801b704:	f107 0a01 	add.w	sl, r7, #1
 801b708:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b70c:	123f      	asrs	r7, r7, #8
 801b70e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b712:	e7b5      	b.n	801b680 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801b714:	2700      	movs	r7, #0
 801b716:	1bde      	subs	r6, r3, r7
 801b718:	2e00      	cmp	r6, #0
 801b71a:	dc42      	bgt.n	801b7a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801b71c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b724:	441c      	add	r4, r3
 801b726:	9b01      	ldr	r3, [sp, #4]
 801b728:	2b00      	cmp	r3, #0
 801b72a:	f340 8092 	ble.w	801b852 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b72e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b734:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b738:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b73c:	eef0 6a62 	vmov.f32	s13, s5
 801b740:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b744:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b748:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b74c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b750:	eef0 6a43 	vmov.f32	s13, s6
 801b754:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b758:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b75c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b760:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b764:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b768:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b76c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b770:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b774:	ee12 2a90 	vmov	r2, s5
 801b778:	eef0 2a47 	vmov.f32	s5, s14
 801b77c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b780:	ee13 2a10 	vmov	r2, s6
 801b784:	9311      	str	r3, [sp, #68]	; 0x44
 801b786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b788:	eeb0 3a67 	vmov.f32	s6, s15
 801b78c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b790:	9312      	str	r3, [sp, #72]	; 0x48
 801b792:	9b01      	ldr	r3, [sp, #4]
 801b794:	9a03      	ldr	r2, [sp, #12]
 801b796:	3b01      	subs	r3, #1
 801b798:	9301      	str	r3, [sp, #4]
 801b79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b79c:	bf08      	it	eq
 801b79e:	4613      	moveq	r3, r2
 801b7a0:	e73a      	b.n	801b618 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b7a2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b7a6:	d44e      	bmi.n	801b846 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b7a8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b7ac:	4556      	cmp	r6, sl
 801b7ae:	dd4a      	ble.n	801b846 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b7b0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b7b4:	d447      	bmi.n	801b846 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b7b6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801b7ba:	4559      	cmp	r1, fp
 801b7bc:	dd43      	ble.n	801b846 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b7be:	fa0f f986 	sxth.w	r9, r6
 801b7c2:	9902      	ldr	r1, [sp, #8]
 801b7c4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b7c8:	fb0b 1909 	mla	r9, fp, r9, r1
 801b7cc:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b7d0:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b7d4:	fb1b fb05 	smulbb	fp, fp, r5
 801b7d8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b7dc:	eb0e 0a09 	add.w	sl, lr, r9
 801b7e0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801b7e4:	fb09 b908 	mla	r9, r9, r8, fp
 801b7e8:	fa1f f989 	uxth.w	r9, r9
 801b7ec:	f109 0b01 	add.w	fp, r9, #1
 801b7f0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b7f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b7f8:	f804 9006 	strb.w	r9, [r4, r6]
 801b7fc:	4426      	add	r6, r4
 801b7fe:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b802:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b806:	fb1b fb05 	smulbb	fp, fp, r5
 801b80a:	fb09 b908 	mla	r9, r9, r8, fp
 801b80e:	fa1f f989 	uxth.w	r9, r9
 801b812:	f109 0b01 	add.w	fp, r9, #1
 801b816:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b81a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b81e:	f886 9001 	strb.w	r9, [r6, #1]
 801b822:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b826:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b82a:	fb1a fa05 	smulbb	sl, sl, r5
 801b82e:	fb09 a908 	mla	r9, r9, r8, sl
 801b832:	fa1f f989 	uxth.w	r9, r9
 801b836:	f109 0a01 	add.w	sl, r9, #1
 801b83a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b83e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b842:	f886 9002 	strb.w	r9, [r6, #2]
 801b846:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b848:	3701      	adds	r7, #1
 801b84a:	4408      	add	r0, r1
 801b84c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b84e:	440a      	add	r2, r1
 801b850:	e761      	b.n	801b716 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b852:	b005      	add	sp, #20
 801b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b858 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b85c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b85e:	4693      	mov	fp, r2
 801b860:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b866:	6868      	ldr	r0, [r5, #4]
 801b868:	6877      	ldr	r7, [r6, #4]
 801b86a:	9100      	str	r1, [sp, #0]
 801b86c:	3704      	adds	r7, #4
 801b86e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b872:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801b876:	fb00 2404 	mla	r4, r0, r4, r2
 801b87a:	682a      	ldr	r2, [r5, #0]
 801b87c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b880:	4414      	add	r4, r2
 801b882:	6832      	ldr	r2, [r6, #0]
 801b884:	9201      	str	r2, [sp, #4]
 801b886:	9a00      	ldr	r2, [sp, #0]
 801b888:	2a00      	cmp	r2, #0
 801b88a:	dc03      	bgt.n	801b894 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b88c:	f1bb 0f00 	cmp.w	fp, #0
 801b890:	f340 80bc 	ble.w	801ba0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b894:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b896:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801b89a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b89e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b8a0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801b8a4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	dd0c      	ble.n	801b8c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b8ac:	1405      	asrs	r5, r0, #16
 801b8ae:	d405      	bmi.n	801b8bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b8b0:	4555      	cmp	r5, sl
 801b8b2:	da03      	bge.n	801b8bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b8b4:	1415      	asrs	r5, r2, #16
 801b8b6:	d401      	bmi.n	801b8bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b8b8:	454d      	cmp	r5, r9
 801b8ba:	db05      	blt.n	801b8c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b8bc:	4440      	add	r0, r8
 801b8be:	4472      	add	r2, lr
 801b8c0:	3b01      	subs	r3, #1
 801b8c2:	3403      	adds	r4, #3
 801b8c4:	e7f0      	b.n	801b8a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b8c6:	d03f      	beq.n	801b948 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801b8c8:	1e5d      	subs	r5, r3, #1
 801b8ca:	fb08 0c05 	mla	ip, r8, r5, r0
 801b8ce:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801b8d2:	d42e      	bmi.n	801b932 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b8d4:	45d4      	cmp	ip, sl
 801b8d6:	da2c      	bge.n	801b932 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b8d8:	fb0e 2505 	mla	r5, lr, r5, r2
 801b8dc:	142d      	asrs	r5, r5, #16
 801b8de:	d428      	bmi.n	801b932 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b8e0:	454d      	cmp	r5, r9
 801b8e2:	da26      	bge.n	801b932 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b8e4:	1ce5      	adds	r5, r4, #3
 801b8e6:	469c      	mov	ip, r3
 801b8e8:	f1bc 0f00 	cmp.w	ip, #0
 801b8ec:	f105 0503 	add.w	r5, r5, #3
 801b8f0:	dd25      	ble.n	801b93e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801b8f2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b8f6:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b8fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b8fe:	4472      	add	r2, lr
 801b900:	468a      	mov	sl, r1
 801b902:	9901      	ldr	r1, [sp, #4]
 801b904:	fb0a 1909 	mla	r9, sl, r9, r1
 801b908:	1401      	asrs	r1, r0, #16
 801b90a:	4440      	add	r0, r8
 801b90c:	f819 9001 	ldrb.w	r9, [r9, r1]
 801b910:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b914:	eb07 0a09 	add.w	sl, r7, r9
 801b918:	f817 9009 	ldrb.w	r9, [r7, r9]
 801b91c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b920:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b924:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b928:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b92c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b930:	e7da      	b.n	801b8e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b932:	2500      	movs	r5, #0
 801b934:	eba3 0c05 	sub.w	ip, r3, r5
 801b938:	f1bc 0f00 	cmp.w	ip, #0
 801b93c:	dc3b      	bgt.n	801b9b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b93e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b942:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b946:	441c      	add	r4, r3
 801b948:	9b00      	ldr	r3, [sp, #0]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	dd5e      	ble.n	801ba0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b94e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b954:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b958:	eeb0 6a62 	vmov.f32	s12, s5
 801b95c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b960:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b964:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b968:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b96c:	eeb0 6a43 	vmov.f32	s12, s6
 801b970:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b974:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b978:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b97c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b980:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b984:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b988:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b98c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b990:	ee12 2a90 	vmov	r2, s5
 801b994:	eef0 2a47 	vmov.f32	s5, s14
 801b998:	fb92 f8f3 	sdiv	r8, r2, r3
 801b99c:	ee13 2a10 	vmov	r2, s6
 801b9a0:	eeb0 3a67 	vmov.f32	s6, s15
 801b9a4:	fb92 fef3 	sdiv	lr, r2, r3
 801b9a8:	9b00      	ldr	r3, [sp, #0]
 801b9aa:	3b01      	subs	r3, #1
 801b9ac:	9300      	str	r3, [sp, #0]
 801b9ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9b0:	bf08      	it	eq
 801b9b2:	465b      	moveq	r3, fp
 801b9b4:	e767      	b.n	801b886 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b9b6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b9ba:	d423      	bmi.n	801ba04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b9bc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801b9c0:	45cc      	cmp	ip, r9
 801b9c2:	dd1f      	ble.n	801ba04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b9c4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b9c8:	d41c      	bmi.n	801ba04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b9ca:	68f1      	ldr	r1, [r6, #12]
 801b9cc:	4551      	cmp	r1, sl
 801b9ce:	dd19      	ble.n	801ba04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b9d0:	fa0f fc8c 	sxth.w	ip, ip
 801b9d4:	9901      	ldr	r1, [sp, #4]
 801b9d6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801b9da:	f81c c009 	ldrb.w	ip, [ip, r9]
 801b9de:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b9e2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801b9e6:	eb07 090c 	add.w	r9, r7, ip
 801b9ea:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801b9ee:	f804 a00c 	strb.w	sl, [r4, ip]
 801b9f2:	44a4      	add	ip, r4
 801b9f4:	f899 a001 	ldrb.w	sl, [r9, #1]
 801b9f8:	f88c a001 	strb.w	sl, [ip, #1]
 801b9fc:	f899 9002 	ldrb.w	r9, [r9, #2]
 801ba00:	f88c 9002 	strb.w	r9, [ip, #2]
 801ba04:	4440      	add	r0, r8
 801ba06:	4472      	add	r2, lr
 801ba08:	3501      	adds	r5, #1
 801ba0a:	e793      	b.n	801b934 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801ba0c:	b003      	add	sp, #12
 801ba0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba16:	b085      	sub	sp, #20
 801ba18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba1c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ba1e:	9202      	str	r2, [sp, #8]
 801ba20:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801ba24:	6860      	ldr	r0, [r4, #4]
 801ba26:	9203      	str	r2, [sp, #12]
 801ba28:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ba2c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801ba30:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ba34:	fb00 2505 	mla	r5, r0, r5, r2
 801ba38:	6822      	ldr	r2, [r4, #0]
 801ba3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba3e:	4415      	add	r5, r2
 801ba40:	f8dc 2000 	ldr.w	r2, [ip]
 801ba44:	9200      	str	r2, [sp, #0]
 801ba46:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ba4a:	3204      	adds	r2, #4
 801ba4c:	9201      	str	r2, [sp, #4]
 801ba4e:	2900      	cmp	r1, #0
 801ba50:	dc03      	bgt.n	801ba5a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ba52:	9a02      	ldr	r2, [sp, #8]
 801ba54:	2a00      	cmp	r2, #0
 801ba56:	f340 8127 	ble.w	801bca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ba5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba5c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ba60:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ba64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ba66:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ba6a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	dd0d      	ble.n	801ba8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ba72:	1422      	asrs	r2, r4, #16
 801ba74:	d405      	bmi.n	801ba82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ba76:	4542      	cmp	r2, r8
 801ba78:	da03      	bge.n	801ba82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ba7a:	1402      	asrs	r2, r0, #16
 801ba7c:	d401      	bmi.n	801ba82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ba7e:	42ba      	cmp	r2, r7
 801ba80:	db06      	blt.n	801ba90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ba82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ba84:	4474      	add	r4, lr
 801ba86:	3b01      	subs	r3, #1
 801ba88:	3503      	adds	r5, #3
 801ba8a:	4410      	add	r0, r2
 801ba8c:	e7ef      	b.n	801ba6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ba8e:	d075      	beq.n	801bb7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801ba90:	1e5a      	subs	r2, r3, #1
 801ba92:	fb0e 4602 	mla	r6, lr, r2, r4
 801ba96:	1436      	asrs	r6, r6, #16
 801ba98:	d465      	bmi.n	801bb66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ba9a:	4546      	cmp	r6, r8
 801ba9c:	da63      	bge.n	801bb66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ba9e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801baa0:	fb06 0202 	mla	r2, r6, r2, r0
 801baa4:	1412      	asrs	r2, r2, #16
 801baa6:	d45e      	bmi.n	801bb66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801baa8:	42ba      	cmp	r2, r7
 801baaa:	da5c      	bge.n	801bb66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801baac:	1cef      	adds	r7, r5, #3
 801baae:	4699      	mov	r9, r3
 801bab0:	f1b9 0f00 	cmp.w	r9, #0
 801bab4:	dd5d      	ble.n	801bb72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801bab6:	1402      	asrs	r2, r0, #16
 801bab8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801babc:	1426      	asrs	r6, r4, #16
 801babe:	4692      	mov	sl, r2
 801bac0:	9a00      	ldr	r2, [sp, #0]
 801bac2:	fb08 220a 	mla	r2, r8, sl, r2
 801bac6:	5d92      	ldrb	r2, [r2, r6]
 801bac8:	9e01      	ldr	r6, [sp, #4]
 801baca:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801bace:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801bad2:	d041      	beq.n	801bb58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bad4:	9a03      	ldr	r2, [sp, #12]
 801bad6:	fa5f fb86 	uxtb.w	fp, r6
 801bada:	fb02 f808 	mul.w	r8, r2, r8
 801bade:	f108 0201 	add.w	r2, r8, #1
 801bae2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801bae6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801baea:	1212      	asrs	r2, r2, #8
 801baec:	fa1f fa82 	uxth.w	sl, r2
 801baf0:	43d2      	mvns	r2, r2
 801baf2:	fb1b fb0a 	smulbb	fp, fp, sl
 801baf6:	b2d2      	uxtb	r2, r2
 801baf8:	fb08 b802 	mla	r8, r8, r2, fp
 801bafc:	fa1f f888 	uxth.w	r8, r8
 801bb00:	f108 0b01 	add.w	fp, r8, #1
 801bb04:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bb08:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bb0c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bb10:	fb1b fb0a 	smulbb	fp, fp, sl
 801bb14:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bb18:	fb16 fa0a 	smulbb	sl, r6, sl
 801bb1c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bb20:	f807 8c03 	strb.w	r8, [r7, #-3]
 801bb24:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801bb28:	fb06 aa02 	mla	sl, r6, r2, sl
 801bb2c:	fb08 b802 	mla	r8, r8, r2, fp
 801bb30:	fa1f fa8a 	uxth.w	sl, sl
 801bb34:	fa1f f888 	uxth.w	r8, r8
 801bb38:	f10a 0601 	add.w	r6, sl, #1
 801bb3c:	f108 0b01 	add.w	fp, r8, #1
 801bb40:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bb44:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bb48:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bb4c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bb50:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bb54:	f807 8c02 	strb.w	r8, [r7, #-2]
 801bb58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bb5a:	4474      	add	r4, lr
 801bb5c:	3703      	adds	r7, #3
 801bb5e:	f109 39ff 	add.w	r9, r9, #4294967295
 801bb62:	4410      	add	r0, r2
 801bb64:	e7a4      	b.n	801bab0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bb66:	f04f 0800 	mov.w	r8, #0
 801bb6a:	eba3 0208 	sub.w	r2, r3, r8
 801bb6e:	2a00      	cmp	r2, #0
 801bb70:	dc3b      	bgt.n	801bbea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801bb72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb7a:	441d      	add	r5, r3
 801bb7c:	2900      	cmp	r1, #0
 801bb7e:	f340 8093 	ble.w	801bca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801bb82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb8c:	3901      	subs	r1, #1
 801bb8e:	eeb0 6a62 	vmov.f32	s12, s5
 801bb92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bb96:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb9e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bba2:	eeb0 6a43 	vmov.f32	s12, s6
 801bba6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbaa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bbae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bbb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bbb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bbba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bbbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bbc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bbc6:	ee12 2a90 	vmov	r2, s5
 801bbca:	eef0 2a47 	vmov.f32	s5, s14
 801bbce:	fb92 fef3 	sdiv	lr, r2, r3
 801bbd2:	ee13 2a10 	vmov	r2, s6
 801bbd6:	eeb0 3a67 	vmov.f32	s6, s15
 801bbda:	fb92 f3f3 	sdiv	r3, r2, r3
 801bbde:	9a02      	ldr	r2, [sp, #8]
 801bbe0:	9312      	str	r3, [sp, #72]	; 0x48
 801bbe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbe4:	bf08      	it	eq
 801bbe6:	4613      	moveq	r3, r2
 801bbe8:	e731      	b.n	801ba4e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bbea:	1427      	asrs	r7, r4, #16
 801bbec:	d456      	bmi.n	801bc9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bbee:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bbf2:	42be      	cmp	r6, r7
 801bbf4:	dd52      	ble.n	801bc9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bbf6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bbfa:	d44f      	bmi.n	801bc9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bbfc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bc00:	454a      	cmp	r2, r9
 801bc02:	dd4b      	ble.n	801bc9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bc04:	9a00      	ldr	r2, [sp, #0]
 801bc06:	b236      	sxth	r6, r6
 801bc08:	fb09 2606 	mla	r6, r9, r6, r2
 801bc0c:	5df2      	ldrb	r2, [r6, r7]
 801bc0e:	9e01      	ldr	r6, [sp, #4]
 801bc10:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801bc14:	0e3a      	lsrs	r2, r7, #24
 801bc16:	d041      	beq.n	801bc9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bc18:	9e03      	ldr	r6, [sp, #12]
 801bc1a:	fa5f fb87 	uxtb.w	fp, r7
 801bc1e:	4372      	muls	r2, r6
 801bc20:	1c56      	adds	r6, r2, #1
 801bc22:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bc26:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801bc2a:	1212      	asrs	r2, r2, #8
 801bc2c:	f815 9006 	ldrb.w	r9, [r5, r6]
 801bc30:	fa1f fa82 	uxth.w	sl, r2
 801bc34:	43d2      	mvns	r2, r2
 801bc36:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc3a:	b2d2      	uxtb	r2, r2
 801bc3c:	fb09 b902 	mla	r9, r9, r2, fp
 801bc40:	fa1f f989 	uxth.w	r9, r9
 801bc44:	f109 0b01 	add.w	fp, r9, #1
 801bc48:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bc4c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bc50:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bc54:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc58:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bc5c:	fb17 fa0a 	smulbb	sl, r7, sl
 801bc60:	f805 9006 	strb.w	r9, [r5, r6]
 801bc64:	442e      	add	r6, r5
 801bc66:	78b7      	ldrb	r7, [r6, #2]
 801bc68:	f896 9001 	ldrb.w	r9, [r6, #1]
 801bc6c:	fb07 aa02 	mla	sl, r7, r2, sl
 801bc70:	fb09 b902 	mla	r9, r9, r2, fp
 801bc74:	fa1f fa8a 	uxth.w	sl, sl
 801bc78:	fa1f f989 	uxth.w	r9, r9
 801bc7c:	f10a 0701 	add.w	r7, sl, #1
 801bc80:	f109 0b01 	add.w	fp, r9, #1
 801bc84:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bc88:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bc8c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bc90:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bc94:	f886 a002 	strb.w	sl, [r6, #2]
 801bc98:	f886 9001 	strb.w	r9, [r6, #1]
 801bc9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc9e:	4474      	add	r4, lr
 801bca0:	f108 0801 	add.w	r8, r8, #1
 801bca4:	4410      	add	r0, r2
 801bca6:	e760      	b.n	801bb6a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801bca8:	b005      	add	sp, #20
 801bcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bcae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bcae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcb2:	b085      	sub	sp, #20
 801bcb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bcb8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bcba:	9203      	str	r2, [sp, #12]
 801bcbc:	6868      	ldr	r0, [r5, #4]
 801bcbe:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801bcc2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801bcc6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bcca:	fb00 2404 	mla	r4, r0, r4, r2
 801bcce:	682a      	ldr	r2, [r5, #0]
 801bcd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bcd4:	4414      	add	r4, r2
 801bcd6:	f8dc 2000 	ldr.w	r2, [ip]
 801bcda:	9201      	str	r2, [sp, #4]
 801bcdc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801bce0:	3204      	adds	r2, #4
 801bce2:	9202      	str	r2, [sp, #8]
 801bce4:	2900      	cmp	r1, #0
 801bce6:	dc03      	bgt.n	801bcf0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801bce8:	9a03      	ldr	r2, [sp, #12]
 801bcea:	2a00      	cmp	r2, #0
 801bcec:	f340 8137 	ble.w	801bf5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bcf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bcf2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bcf6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bcfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bcfc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bd00:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	dd0d      	ble.n	801bd24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bd08:	1405      	asrs	r5, r0, #16
 801bd0a:	d405      	bmi.n	801bd18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bd0c:	4545      	cmp	r5, r8
 801bd0e:	da03      	bge.n	801bd18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bd10:	1415      	asrs	r5, r2, #16
 801bd12:	d401      	bmi.n	801bd18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bd14:	42bd      	cmp	r5, r7
 801bd16:	db06      	blt.n	801bd26 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bd18:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bd1a:	4470      	add	r0, lr
 801bd1c:	3b01      	subs	r3, #1
 801bd1e:	3403      	adds	r4, #3
 801bd20:	442a      	add	r2, r5
 801bd22:	e7ef      	b.n	801bd04 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801bd24:	d070      	beq.n	801be08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801bd26:	1e5d      	subs	r5, r3, #1
 801bd28:	fb0e 0605 	mla	r6, lr, r5, r0
 801bd2c:	1436      	asrs	r6, r6, #16
 801bd2e:	d462      	bmi.n	801bdf6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bd30:	4546      	cmp	r6, r8
 801bd32:	da60      	bge.n	801bdf6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bd34:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bd36:	fb06 2505 	mla	r5, r6, r5, r2
 801bd3a:	142d      	asrs	r5, r5, #16
 801bd3c:	d45b      	bmi.n	801bdf6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bd3e:	42bd      	cmp	r5, r7
 801bd40:	da59      	bge.n	801bdf6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bd42:	1ce5      	adds	r5, r4, #3
 801bd44:	469a      	mov	sl, r3
 801bd46:	f1ba 0f00 	cmp.w	sl, #0
 801bd4a:	dd58      	ble.n	801bdfe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801bd4c:	1416      	asrs	r6, r2, #16
 801bd4e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bd52:	1407      	asrs	r7, r0, #16
 801bd54:	46b1      	mov	r9, r6
 801bd56:	9e01      	ldr	r6, [sp, #4]
 801bd58:	fb08 6609 	mla	r6, r8, r9, r6
 801bd5c:	5df6      	ldrb	r6, [r6, r7]
 801bd5e:	9f02      	ldr	r7, [sp, #8]
 801bd60:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801bd64:	0e37      	lsrs	r7, r6, #24
 801bd66:	2fff      	cmp	r7, #255	; 0xff
 801bd68:	f000 80f0 	beq.w	801bf4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801bd6c:	fa5f f887 	uxtb.w	r8, r7
 801bd70:	b3d7      	cbz	r7, 801bde8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801bd72:	fa1f f788 	uxth.w	r7, r8
 801bd76:	ea6f 0808 	mvn.w	r8, r8
 801bd7a:	fa5f fb86 	uxtb.w	fp, r6
 801bd7e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801bd82:	fa5f f888 	uxtb.w	r8, r8
 801bd86:	fb1b fb07 	smulbb	fp, fp, r7
 801bd8a:	fb09 b908 	mla	r9, r9, r8, fp
 801bd8e:	fa1f f989 	uxth.w	r9, r9
 801bd92:	f109 0b01 	add.w	fp, r9, #1
 801bd96:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd9a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801bd9e:	fb1b fb08 	smulbb	fp, fp, r8
 801bda2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bda6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801bdaa:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801bdae:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bdb2:	fb09 b907 	mla	r9, r9, r7, fp
 801bdb6:	fa1f f989 	uxth.w	r9, r9
 801bdba:	f109 0b01 	add.w	fp, r9, #1
 801bdbe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bdc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bdc6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801bdca:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801bdce:	fb19 f808 	smulbb	r8, r9, r8
 801bdd2:	fb06 8607 	mla	r6, r6, r7, r8
 801bdd6:	b2b6      	uxth	r6, r6
 801bdd8:	f106 0801 	add.w	r8, r6, #1
 801bddc:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801bde0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bde4:	f805 8c01 	strb.w	r8, [r5, #-1]
 801bde8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bdea:	4470      	add	r0, lr
 801bdec:	3503      	adds	r5, #3
 801bdee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bdf2:	4432      	add	r2, r6
 801bdf4:	e7a7      	b.n	801bd46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bdf6:	2600      	movs	r6, #0
 801bdf8:	1b9d      	subs	r5, r3, r6
 801bdfa:	2d00      	cmp	r5, #0
 801bdfc:	dc3b      	bgt.n	801be76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bdfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be06:	441c      	add	r4, r3
 801be08:	2900      	cmp	r1, #0
 801be0a:	f340 80a8 	ble.w	801bf5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801be0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be18:	3901      	subs	r1, #1
 801be1a:	eeb0 6a62 	vmov.f32	s12, s5
 801be1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be22:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be2a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801be2e:	eeb0 6a43 	vmov.f32	s12, s6
 801be32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be36:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801be3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be42:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be52:	ee12 2a90 	vmov	r2, s5
 801be56:	eef0 2a47 	vmov.f32	s5, s14
 801be5a:	fb92 fef3 	sdiv	lr, r2, r3
 801be5e:	ee13 2a10 	vmov	r2, s6
 801be62:	eeb0 3a67 	vmov.f32	s6, s15
 801be66:	fb92 f3f3 	sdiv	r3, r2, r3
 801be6a:	9a03      	ldr	r2, [sp, #12]
 801be6c:	9312      	str	r3, [sp, #72]	; 0x48
 801be6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be70:	bf08      	it	eq
 801be72:	4613      	moveq	r3, r2
 801be74:	e736      	b.n	801bce4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801be76:	ea5f 4820 	movs.w	r8, r0, asr #16
 801be7a:	d457      	bmi.n	801bf2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801be7c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801be80:	4547      	cmp	r7, r8
 801be82:	dd53      	ble.n	801bf2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801be84:	ea5f 4922 	movs.w	r9, r2, asr #16
 801be88:	d450      	bmi.n	801bf2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801be8a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801be8e:	454d      	cmp	r5, r9
 801be90:	dd4c      	ble.n	801bf2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801be92:	9d01      	ldr	r5, [sp, #4]
 801be94:	b23f      	sxth	r7, r7
 801be96:	fb09 5707 	mla	r7, r9, r7, r5
 801be9a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801be9e:	9f02      	ldr	r7, [sp, #8]
 801bea0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801bea4:	0e2f      	lsrs	r7, r5, #24
 801bea6:	2fff      	cmp	r7, #255	; 0xff
 801bea8:	d045      	beq.n	801bf36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801beaa:	fa5f f987 	uxtb.w	r9, r7
 801beae:	b3ef      	cbz	r7, 801bf2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801beb0:	fa1f f889 	uxth.w	r8, r9
 801beb4:	ea6f 0909 	mvn.w	r9, r9
 801beb8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bebc:	fa5f fb85 	uxtb.w	fp, r5
 801bec0:	f814 a007 	ldrb.w	sl, [r4, r7]
 801bec4:	fa5f f989 	uxtb.w	r9, r9
 801bec8:	fb1b fb08 	smulbb	fp, fp, r8
 801becc:	fb0a ba09 	mla	sl, sl, r9, fp
 801bed0:	fa1f fa8a 	uxth.w	sl, sl
 801bed4:	f10a 0b01 	add.w	fp, sl, #1
 801bed8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bedc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bee0:	f804 a007 	strb.w	sl, [r4, r7]
 801bee4:	4427      	add	r7, r4
 801bee6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801beea:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801beee:	f897 b001 	ldrb.w	fp, [r7, #1]
 801bef2:	fb1b fb09 	smulbb	fp, fp, r9
 801bef6:	fb0a ba08 	mla	sl, sl, r8, fp
 801befa:	fa1f fa8a 	uxth.w	sl, sl
 801befe:	f10a 0b01 	add.w	fp, sl, #1
 801bf02:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bf06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bf0a:	f887 a001 	strb.w	sl, [r7, #1]
 801bf0e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801bf12:	fb1a f909 	smulbb	r9, sl, r9
 801bf16:	fb05 9508 	mla	r5, r5, r8, r9
 801bf1a:	b2ad      	uxth	r5, r5
 801bf1c:	f105 0901 	add.w	r9, r5, #1
 801bf20:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801bf24:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf28:	f887 9002 	strb.w	r9, [r7, #2]
 801bf2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bf2e:	4470      	add	r0, lr
 801bf30:	3601      	adds	r6, #1
 801bf32:	442a      	add	r2, r5
 801bf34:	e760      	b.n	801bdf8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801bf36:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bf3a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801bf3e:	55e5      	strb	r5, [r4, r7]
 801bf40:	4427      	add	r7, r4
 801bf42:	0c2d      	lsrs	r5, r5, #16
 801bf44:	f887 8001 	strb.w	r8, [r7, #1]
 801bf48:	70bd      	strb	r5, [r7, #2]
 801bf4a:	e7ef      	b.n	801bf2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bf4c:	0a37      	lsrs	r7, r6, #8
 801bf4e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801bf52:	0c36      	lsrs	r6, r6, #16
 801bf54:	f805 7c02 	strb.w	r7, [r5, #-2]
 801bf58:	f805 6c01 	strb.w	r6, [r5, #-1]
 801bf5c:	e744      	b.n	801bde8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801bf5e:	b005      	add	sp, #20
 801bf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf68:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bf6a:	9201      	str	r2, [sp, #4]
 801bf6c:	6870      	ldr	r0, [r6, #4]
 801bf6e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801bf72:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801bf76:	fa1f fe85 	uxth.w	lr, r5
 801bf7a:	43ed      	mvns	r5, r5
 801bf7c:	f8dc 8000 	ldr.w	r8, [ip]
 801bf80:	b2ed      	uxtb	r5, r5
 801bf82:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bf86:	fb00 2404 	mla	r4, r0, r4, r2
 801bf8a:	6832      	ldr	r2, [r6, #0]
 801bf8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bf90:	4414      	add	r4, r2
 801bf92:	2900      	cmp	r1, #0
 801bf94:	dc03      	bgt.n	801bf9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bf96:	9a01      	ldr	r2, [sp, #4]
 801bf98:	2a00      	cmp	r2, #0
 801bf9a:	f340 810d 	ble.w	801c1b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801bf9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bfa0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801bfa4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bfa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bfaa:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801bfae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	dd0e      	ble.n	801bfd4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bfb6:	1406      	asrs	r6, r0, #16
 801bfb8:	d405      	bmi.n	801bfc6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bfba:	4556      	cmp	r6, sl
 801bfbc:	da03      	bge.n	801bfc6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bfbe:	1416      	asrs	r6, r2, #16
 801bfc0:	d401      	bmi.n	801bfc6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bfc2:	454e      	cmp	r6, r9
 801bfc4:	db07      	blt.n	801bfd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bfc6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bfc8:	3b01      	subs	r3, #1
 801bfca:	3403      	adds	r4, #3
 801bfcc:	4430      	add	r0, r6
 801bfce:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bfd0:	4432      	add	r2, r6
 801bfd2:	e7ee      	b.n	801bfb2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801bfd4:	d060      	beq.n	801c098 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801bfd6:	1e5e      	subs	r6, r3, #1
 801bfd8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bfda:	fb07 0706 	mla	r7, r7, r6, r0
 801bfde:	143f      	asrs	r7, r7, #16
 801bfe0:	d451      	bmi.n	801c086 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bfe2:	4557      	cmp	r7, sl
 801bfe4:	da4f      	bge.n	801c086 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bfe6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bfe8:	fb07 2606 	mla	r6, r7, r6, r2
 801bfec:	1436      	asrs	r6, r6, #16
 801bfee:	d44a      	bmi.n	801c086 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bff0:	454e      	cmp	r6, r9
 801bff2:	da48      	bge.n	801c086 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bff4:	1ce6      	adds	r6, r4, #3
 801bff6:	4699      	mov	r9, r3
 801bff8:	f1b9 0f00 	cmp.w	r9, #0
 801bffc:	f106 0603 	add.w	r6, r6, #3
 801c000:	dd45      	ble.n	801c08e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801c002:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c006:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c00a:	1417      	asrs	r7, r2, #16
 801c00c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c010:	fb0b a707 	mla	r7, fp, r7, sl
 801c014:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c018:	fb1b fb05 	smulbb	fp, fp, r5
 801c01c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c020:	eb08 0a07 	add.w	sl, r8, r7
 801c024:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c028:	fb07 b70e 	mla	r7, r7, lr, fp
 801c02c:	b2bf      	uxth	r7, r7
 801c02e:	f107 0b01 	add.w	fp, r7, #1
 801c032:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c036:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c03a:	fb1b fb05 	smulbb	fp, fp, r5
 801c03e:	123f      	asrs	r7, r7, #8
 801c040:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c044:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c048:	fb07 b70e 	mla	r7, r7, lr, fp
 801c04c:	b2bf      	uxth	r7, r7
 801c04e:	f107 0b01 	add.w	fp, r7, #1
 801c052:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c056:	123f      	asrs	r7, r7, #8
 801c058:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c05c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c060:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c064:	fb1a fa05 	smulbb	sl, sl, r5
 801c068:	fb07 a70e 	mla	r7, r7, lr, sl
 801c06c:	b2bf      	uxth	r7, r7
 801c06e:	f107 0a01 	add.w	sl, r7, #1
 801c072:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c076:	123f      	asrs	r7, r7, #8
 801c078:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c07c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c07e:	4438      	add	r0, r7
 801c080:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c082:	443a      	add	r2, r7
 801c084:	e7b8      	b.n	801bff8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c086:	2700      	movs	r7, #0
 801c088:	1bde      	subs	r6, r3, r7
 801c08a:	2e00      	cmp	r6, #0
 801c08c:	dc3f      	bgt.n	801c10e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c08e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c092:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c096:	441c      	add	r4, r3
 801c098:	2900      	cmp	r1, #0
 801c09a:	f340 808d 	ble.w	801c1b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801c09e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c0a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c0a8:	3901      	subs	r1, #1
 801c0aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c0ae:	eef0 6a62 	vmov.f32	s13, s5
 801c0b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c0b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c0ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0be:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c0c2:	eef0 6a43 	vmov.f32	s13, s6
 801c0c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0ca:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c0ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c0d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c0d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c0da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0e6:	ee12 2a90 	vmov	r2, s5
 801c0ea:	eef0 2a47 	vmov.f32	s5, s14
 801c0ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0f2:	ee13 2a10 	vmov	r2, s6
 801c0f6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c0f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0fa:	eeb0 3a67 	vmov.f32	s6, s15
 801c0fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801c102:	9a01      	ldr	r2, [sp, #4]
 801c104:	9310      	str	r3, [sp, #64]	; 0x40
 801c106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c108:	bf08      	it	eq
 801c10a:	4613      	moveq	r3, r2
 801c10c:	e741      	b.n	801bf92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c10e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c112:	d44b      	bmi.n	801c1ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c114:	f8dc b008 	ldr.w	fp, [ip, #8]
 801c118:	45cb      	cmp	fp, r9
 801c11a:	dd47      	ble.n	801c1ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c11c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c120:	d444      	bmi.n	801c1ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c122:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801c126:	4556      	cmp	r6, sl
 801c128:	dd40      	ble.n	801c1ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c12a:	fa0f f68b 	sxth.w	r6, fp
 801c12e:	fb0a 9906 	mla	r9, sl, r6, r9
 801c132:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c136:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c13a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c13e:	fb1b fb05 	smulbb	fp, fp, r5
 801c142:	eb08 0a09 	add.w	sl, r8, r9
 801c146:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c14a:	fb09 b90e 	mla	r9, r9, lr, fp
 801c14e:	fa1f f989 	uxth.w	r9, r9
 801c152:	f109 0b01 	add.w	fp, r9, #1
 801c156:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c15a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c15e:	f804 9006 	strb.w	r9, [r4, r6]
 801c162:	4426      	add	r6, r4
 801c164:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c168:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c16c:	fb1b fb05 	smulbb	fp, fp, r5
 801c170:	fb09 b90e 	mla	r9, r9, lr, fp
 801c174:	fa1f f989 	uxth.w	r9, r9
 801c178:	f109 0b01 	add.w	fp, r9, #1
 801c17c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c180:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c184:	f886 9001 	strb.w	r9, [r6, #1]
 801c188:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c18c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c190:	fb1a fa05 	smulbb	sl, sl, r5
 801c194:	fb09 a90e 	mla	r9, r9, lr, sl
 801c198:	fa1f f989 	uxth.w	r9, r9
 801c19c:	f109 0a01 	add.w	sl, r9, #1
 801c1a0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c1a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c1a8:	f886 9002 	strb.w	r9, [r6, #2]
 801c1ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c1ae:	3701      	adds	r7, #1
 801c1b0:	4430      	add	r0, r6
 801c1b2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c1b4:	4432      	add	r2, r6
 801c1b6:	e767      	b.n	801c088 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801c1b8:	b003      	add	sp, #12
 801c1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c1be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c1c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1c8:	9201      	str	r2, [sp, #4]
 801c1ca:	6868      	ldr	r0, [r5, #4]
 801c1cc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801c1ce:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c1d2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801c1d6:	fb00 2404 	mla	r4, r0, r4, r2
 801c1da:	682a      	ldr	r2, [r5, #0]
 801c1dc:	f8d7 8000 	ldr.w	r8, [r7]
 801c1e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c1e4:	4414      	add	r4, r2
 801c1e6:	2900      	cmp	r1, #0
 801c1e8:	dc03      	bgt.n	801c1f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c1ea:	9a01      	ldr	r2, [sp, #4]
 801c1ec:	2a00      	cmp	r2, #0
 801c1ee:	f340 80af 	ble.w	801c350 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c1f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c1f4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801c1f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c1fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c1fe:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801c202:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c206:	2b00      	cmp	r3, #0
 801c208:	dd0c      	ble.n	801c224 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c20a:	1405      	asrs	r5, r0, #16
 801c20c:	d405      	bmi.n	801c21a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c20e:	4555      	cmp	r5, sl
 801c210:	da03      	bge.n	801c21a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c212:	1415      	asrs	r5, r2, #16
 801c214:	d401      	bmi.n	801c21a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c216:	454d      	cmp	r5, r9
 801c218:	db05      	blt.n	801c226 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c21a:	4470      	add	r0, lr
 801c21c:	4462      	add	r2, ip
 801c21e:	3b01      	subs	r3, #1
 801c220:	3403      	adds	r4, #3
 801c222:	e7f0      	b.n	801c206 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c224:	d038      	beq.n	801c298 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c226:	1e5d      	subs	r5, r3, #1
 801c228:	fb0e 0605 	mla	r6, lr, r5, r0
 801c22c:	1436      	asrs	r6, r6, #16
 801c22e:	d42a      	bmi.n	801c286 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c230:	4556      	cmp	r6, sl
 801c232:	da28      	bge.n	801c286 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c234:	fb0c 2505 	mla	r5, ip, r5, r2
 801c238:	142d      	asrs	r5, r5, #16
 801c23a:	d424      	bmi.n	801c286 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c23c:	454d      	cmp	r5, r9
 801c23e:	da22      	bge.n	801c286 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c240:	1ce6      	adds	r6, r4, #3
 801c242:	4699      	mov	r9, r3
 801c244:	f1b9 0f00 	cmp.w	r9, #0
 801c248:	f106 0603 	add.w	r6, r6, #3
 801c24c:	dd1f      	ble.n	801c28e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801c24e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801c252:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c256:	1415      	asrs	r5, r2, #16
 801c258:	4470      	add	r0, lr
 801c25a:	4462      	add	r2, ip
 801c25c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c260:	fb0b a505 	mla	r5, fp, r5, sl
 801c264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c268:	eb08 0a05 	add.w	sl, r8, r5
 801c26c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801c270:	f806 5c06 	strb.w	r5, [r6, #-6]
 801c274:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801c278:	f806 5c05 	strb.w	r5, [r6, #-5]
 801c27c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801c280:	f806 5c04 	strb.w	r5, [r6, #-4]
 801c284:	e7de      	b.n	801c244 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c286:	2600      	movs	r6, #0
 801c288:	1b9d      	subs	r5, r3, r6
 801c28a:	2d00      	cmp	r5, #0
 801c28c:	dc38      	bgt.n	801c300 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c28e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c292:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c296:	441c      	add	r4, r3
 801c298:	2900      	cmp	r1, #0
 801c29a:	dd59      	ble.n	801c350 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c29c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c2a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c2a6:	3901      	subs	r1, #1
 801c2a8:	eeb0 6a62 	vmov.f32	s12, s5
 801c2ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c2b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c2b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c2b8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c2bc:	eeb0 6a43 	vmov.f32	s12, s6
 801c2c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c2c4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c2c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c2cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c2d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c2d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c2d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c2dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c2e0:	ee12 2a90 	vmov	r2, s5
 801c2e4:	eef0 2a47 	vmov.f32	s5, s14
 801c2e8:	fb92 fef3 	sdiv	lr, r2, r3
 801c2ec:	ee13 2a10 	vmov	r2, s6
 801c2f0:	eeb0 3a67 	vmov.f32	s6, s15
 801c2f4:	fb92 fcf3 	sdiv	ip, r2, r3
 801c2f8:	9a01      	ldr	r2, [sp, #4]
 801c2fa:	bf08      	it	eq
 801c2fc:	4613      	moveq	r3, r2
 801c2fe:	e772      	b.n	801c1e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c300:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c304:	d420      	bmi.n	801c348 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c306:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801c30a:	45cb      	cmp	fp, r9
 801c30c:	dd1c      	ble.n	801c348 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c30e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c312:	d419      	bmi.n	801c348 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c314:	68fd      	ldr	r5, [r7, #12]
 801c316:	4555      	cmp	r5, sl
 801c318:	dd16      	ble.n	801c348 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c31a:	fa0f f58b 	sxth.w	r5, fp
 801c31e:	fb0a 9505 	mla	r5, sl, r5, r9
 801c322:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c326:	f818 9005 	ldrb.w	r9, [r8, r5]
 801c32a:	eb08 0b05 	add.w	fp, r8, r5
 801c32e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801c332:	f804 9005 	strb.w	r9, [r4, r5]
 801c336:	4425      	add	r5, r4
 801c338:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c33c:	f885 9001 	strb.w	r9, [r5, #1]
 801c340:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c344:	f885 9002 	strb.w	r9, [r5, #2]
 801c348:	4470      	add	r0, lr
 801c34a:	4462      	add	r2, ip
 801c34c:	3601      	adds	r6, #1
 801c34e:	e79b      	b.n	801c288 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801c350:	b003      	add	sp, #12
 801c352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c356 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c35a:	b085      	sub	sp, #20
 801c35c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c360:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c362:	9202      	str	r2, [sp, #8]
 801c364:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c368:	6860      	ldr	r0, [r4, #4]
 801c36a:	9203      	str	r2, [sp, #12]
 801c36c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c370:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c374:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c378:	fb00 2505 	mla	r5, r0, r5, r2
 801c37c:	6822      	ldr	r2, [r4, #0]
 801c37e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c382:	4415      	add	r5, r2
 801c384:	f8dc 2000 	ldr.w	r2, [ip]
 801c388:	9201      	str	r2, [sp, #4]
 801c38a:	2900      	cmp	r1, #0
 801c38c:	dc03      	bgt.n	801c396 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c38e:	9a02      	ldr	r2, [sp, #8]
 801c390:	2a00      	cmp	r2, #0
 801c392:	f340 8122 	ble.w	801c5da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c398:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c39c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c3a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c3a2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c3a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	dd0d      	ble.n	801c3ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c3ae:	1422      	asrs	r2, r4, #16
 801c3b0:	d405      	bmi.n	801c3be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c3b2:	4542      	cmp	r2, r8
 801c3b4:	da03      	bge.n	801c3be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c3b6:	1402      	asrs	r2, r0, #16
 801c3b8:	d401      	bmi.n	801c3be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c3ba:	42ba      	cmp	r2, r7
 801c3bc:	db06      	blt.n	801c3cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c3be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c3c0:	4474      	add	r4, lr
 801c3c2:	3b01      	subs	r3, #1
 801c3c4:	3503      	adds	r5, #3
 801c3c6:	4410      	add	r0, r2
 801c3c8:	e7ef      	b.n	801c3aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c3ca:	d072      	beq.n	801c4b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801c3cc:	1e5a      	subs	r2, r3, #1
 801c3ce:	fb0e 4602 	mla	r6, lr, r2, r4
 801c3d2:	1436      	asrs	r6, r6, #16
 801c3d4:	d462      	bmi.n	801c49c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c3d6:	4546      	cmp	r6, r8
 801c3d8:	da60      	bge.n	801c49c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c3da:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c3dc:	fb06 0202 	mla	r2, r6, r2, r0
 801c3e0:	1412      	asrs	r2, r2, #16
 801c3e2:	d45b      	bmi.n	801c49c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c3e4:	42ba      	cmp	r2, r7
 801c3e6:	da59      	bge.n	801c49c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c3e8:	1cef      	adds	r7, r5, #3
 801c3ea:	4699      	mov	r9, r3
 801c3ec:	f1b9 0f00 	cmp.w	r9, #0
 801c3f0:	dd5a      	ble.n	801c4a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c3f2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c3f6:	1426      	asrs	r6, r4, #16
 801c3f8:	1402      	asrs	r2, r0, #16
 801c3fa:	fb08 6202 	mla	r2, r8, r2, r6
 801c3fe:	9e01      	ldr	r6, [sp, #4]
 801c400:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c404:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c408:	d041      	beq.n	801c48e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c40a:	9a03      	ldr	r2, [sp, #12]
 801c40c:	fa5f fb86 	uxtb.w	fp, r6
 801c410:	fb02 f808 	mul.w	r8, r2, r8
 801c414:	f108 0201 	add.w	r2, r8, #1
 801c418:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c41c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c420:	1212      	asrs	r2, r2, #8
 801c422:	fa1f fa82 	uxth.w	sl, r2
 801c426:	43d2      	mvns	r2, r2
 801c428:	fb1b fb0a 	smulbb	fp, fp, sl
 801c42c:	b2d2      	uxtb	r2, r2
 801c42e:	fb08 b802 	mla	r8, r8, r2, fp
 801c432:	fa1f f888 	uxth.w	r8, r8
 801c436:	f108 0b01 	add.w	fp, r8, #1
 801c43a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c43e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c442:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c446:	fb1b fb0a 	smulbb	fp, fp, sl
 801c44a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c44e:	fb16 fa0a 	smulbb	sl, r6, sl
 801c452:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c456:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c45a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c45e:	fb06 aa02 	mla	sl, r6, r2, sl
 801c462:	fb08 b802 	mla	r8, r8, r2, fp
 801c466:	fa1f fa8a 	uxth.w	sl, sl
 801c46a:	fa1f f888 	uxth.w	r8, r8
 801c46e:	f10a 0601 	add.w	r6, sl, #1
 801c472:	f108 0b01 	add.w	fp, r8, #1
 801c476:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c47a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c47e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c482:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c486:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c48a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c48e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c490:	4474      	add	r4, lr
 801c492:	3703      	adds	r7, #3
 801c494:	f109 39ff 	add.w	r9, r9, #4294967295
 801c498:	4410      	add	r0, r2
 801c49a:	e7a7      	b.n	801c3ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c49c:	f04f 0800 	mov.w	r8, #0
 801c4a0:	eba3 0208 	sub.w	r2, r3, r8
 801c4a4:	2a00      	cmp	r2, #0
 801c4a6:	dc3b      	bgt.n	801c520 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801c4a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c4ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4b0:	441d      	add	r5, r3
 801c4b2:	2900      	cmp	r1, #0
 801c4b4:	f340 8091 	ble.w	801c5da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c4b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4c2:	3901      	subs	r1, #1
 801c4c4:	eeb0 6a62 	vmov.f32	s12, s5
 801c4c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c4cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4d4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c4d8:	eeb0 6a43 	vmov.f32	s12, s6
 801c4dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4e0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c4e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c4e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c4f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c4f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c4f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c4fc:	ee12 2a90 	vmov	r2, s5
 801c500:	eef0 2a47 	vmov.f32	s5, s14
 801c504:	fb92 fef3 	sdiv	lr, r2, r3
 801c508:	ee13 2a10 	vmov	r2, s6
 801c50c:	eeb0 3a67 	vmov.f32	s6, s15
 801c510:	fb92 f3f3 	sdiv	r3, r2, r3
 801c514:	9a02      	ldr	r2, [sp, #8]
 801c516:	9312      	str	r3, [sp, #72]	; 0x48
 801c518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c51a:	bf08      	it	eq
 801c51c:	4613      	moveq	r3, r2
 801c51e:	e734      	b.n	801c38a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c520:	1427      	asrs	r7, r4, #16
 801c522:	d454      	bmi.n	801c5ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c524:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c528:	42be      	cmp	r6, r7
 801c52a:	dd50      	ble.n	801c5ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c52c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c530:	d44d      	bmi.n	801c5ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c532:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c536:	454a      	cmp	r2, r9
 801c538:	dd49      	ble.n	801c5ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c53a:	b236      	sxth	r6, r6
 801c53c:	9a01      	ldr	r2, [sp, #4]
 801c53e:	fb09 7606 	mla	r6, r9, r6, r7
 801c542:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c546:	0e3a      	lsrs	r2, r7, #24
 801c548:	d041      	beq.n	801c5ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c54a:	9e03      	ldr	r6, [sp, #12]
 801c54c:	fa5f fb87 	uxtb.w	fp, r7
 801c550:	4372      	muls	r2, r6
 801c552:	1c56      	adds	r6, r2, #1
 801c554:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c558:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c55c:	1212      	asrs	r2, r2, #8
 801c55e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c562:	fa1f fa82 	uxth.w	sl, r2
 801c566:	43d2      	mvns	r2, r2
 801c568:	fb1b fb0a 	smulbb	fp, fp, sl
 801c56c:	b2d2      	uxtb	r2, r2
 801c56e:	fb09 b902 	mla	r9, r9, r2, fp
 801c572:	fa1f f989 	uxth.w	r9, r9
 801c576:	f109 0b01 	add.w	fp, r9, #1
 801c57a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c57e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c582:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c586:	fb1b fb0a 	smulbb	fp, fp, sl
 801c58a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c58e:	fb17 fa0a 	smulbb	sl, r7, sl
 801c592:	f805 9006 	strb.w	r9, [r5, r6]
 801c596:	442e      	add	r6, r5
 801c598:	78b7      	ldrb	r7, [r6, #2]
 801c59a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c59e:	fb07 aa02 	mla	sl, r7, r2, sl
 801c5a2:	fb09 b902 	mla	r9, r9, r2, fp
 801c5a6:	fa1f fa8a 	uxth.w	sl, sl
 801c5aa:	fa1f f989 	uxth.w	r9, r9
 801c5ae:	f10a 0701 	add.w	r7, sl, #1
 801c5b2:	f109 0b01 	add.w	fp, r9, #1
 801c5b6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c5ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c5be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c5c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c5c6:	f886 a002 	strb.w	sl, [r6, #2]
 801c5ca:	f886 9001 	strb.w	r9, [r6, #1]
 801c5ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c5d0:	4474      	add	r4, lr
 801c5d2:	f108 0801 	add.w	r8, r8, #1
 801c5d6:	4410      	add	r0, r2
 801c5d8:	e762      	b.n	801c4a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c5da:	b005      	add	sp, #20
 801c5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c5e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c5e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c5ea:	9201      	str	r2, [sp, #4]
 801c5ec:	6860      	ldr	r0, [r4, #4]
 801c5ee:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801c5f2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801c5f6:	fb00 2505 	mla	r5, r0, r5, r2
 801c5fa:	6822      	ldr	r2, [r4, #0]
 801c5fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c600:	4415      	add	r5, r2
 801c602:	f8dc 2000 	ldr.w	r2, [ip]
 801c606:	9200      	str	r2, [sp, #0]
 801c608:	2900      	cmp	r1, #0
 801c60a:	dc03      	bgt.n	801c614 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c60c:	9a01      	ldr	r2, [sp, #4]
 801c60e:	2a00      	cmp	r2, #0
 801c610:	f340 812b 	ble.w	801c86a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c616:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c61a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c61e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c620:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c624:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c628:	2b00      	cmp	r3, #0
 801c62a:	dd0e      	ble.n	801c64a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c62c:	1422      	asrs	r2, r4, #16
 801c62e:	d405      	bmi.n	801c63c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c630:	4572      	cmp	r2, lr
 801c632:	da03      	bge.n	801c63c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c634:	1402      	asrs	r2, r0, #16
 801c636:	d401      	bmi.n	801c63c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c638:	42ba      	cmp	r2, r7
 801c63a:	db07      	blt.n	801c64c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c63c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c63e:	3b01      	subs	r3, #1
 801c640:	3503      	adds	r5, #3
 801c642:	4414      	add	r4, r2
 801c644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c646:	4410      	add	r0, r2
 801c648:	e7ee      	b.n	801c628 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c64a:	d06f      	beq.n	801c72c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c64c:	1e5a      	subs	r2, r3, #1
 801c64e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c650:	fb06 4602 	mla	r6, r6, r2, r4
 801c654:	1436      	asrs	r6, r6, #16
 801c656:	d45e      	bmi.n	801c716 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c658:	4576      	cmp	r6, lr
 801c65a:	da5c      	bge.n	801c716 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c65c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c65e:	fb06 0202 	mla	r2, r6, r2, r0
 801c662:	1412      	asrs	r2, r2, #16
 801c664:	d457      	bmi.n	801c716 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c666:	42ba      	cmp	r2, r7
 801c668:	da55      	bge.n	801c716 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c66a:	1cee      	adds	r6, r5, #3
 801c66c:	469a      	mov	sl, r3
 801c66e:	f1ba 0f00 	cmp.w	sl, #0
 801c672:	dd56      	ble.n	801c722 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c674:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c678:	1427      	asrs	r7, r4, #16
 801c67a:	1402      	asrs	r2, r0, #16
 801c67c:	fb0e 7202 	mla	r2, lr, r2, r7
 801c680:	9f00      	ldr	r7, [sp, #0]
 801c682:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c686:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801c68a:	d03c      	beq.n	801c706 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c68c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c690:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c694:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c698:	fa5f f28e 	uxtb.w	r2, lr
 801c69c:	b2ff      	uxtb	r7, r7
 801c69e:	f000 80dd 	beq.w	801c85c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c6a2:	fa1f f882 	uxth.w	r8, r2
 801c6a6:	43d2      	mvns	r2, r2
 801c6a8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801c6ac:	fb17 f708 	smulbb	r7, r7, r8
 801c6b0:	b2d2      	uxtb	r2, r2
 801c6b2:	fb19 f908 	smulbb	r9, r9, r8
 801c6b6:	fb0e 7702 	mla	r7, lr, r2, r7
 801c6ba:	fb1b f808 	smulbb	r8, fp, r8
 801c6be:	b2bf      	uxth	r7, r7
 801c6c0:	f107 0e01 	add.w	lr, r7, #1
 801c6c4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c6c8:	123f      	asrs	r7, r7, #8
 801c6ca:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c6ce:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c6d2:	fb07 9902 	mla	r9, r7, r2, r9
 801c6d6:	fa1f f989 	uxth.w	r9, r9
 801c6da:	f109 0701 	add.w	r7, r9, #1
 801c6de:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c6e2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c6e6:	fb07 8802 	mla	r8, r7, r2, r8
 801c6ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6ee:	fa1f f888 	uxth.w	r8, r8
 801c6f2:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c6f6:	f108 0201 	add.w	r2, r8, #1
 801c6fa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c6fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c702:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c708:	3603      	adds	r6, #3
 801c70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c70e:	4414      	add	r4, r2
 801c710:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c712:	4410      	add	r0, r2
 801c714:	e7ab      	b.n	801c66e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c716:	f04f 0e00 	mov.w	lr, #0
 801c71a:	eba3 020e 	sub.w	r2, r3, lr
 801c71e:	2a00      	cmp	r2, #0
 801c720:	dc3d      	bgt.n	801c79e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801c722:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c72a:	441d      	add	r5, r3
 801c72c:	2900      	cmp	r1, #0
 801c72e:	f340 809c 	ble.w	801c86a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c732:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c738:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c73c:	3901      	subs	r1, #1
 801c73e:	eeb0 6a62 	vmov.f32	s12, s5
 801c742:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c746:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c74a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c74e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c752:	eeb0 6a43 	vmov.f32	s12, s6
 801c756:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c75a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c75e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c762:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c766:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c76a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c76e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c772:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c776:	ee12 2a90 	vmov	r2, s5
 801c77a:	eef0 2a47 	vmov.f32	s5, s14
 801c77e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c782:	ee13 2a10 	vmov	r2, s6
 801c786:	930f      	str	r3, [sp, #60]	; 0x3c
 801c788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c78a:	eeb0 3a67 	vmov.f32	s6, s15
 801c78e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c792:	9a01      	ldr	r2, [sp, #4]
 801c794:	9310      	str	r3, [sp, #64]	; 0x40
 801c796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c798:	bf08      	it	eq
 801c79a:	4613      	moveq	r3, r2
 801c79c:	e734      	b.n	801c608 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c79e:	1427      	asrs	r7, r4, #16
 801c7a0:	d44d      	bmi.n	801c83e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c7a2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c7a6:	42be      	cmp	r6, r7
 801c7a8:	dd49      	ble.n	801c83e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c7aa:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c7ae:	d446      	bmi.n	801c83e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c7b0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c7b4:	4542      	cmp	r2, r8
 801c7b6:	dd42      	ble.n	801c83e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c7b8:	b236      	sxth	r6, r6
 801c7ba:	9a00      	ldr	r2, [sp, #0]
 801c7bc:	fb08 7606 	mla	r6, r8, r6, r7
 801c7c0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c7c4:	0e3a      	lsrs	r2, r7, #24
 801c7c6:	d03a      	beq.n	801c83e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c7c8:	2aff      	cmp	r2, #255	; 0xff
 801c7ca:	b2d6      	uxtb	r6, r2
 801c7cc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c7d0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c7d4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801c7d8:	b2ff      	uxtb	r7, r7
 801c7da:	d037      	beq.n	801c84c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801c7dc:	fa1f f986 	uxth.w	r9, r6
 801c7e0:	4472      	add	r2, lr
 801c7e2:	43f6      	mvns	r6, r6
 801c7e4:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c7e8:	fb17 f709 	smulbb	r7, r7, r9
 801c7ec:	fb1a fa09 	smulbb	sl, sl, r9
 801c7f0:	b2f6      	uxtb	r6, r6
 801c7f2:	fb1b f909 	smulbb	r9, fp, r9
 801c7f6:	fb08 7706 	mla	r7, r8, r6, r7
 801c7fa:	b2bf      	uxth	r7, r7
 801c7fc:	f107 0801 	add.w	r8, r7, #1
 801c800:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c804:	123f      	asrs	r7, r7, #8
 801c806:	54af      	strb	r7, [r5, r2]
 801c808:	442a      	add	r2, r5
 801c80a:	7857      	ldrb	r7, [r2, #1]
 801c80c:	fb07 aa06 	mla	sl, r7, r6, sl
 801c810:	fa1f fa8a 	uxth.w	sl, sl
 801c814:	f10a 0701 	add.w	r7, sl, #1
 801c818:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c81c:	7897      	ldrb	r7, [r2, #2]
 801c81e:	fb07 9906 	mla	r9, r7, r6, r9
 801c822:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c826:	fa1f f989 	uxth.w	r9, r9
 801c82a:	f882 a001 	strb.w	sl, [r2, #1]
 801c82e:	f109 0601 	add.w	r6, r9, #1
 801c832:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c836:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c83a:	f882 9002 	strb.w	r9, [r2, #2]
 801c83e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c840:	f10e 0e01 	add.w	lr, lr, #1
 801c844:	4414      	add	r4, r2
 801c846:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c848:	4410      	add	r0, r2
 801c84a:	e766      	b.n	801c71a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c84c:	4472      	add	r2, lr
 801c84e:	54af      	strb	r7, [r5, r2]
 801c850:	442a      	add	r2, r5
 801c852:	f882 a001 	strb.w	sl, [r2, #1]
 801c856:	f882 b002 	strb.w	fp, [r2, #2]
 801c85a:	e7f0      	b.n	801c83e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c85c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c860:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c864:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c868:	e74d      	b.n	801c706 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c86a:	b003      	add	sp, #12
 801c86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c870 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c874:	b087      	sub	sp, #28
 801c876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c87a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c87c:	9204      	str	r2, [sp, #16]
 801c87e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c882:	6860      	ldr	r0, [r4, #4]
 801c884:	9205      	str	r2, [sp, #20]
 801c886:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c88a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801c88e:	9101      	str	r1, [sp, #4]
 801c890:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c894:	fb00 2505 	mla	r5, r0, r5, r2
 801c898:	6822      	ldr	r2, [r4, #0]
 801c89a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c89e:	4415      	add	r5, r2
 801c8a0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c8a4:	3201      	adds	r2, #1
 801c8a6:	f022 0201 	bic.w	r2, r2, #1
 801c8aa:	9202      	str	r2, [sp, #8]
 801c8ac:	f8dc 2000 	ldr.w	r2, [ip]
 801c8b0:	9203      	str	r2, [sp, #12]
 801c8b2:	9a01      	ldr	r2, [sp, #4]
 801c8b4:	2a00      	cmp	r2, #0
 801c8b6:	dc03      	bgt.n	801c8c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c8b8:	9a04      	ldr	r2, [sp, #16]
 801c8ba:	2a00      	cmp	r2, #0
 801c8bc:	f340 8135 	ble.w	801cb2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c8c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c8c2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c8c6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c8ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c8cc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c8d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	dd0d      	ble.n	801c8f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c8d8:	1422      	asrs	r2, r4, #16
 801c8da:	d405      	bmi.n	801c8e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c8dc:	4542      	cmp	r2, r8
 801c8de:	da03      	bge.n	801c8e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c8e0:	1402      	asrs	r2, r0, #16
 801c8e2:	d401      	bmi.n	801c8e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c8e4:	42ba      	cmp	r2, r7
 801c8e6:	db06      	blt.n	801c8f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c8e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c8ea:	4474      	add	r4, lr
 801c8ec:	3b01      	subs	r3, #1
 801c8ee:	3503      	adds	r5, #3
 801c8f0:	4410      	add	r0, r2
 801c8f2:	e7ef      	b.n	801c8d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c8f4:	d077      	beq.n	801c9e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801c8f6:	1e5a      	subs	r2, r3, #1
 801c8f8:	fb0e 4602 	mla	r6, lr, r2, r4
 801c8fc:	1436      	asrs	r6, r6, #16
 801c8fe:	d469      	bmi.n	801c9d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c900:	4546      	cmp	r6, r8
 801c902:	da67      	bge.n	801c9d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c904:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c906:	fb06 0202 	mla	r2, r6, r2, r0
 801c90a:	1412      	asrs	r2, r2, #16
 801c90c:	d462      	bmi.n	801c9d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c90e:	42ba      	cmp	r2, r7
 801c910:	da60      	bge.n	801c9d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c912:	1cee      	adds	r6, r5, #3
 801c914:	4699      	mov	r9, r3
 801c916:	f1b9 0f00 	cmp.w	r9, #0
 801c91a:	dd5f      	ble.n	801c9dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c91c:	1422      	asrs	r2, r4, #16
 801c91e:	9902      	ldr	r1, [sp, #8]
 801c920:	1407      	asrs	r7, r0, #16
 801c922:	fb01 2707 	mla	r7, r1, r7, r2
 801c926:	9903      	ldr	r1, [sp, #12]
 801c928:	087a      	lsrs	r2, r7, #1
 801c92a:	5c8a      	ldrb	r2, [r1, r2]
 801c92c:	07f9      	lsls	r1, r7, #31
 801c92e:	bf54      	ite	pl
 801c930:	f002 020f 	andpl.w	r2, r2, #15
 801c934:	1112      	asrmi	r2, r2, #4
 801c936:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c93a:	b2d2      	uxtb	r2, r2
 801c93c:	2a00      	cmp	r2, #0
 801c93e:	d042      	beq.n	801c9c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c940:	497b      	ldr	r1, [pc, #492]	; (801cb30 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c942:	680f      	ldr	r7, [r1, #0]
 801c944:	9905      	ldr	r1, [sp, #20]
 801c946:	fa5f fb87 	uxtb.w	fp, r7
 801c94a:	434a      	muls	r2, r1
 801c94c:	f102 0801 	add.w	r8, r2, #1
 801c950:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801c954:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801c958:	1212      	asrs	r2, r2, #8
 801c95a:	fa1f fa82 	uxth.w	sl, r2
 801c95e:	43d2      	mvns	r2, r2
 801c960:	fb1b fb0a 	smulbb	fp, fp, sl
 801c964:	b2d2      	uxtb	r2, r2
 801c966:	fb08 b802 	mla	r8, r8, r2, fp
 801c96a:	fa1f f888 	uxth.w	r8, r8
 801c96e:	f108 0b01 	add.w	fp, r8, #1
 801c972:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c976:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c97a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c97e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c982:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c986:	fb17 fa0a 	smulbb	sl, r7, sl
 801c98a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c98e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801c992:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801c996:	fb07 aa02 	mla	sl, r7, r2, sl
 801c99a:	fb08 b802 	mla	r8, r8, r2, fp
 801c99e:	fa1f fa8a 	uxth.w	sl, sl
 801c9a2:	fa1f f888 	uxth.w	r8, r8
 801c9a6:	f10a 0701 	add.w	r7, sl, #1
 801c9aa:	f108 0b01 	add.w	fp, r8, #1
 801c9ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c9b2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c9b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c9be:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c9c2:	f806 8c02 	strb.w	r8, [r6, #-2]
 801c9c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9c8:	4474      	add	r4, lr
 801c9ca:	3603      	adds	r6, #3
 801c9cc:	f109 39ff 	add.w	r9, r9, #4294967295
 801c9d0:	4410      	add	r0, r2
 801c9d2:	e7a0      	b.n	801c916 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c9d4:	2700      	movs	r7, #0
 801c9d6:	1bda      	subs	r2, r3, r7
 801c9d8:	2a00      	cmp	r2, #0
 801c9da:	dc3e      	bgt.n	801ca5a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801c9dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c9e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9e4:	441d      	add	r5, r3
 801c9e6:	9b01      	ldr	r3, [sp, #4]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	f340 809e 	ble.w	801cb2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c9ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c9f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c9f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c9f8:	eeb0 6a62 	vmov.f32	s12, s5
 801c9fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ca00:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca08:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ca0c:	eeb0 6a43 	vmov.f32	s12, s6
 801ca10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca14:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ca18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca20:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca30:	ee12 2a90 	vmov	r2, s5
 801ca34:	eef0 2a47 	vmov.f32	s5, s14
 801ca38:	fb92 fef3 	sdiv	lr, r2, r3
 801ca3c:	ee13 2a10 	vmov	r2, s6
 801ca40:	eeb0 3a67 	vmov.f32	s6, s15
 801ca44:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca48:	9314      	str	r3, [sp, #80]	; 0x50
 801ca4a:	9b01      	ldr	r3, [sp, #4]
 801ca4c:	9a04      	ldr	r2, [sp, #16]
 801ca4e:	3b01      	subs	r3, #1
 801ca50:	9301      	str	r3, [sp, #4]
 801ca52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ca54:	bf08      	it	eq
 801ca56:	4613      	moveq	r3, r2
 801ca58:	e72b      	b.n	801c8b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ca5a:	1426      	asrs	r6, r4, #16
 801ca5c:	d460      	bmi.n	801cb20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ca5e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ca62:	42b2      	cmp	r2, r6
 801ca64:	dd5c      	ble.n	801cb20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ca66:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ca6a:	d459      	bmi.n	801cb20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ca6c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ca70:	4542      	cmp	r2, r8
 801ca72:	dd55      	ble.n	801cb20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ca74:	9a02      	ldr	r2, [sp, #8]
 801ca76:	9903      	ldr	r1, [sp, #12]
 801ca78:	fb08 6602 	mla	r6, r8, r2, r6
 801ca7c:	0872      	lsrs	r2, r6, #1
 801ca7e:	07f6      	lsls	r6, r6, #31
 801ca80:	5c8a      	ldrb	r2, [r1, r2]
 801ca82:	bf54      	ite	pl
 801ca84:	f002 020f 	andpl.w	r2, r2, #15
 801ca88:	1112      	asrmi	r2, r2, #4
 801ca8a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ca8e:	b2d2      	uxtb	r2, r2
 801ca90:	2a00      	cmp	r2, #0
 801ca92:	d045      	beq.n	801cb20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ca94:	4926      	ldr	r1, [pc, #152]	; (801cb30 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ca96:	f8d1 8000 	ldr.w	r8, [r1]
 801ca9a:	9905      	ldr	r1, [sp, #20]
 801ca9c:	fa5f fb88 	uxtb.w	fp, r8
 801caa0:	434a      	muls	r2, r1
 801caa2:	1c56      	adds	r6, r2, #1
 801caa4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801caa8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801caac:	1212      	asrs	r2, r2, #8
 801caae:	f815 9006 	ldrb.w	r9, [r5, r6]
 801cab2:	fa1f fa82 	uxth.w	sl, r2
 801cab6:	43d2      	mvns	r2, r2
 801cab8:	fb1b fb0a 	smulbb	fp, fp, sl
 801cabc:	b2d2      	uxtb	r2, r2
 801cabe:	fb09 b902 	mla	r9, r9, r2, fp
 801cac2:	fa1f f989 	uxth.w	r9, r9
 801cac6:	f109 0b01 	add.w	fp, r9, #1
 801caca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cace:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801cad2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801cad6:	fb1b fb0a 	smulbb	fp, fp, sl
 801cada:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cade:	fb18 fa0a 	smulbb	sl, r8, sl
 801cae2:	f805 9006 	strb.w	r9, [r5, r6]
 801cae6:	442e      	add	r6, r5
 801cae8:	f896 8002 	ldrb.w	r8, [r6, #2]
 801caec:	f896 9001 	ldrb.w	r9, [r6, #1]
 801caf0:	fb08 aa02 	mla	sl, r8, r2, sl
 801caf4:	fb09 b902 	mla	r9, r9, r2, fp
 801caf8:	fa1f fa8a 	uxth.w	sl, sl
 801cafc:	fa1f f989 	uxth.w	r9, r9
 801cb00:	f10a 0801 	add.w	r8, sl, #1
 801cb04:	f109 0b01 	add.w	fp, r9, #1
 801cb08:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801cb0c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cb10:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cb14:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cb18:	f886 a002 	strb.w	sl, [r6, #2]
 801cb1c:	f886 9001 	strb.w	r9, [r6, #1]
 801cb20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb22:	4474      	add	r4, lr
 801cb24:	3701      	adds	r7, #1
 801cb26:	4410      	add	r0, r2
 801cb28:	e755      	b.n	801c9d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801cb2a:	b007      	add	sp, #28
 801cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb30:	20056564 	.word	0x20056564

0801cb34 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb38:	b085      	sub	sp, #20
 801cb3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cb3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb40:	9203      	str	r2, [sp, #12]
 801cb42:	6860      	ldr	r0, [r4, #4]
 801cb44:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801cb48:	9100      	str	r1, [sp, #0]
 801cb4a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801cb4e:	fb00 2606 	mla	r6, r0, r6, r2
 801cb52:	6822      	ldr	r2, [r4, #0]
 801cb54:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cb58:	4416      	add	r6, r2
 801cb5a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801cb5e:	3201      	adds	r2, #1
 801cb60:	f022 0201 	bic.w	r2, r2, #1
 801cb64:	9201      	str	r2, [sp, #4]
 801cb66:	f8dc 2000 	ldr.w	r2, [ip]
 801cb6a:	9202      	str	r2, [sp, #8]
 801cb6c:	9a00      	ldr	r2, [sp, #0]
 801cb6e:	2a00      	cmp	r2, #0
 801cb70:	dc03      	bgt.n	801cb7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801cb72:	9a03      	ldr	r2, [sp, #12]
 801cb74:	2a00      	cmp	r2, #0
 801cb76:	f340 8140 	ble.w	801cdfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801cb7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cb7c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801cb80:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801cb84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb86:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cb8a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	dd0e      	ble.n	801cbb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cb92:	142a      	asrs	r2, r5, #16
 801cb94:	d405      	bmi.n	801cba2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cb96:	4572      	cmp	r2, lr
 801cb98:	da03      	bge.n	801cba2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cb9a:	1422      	asrs	r2, r4, #16
 801cb9c:	d401      	bmi.n	801cba2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cb9e:	42ba      	cmp	r2, r7
 801cba0:	db07      	blt.n	801cbb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cba2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cba4:	3b01      	subs	r3, #1
 801cba6:	3603      	adds	r6, #3
 801cba8:	4415      	add	r5, r2
 801cbaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cbac:	4414      	add	r4, r2
 801cbae:	e7ee      	b.n	801cb8e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801cbb0:	d072      	beq.n	801cc98 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cbb2:	1e5a      	subs	r2, r3, #1
 801cbb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cbb6:	fb00 5002 	mla	r0, r0, r2, r5
 801cbba:	1400      	asrs	r0, r0, #16
 801cbbc:	d463      	bmi.n	801cc86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cbbe:	4570      	cmp	r0, lr
 801cbc0:	da61      	bge.n	801cc86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cbc2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cbc4:	fb00 4202 	mla	r2, r0, r2, r4
 801cbc8:	1412      	asrs	r2, r2, #16
 801cbca:	d45c      	bmi.n	801cc86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cbcc:	42ba      	cmp	r2, r7
 801cbce:	da5a      	bge.n	801cc86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cbd0:	1cf0      	adds	r0, r6, #3
 801cbd2:	469a      	mov	sl, r3
 801cbd4:	f1ba 0f00 	cmp.w	sl, #0
 801cbd8:	dd59      	ble.n	801cc8e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801cbda:	142a      	asrs	r2, r5, #16
 801cbdc:	9901      	ldr	r1, [sp, #4]
 801cbde:	1427      	asrs	r7, r4, #16
 801cbe0:	fb01 2707 	mla	r7, r1, r7, r2
 801cbe4:	9902      	ldr	r1, [sp, #8]
 801cbe6:	087a      	lsrs	r2, r7, #1
 801cbe8:	5c8a      	ldrb	r2, [r1, r2]
 801cbea:	07f9      	lsls	r1, r7, #31
 801cbec:	bf54      	ite	pl
 801cbee:	f002 020f 	andpl.w	r2, r2, #15
 801cbf2:	1112      	asrmi	r2, r2, #4
 801cbf4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cbf8:	b2d2      	uxtb	r2, r2
 801cbfa:	2a00      	cmp	r2, #0
 801cbfc:	d03b      	beq.n	801cc76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cbfe:	4980      	ldr	r1, [pc, #512]	; (801ce00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801cc00:	2aff      	cmp	r2, #255	; 0xff
 801cc02:	680f      	ldr	r7, [r1, #0]
 801cc04:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cc08:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cc0c:	b2ff      	uxtb	r7, r7
 801cc0e:	f000 80ed 	beq.w	801cdec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801cc12:	fa1f f882 	uxth.w	r8, r2
 801cc16:	43d2      	mvns	r2, r2
 801cc18:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801cc1c:	fb17 f708 	smulbb	r7, r7, r8
 801cc20:	b2d2      	uxtb	r2, r2
 801cc22:	fb19 f908 	smulbb	r9, r9, r8
 801cc26:	fb0e 7702 	mla	r7, lr, r2, r7
 801cc2a:	fb1b f808 	smulbb	r8, fp, r8
 801cc2e:	b2bf      	uxth	r7, r7
 801cc30:	f107 0e01 	add.w	lr, r7, #1
 801cc34:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801cc38:	123f      	asrs	r7, r7, #8
 801cc3a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cc3e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801cc42:	fb07 9902 	mla	r9, r7, r2, r9
 801cc46:	fa1f f989 	uxth.w	r9, r9
 801cc4a:	f109 0701 	add.w	r7, r9, #1
 801cc4e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cc52:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801cc56:	fb07 8802 	mla	r8, r7, r2, r8
 801cc5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc5e:	fa1f f888 	uxth.w	r8, r8
 801cc62:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cc66:	f108 0201 	add.w	r2, r8, #1
 801cc6a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cc6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cc72:	f800 8c01 	strb.w	r8, [r0, #-1]
 801cc76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc78:	3003      	adds	r0, #3
 801cc7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cc7e:	4415      	add	r5, r2
 801cc80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc82:	4414      	add	r4, r2
 801cc84:	e7a6      	b.n	801cbd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cc86:	2700      	movs	r7, #0
 801cc88:	1bda      	subs	r2, r3, r7
 801cc8a:	2a00      	cmp	r2, #0
 801cc8c:	dc40      	bgt.n	801cd10 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cc8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc96:	441e      	add	r6, r3
 801cc98:	9b00      	ldr	r3, [sp, #0]
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	f340 80ad 	ble.w	801cdfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801cca0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cca6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ccaa:	eeb0 6a62 	vmov.f32	s12, s5
 801ccae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ccb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ccb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ccba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ccbe:	eeb0 6a43 	vmov.f32	s12, s6
 801ccc2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ccc6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ccca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ccce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ccd2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ccd6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ccda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ccde:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cce2:	ee12 2a90 	vmov	r2, s5
 801cce6:	eef0 2a47 	vmov.f32	s5, s14
 801ccea:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccee:	ee13 2a10 	vmov	r2, s6
 801ccf2:	9311      	str	r3, [sp, #68]	; 0x44
 801ccf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ccf6:	eeb0 3a67 	vmov.f32	s6, s15
 801ccfa:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccfe:	9312      	str	r3, [sp, #72]	; 0x48
 801cd00:	9b00      	ldr	r3, [sp, #0]
 801cd02:	9a03      	ldr	r2, [sp, #12]
 801cd04:	3b01      	subs	r3, #1
 801cd06:	9300      	str	r3, [sp, #0]
 801cd08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd0a:	bf08      	it	eq
 801cd0c:	4613      	moveq	r3, r2
 801cd0e:	e72d      	b.n	801cb6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801cd10:	1428      	asrs	r0, r5, #16
 801cd12:	d45c      	bmi.n	801cdce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cd14:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801cd18:	4282      	cmp	r2, r0
 801cd1a:	dd58      	ble.n	801cdce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cd1c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801cd20:	d455      	bmi.n	801cdce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cd22:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801cd26:	4572      	cmp	r2, lr
 801cd28:	dd51      	ble.n	801cdce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cd2a:	9a01      	ldr	r2, [sp, #4]
 801cd2c:	9902      	ldr	r1, [sp, #8]
 801cd2e:	fb0e 0002 	mla	r0, lr, r2, r0
 801cd32:	0842      	lsrs	r2, r0, #1
 801cd34:	07c0      	lsls	r0, r0, #31
 801cd36:	5c8a      	ldrb	r2, [r1, r2]
 801cd38:	bf54      	ite	pl
 801cd3a:	f002 020f 	andpl.w	r2, r2, #15
 801cd3e:	1112      	asrmi	r2, r2, #4
 801cd40:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cd44:	b2d2      	uxtb	r2, r2
 801cd46:	2a00      	cmp	r2, #0
 801cd48:	d041      	beq.n	801cdce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cd4a:	492d      	ldr	r1, [pc, #180]	; (801ce00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801cd4c:	2aff      	cmp	r2, #255	; 0xff
 801cd4e:	6808      	ldr	r0, [r1, #0]
 801cd50:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801cd54:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cd58:	fa5f fe80 	uxtb.w	lr, r0
 801cd5c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801cd60:	d03b      	beq.n	801cdda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cd62:	fa1f f982 	uxth.w	r9, r2
 801cd66:	4438      	add	r0, r7
 801cd68:	43d2      	mvns	r2, r2
 801cd6a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801cd6e:	fb1e fe09 	smulbb	lr, lr, r9
 801cd72:	fb1a fa09 	smulbb	sl, sl, r9
 801cd76:	b2d2      	uxtb	r2, r2
 801cd78:	fb1b f909 	smulbb	r9, fp, r9
 801cd7c:	fb08 ee02 	mla	lr, r8, r2, lr
 801cd80:	fa1f fe8e 	uxth.w	lr, lr
 801cd84:	f10e 0801 	add.w	r8, lr, #1
 801cd88:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801cd8c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cd90:	f806 e000 	strb.w	lr, [r6, r0]
 801cd94:	4430      	add	r0, r6
 801cd96:	f890 e001 	ldrb.w	lr, [r0, #1]
 801cd9a:	fb0e aa02 	mla	sl, lr, r2, sl
 801cd9e:	fa1f fa8a 	uxth.w	sl, sl
 801cda2:	f10a 0e01 	add.w	lr, sl, #1
 801cda6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801cdaa:	f890 e002 	ldrb.w	lr, [r0, #2]
 801cdae:	fb0e 9902 	mla	r9, lr, r2, r9
 801cdb2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cdb6:	fa1f f989 	uxth.w	r9, r9
 801cdba:	f880 a001 	strb.w	sl, [r0, #1]
 801cdbe:	f109 0201 	add.w	r2, r9, #1
 801cdc2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801cdc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cdca:	f880 9002 	strb.w	r9, [r0, #2]
 801cdce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cdd0:	3701      	adds	r7, #1
 801cdd2:	4415      	add	r5, r2
 801cdd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cdd6:	4414      	add	r4, r2
 801cdd8:	e756      	b.n	801cc88 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cdda:	4438      	add	r0, r7
 801cddc:	f806 e000 	strb.w	lr, [r6, r0]
 801cde0:	4430      	add	r0, r6
 801cde2:	f880 a001 	strb.w	sl, [r0, #1]
 801cde6:	f880 b002 	strb.w	fp, [r0, #2]
 801cdea:	e7f0      	b.n	801cdce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cdec:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cdf0:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cdf4:	f800 bc01 	strb.w	fp, [r0, #-1]
 801cdf8:	e73d      	b.n	801cc76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cdfa:	b005      	add	sp, #20
 801cdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce00:	20056564 	.word	0x20056564

0801ce04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801ce04:	4770      	bx	lr

0801ce06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801ce06:	4770      	bx	lr

0801ce08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801ce08:	4770      	bx	lr

0801ce0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801ce0a:	4770      	bx	lr

0801ce0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ce0c:	4770      	bx	lr

0801ce0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ce0e:	4770      	bx	lr

0801ce10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ce10:	4770      	bx	lr

0801ce12 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ce12:	4770      	bx	lr

0801ce14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ce14:	4770      	bx	lr

0801ce16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ce16:	4770      	bx	lr

0801ce18 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ce18:	4770      	bx	lr

0801ce1a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ce1a:	4770      	bx	lr

0801ce1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ce1c:	4770      	bx	lr

0801ce1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ce1e:	4770      	bx	lr

0801ce20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ce20:	4770      	bx	lr

0801ce22 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ce22:	4770      	bx	lr

0801ce24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ce24:	4770      	bx	lr

0801ce26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ce26:	4770      	bx	lr

0801ce28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ce28:	4770      	bx	lr

0801ce2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ce2a:	4770      	bx	lr

0801ce2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ce2c:	2bff      	cmp	r3, #255	; 0xff
 801ce2e:	b508      	push	{r3, lr}
 801ce30:	d04f      	beq.n	801ced2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ce32:	2a2c      	cmp	r2, #44	; 0x2c
 801ce34:	d032      	beq.n	801ce9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801ce36:	d80f      	bhi.n	801ce58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801ce38:	2a08      	cmp	r2, #8
 801ce3a:	d046      	beq.n	801ceca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ce3c:	d805      	bhi.n	801ce4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801ce3e:	2a04      	cmp	r2, #4
 801ce40:	d041      	beq.n	801cec6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ce42:	2a05      	cmp	r2, #5
 801ce44:	d03d      	beq.n	801cec2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ce46:	2000      	movs	r0, #0
 801ce48:	e027      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce4a:	2a0a      	cmp	r2, #10
 801ce4c:	d03d      	beq.n	801ceca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ce4e:	d301      	bcc.n	801ce54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ce50:	2a0b      	cmp	r2, #11
 801ce52:	d1f8      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce54:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ce56:	e020      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce58:	2a30      	cmp	r2, #48	; 0x30
 801ce5a:	d038      	beq.n	801cece <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ce5c:	d808      	bhi.n	801ce70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801ce5e:	2a2e      	cmp	r2, #46	; 0x2e
 801ce60:	684b      	ldr	r3, [r1, #4]
 801ce62:	d029      	beq.n	801ceb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801ce64:	d90b      	bls.n	801ce7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801ce66:	781b      	ldrb	r3, [r3, #0]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d1ec      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce6c:	6a00      	ldr	r0, [r0, #32]
 801ce6e:	e014      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce70:	2a32      	cmp	r2, #50	; 0x32
 801ce72:	d02c      	beq.n	801cece <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ce74:	d301      	bcc.n	801ce7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801ce76:	2a33      	cmp	r2, #51	; 0x33
 801ce78:	d1e5      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce7a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801ce7c:	e00d      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce7e:	781b      	ldrb	r3, [r3, #0]
 801ce80:	2b01      	cmp	r3, #1
 801ce82:	d009      	beq.n	801ce98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801ce84:	d3f2      	bcc.n	801ce6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801ce86:	2b02      	cmp	r3, #2
 801ce88:	d1dd      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce8a:	4b39      	ldr	r3, [pc, #228]	; (801cf70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ce8c:	f240 4186 	movw	r1, #1158	; 0x486
 801ce90:	4a38      	ldr	r2, [pc, #224]	; (801cf74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ce92:	4839      	ldr	r0, [pc, #228]	; (801cf78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801ce94:	f008 fade 	bl	8025454 <__assert_func>
 801ce98:	6900      	ldr	r0, [r0, #16]
 801ce9a:	bd08      	pop	{r3, pc}
 801ce9c:	684b      	ldr	r3, [r1, #4]
 801ce9e:	781b      	ldrb	r3, [r3, #0]
 801cea0:	2b01      	cmp	r3, #1
 801cea2:	d007      	beq.n	801ceb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801cea4:	d30b      	bcc.n	801cebe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801cea6:	2b02      	cmp	r3, #2
 801cea8:	d1cd      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ceaa:	4b31      	ldr	r3, [pc, #196]	; (801cf70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ceac:	f240 4192 	movw	r1, #1170	; 0x492
 801ceb0:	4a30      	ldr	r2, [pc, #192]	; (801cf74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ceb2:	e7ee      	b.n	801ce92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ceb4:	6880      	ldr	r0, [r0, #8]
 801ceb6:	e7f0      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ceb8:	781b      	ldrb	r3, [r3, #0]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d1c3      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cebe:	6980      	ldr	r0, [r0, #24]
 801cec0:	e7eb      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cec2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801cec4:	e7e9      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cec6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801cec8:	e7e7      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ceca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801cecc:	e7e5      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cece:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ced0:	e7e3      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ced2:	2a2c      	cmp	r2, #44	; 0x2c
 801ced4:	d030      	beq.n	801cf38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801ced6:	d80f      	bhi.n	801cef8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801ced8:	2a08      	cmp	r2, #8
 801ceda:	d044      	beq.n	801cf66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801cedc:	d805      	bhi.n	801ceea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801cede:	2a04      	cmp	r2, #4
 801cee0:	d03f      	beq.n	801cf62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801cee2:	2a05      	cmp	r2, #5
 801cee4:	d1af      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cee6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801cee8:	e7d7      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ceea:	2a0a      	cmp	r2, #10
 801ceec:	d03b      	beq.n	801cf66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ceee:	d301      	bcc.n	801cef4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801cef0:	2a0b      	cmp	r2, #11
 801cef2:	d1a8      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cef4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801cef6:	e7d0      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cef8:	2a30      	cmp	r2, #48	; 0x30
 801cefa:	d036      	beq.n	801cf6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cefc:	d808      	bhi.n	801cf10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801cefe:	2a2e      	cmp	r2, #46	; 0x2e
 801cf00:	684b      	ldr	r3, [r1, #4]
 801cf02:	d028      	beq.n	801cf56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801cf04:	d90b      	bls.n	801cf1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801cf06:	781b      	ldrb	r3, [r3, #0]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d19c      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cf0e:	e7c4      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf10:	2a32      	cmp	r2, #50	; 0x32
 801cf12:	d02a      	beq.n	801cf6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cf14:	d301      	bcc.n	801cf1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801cf16:	2a33      	cmp	r2, #51	; 0x33
 801cf18:	d195      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf1a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801cf1c:	e7bd      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf1e:	781b      	ldrb	r3, [r3, #0]
 801cf20:	2b01      	cmp	r3, #1
 801cf22:	d007      	beq.n	801cf34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801cf24:	d3f2      	bcc.n	801cf0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801cf26:	2b02      	cmp	r3, #2
 801cf28:	d18d      	bne.n	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf2a:	4b11      	ldr	r3, [pc, #68]	; (801cf70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cf2c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 801cf30:	4a10      	ldr	r2, [pc, #64]	; (801cf74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cf32:	e7ae      	b.n	801ce92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cf34:	6940      	ldr	r0, [r0, #20]
 801cf36:	e7b0      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf38:	684b      	ldr	r3, [r1, #4]
 801cf3a:	781b      	ldrb	r3, [r3, #0]
 801cf3c:	2b01      	cmp	r3, #1
 801cf3e:	d008      	beq.n	801cf52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801cf40:	d30d      	bcc.n	801cf5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801cf42:	2b02      	cmp	r3, #2
 801cf44:	f47f af7f 	bne.w	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf48:	4b09      	ldr	r3, [pc, #36]	; (801cf70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cf4a:	f240 41cf 	movw	r1, #1231	; 0x4cf
 801cf4e:	4a09      	ldr	r2, [pc, #36]	; (801cf74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cf50:	e79f      	b.n	801ce92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cf52:	68c0      	ldr	r0, [r0, #12]
 801cf54:	e7a1      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf56:	781b      	ldrb	r3, [r3, #0]
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	f47f af74 	bne.w	801ce46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf5e:	69c0      	ldr	r0, [r0, #28]
 801cf60:	e79b      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801cf64:	e799      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf66:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801cf68:	e797      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801cf6c:	e795      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf6e:	bf00      	nop
 801cf70:	08029ef9 	.word	0x08029ef9
 801cf74:	0802a71c 	.word	0x0802a71c
 801cf78:	08029f45 	.word	0x08029f45

0801cf7c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf80:	b085      	sub	sp, #20
 801cf82:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 801cf86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cf88:	f1be 0f00 	cmp.w	lr, #0
 801cf8c:	f000 8114 	beq.w	801d1b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cf90:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 801cf94:	f1bc 0f00 	cmp.w	ip, #0
 801cf98:	f340 810e 	ble.w	801d1b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cf9c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801cfa0:	2800      	cmp	r0, #0
 801cfa2:	f340 8109 	ble.w	801d1b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801cfa6:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801cfaa:	4350      	muls	r0, r2
 801cfac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cfb0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801cfb4:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 801cfb8:	eba2 060c 	sub.w	r6, r2, ip
 801cfbc:	fb02 3305 	mla	r3, r2, r5, r3
 801cfc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cfc4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801cfc8:	fa5f f88b 	uxtb.w	r8, fp
 801cfcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfd0:	fa5f f78a 	uxtb.w	r7, sl
 801cfd4:	4419      	add	r1, r3
 801cfd6:	fa5f f984 	uxtb.w	r9, r4
 801cfda:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cfde:	4408      	add	r0, r1
 801cfe0:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801cfe4:	d03e      	beq.n	801d064 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 801cfe6:	fa1f f58e 	uxth.w	r5, lr
 801cfea:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801cfee:	4463      	add	r3, ip
 801cff0:	fb08 f405 	mul.w	r4, r8, r5
 801cff4:	b292      	uxth	r2, r2
 801cff6:	436f      	muls	r7, r5
 801cff8:	fb09 f505 	mul.w	r5, r9, r5
 801cffc:	4281      	cmp	r1, r0
 801cffe:	f080 80db 	bcs.w	801d1b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801d002:	eb01 0c03 	add.w	ip, r1, r3
 801d006:	458c      	cmp	ip, r1
 801d008:	f101 0e03 	add.w	lr, r1, #3
 801d00c:	d928      	bls.n	801d060 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801d00e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d012:	fb11 f102 	smulbb	r1, r1, r2
 801d016:	4429      	add	r1, r5
 801d018:	b289      	uxth	r1, r1
 801d01a:	f101 0801 	add.w	r8, r1, #1
 801d01e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d022:	1209      	asrs	r1, r1, #8
 801d024:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d028:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801d02c:	fb11 f102 	smulbb	r1, r1, r2
 801d030:	4439      	add	r1, r7
 801d032:	b289      	uxth	r1, r1
 801d034:	f101 0801 	add.w	r8, r1, #1
 801d038:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d03c:	1209      	asrs	r1, r1, #8
 801d03e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d042:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d046:	fb11 f102 	smulbb	r1, r1, r2
 801d04a:	4421      	add	r1, r4
 801d04c:	b289      	uxth	r1, r1
 801d04e:	f101 0801 	add.w	r8, r1, #1
 801d052:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d056:	1209      	asrs	r1, r1, #8
 801d058:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801d05c:	4671      	mov	r1, lr
 801d05e:	e7d2      	b.n	801d006 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 801d060:	4431      	add	r1, r6
 801d062:	e7cb      	b.n	801cffc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 801d064:	f012 0503 	ands.w	r5, r2, #3
 801d068:	d00f      	beq.n	801d08a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801d06a:	4463      	add	r3, ip
 801d06c:	4281      	cmp	r1, r0
 801d06e:	f080 80a3 	bcs.w	801d1b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801d072:	18ca      	adds	r2, r1, r3
 801d074:	4291      	cmp	r1, r2
 801d076:	f080 809d 	bcs.w	801d1b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 801d07a:	f881 9000 	strb.w	r9, [r1]
 801d07e:	3103      	adds	r1, #3
 801d080:	f801 7c02 	strb.w	r7, [r1, #-2]
 801d084:	f801 8c01 	strb.w	r8, [r1, #-1]
 801d088:	e7f4      	b.n	801d074 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d08a:	f001 0603 	and.w	r6, r1, #3
 801d08e:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 801d092:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 801d096:	4463      	add	r3, ip
 801d098:	2e02      	cmp	r6, #2
 801d09a:	b2bf      	uxth	r7, r7
 801d09c:	fa1f fa8a 	uxth.w	sl, sl
 801d0a0:	d017      	beq.n	801d0d2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801d0a2:	2e03      	cmp	r6, #3
 801d0a4:	d00c      	beq.n	801d0c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801d0a6:	2e01      	cmp	r6, #1
 801d0a8:	d11f      	bne.n	801d0ea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801d0aa:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801d0ae:	460d      	mov	r5, r1
 801d0b0:	4285      	cmp	r5, r0
 801d0b2:	d230      	bcs.n	801d116 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 801d0b4:	f885 9000 	strb.w	r9, [r5]
 801d0b8:	f8a5 7001 	strh.w	r7, [r5, #1]
 801d0bc:	4435      	add	r5, r6
 801d0be:	e7f7      	b.n	801d0b0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 801d0c0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801d0c4:	460d      	mov	r5, r1
 801d0c6:	4285      	cmp	r5, r0
 801d0c8:	d20c      	bcs.n	801d0e4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d0ca:	f885 9000 	strb.w	r9, [r5]
 801d0ce:	4435      	add	r5, r6
 801d0d0:	e7f9      	b.n	801d0c6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801d0d2:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801d0d6:	460d      	mov	r5, r1
 801d0d8:	4285      	cmp	r5, r0
 801d0da:	d218      	bcs.n	801d10e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801d0dc:	f8a5 a000 	strh.w	sl, [r5]
 801d0e0:	4435      	add	r5, r6
 801d0e2:	e7f9      	b.n	801d0d8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 801d0e4:	3b01      	subs	r3, #1
 801d0e6:	3101      	adds	r1, #1
 801d0e8:	2501      	movs	r5, #1
 801d0ea:	f003 0603 	and.w	r6, r3, #3
 801d0ee:	2e02      	cmp	r6, #2
 801d0f0:	d021      	beq.n	801d136 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 801d0f2:	2e03      	cmp	r6, #3
 801d0f4:	d013      	beq.n	801d11e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 801d0f6:	2e01      	cmp	r6, #1
 801d0f8:	d126      	bne.n	801d148 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801d0fa:	3b01      	subs	r3, #1
 801d0fc:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801d100:	18ce      	adds	r6, r1, r3
 801d102:	4286      	cmp	r6, r0
 801d104:	d220      	bcs.n	801d148 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801d106:	f886 8000 	strb.w	r8, [r6]
 801d10a:	443e      	add	r6, r7
 801d10c:	e7f9      	b.n	801d102 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801d10e:	3b02      	subs	r3, #2
 801d110:	3102      	adds	r1, #2
 801d112:	2502      	movs	r5, #2
 801d114:	e7e9      	b.n	801d0ea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801d116:	3b03      	subs	r3, #3
 801d118:	3103      	adds	r1, #3
 801d11a:	2500      	movs	r5, #0
 801d11c:	e7e5      	b.n	801d0ea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801d11e:	3b03      	subs	r3, #3
 801d120:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801d124:	18ce      	adds	r6, r1, r3
 801d126:	4286      	cmp	r6, r0
 801d128:	d20e      	bcs.n	801d148 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801d12a:	f8a6 a000 	strh.w	sl, [r6]
 801d12e:	f886 8002 	strb.w	r8, [r6, #2]
 801d132:	443e      	add	r6, r7
 801d134:	e7f7      	b.n	801d126 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 801d136:	3b02      	subs	r3, #2
 801d138:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801d13c:	18ce      	adds	r6, r1, r3
 801d13e:	4286      	cmp	r6, r0
 801d140:	d202      	bcs.n	801d148 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801d142:	8037      	strh	r7, [r6, #0]
 801d144:	4466      	add	r6, ip
 801d146:	e7fa      	b.n	801d13e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 801d148:	079e      	lsls	r6, r3, #30
 801d14a:	d006      	beq.n	801d15a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801d14c:	4b1c      	ldr	r3, [pc, #112]	; (801d1c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801d14e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 801d152:	4a1c      	ldr	r2, [pc, #112]	; (801d1c4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 801d154:	481c      	ldr	r0, [pc, #112]	; (801d1c8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 801d156:	f008 f97d 	bl	8025454 <__assert_func>
 801d15a:	b36b      	cbz	r3, 801d1b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801d15c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 801d160:	109b      	asrs	r3, r3, #2
 801d162:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d166:	2703      	movs	r7, #3
 801d168:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 801d16c:	9601      	str	r6, [sp, #4]
 801d16e:	0426      	lsls	r6, r4, #16
 801d170:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 801d174:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 801d178:	9602      	str	r6, [sp, #8]
 801d17a:	009e      	lsls	r6, r3, #2
 801d17c:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 801d180:	9403      	str	r4, [sp, #12]
 801d182:	009b      	lsls	r3, r3, #2
 801d184:	4281      	cmp	r1, r0
 801d186:	d217      	bcs.n	801d1b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801d188:	eb01 0c06 	add.w	ip, r1, r6
 801d18c:	462a      	mov	r2, r5
 801d18e:	4561      	cmp	r1, ip
 801d190:	d20e      	bcs.n	801d1b0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 801d192:	f10d 0e10 	add.w	lr, sp, #16
 801d196:	1c54      	adds	r4, r2, #1
 801d198:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801d19c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801d1a0:	f841 2b04 	str.w	r2, [r1], #4
 801d1a4:	fb94 f2f7 	sdiv	r2, r4, r7
 801d1a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d1ac:	1aa2      	subs	r2, r4, r2
 801d1ae:	e7ee      	b.n	801d18e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 801d1b0:	4419      	add	r1, r3
 801d1b2:	e7e7      	b.n	801d184 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 801d1b4:	4431      	add	r1, r6
 801d1b6:	e759      	b.n	801d06c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 801d1b8:	b005      	add	sp, #20
 801d1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1be:	bf00      	nop
 801d1c0:	08029e15 	.word	0x08029e15
 801d1c4:	0802a466 	.word	0x0802a466
 801d1c8:	08029f45 	.word	0x08029f45

0801d1cc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d1cc:	b508      	push	{r3, lr}
 801d1ce:	4b06      	ldr	r3, [pc, #24]	; (801d1e8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801d1d0:	8818      	ldrh	r0, [r3, #0]
 801d1d2:	b928      	cbnz	r0, 801d1e0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801d1d4:	4b05      	ldr	r3, [pc, #20]	; (801d1ec <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801d1d6:	214d      	movs	r1, #77	; 0x4d
 801d1d8:	4a05      	ldr	r2, [pc, #20]	; (801d1f0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801d1da:	4806      	ldr	r0, [pc, #24]	; (801d1f4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801d1dc:	f008 f93a 	bl	8025454 <__assert_func>
 801d1e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d1e4:	b280      	uxth	r0, r0
 801d1e6:	bd08      	pop	{r3, pc}
 801d1e8:	20056536 	.word	0x20056536
 801d1ec:	0802a192 	.word	0x0802a192
 801d1f0:	0802a6e1 	.word	0x0802a6e1
 801d1f4:	0802a1d4 	.word	0x0802a1d4

0801d1f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d1f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d1fc:	b08b      	sub	sp, #44	; 0x2c
 801d1fe:	460d      	mov	r5, r1
 801d200:	4616      	mov	r6, r2
 801d202:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801d206:	f1b8 0f00 	cmp.w	r8, #0
 801d20a:	d045      	beq.n	801d298 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801d20c:	6810      	ldr	r0, [r2, #0]
 801d20e:	ac06      	add	r4, sp, #24
 801d210:	6851      	ldr	r1, [r2, #4]
 801d212:	4f50      	ldr	r7, [pc, #320]	; (801d354 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 801d214:	c403      	stmia	r4!, {r0, r1}
 801d216:	6818      	ldr	r0, [r3, #0]
 801d218:	ac08      	add	r4, sp, #32
 801d21a:	6859      	ldr	r1, [r3, #4]
 801d21c:	c403      	stmia	r4!, {r0, r1}
 801d21e:	a806      	add	r0, sp, #24
 801d220:	f7fa fe62 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d224:	4631      	mov	r1, r6
 801d226:	a808      	add	r0, sp, #32
 801d228:	f7fa fe46 	bl	8017eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d22c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d230:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d234:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d238:	6838      	ldr	r0, [r7, #0]
 801d23a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d23e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801d242:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801d246:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d24a:	440d      	add	r5, r1
 801d24c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d250:	440a      	add	r2, r1
 801d252:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d256:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d25a:	4413      	add	r3, r2
 801d25c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d260:	6803      	ldr	r3, [r0, #0]
 801d262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d264:	4798      	blx	r3
 801d266:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d26a:	d018      	beq.n	801d29e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801d26c:	f010 0f04 	tst.w	r0, #4
 801d270:	6838      	ldr	r0, [r7, #0]
 801d272:	d017      	beq.n	801d2a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d274:	2700      	movs	r7, #0
 801d276:	6801      	ldr	r1, [r0, #0]
 801d278:	b2a4      	uxth	r4, r4
 801d27a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d27e:	b2b6      	uxth	r6, r6
 801d280:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d284:	9401      	str	r4, [sp, #4]
 801d286:	9600      	str	r6, [sp, #0]
 801d288:	e9cd 8703 	strd	r8, r7, [sp, #12]
 801d28c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801d290:	9702      	str	r7, [sp, #8]
 801d292:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 801d294:	4629      	mov	r1, r5
 801d296:	47a0      	blx	r4
 801d298:	b00b      	add	sp, #44	; 0x2c
 801d29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d29e:	f010 0f01 	tst.w	r0, #1
 801d2a2:	e7e5      	b.n	801d270 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801d2a4:	6803      	ldr	r3, [r0, #0]
 801d2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2a8:	4798      	blx	r3
 801d2aa:	4a2b      	ldr	r2, [pc, #172]	; (801d358 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801d2ac:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801d2b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d2b4:	8813      	ldrh	r3, [r2, #0]
 801d2b6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801d2ba:	fb03 f404 	mul.w	r4, r3, r4
 801d2be:	fb03 c101 	mla	r1, r3, r1, ip
 801d2c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d2c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d2ca:	4408      	add	r0, r1
 801d2cc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801d2d0:	4404      	add	r4, r0
 801d2d2:	d02e      	beq.n	801d332 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 801d2d4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d2d8:	1b9b      	subs	r3, r3, r6
 801d2da:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801d2de:	1b96      	subs	r6, r2, r6
 801d2e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d2e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d2e8:	42a0      	cmp	r0, r4
 801d2ea:	d22d      	bcs.n	801d348 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801d2ec:	eb00 0e01 	add.w	lr, r0, r1
 801d2f0:	4570      	cmp	r0, lr
 801d2f2:	d210      	bcs.n	801d316 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801d2f4:	f890 9000 	ldrb.w	r9, [r0]
 801d2f8:	f815 2b01 	ldrb.w	r2, [r5], #1
 801d2fc:	fb19 f90c 	smulbb	r9, r9, ip
 801d300:	fb02 9208 	mla	r2, r2, r8, r9
 801d304:	b292      	uxth	r2, r2
 801d306:	f102 0901 	add.w	r9, r2, #1
 801d30a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801d30e:	1212      	asrs	r2, r2, #8
 801d310:	f800 2b01 	strb.w	r2, [r0], #1
 801d314:	e7ec      	b.n	801d2f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 801d316:	4418      	add	r0, r3
 801d318:	4435      	add	r5, r6
 801d31a:	e7e5      	b.n	801d2e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801d31c:	8813      	ldrh	r3, [r2, #0]
 801d31e:	1b9b      	subs	r3, r3, r6
 801d320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d324:	4418      	add	r0, r3
 801d326:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d32a:	1b9b      	subs	r3, r3, r6
 801d32c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d330:	441d      	add	r5, r3
 801d332:	42a0      	cmp	r0, r4
 801d334:	d208      	bcs.n	801d348 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801d336:	eb00 0c01 	add.w	ip, r0, r1
 801d33a:	4560      	cmp	r0, ip
 801d33c:	d2ee      	bcs.n	801d31c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801d33e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d342:	f800 3b01 	strb.w	r3, [r0], #1
 801d346:	e7f8      	b.n	801d33a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 801d348:	6838      	ldr	r0, [r7, #0]
 801d34a:	6803      	ldr	r3, [r0, #0]
 801d34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d34e:	4798      	blx	r3
 801d350:	e7a2      	b.n	801d298 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801d352:	bf00      	nop
 801d354:	2005653c 	.word	0x2005653c
 801d358:	20056536 	.word	0x20056536

0801d35c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d35c:	b510      	push	{r4, lr}
 801d35e:	4604      	mov	r4, r0
 801d360:	2104      	movs	r1, #4
 801d362:	f007 fef8 	bl	8025156 <_ZdlPvj>
 801d366:	4620      	mov	r0, r4
 801d368:	bd10      	pop	{r4, pc}

0801d36a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d36a:	b510      	push	{r4, lr}
 801d36c:	4604      	mov	r4, r0
 801d36e:	2104      	movs	r1, #4
 801d370:	f007 fef1 	bl	8025156 <_ZdlPvj>
 801d374:	4620      	mov	r0, r4
 801d376:	bd10      	pop	{r4, pc}

0801d378 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d378:	b510      	push	{r4, lr}
 801d37a:	4604      	mov	r4, r0
 801d37c:	2104      	movs	r1, #4
 801d37e:	f007 feea 	bl	8025156 <_ZdlPvj>
 801d382:	4620      	mov	r0, r4
 801d384:	bd10      	pop	{r4, pc}

0801d386 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d386:	b510      	push	{r4, lr}
 801d388:	4604      	mov	r4, r0
 801d38a:	2104      	movs	r1, #4
 801d38c:	f007 fee3 	bl	8025156 <_ZdlPvj>
 801d390:	4620      	mov	r0, r4
 801d392:	bd10      	pop	{r4, pc}

0801d394 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d394:	b510      	push	{r4, lr}
 801d396:	4604      	mov	r4, r0
 801d398:	2104      	movs	r1, #4
 801d39a:	f007 fedc 	bl	8025156 <_ZdlPvj>
 801d39e:	4620      	mov	r0, r4
 801d3a0:	bd10      	pop	{r4, pc}

0801d3a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d3a2:	b510      	push	{r4, lr}
 801d3a4:	4604      	mov	r4, r0
 801d3a6:	2104      	movs	r1, #4
 801d3a8:	f007 fed5 	bl	8025156 <_ZdlPvj>
 801d3ac:	4620      	mov	r0, r4
 801d3ae:	bd10      	pop	{r4, pc}

0801d3b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d3b0:	b510      	push	{r4, lr}
 801d3b2:	4604      	mov	r4, r0
 801d3b4:	2104      	movs	r1, #4
 801d3b6:	f007 fece 	bl	8025156 <_ZdlPvj>
 801d3ba:	4620      	mov	r0, r4
 801d3bc:	bd10      	pop	{r4, pc}

0801d3be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d3be:	b510      	push	{r4, lr}
 801d3c0:	4604      	mov	r4, r0
 801d3c2:	2104      	movs	r1, #4
 801d3c4:	f007 fec7 	bl	8025156 <_ZdlPvj>
 801d3c8:	4620      	mov	r0, r4
 801d3ca:	bd10      	pop	{r4, pc}

0801d3cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d3cc:	b510      	push	{r4, lr}
 801d3ce:	4604      	mov	r4, r0
 801d3d0:	2104      	movs	r1, #4
 801d3d2:	f007 fec0 	bl	8025156 <_ZdlPvj>
 801d3d6:	4620      	mov	r0, r4
 801d3d8:	bd10      	pop	{r4, pc}

0801d3da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d3da:	b510      	push	{r4, lr}
 801d3dc:	4604      	mov	r4, r0
 801d3de:	2104      	movs	r1, #4
 801d3e0:	f007 feb9 	bl	8025156 <_ZdlPvj>
 801d3e4:	4620      	mov	r0, r4
 801d3e6:	bd10      	pop	{r4, pc}

0801d3e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d3e8:	b510      	push	{r4, lr}
 801d3ea:	4604      	mov	r4, r0
 801d3ec:	2104      	movs	r1, #4
 801d3ee:	f007 feb2 	bl	8025156 <_ZdlPvj>
 801d3f2:	4620      	mov	r0, r4
 801d3f4:	bd10      	pop	{r4, pc}

0801d3f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d3f6:	b510      	push	{r4, lr}
 801d3f8:	4604      	mov	r4, r0
 801d3fa:	2104      	movs	r1, #4
 801d3fc:	f007 feab 	bl	8025156 <_ZdlPvj>
 801d400:	4620      	mov	r0, r4
 801d402:	bd10      	pop	{r4, pc}

0801d404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d404:	b510      	push	{r4, lr}
 801d406:	4604      	mov	r4, r0
 801d408:	2104      	movs	r1, #4
 801d40a:	f007 fea4 	bl	8025156 <_ZdlPvj>
 801d40e:	4620      	mov	r0, r4
 801d410:	bd10      	pop	{r4, pc}

0801d412 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d412:	b510      	push	{r4, lr}
 801d414:	4604      	mov	r4, r0
 801d416:	2104      	movs	r1, #4
 801d418:	f007 fe9d 	bl	8025156 <_ZdlPvj>
 801d41c:	4620      	mov	r0, r4
 801d41e:	bd10      	pop	{r4, pc}

0801d420 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d420:	b510      	push	{r4, lr}
 801d422:	4604      	mov	r4, r0
 801d424:	2104      	movs	r1, #4
 801d426:	f007 fe96 	bl	8025156 <_ZdlPvj>
 801d42a:	4620      	mov	r0, r4
 801d42c:	bd10      	pop	{r4, pc}

0801d42e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d42e:	b510      	push	{r4, lr}
 801d430:	4604      	mov	r4, r0
 801d432:	2104      	movs	r1, #4
 801d434:	f007 fe8f 	bl	8025156 <_ZdlPvj>
 801d438:	4620      	mov	r0, r4
 801d43a:	bd10      	pop	{r4, pc}

0801d43c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d43c:	b510      	push	{r4, lr}
 801d43e:	4604      	mov	r4, r0
 801d440:	2104      	movs	r1, #4
 801d442:	f007 fe88 	bl	8025156 <_ZdlPvj>
 801d446:	4620      	mov	r0, r4
 801d448:	bd10      	pop	{r4, pc}

0801d44a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d44a:	b510      	push	{r4, lr}
 801d44c:	4604      	mov	r4, r0
 801d44e:	2104      	movs	r1, #4
 801d450:	f007 fe81 	bl	8025156 <_ZdlPvj>
 801d454:	4620      	mov	r0, r4
 801d456:	bd10      	pop	{r4, pc}

0801d458 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d458:	b510      	push	{r4, lr}
 801d45a:	4604      	mov	r4, r0
 801d45c:	2104      	movs	r1, #4
 801d45e:	f007 fe7a 	bl	8025156 <_ZdlPvj>
 801d462:	4620      	mov	r0, r4
 801d464:	bd10      	pop	{r4, pc}

0801d466 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d466:	b510      	push	{r4, lr}
 801d468:	4604      	mov	r4, r0
 801d46a:	2104      	movs	r1, #4
 801d46c:	f007 fe73 	bl	8025156 <_ZdlPvj>
 801d470:	4620      	mov	r0, r4
 801d472:	bd10      	pop	{r4, pc}

0801d474 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d474:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d476:	4606      	mov	r6, r0
 801d478:	b087      	sub	sp, #28
 801d47a:	4615      	mov	r5, r2
 801d47c:	461f      	mov	r7, r3
 801d47e:	b343      	cbz	r3, 801d4d2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801d480:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d484:	2b00      	cmp	r3, #0
 801d486:	dd24      	ble.n	801d4d2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801d488:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	dd20      	ble.n	801d4d2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801d490:	6808      	ldr	r0, [r1, #0]
 801d492:	aa04      	add	r2, sp, #16
 801d494:	6849      	ldr	r1, [r1, #4]
 801d496:	4c1a      	ldr	r4, [pc, #104]	; (801d500 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801d498:	c203      	stmia	r2!, {r0, r1}
 801d49a:	a804      	add	r0, sp, #16
 801d49c:	f7fa fd24 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d4a0:	6820      	ldr	r0, [r4, #0]
 801d4a2:	6803      	ldr	r3, [r0, #0]
 801d4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d4a6:	4798      	blx	r3
 801d4a8:	2fff      	cmp	r7, #255	; 0xff
 801d4aa:	d014      	beq.n	801d4d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d4ac:	f010 0f08 	tst.w	r0, #8
 801d4b0:	6820      	ldr	r0, [r4, #0]
 801d4b2:	d013      	beq.n	801d4dc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801d4b4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d4b8:	6801      	ldr	r1, [r0, #0]
 801d4ba:	9401      	str	r4, [sp, #4]
 801d4bc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d4c0:	9702      	str	r7, [sp, #8]
 801d4c2:	9400      	str	r4, [sp, #0]
 801d4c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d4c8:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801d4ca:	4629      	mov	r1, r5
 801d4cc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d4d0:	47a0      	blx	r4
 801d4d2:	b007      	add	sp, #28
 801d4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4d6:	f010 0f02 	tst.w	r0, #2
 801d4da:	e7e9      	b.n	801d4b0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801d4dc:	6803      	ldr	r3, [r0, #0]
 801d4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4e0:	4798      	blx	r3
 801d4e2:	4b08      	ldr	r3, [pc, #32]	; (801d504 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801d4e4:	4601      	mov	r1, r0
 801d4e6:	4630      	mov	r0, r6
 801d4e8:	881a      	ldrh	r2, [r3, #0]
 801d4ea:	6833      	ldr	r3, [r6, #0]
 801d4ec:	e9cd 5700 	strd	r5, r7, [sp]
 801d4f0:	69dd      	ldr	r5, [r3, #28]
 801d4f2:	ab04      	add	r3, sp, #16
 801d4f4:	47a8      	blx	r5
 801d4f6:	6820      	ldr	r0, [r4, #0]
 801d4f8:	6803      	ldr	r3, [r0, #0]
 801d4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4fc:	4798      	blx	r3
 801d4fe:	e7e8      	b.n	801d4d2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801d500:	2005653c 	.word	0x2005653c
 801d504:	20056536 	.word	0x20056536

0801d508 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d50c:	4db4      	ldr	r5, [pc, #720]	; (801d7e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801d50e:	4690      	mov	r8, r2
 801d510:	b08d      	sub	sp, #52	; 0x34
 801d512:	4604      	mov	r4, r0
 801d514:	682a      	ldr	r2, [r5, #0]
 801d516:	4689      	mov	r9, r1
 801d518:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801d51c:	2a02      	cmp	r2, #2
 801d51e:	d106      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801d520:	4bb0      	ldr	r3, [pc, #704]	; (801d7e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801d522:	f240 11ed 	movw	r1, #493	; 0x1ed
 801d526:	4ab0      	ldr	r2, [pc, #704]	; (801d7e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801d528:	48b0      	ldr	r0, [pc, #704]	; (801d7ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801d52a:	f007 ff93 	bl	8025454 <__assert_func>
 801d52e:	ae0c      	add	r6, sp, #48	; 0x30
 801d530:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801d534:	4630      	mov	r0, r6
 801d536:	f7fe f815 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d53a:	6823      	ldr	r3, [r4, #0]
 801d53c:	4607      	mov	r7, r0
 801d53e:	4620      	mov	r0, r4
 801d540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d542:	4798      	blx	r3
 801d544:	4287      	cmp	r7, r0
 801d546:	d004      	beq.n	801d552 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801d548:	4ba9      	ldr	r3, [pc, #676]	; (801d7f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801d54a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801d54e:	4aa6      	ldr	r2, [pc, #664]	; (801d7e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801d550:	e7ea      	b.n	801d528 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d552:	4630      	mov	r0, r6
 801d554:	f7fd ff7c 	bl	801b450 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d558:	4607      	mov	r7, r0
 801d55a:	b920      	cbnz	r0, 801d566 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801d55c:	4ba5      	ldr	r3, [pc, #660]	; (801d7f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801d55e:	f240 11f1 	movw	r1, #497	; 0x1f1
 801d562:	4aa1      	ldr	r2, [pc, #644]	; (801d7e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801d564:	e7e0      	b.n	801d528 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d566:	f8d8 0000 	ldr.w	r0, [r8]
 801d56a:	ab06      	add	r3, sp, #24
 801d56c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d570:	f9b8 a000 	ldrsh.w	sl, [r8]
 801d574:	c303      	stmia	r3!, {r0, r1}
 801d576:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d57a:	ab08      	add	r3, sp, #32
 801d57c:	f8d9 0000 	ldr.w	r0, [r9]
 801d580:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801d584:	c303      	stmia	r3!, {r0, r1}
 801d586:	4630      	mov	r0, r6
 801d588:	f7fd feee 	bl	801b368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d58c:	4680      	mov	r8, r0
 801d58e:	4630      	mov	r0, r6
 801d590:	f7fd ff24 	bl	801b3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d594:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801d598:	f10d 0920 	add.w	r9, sp, #32
 801d59c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801d5a0:	a806      	add	r0, sp, #24
 801d5a2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d5a6:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801d5aa:	f7fa fc9d 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d5ae:	4648      	mov	r0, r9
 801d5b0:	f7fa fc9a 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d5b4:	a80a      	add	r0, sp, #40	; 0x28
 801d5b6:	f7fa fc97 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d5ba:	4b8f      	ldr	r3, [pc, #572]	; (801d7f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801d5bc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d5c0:	881e      	ldrh	r6, [r3, #0]
 801d5c2:	4b8e      	ldr	r3, [pc, #568]	; (801d7fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801d5c4:	fa0f fb86 	sxth.w	fp, r6
 801d5c8:	8819      	ldrh	r1, [r3, #0]
 801d5ca:	4593      	cmp	fp, r2
 801d5cc:	dd75      	ble.n	801d6ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801d5ce:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801d5d2:	4494      	add	ip, r2
 801d5d4:	fa1f fc8c 	uxth.w	ip, ip
 801d5d8:	fa0f fa8c 	sxth.w	sl, ip
 801d5dc:	f1ba 0f00 	cmp.w	sl, #0
 801d5e0:	dd6b      	ble.n	801d6ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801d5e2:	fa0f f881 	sxth.w	r8, r1
 801d5e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d5ea:	4598      	cmp	r8, r3
 801d5ec:	dd65      	ble.n	801d6ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801d5ee:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801d5f2:	4418      	add	r0, r3
 801d5f4:	b280      	uxth	r0, r0
 801d5f6:	fa0f fe80 	sxth.w	lr, r0
 801d5fa:	f1be 0f00 	cmp.w	lr, #0
 801d5fe:	dd5c      	ble.n	801d6ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801d600:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801d604:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d608:	45d3      	cmp	fp, sl
 801d60a:	bfc8      	it	gt
 801d60c:	4666      	movgt	r6, ip
 801d60e:	45f0      	cmp	r8, lr
 801d610:	bfc8      	it	gt
 801d612:	4601      	movgt	r1, r0
 801d614:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d618:	1ab6      	subs	r6, r6, r2
 801d61a:	1ac9      	subs	r1, r1, r3
 801d61c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d620:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d624:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801d628:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801d62c:	f1bc 0f00 	cmp.w	ip, #0
 801d630:	f340 80aa 	ble.w	801d788 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d634:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801d638:	2e00      	cmp	r6, #0
 801d63a:	f340 80a5 	ble.w	801d788 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d63e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801d642:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801d646:	4288      	cmp	r0, r1
 801d648:	db3b      	blt.n	801d6c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801d64a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801d64e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d652:	429a      	cmp	r2, r3
 801d654:	db35      	blt.n	801d6c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801d656:	4460      	add	r0, ip
 801d658:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801d65c:	4461      	add	r1, ip
 801d65e:	b200      	sxth	r0, r0
 801d660:	b209      	sxth	r1, r1
 801d662:	4288      	cmp	r0, r1
 801d664:	dc2d      	bgt.n	801d6c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801d666:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801d66a:	4432      	add	r2, r6
 801d66c:	440b      	add	r3, r1
 801d66e:	b212      	sxth	r2, r2
 801d670:	b21b      	sxth	r3, r3
 801d672:	429a      	cmp	r2, r3
 801d674:	dc25      	bgt.n	801d6c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801d676:	6823      	ldr	r3, [r4, #0]
 801d678:	4620      	mov	r0, r4
 801d67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d67c:	4798      	blx	r3
 801d67e:	4682      	mov	sl, r0
 801d680:	6828      	ldr	r0, [r5, #0]
 801d682:	6803      	ldr	r3, [r0, #0]
 801d684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d686:	4798      	blx	r3
 801d688:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d68c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d690:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d694:	9303      	str	r3, [sp, #12]
 801d696:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d69a:	1a9b      	subs	r3, r3, r2
 801d69c:	b29b      	uxth	r3, r3
 801d69e:	b21c      	sxth	r4, r3
 801d6a0:	2c00      	cmp	r4, #0
 801d6a2:	dc13      	bgt.n	801d6cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 801d6a4:	bf18      	it	ne
 801d6a6:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801d6aa:	463c      	mov	r4, r7
 801d6ac:	bf1e      	ittt	ne
 801d6ae:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801d6b2:	189b      	addne	r3, r3, r2
 801d6b4:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801d6b8:	e00f      	b.n	801d6da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 801d6ba:	2300      	movs	r3, #0
 801d6bc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d6c0:	e7b2      	b.n	801d628 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801d6c2:	4b4f      	ldr	r3, [pc, #316]	; (801d800 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801d6c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 801d6c8:	4a47      	ldr	r2, [pc, #284]	; (801d7e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801d6ca:	e72d      	b.n	801d528 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d6cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d6d0:	ebab 0303 	sub.w	r3, fp, r3
 801d6d4:	443c      	add	r4, r7
 801d6d6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d6da:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d6de:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d6e2:	1a9b      	subs	r3, r3, r2
 801d6e4:	b29b      	uxth	r3, r3
 801d6e6:	b219      	sxth	r1, r3
 801d6e8:	2900      	cmp	r1, #0
 801d6ea:	dd51      	ble.n	801d790 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801d6ec:	9a03      	ldr	r2, [sp, #12]
 801d6ee:	fb02 4401 	mla	r4, r2, r1, r4
 801d6f2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801d6f6:	1ad3      	subs	r3, r2, r3
 801d6f8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d6fc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d700:	2b00      	cmp	r3, #0
 801d702:	dd41      	ble.n	801d788 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d704:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d708:	2e00      	cmp	r6, #0
 801d70a:	dd3d      	ble.n	801d788 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d70c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801d710:	f04f 0803 	mov.w	r8, #3
 801d714:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d718:	fb0a f10c 	mul.w	r1, sl, ip
 801d71c:	fb12 1808 	smlabb	r8, r2, r8, r1
 801d720:	4935      	ldr	r1, [pc, #212]	; (801d7f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801d722:	4480      	add	r8, r0
 801d724:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801d728:	8809      	ldrh	r1, [r1, #0]
 801d72a:	4283      	cmp	r3, r0
 801d72c:	eba1 0202 	sub.w	r2, r1, r2
 801d730:	bfa8      	it	ge
 801d732:	4603      	movge	r3, r0
 801d734:	4293      	cmp	r3, r2
 801d736:	bfa8      	it	ge
 801d738:	4613      	movge	r3, r2
 801d73a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801d73e:	4296      	cmp	r6, r2
 801d740:	bfa8      	it	ge
 801d742:	4616      	movge	r6, r2
 801d744:	4a2d      	ldr	r2, [pc, #180]	; (801d7fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801d746:	8812      	ldrh	r2, [r2, #0]
 801d748:	eba2 0c0c 	sub.w	ip, r2, ip
 801d74c:	4632      	mov	r2, r6
 801d74e:	4566      	cmp	r6, ip
 801d750:	bfa8      	it	ge
 801d752:	4662      	movge	r2, ip
 801d754:	4299      	cmp	r1, r3
 801d756:	9202      	str	r2, [sp, #8]
 801d758:	d12d      	bne.n	801d7b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801d75a:	4559      	cmp	r1, fp
 801d75c:	d12b      	bne.n	801d7b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801d75e:	6828      	ldr	r0, [r5, #0]
 801d760:	6803      	ldr	r3, [r0, #0]
 801d762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d764:	4798      	blx	r3
 801d766:	07c3      	lsls	r3, r0, #31
 801d768:	d51b      	bpl.n	801d7a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 801d76a:	6828      	ldr	r0, [r5, #0]
 801d76c:	9b02      	ldr	r3, [sp, #8]
 801d76e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801d772:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d776:	6803      	ldr	r3, [r0, #0]
 801d778:	f8cd b000 	str.w	fp, [sp]
 801d77c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 801d77e:	4623      	mov	r3, r4
 801d780:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d784:	47a8      	blx	r5
 801d786:	4607      	mov	r7, r0
 801d788:	4638      	mov	r0, r7
 801d78a:	b00d      	add	sp, #52	; 0x34
 801d78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d790:	bf1f      	itttt	ne
 801d792:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801d796:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801d79a:	189b      	addne	r3, r3, r2
 801d79c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801d7a0:	e7ac      	b.n	801d6fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 801d7a2:	6828      	ldr	r0, [r5, #0]
 801d7a4:	4642      	mov	r2, r8
 801d7a6:	4621      	mov	r1, r4
 801d7a8:	6803      	ldr	r3, [r0, #0]
 801d7aa:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 801d7ac:	9b02      	ldr	r3, [sp, #8]
 801d7ae:	fb03 f30a 	mul.w	r3, r3, sl
 801d7b2:	47a8      	blx	r5
 801d7b4:	e7e8      	b.n	801d788 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d7b6:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801d7ba:	f04f 0900 	mov.w	r9, #0
 801d7be:	9b02      	ldr	r3, [sp, #8]
 801d7c0:	454b      	cmp	r3, r9
 801d7c2:	dde1      	ble.n	801d788 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801d7c4:	6828      	ldr	r0, [r5, #0]
 801d7c6:	4642      	mov	r2, r8
 801d7c8:	4621      	mov	r1, r4
 801d7ca:	44d0      	add	r8, sl
 801d7cc:	6803      	ldr	r3, [r0, #0]
 801d7ce:	f109 0901 	add.w	r9, r9, #1
 801d7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d7d4:	461e      	mov	r6, r3
 801d7d6:	465b      	mov	r3, fp
 801d7d8:	47b0      	blx	r6
 801d7da:	9b03      	ldr	r3, [sp, #12]
 801d7dc:	441c      	add	r4, r3
 801d7de:	e7ee      	b.n	801d7be <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 801d7e0:	2005653c 	.word	0x2005653c
 801d7e4:	08029f77 	.word	0x08029f77
 801d7e8:	0802a7c6 	.word	0x0802a7c6
 801d7ec:	08029f45 	.word	0x08029f45
 801d7f0:	0802a029 	.word	0x0802a029
 801d7f4:	0802a07e 	.word	0x0802a07e
 801d7f8:	20056536 	.word	0x20056536
 801d7fc:	20056538 	.word	0x20056538
 801d800:	0802a0bc 	.word	0x0802a0bc

0801d804 <_ZN8touchgfx8LCD24bppC1Ev>:
 801d804:	2200      	movs	r2, #0
 801d806:	490c      	ldr	r1, [pc, #48]	; (801d838 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801d808:	6042      	str	r2, [r0, #4]
 801d80a:	6001      	str	r1, [r0, #0]
 801d80c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d810:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d814:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d818:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d81c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d820:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d824:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d828:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d82c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d830:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d834:	4770      	bx	lr
 801d836:	bf00      	nop
 801d838:	0802a3a0 	.word	0x0802a3a0

0801d83c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d840:	4616      	mov	r6, r2
 801d842:	b091      	sub	sp, #68	; 0x44
 801d844:	880a      	ldrh	r2, [r1, #0]
 801d846:	4607      	mov	r7, r0
 801d848:	4688      	mov	r8, r1
 801d84a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801d84e:	b12a      	cbz	r2, 801d85c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801d850:	4b67      	ldr	r3, [pc, #412]	; (801d9f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801d852:	2160      	movs	r1, #96	; 0x60
 801d854:	4a67      	ldr	r2, [pc, #412]	; (801d9f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 801d856:	4868      	ldr	r0, [pc, #416]	; (801d9f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801d858:	f007 fdfc 	bl	8025454 <__assert_func>
 801d85c:	6830      	ldr	r0, [r6, #0]
 801d85e:	ac0c      	add	r4, sp, #48	; 0x30
 801d860:	6871      	ldr	r1, [r6, #4]
 801d862:	4d66      	ldr	r5, [pc, #408]	; (801d9fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801d864:	f8df a198 	ldr.w	sl, [pc, #408]	; 801da00 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 801d868:	c403      	stmia	r4!, {r0, r1}
 801d86a:	6818      	ldr	r0, [r3, #0]
 801d86c:	ac0e      	add	r4, sp, #56	; 0x38
 801d86e:	6859      	ldr	r1, [r3, #4]
 801d870:	c403      	stmia	r4!, {r0, r1}
 801d872:	a80c      	add	r0, sp, #48	; 0x30
 801d874:	f7fa fb38 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d878:	4631      	mov	r1, r6
 801d87a:	a80e      	add	r0, sp, #56	; 0x38
 801d87c:	f7fa fb1c 	bl	8017eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d880:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d884:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d888:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d88c:	6828      	ldr	r0, [r5, #0]
 801d88e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d892:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801d896:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801d89a:	440f      	add	r7, r1
 801d89c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d8a0:	440a      	add	r2, r1
 801d8a2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d8a6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d8aa:	4413      	add	r3, r2
 801d8ac:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d8b0:	6803      	ldr	r3, [r0, #0]
 801d8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d8b4:	4798      	blx	r3
 801d8b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d8ba:	6828      	ldr	r0, [r5, #0]
 801d8bc:	d01d      	beq.n	801d8fa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d8be:	2201      	movs	r2, #1
 801d8c0:	250b      	movs	r5, #11
 801d8c2:	6801      	ldr	r1, [r0, #0]
 801d8c4:	b2a4      	uxth	r4, r4
 801d8c6:	b2b6      	uxth	r6, r6
 801d8c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d8cc:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801d8d0:	f8ba 5000 	ldrh.w	r5, [sl]
 801d8d4:	f8cd 9010 	str.w	r9, [sp, #16]
 801d8d8:	9602      	str	r6, [sp, #8]
 801d8da:	9401      	str	r4, [sp, #4]
 801d8dc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801d8e0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d8e4:	9203      	str	r2, [sp, #12]
 801d8e6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d8ea:	9200      	str	r2, [sp, #0]
 801d8ec:	4642      	mov	r2, r8
 801d8ee:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801d8f0:	4639      	mov	r1, r7
 801d8f2:	47a0      	blx	r4
 801d8f4:	b011      	add	sp, #68	; 0x44
 801d8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8fa:	6803      	ldr	r3, [r0, #0]
 801d8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8fe:	4798      	blx	r3
 801d900:	f8ba 5000 	ldrh.w	r5, [sl]
 801d904:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d908:	f04f 0e04 	mov.w	lr, #4
 801d90c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d910:	436e      	muls	r6, r5
 801d912:	fb05 2303 	mla	r3, r5, r3, r2
 801d916:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d91a:	1b2d      	subs	r5, r5, r4
 801d91c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d924:	4418      	add	r0, r3
 801d926:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d92a:	1982      	adds	r2, r0, r6
 801d92c:	1b1b      	subs	r3, r3, r4
 801d92e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d932:	930b      	str	r3, [sp, #44]	; 0x2c
 801d934:	4290      	cmp	r0, r2
 801d936:	d254      	bcs.n	801d9e2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801d938:	eb00 0a04 	add.w	sl, r0, r4
 801d93c:	4550      	cmp	r0, sl
 801d93e:	d24c      	bcs.n	801d9da <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 801d940:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d944:	fb1e e101 	smlabb	r1, lr, r1, lr
 801d948:	eb08 0c01 	add.w	ip, r8, r1
 801d94c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801d950:	b173      	cbz	r3, 801d970 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801d952:	2bff      	cmp	r3, #255	; 0xff
 801d954:	f818 b001 	ldrb.w	fp, [r8, r1]
 801d958:	d10c      	bne.n	801d974 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d95a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d95e:	d109      	bne.n	801d974 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d960:	f880 b000 	strb.w	fp, [r0]
 801d964:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801d968:	7043      	strb	r3, [r0, #1]
 801d96a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801d96e:	7083      	strb	r3, [r0, #2]
 801d970:	3003      	adds	r0, #3
 801d972:	e7e3      	b.n	801d93c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801d974:	fb09 f103 	mul.w	r1, r9, r3
 801d978:	1c4b      	adds	r3, r1, #1
 801d97a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d97e:	7801      	ldrb	r1, [r0, #0]
 801d980:	121b      	asrs	r3, r3, #8
 801d982:	b29e      	uxth	r6, r3
 801d984:	43db      	mvns	r3, r3
 801d986:	fb1b fb06 	smulbb	fp, fp, r6
 801d98a:	b2db      	uxtb	r3, r3
 801d98c:	fb01 b103 	mla	r1, r1, r3, fp
 801d990:	b289      	uxth	r1, r1
 801d992:	f101 0b01 	add.w	fp, r1, #1
 801d996:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d99a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d99e:	fb1b fb03 	smulbb	fp, fp, r3
 801d9a2:	1209      	asrs	r1, r1, #8
 801d9a4:	7001      	strb	r1, [r0, #0]
 801d9a6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d9aa:	fb01 b106 	mla	r1, r1, r6, fp
 801d9ae:	b289      	uxth	r1, r1
 801d9b0:	f101 0b01 	add.w	fp, r1, #1
 801d9b4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d9b8:	1209      	asrs	r1, r1, #8
 801d9ba:	7041      	strb	r1, [r0, #1]
 801d9bc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801d9c0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d9c4:	fb1c f303 	smulbb	r3, ip, r3
 801d9c8:	fb01 3606 	mla	r6, r1, r6, r3
 801d9cc:	b2b6      	uxth	r6, r6
 801d9ce:	1c73      	adds	r3, r6, #1
 801d9d0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d9d4:	1236      	asrs	r6, r6, #8
 801d9d6:	7086      	strb	r6, [r0, #2]
 801d9d8:	e7ca      	b.n	801d970 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801d9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9dc:	4428      	add	r0, r5
 801d9de:	441f      	add	r7, r3
 801d9e0:	e7a8      	b.n	801d934 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801d9e2:	4b06      	ldr	r3, [pc, #24]	; (801d9fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801d9e4:	6818      	ldr	r0, [r3, #0]
 801d9e6:	6803      	ldr	r3, [r0, #0]
 801d9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9ea:	4798      	blx	r3
 801d9ec:	e782      	b.n	801d8f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d9ee:	bf00      	nop
 801d9f0:	08029ea9 	.word	0x08029ea9
 801d9f4:	0802a5e8 	.word	0x0802a5e8
 801d9f8:	08029f45 	.word	0x08029f45
 801d9fc:	2005653c 	.word	0x2005653c
 801da00:	20056536 	.word	0x20056536

0801da04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801da04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da08:	f8b1 9000 	ldrh.w	r9, [r1]
 801da0c:	b091      	sub	sp, #68	; 0x44
 801da0e:	4604      	mov	r4, r0
 801da10:	460e      	mov	r6, r1
 801da12:	f1b9 0f01 	cmp.w	r9, #1
 801da16:	4690      	mov	r8, r2
 801da18:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801da1c:	d005      	beq.n	801da2a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801da1e:	4b68      	ldr	r3, [pc, #416]	; (801dbc0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801da20:	21ae      	movs	r1, #174	; 0xae
 801da22:	4a68      	ldr	r2, [pc, #416]	; (801dbc4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801da24:	4868      	ldr	r0, [pc, #416]	; (801dbc8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801da26:	f007 fd15 	bl	8025454 <__assert_func>
 801da2a:	6810      	ldr	r0, [r2, #0]
 801da2c:	ad0c      	add	r5, sp, #48	; 0x30
 801da2e:	6851      	ldr	r1, [r2, #4]
 801da30:	f8df a198 	ldr.w	sl, [pc, #408]	; 801dbcc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801da34:	f8df b198 	ldr.w	fp, [pc, #408]	; 801dbd0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801da38:	c503      	stmia	r5!, {r0, r1}
 801da3a:	6818      	ldr	r0, [r3, #0]
 801da3c:	ad0e      	add	r5, sp, #56	; 0x38
 801da3e:	6859      	ldr	r1, [r3, #4]
 801da40:	c503      	stmia	r5!, {r0, r1}
 801da42:	a80c      	add	r0, sp, #48	; 0x30
 801da44:	f7fa fa50 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da48:	4641      	mov	r1, r8
 801da4a:	a80e      	add	r0, sp, #56	; 0x38
 801da4c:	f7fa fa34 	bl	8017eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da50:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801da54:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801da58:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801da5c:	f8da 0000 	ldr.w	r0, [sl]
 801da60:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da64:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801da68:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801da6c:	440c      	add	r4, r1
 801da6e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801da72:	440a      	add	r2, r1
 801da74:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801da78:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801da7c:	4413      	add	r3, r2
 801da7e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801da82:	6803      	ldr	r3, [r0, #0]
 801da84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da86:	4798      	blx	r3
 801da88:	f010 0f80 	tst.w	r0, #128	; 0x80
 801da8c:	f8da 0000 	ldr.w	r0, [sl]
 801da90:	d01e      	beq.n	801dad0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801da92:	220b      	movs	r2, #11
 801da94:	6801      	ldr	r1, [r0, #0]
 801da96:	f8cd 9020 	str.w	r9, [sp, #32]
 801da9a:	b2ad      	uxth	r5, r5
 801da9c:	9207      	str	r2, [sp, #28]
 801da9e:	f8bb 2000 	ldrh.w	r2, [fp]
 801daa2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801daa6:	9206      	str	r2, [sp, #24]
 801daa8:	2200      	movs	r2, #0
 801daaa:	9502      	str	r5, [sp, #8]
 801daac:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801dab0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801dab4:	9203      	str	r2, [sp, #12]
 801dab6:	fa1f f288 	uxth.w	r2, r8
 801daba:	9201      	str	r2, [sp, #4]
 801dabc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801dac0:	9200      	str	r2, [sp, #0]
 801dac2:	4632      	mov	r2, r6
 801dac4:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801dac6:	4621      	mov	r1, r4
 801dac8:	47a8      	blx	r5
 801daca:	b011      	add	sp, #68	; 0x44
 801dacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dad0:	6803      	ldr	r3, [r0, #0]
 801dad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dad4:	4798      	blx	r3
 801dad6:	f8bb 2000 	ldrh.w	r2, [fp]
 801dada:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801dade:	f04f 0e03 	mov.w	lr, #3
 801dae2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801dae6:	4355      	muls	r5, r2
 801dae8:	fa1f fc87 	uxth.w	ip, r7
 801daec:	fb02 1303 	mla	r3, r2, r3, r1
 801daf0:	eba2 0208 	sub.w	r2, r2, r8
 801daf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801daf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dafc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db00:	4418      	add	r0, r3
 801db02:	920b      	str	r2, [sp, #44]	; 0x2c
 801db04:	1943      	adds	r3, r0, r5
 801db06:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801db0a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801db0e:	eba2 0208 	sub.w	r2, r2, r8
 801db12:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801db16:	b2ad      	uxth	r5, r5
 801db18:	4298      	cmp	r0, r3
 801db1a:	d24a      	bcs.n	801dbb2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801db1c:	eb00 0908 	add.w	r9, r0, r8
 801db20:	4621      	mov	r1, r4
 801db22:	4548      	cmp	r0, r9
 801db24:	460c      	mov	r4, r1
 801db26:	d240      	bcs.n	801dbaa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801db28:	f04f 0a04 	mov.w	sl, #4
 801db2c:	7824      	ldrb	r4, [r4, #0]
 801db2e:	2fff      	cmp	r7, #255	; 0xff
 801db30:	f101 0101 	add.w	r1, r1, #1
 801db34:	fb1e a404 	smlabb	r4, lr, r4, sl
 801db38:	eb06 0a04 	add.w	sl, r6, r4
 801db3c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801db40:	d02b      	beq.n	801db9a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801db42:	7804      	ldrb	r4, [r0, #0]
 801db44:	fb14 f405 	smulbb	r4, r4, r5
 801db48:	fb0b 440c 	mla	r4, fp, ip, r4
 801db4c:	b2a4      	uxth	r4, r4
 801db4e:	f104 0b01 	add.w	fp, r4, #1
 801db52:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801db56:	f890 b001 	ldrb.w	fp, [r0, #1]
 801db5a:	fb1b fb05 	smulbb	fp, fp, r5
 801db5e:	1224      	asrs	r4, r4, #8
 801db60:	7004      	strb	r4, [r0, #0]
 801db62:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801db66:	fb04 b40c 	mla	r4, r4, ip, fp
 801db6a:	b2a4      	uxth	r4, r4
 801db6c:	f104 0b01 	add.w	fp, r4, #1
 801db70:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801db74:	1224      	asrs	r4, r4, #8
 801db76:	7044      	strb	r4, [r0, #1]
 801db78:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801db7c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801db80:	fb1a fa05 	smulbb	sl, sl, r5
 801db84:	fb04 a40c 	mla	r4, r4, ip, sl
 801db88:	b2a4      	uxth	r4, r4
 801db8a:	f104 0a01 	add.w	sl, r4, #1
 801db8e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801db92:	1224      	asrs	r4, r4, #8
 801db94:	7084      	strb	r4, [r0, #2]
 801db96:	3003      	adds	r0, #3
 801db98:	e7c3      	b.n	801db22 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 801db9a:	f880 b000 	strb.w	fp, [r0]
 801db9e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801dba2:	7044      	strb	r4, [r0, #1]
 801dba4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801dba8:	e7f4      	b.n	801db94 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 801dbaa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dbac:	4420      	add	r0, r4
 801dbae:	188c      	adds	r4, r1, r2
 801dbb0:	e7b2      	b.n	801db18 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 801dbb2:	4b06      	ldr	r3, [pc, #24]	; (801dbcc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801dbb4:	6818      	ldr	r0, [r3, #0]
 801dbb6:	6803      	ldr	r3, [r0, #0]
 801dbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbba:	4798      	blx	r3
 801dbbc:	e785      	b.n	801daca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801dbbe:	bf00      	nop
 801dbc0:	08029e28 	.word	0x08029e28
 801dbc4:	0802a4db 	.word	0x0802a4db
 801dbc8:	08029f45 	.word	0x08029f45
 801dbcc:	2005653c 	.word	0x2005653c
 801dbd0:	20056536 	.word	0x20056536

0801dbd4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801dbd4:	b570      	push	{r4, r5, r6, lr}
 801dbd6:	780d      	ldrb	r5, [r1, #0]
 801dbd8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801dbdc:	2d01      	cmp	r5, #1
 801dbde:	d00d      	beq.n	801dbfc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801dbe0:	d307      	bcc.n	801dbf2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801dbe2:	2d02      	cmp	r5, #2
 801dbe4:	d10f      	bne.n	801dc06 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801dbe6:	4b08      	ldr	r3, [pc, #32]	; (801dc08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801dbe8:	2153      	movs	r1, #83	; 0x53
 801dbea:	4a08      	ldr	r2, [pc, #32]	; (801dc0c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801dbec:	4808      	ldr	r0, [pc, #32]	; (801dc10 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801dbee:	f007 fc31 	bl	8025454 <__assert_func>
 801dbf2:	9404      	str	r4, [sp, #16]
 801dbf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dbf8:	f7ff be20 	b.w	801d83c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801dbfc:	9404      	str	r4, [sp, #16]
 801dbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc02:	f7ff beff 	b.w	801da04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801dc06:	bd70      	pop	{r4, r5, r6, pc}
 801dc08:	08029dca 	.word	0x08029dca
 801dc0c:	0802a3e4 	.word	0x0802a3e4
 801dc10:	08029f45 	.word	0x08029f45

0801dc14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801dc14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dc18:	4605      	mov	r5, r0
 801dc1a:	b08d      	sub	sp, #52	; 0x34
 801dc1c:	460c      	mov	r4, r1
 801dc1e:	461f      	mov	r7, r3
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d051      	beq.n	801dcc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801dc24:	6808      	ldr	r0, [r1, #0]
 801dc26:	ab08      	add	r3, sp, #32
 801dc28:	6849      	ldr	r1, [r1, #4]
 801dc2a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801ddf4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801dc2e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801ddf8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801dc32:	c303      	stmia	r3!, {r0, r1}
 801dc34:	6810      	ldr	r0, [r2, #0]
 801dc36:	ab0a      	add	r3, sp, #40	; 0x28
 801dc38:	6851      	ldr	r1, [r2, #4]
 801dc3a:	c303      	stmia	r3!, {r0, r1}
 801dc3c:	a808      	add	r0, sp, #32
 801dc3e:	f7fa f953 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc42:	4621      	mov	r1, r4
 801dc44:	a80a      	add	r0, sp, #40	; 0x28
 801dc46:	f7fa f937 	bl	8017eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc4a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dc4e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801dc52:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801dc56:	f8d8 0000 	ldr.w	r0, [r8]
 801dc5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dc5e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801dc62:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 801dc66:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801dc6a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801dc6e:	440a      	add	r2, r1
 801dc70:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801dc74:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801dc78:	4413      	add	r3, r2
 801dc7a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801dc7e:	6803      	ldr	r3, [r0, #0]
 801dc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc82:	4798      	blx	r3
 801dc84:	2fff      	cmp	r7, #255	; 0xff
 801dc86:	d022      	beq.n	801dcce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801dc88:	f010 0f04 	tst.w	r0, #4
 801dc8c:	f8d8 0000 	ldr.w	r0, [r8]
 801dc90:	d020      	beq.n	801dcd4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 801dc92:	2100      	movs	r1, #0
 801dc94:	f04f 0e01 	mov.w	lr, #1
 801dc98:	f8d0 c000 	ldr.w	ip, [r0]
 801dc9c:	b2a4      	uxth	r4, r4
 801dc9e:	b2b6      	uxth	r6, r6
 801dca0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801dca4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801dca8:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801dcac:	f8b9 e000 	ldrh.w	lr, [r9]
 801dcb0:	9703      	str	r7, [sp, #12]
 801dcb2:	9401      	str	r4, [sp, #4]
 801dcb4:	9600      	str	r6, [sp, #0]
 801dcb6:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801dcba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801dcbe:	9102      	str	r1, [sp, #8]
 801dcc0:	4629      	mov	r1, r5
 801dcc2:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801dcc6:	47a0      	blx	r4
 801dcc8:	b00d      	add	sp, #52	; 0x34
 801dcca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dcce:	f010 0f01 	tst.w	r0, #1
 801dcd2:	e7db      	b.n	801dc8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801dcd4:	6803      	ldr	r3, [r0, #0]
 801dcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcd8:	4798      	blx	r3
 801dcda:	f8b9 1000 	ldrh.w	r1, [r9]
 801dcde:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801dce2:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801dce6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dcea:	434c      	muls	r4, r1
 801dcec:	2fff      	cmp	r7, #255	; 0xff
 801dcee:	fb01 2303 	mla	r3, r1, r3, r2
 801dcf2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dcf6:	eba1 0106 	sub.w	r1, r1, r6
 801dcfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dcfe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dd02:	4418      	add	r0, r3
 801dd04:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801dd08:	eba3 0606 	sub.w	r6, r3, r6
 801dd0c:	4404      	add	r4, r0
 801dd0e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801dd12:	d04a      	beq.n	801ddaa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 801dd14:	43fa      	mvns	r2, r7
 801dd16:	b2bb      	uxth	r3, r7
 801dd18:	b2d7      	uxtb	r7, r2
 801dd1a:	42a0      	cmp	r0, r4
 801dd1c:	d263      	bcs.n	801dde6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801dd1e:	eb00 0e0c 	add.w	lr, r0, ip
 801dd22:	4586      	cmp	lr, r0
 801dd24:	f100 0803 	add.w	r8, r0, #3
 801dd28:	d93a      	bls.n	801dda0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 801dd2a:	f835 2b02 	ldrh.w	r2, [r5], #2
 801dd2e:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801dd32:	00d0      	lsls	r0, r2, #3
 801dd34:	fb19 f907 	smulbb	r9, r9, r7
 801dd38:	b2c0      	uxtb	r0, r0
 801dd3a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801dd3e:	fb00 9003 	mla	r0, r0, r3, r9
 801dd42:	b280      	uxth	r0, r0
 801dd44:	f100 0901 	add.w	r9, r0, #1
 801dd48:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801dd4c:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801dd50:	fb19 f907 	smulbb	r9, r9, r7
 801dd54:	1200      	asrs	r0, r0, #8
 801dd56:	f808 0c03 	strb.w	r0, [r8, #-3]
 801dd5a:	10d0      	asrs	r0, r2, #3
 801dd5c:	1212      	asrs	r2, r2, #8
 801dd5e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801dd62:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801dd66:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801dd6a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801dd6e:	fb00 9003 	mla	r0, r0, r3, r9
 801dd72:	b280      	uxth	r0, r0
 801dd74:	f100 0901 	add.w	r9, r0, #1
 801dd78:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801dd7c:	1200      	asrs	r0, r0, #8
 801dd7e:	f808 0c02 	strb.w	r0, [r8, #-2]
 801dd82:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801dd86:	fb10 f007 	smulbb	r0, r0, r7
 801dd8a:	fb02 0203 	mla	r2, r2, r3, r0
 801dd8e:	b292      	uxth	r2, r2
 801dd90:	1c50      	adds	r0, r2, #1
 801dd92:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801dd96:	4640      	mov	r0, r8
 801dd98:	1212      	asrs	r2, r2, #8
 801dd9a:	f808 2c01 	strb.w	r2, [r8, #-1]
 801dd9e:	e7c0      	b.n	801dd22 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 801dda0:	4408      	add	r0, r1
 801dda2:	4435      	add	r5, r6
 801dda4:	e7b9      	b.n	801dd1a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 801dda6:	4408      	add	r0, r1
 801dda8:	4435      	add	r5, r6
 801ddaa:	42a0      	cmp	r0, r4
 801ddac:	d21b      	bcs.n	801dde6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801ddae:	eb00 070c 	add.w	r7, r0, ip
 801ddb2:	42b8      	cmp	r0, r7
 801ddb4:	d2f7      	bcs.n	801dda6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 801ddb6:	f835 3b02 	ldrh.w	r3, [r5], #2
 801ddba:	3003      	adds	r0, #3
 801ddbc:	00da      	lsls	r2, r3, #3
 801ddbe:	b2d2      	uxtb	r2, r2
 801ddc0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ddc4:	f800 2c03 	strb.w	r2, [r0, #-3]
 801ddc8:	10da      	asrs	r2, r3, #3
 801ddca:	121b      	asrs	r3, r3, #8
 801ddcc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ddd0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ddd4:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801ddd8:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801dddc:	f800 2c02 	strb.w	r2, [r0, #-2]
 801dde0:	f800 3c01 	strb.w	r3, [r0, #-1]
 801dde4:	e7e5      	b.n	801ddb2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 801dde6:	4b03      	ldr	r3, [pc, #12]	; (801ddf4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801dde8:	6818      	ldr	r0, [r3, #0]
 801ddea:	6803      	ldr	r3, [r0, #0]
 801ddec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ddee:	4798      	blx	r3
 801ddf0:	e76a      	b.n	801dcc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801ddf2:	bf00      	nop
 801ddf4:	2005653c 	.word	0x2005653c
 801ddf8:	20056536 	.word	0x20056536

0801ddfc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801ddfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de00:	b088      	sub	sp, #32
 801de02:	460d      	mov	r5, r1
 801de04:	4604      	mov	r4, r0
 801de06:	461e      	mov	r6, r3
 801de08:	6808      	ldr	r0, [r1, #0]
 801de0a:	ab04      	add	r3, sp, #16
 801de0c:	6849      	ldr	r1, [r1, #4]
 801de0e:	4f5c      	ldr	r7, [pc, #368]	; (801df80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 801de10:	c303      	stmia	r3!, {r0, r1}
 801de12:	6810      	ldr	r0, [r2, #0]
 801de14:	ab06      	add	r3, sp, #24
 801de16:	6851      	ldr	r1, [r2, #4]
 801de18:	c303      	stmia	r3!, {r0, r1}
 801de1a:	a804      	add	r0, sp, #16
 801de1c:	f7fa f864 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de20:	4629      	mov	r1, r5
 801de22:	a806      	add	r0, sp, #24
 801de24:	f7fa f848 	bl	8017eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de28:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801de2c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801de30:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801de34:	6838      	ldr	r0, [r7, #0]
 801de36:	fb11 2103 	smlabb	r1, r1, r3, r2
 801de3a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801de3e:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 801de42:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801de46:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801de4a:	440a      	add	r2, r1
 801de4c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801de50:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801de54:	4413      	add	r3, r2
 801de56:	f8ad 301a 	strh.w	r3, [sp, #26]
 801de5a:	6803      	ldr	r3, [r0, #0]
 801de5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de5e:	4798      	blx	r3
 801de60:	2eff      	cmp	r6, #255	; 0xff
 801de62:	d117      	bne.n	801de94 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801de64:	f010 0f20 	tst.w	r0, #32
 801de68:	6838      	ldr	r0, [r7, #0]
 801de6a:	d016      	beq.n	801de9a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801de6c:	b2ad      	uxth	r5, r5
 801de6e:	6801      	ldr	r1, [r0, #0]
 801de70:	9603      	str	r6, [sp, #12]
 801de72:	9501      	str	r5, [sp, #4]
 801de74:	fa1f f588 	uxth.w	r5, r8
 801de78:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 801de7c:	9500      	str	r5, [sp, #0]
 801de7e:	9602      	str	r6, [sp, #8]
 801de80:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801de84:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 801de86:	4621      	mov	r1, r4
 801de88:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801de8c:	47a8      	blx	r5
 801de8e:	b008      	add	sp, #32
 801de90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de94:	f010 0f40 	tst.w	r0, #64	; 0x40
 801de98:	e7e6      	b.n	801de68 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801de9a:	6803      	ldr	r3, [r0, #0]
 801de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de9e:	4798      	blx	r3
 801dea0:	4b38      	ldr	r3, [pc, #224]	; (801df84 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801dea2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801dea6:	f8b3 c000 	ldrh.w	ip, [r3]
 801deaa:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801deae:	fb0c f505 	mul.w	r5, ip, r5
 801deb2:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801deb6:	fb0c 2303 	mla	r3, ip, r3, r2
 801deba:	ebac 0c08 	sub.w	ip, ip, r8
 801debe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dec2:	ebae 0e08 	sub.w	lr, lr, r8
 801dec6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801deca:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dece:	4418      	add	r0, r3
 801ded0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801ded4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801ded8:	4405      	add	r5, r0
 801deda:	42a8      	cmp	r0, r5
 801dedc:	d24a      	bcs.n	801df74 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 801dede:	eb00 0803 	add.w	r8, r0, r3
 801dee2:	4540      	cmp	r0, r8
 801dee4:	d243      	bcs.n	801df6e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 801dee6:	78e2      	ldrb	r2, [r4, #3]
 801dee8:	b15a      	cbz	r2, 801df02 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801deea:	2aff      	cmp	r2, #255	; 0xff
 801deec:	f894 9000 	ldrb.w	r9, [r4]
 801def0:	d10a      	bne.n	801df08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801def2:	2eff      	cmp	r6, #255	; 0xff
 801def4:	d108      	bne.n	801df08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801def6:	f880 9000 	strb.w	r9, [r0]
 801defa:	7862      	ldrb	r2, [r4, #1]
 801defc:	7042      	strb	r2, [r0, #1]
 801defe:	78a2      	ldrb	r2, [r4, #2]
 801df00:	7082      	strb	r2, [r0, #2]
 801df02:	3003      	adds	r0, #3
 801df04:	3404      	adds	r4, #4
 801df06:	e7ec      	b.n	801dee2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 801df08:	4372      	muls	r2, r6
 801df0a:	1c51      	adds	r1, r2, #1
 801df0c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801df10:	1209      	asrs	r1, r1, #8
 801df12:	fa1f fa81 	uxth.w	sl, r1
 801df16:	43c9      	mvns	r1, r1
 801df18:	fb19 f90a 	smulbb	r9, r9, sl
 801df1c:	b2ca      	uxtb	r2, r1
 801df1e:	7801      	ldrb	r1, [r0, #0]
 801df20:	fb01 9902 	mla	r9, r1, r2, r9
 801df24:	fa1f f989 	uxth.w	r9, r9
 801df28:	f109 0101 	add.w	r1, r9, #1
 801df2c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801df30:	ea4f 2929 	mov.w	r9, r9, asr #8
 801df34:	f880 9000 	strb.w	r9, [r0]
 801df38:	f890 9001 	ldrb.w	r9, [r0, #1]
 801df3c:	7861      	ldrb	r1, [r4, #1]
 801df3e:	fb19 f902 	smulbb	r9, r9, r2
 801df42:	fb01 910a 	mla	r1, r1, sl, r9
 801df46:	b289      	uxth	r1, r1
 801df48:	f101 0901 	add.w	r9, r1, #1
 801df4c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801df50:	1209      	asrs	r1, r1, #8
 801df52:	7041      	strb	r1, [r0, #1]
 801df54:	7881      	ldrb	r1, [r0, #2]
 801df56:	f894 9002 	ldrb.w	r9, [r4, #2]
 801df5a:	fb11 f202 	smulbb	r2, r1, r2
 801df5e:	fb09 220a 	mla	r2, r9, sl, r2
 801df62:	b292      	uxth	r2, r2
 801df64:	1c51      	adds	r1, r2, #1
 801df66:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801df6a:	1212      	asrs	r2, r2, #8
 801df6c:	e7c8      	b.n	801df00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 801df6e:	4460      	add	r0, ip
 801df70:	4474      	add	r4, lr
 801df72:	e7b2      	b.n	801deda <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801df74:	6838      	ldr	r0, [r7, #0]
 801df76:	6803      	ldr	r3, [r0, #0]
 801df78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df7a:	4798      	blx	r3
 801df7c:	e787      	b.n	801de8e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 801df7e:	bf00      	nop
 801df80:	2005653c 	.word	0x2005653c
 801df84:	20056536 	.word	0x20056536

0801df88 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801df88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801df8c:	b085      	sub	sp, #20
 801df8e:	4606      	mov	r6, r0
 801df90:	460c      	mov	r4, r1
 801df92:	4691      	mov	r9, r2
 801df94:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801df98:	4698      	mov	r8, r3
 801df9a:	b31d      	cbz	r5, 801dfe4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801df9c:	4608      	mov	r0, r1
 801df9e:	f7fd f9e3 	bl	801b368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dfa2:	4607      	mov	r7, r0
 801dfa4:	4620      	mov	r0, r4
 801dfa6:	f7fd fa19 	bl	801b3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dfaa:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dfae:	4620      	mov	r0, r4
 801dfb0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801dfb4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dfb8:	f8ad 700c 	strh.w	r7, [sp, #12]
 801dfbc:	f7fd fad2 	bl	801b564 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dfc0:	280b      	cmp	r0, #11
 801dfc2:	d838      	bhi.n	801e036 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801dfc4:	e8df f000 	tbb	[pc, r0]
 801dfc8:	37062920 	.word	0x37062920
 801dfcc:	37373737 	.word	0x37373737
 801dfd0:	11373737 	.word	0x11373737
 801dfd4:	4620      	mov	r0, r4
 801dfd6:	f7fd fa3b 	bl	801b450 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dfda:	462b      	mov	r3, r5
 801dfdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dfde:	a902      	add	r1, sp, #8
 801dfe0:	f7ff ff0c 	bl	801ddfc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dfe4:	b005      	add	sp, #20
 801dfe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dfea:	4620      	mov	r0, r4
 801dfec:	f7fd fa30 	bl	801b450 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dff0:	4606      	mov	r6, r0
 801dff2:	4620      	mov	r0, r4
 801dff4:	f7fd fa5e 	bl	801b4b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dff8:	9500      	str	r5, [sp, #0]
 801dffa:	4601      	mov	r1, r0
 801dffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dffe:	aa02      	add	r2, sp, #8
 801e000:	4630      	mov	r0, r6
 801e002:	f7ff fde7 	bl	801dbd4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e006:	e7ed      	b.n	801dfe4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e008:	4620      	mov	r0, r4
 801e00a:	f7fd fa21 	bl	801b450 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e00e:	462b      	mov	r3, r5
 801e010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e012:	a902      	add	r1, sp, #8
 801e014:	f7ff fdfe 	bl	801dc14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801e018:	e7e4      	b.n	801dfe4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e01a:	6833      	ldr	r3, [r6, #0]
 801e01c:	4620      	mov	r0, r4
 801e01e:	68df      	ldr	r7, [r3, #12]
 801e020:	f7fd fa16 	bl	801b450 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e024:	2300      	movs	r3, #0
 801e026:	4601      	mov	r1, r0
 801e028:	aa02      	add	r2, sp, #8
 801e02a:	4630      	mov	r0, r6
 801e02c:	e9cd 5300 	strd	r5, r3, [sp]
 801e030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e032:	47b8      	blx	r7
 801e034:	e7d6      	b.n	801dfe4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e036:	4b03      	ldr	r3, [pc, #12]	; (801e044 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801e038:	2147      	movs	r1, #71	; 0x47
 801e03a:	4a03      	ldr	r2, [pc, #12]	; (801e048 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801e03c:	4803      	ldr	r0, [pc, #12]	; (801e04c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801e03e:	f007 fa09 	bl	8025454 <__assert_func>
 801e042:	bf00      	nop
 801e044:	08029e76 	.word	0x08029e76
 801e048:	0802a564 	.word	0x0802a564
 801e04c:	08029f45 	.word	0x08029f45

0801e050 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e050:	b570      	push	{r4, r5, r6, lr}
 801e052:	9d04      	ldr	r5, [sp, #16]
 801e054:	460c      	mov	r4, r1
 801e056:	4619      	mov	r1, r3
 801e058:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e05c:	2a0d      	cmp	r2, #13
 801e05e:	d826      	bhi.n	801e0ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801e060:	e8df f002 	tbb	[pc, r2]
 801e064:	200e1407 	.word	0x200e1407
 801e068:	20202020 	.word	0x20202020
 801e06c:	20202020 	.word	0x20202020
 801e070:	2020      	.short	0x2020
 801e072:	4b0f      	ldr	r3, [pc, #60]	; (801e0b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e074:	f240 11d3 	movw	r1, #467	; 0x1d3
 801e078:	4a0e      	ldr	r2, [pc, #56]	; (801e0b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e07a:	480f      	ldr	r0, [pc, #60]	; (801e0b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e07c:	f007 f9ea 	bl	8025454 <__assert_func>
 801e080:	462a      	mov	r2, r5
 801e082:	4620      	mov	r0, r4
 801e084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e088:	f7ff beb8 	b.w	801ddfc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e08c:	6802      	ldr	r2, [r0, #0]
 801e08e:	2600      	movs	r6, #0
 801e090:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e094:	68d6      	ldr	r6, [r2, #12]
 801e096:	462b      	mov	r3, r5
 801e098:	460a      	mov	r2, r1
 801e09a:	4621      	mov	r1, r4
 801e09c:	46b4      	mov	ip, r6
 801e09e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e0a2:	4760      	bx	ip
 801e0a4:	4b05      	ldr	r3, [pc, #20]	; (801e0bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e0a6:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801e0aa:	4a02      	ldr	r2, [pc, #8]	; (801e0b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e0ac:	e7e5      	b.n	801e07a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801e0ae:	bd70      	pop	{r4, r5, r6, pc}
 801e0b0:	0802a11c 	.word	0x0802a11c
 801e0b4:	0802a84c 	.word	0x0802a84c
 801e0b8:	08029f45 	.word	0x08029f45
 801e0bc:	0802a15d 	.word	0x0802a15d

0801e0c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e0c0:	b158      	cbz	r0, 801e0da <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801e0c2:	2902      	cmp	r1, #2
 801e0c4:	d00f      	beq.n	801e0e6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801e0c6:	2903      	cmp	r1, #3
 801e0c8:	d010      	beq.n	801e0ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e0ca:	2901      	cmp	r1, #1
 801e0cc:	d101      	bne.n	801e0d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e0ce:	2001      	movs	r0, #1
 801e0d0:	4770      	bx	lr
 801e0d2:	4b08      	ldr	r3, [pc, #32]	; (801e0f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e0d4:	8819      	ldrh	r1, [r3, #0]
 801e0d6:	4248      	negs	r0, r1
 801e0d8:	4770      	bx	lr
 801e0da:	2902      	cmp	r1, #2
 801e0dc:	d006      	beq.n	801e0ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e0de:	2903      	cmp	r1, #3
 801e0e0:	d0f7      	beq.n	801e0d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e0e2:	2901      	cmp	r1, #1
 801e0e4:	d1f3      	bne.n	801e0ce <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e0e6:	4b03      	ldr	r3, [pc, #12]	; (801e0f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e0e8:	8818      	ldrh	r0, [r3, #0]
 801e0ea:	4770      	bx	lr
 801e0ec:	f04f 30ff 	mov.w	r0, #4294967295
 801e0f0:	4770      	bx	lr
 801e0f2:	bf00      	nop
 801e0f4:	20056536 	.word	0x20056536

0801e0f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e0f8:	b170      	cbz	r0, 801e118 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801e0fa:	2902      	cmp	r1, #2
 801e0fc:	d012      	beq.n	801e124 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801e0fe:	2903      	cmp	r1, #3
 801e100:	d006      	beq.n	801e110 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e102:	2901      	cmp	r1, #1
 801e104:	d001      	beq.n	801e10a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e106:	2001      	movs	r0, #1
 801e108:	4770      	bx	lr
 801e10a:	4b08      	ldr	r3, [pc, #32]	; (801e12c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e10c:	8818      	ldrh	r0, [r3, #0]
 801e10e:	4770      	bx	lr
 801e110:	4b06      	ldr	r3, [pc, #24]	; (801e12c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e112:	8818      	ldrh	r0, [r3, #0]
 801e114:	4240      	negs	r0, r0
 801e116:	4770      	bx	lr
 801e118:	2902      	cmp	r1, #2
 801e11a:	d0f9      	beq.n	801e110 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e11c:	2903      	cmp	r1, #3
 801e11e:	d0f2      	beq.n	801e106 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801e120:	2901      	cmp	r1, #1
 801e122:	d1f2      	bne.n	801e10a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e124:	f04f 30ff 	mov.w	r0, #4294967295
 801e128:	4770      	bx	lr
 801e12a:	bf00      	nop
 801e12c:	20056536 	.word	0x20056536

0801e130 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e134:	b095      	sub	sp, #84	; 0x54
 801e136:	9109      	str	r1, [sp, #36]	; 0x24
 801e138:	a910      	add	r1, sp, #64	; 0x40
 801e13a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801e13e:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 801e142:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801e146:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801e14a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801e14e:	e881 000c 	stmia.w	r1, {r2, r3}
 801e152:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801e156:	9308      	str	r3, [sp, #32]
 801e158:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801e15c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801e160:	930f      	str	r3, [sp, #60]	; 0x3c
 801e162:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801e166:	798d      	ldrb	r5, [r1, #6]
 801e168:	930a      	str	r3, [sp, #40]	; 0x28
 801e16a:	7b4b      	ldrb	r3, [r1, #13]
 801e16c:	0158      	lsls	r0, r3, #5
 801e16e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e172:	4328      	orrs	r0, r5
 801e174:	9007      	str	r0, [sp, #28]
 801e176:	f000 817a 	beq.w	801e46e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801e17a:	011b      	lsls	r3, r3, #4
 801e17c:	79c8      	ldrb	r0, [r1, #7]
 801e17e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e182:	4303      	orrs	r3, r0
 801e184:	930c      	str	r3, [sp, #48]	; 0x30
 801e186:	f000 8172 	beq.w	801e46e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801e18a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e18e:	b29b      	uxth	r3, r3
 801e190:	2f00      	cmp	r7, #0
 801e192:	f000 8117 	beq.w	801e3c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801e196:	1aff      	subs	r7, r7, r3
 801e198:	b2bf      	uxth	r7, r7
 801e19a:	043b      	lsls	r3, r7, #16
 801e19c:	d502      	bpl.n	801e1a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e19e:	1bf6      	subs	r6, r6, r7
 801e1a0:	2700      	movs	r7, #0
 801e1a2:	b236      	sxth	r6, r6
 801e1a4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e1a8:	a810      	add	r0, sp, #64	; 0x40
 801e1aa:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e1ae:	428e      	cmp	r6, r1
 801e1b0:	b28b      	uxth	r3, r1
 801e1b2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801e1b6:	bfbf      	itttt	lt
 801e1b8:	18ff      	addlt	r7, r7, r3
 801e1ba:	1bbe      	sublt	r6, r7, r6
 801e1bc:	b2b7      	uxthlt	r7, r6
 801e1be:	460e      	movlt	r6, r1
 801e1c0:	8891      	ldrh	r1, [r2, #4]
 801e1c2:	440b      	add	r3, r1
 801e1c4:	4631      	mov	r1, r6
 801e1c6:	b21b      	sxth	r3, r3
 801e1c8:	930e      	str	r3, [sp, #56]	; 0x38
 801e1ca:	88d3      	ldrh	r3, [r2, #6]
 801e1cc:	9a08      	ldr	r2, [sp, #32]
 801e1ce:	449a      	add	sl, r3
 801e1d0:	fa0f f38a 	sxth.w	r3, sl
 801e1d4:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801e1d8:	930d      	str	r3, [sp, #52]	; 0x34
 801e1da:	4bb4      	ldr	r3, [pc, #720]	; (801e4ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801e1dc:	f893 b000 	ldrb.w	fp, [r3]
 801e1e0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e1e4:	f1dc 0300 	rsbs	r3, ip, #0
 801e1e8:	eb43 030c 	adc.w	r3, r3, ip
 801e1ec:	930b      	str	r3, [sp, #44]	; 0x2c
 801e1ee:	464b      	mov	r3, r9
 801e1f0:	f7f9 fcd3 	bl	8017b9a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e1f4:	4631      	mov	r1, r6
 801e1f6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801e1fa:	464b      	mov	r3, r9
 801e1fc:	9a08      	ldr	r2, [sp, #32]
 801e1fe:	a810      	add	r0, sp, #64	; 0x40
 801e200:	f7f9 fce3 	bl	8017bca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e204:	a914      	add	r1, sp, #80	; 0x50
 801e206:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e20a:	a813      	add	r0, sp, #76	; 0x4c
 801e20c:	f7f9 fe3e 	bl	8017e8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e210:	f1b9 0f00 	cmp.w	r9, #0
 801e214:	f040 80d9 	bne.w	801e3ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801e218:	f1bb 0f01 	cmp.w	fp, #1
 801e21c:	f040 80dd 	bne.w	801e3da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801e220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e222:	b153      	cbz	r3, 801e23a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801e224:	2508      	movs	r5, #8
 801e226:	9a07      	ldr	r2, [sp, #28]
 801e228:	fb95 f3f8 	sdiv	r3, r5, r8
 801e22c:	1e5d      	subs	r5, r3, #1
 801e22e:	4415      	add	r5, r2
 801e230:	fb95 f5f3 	sdiv	r5, r5, r3
 801e234:	fb15 f503 	smulbb	r5, r5, r3
 801e238:	b2ad      	uxth	r5, r5
 801e23a:	b907      	cbnz	r7, 801e23e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801e23c:	b16c      	cbz	r4, 801e25a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801e23e:	fb04 7305 	mla	r3, r4, r5, r7
 801e242:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e244:	ebaa 0a04 	sub.w	sl, sl, r4
 801e248:	fb08 f303 	mul.w	r3, r8, r3
 801e24c:	fa1f fa8a 	uxth.w	sl, sl
 801e250:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801e254:	f003 0407 	and.w	r4, r3, #7
 801e258:	9224      	str	r2, [sp, #144]	; 0x90
 801e25a:	4649      	mov	r1, r9
 801e25c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e25e:	f7ff ff2f 	bl	801e0c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e262:	4649      	mov	r1, r9
 801e264:	4683      	mov	fp, r0
 801e266:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e268:	f7ff ff46 	bl	801e0f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e26e:	9a08      	ldr	r2, [sp, #32]
 801e270:	4681      	mov	r9, r0
 801e272:	1a9b      	subs	r3, r3, r2
 801e274:	459a      	cmp	sl, r3
 801e276:	bfa8      	it	ge
 801e278:	469a      	movge	sl, r3
 801e27a:	f1ba 0f00 	cmp.w	sl, #0
 801e27e:	f340 80f6 	ble.w	801e46e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801e282:	1bf6      	subs	r6, r6, r7
 801e284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e286:	1b9e      	subs	r6, r3, r6
 801e288:	9b07      	ldr	r3, [sp, #28]
 801e28a:	429e      	cmp	r6, r3
 801e28c:	bfd4      	ite	le
 801e28e:	ebc7 0706 	rsble	r7, r7, r6
 801e292:	ebc7 0703 	rsbgt	r7, r7, r3
 801e296:	2f00      	cmp	r7, #0
 801e298:	f340 80e9 	ble.w	801e46e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801e29c:	1bed      	subs	r5, r5, r7
 801e29e:	fb08 f305 	mul.w	r3, r8, r5
 801e2a2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e2a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e2a6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e2aa:	930c      	str	r3, [sp, #48]	; 0x30
 801e2ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e2ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e2b2:	930d      	str	r3, [sp, #52]	; 0x34
 801e2b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e2b6:	b2db      	uxtb	r3, r3
 801e2b8:	930e      	str	r3, [sp, #56]	; 0x38
 801e2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	f040 80db 	bne.w	801e478 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801e2c2:	4b7b      	ldr	r3, [pc, #492]	; (801e4b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801e2c4:	6818      	ldr	r0, [r3, #0]
 801e2c6:	6803      	ldr	r3, [r0, #0]
 801e2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2ca:	4798      	blx	r3
 801e2cc:	2301      	movs	r3, #1
 801e2ce:	4a79      	ldr	r2, [pc, #484]	; (801e4b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801e2d0:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801e2d4:	fb07 9b1b 	mls	fp, r7, fp, r9
 801e2d8:	fa03 f308 	lsl.w	r3, r3, r8
 801e2dc:	8811      	ldrh	r1, [r2, #0]
 801e2de:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e2e2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801e2e6:	3b01      	subs	r3, #1
 801e2e8:	fb06 bb07 	mla	fp, r6, r7, fp
 801e2ec:	b2db      	uxtb	r3, r3
 801e2ee:	9308      	str	r3, [sp, #32]
 801e2f0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e2f4:	fb01 2303 	mla	r3, r1, r3, r2
 801e2f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2fc:	18c3      	adds	r3, r0, r3
 801e2fe:	9307      	str	r3, [sp, #28]
 801e300:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e302:	781a      	ldrb	r2, [r3, #0]
 801e304:	4122      	asrs	r2, r4
 801e306:	b2d2      	uxtb	r2, r2
 801e308:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e30c:	f0c0 80d4 	bcc.w	801e4b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 801e310:	46be      	mov	lr, r7
 801e312:	9907      	ldr	r1, [sp, #28]
 801e314:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e318:	f0c0 80b7 	bcc.w	801e48a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801e31c:	9b08      	ldr	r3, [sp, #32]
 801e31e:	4013      	ands	r3, r2
 801e320:	d041      	beq.n	801e3a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801e322:	20ff      	movs	r0, #255	; 0xff
 801e324:	9d08      	ldr	r5, [sp, #32]
 801e326:	fb90 f5f5 	sdiv	r5, r0, r5
 801e32a:	436b      	muls	r3, r5
 801e32c:	2bfe      	cmp	r3, #254	; 0xfe
 801e32e:	dd03      	ble.n	801e338 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801e330:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e332:	4285      	cmp	r5, r0
 801e334:	f000 80a2 	beq.w	801e47c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801e338:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e33a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e33c:	fb15 f303 	smulbb	r3, r5, r3
 801e340:	b29b      	uxth	r3, r3
 801e342:	1c5d      	adds	r5, r3, #1
 801e344:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e348:	780d      	ldrb	r5, [r1, #0]
 801e34a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e34e:	fa1f fc83 	uxth.w	ip, r3
 801e352:	43db      	mvns	r3, r3
 801e354:	fb10 f90c 	smulbb	r9, r0, ip
 801e358:	b2db      	uxtb	r3, r3
 801e35a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e35c:	fb05 9503 	mla	r5, r5, r3, r9
 801e360:	b2ad      	uxth	r5, r5
 801e362:	f105 0901 	add.w	r9, r5, #1
 801e366:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e36a:	fb10 f90c 	smulbb	r9, r0, ip
 801e36e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e370:	122d      	asrs	r5, r5, #8
 801e372:	fb10 fc0c 	smulbb	ip, r0, ip
 801e376:	700d      	strb	r5, [r1, #0]
 801e378:	784d      	ldrb	r5, [r1, #1]
 801e37a:	fb05 9503 	mla	r5, r5, r3, r9
 801e37e:	b2ad      	uxth	r5, r5
 801e380:	f105 0901 	add.w	r9, r5, #1
 801e384:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e388:	122d      	asrs	r5, r5, #8
 801e38a:	704d      	strb	r5, [r1, #1]
 801e38c:	788d      	ldrb	r5, [r1, #2]
 801e38e:	fb05 cc03 	mla	ip, r5, r3, ip
 801e392:	fa1f fc8c 	uxth.w	ip, ip
 801e396:	f10c 0301 	add.w	r3, ip, #1
 801e39a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e39e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e3a2:	f881 c002 	strb.w	ip, [r1, #2]
 801e3a6:	4444      	add	r4, r8
 801e3a8:	4431      	add	r1, r6
 801e3aa:	b2a4      	uxth	r4, r4
 801e3ac:	2c07      	cmp	r4, #7
 801e3ae:	bf89      	itett	hi
 801e3b0:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801e3b2:	fa42 f208 	asrls.w	r2, r2, r8
 801e3b6:	2400      	movhi	r4, #0
 801e3b8:	785a      	ldrbhi	r2, [r3, #1]
 801e3ba:	bf8a      	itet	hi
 801e3bc:	3301      	addhi	r3, #1
 801e3be:	b2d2      	uxtbls	r2, r2
 801e3c0:	9324      	strhi	r3, [sp, #144]	; 0x90
 801e3c2:	e7a7      	b.n	801e314 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801e3c4:	441e      	add	r6, r3
 801e3c6:	b236      	sxth	r6, r6
 801e3c8:	e6ec      	b.n	801e1a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e3ca:	f1b9 0f01 	cmp.w	r9, #1
 801e3ce:	f47f af27 	bne.w	801e220 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e3d2:	f1bb 0f01 	cmp.w	fp, #1
 801e3d6:	f47f af23 	bne.w	801e220 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e3da:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801e4b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801e3de:	f8db 0000 	ldr.w	r0, [fp]
 801e3e2:	6803      	ldr	r3, [r0, #0]
 801e3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e3e6:	4798      	blx	r3
 801e3e8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e3ec:	465a      	mov	r2, fp
 801e3ee:	d006      	beq.n	801e3fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801e3f0:	f1b8 0f04 	cmp.w	r8, #4
 801e3f4:	d13e      	bne.n	801e474 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801e3f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e3f8:	3300      	adds	r3, #0
 801e3fa:	bf18      	it	ne
 801e3fc:	2301      	movne	r3, #1
 801e3fe:	0580      	lsls	r0, r0, #22
 801e400:	d563      	bpl.n	801e4ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801e402:	f1b8 0f08 	cmp.w	r8, #8
 801e406:	d160      	bne.n	801e4ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801e408:	2b00      	cmp	r3, #0
 801e40a:	bf0c      	ite	eq
 801e40c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e410:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e414:	2f00      	cmp	r7, #0
 801e416:	f47f af03 	bne.w	801e220 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e41a:	2c00      	cmp	r4, #0
 801e41c:	f47f af00 	bne.w	801e220 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e420:	9b07      	ldr	r3, [sp, #28]
 801e422:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e424:	18f3      	adds	r3, r6, r3
 801e426:	4283      	cmp	r3, r0
 801e428:	f73f aefa 	bgt.w	801e220 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e42c:	9808      	ldr	r0, [sp, #32]
 801e42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e430:	4403      	add	r3, r0
 801e432:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e434:	4283      	cmp	r3, r0
 801e436:	f73f aef3 	bgt.w	801e220 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e43a:	f1b8 0f08 	cmp.w	r8, #8
 801e43e:	6810      	ldr	r0, [r2, #0]
 801e440:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801e444:	bf18      	it	ne
 801e446:	3501      	addne	r5, #1
 801e448:	6804      	ldr	r4, [r0, #0]
 801e44a:	9105      	str	r1, [sp, #20]
 801e44c:	bf18      	it	ne
 801e44e:	f025 0501 	bicne.w	r5, r5, #1
 801e452:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e454:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801e458:	bf18      	it	ne
 801e45a:	b2ad      	uxthne	r5, r5
 801e45c:	9104      	str	r1, [sp, #16]
 801e45e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e460:	e9cd 5a00 	strd	r5, sl, [sp]
 801e464:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801e468:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e46a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801e46c:	47a0      	blx	r4
 801e46e:	b015      	add	sp, #84	; 0x54
 801e470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e474:	2300      	movs	r3, #0
 801e476:	e7c2      	b.n	801e3fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801e478:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e47a:	e727      	b.n	801e2cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801e47c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e47e:	700b      	strb	r3, [r1, #0]
 801e480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e482:	704b      	strb	r3, [r1, #1]
 801e484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e486:	708b      	strb	r3, [r1, #2]
 801e488:	e78d      	b.n	801e3a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801e48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e48c:	b153      	cbz	r3, 801e4a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e48e:	441c      	add	r4, r3
 801e490:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e492:	b2a4      	uxth	r4, r4
 801e494:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e498:	f004 0407 	and.w	r4, r4, #7
 801e49c:	781a      	ldrb	r2, [r3, #0]
 801e49e:	9324      	str	r3, [sp, #144]	; 0x90
 801e4a0:	4122      	asrs	r2, r4
 801e4a2:	b2d2      	uxtb	r2, r2
 801e4a4:	9b07      	ldr	r3, [sp, #28]
 801e4a6:	445b      	add	r3, fp
 801e4a8:	9307      	str	r3, [sp, #28]
 801e4aa:	e72d      	b.n	801e308 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801e4ac:	20056534 	.word	0x20056534
 801e4b0:	2005653c 	.word	0x2005653c
 801e4b4:	20056536 	.word	0x20056536
 801e4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d1d7      	bne.n	801e46e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801e4be:	4b06      	ldr	r3, [pc, #24]	; (801e4d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e4c0:	6818      	ldr	r0, [r3, #0]
 801e4c2:	6803      	ldr	r3, [r0, #0]
 801e4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4c6:	4798      	blx	r3
 801e4c8:	e7d1      	b.n	801e46e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	f43f aea8 	beq.w	801e220 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e4d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e4d4:	e79e      	b.n	801e414 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801e4d6:	bf00      	nop
 801e4d8:	2005653c 	.word	0x2005653c

0801e4dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e4dc:	b538      	push	{r3, r4, r5, lr}
 801e4de:	4c15      	ldr	r4, [pc, #84]	; (801e534 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e4e0:	4605      	mov	r5, r0
 801e4e2:	7823      	ldrb	r3, [r4, #0]
 801e4e4:	f3bf 8f5b 	dmb	ish
 801e4e8:	07da      	lsls	r2, r3, #31
 801e4ea:	d40b      	bmi.n	801e504 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	f006 fe34 	bl	802515a <__cxa_guard_acquire>
 801e4f2:	b138      	cbz	r0, 801e504 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e4f4:	4620      	mov	r0, r4
 801e4f6:	f006 fe3c 	bl	8025172 <__cxa_guard_release>
 801e4fa:	4a0f      	ldr	r2, [pc, #60]	; (801e538 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e4fc:	490f      	ldr	r1, [pc, #60]	; (801e53c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e4fe:	4810      	ldr	r0, [pc, #64]	; (801e540 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e500:	f006 fe24 	bl	802514c <__aeabi_atexit>
 801e504:	4c0f      	ldr	r4, [pc, #60]	; (801e544 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e506:	7823      	ldrb	r3, [r4, #0]
 801e508:	f3bf 8f5b 	dmb	ish
 801e50c:	07db      	lsls	r3, r3, #31
 801e50e:	d40b      	bmi.n	801e528 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e510:	4620      	mov	r0, r4
 801e512:	f006 fe22 	bl	802515a <__cxa_guard_acquire>
 801e516:	b138      	cbz	r0, 801e528 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e518:	4620      	mov	r0, r4
 801e51a:	f006 fe2a 	bl	8025172 <__cxa_guard_release>
 801e51e:	4a06      	ldr	r2, [pc, #24]	; (801e538 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e520:	4909      	ldr	r1, [pc, #36]	; (801e548 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e522:	480a      	ldr	r0, [pc, #40]	; (801e54c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e524:	f006 fe12 	bl	802514c <__aeabi_atexit>
 801e528:	4b05      	ldr	r3, [pc, #20]	; (801e540 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e52a:	612b      	str	r3, [r5, #16]
 801e52c:	4b07      	ldr	r3, [pc, #28]	; (801e54c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e52e:	616b      	str	r3, [r5, #20]
 801e530:	bd38      	pop	{r3, r4, r5, pc}
 801e532:	bf00      	nop
 801e534:	20056628 	.word	0x20056628
 801e538:	20000000 	.word	0x20000000
 801e53c:	0801ce27 	.word	0x0801ce27
 801e540:	20000060 	.word	0x20000060
 801e544:	2005662c 	.word	0x2005662c
 801e548:	0801ce25 	.word	0x0801ce25
 801e54c:	20000064 	.word	0x20000064

0801e550 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e550:	b538      	push	{r3, r4, r5, lr}
 801e552:	4c15      	ldr	r4, [pc, #84]	; (801e5a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e554:	4605      	mov	r5, r0
 801e556:	7823      	ldrb	r3, [r4, #0]
 801e558:	f3bf 8f5b 	dmb	ish
 801e55c:	07da      	lsls	r2, r3, #31
 801e55e:	d40b      	bmi.n	801e578 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e560:	4620      	mov	r0, r4
 801e562:	f006 fdfa 	bl	802515a <__cxa_guard_acquire>
 801e566:	b138      	cbz	r0, 801e578 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e568:	4620      	mov	r0, r4
 801e56a:	f006 fe02 	bl	8025172 <__cxa_guard_release>
 801e56e:	4a0f      	ldr	r2, [pc, #60]	; (801e5ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e570:	490f      	ldr	r1, [pc, #60]	; (801e5b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e572:	4810      	ldr	r0, [pc, #64]	; (801e5b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e574:	f006 fdea 	bl	802514c <__aeabi_atexit>
 801e578:	4c0f      	ldr	r4, [pc, #60]	; (801e5b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e57a:	7823      	ldrb	r3, [r4, #0]
 801e57c:	f3bf 8f5b 	dmb	ish
 801e580:	07db      	lsls	r3, r3, #31
 801e582:	d40b      	bmi.n	801e59c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e584:	4620      	mov	r0, r4
 801e586:	f006 fde8 	bl	802515a <__cxa_guard_acquire>
 801e58a:	b138      	cbz	r0, 801e59c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e58c:	4620      	mov	r0, r4
 801e58e:	f006 fdf0 	bl	8025172 <__cxa_guard_release>
 801e592:	4a06      	ldr	r2, [pc, #24]	; (801e5ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e594:	4909      	ldr	r1, [pc, #36]	; (801e5bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e596:	480a      	ldr	r0, [pc, #40]	; (801e5c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e598:	f006 fdd8 	bl	802514c <__aeabi_atexit>
 801e59c:	4b05      	ldr	r3, [pc, #20]	; (801e5b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e59e:	60ab      	str	r3, [r5, #8]
 801e5a0:	4b07      	ldr	r3, [pc, #28]	; (801e5c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e5a2:	60eb      	str	r3, [r5, #12]
 801e5a4:	bd38      	pop	{r3, r4, r5, pc}
 801e5a6:	bf00      	nop
 801e5a8:	20056608 	.word	0x20056608
 801e5ac:	20000000 	.word	0x20000000
 801e5b0:	0801ce2b 	.word	0x0801ce2b
 801e5b4:	20000040 	.word	0x20000040
 801e5b8:	2005660c 	.word	0x2005660c
 801e5bc:	0801ce29 	.word	0x0801ce29
 801e5c0:	20000044 	.word	0x20000044

0801e5c4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e5c4:	b510      	push	{r4, lr}
 801e5c6:	4604      	mov	r4, r0
 801e5c8:	f7ff ff88 	bl	801e4dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e5cc:	4620      	mov	r0, r4
 801e5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5d2:	f7ff bfbd 	b.w	801e550 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e5d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e5d8:	b538      	push	{r3, r4, r5, lr}
 801e5da:	4c15      	ldr	r4, [pc, #84]	; (801e630 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e5dc:	4605      	mov	r5, r0
 801e5de:	7823      	ldrb	r3, [r4, #0]
 801e5e0:	f3bf 8f5b 	dmb	ish
 801e5e4:	07da      	lsls	r2, r3, #31
 801e5e6:	d40b      	bmi.n	801e600 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e5e8:	4620      	mov	r0, r4
 801e5ea:	f006 fdb6 	bl	802515a <__cxa_guard_acquire>
 801e5ee:	b138      	cbz	r0, 801e600 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e5f0:	4620      	mov	r0, r4
 801e5f2:	f006 fdbe 	bl	8025172 <__cxa_guard_release>
 801e5f6:	4a0f      	ldr	r2, [pc, #60]	; (801e634 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e5f8:	490f      	ldr	r1, [pc, #60]	; (801e638 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e5fa:	4810      	ldr	r0, [pc, #64]	; (801e63c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e5fc:	f006 fda6 	bl	802514c <__aeabi_atexit>
 801e600:	4c0f      	ldr	r4, [pc, #60]	; (801e640 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e602:	7823      	ldrb	r3, [r4, #0]
 801e604:	f3bf 8f5b 	dmb	ish
 801e608:	07db      	lsls	r3, r3, #31
 801e60a:	d40b      	bmi.n	801e624 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e60c:	4620      	mov	r0, r4
 801e60e:	f006 fda4 	bl	802515a <__cxa_guard_acquire>
 801e612:	b138      	cbz	r0, 801e624 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e614:	4620      	mov	r0, r4
 801e616:	f006 fdac 	bl	8025172 <__cxa_guard_release>
 801e61a:	4a06      	ldr	r2, [pc, #24]	; (801e634 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e61c:	4909      	ldr	r1, [pc, #36]	; (801e644 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e61e:	480a      	ldr	r0, [pc, #40]	; (801e648 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e620:	f006 fd94 	bl	802514c <__aeabi_atexit>
 801e624:	4b05      	ldr	r3, [pc, #20]	; (801e63c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e626:	622b      	str	r3, [r5, #32]
 801e628:	4b07      	ldr	r3, [pc, #28]	; (801e648 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e62a:	626b      	str	r3, [r5, #36]	; 0x24
 801e62c:	bd38      	pop	{r3, r4, r5, pc}
 801e62e:	bf00      	nop
 801e630:	20056630 	.word	0x20056630
 801e634:	20000000 	.word	0x20000000
 801e638:	0801ce1f 	.word	0x0801ce1f
 801e63c:	20000068 	.word	0x20000068
 801e640:	20056634 	.word	0x20056634
 801e644:	0801ce1d 	.word	0x0801ce1d
 801e648:	2000006c 	.word	0x2000006c

0801e64c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e64c:	b538      	push	{r3, r4, r5, lr}
 801e64e:	4c15      	ldr	r4, [pc, #84]	; (801e6a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e650:	4605      	mov	r5, r0
 801e652:	7823      	ldrb	r3, [r4, #0]
 801e654:	f3bf 8f5b 	dmb	ish
 801e658:	07da      	lsls	r2, r3, #31
 801e65a:	d40b      	bmi.n	801e674 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e65c:	4620      	mov	r0, r4
 801e65e:	f006 fd7c 	bl	802515a <__cxa_guard_acquire>
 801e662:	b138      	cbz	r0, 801e674 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e664:	4620      	mov	r0, r4
 801e666:	f006 fd84 	bl	8025172 <__cxa_guard_release>
 801e66a:	4a0f      	ldr	r2, [pc, #60]	; (801e6a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e66c:	490f      	ldr	r1, [pc, #60]	; (801e6ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e66e:	4810      	ldr	r0, [pc, #64]	; (801e6b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e670:	f006 fd6c 	bl	802514c <__aeabi_atexit>
 801e674:	4c0f      	ldr	r4, [pc, #60]	; (801e6b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e676:	7823      	ldrb	r3, [r4, #0]
 801e678:	f3bf 8f5b 	dmb	ish
 801e67c:	07db      	lsls	r3, r3, #31
 801e67e:	d40b      	bmi.n	801e698 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e680:	4620      	mov	r0, r4
 801e682:	f006 fd6a 	bl	802515a <__cxa_guard_acquire>
 801e686:	b138      	cbz	r0, 801e698 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e688:	4620      	mov	r0, r4
 801e68a:	f006 fd72 	bl	8025172 <__cxa_guard_release>
 801e68e:	4a06      	ldr	r2, [pc, #24]	; (801e6a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e690:	4909      	ldr	r1, [pc, #36]	; (801e6b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e692:	480a      	ldr	r0, [pc, #40]	; (801e6bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e694:	f006 fd5a 	bl	802514c <__aeabi_atexit>
 801e698:	4b05      	ldr	r3, [pc, #20]	; (801e6b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e69a:	61ab      	str	r3, [r5, #24]
 801e69c:	4b07      	ldr	r3, [pc, #28]	; (801e6bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e69e:	61eb      	str	r3, [r5, #28]
 801e6a0:	bd38      	pop	{r3, r4, r5, pc}
 801e6a2:	bf00      	nop
 801e6a4:	20056610 	.word	0x20056610
 801e6a8:	20000000 	.word	0x20000000
 801e6ac:	0801ce23 	.word	0x0801ce23
 801e6b0:	20000048 	.word	0x20000048
 801e6b4:	20056614 	.word	0x20056614
 801e6b8:	0801ce21 	.word	0x0801ce21
 801e6bc:	2000004c 	.word	0x2000004c

0801e6c0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e6c0:	b510      	push	{r4, lr}
 801e6c2:	4604      	mov	r4, r0
 801e6c4:	f7ff ff88 	bl	801e5d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e6c8:	4620      	mov	r0, r4
 801e6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6ce:	f7ff bfbd 	b.w	801e64c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e6d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e6d4:	b538      	push	{r3, r4, r5, lr}
 801e6d6:	4c15      	ldr	r4, [pc, #84]	; (801e72c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e6d8:	4605      	mov	r5, r0
 801e6da:	7823      	ldrb	r3, [r4, #0]
 801e6dc:	f3bf 8f5b 	dmb	ish
 801e6e0:	07da      	lsls	r2, r3, #31
 801e6e2:	d40b      	bmi.n	801e6fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e6e4:	4620      	mov	r0, r4
 801e6e6:	f006 fd38 	bl	802515a <__cxa_guard_acquire>
 801e6ea:	b138      	cbz	r0, 801e6fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e6ec:	4620      	mov	r0, r4
 801e6ee:	f006 fd40 	bl	8025172 <__cxa_guard_release>
 801e6f2:	4a0f      	ldr	r2, [pc, #60]	; (801e730 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e6f4:	490f      	ldr	r1, [pc, #60]	; (801e734 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e6f6:	4810      	ldr	r0, [pc, #64]	; (801e738 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e6f8:	f006 fd28 	bl	802514c <__aeabi_atexit>
 801e6fc:	4c0f      	ldr	r4, [pc, #60]	; (801e73c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e6fe:	7823      	ldrb	r3, [r4, #0]
 801e700:	f3bf 8f5b 	dmb	ish
 801e704:	07db      	lsls	r3, r3, #31
 801e706:	d40b      	bmi.n	801e720 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e708:	4620      	mov	r0, r4
 801e70a:	f006 fd26 	bl	802515a <__cxa_guard_acquire>
 801e70e:	b138      	cbz	r0, 801e720 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e710:	4620      	mov	r0, r4
 801e712:	f006 fd2e 	bl	8025172 <__cxa_guard_release>
 801e716:	4a06      	ldr	r2, [pc, #24]	; (801e730 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e718:	4909      	ldr	r1, [pc, #36]	; (801e740 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e71a:	480a      	ldr	r0, [pc, #40]	; (801e744 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e71c:	f006 fd16 	bl	802514c <__aeabi_atexit>
 801e720:	4b05      	ldr	r3, [pc, #20]	; (801e738 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e722:	632b      	str	r3, [r5, #48]	; 0x30
 801e724:	4b07      	ldr	r3, [pc, #28]	; (801e744 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e726:	636b      	str	r3, [r5, #52]	; 0x34
 801e728:	bd38      	pop	{r3, r4, r5, pc}
 801e72a:	bf00      	nop
 801e72c:	20056618 	.word	0x20056618
 801e730:	20000000 	.word	0x20000000
 801e734:	0801ce17 	.word	0x0801ce17
 801e738:	20000050 	.word	0x20000050
 801e73c:	2005661c 	.word	0x2005661c
 801e740:	0801ce15 	.word	0x0801ce15
 801e744:	20000054 	.word	0x20000054

0801e748 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e748:	b538      	push	{r3, r4, r5, lr}
 801e74a:	4c15      	ldr	r4, [pc, #84]	; (801e7a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e74c:	4605      	mov	r5, r0
 801e74e:	7823      	ldrb	r3, [r4, #0]
 801e750:	f3bf 8f5b 	dmb	ish
 801e754:	07da      	lsls	r2, r3, #31
 801e756:	d40b      	bmi.n	801e770 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e758:	4620      	mov	r0, r4
 801e75a:	f006 fcfe 	bl	802515a <__cxa_guard_acquire>
 801e75e:	b138      	cbz	r0, 801e770 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e760:	4620      	mov	r0, r4
 801e762:	f006 fd06 	bl	8025172 <__cxa_guard_release>
 801e766:	4a0f      	ldr	r2, [pc, #60]	; (801e7a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e768:	490f      	ldr	r1, [pc, #60]	; (801e7a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e76a:	4810      	ldr	r0, [pc, #64]	; (801e7ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e76c:	f006 fcee 	bl	802514c <__aeabi_atexit>
 801e770:	4c0f      	ldr	r4, [pc, #60]	; (801e7b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e772:	7823      	ldrb	r3, [r4, #0]
 801e774:	f3bf 8f5b 	dmb	ish
 801e778:	07db      	lsls	r3, r3, #31
 801e77a:	d40b      	bmi.n	801e794 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e77c:	4620      	mov	r0, r4
 801e77e:	f006 fcec 	bl	802515a <__cxa_guard_acquire>
 801e782:	b138      	cbz	r0, 801e794 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e784:	4620      	mov	r0, r4
 801e786:	f006 fcf4 	bl	8025172 <__cxa_guard_release>
 801e78a:	4a06      	ldr	r2, [pc, #24]	; (801e7a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e78c:	4909      	ldr	r1, [pc, #36]	; (801e7b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e78e:	480a      	ldr	r0, [pc, #40]	; (801e7b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e790:	f006 fcdc 	bl	802514c <__aeabi_atexit>
 801e794:	4b05      	ldr	r3, [pc, #20]	; (801e7ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e796:	62ab      	str	r3, [r5, #40]	; 0x28
 801e798:	4b07      	ldr	r3, [pc, #28]	; (801e7b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e79a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e79c:	bd38      	pop	{r3, r4, r5, pc}
 801e79e:	bf00      	nop
 801e7a0:	200565f0 	.word	0x200565f0
 801e7a4:	20000000 	.word	0x20000000
 801e7a8:	0801ce1b 	.word	0x0801ce1b
 801e7ac:	20000028 	.word	0x20000028
 801e7b0:	200565f4 	.word	0x200565f4
 801e7b4:	0801ce19 	.word	0x0801ce19
 801e7b8:	2000002c 	.word	0x2000002c

0801e7bc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e7bc:	b510      	push	{r4, lr}
 801e7be:	4604      	mov	r4, r0
 801e7c0:	f7ff ff88 	bl	801e6d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e7c4:	4620      	mov	r0, r4
 801e7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7ca:	f7ff bfbd 	b.w	801e748 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e7d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e7d0:	b538      	push	{r3, r4, r5, lr}
 801e7d2:	4c15      	ldr	r4, [pc, #84]	; (801e828 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e7d4:	4605      	mov	r5, r0
 801e7d6:	7823      	ldrb	r3, [r4, #0]
 801e7d8:	f3bf 8f5b 	dmb	ish
 801e7dc:	07da      	lsls	r2, r3, #31
 801e7de:	d40b      	bmi.n	801e7f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e7e0:	4620      	mov	r0, r4
 801e7e2:	f006 fcba 	bl	802515a <__cxa_guard_acquire>
 801e7e6:	b138      	cbz	r0, 801e7f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e7e8:	4620      	mov	r0, r4
 801e7ea:	f006 fcc2 	bl	8025172 <__cxa_guard_release>
 801e7ee:	4a0f      	ldr	r2, [pc, #60]	; (801e82c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e7f0:	490f      	ldr	r1, [pc, #60]	; (801e830 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e7f2:	4810      	ldr	r0, [pc, #64]	; (801e834 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e7f4:	f006 fcaa 	bl	802514c <__aeabi_atexit>
 801e7f8:	4c0f      	ldr	r4, [pc, #60]	; (801e838 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e7fa:	7823      	ldrb	r3, [r4, #0]
 801e7fc:	f3bf 8f5b 	dmb	ish
 801e800:	07db      	lsls	r3, r3, #31
 801e802:	d40b      	bmi.n	801e81c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e804:	4620      	mov	r0, r4
 801e806:	f006 fca8 	bl	802515a <__cxa_guard_acquire>
 801e80a:	b138      	cbz	r0, 801e81c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e80c:	4620      	mov	r0, r4
 801e80e:	f006 fcb0 	bl	8025172 <__cxa_guard_release>
 801e812:	4a06      	ldr	r2, [pc, #24]	; (801e82c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e814:	4909      	ldr	r1, [pc, #36]	; (801e83c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e816:	480a      	ldr	r0, [pc, #40]	; (801e840 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e818:	f006 fc98 	bl	802514c <__aeabi_atexit>
 801e81c:	4b05      	ldr	r3, [pc, #20]	; (801e834 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e81e:	642b      	str	r3, [r5, #64]	; 0x40
 801e820:	4b07      	ldr	r3, [pc, #28]	; (801e840 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e822:	646b      	str	r3, [r5, #68]	; 0x44
 801e824:	bd38      	pop	{r3, r4, r5, pc}
 801e826:	bf00      	nop
 801e828:	20056620 	.word	0x20056620
 801e82c:	20000000 	.word	0x20000000
 801e830:	0801ce0f 	.word	0x0801ce0f
 801e834:	20000058 	.word	0x20000058
 801e838:	20056624 	.word	0x20056624
 801e83c:	0801ce0d 	.word	0x0801ce0d
 801e840:	2000005c 	.word	0x2000005c

0801e844 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e844:	b538      	push	{r3, r4, r5, lr}
 801e846:	4c15      	ldr	r4, [pc, #84]	; (801e89c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e848:	4605      	mov	r5, r0
 801e84a:	7823      	ldrb	r3, [r4, #0]
 801e84c:	f3bf 8f5b 	dmb	ish
 801e850:	07da      	lsls	r2, r3, #31
 801e852:	d40b      	bmi.n	801e86c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e854:	4620      	mov	r0, r4
 801e856:	f006 fc80 	bl	802515a <__cxa_guard_acquire>
 801e85a:	b138      	cbz	r0, 801e86c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e85c:	4620      	mov	r0, r4
 801e85e:	f006 fc88 	bl	8025172 <__cxa_guard_release>
 801e862:	4a0f      	ldr	r2, [pc, #60]	; (801e8a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e864:	490f      	ldr	r1, [pc, #60]	; (801e8a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e866:	4810      	ldr	r0, [pc, #64]	; (801e8a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e868:	f006 fc70 	bl	802514c <__aeabi_atexit>
 801e86c:	4c0f      	ldr	r4, [pc, #60]	; (801e8ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e86e:	7823      	ldrb	r3, [r4, #0]
 801e870:	f3bf 8f5b 	dmb	ish
 801e874:	07db      	lsls	r3, r3, #31
 801e876:	d40b      	bmi.n	801e890 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e878:	4620      	mov	r0, r4
 801e87a:	f006 fc6e 	bl	802515a <__cxa_guard_acquire>
 801e87e:	b138      	cbz	r0, 801e890 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e880:	4620      	mov	r0, r4
 801e882:	f006 fc76 	bl	8025172 <__cxa_guard_release>
 801e886:	4a06      	ldr	r2, [pc, #24]	; (801e8a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e888:	4909      	ldr	r1, [pc, #36]	; (801e8b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e88a:	480a      	ldr	r0, [pc, #40]	; (801e8b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e88c:	f006 fc5e 	bl	802514c <__aeabi_atexit>
 801e890:	4b05      	ldr	r3, [pc, #20]	; (801e8a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e892:	63ab      	str	r3, [r5, #56]	; 0x38
 801e894:	4b07      	ldr	r3, [pc, #28]	; (801e8b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e896:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e898:	bd38      	pop	{r3, r4, r5, pc}
 801e89a:	bf00      	nop
 801e89c:	20056600 	.word	0x20056600
 801e8a0:	20000000 	.word	0x20000000
 801e8a4:	0801ce13 	.word	0x0801ce13
 801e8a8:	20000038 	.word	0x20000038
 801e8ac:	20056604 	.word	0x20056604
 801e8b0:	0801ce11 	.word	0x0801ce11
 801e8b4:	2000003c 	.word	0x2000003c

0801e8b8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e8b8:	b510      	push	{r4, lr}
 801e8ba:	4604      	mov	r4, r0
 801e8bc:	f7ff ff88 	bl	801e7d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e8c0:	4620      	mov	r0, r4
 801e8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8c6:	f7ff bfbd 	b.w	801e844 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e8cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e8cc:	b538      	push	{r3, r4, r5, lr}
 801e8ce:	4c15      	ldr	r4, [pc, #84]	; (801e924 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e8d0:	4605      	mov	r5, r0
 801e8d2:	7823      	ldrb	r3, [r4, #0]
 801e8d4:	f3bf 8f5b 	dmb	ish
 801e8d8:	07da      	lsls	r2, r3, #31
 801e8da:	d40b      	bmi.n	801e8f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e8dc:	4620      	mov	r0, r4
 801e8de:	f006 fc3c 	bl	802515a <__cxa_guard_acquire>
 801e8e2:	b138      	cbz	r0, 801e8f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	f006 fc44 	bl	8025172 <__cxa_guard_release>
 801e8ea:	4a0f      	ldr	r2, [pc, #60]	; (801e928 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e8ec:	490f      	ldr	r1, [pc, #60]	; (801e92c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e8ee:	4810      	ldr	r0, [pc, #64]	; (801e930 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e8f0:	f006 fc2c 	bl	802514c <__aeabi_atexit>
 801e8f4:	4c0f      	ldr	r4, [pc, #60]	; (801e934 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e8f6:	7823      	ldrb	r3, [r4, #0]
 801e8f8:	f3bf 8f5b 	dmb	ish
 801e8fc:	07db      	lsls	r3, r3, #31
 801e8fe:	d40b      	bmi.n	801e918 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e900:	4620      	mov	r0, r4
 801e902:	f006 fc2a 	bl	802515a <__cxa_guard_acquire>
 801e906:	b138      	cbz	r0, 801e918 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e908:	4620      	mov	r0, r4
 801e90a:	f006 fc32 	bl	8025172 <__cxa_guard_release>
 801e90e:	4a06      	ldr	r2, [pc, #24]	; (801e928 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e910:	4909      	ldr	r1, [pc, #36]	; (801e938 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e912:	480a      	ldr	r0, [pc, #40]	; (801e93c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e914:	f006 fc1a 	bl	802514c <__aeabi_atexit>
 801e918:	4b05      	ldr	r3, [pc, #20]	; (801e930 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e91a:	652b      	str	r3, [r5, #80]	; 0x50
 801e91c:	4b07      	ldr	r3, [pc, #28]	; (801e93c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e91e:	656b      	str	r3, [r5, #84]	; 0x54
 801e920:	bd38      	pop	{r3, r4, r5, pc}
 801e922:	bf00      	nop
 801e924:	200565f8 	.word	0x200565f8
 801e928:	20000000 	.word	0x20000000
 801e92c:	0801ce07 	.word	0x0801ce07
 801e930:	20000030 	.word	0x20000030
 801e934:	200565fc 	.word	0x200565fc
 801e938:	0801ce05 	.word	0x0801ce05
 801e93c:	20000034 	.word	0x20000034

0801e940 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e940:	b538      	push	{r3, r4, r5, lr}
 801e942:	4c15      	ldr	r4, [pc, #84]	; (801e998 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e944:	4605      	mov	r5, r0
 801e946:	7823      	ldrb	r3, [r4, #0]
 801e948:	f3bf 8f5b 	dmb	ish
 801e94c:	07da      	lsls	r2, r3, #31
 801e94e:	d40b      	bmi.n	801e968 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e950:	4620      	mov	r0, r4
 801e952:	f006 fc02 	bl	802515a <__cxa_guard_acquire>
 801e956:	b138      	cbz	r0, 801e968 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e958:	4620      	mov	r0, r4
 801e95a:	f006 fc0a 	bl	8025172 <__cxa_guard_release>
 801e95e:	4a0f      	ldr	r2, [pc, #60]	; (801e99c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e960:	490f      	ldr	r1, [pc, #60]	; (801e9a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e962:	4810      	ldr	r0, [pc, #64]	; (801e9a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e964:	f006 fbf2 	bl	802514c <__aeabi_atexit>
 801e968:	4c0f      	ldr	r4, [pc, #60]	; (801e9a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e96a:	7823      	ldrb	r3, [r4, #0]
 801e96c:	f3bf 8f5b 	dmb	ish
 801e970:	07db      	lsls	r3, r3, #31
 801e972:	d40b      	bmi.n	801e98c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e974:	4620      	mov	r0, r4
 801e976:	f006 fbf0 	bl	802515a <__cxa_guard_acquire>
 801e97a:	b138      	cbz	r0, 801e98c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e97c:	4620      	mov	r0, r4
 801e97e:	f006 fbf8 	bl	8025172 <__cxa_guard_release>
 801e982:	4a06      	ldr	r2, [pc, #24]	; (801e99c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e984:	4909      	ldr	r1, [pc, #36]	; (801e9ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e986:	480a      	ldr	r0, [pc, #40]	; (801e9b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e988:	f006 fbe0 	bl	802514c <__aeabi_atexit>
 801e98c:	4b05      	ldr	r3, [pc, #20]	; (801e9a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e98e:	64ab      	str	r3, [r5, #72]	; 0x48
 801e990:	4b07      	ldr	r3, [pc, #28]	; (801e9b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e992:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e994:	bd38      	pop	{r3, r4, r5, pc}
 801e996:	bf00      	nop
 801e998:	200565e8 	.word	0x200565e8
 801e99c:	20000000 	.word	0x20000000
 801e9a0:	0801ce0b 	.word	0x0801ce0b
 801e9a4:	20000020 	.word	0x20000020
 801e9a8:	200565ec 	.word	0x200565ec
 801e9ac:	0801ce09 	.word	0x0801ce09
 801e9b0:	20000024 	.word	0x20000024

0801e9b4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e9b4:	b510      	push	{r4, lr}
 801e9b6:	4604      	mov	r4, r0
 801e9b8:	f7ff ff88 	bl	801e8cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e9bc:	4620      	mov	r0, r4
 801e9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9c2:	f7ff bfbd 	b.w	801e940 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e9c6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e9c6:	b510      	push	{r4, lr}
 801e9c8:	4604      	mov	r4, r0
 801e9ca:	f7ff fff3 	bl	801e9b4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e9ce:	4620      	mov	r0, r4
 801e9d0:	f7ff ff72 	bl	801e8b8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e9d4:	4620      	mov	r0, r4
 801e9d6:	f7ff fe73 	bl	801e6c0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e9da:	4620      	mov	r0, r4
 801e9dc:	f7ff fdf2 	bl	801e5c4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e9e0:	4620      	mov	r0, r4
 801e9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9e6:	f7ff bee9 	b.w	801e7bc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e9ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f0:	b087      	sub	sp, #28
 801e9f2:	7888      	ldrb	r0, [r1, #2]
 801e9f4:	4616      	mov	r6, r2
 801e9f6:	9001      	str	r0, [sp, #4]
 801e9f8:	7848      	ldrb	r0, [r1, #1]
 801e9fa:	9100      	str	r1, [sp, #0]
 801e9fc:	9002      	str	r0, [sp, #8]
 801e9fe:	7808      	ldrb	r0, [r1, #0]
 801ea00:	9901      	ldr	r1, [sp, #4]
 801ea02:	9003      	str	r0, [sp, #12]
 801ea04:	9802      	ldr	r0, [sp, #8]
 801ea06:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801ea0a:	0200      	lsls	r0, r0, #8
 801ea0c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801ea10:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801ea14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801ea18:	9903      	ldr	r1, [sp, #12]
 801ea1a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801ea1e:	4308      	orrs	r0, r1
 801ea20:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801ea24:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801ea28:	9005      	str	r0, [sp, #20]
 801ea2a:	fb05 ca0e 	mla	sl, r5, lr, ip
 801ea2e:	2d00      	cmp	r5, #0
 801ea30:	eb06 080a 	add.w	r8, r6, sl
 801ea34:	db4a      	blt.n	801eacc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801ea36:	45a9      	cmp	r9, r5
 801ea38:	dd48      	ble.n	801eacc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801ea3a:	f1bc 0f00 	cmp.w	ip, #0
 801ea3e:	db43      	blt.n	801eac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801ea40:	45e6      	cmp	lr, ip
 801ea42:	dd41      	ble.n	801eac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801ea44:	f816 600a 	ldrb.w	r6, [r6, sl]
 801ea48:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ea4c:	441e      	add	r6, r3
 801ea4e:	f11c 0001 	adds.w	r0, ip, #1
 801ea52:	d43e      	bmi.n	801ead2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801ea54:	4586      	cmp	lr, r0
 801ea56:	dd3c      	ble.n	801ead2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801ea58:	2a00      	cmp	r2, #0
 801ea5a:	d03a      	beq.n	801ead2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801ea5c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801ea60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea64:	4418      	add	r0, r3
 801ea66:	3501      	adds	r5, #1
 801ea68:	d437      	bmi.n	801eada <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801ea6a:	45a9      	cmp	r9, r5
 801ea6c:	dd35      	ble.n	801eada <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801ea6e:	b3a4      	cbz	r4, 801eada <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801ea70:	f1bc 0f00 	cmp.w	ip, #0
 801ea74:	db2f      	blt.n	801ead6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801ea76:	45e6      	cmp	lr, ip
 801ea78:	dd2d      	ble.n	801ead6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801ea7a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801ea7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ea82:	441d      	add	r5, r3
 801ea84:	f11c 0c01 	adds.w	ip, ip, #1
 801ea88:	d42a      	bmi.n	801eae0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801ea8a:	45e6      	cmp	lr, ip
 801ea8c:	dd28      	ble.n	801eae0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801ea8e:	b33a      	cbz	r2, 801eae0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801ea90:	44c6      	add	lr, r8
 801ea92:	f89e c001 	ldrb.w	ip, [lr, #1]
 801ea96:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ea9a:	4463      	add	r3, ip
 801ea9c:	ea6f 0c07 	mvn.w	ip, r7
 801eaa0:	2a0f      	cmp	r2, #15
 801eaa2:	f896 a000 	ldrb.w	sl, [r6]
 801eaa6:	fa5f fc8c 	uxtb.w	ip, ip
 801eaaa:	f890 b000 	ldrb.w	fp, [r0]
 801eaae:	f895 9000 	ldrb.w	r9, [r5]
 801eab2:	7819      	ldrb	r1, [r3, #0]
 801eab4:	d801      	bhi.n	801eaba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 801eab6:	2c0f      	cmp	r4, #15
 801eab8:	d914      	bls.n	801eae4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801eaba:	4b40      	ldr	r3, [pc, #256]	; (801ebbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 801eabc:	f240 1157 	movw	r1, #343	; 0x157
 801eac0:	4a3f      	ldr	r2, [pc, #252]	; (801ebc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801eac2:	4840      	ldr	r0, [pc, #256]	; (801ebc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801eac4:	f006 fcc6 	bl	8025454 <__assert_func>
 801eac8:	ae05      	add	r6, sp, #20
 801eaca:	e7c0      	b.n	801ea4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 801eacc:	a805      	add	r0, sp, #20
 801eace:	4606      	mov	r6, r0
 801ead0:	e7c9      	b.n	801ea66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801ead2:	a805      	add	r0, sp, #20
 801ead4:	e7c7      	b.n	801ea66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801ead6:	ad05      	add	r5, sp, #20
 801ead8:	e7d4      	b.n	801ea84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 801eada:	ab05      	add	r3, sp, #20
 801eadc:	461d      	mov	r5, r3
 801eade:	e7dd      	b.n	801ea9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801eae0:	ab05      	add	r3, sp, #20
 801eae2:	e7db      	b.n	801ea9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801eae4:	b292      	uxth	r2, r2
 801eae6:	b2a4      	uxth	r4, r4
 801eae8:	fa1f fc8c 	uxth.w	ip, ip
 801eaec:	fb02 f804 	mul.w	r8, r2, r4
 801eaf0:	0112      	lsls	r2, r2, #4
 801eaf2:	b2bf      	uxth	r7, r7
 801eaf4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801eaf8:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801eafc:	eba2 0208 	sub.w	r2, r2, r8
 801eb00:	b2a4      	uxth	r4, r4
 801eb02:	b292      	uxth	r2, r2
 801eb04:	ebae 0e04 	sub.w	lr, lr, r4
 801eb08:	fb02 fb0b 	mul.w	fp, r2, fp
 801eb0c:	fa1f fe8e 	uxth.w	lr, lr
 801eb10:	fb0e ba0a 	mla	sl, lr, sl, fp
 801eb14:	fb04 aa09 	mla	sl, r4, r9, sl
 801eb18:	fb08 aa01 	mla	sl, r8, r1, sl
 801eb1c:	9903      	ldr	r1, [sp, #12]
 801eb1e:	fb11 f90c 	smulbb	r9, r1, ip
 801eb22:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801eb26:	9900      	ldr	r1, [sp, #0]
 801eb28:	fb0a 9a07 	mla	sl, sl, r7, r9
 801eb2c:	fa1f fa8a 	uxth.w	sl, sl
 801eb30:	f10a 0901 	add.w	r9, sl, #1
 801eb34:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801eb38:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eb3c:	f881 a000 	strb.w	sl, [r1]
 801eb40:	f890 a001 	ldrb.w	sl, [r0, #1]
 801eb44:	f896 9001 	ldrb.w	r9, [r6, #1]
 801eb48:	fb02 fa0a 	mul.w	sl, r2, sl
 801eb4c:	9902      	ldr	r1, [sp, #8]
 801eb4e:	fb0e aa09 	mla	sl, lr, r9, sl
 801eb52:	f895 9001 	ldrb.w	r9, [r5, #1]
 801eb56:	fb04 aa09 	mla	sl, r4, r9, sl
 801eb5a:	f893 9001 	ldrb.w	r9, [r3, #1]
 801eb5e:	fb08 a909 	mla	r9, r8, r9, sl
 801eb62:	fb11 fa0c 	smulbb	sl, r1, ip
 801eb66:	9900      	ldr	r1, [sp, #0]
 801eb68:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801eb6c:	fb09 a907 	mla	r9, r9, r7, sl
 801eb70:	fa1f f989 	uxth.w	r9, r9
 801eb74:	f109 0a01 	add.w	sl, r9, #1
 801eb78:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801eb7c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eb80:	f881 9001 	strb.w	r9, [r1, #1]
 801eb84:	7880      	ldrb	r0, [r0, #2]
 801eb86:	78b6      	ldrb	r6, [r6, #2]
 801eb88:	4342      	muls	r2, r0
 801eb8a:	78a8      	ldrb	r0, [r5, #2]
 801eb8c:	789b      	ldrb	r3, [r3, #2]
 801eb8e:	fb0e 2206 	mla	r2, lr, r6, r2
 801eb92:	fb04 2400 	mla	r4, r4, r0, r2
 801eb96:	fb08 4803 	mla	r8, r8, r3, r4
 801eb9a:	9b01      	ldr	r3, [sp, #4]
 801eb9c:	fb13 fc0c 	smulbb	ip, r3, ip
 801eba0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801eba4:	fb08 c707 	mla	r7, r8, r7, ip
 801eba8:	b2bf      	uxth	r7, r7
 801ebaa:	f107 0c01 	add.w	ip, r7, #1
 801ebae:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ebb2:	123f      	asrs	r7, r7, #8
 801ebb4:	708f      	strb	r7, [r1, #2]
 801ebb6:	b007      	add	sp, #28
 801ebb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebbc:	0802a10b 	.word	0x0802a10b
 801ebc0:	0802a673 	.word	0x0802a673
 801ebc4:	0802a1d4 	.word	0x0802a1d4

0801ebc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebcc:	ed2d 8b08 	vpush	{d8-d11}
 801ebd0:	b093      	sub	sp, #76	; 0x4c
 801ebd2:	eeb0 aa40 	vmov.f32	s20, s0
 801ebd6:	eef0 9a60 	vmov.f32	s19, s1
 801ebda:	9210      	str	r2, [sp, #64]	; 0x40
 801ebdc:	eeb0 9a41 	vmov.f32	s18, s2
 801ebe0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ebe2:	eeb0 8a62 	vmov.f32	s16, s5
 801ebe6:	9309      	str	r3, [sp, #36]	; 0x24
 801ebe8:	eef0 8a43 	vmov.f32	s17, s6
 801ebec:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801ebf0:	eef0 ba44 	vmov.f32	s23, s8
 801ebf4:	9011      	str	r0, [sp, #68]	; 0x44
 801ebf6:	eeb0 ba64 	vmov.f32	s22, s9
 801ebfa:	930e      	str	r3, [sp, #56]	; 0x38
 801ebfc:	eef0 aa45 	vmov.f32	s21, s10
 801ec00:	6850      	ldr	r0, [r2, #4]
 801ec02:	910d      	str	r1, [sp, #52]	; 0x34
 801ec04:	6812      	ldr	r2, [r2, #0]
 801ec06:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801ec0a:	fb00 1303 	mla	r3, r0, r3, r1
 801ec0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec12:	18d3      	adds	r3, r2, r3
 801ec14:	930a      	str	r3, [sp, #40]	; 0x28
 801ec16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	930c      	str	r3, [sp, #48]	; 0x30
 801ec1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ec1e:	685c      	ldr	r4, [r3, #4]
 801ec20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec22:	3404      	adds	r4, #4
 801ec24:	43db      	mvns	r3, r3
 801ec26:	b2db      	uxtb	r3, r3
 801ec28:	930b      	str	r3, [sp, #44]	; 0x2c
 801ec2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	dc03      	bgt.n	801ec38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ec30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	f340 8250 	ble.w	801f0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801ec38:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ec3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ec3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ec42:	1e48      	subs	r0, r1, #1
 801ec44:	1e55      	subs	r5, r2, #1
 801ec46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	f340 80ee 	ble.w	801ee2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801ec4e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801ec50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ec52:	1436      	asrs	r6, r6, #16
 801ec54:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ec58:	d406      	bmi.n	801ec68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ec5a:	4286      	cmp	r6, r0
 801ec5c:	da04      	bge.n	801ec68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ec5e:	2b00      	cmp	r3, #0
 801ec60:	db02      	blt.n	801ec68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ec62:	42ab      	cmp	r3, r5
 801ec64:	f2c0 80e2 	blt.w	801ee2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801ec68:	3601      	adds	r6, #1
 801ec6a:	f100 80cf 	bmi.w	801ee0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ec6e:	42b1      	cmp	r1, r6
 801ec70:	f2c0 80cc 	blt.w	801ee0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ec74:	3301      	adds	r3, #1
 801ec76:	f100 80c9 	bmi.w	801ee0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ec7a:	429a      	cmp	r2, r3
 801ec7c:	f2c0 80c6 	blt.w	801ee0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ec80:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801ec84:	f1bb 0f00 	cmp.w	fp, #0
 801ec88:	f340 80f1 	ble.w	801ee6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ec8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ec8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ec90:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801ec92:	141d      	asrs	r5, r3, #16
 801ec94:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ec96:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ec9a:	68c7      	ldr	r7, [r0, #12]
 801ec9c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ec9e:	1418      	asrs	r0, r3, #16
 801eca0:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801eca4:	6892      	ldr	r2, [r2, #8]
 801eca6:	f100 8137 	bmi.w	801ef18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ecaa:	f102 3cff 	add.w	ip, r2, #4294967295
 801ecae:	4560      	cmp	r0, ip
 801ecb0:	f280 8132 	bge.w	801ef18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ecb4:	2d00      	cmp	r5, #0
 801ecb6:	f2c0 812f 	blt.w	801ef18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ecba:	f107 3cff 	add.w	ip, r7, #4294967295
 801ecbe:	4565      	cmp	r5, ip
 801ecc0:	f280 812a 	bge.w	801ef18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ecc4:	b212      	sxth	r2, r2
 801ecc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ecc8:	fb05 0002 	mla	r0, r5, r2, r0
 801eccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ecce:	f817 c000 	ldrb.w	ip, [r7, r0]
 801ecd2:	4405      	add	r5, r0
 801ecd4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ecd8:	eb04 0e0c 	add.w	lr, r4, ip
 801ecdc:	f1b8 0f00 	cmp.w	r8, #0
 801ece0:	f000 810c 	beq.w	801eefc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801ece4:	786f      	ldrb	r7, [r5, #1]
 801ece6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ecea:	4427      	add	r7, r4
 801ecec:	2900      	cmp	r1, #0
 801ecee:	f000 810d 	beq.w	801ef0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ecf2:	18a8      	adds	r0, r5, r2
 801ecf4:	5caa      	ldrb	r2, [r5, r2]
 801ecf6:	7840      	ldrb	r0, [r0, #1]
 801ecf8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ecfc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ed00:	4422      	add	r2, r4
 801ed02:	4420      	add	r0, r4
 801ed04:	fa1f f388 	uxth.w	r3, r8
 801ed08:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801ed0c:	b289      	uxth	r1, r1
 801ed0e:	f897 c000 	ldrb.w	ip, [r7]
 801ed12:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801ed16:	fb03 f901 	mul.w	r9, r3, r1
 801ed1a:	011b      	lsls	r3, r3, #4
 801ed1c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ed20:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801ed24:	eba3 0309 	sub.w	r3, r3, r9
 801ed28:	b289      	uxth	r1, r1
 801ed2a:	b29b      	uxth	r3, r3
 801ed2c:	eba8 0801 	sub.w	r8, r8, r1
 801ed30:	fb03 fc0c 	mul.w	ip, r3, ip
 801ed34:	fa1f f888 	uxth.w	r8, r8
 801ed38:	930f      	str	r3, [sp, #60]	; 0x3c
 801ed3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed3c:	fb08 cc0a 	mla	ip, r8, sl, ip
 801ed40:	f892 a000 	ldrb.w	sl, [r2]
 801ed44:	fb01 cc0a 	mla	ip, r1, sl, ip
 801ed48:	f890 a000 	ldrb.w	sl, [r0]
 801ed4c:	fb09 cc0a 	mla	ip, r9, sl, ip
 801ed50:	f896 a000 	ldrb.w	sl, [r6]
 801ed54:	fb1a fa03 	smulbb	sl, sl, r3
 801ed58:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ed5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed5e:	fb0c ac05 	mla	ip, ip, r5, sl
 801ed62:	fa1f fc8c 	uxth.w	ip, ip
 801ed66:	f10c 0a01 	add.w	sl, ip, #1
 801ed6a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801ed6e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ed72:	f886 a000 	strb.w	sl, [r6]
 801ed76:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ed7a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801ed7e:	fb03 fc0c 	mul.w	ip, r3, ip
 801ed82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed84:	fb08 cc0a 	mla	ip, r8, sl, ip
 801ed88:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ed8c:	fb01 cc0a 	mla	ip, r1, sl, ip
 801ed90:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ed94:	fb09 cc0a 	mla	ip, r9, sl, ip
 801ed98:	f896 a001 	ldrb.w	sl, [r6, #1]
 801ed9c:	fb1a fa03 	smulbb	sl, sl, r3
 801eda0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801eda4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eda6:	fb0c ac05 	mla	ip, ip, r5, sl
 801edaa:	fa1f fc8c 	uxth.w	ip, ip
 801edae:	f10c 0a01 	add.w	sl, ip, #1
 801edb2:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801edb6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801edba:	f886 c001 	strb.w	ip, [r6, #1]
 801edbe:	78bf      	ldrb	r7, [r7, #2]
 801edc0:	f89e c002 	ldrb.w	ip, [lr, #2]
 801edc4:	437b      	muls	r3, r7
 801edc6:	fb08 330c 	mla	r3, r8, ip, r3
 801edca:	f892 c002 	ldrb.w	ip, [r2, #2]
 801edce:	7882      	ldrb	r2, [r0, #2]
 801edd0:	fb01 310c 	mla	r1, r1, ip, r3
 801edd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801edd6:	fb09 1902 	mla	r9, r9, r2, r1
 801edda:	78b1      	ldrb	r1, [r6, #2]
 801eddc:	fb11 f103 	smulbb	r1, r1, r3
 801ede0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ede4:	fb09 1505 	mla	r5, r9, r5, r1
 801ede8:	b2ad      	uxth	r5, r5
 801edea:	1c6b      	adds	r3, r5, #1
 801edec:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801edf0:	122d      	asrs	r5, r5, #8
 801edf2:	70b5      	strb	r5, [r6, #2]
 801edf4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801edf6:	3603      	adds	r6, #3
 801edf8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801edfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 801edfe:	4413      	add	r3, r2
 801ee00:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ee02:	9325      	str	r3, [sp, #148]	; 0x94
 801ee04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ee06:	4413      	add	r3, r2
 801ee08:	9326      	str	r3, [sp, #152]	; 0x98
 801ee0a:	e73b      	b.n	801ec84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801ee0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ee0e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801ee10:	4433      	add	r3, r6
 801ee12:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801ee14:	9325      	str	r3, [sp, #148]	; 0x94
 801ee16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ee18:	4433      	add	r3, r6
 801ee1a:	9326      	str	r3, [sp, #152]	; 0x98
 801ee1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee1e:	3b01      	subs	r3, #1
 801ee20:	9309      	str	r3, [sp, #36]	; 0x24
 801ee22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee24:	3303      	adds	r3, #3
 801ee26:	930a      	str	r3, [sp, #40]	; 0x28
 801ee28:	e70d      	b.n	801ec46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ee2a:	d028      	beq.n	801ee7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ee2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee2e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ee30:	3b01      	subs	r3, #1
 801ee32:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801ee34:	fb00 5003 	mla	r0, r0, r3, r5
 801ee38:	1400      	asrs	r0, r0, #16
 801ee3a:	f53f af21 	bmi.w	801ec80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ee3e:	3901      	subs	r1, #1
 801ee40:	4288      	cmp	r0, r1
 801ee42:	f6bf af1d 	bge.w	801ec80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ee46:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ee48:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ee4a:	fb01 0303 	mla	r3, r1, r3, r0
 801ee4e:	141b      	asrs	r3, r3, #16
 801ee50:	f53f af16 	bmi.w	801ec80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ee54:	3a01      	subs	r2, #1
 801ee56:	4293      	cmp	r3, r2
 801ee58:	f6bf af12 	bge.w	801ec80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801ee5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee5e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ee62:	1cdf      	adds	r7, r3, #3
 801ee64:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801ee68:	f1b9 0f00 	cmp.w	r9, #0
 801ee6c:	dc73      	bgt.n	801ef56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801ee6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ee72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee7a:	441a      	add	r2, r3
 801ee7c:	920a      	str	r2, [sp, #40]	; 0x28
 801ee7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	f340 8129 	ble.w	801f0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801ee86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ee8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ee8c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ee90:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ee94:	eef0 6a48 	vmov.f32	s13, s16
 801ee98:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ee9c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801eea0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eea4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801eea8:	eef0 6a68 	vmov.f32	s13, s17
 801eeac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eeb0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801eeb4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801eeb8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801eebc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801eec0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801eec4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eec8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eecc:	ee18 2a10 	vmov	r2, s16
 801eed0:	eeb0 8a47 	vmov.f32	s16, s14
 801eed4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eed8:	ee18 2a90 	vmov	r2, s17
 801eedc:	9327      	str	r3, [sp, #156]	; 0x9c
 801eede:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eee0:	eef0 8a67 	vmov.f32	s17, s15
 801eee4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eee8:	9328      	str	r3, [sp, #160]	; 0xa0
 801eeea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eeec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eeee:	3b01      	subs	r3, #1
 801eef0:	930d      	str	r3, [sp, #52]	; 0x34
 801eef2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eef4:	bf08      	it	eq
 801eef6:	4613      	moveq	r3, r2
 801eef8:	9309      	str	r3, [sp, #36]	; 0x24
 801eefa:	e696      	b.n	801ec2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801eefc:	b149      	cbz	r1, 801ef12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801eefe:	5caa      	ldrb	r2, [r5, r2]
 801ef00:	4670      	mov	r0, lr
 801ef02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef06:	4422      	add	r2, r4
 801ef08:	4677      	mov	r7, lr
 801ef0a:	e6fb      	b.n	801ed04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801ef0c:	4670      	mov	r0, lr
 801ef0e:	4672      	mov	r2, lr
 801ef10:	e6f8      	b.n	801ed04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801ef12:	4670      	mov	r0, lr
 801ef14:	4672      	mov	r2, lr
 801ef16:	e7f7      	b.n	801ef08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801ef18:	f110 0c01 	adds.w	ip, r0, #1
 801ef1c:	f53f af6a 	bmi.w	801edf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801ef20:	4562      	cmp	r2, ip
 801ef22:	f6ff af67 	blt.w	801edf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801ef26:	f115 0c01 	adds.w	ip, r5, #1
 801ef2a:	f53f af63 	bmi.w	801edf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801ef2e:	4567      	cmp	r7, ip
 801ef30:	f6ff af60 	blt.w	801edf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801ef34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef36:	b23f      	sxth	r7, r7
 801ef38:	b212      	sxth	r2, r2
 801ef3a:	9002      	str	r0, [sp, #8]
 801ef3c:	9701      	str	r7, [sp, #4]
 801ef3e:	9200      	str	r2, [sp, #0]
 801ef40:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ef42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ef44:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801ef48:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801ef4c:	4623      	mov	r3, r4
 801ef4e:	4631      	mov	r1, r6
 801ef50:	f7ff fd4c 	bl	801e9ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801ef54:	e74e      	b.n	801edf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801ef56:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ef58:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ef5a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ef5e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801ef60:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ef62:	1400      	asrs	r0, r0, #16
 801ef64:	142d      	asrs	r5, r5, #16
 801ef66:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ef68:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ef6c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ef70:	fb02 5000 	mla	r0, r2, r0, r5
 801ef74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ef76:	f815 e000 	ldrb.w	lr, [r5, r0]
 801ef7a:	eb05 0c00 	add.w	ip, r5, r0
 801ef7e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ef82:	eb04 060e 	add.w	r6, r4, lr
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	f000 8097 	beq.w	801f0ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801ef8c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ef90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef94:	4425      	add	r5, r4
 801ef96:	2900      	cmp	r1, #0
 801ef98:	f000 8098 	beq.w	801f0cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801ef9c:	eb0c 0002 	add.w	r0, ip, r2
 801efa0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801efa4:	7840      	ldrb	r0, [r0, #1]
 801efa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801efaa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801efae:	4422      	add	r2, r4
 801efb0:	4420      	add	r0, r4
 801efb2:	b29b      	uxth	r3, r3
 801efb4:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801efb8:	b289      	uxth	r1, r1
 801efba:	f895 e000 	ldrb.w	lr, [r5]
 801efbe:	3703      	adds	r7, #3
 801efc0:	f109 39ff 	add.w	r9, r9, #4294967295
 801efc4:	fb03 f801 	mul.w	r8, r3, r1
 801efc8:	011b      	lsls	r3, r3, #4
 801efca:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801efce:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801efd2:	eba3 0308 	sub.w	r3, r3, r8
 801efd6:	b289      	uxth	r1, r1
 801efd8:	b29b      	uxth	r3, r3
 801efda:	ebac 0c01 	sub.w	ip, ip, r1
 801efde:	fb03 fe0e 	mul.w	lr, r3, lr
 801efe2:	fa1f fc8c 	uxth.w	ip, ip
 801efe6:	930f      	str	r3, [sp, #60]	; 0x3c
 801efe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801efea:	fb0c ee0b 	mla	lr, ip, fp, lr
 801efee:	f892 b000 	ldrb.w	fp, [r2]
 801eff2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801eff6:	f890 b000 	ldrb.w	fp, [r0]
 801effa:	fb08 ee0b 	mla	lr, r8, fp, lr
 801effe:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801f002:	fb1b fb03 	smulbb	fp, fp, r3
 801f006:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f00a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f00c:	fb0e be0a 	mla	lr, lr, sl, fp
 801f010:	fa1f fe8e 	uxth.w	lr, lr
 801f014:	f10e 0b01 	add.w	fp, lr, #1
 801f018:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f01c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f020:	f807 ec06 	strb.w	lr, [r7, #-6]
 801f024:	f895 e001 	ldrb.w	lr, [r5, #1]
 801f028:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f02c:	fb03 fe0e 	mul.w	lr, r3, lr
 801f030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f032:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f036:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f03a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f03e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f042:	fb08 ee0b 	mla	lr, r8, fp, lr
 801f046:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801f04a:	fb1b fb03 	smulbb	fp, fp, r3
 801f04e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f054:	fb0e be0a 	mla	lr, lr, sl, fp
 801f058:	fa1f fe8e 	uxth.w	lr, lr
 801f05c:	f10e 0b01 	add.w	fp, lr, #1
 801f060:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f064:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f068:	f807 ec05 	strb.w	lr, [r7, #-5]
 801f06c:	78ad      	ldrb	r5, [r5, #2]
 801f06e:	78b6      	ldrb	r6, [r6, #2]
 801f070:	436b      	muls	r3, r5
 801f072:	7895      	ldrb	r5, [r2, #2]
 801f074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f076:	fb0c 3306 	mla	r3, ip, r6, r3
 801f07a:	fb01 3305 	mla	r3, r1, r5, r3
 801f07e:	7885      	ldrb	r5, [r0, #2]
 801f080:	fb08 3805 	mla	r8, r8, r5, r3
 801f084:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801f088:	fb13 f302 	smulbb	r3, r3, r2
 801f08c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f090:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f092:	fb08 380a 	mla	r8, r8, sl, r3
 801f096:	fa1f f888 	uxth.w	r8, r8
 801f09a:	f108 0301 	add.w	r3, r8, #1
 801f09e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801f0a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f0a4:	4413      	add	r3, r2
 801f0a6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f0a8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f0ac:	9325      	str	r3, [sp, #148]	; 0x94
 801f0ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f0b0:	f807 8c04 	strb.w	r8, [r7, #-4]
 801f0b4:	4413      	add	r3, r2
 801f0b6:	9326      	str	r3, [sp, #152]	; 0x98
 801f0b8:	e6d6      	b.n	801ee68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f0ba:	b151      	cbz	r1, 801f0d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 801f0bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f0c0:	4630      	mov	r0, r6
 801f0c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f0c6:	4422      	add	r2, r4
 801f0c8:	4635      	mov	r5, r6
 801f0ca:	e772      	b.n	801efb2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801f0cc:	4630      	mov	r0, r6
 801f0ce:	4632      	mov	r2, r6
 801f0d0:	e76f      	b.n	801efb2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801f0d2:	4630      	mov	r0, r6
 801f0d4:	4632      	mov	r2, r6
 801f0d6:	e7f7      	b.n	801f0c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801f0d8:	b013      	add	sp, #76	; 0x4c
 801f0da:	ecbd 8b08 	vpop	{d8-d11}
 801f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f0e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0e8:	784d      	ldrb	r5, [r1, #1]
 801f0ea:	f891 9002 	ldrb.w	r9, [r1, #2]
 801f0ee:	022d      	lsls	r5, r5, #8
 801f0f0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f0f4:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801f0f8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801f0fc:	f891 9000 	ldrb.w	r9, [r1]
 801f100:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f104:	ea45 0509 	orr.w	r5, r5, r9
 801f108:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f10c:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801f110:	9501      	str	r5, [sp, #4]
 801f112:	fb06 470c 	mla	r7, r6, ip, r4
 801f116:	2e00      	cmp	r6, #0
 801f118:	eb02 0e07 	add.w	lr, r2, r7
 801f11c:	db46      	blt.n	801f1ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801f11e:	45b0      	cmp	r8, r6
 801f120:	dd44      	ble.n	801f1ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801f122:	2c00      	cmp	r4, #0
 801f124:	db40      	blt.n	801f1a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801f126:	45a4      	cmp	ip, r4
 801f128:	dd3e      	ble.n	801f1a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801f12a:	5dd7      	ldrb	r7, [r2, r7]
 801f12c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f130:	441f      	add	r7, r3
 801f132:	1c62      	adds	r2, r4, #1
 801f134:	d43d      	bmi.n	801f1b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801f136:	4594      	cmp	ip, r2
 801f138:	dd3b      	ble.n	801f1b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801f13a:	f1ba 0f00 	cmp.w	sl, #0
 801f13e:	d038      	beq.n	801f1b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801f140:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f148:	441d      	add	r5, r3
 801f14a:	3601      	adds	r6, #1
 801f14c:	d435      	bmi.n	801f1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801f14e:	45b0      	cmp	r8, r6
 801f150:	dd33      	ble.n	801f1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801f152:	b390      	cbz	r0, 801f1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801f154:	2c00      	cmp	r4, #0
 801f156:	db2e      	blt.n	801f1b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801f158:	45a4      	cmp	ip, r4
 801f15a:	dd2c      	ble.n	801f1b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801f15c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801f160:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f164:	441e      	add	r6, r3
 801f166:	1c62      	adds	r2, r4, #1
 801f168:	d42a      	bmi.n	801f1c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801f16a:	4594      	cmp	ip, r2
 801f16c:	dd28      	ble.n	801f1c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801f16e:	f1ba 0f00 	cmp.w	sl, #0
 801f172:	d025      	beq.n	801f1c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801f174:	44f4      	add	ip, lr
 801f176:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f17a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f17e:	4413      	add	r3, r2
 801f180:	f1ba 0f0f 	cmp.w	sl, #15
 801f184:	f897 8000 	ldrb.w	r8, [r7]
 801f188:	f895 9000 	ldrb.w	r9, [r5]
 801f18c:	f896 e000 	ldrb.w	lr, [r6]
 801f190:	f893 c000 	ldrb.w	ip, [r3]
 801f194:	d801      	bhi.n	801f19a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 801f196:	280f      	cmp	r0, #15
 801f198:	d914      	bls.n	801f1c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 801f19a:	4b29      	ldr	r3, [pc, #164]	; (801f240 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 801f19c:	f240 1157 	movw	r1, #343	; 0x157
 801f1a0:	4a28      	ldr	r2, [pc, #160]	; (801f244 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801f1a2:	4829      	ldr	r0, [pc, #164]	; (801f248 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801f1a4:	f006 f956 	bl	8025454 <__assert_func>
 801f1a8:	af01      	add	r7, sp, #4
 801f1aa:	e7c2      	b.n	801f132 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 801f1ac:	ad01      	add	r5, sp, #4
 801f1ae:	462f      	mov	r7, r5
 801f1b0:	e7cb      	b.n	801f14a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801f1b2:	ad01      	add	r5, sp, #4
 801f1b4:	e7c9      	b.n	801f14a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801f1b6:	ae01      	add	r6, sp, #4
 801f1b8:	e7d5      	b.n	801f166 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 801f1ba:	ab01      	add	r3, sp, #4
 801f1bc:	461e      	mov	r6, r3
 801f1be:	e7df      	b.n	801f180 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801f1c0:	ab01      	add	r3, sp, #4
 801f1c2:	e7dd      	b.n	801f180 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801f1c4:	fa1f f48a 	uxth.w	r4, sl
 801f1c8:	b280      	uxth	r0, r0
 801f1ca:	fb04 fa00 	mul.w	sl, r4, r0
 801f1ce:	0124      	lsls	r4, r4, #4
 801f1d0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f1d4:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801f1d8:	b282      	uxth	r2, r0
 801f1da:	eba4 000a 	sub.w	r0, r4, sl
 801f1de:	ebab 0b02 	sub.w	fp, fp, r2
 801f1e2:	b280      	uxth	r0, r0
 801f1e4:	fa1f fb8b 	uxth.w	fp, fp
 801f1e8:	fb00 f909 	mul.w	r9, r0, r9
 801f1ec:	fb0b 9808 	mla	r8, fp, r8, r9
 801f1f0:	fb02 8e0e 	mla	lr, r2, lr, r8
 801f1f4:	fb0a ec0c 	mla	ip, sl, ip, lr
 801f1f8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f1fc:	f881 c000 	strb.w	ip, [r1]
 801f200:	786c      	ldrb	r4, [r5, #1]
 801f202:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f206:	4344      	muls	r4, r0
 801f208:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f20c:	7874      	ldrb	r4, [r6, #1]
 801f20e:	fb02 cc04 	mla	ip, r2, r4, ip
 801f212:	785c      	ldrb	r4, [r3, #1]
 801f214:	fb0a c404 	mla	r4, sl, r4, ip
 801f218:	1224      	asrs	r4, r4, #8
 801f21a:	704c      	strb	r4, [r1, #1]
 801f21c:	78ad      	ldrb	r5, [r5, #2]
 801f21e:	78bc      	ldrb	r4, [r7, #2]
 801f220:	4368      	muls	r0, r5
 801f222:	fb0b 0b04 	mla	fp, fp, r4, r0
 801f226:	78b0      	ldrb	r0, [r6, #2]
 801f228:	fb02 b000 	mla	r0, r2, r0, fp
 801f22c:	789a      	ldrb	r2, [r3, #2]
 801f22e:	fb0a 0a02 	mla	sl, sl, r2, r0
 801f232:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f236:	f881 a002 	strb.w	sl, [r1, #2]
 801f23a:	b003      	add	sp, #12
 801f23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f240:	0802a10b 	.word	0x0802a10b
 801f244:	0802a673 	.word	0x0802a673
 801f248:	0802a1d4 	.word	0x0802a1d4

0801f24c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f250:	ed2d 8b0a 	vpush	{d8-d12}
 801f254:	b08d      	sub	sp, #52	; 0x34
 801f256:	eeb0 aa40 	vmov.f32	s20, s0
 801f25a:	eef0 9a60 	vmov.f32	s19, s1
 801f25e:	900b      	str	r0, [sp, #44]	; 0x2c
 801f260:	eeb0 9a41 	vmov.f32	s18, s2
 801f264:	9306      	str	r3, [sp, #24]
 801f266:	eeb0 8a62 	vmov.f32	s16, s5
 801f26a:	eef0 8a43 	vmov.f32	s17, s6
 801f26e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801f270:	eeb0 ca44 	vmov.f32	s24, s8
 801f274:	eef0 ba64 	vmov.f32	s23, s9
 801f278:	eeb0 ba45 	vmov.f32	s22, s10
 801f27c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f280:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801f284:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f286:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801f28a:	6850      	ldr	r0, [r2, #4]
 801f28c:	6812      	ldr	r2, [r2, #0]
 801f28e:	fb00 1303 	mla	r3, r0, r3, r1
 801f292:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f296:	18d3      	adds	r3, r2, r3
 801f298:	9307      	str	r3, [sp, #28]
 801f29a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	9308      	str	r3, [sp, #32]
 801f2a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2a2:	685d      	ldr	r5, [r3, #4]
 801f2a4:	3504      	adds	r5, #4
 801f2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	dc03      	bgt.n	801f2b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	f340 81e6 	ble.w	801f680 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801f2b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f2ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f2be:	1e48      	subs	r0, r1, #1
 801f2c0:	1e56      	subs	r6, r2, #1
 801f2c2:	9b06      	ldr	r3, [sp, #24]
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	f340 80bd 	ble.w	801f444 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801f2ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2cc:	1427      	asrs	r7, r4, #16
 801f2ce:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f2d2:	d406      	bmi.n	801f2e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f2d4:	4287      	cmp	r7, r0
 801f2d6:	da04      	bge.n	801f2e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	db02      	blt.n	801f2e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f2dc:	42b3      	cmp	r3, r6
 801f2de:	f2c0 80b2 	blt.w	801f446 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f2e2:	3701      	adds	r7, #1
 801f2e4:	f100 80a1 	bmi.w	801f42a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f2e8:	42b9      	cmp	r1, r7
 801f2ea:	f2c0 809e 	blt.w	801f42a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f2ee:	3301      	adds	r3, #1
 801f2f0:	f100 809b 	bmi.w	801f42a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f2f4:	429a      	cmp	r2, r3
 801f2f6:	f2c0 8098 	blt.w	801f42a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f2fa:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801f2fe:	f1bb 0f00 	cmp.w	fp, #0
 801f302:	f340 80bf 	ble.w	801f484 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801f306:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f308:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801f30a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f30c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f310:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801f314:	1420      	asrs	r0, r4, #16
 801f316:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f318:	ea4f 4723 	mov.w	r7, r3, asr #16
 801f31c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f320:	6892      	ldr	r2, [r2, #8]
 801f322:	f100 8103 	bmi.w	801f52c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f326:	f102 3eff 	add.w	lr, r2, #4294967295
 801f32a:	4570      	cmp	r0, lr
 801f32c:	f280 80fe 	bge.w	801f52c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f330:	2f00      	cmp	r7, #0
 801f332:	f2c0 80fb 	blt.w	801f52c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f336:	f10c 3eff 	add.w	lr, ip, #4294967295
 801f33a:	4577      	cmp	r7, lr
 801f33c:	f280 80f6 	bge.w	801f52c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f340:	b212      	sxth	r2, r2
 801f342:	fb07 0002 	mla	r0, r7, r2, r0
 801f346:	9f08      	ldr	r7, [sp, #32]
 801f348:	f817 8000 	ldrb.w	r8, [r7, r0]
 801f34c:	eb07 0e00 	add.w	lr, r7, r0
 801f350:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f354:	eb05 0c08 	add.w	ip, r5, r8
 801f358:	2b00      	cmp	r3, #0
 801f35a:	f000 80d8 	beq.w	801f50e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801f35e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801f362:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f366:	442f      	add	r7, r5
 801f368:	2900      	cmp	r1, #0
 801f36a:	f000 80d9 	beq.w	801f520 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801f36e:	eb0e 0002 	add.w	r0, lr, r2
 801f372:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f376:	7840      	ldrb	r0, [r0, #1]
 801f378:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f37c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f380:	442a      	add	r2, r5
 801f382:	4428      	add	r0, r5
 801f384:	b29b      	uxth	r3, r3
 801f386:	f815 a008 	ldrb.w	sl, [r5, r8]
 801f38a:	b289      	uxth	r1, r1
 801f38c:	f897 8000 	ldrb.w	r8, [r7]
 801f390:	fb03 f901 	mul.w	r9, r3, r1
 801f394:	011b      	lsls	r3, r3, #4
 801f396:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f39a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f39e:	eba3 0309 	sub.w	r3, r3, r9
 801f3a2:	b289      	uxth	r1, r1
 801f3a4:	b29b      	uxth	r3, r3
 801f3a6:	ebae 0e01 	sub.w	lr, lr, r1
 801f3aa:	fb03 f808 	mul.w	r8, r3, r8
 801f3ae:	fa1f fe8e 	uxth.w	lr, lr
 801f3b2:	fb0e 880a 	mla	r8, lr, sl, r8
 801f3b6:	f892 a000 	ldrb.w	sl, [r2]
 801f3ba:	fb01 880a 	mla	r8, r1, sl, r8
 801f3be:	f890 a000 	ldrb.w	sl, [r0]
 801f3c2:	fb09 880a 	mla	r8, r9, sl, r8
 801f3c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f3ca:	f886 8000 	strb.w	r8, [r6]
 801f3ce:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f3d2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f3d6:	fb03 f808 	mul.w	r8, r3, r8
 801f3da:	fb0e 880a 	mla	r8, lr, sl, r8
 801f3de:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f3e2:	fb01 880a 	mla	r8, r1, sl, r8
 801f3e6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f3ea:	fb09 880a 	mla	r8, r9, sl, r8
 801f3ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f3f2:	f886 8001 	strb.w	r8, [r6, #1]
 801f3f6:	78bf      	ldrb	r7, [r7, #2]
 801f3f8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f3fc:	437b      	muls	r3, r7
 801f3fe:	7892      	ldrb	r2, [r2, #2]
 801f400:	fb0e 330c 	mla	r3, lr, ip, r3
 801f404:	fb01 3102 	mla	r1, r1, r2, r3
 801f408:	7882      	ldrb	r2, [r0, #2]
 801f40a:	fb09 1902 	mla	r9, r9, r2, r1
 801f40e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f412:	f886 9002 	strb.w	r9, [r6, #2]
 801f416:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f418:	3603      	adds	r6, #3
 801f41a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f41c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f420:	441c      	add	r4, r3
 801f422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f424:	4413      	add	r3, r2
 801f426:	9322      	str	r3, [sp, #136]	; 0x88
 801f428:	e769      	b.n	801f2fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f42a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f42c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801f42e:	441c      	add	r4, r3
 801f430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f432:	443b      	add	r3, r7
 801f434:	9322      	str	r3, [sp, #136]	; 0x88
 801f436:	9b06      	ldr	r3, [sp, #24]
 801f438:	3b01      	subs	r3, #1
 801f43a:	9306      	str	r3, [sp, #24]
 801f43c:	9b07      	ldr	r3, [sp, #28]
 801f43e:	3303      	adds	r3, #3
 801f440:	9307      	str	r3, [sp, #28]
 801f442:	e73e      	b.n	801f2c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f444:	d026      	beq.n	801f494 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f446:	9b06      	ldr	r3, [sp, #24]
 801f448:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f44a:	3b01      	subs	r3, #1
 801f44c:	fb00 4003 	mla	r0, r0, r3, r4
 801f450:	1400      	asrs	r0, r0, #16
 801f452:	f53f af52 	bmi.w	801f2fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f456:	3901      	subs	r1, #1
 801f458:	4288      	cmp	r0, r1
 801f45a:	f6bf af4e 	bge.w	801f2fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f45e:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f460:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f462:	fb01 0303 	mla	r3, r1, r3, r0
 801f466:	141b      	asrs	r3, r3, #16
 801f468:	f53f af47 	bmi.w	801f2fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f46c:	3a01      	subs	r2, #1
 801f46e:	4293      	cmp	r3, r2
 801f470:	f6bf af43 	bge.w	801f2fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f474:	9b07      	ldr	r3, [sp, #28]
 801f476:	f8dd a018 	ldr.w	sl, [sp, #24]
 801f47a:	f103 0803 	add.w	r8, r3, #3
 801f47e:	f1ba 0f00 	cmp.w	sl, #0
 801f482:	dc71      	bgt.n	801f568 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f484:	9b06      	ldr	r3, [sp, #24]
 801f486:	9a07      	ldr	r2, [sp, #28]
 801f488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f48c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f490:	441a      	add	r2, r3
 801f492:	9207      	str	r2, [sp, #28]
 801f494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f496:	2b00      	cmp	r3, #0
 801f498:	f340 80f2 	ble.w	801f680 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801f49c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f4a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f4a2:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f4a6:	eef0 6a48 	vmov.f32	s13, s16
 801f4aa:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f4ae:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f4b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4b6:	ee16 4a90 	vmov	r4, s13
 801f4ba:	eef0 6a68 	vmov.f32	s13, s17
 801f4be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4c2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801f4c6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f4ca:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f4ce:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f4d2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f4d6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f4da:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f4de:	ee18 2a10 	vmov	r2, s16
 801f4e2:	eeb0 8a47 	vmov.f32	s16, s14
 801f4e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4ea:	ee18 2a90 	vmov	r2, s17
 801f4ee:	9323      	str	r3, [sp, #140]	; 0x8c
 801f4f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f4f2:	eef0 8a67 	vmov.f32	s17, s15
 801f4f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4fa:	9324      	str	r3, [sp, #144]	; 0x90
 801f4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f500:	3b01      	subs	r3, #1
 801f502:	9309      	str	r3, [sp, #36]	; 0x24
 801f504:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f506:	bf08      	it	eq
 801f508:	4613      	moveq	r3, r2
 801f50a:	9306      	str	r3, [sp, #24]
 801f50c:	e6cb      	b.n	801f2a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f50e:	b151      	cbz	r1, 801f526 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f510:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f514:	4660      	mov	r0, ip
 801f516:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f51a:	442a      	add	r2, r5
 801f51c:	4667      	mov	r7, ip
 801f51e:	e731      	b.n	801f384 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f520:	4660      	mov	r0, ip
 801f522:	4662      	mov	r2, ip
 801f524:	e72e      	b.n	801f384 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f526:	4660      	mov	r0, ip
 801f528:	4662      	mov	r2, ip
 801f52a:	e7f7      	b.n	801f51c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801f52c:	f110 0e01 	adds.w	lr, r0, #1
 801f530:	f53f af71 	bmi.w	801f416 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f534:	4572      	cmp	r2, lr
 801f536:	f6ff af6e 	blt.w	801f416 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f53a:	f117 0e01 	adds.w	lr, r7, #1
 801f53e:	f53f af6a 	bmi.w	801f416 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f542:	45f4      	cmp	ip, lr
 801f544:	f6ff af67 	blt.w	801f416 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f548:	b212      	sxth	r2, r2
 801f54a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f54e:	fa0f f38c 	sxth.w	r3, ip
 801f552:	9200      	str	r2, [sp, #0]
 801f554:	4631      	mov	r1, r6
 801f556:	9a08      	ldr	r2, [sp, #32]
 801f558:	9301      	str	r3, [sp, #4]
 801f55a:	462b      	mov	r3, r5
 801f55c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801f560:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f562:	f7ff fdbf 	bl	801f0e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f566:	e756      	b.n	801f416 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f568:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f56a:	1426      	asrs	r6, r4, #16
 801f56c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f56e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f572:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f576:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f578:	1400      	asrs	r0, r0, #16
 801f57a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f57e:	fb02 6000 	mla	r0, r2, r0, r6
 801f582:	9e08      	ldr	r6, [sp, #32]
 801f584:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f588:	eb06 0c00 	add.w	ip, r6, r0
 801f58c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f590:	eb05 070e 	add.w	r7, r5, lr
 801f594:	2b00      	cmp	r3, #0
 801f596:	d064      	beq.n	801f662 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 801f598:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801f59c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f5a0:	442e      	add	r6, r5
 801f5a2:	2900      	cmp	r1, #0
 801f5a4:	d066      	beq.n	801f674 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 801f5a6:	eb0c 0002 	add.w	r0, ip, r2
 801f5aa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f5ae:	7840      	ldrb	r0, [r0, #1]
 801f5b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f5b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f5b8:	442a      	add	r2, r5
 801f5ba:	4428      	add	r0, r5
 801f5bc:	b29b      	uxth	r3, r3
 801f5be:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801f5c2:	b289      	uxth	r1, r1
 801f5c4:	f896 e000 	ldrb.w	lr, [r6]
 801f5c8:	f108 0803 	add.w	r8, r8, #3
 801f5cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f5d0:	fb03 f901 	mul.w	r9, r3, r1
 801f5d4:	011b      	lsls	r3, r3, #4
 801f5d6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f5da:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f5de:	eba3 0309 	sub.w	r3, r3, r9
 801f5e2:	b289      	uxth	r1, r1
 801f5e4:	b29b      	uxth	r3, r3
 801f5e6:	ebac 0c01 	sub.w	ip, ip, r1
 801f5ea:	fb03 fe0e 	mul.w	lr, r3, lr
 801f5ee:	fa1f fc8c 	uxth.w	ip, ip
 801f5f2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f5f6:	f892 b000 	ldrb.w	fp, [r2]
 801f5fa:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f5fe:	f890 b000 	ldrb.w	fp, [r0]
 801f602:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f606:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f60a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f60e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f612:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f616:	fb03 fe0e 	mul.w	lr, r3, lr
 801f61a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f61e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f622:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f626:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f62a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f62e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f632:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f636:	78b6      	ldrb	r6, [r6, #2]
 801f638:	78bf      	ldrb	r7, [r7, #2]
 801f63a:	4373      	muls	r3, r6
 801f63c:	7896      	ldrb	r6, [r2, #2]
 801f63e:	7882      	ldrb	r2, [r0, #2]
 801f640:	fb0c 3307 	mla	r3, ip, r7, r3
 801f644:	fb01 3306 	mla	r3, r1, r6, r3
 801f648:	fb09 3902 	mla	r9, r9, r2, r3
 801f64c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f64e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f650:	441c      	add	r4, r3
 801f652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f654:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f658:	4413      	add	r3, r2
 801f65a:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f65e:	9322      	str	r3, [sp, #136]	; 0x88
 801f660:	e70d      	b.n	801f47e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801f662:	b151      	cbz	r1, 801f67a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801f664:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f668:	4638      	mov	r0, r7
 801f66a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f66e:	442a      	add	r2, r5
 801f670:	463e      	mov	r6, r7
 801f672:	e7a3      	b.n	801f5bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f674:	4638      	mov	r0, r7
 801f676:	463a      	mov	r2, r7
 801f678:	e7a0      	b.n	801f5bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f67a:	4638      	mov	r0, r7
 801f67c:	463a      	mov	r2, r7
 801f67e:	e7f7      	b.n	801f670 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801f680:	b00d      	add	sp, #52	; 0x34
 801f682:	ecbd 8b0a 	vpop	{d8-d12}
 801f686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f68c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f68c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f690:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 801f694:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f698:	2d00      	cmp	r5, #0
 801f69a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f69e:	fb05 040e 	mla	r4, r5, lr, r0
 801f6a2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801f6a6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801f6aa:	eb02 0804 	add.w	r8, r2, r4
 801f6ae:	db40      	blt.n	801f732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 801f6b0:	45a9      	cmp	r9, r5
 801f6b2:	dd3e      	ble.n	801f732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 801f6b4:	2800      	cmp	r0, #0
 801f6b6:	db3a      	blt.n	801f72e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 801f6b8:	4586      	cmp	lr, r0
 801f6ba:	dd38      	ble.n	801f72e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 801f6bc:	5d12      	ldrb	r2, [r2, r4]
 801f6be:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f6c2:	1c42      	adds	r2, r0, #1
 801f6c4:	d438      	bmi.n	801f738 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 801f6c6:	4596      	cmp	lr, r2
 801f6c8:	dd36      	ble.n	801f738 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 801f6ca:	b3bf      	cbz	r7, 801f73c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 801f6cc:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f6d0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801f6d4:	3501      	adds	r5, #1
 801f6d6:	d435      	bmi.n	801f744 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 801f6d8:	45a9      	cmp	r9, r5
 801f6da:	dd33      	ble.n	801f744 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 801f6dc:	f1bc 0f00 	cmp.w	ip, #0
 801f6e0:	d033      	beq.n	801f74a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 801f6e2:	2800      	cmp	r0, #0
 801f6e4:	db2c      	blt.n	801f740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 801f6e6:	4586      	cmp	lr, r0
 801f6e8:	dd2a      	ble.n	801f740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 801f6ea:	f818 200e 	ldrb.w	r2, [r8, lr]
 801f6ee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f6f2:	3001      	adds	r0, #1
 801f6f4:	d42c      	bmi.n	801f750 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 801f6f6:	4586      	cmp	lr, r0
 801f6f8:	dd2a      	ble.n	801f750 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 801f6fa:	b35f      	cbz	r7, 801f754 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 801f6fc:	44c6      	add	lr, r8
 801f6fe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f702:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f706:	2f0f      	cmp	r7, #15
 801f708:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f70c:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 801f710:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f714:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f718:	d802      	bhi.n	801f720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 801f71a:	f1bc 0f0f 	cmp.w	ip, #15
 801f71e:	d91b      	bls.n	801f758 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 801f720:	4b77      	ldr	r3, [pc, #476]	; (801f900 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 801f722:	f240 1157 	movw	r1, #343	; 0x157
 801f726:	4a77      	ldr	r2, [pc, #476]	; (801f904 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 801f728:	4877      	ldr	r0, [pc, #476]	; (801f908 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 801f72a:	f005 fe93 	bl	8025454 <__assert_func>
 801f72e:	2600      	movs	r6, #0
 801f730:	e7c7      	b.n	801f6c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 801f732:	2400      	movs	r4, #0
 801f734:	4626      	mov	r6, r4
 801f736:	e7cd      	b.n	801f6d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801f738:	2400      	movs	r4, #0
 801f73a:	e7cb      	b.n	801f6d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801f73c:	463c      	mov	r4, r7
 801f73e:	e7c9      	b.n	801f6d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 801f740:	2500      	movs	r5, #0
 801f742:	e7d6      	b.n	801f6f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 801f744:	2200      	movs	r2, #0
 801f746:	4615      	mov	r5, r2
 801f748:	e7dd      	b.n	801f706 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801f74a:	4662      	mov	r2, ip
 801f74c:	4665      	mov	r5, ip
 801f74e:	e7da      	b.n	801f706 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801f750:	2200      	movs	r2, #0
 801f752:	e7d8      	b.n	801f706 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801f754:	463a      	mov	r2, r7
 801f756:	e7d6      	b.n	801f706 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 801f758:	b2bf      	uxth	r7, r7
 801f75a:	fa1f f08c 	uxth.w	r0, ip
 801f75e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 801f762:	fb00 fe07 	mul.w	lr, r0, r7
 801f766:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f76a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801f76e:	ebac 070e 	sub.w	r7, ip, lr
 801f772:	b280      	uxth	r0, r0
 801f774:	b2bf      	uxth	r7, r7
 801f776:	1a1b      	subs	r3, r3, r0
 801f778:	fb07 fc0a 	mul.w	ip, r7, sl
 801f77c:	b29b      	uxth	r3, r3
 801f77e:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f782:	9300      	str	r3, [sp, #0]
 801f784:	fb00 cc09 	mla	ip, r0, r9, ip
 801f788:	fb0e cc08 	mla	ip, lr, r8, ip
 801f78c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f790:	9301      	str	r3, [sp, #4]
 801f792:	2b00      	cmp	r3, #0
 801f794:	f000 80b0 	beq.w	801f8f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 801f798:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f79c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f7a0:	fb0b fc0c 	mul.w	ip, fp, ip
 801f7a4:	fb0b f606 	mul.w	r6, fp, r6
 801f7a8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f7ac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f7b0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f7b4:	44dc      	add	ip, fp
 801f7b6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f7ba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f7be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7c2:	fb0a fb0b 	mul.w	fp, sl, fp
 801f7c6:	fb0a fa04 	mul.w	sl, sl, r4
 801f7ca:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f7ce:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f7d2:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 801f7d6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f7da:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f7de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f7e2:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 801f7e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7ea:	0a36      	lsrs	r6, r6, #8
 801f7ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7f0:	44dc      	add	ip, fp
 801f7f2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f7f6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f7fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f7fe:	fb09 fb0b 	mul.w	fp, r9, fp
 801f802:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f806:	fb09 f905 	mul.w	r9, r9, r5
 801f80a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f80e:	ea4f 241b 	mov.w	r4, fp, lsr #8
 801f812:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f816:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801f81a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f81e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f822:	fb0c fc07 	mul.w	ip, ip, r7
 801f826:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801f82a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801f82e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f832:	445c      	add	r4, fp
 801f834:	fb08 f505 	mul.w	r5, r8, r5
 801f838:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f83c:	fb08 f802 	mul.w	r8, r8, r2
 801f840:	0a24      	lsrs	r4, r4, #8
 801f842:	0a2a      	lsrs	r2, r5, #8
 801f844:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801f848:	fb07 f70a 	mul.w	r7, r7, sl
 801f84c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f850:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f854:	4415      	add	r5, r2
 801f856:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f85a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f85e:	9a00      	ldr	r2, [sp, #0]
 801f860:	0a2d      	lsrs	r5, r5, #8
 801f862:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f866:	fb03 cc02 	mla	ip, r3, r2, ip
 801f86a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f86e:	fb02 7306 	mla	r3, r2, r6, r7
 801f872:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f876:	9a01      	ldr	r2, [sp, #4]
 801f878:	fb05 c50e 	mla	r5, r5, lr, ip
 801f87c:	fb0e 3e08 	mla	lr, lr, r8, r3
 801f880:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 801f884:	fb04 5400 	mla	r4, r4, r0, r5
 801f888:	fb00 e303 	mla	r3, r0, r3, lr
 801f88c:	0a24      	lsrs	r4, r4, #8
 801f88e:	0a1b      	lsrs	r3, r3, #8
 801f890:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f894:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f898:	431c      	orrs	r4, r3
 801f89a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f89e:	b29b      	uxth	r3, r3
 801f8a0:	b2e0      	uxtb	r0, r4
 801f8a2:	435a      	muls	r2, r3
 801f8a4:	fb10 f003 	smulbb	r0, r0, r3
 801f8a8:	1c55      	adds	r5, r2, #1
 801f8aa:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 801f8ae:	780a      	ldrb	r2, [r1, #0]
 801f8b0:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 801f8b4:	b2ed      	uxtb	r5, r5
 801f8b6:	fb02 0205 	mla	r2, r2, r5, r0
 801f8ba:	b292      	uxth	r2, r2
 801f8bc:	1c50      	adds	r0, r2, #1
 801f8be:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f8c2:	7848      	ldrb	r0, [r1, #1]
 801f8c4:	fb10 f005 	smulbb	r0, r0, r5
 801f8c8:	1212      	asrs	r2, r2, #8
 801f8ca:	700a      	strb	r2, [r1, #0]
 801f8cc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801f8d0:	0c24      	lsrs	r4, r4, #16
 801f8d2:	fb02 0203 	mla	r2, r2, r3, r0
 801f8d6:	b292      	uxth	r2, r2
 801f8d8:	1c50      	adds	r0, r2, #1
 801f8da:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f8de:	1212      	asrs	r2, r2, #8
 801f8e0:	704a      	strb	r2, [r1, #1]
 801f8e2:	788a      	ldrb	r2, [r1, #2]
 801f8e4:	fb12 f505 	smulbb	r5, r2, r5
 801f8e8:	fb04 5303 	mla	r3, r4, r3, r5
 801f8ec:	b29b      	uxth	r3, r3
 801f8ee:	1c5a      	adds	r2, r3, #1
 801f8f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f8f4:	121b      	asrs	r3, r3, #8
 801f8f6:	708b      	strb	r3, [r1, #2]
 801f8f8:	b003      	add	sp, #12
 801f8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8fe:	bf00      	nop
 801f900:	0802a10b 	.word	0x0802a10b
 801f904:	0802a673 	.word	0x0802a673
 801f908:	0802a1d4 	.word	0x0802a1d4

0801f90c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f910:	ed2d 8b08 	vpush	{d8-d11}
 801f914:	b09f      	sub	sp, #124	; 0x7c
 801f916:	eeb0 aa40 	vmov.f32	s20, s0
 801f91a:	eef0 9a60 	vmov.f32	s19, s1
 801f91e:	921b      	str	r2, [sp, #108]	; 0x6c
 801f920:	eeb0 9a41 	vmov.f32	s18, s2
 801f924:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801f926:	eeb0 8a62 	vmov.f32	s16, s5
 801f92a:	9309      	str	r3, [sp, #36]	; 0x24
 801f92c:	eef0 8a43 	vmov.f32	s17, s6
 801f930:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801f934:	eef0 ba44 	vmov.f32	s23, s8
 801f938:	901d      	str	r0, [sp, #116]	; 0x74
 801f93a:	eeb0 ba64 	vmov.f32	s22, s9
 801f93e:	931c      	str	r3, [sp, #112]	; 0x70
 801f940:	eef0 aa45 	vmov.f32	s21, s10
 801f944:	6850      	ldr	r0, [r2, #4]
 801f946:	9119      	str	r1, [sp, #100]	; 0x64
 801f948:	6812      	ldr	r2, [r2, #0]
 801f94a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801f94c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801f950:	fb00 1303 	mla	r3, r0, r3, r1
 801f954:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f958:	18d3      	adds	r3, r2, r3
 801f95a:	930c      	str	r3, [sp, #48]	; 0x30
 801f95c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f95e:	681b      	ldr	r3, [r3, #0]
 801f960:	9312      	str	r3, [sp, #72]	; 0x48
 801f962:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f964:	685e      	ldr	r6, [r3, #4]
 801f966:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f96a:	3604      	adds	r6, #4
 801f96c:	930d      	str	r3, [sp, #52]	; 0x34
 801f96e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f970:	2b00      	cmp	r3, #0
 801f972:	dc03      	bgt.n	801f97c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f976:	2b00      	cmp	r3, #0
 801f978:	f340 8378 	ble.w	802006c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801f97c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f97e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f982:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f986:	1e48      	subs	r0, r1, #1
 801f988:	1e57      	subs	r7, r2, #1
 801f98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	f340 818c 	ble.w	801fcaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 801f992:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801f994:	142b      	asrs	r3, r5, #16
 801f996:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f99a:	d406      	bmi.n	801f9aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f99c:	4584      	cmp	ip, r0
 801f99e:	da04      	bge.n	801f9aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	db02      	blt.n	801f9aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f9a4:	42bb      	cmp	r3, r7
 801f9a6:	f2c0 8181 	blt.w	801fcac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801f9aa:	f11c 0c01 	adds.w	ip, ip, #1
 801f9ae:	f100 816f 	bmi.w	801fc90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f9b2:	4561      	cmp	r1, ip
 801f9b4:	f2c0 816c 	blt.w	801fc90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f9b8:	3301      	adds	r3, #1
 801f9ba:	f100 8169 	bmi.w	801fc90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f9be:	429a      	cmp	r2, r3
 801f9c0:	f2c0 8166 	blt.w	801fc90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f9c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f9c8:	931a      	str	r3, [sp, #104]	; 0x68
 801f9ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	f340 818c 	ble.w	801fcea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801f9d2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f9d4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f9d8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f9dc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f9e0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801f9e2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f9e6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f9e8:	141b      	asrs	r3, r3, #16
 801f9ea:	f100 81d0 	bmi.w	801fd8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801f9ee:	f100 38ff 	add.w	r8, r0, #4294967295
 801f9f2:	4543      	cmp	r3, r8
 801f9f4:	f280 81cb 	bge.w	801fd8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801f9f8:	f1bc 0f00 	cmp.w	ip, #0
 801f9fc:	f2c0 81c7 	blt.w	801fd8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801fa00:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fa04:	45c4      	cmp	ip, r8
 801fa06:	f280 81c2 	bge.w	801fd8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801fa0a:	b200      	sxth	r0, r0
 801fa0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fa0e:	fb0c 3300 	mla	r3, ip, r0, r3
 801fa12:	eb04 0803 	add.w	r8, r4, r3
 801fa16:	5ce3      	ldrb	r3, [r4, r3]
 801fa18:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fa1c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fa20:	2a00      	cmp	r2, #0
 801fa22:	f000 81a9 	beq.w	801fd78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 801fa26:	f898 c001 	ldrb.w	ip, [r8, #1]
 801fa2a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801fa2e:	940e      	str	r4, [sp, #56]	; 0x38
 801fa30:	0e24      	lsrs	r4, r4, #24
 801fa32:	9415      	str	r4, [sp, #84]	; 0x54
 801fa34:	b179      	cbz	r1, 801fa56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fa36:	eb08 0c00 	add.w	ip, r8, r0
 801fa3a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fa3e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fa42:	900a      	str	r0, [sp, #40]	; 0x28
 801fa44:	0e00      	lsrs	r0, r0, #24
 801fa46:	9013      	str	r0, [sp, #76]	; 0x4c
 801fa48:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fa4c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fa50:	900f      	str	r0, [sp, #60]	; 0x3c
 801fa52:	0e00      	lsrs	r0, r0, #24
 801fa54:	9016      	str	r0, [sp, #88]	; 0x58
 801fa56:	b292      	uxth	r2, r2
 801fa58:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fa5a:	b289      	uxth	r1, r1
 801fa5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fa5e:	fb02 f901 	mul.w	r9, r2, r1
 801fa62:	0112      	lsls	r2, r2, #4
 801fa64:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fa68:	eba2 0809 	sub.w	r8, r2, r9
 801fa6c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fa70:	b289      	uxth	r1, r1
 801fa72:	fa1f f888 	uxth.w	r8, r8
 801fa76:	1a52      	subs	r2, r2, r1
 801fa78:	fb08 f000 	mul.w	r0, r8, r0
 801fa7c:	b292      	uxth	r2, r2
 801fa7e:	fb02 000e 	mla	r0, r2, lr, r0
 801fa82:	fb01 0004 	mla	r0, r1, r4, r0
 801fa86:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fa88:	fb09 0004 	mla	r0, r9, r4, r0
 801fa8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fa90:	2800      	cmp	r0, #0
 801fa92:	f000 80f2 	beq.w	801fc7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fa96:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fa9a:	d01b      	beq.n	801fad4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fa9c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801faa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801faa4:	fb0e fa0a 	mul.w	sl, lr, sl
 801faa8:	fb0e fe03 	mul.w	lr, lr, r3
 801faac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fab0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fab4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801fab8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fabc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fac0:	4453      	add	r3, sl
 801fac2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fac6:	0a1b      	lsrs	r3, r3, #8
 801fac8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801facc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fad0:	ea43 030c 	orr.w	r3, r3, ip
 801fad4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fad6:	2cff      	cmp	r4, #255	; 0xff
 801fad8:	d021      	beq.n	801fb1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801fada:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fadc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fae0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fae2:	fb04 fb0b 	mul.w	fp, r4, fp
 801fae6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fae8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801faec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801faee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801faf2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801faf6:	fb04 fa0a 	mul.w	sl, r4, sl
 801fafa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fafe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fb02:	44de      	add	lr, fp
 801fb04:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb18:	ea4e 040a 	orr.w	r4, lr, sl
 801fb1c:	940e      	str	r4, [sp, #56]	; 0x38
 801fb1e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fb20:	2cff      	cmp	r4, #255	; 0xff
 801fb22:	d021      	beq.n	801fb68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 801fb24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fb26:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fb2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fb2c:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fb32:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb36:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fb38:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fb40:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb48:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fb4c:	44de      	add	lr, fp
 801fb4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb62:	ea4e 040a 	orr.w	r4, lr, sl
 801fb66:	940a      	str	r4, [sp, #40]	; 0x28
 801fb68:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fb6a:	2cff      	cmp	r4, #255	; 0xff
 801fb6c:	d021      	beq.n	801fbb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801fb6e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fb70:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fb74:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fb76:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb7a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fb7c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb80:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fb82:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb86:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fb8a:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb8e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb92:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fb96:	44de      	add	lr, fp
 801fb98:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fba0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fba4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fba8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fbac:	ea4e 040a 	orr.w	r4, lr, sl
 801fbb0:	940f      	str	r4, [sp, #60]	; 0x3c
 801fbb2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fbb4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801fbb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fbbc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fbc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fbc2:	fb08 fc0c 	mul.w	ip, r8, ip
 801fbc6:	fb02 cc0e 	mla	ip, r2, lr, ip
 801fbca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fbce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fbd0:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fbd4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fbd8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fbda:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fbde:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801fbe2:	fb08 f80e 	mul.w	r8, r8, lr
 801fbe6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbea:	fb02 8303 	mla	r3, r2, r3, r8
 801fbee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fbf0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fbf4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fbf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fbfa:	fb01 330a 	mla	r3, r1, sl, r3
 801fbfe:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801fc02:	fb09 3901 	mla	r9, r9, r1, r3
 801fc06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fc08:	990d      	ldr	r1, [sp, #52]	; 0x34
 801fc0a:	4343      	muls	r3, r0
 801fc0c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fc10:	1c58      	adds	r0, r3, #1
 801fc12:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fc16:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fc1a:	ea4c 0c09 	orr.w	ip, ip, r9
 801fc1e:	783b      	ldrb	r3, [r7, #0]
 801fc20:	fa5f f28c 	uxtb.w	r2, ip
 801fc24:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fc28:	fb12 f201 	smulbb	r2, r2, r1
 801fc2c:	b2c0      	uxtb	r0, r0
 801fc2e:	fb03 2300 	mla	r3, r3, r0, r2
 801fc32:	b29b      	uxth	r3, r3
 801fc34:	1c5a      	adds	r2, r3, #1
 801fc36:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc3a:	787a      	ldrb	r2, [r7, #1]
 801fc3c:	fb12 f200 	smulbb	r2, r2, r0
 801fc40:	121b      	asrs	r3, r3, #8
 801fc42:	703b      	strb	r3, [r7, #0]
 801fc44:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fc48:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fc4c:	fb03 2301 	mla	r3, r3, r1, r2
 801fc50:	b29b      	uxth	r3, r3
 801fc52:	1c5a      	adds	r2, r3, #1
 801fc54:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc58:	121b      	asrs	r3, r3, #8
 801fc5a:	707b      	strb	r3, [r7, #1]
 801fc5c:	78bb      	ldrb	r3, [r7, #2]
 801fc5e:	fb13 f000 	smulbb	r0, r3, r0
 801fc62:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fc66:	fa1f fc8c 	uxth.w	ip, ip
 801fc6a:	f10c 0301 	add.w	r3, ip, #1
 801fc6e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fc72:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fc76:	f887 c002 	strb.w	ip, [r7, #2]
 801fc7a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801fc7c:	3703      	adds	r7, #3
 801fc7e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801fc80:	441a      	add	r2, r3
 801fc82:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801fc84:	441d      	add	r5, r3
 801fc86:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fc88:	9231      	str	r2, [sp, #196]	; 0xc4
 801fc8a:	3b01      	subs	r3, #1
 801fc8c:	931a      	str	r3, [sp, #104]	; 0x68
 801fc8e:	e69c      	b.n	801f9ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801fc90:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801fc92:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801fc94:	441c      	add	r4, r3
 801fc96:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801fc98:	441d      	add	r5, r3
 801fc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc9c:	9431      	str	r4, [sp, #196]	; 0xc4
 801fc9e:	3b01      	subs	r3, #1
 801fca0:	9309      	str	r3, [sp, #36]	; 0x24
 801fca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fca4:	3303      	adds	r3, #3
 801fca6:	930c      	str	r3, [sp, #48]	; 0x30
 801fca8:	e66f      	b.n	801f98a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fcaa:	d026      	beq.n	801fcfa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fcac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcae:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801fcb0:	3b01      	subs	r3, #1
 801fcb2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801fcb4:	fb00 4003 	mla	r0, r0, r3, r4
 801fcb8:	1400      	asrs	r0, r0, #16
 801fcba:	f53f ae83 	bmi.w	801f9c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fcbe:	3901      	subs	r1, #1
 801fcc0:	4288      	cmp	r0, r1
 801fcc2:	f6bf ae7f 	bge.w	801f9c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fcc6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801fcc8:	fb01 5303 	mla	r3, r1, r3, r5
 801fccc:	141b      	asrs	r3, r3, #16
 801fcce:	f53f ae79 	bmi.w	801f9c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fcd2:	3a01      	subs	r2, #1
 801fcd4:	4293      	cmp	r3, r2
 801fcd6:	f6bf ae75 	bge.w	801f9c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fcda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fcdc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801fce0:	f103 0e03 	add.w	lr, r3, #3
 801fce4:	f1bb 0f00 	cmp.w	fp, #0
 801fce8:	dc71      	bgt.n	801fdce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801fcea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fcf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fcf2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcf6:	4423      	add	r3, r4
 801fcf8:	930c      	str	r3, [sp, #48]	; 0x30
 801fcfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	f340 81b5 	ble.w	802006c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801fd02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fd06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fd08:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fd0c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fd10:	eef0 6a48 	vmov.f32	s13, s16
 801fd14:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fd18:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fd1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd20:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801fd24:	eef0 6a68 	vmov.f32	s13, s17
 801fd28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd2c:	ee16 5a90 	vmov	r5, s13
 801fd30:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fd34:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fd38:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fd3c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fd40:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fd44:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fd48:	ee18 2a10 	vmov	r2, s16
 801fd4c:	eeb0 8a47 	vmov.f32	s16, s14
 801fd50:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd54:	ee18 2a90 	vmov	r2, s17
 801fd58:	9333      	str	r3, [sp, #204]	; 0xcc
 801fd5a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fd5c:	eef0 8a67 	vmov.f32	s17, s15
 801fd60:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd64:	9334      	str	r3, [sp, #208]	; 0xd0
 801fd66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fd68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801fd6a:	3b01      	subs	r3, #1
 801fd6c:	9319      	str	r3, [sp, #100]	; 0x64
 801fd6e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fd70:	bf08      	it	eq
 801fd72:	4613      	moveq	r3, r2
 801fd74:	9309      	str	r3, [sp, #36]	; 0x24
 801fd76:	e5fa      	b.n	801f96e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fd78:	2900      	cmp	r1, #0
 801fd7a:	f43f ae6c 	beq.w	801fa56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fd7e:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fd82:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fd86:	900a      	str	r0, [sp, #40]	; 0x28
 801fd88:	0e00      	lsrs	r0, r0, #24
 801fd8a:	9013      	str	r0, [sp, #76]	; 0x4c
 801fd8c:	e663      	b.n	801fa56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fd8e:	f113 0801 	adds.w	r8, r3, #1
 801fd92:	f53f af72 	bmi.w	801fc7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fd96:	4540      	cmp	r0, r8
 801fd98:	f6ff af6f 	blt.w	801fc7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fd9c:	f11c 0801 	adds.w	r8, ip, #1
 801fda0:	f53f af6b 	bmi.w	801fc7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fda4:	45c6      	cmp	lr, r8
 801fda6:	f6ff af68 	blt.w	801fc7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fdaa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801fdac:	b200      	sxth	r0, r0
 801fdae:	9302      	str	r3, [sp, #8]
 801fdb0:	fa0f f38e 	sxth.w	r3, lr
 801fdb4:	9000      	str	r0, [sp, #0]
 801fdb6:	9301      	str	r3, [sp, #4]
 801fdb8:	4633      	mov	r3, r6
 801fdba:	981d      	ldr	r0, [sp, #116]	; 0x74
 801fdbc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801fdc0:	e9cd c203 	strd	ip, r2, [sp, #12]
 801fdc4:	4639      	mov	r1, r7
 801fdc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdc8:	f7ff fc60 	bl	801f68c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801fdcc:	e755      	b.n	801fc7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fdce:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801fdd0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fdd4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801fdd6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fdda:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801fddc:	1427      	asrs	r7, r4, #16
 801fdde:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fde0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fde4:	142b      	asrs	r3, r5, #16
 801fde6:	fb01 7303 	mla	r3, r1, r3, r7
 801fdea:	18e7      	adds	r7, r4, r3
 801fdec:	5ce3      	ldrb	r3, [r4, r3]
 801fdee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fdf2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fdf6:	2a00      	cmp	r2, #0
 801fdf8:	f000 812e 	beq.w	8020058 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 801fdfc:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fe00:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801fe04:	9410      	str	r4, [sp, #64]	; 0x40
 801fe06:	0e24      	lsrs	r4, r4, #24
 801fe08:	9417      	str	r4, [sp, #92]	; 0x5c
 801fe0a:	b170      	cbz	r0, 801fe2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801fe0c:	eb07 0801 	add.w	r8, r7, r1
 801fe10:	5c79      	ldrb	r1, [r7, r1]
 801fe12:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fe16:	910b      	str	r1, [sp, #44]	; 0x2c
 801fe18:	0e09      	lsrs	r1, r1, #24
 801fe1a:	9114      	str	r1, [sp, #80]	; 0x50
 801fe1c:	f898 1001 	ldrb.w	r1, [r8, #1]
 801fe20:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fe24:	9111      	str	r1, [sp, #68]	; 0x44
 801fe26:	0e09      	lsrs	r1, r1, #24
 801fe28:	9118      	str	r1, [sp, #96]	; 0x60
 801fe2a:	b292      	uxth	r2, r2
 801fe2c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801fe2e:	b280      	uxth	r0, r0
 801fe30:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fe32:	fb02 f900 	mul.w	r9, r2, r0
 801fe36:	0112      	lsls	r2, r2, #4
 801fe38:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fe3c:	eba2 0809 	sub.w	r8, r2, r9
 801fe40:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fe44:	b280      	uxth	r0, r0
 801fe46:	fa1f f888 	uxth.w	r8, r8
 801fe4a:	1a12      	subs	r2, r2, r0
 801fe4c:	fb08 f101 	mul.w	r1, r8, r1
 801fe50:	b292      	uxth	r2, r2
 801fe52:	fb02 110c 	mla	r1, r2, ip, r1
 801fe56:	fb00 1104 	mla	r1, r0, r4, r1
 801fe5a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fe5c:	fb09 1104 	mla	r1, r9, r4, r1
 801fe60:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fe64:	2900      	cmp	r1, #0
 801fe66:	f000 80ec 	beq.w	8020042 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801fe6a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fe6e:	d019      	beq.n	801fea4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801fe70:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fe74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe78:	fb0c fa0a 	mul.w	sl, ip, sl
 801fe7c:	fb0c fc03 	mul.w	ip, ip, r3
 801fe80:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fe84:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fe88:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801fe8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fe90:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fe94:	4453      	add	r3, sl
 801fe96:	0a3f      	lsrs	r7, r7, #8
 801fe98:	0a1b      	lsrs	r3, r3, #8
 801fe9a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fe9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fea2:	433b      	orrs	r3, r7
 801fea4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fea6:	2cff      	cmp	r4, #255	; 0xff
 801fea8:	d020      	beq.n	801feec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 801feaa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801feac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801feb0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801feb2:	4367      	muls	r7, r4
 801feb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801feb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801feba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801febe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fec0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fec4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fec8:	fb04 fa0a 	mul.w	sl, r4, sl
 801fecc:	44bc      	add	ip, r7
 801fece:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fed2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fed6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801feda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fede:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fee2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fee6:	ea4c 040a 	orr.w	r4, ip, sl
 801feea:	9410      	str	r4, [sp, #64]	; 0x40
 801feec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801feee:	2cff      	cmp	r4, #255	; 0xff
 801fef0:	d020      	beq.n	801ff34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 801fef2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fef4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fef8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fefa:	4367      	muls	r7, r4
 801fefc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fefe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ff06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ff08:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ff0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff10:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff14:	44bc      	add	ip, r7
 801ff16:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ff1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff1e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ff2e:	ea4c 040a 	orr.w	r4, ip, sl
 801ff32:	940b      	str	r4, [sp, #44]	; 0x2c
 801ff34:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801ff36:	2cff      	cmp	r4, #255	; 0xff
 801ff38:	d020      	beq.n	801ff7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801ff3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ff3c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ff40:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801ff42:	4367      	muls	r7, r4
 801ff44:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ff46:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff4a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ff4e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801ff50:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ff54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff58:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff5c:	44bc      	add	ip, r7
 801ff5e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ff62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff66:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ff76:	ea4c 040a 	orr.w	r4, ip, sl
 801ff7a:	9411      	str	r4, [sp, #68]	; 0x44
 801ff7c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ff7e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ff82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff86:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ff8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ff8c:	fb08 f707 	mul.w	r7, r8, r7
 801ff90:	fb02 770c 	mla	r7, r2, ip, r7
 801ff94:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ff98:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ff9a:	fb00 770c 	mla	r7, r0, ip, r7
 801ff9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ffa2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ffa4:	fb09 770c 	mla	r7, r9, ip, r7
 801ffa8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ffac:	fb08 f80c 	mul.w	r8, r8, ip
 801ffb0:	0a3f      	lsrs	r7, r7, #8
 801ffb2:	fb02 8303 	mla	r3, r2, r3, r8
 801ffb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ffb8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ffbc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ffc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ffc2:	fb00 330a 	mla	r3, r0, sl, r3
 801ffc6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ffca:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ffcc:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ffd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ffd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffd6:	434b      	muls	r3, r1
 801ffd8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ffdc:	1c59      	adds	r1, r3, #1
 801ffde:	ea47 070c 	orr.w	r7, r7, ip
 801ffe2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ffe6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ffea:	b2fa      	uxtb	r2, r7
 801ffec:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fff0:	fb12 f200 	smulbb	r2, r2, r0
 801fff4:	b2c9      	uxtb	r1, r1
 801fff6:	fb03 2301 	mla	r3, r3, r1, r2
 801fffa:	b29b      	uxth	r3, r3
 801fffc:	1c5a      	adds	r2, r3, #1
 801fffe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020002:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020006:	fb12 f201 	smulbb	r2, r2, r1
 802000a:	121b      	asrs	r3, r3, #8
 802000c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020010:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020014:	0c3f      	lsrs	r7, r7, #16
 8020016:	fb03 2300 	mla	r3, r3, r0, r2
 802001a:	b29b      	uxth	r3, r3
 802001c:	1c5a      	adds	r2, r3, #1
 802001e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020022:	121b      	asrs	r3, r3, #8
 8020024:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020028:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802002c:	fb13 f101 	smulbb	r1, r3, r1
 8020030:	fb07 1700 	mla	r7, r7, r0, r1
 8020034:	b2bf      	uxth	r7, r7
 8020036:	1c7b      	adds	r3, r7, #1
 8020038:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802003c:	123f      	asrs	r7, r7, #8
 802003e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020042:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020044:	f10e 0e03 	add.w	lr, lr, #3
 8020048:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802004a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802004e:	441a      	add	r2, r3
 8020050:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020052:	9231      	str	r2, [sp, #196]	; 0xc4
 8020054:	441d      	add	r5, r3
 8020056:	e645      	b.n	801fce4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8020058:	2800      	cmp	r0, #0
 802005a:	f43f aee6 	beq.w	801fe2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802005e:	5c79      	ldrb	r1, [r7, r1]
 8020060:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020064:	910b      	str	r1, [sp, #44]	; 0x2c
 8020066:	0e09      	lsrs	r1, r1, #24
 8020068:	9114      	str	r1, [sp, #80]	; 0x50
 802006a:	e6de      	b.n	801fe2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802006c:	b01f      	add	sp, #124	; 0x7c
 802006e:	ecbd 8b08 	vpop	{d8-d11}
 8020072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020078 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802007c:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 8020080:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020084:	2c00      	cmp	r4, #0
 8020086:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 802008a:	fb04 060c 	mla	r6, r4, ip, r0
 802008e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8020092:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8020096:	eb02 0e06 	add.w	lr, r2, r6
 802009a:	db3d      	blt.n	8020118 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 802009c:	45a0      	cmp	r8, r4
 802009e:	dd3b      	ble.n	8020118 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80200a0:	2800      	cmp	r0, #0
 80200a2:	db37      	blt.n	8020114 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80200a4:	4584      	cmp	ip, r0
 80200a6:	dd35      	ble.n	8020114 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80200a8:	5d92      	ldrb	r2, [r2, r6]
 80200aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80200ae:	1c46      	adds	r6, r0, #1
 80200b0:	d435      	bmi.n	802011e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80200b2:	45b4      	cmp	ip, r6
 80200b4:	dd33      	ble.n	802011e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80200b6:	b3a5      	cbz	r5, 8020122 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80200b8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80200bc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80200c0:	3401      	adds	r4, #1
 80200c2:	d432      	bmi.n	802012a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80200c4:	45a0      	cmp	r8, r4
 80200c6:	dd30      	ble.n	802012a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80200c8:	b397      	cbz	r7, 8020130 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 80200ca:	2800      	cmp	r0, #0
 80200cc:	db2b      	blt.n	8020126 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80200ce:	4584      	cmp	ip, r0
 80200d0:	dd29      	ble.n	8020126 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80200d2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80200d6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80200da:	3001      	adds	r0, #1
 80200dc:	d42b      	bmi.n	8020136 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80200de:	4584      	cmp	ip, r0
 80200e0:	dd29      	ble.n	8020136 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80200e2:	b355      	cbz	r5, 802013a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 80200e4:	44f4      	add	ip, lr
 80200e6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80200ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80200ee:	2d0f      	cmp	r5, #15
 80200f0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80200f4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80200f8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80200fc:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020100:	d801      	bhi.n	8020106 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8020102:	2f0f      	cmp	r7, #15
 8020104:	d91b      	bls.n	802013e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8020106:	4b7f      	ldr	r3, [pc, #508]	; (8020304 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8020108:	f240 1157 	movw	r1, #343	; 0x157
 802010c:	4a7e      	ldr	r2, [pc, #504]	; (8020308 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 802010e:	487f      	ldr	r0, [pc, #508]	; (802030c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8020110:	f005 f9a0 	bl	8025454 <__assert_func>
 8020114:	2200      	movs	r2, #0
 8020116:	e7ca      	b.n	80200ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8020118:	2600      	movs	r6, #0
 802011a:	4632      	mov	r2, r6
 802011c:	e7d0      	b.n	80200c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 802011e:	2600      	movs	r6, #0
 8020120:	e7ce      	b.n	80200c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020122:	462e      	mov	r6, r5
 8020124:	e7cc      	b.n	80200c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020126:	2400      	movs	r4, #0
 8020128:	e7d7      	b.n	80200da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 802012a:	2300      	movs	r3, #0
 802012c:	461c      	mov	r4, r3
 802012e:	e7de      	b.n	80200ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020130:	463b      	mov	r3, r7
 8020132:	463c      	mov	r4, r7
 8020134:	e7db      	b.n	80200ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020136:	2300      	movs	r3, #0
 8020138:	e7d9      	b.n	80200ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 802013a:	462b      	mov	r3, r5
 802013c:	e7d7      	b.n	80200ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 802013e:	b2a8      	uxth	r0, r5
 8020140:	b2bf      	uxth	r7, r7
 8020142:	fb07 fe00 	mul.w	lr, r7, r0
 8020146:	0100      	lsls	r0, r0, #4
 8020148:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802014c:	eba0 0c0e 	sub.w	ip, r0, lr
 8020150:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8020154:	b2bf      	uxth	r7, r7
 8020156:	fa1f fc8c 	uxth.w	ip, ip
 802015a:	1bc5      	subs	r5, r0, r7
 802015c:	fb0c f00a 	mul.w	r0, ip, sl
 8020160:	b2ad      	uxth	r5, r5
 8020162:	fb05 000b 	mla	r0, r5, fp, r0
 8020166:	fb07 0009 	mla	r0, r7, r9, r0
 802016a:	fb0e 0008 	mla	r0, lr, r8, r0
 802016e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020172:	9001      	str	r0, [sp, #4]
 8020174:	2800      	cmp	r0, #0
 8020176:	f000 80c2 	beq.w	80202fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 802017a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802017e:	d018      	beq.n	80201b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8020180:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8020184:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020188:	fb0b f000 	mul.w	r0, fp, r0
 802018c:	fb0b fb02 	mul.w	fp, fp, r2
 8020190:	0a02      	lsrs	r2, r0, #8
 8020192:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020196:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802019a:	4402      	add	r2, r0
 802019c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80201a0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80201a4:	0a12      	lsrs	r2, r2, #8
 80201a6:	0a00      	lsrs	r0, r0, #8
 80201a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80201ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80201b0:	4302      	orrs	r2, r0
 80201b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80201b6:	d01a      	beq.n	80201ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80201b8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80201bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80201c0:	fb0a f000 	mul.w	r0, sl, r0
 80201c4:	fb0a fa06 	mul.w	sl, sl, r6
 80201c8:	0a06      	lsrs	r6, r0, #8
 80201ca:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80201ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80201d2:	4406      	add	r6, r0
 80201d4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80201d8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80201dc:	0a36      	lsrs	r6, r6, #8
 80201de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80201e2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80201e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80201ea:	ea46 060a 	orr.w	r6, r6, sl
 80201ee:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80201f2:	d01b      	beq.n	802022c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 80201f4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80201f8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80201fc:	fb09 fa0a 	mul.w	sl, r9, sl
 8020200:	fb09 f004 	mul.w	r0, r9, r4
 8020204:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020208:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802020c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8020210:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020214:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020218:	4454      	add	r4, sl
 802021a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802021e:	0a24      	lsrs	r4, r4, #8
 8020220:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020224:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020228:	ea44 0409 	orr.w	r4, r4, r9
 802022c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020230:	d01b      	beq.n	802026a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8020232:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8020236:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802023a:	fb08 f909 	mul.w	r9, r8, r9
 802023e:	fb08 f003 	mul.w	r0, r8, r3
 8020242:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8020246:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802024a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802024e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020252:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8020256:	444b      	add	r3, r9
 8020258:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802025c:	0a1b      	lsrs	r3, r3, #8
 802025e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020262:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020266:	ea43 0308 	orr.w	r3, r3, r8
 802026a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802026e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020272:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8020276:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802027a:	fb0c f000 	mul.w	r0, ip, r0
 802027e:	fb0c f606 	mul.w	r6, ip, r6
 8020282:	fb05 0808 	mla	r8, r5, r8, r0
 8020286:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802028a:	fb05 6502 	mla	r5, r5, r2, r6
 802028e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020292:	fb07 8800 	mla	r8, r7, r0, r8
 8020296:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802029a:	fb07 5704 	mla	r7, r7, r4, r5
 802029e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80202a2:	fb0e 8000 	mla	r0, lr, r0, r8
 80202a6:	780a      	ldrb	r2, [r1, #0]
 80202a8:	fb0e 7e03 	mla	lr, lr, r3, r7
 80202ac:	9b01      	ldr	r3, [sp, #4]
 80202ae:	0a00      	lsrs	r0, r0, #8
 80202b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80202b4:	43db      	mvns	r3, r3
 80202b6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80202ba:	b2db      	uxtb	r3, r3
 80202bc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80202c0:	ea40 0e0e 	orr.w	lr, r0, lr
 80202c4:	fb02 f003 	mul.w	r0, r2, r3
 80202c8:	1c42      	adds	r2, r0, #1
 80202ca:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80202ce:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80202d2:	700a      	strb	r2, [r1, #0]
 80202d4:	784a      	ldrb	r2, [r1, #1]
 80202d6:	435a      	muls	r2, r3
 80202d8:	1c50      	adds	r0, r2, #1
 80202da:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80202de:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80202e2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80202e6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80202ea:	704a      	strb	r2, [r1, #1]
 80202ec:	788a      	ldrb	r2, [r1, #2]
 80202ee:	4353      	muls	r3, r2
 80202f0:	1c5a      	adds	r2, r3, #1
 80202f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80202f6:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80202fa:	f881 e002 	strb.w	lr, [r1, #2]
 80202fe:	b003      	add	sp, #12
 8020300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020304:	0802a10b 	.word	0x0802a10b
 8020308:	0802a673 	.word	0x0802a673
 802030c:	0802a1d4 	.word	0x0802a1d4

08020310 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020314:	ed2d 8b0a 	vpush	{d8-d12}
 8020318:	b09b      	sub	sp, #108	; 0x6c
 802031a:	eeb0 aa40 	vmov.f32	s20, s0
 802031e:	eef0 9a60 	vmov.f32	s19, s1
 8020322:	9218      	str	r2, [sp, #96]	; 0x60
 8020324:	eeb0 9a41 	vmov.f32	s18, s2
 8020328:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802032a:	eeb0 8a62 	vmov.f32	s16, s5
 802032e:	9019      	str	r0, [sp, #100]	; 0x64
 8020330:	eef0 8a43 	vmov.f32	s17, s6
 8020334:	6850      	ldr	r0, [r2, #4]
 8020336:	eeb0 ca44 	vmov.f32	s24, s8
 802033a:	9116      	str	r1, [sp, #88]	; 0x58
 802033c:	eef0 ba64 	vmov.f32	s23, s9
 8020340:	9307      	str	r3, [sp, #28]
 8020342:	eeb0 ba45 	vmov.f32	s22, s10
 8020346:	6812      	ldr	r2, [r2, #0]
 8020348:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802034c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 802034e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8020352:	fb00 1303 	mla	r3, r0, r3, r1
 8020356:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802035a:	18d3      	adds	r3, r2, r3
 802035c:	930a      	str	r3, [sp, #40]	; 0x28
 802035e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020360:	681b      	ldr	r3, [r3, #0]
 8020362:	930f      	str	r3, [sp, #60]	; 0x3c
 8020364:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020366:	685e      	ldr	r6, [r3, #4]
 8020368:	3604      	adds	r6, #4
 802036a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802036c:	2b00      	cmp	r3, #0
 802036e:	dc03      	bgt.n	8020378 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020370:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020372:	2b00      	cmp	r3, #0
 8020374:	f340 834f 	ble.w	8020a16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8020378:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802037a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802037e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020382:	1e48      	subs	r0, r1, #1
 8020384:	1e57      	subs	r7, r2, #1
 8020386:	9b07      	ldr	r3, [sp, #28]
 8020388:	2b00      	cmp	r3, #0
 802038a:	f340 8178 	ble.w	802067e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802038e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8020390:	142b      	asrs	r3, r5, #16
 8020392:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020396:	d406      	bmi.n	80203a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020398:	4584      	cmp	ip, r0
 802039a:	da04      	bge.n	80203a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802039c:	2b00      	cmp	r3, #0
 802039e:	db02      	blt.n	80203a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203a0:	42bb      	cmp	r3, r7
 80203a2:	f2c0 816d 	blt.w	8020680 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80203a6:	f11c 0c01 	adds.w	ip, ip, #1
 80203aa:	f100 815b 	bmi.w	8020664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80203ae:	4561      	cmp	r1, ip
 80203b0:	f2c0 8158 	blt.w	8020664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80203b4:	3301      	adds	r3, #1
 80203b6:	f100 8155 	bmi.w	8020664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80203ba:	429a      	cmp	r2, r3
 80203bc:	f2c0 8152 	blt.w	8020664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80203c0:	9b07      	ldr	r3, [sp, #28]
 80203c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80203c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80203c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	f340 8178 	ble.w	80206be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80203ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80203d0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80203d4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80203d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80203dc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80203de:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80203e2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80203e4:	141b      	asrs	r3, r3, #16
 80203e6:	f100 81ba 	bmi.w	802075e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80203ea:	f101 38ff 	add.w	r8, r1, #4294967295
 80203ee:	4543      	cmp	r3, r8
 80203f0:	f280 81b5 	bge.w	802075e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80203f4:	f1bc 0f00 	cmp.w	ip, #0
 80203f8:	f2c0 81b1 	blt.w	802075e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80203fc:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020400:	45c4      	cmp	ip, r8
 8020402:	f280 81ac 	bge.w	802075e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020406:	b209      	sxth	r1, r1
 8020408:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802040a:	fb0c 3301 	mla	r3, ip, r1, r3
 802040e:	eb04 0803 	add.w	r8, r4, r3
 8020412:	5ce3      	ldrb	r3, [r4, r3]
 8020414:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020418:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802041c:	2a00      	cmp	r2, #0
 802041e:	f000 8193 	beq.w	8020748 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8020422:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020426:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802042a:	940b      	str	r4, [sp, #44]	; 0x2c
 802042c:	0e24      	lsrs	r4, r4, #24
 802042e:	9412      	str	r4, [sp, #72]	; 0x48
 8020430:	b178      	cbz	r0, 8020452 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020432:	eb08 0c01 	add.w	ip, r8, r1
 8020436:	f818 1001 	ldrb.w	r1, [r8, r1]
 802043a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802043e:	9108      	str	r1, [sp, #32]
 8020440:	0e09      	lsrs	r1, r1, #24
 8020442:	9110      	str	r1, [sp, #64]	; 0x40
 8020444:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020448:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802044c:	910c      	str	r1, [sp, #48]	; 0x30
 802044e:	0e09      	lsrs	r1, r1, #24
 8020450:	9113      	str	r1, [sp, #76]	; 0x4c
 8020452:	b292      	uxth	r2, r2
 8020454:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020456:	b280      	uxth	r0, r0
 8020458:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802045a:	fb02 f900 	mul.w	r9, r2, r0
 802045e:	0112      	lsls	r2, r2, #4
 8020460:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020464:	eba2 0809 	sub.w	r8, r2, r9
 8020468:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802046c:	b280      	uxth	r0, r0
 802046e:	fa1f f888 	uxth.w	r8, r8
 8020472:	1a12      	subs	r2, r2, r0
 8020474:	fb08 f101 	mul.w	r1, r8, r1
 8020478:	b292      	uxth	r2, r2
 802047a:	fb02 110e 	mla	r1, r2, lr, r1
 802047e:	fb00 1104 	mla	r1, r0, r4, r1
 8020482:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020484:	fb09 1104 	mla	r1, r9, r4, r1
 8020488:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802048c:	2900      	cmp	r1, #0
 802048e:	f000 80de 	beq.w	802064e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020492:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020496:	d01b      	beq.n	80204d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8020498:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802049c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204a0:	fb0e fa0a 	mul.w	sl, lr, sl
 80204a4:	fb0e fe03 	mul.w	lr, lr, r3
 80204a8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80204ac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80204b0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80204b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80204b8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80204bc:	4453      	add	r3, sl
 80204be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204c2:	0a1b      	lsrs	r3, r3, #8
 80204c4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80204c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80204cc:	ea43 030c 	orr.w	r3, r3, ip
 80204d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80204d2:	2cff      	cmp	r4, #255	; 0xff
 80204d4:	d021      	beq.n	802051a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80204d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80204d8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80204dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80204de:	fb04 fb0b 	mul.w	fp, r4, fp
 80204e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80204e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80204e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80204ea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80204ee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80204f2:	fb04 fa0a 	mul.w	sl, r4, sl
 80204f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204fa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80204fe:	44de      	add	lr, fp
 8020500:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020504:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020508:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802050c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020510:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020514:	ea4e 040a 	orr.w	r4, lr, sl
 8020518:	940b      	str	r4, [sp, #44]	; 0x2c
 802051a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802051c:	2cff      	cmp	r4, #255	; 0xff
 802051e:	d021      	beq.n	8020564 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8020520:	9c08      	ldr	r4, [sp, #32]
 8020522:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020526:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020528:	fb04 fb0b 	mul.w	fp, r4, fp
 802052c:	9c08      	ldr	r4, [sp, #32]
 802052e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020532:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020534:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020538:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802053c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020540:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020544:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020548:	44de      	add	lr, fp
 802054a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802054e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020552:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020556:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802055a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802055e:	ea4e 040a 	orr.w	r4, lr, sl
 8020562:	9408      	str	r4, [sp, #32]
 8020564:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020566:	2cff      	cmp	r4, #255	; 0xff
 8020568:	d021      	beq.n	80205ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802056a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802056c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020570:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020572:	fb04 fb0b 	mul.w	fp, r4, fp
 8020576:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020578:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802057c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802057e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020582:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020586:	fb04 fa0a 	mul.w	sl, r4, sl
 802058a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802058e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020592:	44de      	add	lr, fp
 8020594:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020598:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802059c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80205a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80205a8:	ea4e 040a 	orr.w	r4, lr, sl
 80205ac:	940c      	str	r4, [sp, #48]	; 0x30
 80205ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80205b0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80205b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80205b8:	43c9      	mvns	r1, r1
 80205ba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80205be:	9c08      	ldr	r4, [sp, #32]
 80205c0:	b2c9      	uxtb	r1, r1
 80205c2:	fb08 fc0c 	mul.w	ip, r8, ip
 80205c6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80205ca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80205ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80205d0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80205d4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80205d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80205da:	fb09 cc0e 	mla	ip, r9, lr, ip
 80205de:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80205e2:	fb08 f80e 	mul.w	r8, r8, lr
 80205e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205ea:	fb02 8303 	mla	r3, r2, r3, r8
 80205ee:	9a08      	ldr	r2, [sp, #32]
 80205f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205f4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80205f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80205fa:	fb00 330a 	mla	r3, r0, sl, r3
 80205fe:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020602:	fb09 3900 	mla	r9, r9, r0, r3
 8020606:	783b      	ldrb	r3, [r7, #0]
 8020608:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802060c:	fb03 f201 	mul.w	r2, r3, r1
 8020610:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020614:	1c53      	adds	r3, r2, #1
 8020616:	ea4c 0c09 	orr.w	ip, ip, r9
 802061a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802061e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020622:	703b      	strb	r3, [r7, #0]
 8020624:	787b      	ldrb	r3, [r7, #1]
 8020626:	434b      	muls	r3, r1
 8020628:	1c5a      	adds	r2, r3, #1
 802062a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802062e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020632:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020636:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802063a:	707b      	strb	r3, [r7, #1]
 802063c:	78bb      	ldrb	r3, [r7, #2]
 802063e:	4359      	muls	r1, r3
 8020640:	1c4b      	adds	r3, r1, #1
 8020642:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020646:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802064a:	f887 c002 	strb.w	ip, [r7, #2]
 802064e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020650:	3703      	adds	r7, #3
 8020652:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020654:	441a      	add	r2, r3
 8020656:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020658:	441d      	add	r5, r3
 802065a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802065c:	922f      	str	r2, [sp, #188]	; 0xbc
 802065e:	3b01      	subs	r3, #1
 8020660:	9317      	str	r3, [sp, #92]	; 0x5c
 8020662:	e6b0      	b.n	80203c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020664:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020666:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8020668:	441c      	add	r4, r3
 802066a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802066c:	441d      	add	r5, r3
 802066e:	9b07      	ldr	r3, [sp, #28]
 8020670:	942f      	str	r4, [sp, #188]	; 0xbc
 8020672:	3b01      	subs	r3, #1
 8020674:	9307      	str	r3, [sp, #28]
 8020676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020678:	3303      	adds	r3, #3
 802067a:	930a      	str	r3, [sp, #40]	; 0x28
 802067c:	e683      	b.n	8020386 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802067e:	d026      	beq.n	80206ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8020680:	9b07      	ldr	r3, [sp, #28]
 8020682:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8020684:	3b01      	subs	r3, #1
 8020686:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8020688:	fb00 4003 	mla	r0, r0, r3, r4
 802068c:	1400      	asrs	r0, r0, #16
 802068e:	f53f ae97 	bmi.w	80203c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020692:	3901      	subs	r1, #1
 8020694:	4288      	cmp	r0, r1
 8020696:	f6bf ae93 	bge.w	80203c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802069a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 802069c:	fb01 5303 	mla	r3, r1, r3, r5
 80206a0:	141b      	asrs	r3, r3, #16
 80206a2:	f53f ae8d 	bmi.w	80203c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80206a6:	3a01      	subs	r2, #1
 80206a8:	4293      	cmp	r3, r2
 80206aa:	f6bf ae89 	bge.w	80203c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80206ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206b0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80206b4:	f103 0e03 	add.w	lr, r3, #3
 80206b8:	f1bb 0f00 	cmp.w	fp, #0
 80206bc:	dc6d      	bgt.n	802079a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80206be:	9b07      	ldr	r3, [sp, #28]
 80206c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80206c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80206ca:	4423      	add	r3, r4
 80206cc:	930a      	str	r3, [sp, #40]	; 0x28
 80206ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	f340 81a0 	ble.w	8020a16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80206d6:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80206da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80206dc:	ee79 9aab 	vadd.f32	s19, s19, s23
 80206e0:	eef0 6a48 	vmov.f32	s13, s16
 80206e4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80206e8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80206ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206f0:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 80206f4:	eef0 6a68 	vmov.f32	s13, s17
 80206f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206fc:	ee16 5a90 	vmov	r5, s13
 8020700:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020704:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020708:	ee37 8a48 	vsub.f32	s16, s14, s16
 802070c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020710:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020714:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020718:	ee18 2a10 	vmov	r2, s16
 802071c:	eeb0 8a47 	vmov.f32	s16, s14
 8020720:	fb92 f3f3 	sdiv	r3, r2, r3
 8020724:	ee18 2a90 	vmov	r2, s17
 8020728:	9331      	str	r3, [sp, #196]	; 0xc4
 802072a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802072c:	eef0 8a67 	vmov.f32	s17, s15
 8020730:	fb92 f3f3 	sdiv	r3, r2, r3
 8020734:	9332      	str	r3, [sp, #200]	; 0xc8
 8020736:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020738:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802073a:	3b01      	subs	r3, #1
 802073c:	9316      	str	r3, [sp, #88]	; 0x58
 802073e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020740:	bf08      	it	eq
 8020742:	4613      	moveq	r3, r2
 8020744:	9307      	str	r3, [sp, #28]
 8020746:	e610      	b.n	802036a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020748:	2800      	cmp	r0, #0
 802074a:	f43f ae82 	beq.w	8020452 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802074e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020752:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020756:	9108      	str	r1, [sp, #32]
 8020758:	0e09      	lsrs	r1, r1, #24
 802075a:	9110      	str	r1, [sp, #64]	; 0x40
 802075c:	e679      	b.n	8020452 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802075e:	f113 0801 	adds.w	r8, r3, #1
 8020762:	f53f af74 	bmi.w	802064e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020766:	4541      	cmp	r1, r8
 8020768:	f6ff af71 	blt.w	802064e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802076c:	f11c 0801 	adds.w	r8, ip, #1
 8020770:	f53f af6d 	bmi.w	802064e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020774:	45c6      	cmp	lr, r8
 8020776:	f6ff af6a 	blt.w	802064e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802077a:	b209      	sxth	r1, r1
 802077c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020780:	fa0f f38e 	sxth.w	r3, lr
 8020784:	9100      	str	r1, [sp, #0]
 8020786:	4639      	mov	r1, r7
 8020788:	9301      	str	r3, [sp, #4]
 802078a:	4633      	mov	r3, r6
 802078c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020792:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020794:	f7ff fc70 	bl	8020078 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020798:	e759      	b.n	802064e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802079a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802079c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80207a0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80207a2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80207a6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80207a8:	1427      	asrs	r7, r4, #16
 80207aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80207ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207b0:	142b      	asrs	r3, r5, #16
 80207b2:	fb01 7303 	mla	r3, r1, r3, r7
 80207b6:	18e7      	adds	r7, r4, r3
 80207b8:	5ce3      	ldrb	r3, [r4, r3]
 80207ba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80207be:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80207c2:	2a00      	cmp	r2, #0
 80207c4:	f000 811d 	beq.w	8020a02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80207c8:	f897 8001 	ldrb.w	r8, [r7, #1]
 80207cc:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80207d0:	940d      	str	r4, [sp, #52]	; 0x34
 80207d2:	0e24      	lsrs	r4, r4, #24
 80207d4:	9414      	str	r4, [sp, #80]	; 0x50
 80207d6:	b170      	cbz	r0, 80207f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80207d8:	eb07 0801 	add.w	r8, r7, r1
 80207dc:	5c79      	ldrb	r1, [r7, r1]
 80207de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80207e2:	9109      	str	r1, [sp, #36]	; 0x24
 80207e4:	0e09      	lsrs	r1, r1, #24
 80207e6:	9111      	str	r1, [sp, #68]	; 0x44
 80207e8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80207ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80207f0:	910e      	str	r1, [sp, #56]	; 0x38
 80207f2:	0e09      	lsrs	r1, r1, #24
 80207f4:	9115      	str	r1, [sp, #84]	; 0x54
 80207f6:	b292      	uxth	r2, r2
 80207f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80207fa:	b280      	uxth	r0, r0
 80207fc:	fb02 f900 	mul.w	r9, r2, r0
 8020800:	0112      	lsls	r2, r2, #4
 8020802:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020806:	eba2 0809 	sub.w	r8, r2, r9
 802080a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802080e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020810:	b280      	uxth	r0, r0
 8020812:	fa1f f888 	uxth.w	r8, r8
 8020816:	1a09      	subs	r1, r1, r0
 8020818:	fb08 f202 	mul.w	r2, r8, r2
 802081c:	b289      	uxth	r1, r1
 802081e:	fb01 220c 	mla	r2, r1, ip, r2
 8020822:	fb00 2204 	mla	r2, r0, r4, r2
 8020826:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020828:	fb09 2204 	mla	r2, r9, r4, r2
 802082c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020830:	2a00      	cmp	r2, #0
 8020832:	f000 80db 	beq.w	80209ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8020836:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802083a:	d019      	beq.n	8020870 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 802083c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020840:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020844:	fb0c fa0a 	mul.w	sl, ip, sl
 8020848:	fb0c fc03 	mul.w	ip, ip, r3
 802084c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020850:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020854:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020858:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802085c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020860:	4453      	add	r3, sl
 8020862:	0a3f      	lsrs	r7, r7, #8
 8020864:	0a1b      	lsrs	r3, r3, #8
 8020866:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802086a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802086e:	433b      	orrs	r3, r7
 8020870:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020872:	2cff      	cmp	r4, #255	; 0xff
 8020874:	d020      	beq.n	80208b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8020876:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020878:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802087c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802087e:	4367      	muls	r7, r4
 8020880:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020882:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020886:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802088a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802088c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020890:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020894:	fb04 fa0a 	mul.w	sl, r4, sl
 8020898:	44bc      	add	ip, r7
 802089a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802089e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208a2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80208a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208b2:	ea4c 040a 	orr.w	r4, ip, sl
 80208b6:	940d      	str	r4, [sp, #52]	; 0x34
 80208b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80208ba:	2cff      	cmp	r4, #255	; 0xff
 80208bc:	d020      	beq.n	8020900 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 80208be:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80208c0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80208c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80208c6:	4367      	muls	r7, r4
 80208c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80208ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80208ce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80208d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80208d4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80208d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80208e0:	44bc      	add	ip, r7
 80208e2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80208e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80208ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208fa:	ea4c 040a 	orr.w	r4, ip, sl
 80208fe:	9409      	str	r4, [sp, #36]	; 0x24
 8020900:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020902:	2cff      	cmp	r4, #255	; 0xff
 8020904:	d020      	beq.n	8020948 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8020906:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020908:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802090c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802090e:	4367      	muls	r7, r4
 8020910:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020912:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020916:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802091a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802091c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020920:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020924:	fb04 fa0a 	mul.w	sl, r4, sl
 8020928:	44bc      	add	ip, r7
 802092a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802092e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020932:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020936:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802093a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802093e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020942:	ea4c 040a 	orr.w	r4, ip, sl
 8020946:	940e      	str	r4, [sp, #56]	; 0x38
 8020948:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802094a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802094e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020952:	43d2      	mvns	r2, r2
 8020954:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020958:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802095a:	b2d2      	uxtb	r2, r2
 802095c:	fb08 f707 	mul.w	r7, r8, r7
 8020960:	fb01 770c 	mla	r7, r1, ip, r7
 8020964:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020968:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802096a:	fb00 770c 	mla	r7, r0, ip, r7
 802096e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020972:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020974:	fb09 770c 	mla	r7, r9, ip, r7
 8020978:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802097c:	fb08 f80c 	mul.w	r8, r8, ip
 8020980:	0a3f      	lsrs	r7, r7, #8
 8020982:	fb01 8303 	mla	r3, r1, r3, r8
 8020986:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020988:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802098c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020990:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020992:	fb00 330a 	mla	r3, r0, sl, r3
 8020996:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802099a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802099e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80209a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209a6:	fb03 f102 	mul.w	r1, r3, r2
 80209aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80209ae:	1c4b      	adds	r3, r1, #1
 80209b0:	ea47 070c 	orr.w	r7, r7, ip
 80209b4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80209b8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80209bc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80209c0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80209c4:	4353      	muls	r3, r2
 80209c6:	1c59      	adds	r1, r3, #1
 80209c8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80209cc:	0a3b      	lsrs	r3, r7, #8
 80209ce:	0c3f      	lsrs	r7, r7, #16
 80209d0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80209d4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80209d8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80209dc:	435a      	muls	r2, r3
 80209de:	1c53      	adds	r3, r2, #1
 80209e0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80209e4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80209e8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80209ec:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80209ee:	f10e 0e03 	add.w	lr, lr, #3
 80209f2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80209f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80209f8:	441a      	add	r2, r3
 80209fa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80209fc:	922f      	str	r2, [sp, #188]	; 0xbc
 80209fe:	441d      	add	r5, r3
 8020a00:	e65a      	b.n	80206b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8020a02:	2800      	cmp	r0, #0
 8020a04:	f43f aef7 	beq.w	80207f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8020a08:	5c79      	ldrb	r1, [r7, r1]
 8020a0a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020a0e:	9109      	str	r1, [sp, #36]	; 0x24
 8020a10:	0e09      	lsrs	r1, r1, #24
 8020a12:	9111      	str	r1, [sp, #68]	; 0x44
 8020a14:	e6ef      	b.n	80207f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8020a16:	b01b      	add	sp, #108	; 0x6c
 8020a18:	ecbd 8b0a 	vpop	{d8-d12}
 8020a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a24:	b08d      	sub	sp, #52	; 0x34
 8020a26:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8020a2a:	9103      	str	r1, [sp, #12]
 8020a2c:	fb07 5803 	mla	r8, r7, r3, r5
 8020a30:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8020a34:	9803      	ldr	r0, [sp, #12]
 8020a36:	2f00      	cmp	r7, #0
 8020a38:	910b      	str	r1, [sp, #44]	; 0x2c
 8020a3a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020a3e:	9903      	ldr	r1, [sp, #12]
 8020a40:	9c03      	ldr	r4, [sp, #12]
 8020a42:	eb02 0608 	add.w	r6, r2, r8
 8020a46:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8020a4a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8020a4e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8020a52:	7809      	ldrb	r1, [r1, #0]
 8020a54:	7840      	ldrb	r0, [r0, #1]
 8020a56:	78a4      	ldrb	r4, [r4, #2]
 8020a58:	db51      	blt.n	8020afe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8020a5a:	45be      	cmp	lr, r7
 8020a5c:	dd4f      	ble.n	8020afe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8020a5e:	2d00      	cmp	r5, #0
 8020a60:	db49      	blt.n	8020af6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020a62:	42ab      	cmp	r3, r5
 8020a64:	dd47      	ble.n	8020af6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020a66:	f812 2008 	ldrb.w	r2, [r2, r8]
 8020a6a:	9204      	str	r2, [sp, #16]
 8020a6c:	7872      	ldrb	r2, [r6, #1]
 8020a6e:	9205      	str	r2, [sp, #20]
 8020a70:	78b2      	ldrb	r2, [r6, #2]
 8020a72:	9206      	str	r2, [sp, #24]
 8020a74:	1c6a      	adds	r2, r5, #1
 8020a76:	d449      	bmi.n	8020b0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020a78:	4293      	cmp	r3, r2
 8020a7a:	dd47      	ble.n	8020b0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020a7c:	f1bc 0f00 	cmp.w	ip, #0
 8020a80:	d044      	beq.n	8020b0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020a82:	7972      	ldrb	r2, [r6, #5]
 8020a84:	f896 b003 	ldrb.w	fp, [r6, #3]
 8020a88:	f896 a004 	ldrb.w	sl, [r6, #4]
 8020a8c:	9201      	str	r2, [sp, #4]
 8020a8e:	3701      	adds	r7, #1
 8020a90:	d444      	bmi.n	8020b1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020a92:	45be      	cmp	lr, r7
 8020a94:	dd42      	ble.n	8020b1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020a96:	f1b9 0f00 	cmp.w	r9, #0
 8020a9a:	f000 80c1 	beq.w	8020c20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8020a9e:	2d00      	cmp	r5, #0
 8020aa0:	db38      	blt.n	8020b14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020aa2:	42ab      	cmp	r3, r5
 8020aa4:	dd36      	ble.n	8020b14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020aa6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020aaa:	f816 8002 	ldrb.w	r8, [r6, r2]
 8020aae:	2203      	movs	r2, #3
 8020ab0:	fb03 6702 	mla	r7, r3, r2, r6
 8020ab4:	fb03 6202 	mla	r2, r3, r2, r6
 8020ab8:	787f      	ldrb	r7, [r7, #1]
 8020aba:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020abe:	9702      	str	r7, [sp, #8]
 8020ac0:	3501      	adds	r5, #1
 8020ac2:	d432      	bmi.n	8020b2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020ac4:	42ab      	cmp	r3, r5
 8020ac6:	dd30      	ble.n	8020b2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020ac8:	f1bc 0f00 	cmp.w	ip, #0
 8020acc:	d031      	beq.n	8020b32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8020ace:	2703      	movs	r7, #3
 8020ad0:	fb13 7207 	smlabb	r2, r3, r7, r7
 8020ad4:	5cb5      	ldrb	r5, [r6, r2]
 8020ad6:	fb03 6207 	mla	r2, r3, r7, r6
 8020ada:	fb03 6307 	mla	r3, r3, r7, r6
 8020ade:	7912      	ldrb	r2, [r2, #4]
 8020ae0:	795e      	ldrb	r6, [r3, #5]
 8020ae2:	f1bc 0f0f 	cmp.w	ip, #15
 8020ae6:	d927      	bls.n	8020b38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8020ae8:	4b53      	ldr	r3, [pc, #332]	; (8020c38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8020aea:	f240 1157 	movw	r1, #343	; 0x157
 8020aee:	4a53      	ldr	r2, [pc, #332]	; (8020c3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8020af0:	4853      	ldr	r0, [pc, #332]	; (8020c40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8020af2:	f004 fcaf 	bl	8025454 <__assert_func>
 8020af6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020afa:	9104      	str	r1, [sp, #16]
 8020afc:	e7ba      	b.n	8020a74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8020afe:	9401      	str	r4, [sp, #4]
 8020b00:	4682      	mov	sl, r0
 8020b02:	468b      	mov	fp, r1
 8020b04:	9104      	str	r1, [sp, #16]
 8020b06:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020b0a:	e7c0      	b.n	8020a8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020b0c:	9401      	str	r4, [sp, #4]
 8020b0e:	4682      	mov	sl, r0
 8020b10:	468b      	mov	fp, r1
 8020b12:	e7bc      	b.n	8020a8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020b14:	46a6      	mov	lr, r4
 8020b16:	9002      	str	r0, [sp, #8]
 8020b18:	4688      	mov	r8, r1
 8020b1a:	e7d1      	b.n	8020ac0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8020b1c:	4626      	mov	r6, r4
 8020b1e:	4602      	mov	r2, r0
 8020b20:	460d      	mov	r5, r1
 8020b22:	46a6      	mov	lr, r4
 8020b24:	9002      	str	r0, [sp, #8]
 8020b26:	4688      	mov	r8, r1
 8020b28:	e7db      	b.n	8020ae2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8020b2a:	4626      	mov	r6, r4
 8020b2c:	4602      	mov	r2, r0
 8020b2e:	460d      	mov	r5, r1
 8020b30:	e7d7      	b.n	8020ae2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8020b32:	4626      	mov	r6, r4
 8020b34:	4602      	mov	r2, r0
 8020b36:	460d      	mov	r5, r1
 8020b38:	f1b9 0f0f 	cmp.w	r9, #15
 8020b3c:	d8d4      	bhi.n	8020ae8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020b3e:	fa1f f38c 	uxth.w	r3, ip
 8020b42:	fa1f fc89 	uxth.w	ip, r9
 8020b46:	fb03 f70c 	mul.w	r7, r3, ip
 8020b4a:	011b      	lsls	r3, r3, #4
 8020b4c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020b50:	9707      	str	r7, [sp, #28]
 8020b52:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020b56:	fa1f fc8c 	uxth.w	ip, ip
 8020b5a:	eba7 070c 	sub.w	r7, r7, ip
 8020b5e:	b2bf      	uxth	r7, r7
 8020b60:	9709      	str	r7, [sp, #36]	; 0x24
 8020b62:	9f07      	ldr	r7, [sp, #28]
 8020b64:	1bdb      	subs	r3, r3, r7
 8020b66:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8020b6a:	b29b      	uxth	r3, r3
 8020b6c:	9708      	str	r7, [sp, #32]
 8020b6e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020b70:	930a      	str	r3, [sp, #40]	; 0x28
 8020b72:	ea6f 0907 	mvn.w	r9, r7
 8020b76:	fb03 fb0b 	mul.w	fp, r3, fp
 8020b7a:	9f04      	ldr	r7, [sp, #16]
 8020b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b7e:	fa5f f989 	uxtb.w	r9, r9
 8020b82:	fb03 bb07 	mla	fp, r3, r7, fp
 8020b86:	9f07      	ldr	r7, [sp, #28]
 8020b88:	fb11 f109 	smulbb	r1, r1, r9
 8020b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b8e:	fb0c b808 	mla	r8, ip, r8, fp
 8020b92:	fb10 f009 	smulbb	r0, r0, r9
 8020b96:	fb14 f409 	smulbb	r4, r4, r9
 8020b9a:	fb07 8805 	mla	r8, r7, r5, r8
 8020b9e:	9d08      	ldr	r5, [sp, #32]
 8020ba0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020ba2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020ba6:	fb08 1805 	mla	r8, r8, r5, r1
 8020baa:	9d05      	ldr	r5, [sp, #20]
 8020bac:	fa1f f888 	uxth.w	r8, r8
 8020bb0:	f108 0101 	add.w	r1, r8, #1
 8020bb4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8020bb8:	9903      	ldr	r1, [sp, #12]
 8020bba:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020bbe:	f881 8000 	strb.w	r8, [r1]
 8020bc2:	fb03 f10a 	mul.w	r1, r3, sl
 8020bc6:	fb07 1105 	mla	r1, r7, r5, r1
 8020bca:	9d02      	ldr	r5, [sp, #8]
 8020bcc:	fb0c 1105 	mla	r1, ip, r5, r1
 8020bd0:	9d07      	ldr	r5, [sp, #28]
 8020bd2:	fb05 1102 	mla	r1, r5, r2, r1
 8020bd6:	9a08      	ldr	r2, [sp, #32]
 8020bd8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020bdc:	fb01 0102 	mla	r1, r1, r2, r0
 8020be0:	9a03      	ldr	r2, [sp, #12]
 8020be2:	b289      	uxth	r1, r1
 8020be4:	1c48      	adds	r0, r1, #1
 8020be6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020bea:	1209      	asrs	r1, r1, #8
 8020bec:	7051      	strb	r1, [r2, #1]
 8020bee:	9a01      	ldr	r2, [sp, #4]
 8020bf0:	4353      	muls	r3, r2
 8020bf2:	9a06      	ldr	r2, [sp, #24]
 8020bf4:	fb07 3702 	mla	r7, r7, r2, r3
 8020bf8:	9b08      	ldr	r3, [sp, #32]
 8020bfa:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8020bfe:	fb05 c606 	mla	r6, r5, r6, ip
 8020c02:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020c06:	fb06 4603 	mla	r6, r6, r3, r4
 8020c0a:	9b03      	ldr	r3, [sp, #12]
 8020c0c:	b2b6      	uxth	r6, r6
 8020c0e:	f106 0e01 	add.w	lr, r6, #1
 8020c12:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020c16:	1236      	asrs	r6, r6, #8
 8020c18:	709e      	strb	r6, [r3, #2]
 8020c1a:	b00d      	add	sp, #52	; 0x34
 8020c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c20:	f1bc 0f0f 	cmp.w	ip, #15
 8020c24:	f63f af60 	bhi.w	8020ae8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020c28:	4626      	mov	r6, r4
 8020c2a:	4602      	mov	r2, r0
 8020c2c:	460d      	mov	r5, r1
 8020c2e:	46a6      	mov	lr, r4
 8020c30:	9002      	str	r0, [sp, #8]
 8020c32:	4688      	mov	r8, r1
 8020c34:	e783      	b.n	8020b3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8020c36:	bf00      	nop
 8020c38:	0802a10b 	.word	0x0802a10b
 8020c3c:	0802a673 	.word	0x0802a673
 8020c40:	0802a1d4 	.word	0x0802a1d4

08020c44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c48:	ed2d 8b08 	vpush	{d8-d11}
 8020c4c:	b09f      	sub	sp, #124	; 0x7c
 8020c4e:	eeb0 aa40 	vmov.f32	s20, s0
 8020c52:	eef0 9a60 	vmov.f32	s19, s1
 8020c56:	920e      	str	r2, [sp, #56]	; 0x38
 8020c58:	eeb0 9a41 	vmov.f32	s18, s2
 8020c5c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020c5e:	eeb0 8a62 	vmov.f32	s16, s5
 8020c62:	9307      	str	r3, [sp, #28]
 8020c64:	eef0 8a43 	vmov.f32	s17, s6
 8020c68:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8020c6c:	eef0 ba44 	vmov.f32	s23, s8
 8020c70:	901d      	str	r0, [sp, #116]	; 0x74
 8020c72:	eeb0 ba64 	vmov.f32	s22, s9
 8020c76:	930c      	str	r3, [sp, #48]	; 0x30
 8020c78:	eef0 aa45 	vmov.f32	s21, s10
 8020c7c:	6850      	ldr	r0, [r2, #4]
 8020c7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020c80:	6812      	ldr	r2, [r2, #0]
 8020c82:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020c86:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8020c8a:	fb00 1303 	mla	r3, r0, r3, r1
 8020c8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c92:	18d3      	adds	r3, r2, r3
 8020c94:	9308      	str	r3, [sp, #32]
 8020c96:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020c98:	681b      	ldr	r3, [r3, #0]
 8020c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8020c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c9e:	43db      	mvns	r3, r3
 8020ca0:	b2db      	uxtb	r3, r3
 8020ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8020ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ca6:	2b00      	cmp	r3, #0
 8020ca8:	dc03      	bgt.n	8020cb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	f340 81f5 	ble.w	802109c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8020cb2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020cb4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020cb8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020cbc:	1e48      	subs	r0, r1, #1
 8020cbe:	1e54      	subs	r4, r2, #1
 8020cc0:	9b07      	ldr	r3, [sp, #28]
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	f340 80d5 	ble.w	8020e72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020cc8:	ea5f 452a 	movs.w	r5, sl, asr #16
 8020ccc:	ea4f 4328 	mov.w	r3, r8, asr #16
 8020cd0:	d406      	bmi.n	8020ce0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020cd2:	4285      	cmp	r5, r0
 8020cd4:	da04      	bge.n	8020ce0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	db02      	blt.n	8020ce0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020cda:	42a3      	cmp	r3, r4
 8020cdc:	f2c0 80ca 	blt.w	8020e74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020ce0:	3501      	adds	r5, #1
 8020ce2:	f100 80bb 	bmi.w	8020e5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020ce6:	42a9      	cmp	r1, r5
 8020ce8:	f2c0 80b8 	blt.w	8020e5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020cec:	3301      	adds	r3, #1
 8020cee:	f100 80b5 	bmi.w	8020e5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020cf2:	429a      	cmp	r2, r3
 8020cf4:	f2c0 80b2 	blt.w	8020e5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020cf8:	9b07      	ldr	r3, [sp, #28]
 8020cfa:	9d08      	ldr	r5, [sp, #32]
 8020cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8020cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d00:	2b00      	cmp	r3, #0
 8020d02:	f340 80d6 	ble.w	8020eb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020d06:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8020d08:	ea4f 4428 	mov.w	r4, r8, asr #16
 8020d0c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020d0e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8020d12:	68c6      	ldr	r6, [r0, #12]
 8020d14:	ea5f 402a 	movs.w	r0, sl, asr #16
 8020d18:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8020d1c:	689b      	ldr	r3, [r3, #8]
 8020d1e:	f100 810f 	bmi.w	8020f40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8020d22:	1e5f      	subs	r7, r3, #1
 8020d24:	42b8      	cmp	r0, r7
 8020d26:	f280 810b 	bge.w	8020f40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8020d2a:	2c00      	cmp	r4, #0
 8020d2c:	f2c0 8108 	blt.w	8020f40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8020d30:	1e77      	subs	r7, r6, #1
 8020d32:	42bc      	cmp	r4, r7
 8020d34:	f280 8104 	bge.w	8020f40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8020d38:	b21b      	sxth	r3, r3
 8020d3a:	fb04 0003 	mla	r0, r4, r3, r0
 8020d3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020d40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020d44:	1826      	adds	r6, r4, r0
 8020d46:	5c24      	ldrb	r4, [r4, r0]
 8020d48:	78b7      	ldrb	r7, [r6, #2]
 8020d4a:	7870      	ldrb	r0, [r6, #1]
 8020d4c:	970f      	str	r7, [sp, #60]	; 0x3c
 8020d4e:	7977      	ldrb	r7, [r6, #5]
 8020d50:	f896 e003 	ldrb.w	lr, [r6, #3]
 8020d54:	f896 c004 	ldrb.w	ip, [r6, #4]
 8020d58:	9710      	str	r7, [sp, #64]	; 0x40
 8020d5a:	b1c9      	cbz	r1, 8020d90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020d5c:	f04f 0b03 	mov.w	fp, #3
 8020d60:	f06f 0904 	mvn.w	r9, #4
 8020d64:	3605      	adds	r6, #5
 8020d66:	fb13 930b 	smlabb	r3, r3, fp, r9
 8020d6a:	eb06 0b03 	add.w	fp, r6, r3
 8020d6e:	5cf3      	ldrb	r3, [r6, r3]
 8020d70:	9311      	str	r3, [sp, #68]	; 0x44
 8020d72:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8020d76:	9313      	str	r3, [sp, #76]	; 0x4c
 8020d78:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020d7c:	9315      	str	r3, [sp, #84]	; 0x54
 8020d7e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8020d82:	9312      	str	r3, [sp, #72]	; 0x48
 8020d84:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8020d88:	9314      	str	r3, [sp, #80]	; 0x50
 8020d8a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8020d8e:	9316      	str	r3, [sp, #88]	; 0x58
 8020d90:	b292      	uxth	r2, r2
 8020d92:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8020d94:	b289      	uxth	r1, r1
 8020d96:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8020d9a:	fb02 f601 	mul.w	r6, r2, r1
 8020d9e:	0112      	lsls	r2, r2, #4
 8020da0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8020da4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8020da8:	1b92      	subs	r2, r2, r6
 8020daa:	b289      	uxth	r1, r1
 8020dac:	b292      	uxth	r2, r2
 8020dae:	eba9 0901 	sub.w	r9, r9, r1
 8020db2:	fb02 fe0e 	mul.w	lr, r2, lr
 8020db6:	fa1f f989 	uxth.w	r9, r9
 8020dba:	fb02 fc0c 	mul.w	ip, r2, ip
 8020dbe:	fb09 e404 	mla	r4, r9, r4, lr
 8020dc2:	f895 e000 	ldrb.w	lr, [r5]
 8020dc6:	fb09 c000 	mla	r0, r9, r0, ip
 8020dca:	fb01 4407 	mla	r4, r1, r7, r4
 8020dce:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020dd0:	fb06 4407 	mla	r4, r6, r7, r4
 8020dd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020dd6:	fb1e fe07 	smulbb	lr, lr, r7
 8020dda:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020dde:	fb04 e403 	mla	r4, r4, r3, lr
 8020de2:	b2a4      	uxth	r4, r4
 8020de4:	f104 0e01 	add.w	lr, r4, #1
 8020de8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8020dec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020dee:	fb01 0004 	mla	r0, r1, r4, r0
 8020df2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020df4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020df8:	fb06 0004 	mla	r0, r6, r4, r0
 8020dfc:	786c      	ldrb	r4, [r5, #1]
 8020dfe:	f885 e000 	strb.w	lr, [r5]
 8020e02:	fb14 f407 	smulbb	r4, r4, r7
 8020e06:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020e0a:	fb00 4003 	mla	r0, r0, r3, r4
 8020e0e:	b280      	uxth	r0, r0
 8020e10:	1c44      	adds	r4, r0, #1
 8020e12:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020e16:	1200      	asrs	r0, r0, #8
 8020e18:	7068      	strb	r0, [r5, #1]
 8020e1a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020e1c:	4342      	muls	r2, r0
 8020e1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020e20:	fb09 2200 	mla	r2, r9, r0, r2
 8020e24:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020e26:	fb01 2100 	mla	r1, r1, r0, r2
 8020e2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020e2c:	fb06 1602 	mla	r6, r6, r2, r1
 8020e30:	78a9      	ldrb	r1, [r5, #2]
 8020e32:	fb11 f107 	smulbb	r1, r1, r7
 8020e36:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020e3a:	fb06 1303 	mla	r3, r6, r3, r1
 8020e3e:	b29b      	uxth	r3, r3
 8020e40:	1c5e      	adds	r6, r3, #1
 8020e42:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020e46:	121b      	asrs	r3, r3, #8
 8020e48:	70ab      	strb	r3, [r5, #2]
 8020e4a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020e4c:	3503      	adds	r5, #3
 8020e4e:	449a      	add	sl, r3
 8020e50:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e52:	4498      	add	r8, r3
 8020e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e56:	3b01      	subs	r3, #1
 8020e58:	930d      	str	r3, [sp, #52]	; 0x34
 8020e5a:	e750      	b.n	8020cfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8020e5c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020e5e:	449a      	add	sl, r3
 8020e60:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020e62:	4498      	add	r8, r3
 8020e64:	9b07      	ldr	r3, [sp, #28]
 8020e66:	3b01      	subs	r3, #1
 8020e68:	9307      	str	r3, [sp, #28]
 8020e6a:	9b08      	ldr	r3, [sp, #32]
 8020e6c:	3303      	adds	r3, #3
 8020e6e:	9308      	str	r3, [sp, #32]
 8020e70:	e726      	b.n	8020cc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020e72:	d026      	beq.n	8020ec2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020e74:	9b07      	ldr	r3, [sp, #28]
 8020e76:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020e78:	3b01      	subs	r3, #1
 8020e7a:	fb00 a003 	mla	r0, r0, r3, sl
 8020e7e:	1400      	asrs	r0, r0, #16
 8020e80:	f53f af3a 	bmi.w	8020cf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020e84:	3901      	subs	r1, #1
 8020e86:	4288      	cmp	r0, r1
 8020e88:	f6bf af36 	bge.w	8020cf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020e8c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8020e8e:	fb01 8303 	mla	r3, r1, r3, r8
 8020e92:	141b      	asrs	r3, r3, #16
 8020e94:	f53f af30 	bmi.w	8020cf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020e98:	3a01      	subs	r2, #1
 8020e9a:	4293      	cmp	r3, r2
 8020e9c:	f6bf af2c 	bge.w	8020cf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8020ea0:	9b08      	ldr	r3, [sp, #32]
 8020ea2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020ea6:	1cdd      	adds	r5, r3, #3
 8020ea8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8020eac:	f1bc 0f00 	cmp.w	ip, #0
 8020eb0:	dc5f      	bgt.n	8020f72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8020eb2:	9b07      	ldr	r3, [sp, #28]
 8020eb4:	9a08      	ldr	r2, [sp, #32]
 8020eb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020eba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ebe:	441a      	add	r2, r3
 8020ec0:	9208      	str	r2, [sp, #32]
 8020ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	f340 80e9 	ble.w	802109c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8020eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020ece:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020ed0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020ed4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020ed8:	eef0 6a48 	vmov.f32	s13, s16
 8020edc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020ee0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020ee4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ee8:	ee16 aa90 	vmov	sl, s13
 8020eec:	eef0 6a68 	vmov.f32	s13, s17
 8020ef0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ef4:	ee16 8a90 	vmov	r8, s13
 8020ef8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020efc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020f00:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020f04:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020f08:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020f0c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020f10:	ee18 2a10 	vmov	r2, s16
 8020f14:	eeb0 8a47 	vmov.f32	s16, s14
 8020f18:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f1c:	ee18 2a90 	vmov	r2, s17
 8020f20:	9333      	str	r3, [sp, #204]	; 0xcc
 8020f22:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020f24:	eef0 8a67 	vmov.f32	s17, s15
 8020f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f2c:	9334      	str	r3, [sp, #208]	; 0xd0
 8020f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f32:	3b01      	subs	r3, #1
 8020f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8020f36:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020f38:	bf08      	it	eq
 8020f3a:	4613      	moveq	r3, r2
 8020f3c:	9307      	str	r3, [sp, #28]
 8020f3e:	e6b1      	b.n	8020ca4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020f40:	1c47      	adds	r7, r0, #1
 8020f42:	d482      	bmi.n	8020e4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020f44:	42bb      	cmp	r3, r7
 8020f46:	db80      	blt.n	8020e4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020f48:	1c67      	adds	r7, r4, #1
 8020f4a:	f53f af7e 	bmi.w	8020e4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020f4e:	42be      	cmp	r6, r7
 8020f50:	f6ff af7b 	blt.w	8020e4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020f54:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020f56:	b236      	sxth	r6, r6
 8020f58:	9001      	str	r0, [sp, #4]
 8020f5a:	b21b      	sxth	r3, r3
 8020f5c:	9600      	str	r6, [sp, #0]
 8020f5e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020f60:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8020f64:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8020f68:	4629      	mov	r1, r5
 8020f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f6c:	f7ff fd58 	bl	8020a20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020f70:	e76b      	b.n	8020e4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020f72:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8020f74:	ea4f 402a 	mov.w	r0, sl, asr #16
 8020f78:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8020f7c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8020f80:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8020f84:	ea4f 4128 	mov.w	r1, r8, asr #16
 8020f88:	fb07 0101 	mla	r1, r7, r1, r0
 8020f8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020f8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020f92:	1844      	adds	r4, r0, r1
 8020f94:	5c40      	ldrb	r0, [r0, r1]
 8020f96:	78a6      	ldrb	r6, [r4, #2]
 8020f98:	7861      	ldrb	r1, [r4, #1]
 8020f9a:	960f      	str	r6, [sp, #60]	; 0x3c
 8020f9c:	78e6      	ldrb	r6, [r4, #3]
 8020f9e:	910d      	str	r1, [sp, #52]	; 0x34
 8020fa0:	9610      	str	r6, [sp, #64]	; 0x40
 8020fa2:	f894 9004 	ldrb.w	r9, [r4, #4]
 8020fa6:	f894 b005 	ldrb.w	fp, [r4, #5]
 8020faa:	b192      	cbz	r2, 8020fd2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8020fac:	f06f 0604 	mvn.w	r6, #4
 8020fb0:	2103      	movs	r1, #3
 8020fb2:	3405      	adds	r4, #5
 8020fb4:	fb17 6701 	smlabb	r7, r7, r1, r6
 8020fb8:	19e6      	adds	r6, r4, r7
 8020fba:	5de4      	ldrb	r4, [r4, r7]
 8020fbc:	9417      	str	r4, [sp, #92]	; 0x5c
 8020fbe:	7874      	ldrb	r4, [r6, #1]
 8020fc0:	9419      	str	r4, [sp, #100]	; 0x64
 8020fc2:	78b4      	ldrb	r4, [r6, #2]
 8020fc4:	941b      	str	r4, [sp, #108]	; 0x6c
 8020fc6:	78f4      	ldrb	r4, [r6, #3]
 8020fc8:	9418      	str	r4, [sp, #96]	; 0x60
 8020fca:	7934      	ldrb	r4, [r6, #4]
 8020fcc:	941a      	str	r4, [sp, #104]	; 0x68
 8020fce:	7974      	ldrb	r4, [r6, #5]
 8020fd0:	941c      	str	r4, [sp, #112]	; 0x70
 8020fd2:	b29b      	uxth	r3, r3
 8020fd4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020fd6:	b292      	uxth	r2, r2
 8020fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020fda:	3503      	adds	r5, #3
 8020fdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020fe0:	fb03 f402 	mul.w	r4, r3, r2
 8020fe4:	011b      	lsls	r3, r3, #4
 8020fe6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8020fea:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8020fee:	1b1b      	subs	r3, r3, r4
 8020ff0:	b292      	uxth	r2, r2
 8020ff2:	b29b      	uxth	r3, r3
 8020ff4:	1ab6      	subs	r6, r6, r2
 8020ff6:	435f      	muls	r7, r3
 8020ff8:	b2b6      	uxth	r6, r6
 8020ffa:	fb03 f909 	mul.w	r9, r3, r9
 8020ffe:	fb03 fb0b 	mul.w	fp, r3, fp
 8021002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021004:	fb06 7000 	mla	r0, r6, r0, r7
 8021008:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 802100a:	fb06 bb03 	mla	fp, r6, r3, fp
 802100e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021010:	fb02 0007 	mla	r0, r2, r7, r0
 8021014:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8021016:	fb02 bb03 	mla	fp, r2, r3, fp
 802101a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802101c:	fb04 0007 	mla	r0, r4, r7, r0
 8021020:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8021024:	fb17 f701 	smulbb	r7, r7, r1
 8021028:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802102c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802102e:	fb00 700e 	mla	r0, r0, lr, r7
 8021032:	fb06 9101 	mla	r1, r6, r1, r9
 8021036:	b280      	uxth	r0, r0
 8021038:	1c47      	adds	r7, r0, #1
 802103a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802103e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021040:	1200      	asrs	r0, r0, #8
 8021042:	f805 0c06 	strb.w	r0, [r5, #-6]
 8021046:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021048:	fb02 1100 	mla	r1, r2, r0, r1
 802104c:	981a      	ldr	r0, [sp, #104]	; 0x68
 802104e:	fb04 1100 	mla	r1, r4, r0, r1
 8021052:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8021056:	fb04 b403 	mla	r4, r4, r3, fp
 802105a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 802105e:	fb10 f007 	smulbb	r0, r0, r7
 8021062:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021066:	fb13 f307 	smulbb	r3, r3, r7
 802106a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802106e:	fb01 010e 	mla	r1, r1, lr, r0
 8021072:	fb04 340e 	mla	r4, r4, lr, r3
 8021076:	b289      	uxth	r1, r1
 8021078:	b2a4      	uxth	r4, r4
 802107a:	1c48      	adds	r0, r1, #1
 802107c:	1c63      	adds	r3, r4, #1
 802107e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021082:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021086:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021088:	1209      	asrs	r1, r1, #8
 802108a:	1224      	asrs	r4, r4, #8
 802108c:	449a      	add	sl, r3
 802108e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021090:	f805 1c05 	strb.w	r1, [r5, #-5]
 8021094:	f805 4c04 	strb.w	r4, [r5, #-4]
 8021098:	4498      	add	r8, r3
 802109a:	e707      	b.n	8020eac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802109c:	b01f      	add	sp, #124	; 0x7c
 802109e:	ecbd 8b08 	vpop	{d8-d11}
 80210a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080210a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80210a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210ac:	b085      	sub	sp, #20
 80210ae:	784d      	ldrb	r5, [r1, #1]
 80210b0:	788e      	ldrb	r6, [r1, #2]
 80210b2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80210b6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80210ba:	9403      	str	r4, [sp, #12]
 80210bc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80210c0:	780c      	ldrb	r4, [r1, #0]
 80210c2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80210c6:	fb07 ce03 	mla	lr, r7, r3, ip
 80210ca:	2f00      	cmp	r7, #0
 80210cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80210d0:	eb02 0b0e 	add.w	fp, r2, lr
 80210d4:	db56      	blt.n	8021184 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80210d6:	45b9      	cmp	r9, r7
 80210d8:	dd54      	ble.n	8021184 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80210da:	f1bc 0f00 	cmp.w	ip, #0
 80210de:	db4d      	blt.n	802117c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80210e0:	4563      	cmp	r3, ip
 80210e2:	dd4b      	ble.n	802117c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80210e4:	f812 200e 	ldrb.w	r2, [r2, lr]
 80210e8:	9200      	str	r2, [sp, #0]
 80210ea:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80210ee:	9201      	str	r2, [sp, #4]
 80210f0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80210f4:	9202      	str	r2, [sp, #8]
 80210f6:	f11c 0201 	adds.w	r2, ip, #1
 80210fa:	d44a      	bmi.n	8021192 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80210fc:	4293      	cmp	r3, r2
 80210fe:	dd48      	ble.n	8021192 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021100:	2800      	cmp	r0, #0
 8021102:	d046      	beq.n	8021192 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021104:	f89b e003 	ldrb.w	lr, [fp, #3]
 8021108:	f89b 8004 	ldrb.w	r8, [fp, #4]
 802110c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021110:	3701      	adds	r7, #1
 8021112:	d446      	bmi.n	80211a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021114:	45b9      	cmp	r9, r7
 8021116:	dd44      	ble.n	80211a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021118:	9a03      	ldr	r2, [sp, #12]
 802111a:	2a00      	cmp	r2, #0
 802111c:	d045      	beq.n	80211aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802111e:	f1bc 0f00 	cmp.w	ip, #0
 8021122:	db3a      	blt.n	802119a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021124:	4563      	cmp	r3, ip
 8021126:	dd38      	ble.n	802119a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021128:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802112c:	f04f 0903 	mov.w	r9, #3
 8021130:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021134:	fb03 b209 	mla	r2, r3, r9, fp
 8021138:	fb03 b909 	mla	r9, r3, r9, fp
 802113c:	7852      	ldrb	r2, [r2, #1]
 802113e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021142:	f11c 0c01 	adds.w	ip, ip, #1
 8021146:	d40d      	bmi.n	8021164 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021148:	4563      	cmp	r3, ip
 802114a:	dd0b      	ble.n	8021164 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802114c:	b160      	cbz	r0, 8021168 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 802114e:	2603      	movs	r6, #3
 8021150:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021154:	fb03 b506 	mla	r5, r3, r6, fp
 8021158:	fb03 b306 	mla	r3, r3, r6, fp
 802115c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021160:	792d      	ldrb	r5, [r5, #4]
 8021162:	795e      	ldrb	r6, [r3, #5]
 8021164:	280f      	cmp	r0, #15
 8021166:	d802      	bhi.n	802116e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021168:	9b03      	ldr	r3, [sp, #12]
 802116a:	2b0f      	cmp	r3, #15
 802116c:	d922      	bls.n	80211b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 802116e:	4b2f      	ldr	r3, [pc, #188]	; (802122c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8021170:	f240 1157 	movw	r1, #343	; 0x157
 8021174:	4a2e      	ldr	r2, [pc, #184]	; (8021230 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8021176:	482f      	ldr	r0, [pc, #188]	; (8021234 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8021178:	f004 f96c 	bl	8025454 <__assert_func>
 802117c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021180:	9400      	str	r4, [sp, #0]
 8021182:	e7b8      	b.n	80210f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8021184:	46b2      	mov	sl, r6
 8021186:	46a8      	mov	r8, r5
 8021188:	46a6      	mov	lr, r4
 802118a:	9400      	str	r4, [sp, #0]
 802118c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021190:	e7be      	b.n	8021110 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021192:	46b2      	mov	sl, r6
 8021194:	46a8      	mov	r8, r5
 8021196:	46a6      	mov	lr, r4
 8021198:	e7ba      	b.n	8021110 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802119a:	46b1      	mov	r9, r6
 802119c:	462a      	mov	r2, r5
 802119e:	4627      	mov	r7, r4
 80211a0:	e7cf      	b.n	8021142 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80211a2:	46b1      	mov	r9, r6
 80211a4:	462a      	mov	r2, r5
 80211a6:	4627      	mov	r7, r4
 80211a8:	e7dc      	b.n	8021164 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80211aa:	280f      	cmp	r0, #15
 80211ac:	d8df      	bhi.n	802116e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80211ae:	46b1      	mov	r9, r6
 80211b0:	462a      	mov	r2, r5
 80211b2:	4627      	mov	r7, r4
 80211b4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80211b8:	b280      	uxth	r0, r0
 80211ba:	fb00 f30b 	mul.w	r3, r0, fp
 80211be:	0100      	lsls	r0, r0, #4
 80211c0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80211c4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80211c8:	1ac0      	subs	r0, r0, r3
 80211ca:	fa1f fb8b 	uxth.w	fp, fp
 80211ce:	b280      	uxth	r0, r0
 80211d0:	ebac 0c0b 	sub.w	ip, ip, fp
 80211d4:	9003      	str	r0, [sp, #12]
 80211d6:	fa1f fc8c 	uxth.w	ip, ip
 80211da:	fb00 fe0e 	mul.w	lr, r0, lr
 80211de:	9800      	ldr	r0, [sp, #0]
 80211e0:	fb0c ee00 	mla	lr, ip, r0, lr
 80211e4:	9803      	ldr	r0, [sp, #12]
 80211e6:	fb00 f808 	mul.w	r8, r0, r8
 80211ea:	9801      	ldr	r0, [sp, #4]
 80211ec:	fb0b ee07 	mla	lr, fp, r7, lr
 80211f0:	fb0c 8800 	mla	r8, ip, r0, r8
 80211f4:	fb03 ee04 	mla	lr, r3, r4, lr
 80211f8:	fb0b 8202 	mla	r2, fp, r2, r8
 80211fc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021200:	fb03 2505 	mla	r5, r3, r5, r2
 8021204:	9a03      	ldr	r2, [sp, #12]
 8021206:	f881 e000 	strb.w	lr, [r1]
 802120a:	fb02 f00a 	mul.w	r0, r2, sl
 802120e:	9a02      	ldr	r2, [sp, #8]
 8021210:	122d      	asrs	r5, r5, #8
 8021212:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021216:	704d      	strb	r5, [r1, #1]
 8021218:	fb0b c909 	mla	r9, fp, r9, ip
 802121c:	fb03 9606 	mla	r6, r3, r6, r9
 8021220:	1236      	asrs	r6, r6, #8
 8021222:	708e      	strb	r6, [r1, #2]
 8021224:	b005      	add	sp, #20
 8021226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802122a:	bf00      	nop
 802122c:	0802a10b 	.word	0x0802a10b
 8021230:	0802a673 	.word	0x0802a673
 8021234:	0802a1d4 	.word	0x0802a1d4

08021238 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802123c:	ed2d 8b08 	vpush	{d8-d11}
 8021240:	b09b      	sub	sp, #108	; 0x6c
 8021242:	eeb0 aa40 	vmov.f32	s20, s0
 8021246:	eef0 9a60 	vmov.f32	s19, s1
 802124a:	920b      	str	r2, [sp, #44]	; 0x2c
 802124c:	eeb0 9a41 	vmov.f32	s18, s2
 8021250:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021252:	eeb0 8a62 	vmov.f32	s16, s5
 8021256:	9019      	str	r0, [sp, #100]	; 0x64
 8021258:	eef0 8a43 	vmov.f32	s17, s6
 802125c:	6850      	ldr	r0, [r2, #4]
 802125e:	eef0 ba44 	vmov.f32	s23, s8
 8021262:	9109      	str	r1, [sp, #36]	; 0x24
 8021264:	eeb0 ba64 	vmov.f32	s22, s9
 8021268:	9306      	str	r3, [sp, #24]
 802126a:	eef0 aa45 	vmov.f32	s21, s10
 802126e:	6812      	ldr	r2, [r2, #0]
 8021270:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8021274:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8021278:	fb00 1303 	mla	r3, r0, r3, r1
 802127c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021280:	18d3      	adds	r3, r2, r3
 8021282:	9307      	str	r3, [sp, #28]
 8021284:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021286:	681b      	ldr	r3, [r3, #0]
 8021288:	9308      	str	r3, [sp, #32]
 802128a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802128c:	2b00      	cmp	r3, #0
 802128e:	dc03      	bgt.n	8021298 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021292:	2b00      	cmp	r3, #0
 8021294:	f340 81ab 	ble.w	80215ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8021298:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802129a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802129e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80212a2:	1e48      	subs	r0, r1, #1
 80212a4:	1e55      	subs	r5, r2, #1
 80212a6:	9b06      	ldr	r3, [sp, #24]
 80212a8:	2b00      	cmp	r3, #0
 80212aa:	f340 80b1 	ble.w	8021410 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80212ae:	ea5f 462b 	movs.w	r6, fp, asr #16
 80212b2:	ea4f 4324 	mov.w	r3, r4, asr #16
 80212b6:	d406      	bmi.n	80212c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80212b8:	4286      	cmp	r6, r0
 80212ba:	da04      	bge.n	80212c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80212bc:	2b00      	cmp	r3, #0
 80212be:	db02      	blt.n	80212c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80212c0:	42ab      	cmp	r3, r5
 80212c2:	f2c0 80a6 	blt.w	8021412 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80212c6:	3601      	adds	r6, #1
 80212c8:	f100 8097 	bmi.w	80213fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80212cc:	42b1      	cmp	r1, r6
 80212ce:	f2c0 8094 	blt.w	80213fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80212d2:	3301      	adds	r3, #1
 80212d4:	f100 8091 	bmi.w	80213fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80212d8:	429a      	cmp	r2, r3
 80212da:	f2c0 808e 	blt.w	80213fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80212de:	9b06      	ldr	r3, [sp, #24]
 80212e0:	9e07      	ldr	r6, [sp, #28]
 80212e2:	930a      	str	r3, [sp, #40]	; 0x28
 80212e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	f340 80b0 	ble.w	802144c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80212ec:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80212ee:	1425      	asrs	r5, r4, #16
 80212f0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80212f2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80212f6:	68c7      	ldr	r7, [r0, #12]
 80212f8:	ea5f 402b 	movs.w	r0, fp, asr #16
 80212fc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021300:	689b      	ldr	r3, [r3, #8]
 8021302:	f100 80ea 	bmi.w	80214da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021306:	f103 3cff 	add.w	ip, r3, #4294967295
 802130a:	4560      	cmp	r0, ip
 802130c:	f280 80e5 	bge.w	80214da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021310:	2d00      	cmp	r5, #0
 8021312:	f2c0 80e2 	blt.w	80214da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021316:	f107 3cff 	add.w	ip, r7, #4294967295
 802131a:	4565      	cmp	r5, ip
 802131c:	f280 80dd 	bge.w	80214da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021320:	b21b      	sxth	r3, r3
 8021322:	fb05 0003 	mla	r0, r5, r3, r0
 8021326:	9d08      	ldr	r5, [sp, #32]
 8021328:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802132c:	182f      	adds	r7, r5, r0
 802132e:	5c2d      	ldrb	r5, [r5, r0]
 8021330:	7878      	ldrb	r0, [r7, #1]
 8021332:	f897 e002 	ldrb.w	lr, [r7, #2]
 8021336:	900c      	str	r0, [sp, #48]	; 0x30
 8021338:	f897 9003 	ldrb.w	r9, [r7, #3]
 802133c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8021340:	f897 a005 	ldrb.w	sl, [r7, #5]
 8021344:	b1c9      	cbz	r1, 802137a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021346:	f04f 0c03 	mov.w	ip, #3
 802134a:	f06f 0004 	mvn.w	r0, #4
 802134e:	3705      	adds	r7, #5
 8021350:	fb13 030c 	smlabb	r3, r3, ip, r0
 8021354:	eb07 0c03 	add.w	ip, r7, r3
 8021358:	5cfb      	ldrb	r3, [r7, r3]
 802135a:	930d      	str	r3, [sp, #52]	; 0x34
 802135c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021360:	930f      	str	r3, [sp, #60]	; 0x3c
 8021362:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8021366:	9311      	str	r3, [sp, #68]	; 0x44
 8021368:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802136c:	930e      	str	r3, [sp, #56]	; 0x38
 802136e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8021372:	9310      	str	r3, [sp, #64]	; 0x40
 8021374:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8021378:	9312      	str	r3, [sp, #72]	; 0x48
 802137a:	b292      	uxth	r2, r2
 802137c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802137e:	b289      	uxth	r1, r1
 8021380:	fb02 f301 	mul.w	r3, r2, r1
 8021384:	0112      	lsls	r2, r2, #4
 8021386:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802138a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802138e:	1ad2      	subs	r2, r2, r3
 8021390:	b289      	uxth	r1, r1
 8021392:	b292      	uxth	r2, r2
 8021394:	1a7f      	subs	r7, r7, r1
 8021396:	fb02 f909 	mul.w	r9, r2, r9
 802139a:	b2bf      	uxth	r7, r7
 802139c:	fb02 f808 	mul.w	r8, r2, r8
 80213a0:	fb02 fa0a 	mul.w	sl, r2, sl
 80213a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80213a6:	fb07 9905 	mla	r9, r7, r5, r9
 80213aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80213ac:	fb07 8800 	mla	r8, r7, r0, r8
 80213b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80213b2:	fb07 aa0e 	mla	sl, r7, lr, sl
 80213b6:	fb01 9905 	mla	r9, r1, r5, r9
 80213ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80213bc:	fb01 8800 	mla	r8, r1, r0, r8
 80213c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80213c2:	fb01 a102 	mla	r1, r1, r2, sl
 80213c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80213c8:	fb03 9905 	mla	r9, r3, r5, r9
 80213cc:	fb03 8800 	mla	r8, r3, r0, r8
 80213d0:	fb03 1302 	mla	r3, r3, r2, r1
 80213d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80213d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80213dc:	121b      	asrs	r3, r3, #8
 80213de:	f886 9000 	strb.w	r9, [r6]
 80213e2:	f886 8001 	strb.w	r8, [r6, #1]
 80213e6:	70b3      	strb	r3, [r6, #2]
 80213e8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80213ea:	3603      	adds	r6, #3
 80213ec:	449b      	add	fp, r3
 80213ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80213f0:	441c      	add	r4, r3
 80213f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80213f4:	3b01      	subs	r3, #1
 80213f6:	930a      	str	r3, [sp, #40]	; 0x28
 80213f8:	e774      	b.n	80212e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80213fa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80213fc:	449b      	add	fp, r3
 80213fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021400:	441c      	add	r4, r3
 8021402:	9b06      	ldr	r3, [sp, #24]
 8021404:	3b01      	subs	r3, #1
 8021406:	9306      	str	r3, [sp, #24]
 8021408:	9b07      	ldr	r3, [sp, #28]
 802140a:	3303      	adds	r3, #3
 802140c:	9307      	str	r3, [sp, #28]
 802140e:	e74a      	b.n	80212a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021410:	d024      	beq.n	802145c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021412:	9b06      	ldr	r3, [sp, #24]
 8021414:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8021416:	3b01      	subs	r3, #1
 8021418:	fb00 b003 	mla	r0, r0, r3, fp
 802141c:	1400      	asrs	r0, r0, #16
 802141e:	f53f af5e 	bmi.w	80212de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021422:	3901      	subs	r1, #1
 8021424:	4288      	cmp	r0, r1
 8021426:	f6bf af5a 	bge.w	80212de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802142a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802142c:	fb01 4303 	mla	r3, r1, r3, r4
 8021430:	141b      	asrs	r3, r3, #16
 8021432:	f53f af54 	bmi.w	80212de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021436:	3a01      	subs	r2, #1
 8021438:	4293      	cmp	r3, r2
 802143a:	f6bf af50 	bge.w	80212de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802143e:	9b07      	ldr	r3, [sp, #28]
 8021440:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021444:	1cde      	adds	r6, r3, #3
 8021446:	f1be 0f00 	cmp.w	lr, #0
 802144a:	dc5f      	bgt.n	802150c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802144c:	9b06      	ldr	r3, [sp, #24]
 802144e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021452:	9b07      	ldr	r3, [sp, #28]
 8021454:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021458:	4423      	add	r3, r4
 802145a:	9307      	str	r3, [sp, #28]
 802145c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802145e:	2b00      	cmp	r3, #0
 8021460:	f340 80c5 	ble.w	80215ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8021464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021468:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802146a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802146e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021472:	eef0 6a48 	vmov.f32	s13, s16
 8021476:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802147a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802147e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021482:	ee16 ba90 	vmov	fp, s13
 8021486:	eef0 6a68 	vmov.f32	s13, s17
 802148a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802148e:	ee16 4a90 	vmov	r4, s13
 8021492:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021496:	ee69 7a27 	vmul.f32	s15, s18, s15
 802149a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802149e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80214a2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80214a6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80214aa:	ee18 2a10 	vmov	r2, s16
 80214ae:	eeb0 8a47 	vmov.f32	s16, s14
 80214b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80214b6:	ee18 2a90 	vmov	r2, s17
 80214ba:	932f      	str	r3, [sp, #188]	; 0xbc
 80214bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80214be:	eef0 8a67 	vmov.f32	s17, s15
 80214c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80214c6:	9330      	str	r3, [sp, #192]	; 0xc0
 80214c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80214cc:	3b01      	subs	r3, #1
 80214ce:	9309      	str	r3, [sp, #36]	; 0x24
 80214d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80214d2:	bf08      	it	eq
 80214d4:	4613      	moveq	r3, r2
 80214d6:	9306      	str	r3, [sp, #24]
 80214d8:	e6d7      	b.n	802128a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80214da:	f110 0c01 	adds.w	ip, r0, #1
 80214de:	d483      	bmi.n	80213e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80214e0:	4563      	cmp	r3, ip
 80214e2:	db81      	blt.n	80213e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80214e4:	f115 0c01 	adds.w	ip, r5, #1
 80214e8:	f53f af7e 	bmi.w	80213e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80214ec:	4567      	cmp	r7, ip
 80214ee:	f6ff af7b 	blt.w	80213e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80214f2:	b23f      	sxth	r7, r7
 80214f4:	b21b      	sxth	r3, r3
 80214f6:	9700      	str	r7, [sp, #0]
 80214f8:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80214fc:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8021500:	9a08      	ldr	r2, [sp, #32]
 8021502:	4631      	mov	r1, r6
 8021504:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021506:	f7ff fdcf 	bl	80210a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802150a:	e76d      	b.n	80213e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802150c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802150e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8021512:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8021516:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802151a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802151e:	1421      	asrs	r1, r4, #16
 8021520:	930a      	str	r3, [sp, #40]	; 0x28
 8021522:	fb0c 0101 	mla	r1, ip, r1, r0
 8021526:	9808      	ldr	r0, [sp, #32]
 8021528:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802152c:	1845      	adds	r5, r0, r1
 802152e:	5c40      	ldrb	r0, [r0, r1]
 8021530:	796f      	ldrb	r7, [r5, #5]
 8021532:	7869      	ldrb	r1, [r5, #1]
 8021534:	f895 8002 	ldrb.w	r8, [r5, #2]
 8021538:	f895 a003 	ldrb.w	sl, [r5, #3]
 802153c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8021540:	970c      	str	r7, [sp, #48]	; 0x30
 8021542:	b1a2      	cbz	r2, 802156e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8021544:	2703      	movs	r7, #3
 8021546:	f06f 0304 	mvn.w	r3, #4
 802154a:	3505      	adds	r5, #5
 802154c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8021550:	eb05 070c 	add.w	r7, r5, ip
 8021554:	f815 500c 	ldrb.w	r5, [r5, ip]
 8021558:	9513      	str	r5, [sp, #76]	; 0x4c
 802155a:	787d      	ldrb	r5, [r7, #1]
 802155c:	9515      	str	r5, [sp, #84]	; 0x54
 802155e:	78bd      	ldrb	r5, [r7, #2]
 8021560:	9517      	str	r5, [sp, #92]	; 0x5c
 8021562:	78fd      	ldrb	r5, [r7, #3]
 8021564:	9514      	str	r5, [sp, #80]	; 0x50
 8021566:	793d      	ldrb	r5, [r7, #4]
 8021568:	9516      	str	r5, [sp, #88]	; 0x58
 802156a:	797d      	ldrb	r5, [r7, #5]
 802156c:	9518      	str	r5, [sp, #96]	; 0x60
 802156e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021572:	b292      	uxth	r2, r2
 8021574:	3603      	adds	r6, #3
 8021576:	f10e 3eff 	add.w	lr, lr, #4294967295
 802157a:	fb03 f502 	mul.w	r5, r3, r2
 802157e:	011b      	lsls	r3, r3, #4
 8021580:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8021584:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021588:	1b5b      	subs	r3, r3, r5
 802158a:	b292      	uxth	r2, r2
 802158c:	b29b      	uxth	r3, r3
 802158e:	1abf      	subs	r7, r7, r2
 8021590:	fb03 f909 	mul.w	r9, r3, r9
 8021594:	b2bf      	uxth	r7, r7
 8021596:	fb03 fa0a 	mul.w	sl, r3, sl
 802159a:	fb07 9901 	mla	r9, r7, r1, r9
 802159e:	9915      	ldr	r1, [sp, #84]	; 0x54
 80215a0:	fb07 aa00 	mla	sl, r7, r0, sl
 80215a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80215a6:	fb02 9901 	mla	r9, r2, r1, r9
 80215aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80215ac:	fb02 aa00 	mla	sl, r2, r0, sl
 80215b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80215b2:	fb05 9901 	mla	r9, r5, r1, r9
 80215b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80215b8:	fb05 aa00 	mla	sl, r5, r0, sl
 80215bc:	434b      	muls	r3, r1
 80215be:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80215c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80215c4:	fb07 3308 	mla	r3, r7, r8, r3
 80215c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80215cc:	f806 ac06 	strb.w	sl, [r6, #-6]
 80215d0:	fb02 3201 	mla	r2, r2, r1, r3
 80215d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80215d6:	f806 9c05 	strb.w	r9, [r6, #-5]
 80215da:	fb05 2503 	mla	r5, r5, r3, r2
 80215de:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80215e0:	122d      	asrs	r5, r5, #8
 80215e2:	449b      	add	fp, r3
 80215e4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80215e6:	f806 5c04 	strb.w	r5, [r6, #-4]
 80215ea:	441c      	add	r4, r3
 80215ec:	e72b      	b.n	8021446 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80215ee:	b01b      	add	sp, #108	; 0x6c
 80215f0:	ecbd 8b08 	vpop	{d8-d11}
 80215f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80215f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215fc:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8021600:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021604:	fb04 5603 	mla	r6, r4, r3, r5
 8021608:	2c00      	cmp	r4, #0
 802160a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802160e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8021612:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8021616:	db36      	blt.n	8021686 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8021618:	45a6      	cmp	lr, r4
 802161a:	dd34      	ble.n	8021686 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 802161c:	2d00      	cmp	r5, #0
 802161e:	db30      	blt.n	8021682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8021620:	42ab      	cmp	r3, r5
 8021622:	dd2e      	ble.n	8021682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8021624:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8021628:	1c6e      	adds	r6, r5, #1
 802162a:	d42f      	bmi.n	802168c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 802162c:	42b3      	cmp	r3, r6
 802162e:	dd2d      	ble.n	802168c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8021630:	b370      	cbz	r0, 8021690 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8021632:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8021636:	3401      	adds	r4, #1
 8021638:	d42e      	bmi.n	8021698 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 802163a:	45a6      	cmp	lr, r4
 802163c:	dd2c      	ble.n	8021698 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 802163e:	b377      	cbz	r7, 802169e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8021640:	2d00      	cmp	r5, #0
 8021642:	db27      	blt.n	8021694 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8021644:	42ab      	cmp	r3, r5
 8021646:	dd25      	ble.n	8021694 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8021648:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802164c:	3501      	adds	r5, #1
 802164e:	d429      	bmi.n	80216a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8021650:	42ab      	cmp	r3, r5
 8021652:	dd27      	ble.n	80216a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8021654:	b340      	cbz	r0, 80216a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8021656:	3301      	adds	r3, #1
 8021658:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 802165c:	280f      	cmp	r0, #15
 802165e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021662:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021666:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802166a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802166e:	d801      	bhi.n	8021674 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8021670:	2f0f      	cmp	r7, #15
 8021672:	d91b      	bls.n	80216ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8021674:	4b89      	ldr	r3, [pc, #548]	; (802189c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8021676:	f240 1157 	movw	r1, #343	; 0x157
 802167a:	4a89      	ldr	r2, [pc, #548]	; (80218a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802167c:	4889      	ldr	r0, [pc, #548]	; (80218a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 802167e:	f003 fee9 	bl	8025454 <__assert_func>
 8021682:	2200      	movs	r2, #0
 8021684:	e7d0      	b.n	8021628 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8021686:	2600      	movs	r6, #0
 8021688:	4632      	mov	r2, r6
 802168a:	e7d4      	b.n	8021636 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 802168c:	2600      	movs	r6, #0
 802168e:	e7d2      	b.n	8021636 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8021690:	4606      	mov	r6, r0
 8021692:	e7d0      	b.n	8021636 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8021694:	2400      	movs	r4, #0
 8021696:	e7d9      	b.n	802164c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8021698:	2300      	movs	r3, #0
 802169a:	461c      	mov	r4, r3
 802169c:	e7de      	b.n	802165c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 802169e:	463b      	mov	r3, r7
 80216a0:	463c      	mov	r4, r7
 80216a2:	e7db      	b.n	802165c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80216a4:	2300      	movs	r3, #0
 80216a6:	e7d9      	b.n	802165c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80216a8:	4603      	mov	r3, r0
 80216aa:	e7d7      	b.n	802165c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80216ac:	b280      	uxth	r0, r0
 80216ae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80216b2:	b2bf      	uxth	r7, r7
 80216b4:	fb00 fe07 	mul.w	lr, r0, r7
 80216b8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80216bc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80216c0:	eba0 0c0e 	sub.w	ip, r0, lr
 80216c4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80216c8:	b2bf      	uxth	r7, r7
 80216ca:	fa1f fc8c 	uxth.w	ip, ip
 80216ce:	eba5 0507 	sub.w	r5, r5, r7
 80216d2:	fb0c f00a 	mul.w	r0, ip, sl
 80216d6:	b2ad      	uxth	r5, r5
 80216d8:	fb05 000b 	mla	r0, r5, fp, r0
 80216dc:	fb07 0009 	mla	r0, r7, r9, r0
 80216e0:	fb0e 0008 	mla	r0, lr, r8, r0
 80216e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80216e8:	9001      	str	r0, [sp, #4]
 80216ea:	d018      	beq.n	802171e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 80216ec:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80216f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80216f4:	fb0b f000 	mul.w	r0, fp, r0
 80216f8:	fb0b fb02 	mul.w	fp, fp, r2
 80216fc:	0a02      	lsrs	r2, r0, #8
 80216fe:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021702:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021706:	4402      	add	r2, r0
 8021708:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802170c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021710:	0a12      	lsrs	r2, r2, #8
 8021712:	0a00      	lsrs	r0, r0, #8
 8021714:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021718:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802171c:	4302      	orrs	r2, r0
 802171e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021722:	d01a      	beq.n	802175a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8021724:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8021728:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802172c:	fb0a f000 	mul.w	r0, sl, r0
 8021730:	fb0a fa06 	mul.w	sl, sl, r6
 8021734:	0a06      	lsrs	r6, r0, #8
 8021736:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802173a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802173e:	4406      	add	r6, r0
 8021740:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021744:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021748:	0a36      	lsrs	r6, r6, #8
 802174a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802174e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021752:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021756:	ea46 060a 	orr.w	r6, r6, sl
 802175a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802175e:	d01b      	beq.n	8021798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8021760:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021764:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021768:	fb09 fa0a 	mul.w	sl, r9, sl
 802176c:	fb09 f004 	mul.w	r0, r9, r4
 8021770:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021774:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021778:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802177c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021780:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021784:	4454      	add	r4, sl
 8021786:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802178a:	0a24      	lsrs	r4, r4, #8
 802178c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021790:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021794:	ea44 0409 	orr.w	r4, r4, r9
 8021798:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802179c:	d01b      	beq.n	80217d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 802179e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80217a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80217a6:	fb08 f909 	mul.w	r9, r8, r9
 80217aa:	fb08 f003 	mul.w	r0, r8, r3
 80217ae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80217b2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80217b6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80217ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80217be:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80217c2:	444b      	add	r3, r9
 80217c4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80217c8:	0a1b      	lsrs	r3, r3, #8
 80217ca:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80217ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80217d2:	ea43 0308 	orr.w	r3, r3, r8
 80217d6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80217da:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80217de:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80217e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80217e6:	fb0c f000 	mul.w	r0, ip, r0
 80217ea:	fb0c f606 	mul.w	r6, ip, r6
 80217ee:	fb05 0808 	mla	r8, r5, r8, r0
 80217f2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80217f6:	fb05 6502 	mla	r5, r5, r2, r6
 80217fa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80217fe:	fb07 8800 	mla	r8, r7, r0, r8
 8021802:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8021806:	fb07 5704 	mla	r7, r7, r4, r5
 802180a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802180e:	fb0e 8000 	mla	r0, lr, r0, r8
 8021812:	fb0e 7e03 	mla	lr, lr, r3, r7
 8021816:	9b01      	ldr	r3, [sp, #4]
 8021818:	0a00      	lsrs	r0, r0, #8
 802181a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802181e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021822:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021826:	ea40 0e0e 	orr.w	lr, r0, lr
 802182a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802182e:	b280      	uxth	r0, r0
 8021830:	fa5f f48e 	uxtb.w	r4, lr
 8021834:	4343      	muls	r3, r0
 8021836:	fb14 f400 	smulbb	r4, r4, r0
 802183a:	1c5a      	adds	r2, r3, #1
 802183c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021840:	780b      	ldrb	r3, [r1, #0]
 8021842:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8021846:	b2d2      	uxtb	r2, r2
 8021848:	fb03 4302 	mla	r3, r3, r2, r4
 802184c:	b29b      	uxth	r3, r3
 802184e:	1c5c      	adds	r4, r3, #1
 8021850:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021854:	784c      	ldrb	r4, [r1, #1]
 8021856:	fb14 f402 	smulbb	r4, r4, r2
 802185a:	121b      	asrs	r3, r3, #8
 802185c:	700b      	strb	r3, [r1, #0]
 802185e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8021862:	fb03 4300 	mla	r3, r3, r0, r4
 8021866:	b29b      	uxth	r3, r3
 8021868:	1c5c      	adds	r4, r3, #1
 802186a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802186e:	121b      	asrs	r3, r3, #8
 8021870:	704b      	strb	r3, [r1, #1]
 8021872:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8021876:	f891 e002 	ldrb.w	lr, [r1, #2]
 802187a:	fb1e fe02 	smulbb	lr, lr, r2
 802187e:	fb03 ee00 	mla	lr, r3, r0, lr
 8021882:	fa1f fe8e 	uxth.w	lr, lr
 8021886:	f10e 0301 	add.w	r3, lr, #1
 802188a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802188e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021892:	f881 e002 	strb.w	lr, [r1, #2]
 8021896:	b003      	add	sp, #12
 8021898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802189c:	0802a10b 	.word	0x0802a10b
 80218a0:	0802a673 	.word	0x0802a673
 80218a4:	0802a1d4 	.word	0x0802a1d4

080218a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80218a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218ac:	ed2d 8b08 	vpush	{d8-d11}
 80218b0:	b09d      	sub	sp, #116	; 0x74
 80218b2:	eeb0 aa40 	vmov.f32	s20, s0
 80218b6:	eef0 9a60 	vmov.f32	s19, s1
 80218ba:	9219      	str	r2, [sp, #100]	; 0x64
 80218bc:	eeb0 9a41 	vmov.f32	s18, s2
 80218c0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80218c2:	eeb0 8a62 	vmov.f32	s16, s5
 80218c6:	9307      	str	r3, [sp, #28]
 80218c8:	eef0 8a43 	vmov.f32	s17, s6
 80218cc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80218d0:	eef0 ba44 	vmov.f32	s23, s8
 80218d4:	901b      	str	r0, [sp, #108]	; 0x6c
 80218d6:	eeb0 ba64 	vmov.f32	s22, s9
 80218da:	931a      	str	r3, [sp, #104]	; 0x68
 80218dc:	eef0 aa45 	vmov.f32	s21, s10
 80218e0:	6850      	ldr	r0, [r2, #4]
 80218e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80218e4:	6812      	ldr	r2, [r2, #0]
 80218e6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80218ea:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 80218ee:	fb00 1303 	mla	r3, r0, r3, r1
 80218f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218f6:	18d3      	adds	r3, r2, r3
 80218f8:	930a      	str	r3, [sp, #40]	; 0x28
 80218fa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80218fc:	681b      	ldr	r3, [r3, #0]
 80218fe:	9310      	str	r3, [sp, #64]	; 0x40
 8021900:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8021904:	930b      	str	r3, [sp, #44]	; 0x2c
 8021906:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021908:	2b00      	cmp	r3, #0
 802190a:	dc03      	bgt.n	8021914 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802190c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802190e:	2b00      	cmp	r3, #0
 8021910:	f340 8368 	ble.w	8021fe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8021914:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021916:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802191a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802191e:	1e48      	subs	r0, r1, #1
 8021920:	1e57      	subs	r7, r2, #1
 8021922:	9b07      	ldr	r3, [sp, #28]
 8021924:	2b00      	cmp	r3, #0
 8021926:	f340 8187 	ble.w	8021c38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802192a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802192e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021932:	d406      	bmi.n	8021942 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021934:	4584      	cmp	ip, r0
 8021936:	da04      	bge.n	8021942 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021938:	2b00      	cmp	r3, #0
 802193a:	db02      	blt.n	8021942 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802193c:	42bb      	cmp	r3, r7
 802193e:	f2c0 817c 	blt.w	8021c3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021942:	f11c 0c01 	adds.w	ip, ip, #1
 8021946:	f100 816c 	bmi.w	8021c22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802194a:	4561      	cmp	r1, ip
 802194c:	f2c0 8169 	blt.w	8021c22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8021950:	3301      	adds	r3, #1
 8021952:	f100 8166 	bmi.w	8021c22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8021956:	429a      	cmp	r2, r3
 8021958:	f2c0 8163 	blt.w	8021c22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802195c:	9b07      	ldr	r3, [sp, #28]
 802195e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021960:	9318      	str	r3, [sp, #96]	; 0x60
 8021962:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021964:	2b00      	cmp	r3, #0
 8021966:	f340 8186 	ble.w	8021c76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802196a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802196c:	142a      	asrs	r2, r5, #16
 802196e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021972:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021976:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802197a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802197e:	f100 81cb 	bmi.w	8021d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8021982:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021986:	4542      	cmp	r2, r8
 8021988:	f280 81c6 	bge.w	8021d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802198c:	2800      	cmp	r0, #0
 802198e:	f2c0 81c3 	blt.w	8021d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8021992:	f103 38ff 	add.w	r8, r3, #4294967295
 8021996:	4540      	cmp	r0, r8
 8021998:	f280 81be 	bge.w	8021d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802199c:	fa0f f38e 	sxth.w	r3, lr
 80219a0:	fb00 2203 	mla	r2, r0, r3, r2
 80219a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80219a6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80219aa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80219ae:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80219b2:	2900      	cmp	r1, #0
 80219b4:	f000 81a6 	beq.w	8021d04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 80219b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80219bc:	900c      	str	r0, [sp, #48]	; 0x30
 80219be:	0e00      	lsrs	r0, r0, #24
 80219c0:	9013      	str	r0, [sp, #76]	; 0x4c
 80219c2:	f1bc 0f00 	cmp.w	ip, #0
 80219c6:	d00f      	beq.n	80219e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80219c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80219cc:	3b01      	subs	r3, #1
 80219ce:	009b      	lsls	r3, r3, #2
 80219d0:	3304      	adds	r3, #4
 80219d2:	eb08 0003 	add.w	r0, r8, r3
 80219d6:	f858 3003 	ldr.w	r3, [r8, r3]
 80219da:	9308      	str	r3, [sp, #32]
 80219dc:	0e1b      	lsrs	r3, r3, #24
 80219de:	9311      	str	r3, [sp, #68]	; 0x44
 80219e0:	6843      	ldr	r3, [r0, #4]
 80219e2:	930d      	str	r3, [sp, #52]	; 0x34
 80219e4:	0e1b      	lsrs	r3, r3, #24
 80219e6:	9314      	str	r3, [sp, #80]	; 0x50
 80219e8:	b289      	uxth	r1, r1
 80219ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80219ec:	fa1f fc8c 	uxth.w	ip, ip
 80219f0:	0108      	lsls	r0, r1, #4
 80219f2:	fb01 f90c 	mul.w	r9, r1, ip
 80219f6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80219fa:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80219fe:	eba0 0809 	sub.w	r8, r0, r9
 8021a02:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021a04:	fa1f f18c 	uxth.w	r1, ip
 8021a08:	fa1f f888 	uxth.w	r8, r8
 8021a0c:	1a5b      	subs	r3, r3, r1
 8021a0e:	fb08 f000 	mul.w	r0, r8, r0
 8021a12:	b29b      	uxth	r3, r3
 8021a14:	fb03 000e 	mla	r0, r3, lr, r0
 8021a18:	fb01 0004 	mla	r0, r1, r4, r0
 8021a1c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021a1e:	fb09 0004 	mla	r0, r9, r4, r0
 8021a22:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021a26:	2800      	cmp	r0, #0
 8021a28:	f000 80f2 	beq.w	8021c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021a2c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021a30:	d01b      	beq.n	8021a6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021a32:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8021a36:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021a3a:	fb0e fa0a 	mul.w	sl, lr, sl
 8021a3e:	fb0e fe02 	mul.w	lr, lr, r2
 8021a42:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021a46:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021a4a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021a4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021a52:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021a56:	4452      	add	r2, sl
 8021a58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a5c:	0a12      	lsrs	r2, r2, #8
 8021a5e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a62:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021a66:	ea42 020c 	orr.w	r2, r2, ip
 8021a6a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021a6c:	2cff      	cmp	r4, #255	; 0xff
 8021a6e:	d021      	beq.n	8021ab4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021a70:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021a72:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021a76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021a78:	fb04 fb0b 	mul.w	fp, r4, fp
 8021a7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021a7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021a82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021a84:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021a88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021a8c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021a90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021a94:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021a98:	44de      	add	lr, fp
 8021a9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021a9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021aa2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021aa6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021aaa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021aae:	ea4e 040a 	orr.w	r4, lr, sl
 8021ab2:	940c      	str	r4, [sp, #48]	; 0x30
 8021ab4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ab6:	2cff      	cmp	r4, #255	; 0xff
 8021ab8:	d021      	beq.n	8021afe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8021aba:	9c08      	ldr	r4, [sp, #32]
 8021abc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021ac0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ac2:	fb04 fb0b 	mul.w	fp, r4, fp
 8021ac6:	9c08      	ldr	r4, [sp, #32]
 8021ac8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021acc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ace:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021ad2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021ad6:	fb04 fa0a 	mul.w	sl, r4, sl
 8021ada:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ade:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021ae2:	44de      	add	lr, fp
 8021ae4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021ae8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021aec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021af0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021af4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021af8:	ea4e 040a 	orr.w	r4, lr, sl
 8021afc:	9408      	str	r4, [sp, #32]
 8021afe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021b00:	2cff      	cmp	r4, #255	; 0xff
 8021b02:	d021      	beq.n	8021b48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021b04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021b06:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021b0a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021b0c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b10:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021b12:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021b16:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021b18:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b1c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b20:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b28:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b2c:	44de      	add	lr, fp
 8021b2e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b42:	ea4e 040a 	orr.w	r4, lr, sl
 8021b46:	940d      	str	r4, [sp, #52]	; 0x34
 8021b48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021b4a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021b4e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021b52:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021b56:	9c08      	ldr	r4, [sp, #32]
 8021b58:	fb08 fc0c 	mul.w	ip, r8, ip
 8021b5c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8021b60:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021b64:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021b66:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021b6a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021b6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021b70:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021b74:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021b78:	fb08 f80e 	mul.w	r8, r8, lr
 8021b7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021b80:	fb03 8202 	mla	r2, r3, r2, r8
 8021b84:	9b08      	ldr	r3, [sp, #32]
 8021b86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021b8a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8021b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b90:	fb01 220a 	mla	r2, r1, sl, r2
 8021b94:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8021b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b9a:	fb09 2901 	mla	r9, r9, r1, r2
 8021b9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021ba0:	4343      	muls	r3, r0
 8021ba2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021ba6:	1c58      	adds	r0, r3, #1
 8021ba8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021bac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021bb0:	783b      	ldrb	r3, [r7, #0]
 8021bb2:	ea4c 0c09 	orr.w	ip, ip, r9
 8021bb6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021bba:	fa5f f28c 	uxtb.w	r2, ip
 8021bbe:	b2c0      	uxtb	r0, r0
 8021bc0:	fb12 f201 	smulbb	r2, r2, r1
 8021bc4:	fb03 2300 	mla	r3, r3, r0, r2
 8021bc8:	b29b      	uxth	r3, r3
 8021bca:	1c5a      	adds	r2, r3, #1
 8021bcc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021bd0:	787a      	ldrb	r2, [r7, #1]
 8021bd2:	fb12 f200 	smulbb	r2, r2, r0
 8021bd6:	121b      	asrs	r3, r3, #8
 8021bd8:	703b      	strb	r3, [r7, #0]
 8021bda:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021bde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021be2:	fb03 2301 	mla	r3, r3, r1, r2
 8021be6:	b29b      	uxth	r3, r3
 8021be8:	1c5a      	adds	r2, r3, #1
 8021bea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021bee:	121b      	asrs	r3, r3, #8
 8021bf0:	707b      	strb	r3, [r7, #1]
 8021bf2:	78bb      	ldrb	r3, [r7, #2]
 8021bf4:	fb13 f000 	smulbb	r0, r3, r0
 8021bf8:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021bfc:	fa1f fc8c 	uxth.w	ip, ip
 8021c00:	f10c 0301 	add.w	r3, ip, #1
 8021c04:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021c08:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021c0c:	f887 c002 	strb.w	ip, [r7, #2]
 8021c10:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021c12:	3703      	adds	r7, #3
 8021c14:	441d      	add	r5, r3
 8021c16:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021c18:	441e      	add	r6, r3
 8021c1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021c1c:	3b01      	subs	r3, #1
 8021c1e:	9318      	str	r3, [sp, #96]	; 0x60
 8021c20:	e69f      	b.n	8021962 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8021c22:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021c24:	441d      	add	r5, r3
 8021c26:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021c28:	441e      	add	r6, r3
 8021c2a:	9b07      	ldr	r3, [sp, #28]
 8021c2c:	3b01      	subs	r3, #1
 8021c2e:	9307      	str	r3, [sp, #28]
 8021c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c32:	3303      	adds	r3, #3
 8021c34:	930a      	str	r3, [sp, #40]	; 0x28
 8021c36:	e674      	b.n	8021922 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021c38:	d025      	beq.n	8021c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8021c3a:	9b07      	ldr	r3, [sp, #28]
 8021c3c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8021c3e:	3b01      	subs	r3, #1
 8021c40:	fb00 5003 	mla	r0, r0, r3, r5
 8021c44:	1400      	asrs	r0, r0, #16
 8021c46:	f53f ae89 	bmi.w	802195c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021c4a:	3901      	subs	r1, #1
 8021c4c:	4288      	cmp	r0, r1
 8021c4e:	f6bf ae85 	bge.w	802195c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021c52:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8021c54:	fb01 6303 	mla	r3, r1, r3, r6
 8021c58:	141b      	asrs	r3, r3, #16
 8021c5a:	f53f ae7f 	bmi.w	802195c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021c5e:	3a01      	subs	r2, #1
 8021c60:	4293      	cmp	r3, r2
 8021c62:	f6bf ae7b 	bge.w	802195c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c68:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021c6c:	f103 0e03 	add.w	lr, r3, #3
 8021c70:	f1bb 0f00 	cmp.w	fp, #0
 8021c74:	dc6e      	bgt.n	8021d54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021c76:	9b07      	ldr	r3, [sp, #28]
 8021c78:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021c82:	4423      	add	r3, r4
 8021c84:	930a      	str	r3, [sp, #40]	; 0x28
 8021c86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	f340 81ab 	ble.w	8021fe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8021c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021c92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c94:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021c98:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021c9c:	eef0 6a48 	vmov.f32	s13, s16
 8021ca0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021ca4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021ca8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cac:	ee16 5a90 	vmov	r5, s13
 8021cb0:	eef0 6a68 	vmov.f32	s13, s17
 8021cb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cb8:	ee16 6a90 	vmov	r6, s13
 8021cbc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021cc0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021cc4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021cc8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021ccc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021cd0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021cd4:	ee18 2a10 	vmov	r2, s16
 8021cd8:	eeb0 8a47 	vmov.f32	s16, s14
 8021cdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ce0:	ee18 2a90 	vmov	r2, s17
 8021ce4:	9331      	str	r3, [sp, #196]	; 0xc4
 8021ce6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021ce8:	eef0 8a67 	vmov.f32	s17, s15
 8021cec:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cf0:	9332      	str	r3, [sp, #200]	; 0xc8
 8021cf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021cf4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021cf6:	3b01      	subs	r3, #1
 8021cf8:	9317      	str	r3, [sp, #92]	; 0x5c
 8021cfa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021cfc:	bf08      	it	eq
 8021cfe:	4613      	moveq	r3, r2
 8021d00:	9307      	str	r3, [sp, #28]
 8021d02:	e600      	b.n	8021906 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021d04:	f1bc 0f00 	cmp.w	ip, #0
 8021d08:	f43f ae6e 	beq.w	80219e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8021d0c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021d10:	9308      	str	r3, [sp, #32]
 8021d12:	0e1b      	lsrs	r3, r3, #24
 8021d14:	9311      	str	r3, [sp, #68]	; 0x44
 8021d16:	e667      	b.n	80219e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8021d18:	f112 0801 	adds.w	r8, r2, #1
 8021d1c:	f53f af78 	bmi.w	8021c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021d20:	45c6      	cmp	lr, r8
 8021d22:	f6ff af75 	blt.w	8021c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021d26:	f110 0801 	adds.w	r8, r0, #1
 8021d2a:	f53f af71 	bmi.w	8021c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021d2e:	4543      	cmp	r3, r8
 8021d30:	f6ff af6e 	blt.w	8021c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021d34:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021d36:	b21b      	sxth	r3, r3
 8021d38:	9201      	str	r2, [sp, #4]
 8021d3a:	9300      	str	r3, [sp, #0]
 8021d3c:	fa0f f38e 	sxth.w	r3, lr
 8021d40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021d46:	e9cd c404 	strd	ip, r4, [sp, #16]
 8021d4a:	4639      	mov	r1, r7
 8021d4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021d4e:	f7ff fc53 	bl	80215f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021d52:	e75d      	b.n	8021c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021d54:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021d56:	142f      	asrs	r7, r5, #16
 8021d58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021d5a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021d5e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8021d62:	1433      	asrs	r3, r6, #16
 8021d64:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021d68:	fb02 7303 	mla	r3, r2, r3, r7
 8021d6c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8021d70:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8021d74:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021d78:	2900      	cmp	r1, #0
 8021d7a:	f000 812a 	beq.w	8021fd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 8021d7e:	687c      	ldr	r4, [r7, #4]
 8021d80:	940e      	str	r4, [sp, #56]	; 0x38
 8021d82:	0e24      	lsrs	r4, r4, #24
 8021d84:	9415      	str	r4, [sp, #84]	; 0x54
 8021d86:	b178      	cbz	r0, 8021da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8021d88:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8021d8c:	3a01      	subs	r2, #1
 8021d8e:	0092      	lsls	r2, r2, #2
 8021d90:	3204      	adds	r2, #4
 8021d92:	eb07 0802 	add.w	r8, r7, r2
 8021d96:	58ba      	ldr	r2, [r7, r2]
 8021d98:	9209      	str	r2, [sp, #36]	; 0x24
 8021d9a:	0e12      	lsrs	r2, r2, #24
 8021d9c:	9212      	str	r2, [sp, #72]	; 0x48
 8021d9e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8021da2:	920f      	str	r2, [sp, #60]	; 0x3c
 8021da4:	0e12      	lsrs	r2, r2, #24
 8021da6:	9216      	str	r2, [sp, #88]	; 0x58
 8021da8:	b289      	uxth	r1, r1
 8021daa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021dac:	b280      	uxth	r0, r0
 8021dae:	fb01 f900 	mul.w	r9, r1, r0
 8021db2:	0109      	lsls	r1, r1, #4
 8021db4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021db8:	eba1 0809 	sub.w	r8, r1, r9
 8021dbc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021dc0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021dc2:	b280      	uxth	r0, r0
 8021dc4:	fa1f f888 	uxth.w	r8, r8
 8021dc8:	1a12      	subs	r2, r2, r0
 8021dca:	fb08 f101 	mul.w	r1, r8, r1
 8021dce:	b292      	uxth	r2, r2
 8021dd0:	fb02 110c 	mla	r1, r2, ip, r1
 8021dd4:	fb00 1104 	mla	r1, r0, r4, r1
 8021dd8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021dda:	fb09 1104 	mla	r1, r9, r4, r1
 8021dde:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021de2:	2900      	cmp	r1, #0
 8021de4:	f000 80ec 	beq.w	8021fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021de8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021dec:	d019      	beq.n	8021e22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 8021dee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021df6:	fb0c fa0a 	mul.w	sl, ip, sl
 8021dfa:	fb0c fc03 	mul.w	ip, ip, r3
 8021dfe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021e02:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e06:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021e0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e0e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021e12:	4453      	add	r3, sl
 8021e14:	0a3f      	lsrs	r7, r7, #8
 8021e16:	0a1b      	lsrs	r3, r3, #8
 8021e18:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021e1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e20:	433b      	orrs	r3, r7
 8021e22:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021e24:	2cff      	cmp	r4, #255	; 0xff
 8021e26:	d020      	beq.n	8021e6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8021e28:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021e2a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021e2e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021e30:	4367      	muls	r7, r4
 8021e32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021e34:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021e38:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021e3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021e3e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021e42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e46:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e4a:	44bc      	add	ip, r7
 8021e4c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021e50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e54:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021e58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021e64:	ea4c 040a 	orr.w	r4, ip, sl
 8021e68:	940e      	str	r4, [sp, #56]	; 0x38
 8021e6a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e6c:	2cff      	cmp	r4, #255	; 0xff
 8021e6e:	d020      	beq.n	8021eb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8021e70:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021e72:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021e76:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e78:	4367      	muls	r7, r4
 8021e7a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021e7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021e80:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021e84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e86:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021e8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e8e:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e92:	44bc      	add	ip, r7
 8021e94:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021e98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ea0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ea4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ea8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021eac:	ea4c 040a 	orr.w	r4, ip, sl
 8021eb0:	9409      	str	r4, [sp, #36]	; 0x24
 8021eb2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021eb4:	2cff      	cmp	r4, #255	; 0xff
 8021eb6:	d020      	beq.n	8021efa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8021eb8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021eba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021ebe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021ec0:	4367      	muls	r7, r4
 8021ec2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021ec4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021ec8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021ecc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021ece:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021ed2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ed6:	fb04 fa0a 	mul.w	sl, r4, sl
 8021eda:	44bc      	add	ip, r7
 8021edc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021ee0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ee4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ee8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021eec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ef0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ef4:	ea4c 040a 	orr.w	r4, ip, sl
 8021ef8:	940f      	str	r4, [sp, #60]	; 0x3c
 8021efa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021efc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021f00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f04:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021f08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021f0a:	fb08 f707 	mul.w	r7, r8, r7
 8021f0e:	fb02 770c 	mla	r7, r2, ip, r7
 8021f12:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f16:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021f18:	fb00 770c 	mla	r7, r0, ip, r7
 8021f1c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f22:	fb09 770c 	mla	r7, r9, ip, r7
 8021f26:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021f2a:	fb08 f80c 	mul.w	r8, r8, ip
 8021f2e:	0a3f      	lsrs	r7, r7, #8
 8021f30:	fb02 8303 	mla	r3, r2, r3, r8
 8021f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f36:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021f3a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021f40:	fb00 330a 	mla	r3, r0, sl, r3
 8021f44:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021f48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021f4a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021f50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f54:	434b      	muls	r3, r1
 8021f56:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021f5a:	1c59      	adds	r1, r3, #1
 8021f5c:	ea47 070c 	orr.w	r7, r7, ip
 8021f60:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021f64:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021f68:	b2fa      	uxtb	r2, r7
 8021f6a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021f6e:	fb12 f200 	smulbb	r2, r2, r0
 8021f72:	b2c9      	uxtb	r1, r1
 8021f74:	fb03 2301 	mla	r3, r3, r1, r2
 8021f78:	b29b      	uxth	r3, r3
 8021f7a:	1c5a      	adds	r2, r3, #1
 8021f7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021f80:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021f84:	fb12 f201 	smulbb	r2, r2, r1
 8021f88:	121b      	asrs	r3, r3, #8
 8021f8a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021f8e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021f92:	0c3f      	lsrs	r7, r7, #16
 8021f94:	fb03 2300 	mla	r3, r3, r0, r2
 8021f98:	b29b      	uxth	r3, r3
 8021f9a:	1c5a      	adds	r2, r3, #1
 8021f9c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021fa0:	121b      	asrs	r3, r3, #8
 8021fa2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021fa6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021faa:	fb13 f101 	smulbb	r1, r3, r1
 8021fae:	fb07 1700 	mla	r7, r7, r0, r1
 8021fb2:	b2bf      	uxth	r7, r7
 8021fb4:	1c79      	adds	r1, r7, #1
 8021fb6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021fba:	123f      	asrs	r7, r7, #8
 8021fbc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021fc0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021fc2:	f10e 0e03 	add.w	lr, lr, #3
 8021fc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021fca:	441d      	add	r5, r3
 8021fcc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021fce:	441e      	add	r6, r3
 8021fd0:	e64e      	b.n	8021c70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8021fd2:	2800      	cmp	r0, #0
 8021fd4:	f43f aee8 	beq.w	8021da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8021fd8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8021fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8021fde:	0e12      	lsrs	r2, r2, #24
 8021fe0:	9212      	str	r2, [sp, #72]	; 0x48
 8021fe2:	e6e1      	b.n	8021da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8021fe4:	b01d      	add	sp, #116	; 0x74
 8021fe6:	ecbd 8b08 	vpop	{d8-d11}
 8021fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021ff0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ff4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8021ff8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021ffc:	fb04 5603 	mla	r6, r4, r3, r5
 8022000:	2c00      	cmp	r4, #0
 8022002:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8022006:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802200a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802200e:	db36      	blt.n	802207e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8022010:	45a6      	cmp	lr, r4
 8022012:	dd34      	ble.n	802207e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8022014:	2d00      	cmp	r5, #0
 8022016:	db30      	blt.n	802207a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8022018:	42ab      	cmp	r3, r5
 802201a:	dd2e      	ble.n	802207a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 802201c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022020:	1c6e      	adds	r6, r5, #1
 8022022:	d42f      	bmi.n	8022084 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8022024:	42b3      	cmp	r3, r6
 8022026:	dd2d      	ble.n	8022084 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8022028:	b370      	cbz	r0, 8022088 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 802202a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802202e:	3401      	adds	r4, #1
 8022030:	d42e      	bmi.n	8022090 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8022032:	45a6      	cmp	lr, r4
 8022034:	dd2c      	ble.n	8022090 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8022036:	b377      	cbz	r7, 8022096 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8022038:	2d00      	cmp	r5, #0
 802203a:	db27      	blt.n	802208c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 802203c:	42ab      	cmp	r3, r5
 802203e:	dd25      	ble.n	802208c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8022040:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022044:	3501      	adds	r5, #1
 8022046:	d429      	bmi.n	802209c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8022048:	42ab      	cmp	r3, r5
 802204a:	dd27      	ble.n	802209c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 802204c:	b340      	cbz	r0, 80220a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 802204e:	3301      	adds	r3, #1
 8022050:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8022054:	280f      	cmp	r0, #15
 8022056:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802205a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802205e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022062:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022066:	d801      	bhi.n	802206c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8022068:	2f0f      	cmp	r7, #15
 802206a:	d91b      	bls.n	80220a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 802206c:	4b7e      	ldr	r3, [pc, #504]	; (8022268 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 802206e:	f240 1157 	movw	r1, #343	; 0x157
 8022072:	4a7e      	ldr	r2, [pc, #504]	; (802226c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8022074:	487e      	ldr	r0, [pc, #504]	; (8022270 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8022076:	f003 f9ed 	bl	8025454 <__assert_func>
 802207a:	2200      	movs	r2, #0
 802207c:	e7d0      	b.n	8022020 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 802207e:	2600      	movs	r6, #0
 8022080:	4632      	mov	r2, r6
 8022082:	e7d4      	b.n	802202e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022084:	2600      	movs	r6, #0
 8022086:	e7d2      	b.n	802202e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022088:	4606      	mov	r6, r0
 802208a:	e7d0      	b.n	802202e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 802208c:	2400      	movs	r4, #0
 802208e:	e7d9      	b.n	8022044 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8022090:	2300      	movs	r3, #0
 8022092:	461c      	mov	r4, r3
 8022094:	e7de      	b.n	8022054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022096:	463b      	mov	r3, r7
 8022098:	463c      	mov	r4, r7
 802209a:	e7db      	b.n	8022054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 802209c:	2300      	movs	r3, #0
 802209e:	e7d9      	b.n	8022054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80220a0:	4603      	mov	r3, r0
 80220a2:	e7d7      	b.n	8022054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80220a4:	b280      	uxth	r0, r0
 80220a6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80220aa:	b2bf      	uxth	r7, r7
 80220ac:	fb00 fe07 	mul.w	lr, r0, r7
 80220b0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80220b4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80220b8:	eba0 0c0e 	sub.w	ip, r0, lr
 80220bc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80220c0:	b2bf      	uxth	r7, r7
 80220c2:	fa1f fc8c 	uxth.w	ip, ip
 80220c6:	eba0 0507 	sub.w	r5, r0, r7
 80220ca:	fb0c f00a 	mul.w	r0, ip, sl
 80220ce:	b2ad      	uxth	r5, r5
 80220d0:	fb05 000b 	mla	r0, r5, fp, r0
 80220d4:	fb07 0009 	mla	r0, r7, r9, r0
 80220d8:	fb0e 0008 	mla	r0, lr, r8, r0
 80220dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80220e0:	9001      	str	r0, [sp, #4]
 80220e2:	d018      	beq.n	8022116 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 80220e4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80220e8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80220ec:	fb0b f000 	mul.w	r0, fp, r0
 80220f0:	fb0b fb02 	mul.w	fp, fp, r2
 80220f4:	0a02      	lsrs	r2, r0, #8
 80220f6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80220fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80220fe:	4402      	add	r2, r0
 8022100:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022104:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022108:	0a12      	lsrs	r2, r2, #8
 802210a:	0a00      	lsrs	r0, r0, #8
 802210c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022110:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022114:	4302      	orrs	r2, r0
 8022116:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802211a:	d01a      	beq.n	8022152 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 802211c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022120:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022124:	fb0a f000 	mul.w	r0, sl, r0
 8022128:	fb0a fa06 	mul.w	sl, sl, r6
 802212c:	0a06      	lsrs	r6, r0, #8
 802212e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022132:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022136:	4406      	add	r6, r0
 8022138:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802213c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022140:	0a36      	lsrs	r6, r6, #8
 8022142:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022146:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802214a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802214e:	ea46 060a 	orr.w	r6, r6, sl
 8022152:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022156:	d01b      	beq.n	8022190 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8022158:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802215c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022160:	fb09 fa0a 	mul.w	sl, r9, sl
 8022164:	fb09 f004 	mul.w	r0, r9, r4
 8022168:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802216c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022170:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8022174:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022178:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802217c:	4454      	add	r4, sl
 802217e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022182:	0a24      	lsrs	r4, r4, #8
 8022184:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022188:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802218c:	ea44 0409 	orr.w	r4, r4, r9
 8022190:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022194:	d01b      	beq.n	80221ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8022196:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802219a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802219e:	fb08 f909 	mul.w	r9, r8, r9
 80221a2:	fb08 f003 	mul.w	r0, r8, r3
 80221a6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80221aa:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80221ae:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80221b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221b6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80221ba:	444b      	add	r3, r9
 80221bc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80221c0:	0a1b      	lsrs	r3, r3, #8
 80221c2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80221c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221ca:	ea43 0308 	orr.w	r3, r3, r8
 80221ce:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80221d2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80221d6:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80221da:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80221de:	fb0c f000 	mul.w	r0, ip, r0
 80221e2:	fb0c f606 	mul.w	r6, ip, r6
 80221e6:	fb05 0808 	mla	r8, r5, r8, r0
 80221ea:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80221ee:	fb05 6502 	mla	r5, r5, r2, r6
 80221f2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80221f6:	fb07 8800 	mla	r8, r7, r0, r8
 80221fa:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80221fe:	fb07 5704 	mla	r7, r7, r4, r5
 8022202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022206:	fb0e 8000 	mla	r0, lr, r0, r8
 802220a:	780a      	ldrb	r2, [r1, #0]
 802220c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022210:	9b01      	ldr	r3, [sp, #4]
 8022212:	0a00      	lsrs	r0, r0, #8
 8022214:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022218:	43db      	mvns	r3, r3
 802221a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802221e:	b2db      	uxtb	r3, r3
 8022220:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022224:	ea40 0e0e 	orr.w	lr, r0, lr
 8022228:	fb02 f003 	mul.w	r0, r2, r3
 802222c:	1c42      	adds	r2, r0, #1
 802222e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022232:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022236:	700a      	strb	r2, [r1, #0]
 8022238:	784a      	ldrb	r2, [r1, #1]
 802223a:	435a      	muls	r2, r3
 802223c:	1c50      	adds	r0, r2, #1
 802223e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022242:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022246:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802224a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802224e:	704a      	strb	r2, [r1, #1]
 8022250:	788a      	ldrb	r2, [r1, #2]
 8022252:	4353      	muls	r3, r2
 8022254:	1c5a      	adds	r2, r3, #1
 8022256:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802225a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802225e:	f881 e002 	strb.w	lr, [r1, #2]
 8022262:	b003      	add	sp, #12
 8022264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022268:	0802a10b 	.word	0x0802a10b
 802226c:	0802a673 	.word	0x0802a673
 8022270:	0802a1d4 	.word	0x0802a1d4

08022274 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022278:	ed2d 8b08 	vpush	{d8-d11}
 802227c:	b099      	sub	sp, #100	; 0x64
 802227e:	eeb0 aa40 	vmov.f32	s20, s0
 8022282:	eef0 9a60 	vmov.f32	s19, s1
 8022286:	9017      	str	r0, [sp, #92]	; 0x5c
 8022288:	eeb0 9a41 	vmov.f32	s18, s2
 802228c:	9306      	str	r3, [sp, #24]
 802228e:	eeb0 8a62 	vmov.f32	s16, s5
 8022292:	eef0 8a43 	vmov.f32	s17, s6
 8022296:	eef0 ba44 	vmov.f32	s23, s8
 802229a:	eeb0 ba64 	vmov.f32	s22, s9
 802229e:	eef0 aa45 	vmov.f32	s21, s10
 80222a2:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 80222a6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80222a8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80222ac:	6850      	ldr	r0, [r2, #4]
 80222ae:	6812      	ldr	r2, [r2, #0]
 80222b0:	fb00 1303 	mla	r3, r0, r3, r1
 80222b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222b8:	18d3      	adds	r3, r2, r3
 80222ba:	9309      	str	r3, [sp, #36]	; 0x24
 80222bc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80222be:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 80222c2:	681b      	ldr	r3, [r3, #0]
 80222c4:	930e      	str	r3, [sp, #56]	; 0x38
 80222c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80222c8:	2b00      	cmp	r3, #0
 80222ca:	dc03      	bgt.n	80222d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80222cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	f340 8360 	ble.w	8022994 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80222d4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80222d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80222de:	1e48      	subs	r0, r1, #1
 80222e0:	1e57      	subs	r7, r2, #1
 80222e2:	9b06      	ldr	r3, [sp, #24]
 80222e4:	2b00      	cmp	r3, #0
 80222e6:	f340 817b 	ble.w	80225e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80222ea:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80222ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80222f2:	d406      	bmi.n	8022302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80222f4:	4584      	cmp	ip, r0
 80222f6:	da04      	bge.n	8022302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	db02      	blt.n	8022302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80222fc:	42bb      	cmp	r3, r7
 80222fe:	f2c0 8170 	blt.w	80225e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022302:	f11c 0c01 	adds.w	ip, ip, #1
 8022306:	f100 8160 	bmi.w	80225ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802230a:	4561      	cmp	r1, ip
 802230c:	f2c0 815d 	blt.w	80225ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022310:	3301      	adds	r3, #1
 8022312:	f100 815a 	bmi.w	80225ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022316:	429a      	cmp	r2, r3
 8022318:	f2c0 8157 	blt.w	80225ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802231c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022320:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022322:	f1b8 0f00 	cmp.w	r8, #0
 8022326:	f340 8179 	ble.w	802261c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802232a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 802232c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022330:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022332:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022336:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802233a:	142a      	asrs	r2, r5, #16
 802233c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022340:	689b      	ldr	r3, [r3, #8]
 8022342:	f100 81be 	bmi.w	80226c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022346:	f103 39ff 	add.w	r9, r3, #4294967295
 802234a:	454a      	cmp	r2, r9
 802234c:	f280 81b9 	bge.w	80226c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022350:	f1bc 0f00 	cmp.w	ip, #0
 8022354:	f2c0 81b5 	blt.w	80226c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022358:	f10e 39ff 	add.w	r9, lr, #4294967295
 802235c:	45cc      	cmp	ip, r9
 802235e:	f280 81b0 	bge.w	80226c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022362:	b21b      	sxth	r3, r3
 8022364:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022366:	fb0c 2203 	mla	r2, ip, r3, r2
 802236a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802236e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022372:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022376:	2900      	cmp	r1, #0
 8022378:	f000 8197 	beq.w	80226aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 802237c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8022380:	940a      	str	r4, [sp, #40]	; 0x28
 8022382:	0e24      	lsrs	r4, r4, #24
 8022384:	9411      	str	r4, [sp, #68]	; 0x44
 8022386:	b180      	cbz	r0, 80223aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802238c:	3b01      	subs	r3, #1
 802238e:	009b      	lsls	r3, r3, #2
 8022390:	3304      	adds	r3, #4
 8022392:	eb09 0c03 	add.w	ip, r9, r3
 8022396:	f859 3003 	ldr.w	r3, [r9, r3]
 802239a:	9307      	str	r3, [sp, #28]
 802239c:	0e1b      	lsrs	r3, r3, #24
 802239e:	930f      	str	r3, [sp, #60]	; 0x3c
 80223a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80223a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80223a6:	0e1b      	lsrs	r3, r3, #24
 80223a8:	9312      	str	r3, [sp, #72]	; 0x48
 80223aa:	b289      	uxth	r1, r1
 80223ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80223ae:	b280      	uxth	r0, r0
 80223b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80223b2:	fb01 fa00 	mul.w	sl, r1, r0
 80223b6:	0109      	lsls	r1, r1, #4
 80223b8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80223bc:	eba1 090a 	sub.w	r9, r1, sl
 80223c0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80223c4:	b280      	uxth	r0, r0
 80223c6:	fa1f f989 	uxth.w	r9, r9
 80223ca:	1a09      	subs	r1, r1, r0
 80223cc:	fb09 f303 	mul.w	r3, r9, r3
 80223d0:	b289      	uxth	r1, r1
 80223d2:	fb01 330e 	mla	r3, r1, lr, r3
 80223d6:	fb00 3304 	mla	r3, r0, r4, r3
 80223da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80223dc:	fb0a 3304 	mla	r3, sl, r4, r3
 80223e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80223e4:	2b00      	cmp	r3, #0
 80223e6:	f000 80e8 	beq.w	80225ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80223ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80223ee:	d01b      	beq.n	8022428 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80223f0:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80223f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80223f8:	fb0e fb0b 	mul.w	fp, lr, fp
 80223fc:	fb0e fe02 	mul.w	lr, lr, r2
 8022400:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8022404:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022408:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802240c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022410:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022414:	445a      	add	r2, fp
 8022416:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802241a:	0a12      	lsrs	r2, r2, #8
 802241c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022420:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022424:	ea42 020c 	orr.w	r2, r2, ip
 8022428:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802242a:	2cff      	cmp	r4, #255	; 0xff
 802242c:	d021      	beq.n	8022472 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802242e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022430:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022434:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022436:	fb04 fc0c 	mul.w	ip, r4, ip
 802243a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802243c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022440:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022444:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022446:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802244a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802244e:	fb04 fb0b 	mul.w	fp, r4, fp
 8022452:	44e6      	add	lr, ip
 8022454:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022458:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802245c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022460:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022464:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022468:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802246c:	ea4e 040b 	orr.w	r4, lr, fp
 8022470:	940a      	str	r4, [sp, #40]	; 0x28
 8022472:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022474:	2cff      	cmp	r4, #255	; 0xff
 8022476:	d021      	beq.n	80224bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022478:	9c07      	ldr	r4, [sp, #28]
 802247a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802247e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022480:	fb04 fc0c 	mul.w	ip, r4, ip
 8022484:	9c07      	ldr	r4, [sp, #28]
 8022486:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802248a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802248e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022490:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022494:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022498:	fb04 fb0b 	mul.w	fp, r4, fp
 802249c:	44e6      	add	lr, ip
 802249e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80224a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224a6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80224aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224ae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80224b2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80224b6:	ea4e 040b 	orr.w	r4, lr, fp
 80224ba:	9407      	str	r4, [sp, #28]
 80224bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80224be:	2cff      	cmp	r4, #255	; 0xff
 80224c0:	d021      	beq.n	8022506 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80224c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80224c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80224c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80224ca:	fb04 fc0c 	mul.w	ip, r4, ip
 80224ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80224d0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80224d4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80224d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80224da:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80224de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80224e6:	44e6      	add	lr, ip
 80224e8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80224ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224f0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80224f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224f8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80224fc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022500:	ea4e 040b 	orr.w	r4, lr, fp
 8022504:	940b      	str	r4, [sp, #44]	; 0x2c
 8022506:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022508:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802250c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022510:	2bff      	cmp	r3, #255	; 0xff
 8022512:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022516:	9c07      	ldr	r4, [sp, #28]
 8022518:	fb09 fc0c 	mul.w	ip, r9, ip
 802251c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022520:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022524:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022526:	fb00 cc0e 	mla	ip, r0, lr, ip
 802252a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802252e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022530:	fb0a cc0e 	mla	ip, sl, lr, ip
 8022534:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022538:	fb09 f90e 	mul.w	r9, r9, lr
 802253c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022540:	fb01 9202 	mla	r2, r1, r2, r9
 8022544:	9907      	ldr	r1, [sp, #28]
 8022546:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802254a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 802254e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022550:	fb00 220b 	mla	r2, r0, fp, r2
 8022554:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022558:	fb0a 2a00 	mla	sl, sl, r0, r2
 802255c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022560:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022564:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022568:	fa5f f08c 	uxtb.w	r0, ip
 802256c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022570:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022574:	f000 80a2 	beq.w	80226bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8022578:	43db      	mvns	r3, r3
 802257a:	783a      	ldrb	r2, [r7, #0]
 802257c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8022580:	b2db      	uxtb	r3, r3
 8022582:	fb02 fe03 	mul.w	lr, r2, r3
 8022586:	fb0a fa03 	mul.w	sl, sl, r3
 802258a:	f10e 0201 	add.w	r2, lr, #1
 802258e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8022592:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022596:	703a      	strb	r2, [r7, #0]
 8022598:	787a      	ldrb	r2, [r7, #1]
 802259a:	fb02 f003 	mul.w	r0, r2, r3
 802259e:	f10a 0301 	add.w	r3, sl, #1
 80225a2:	1c42      	adds	r2, r0, #1
 80225a4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80225a8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80225ac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80225b0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80225b4:	707a      	strb	r2, [r7, #1]
 80225b6:	f887 c002 	strb.w	ip, [r7, #2]
 80225ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80225bc:	3703      	adds	r7, #3
 80225be:	f108 38ff 	add.w	r8, r8, #4294967295
 80225c2:	441d      	add	r5, r3
 80225c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80225c6:	441e      	add	r6, r3
 80225c8:	e6ab      	b.n	8022322 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80225ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80225cc:	441d      	add	r5, r3
 80225ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80225d0:	441e      	add	r6, r3
 80225d2:	9b06      	ldr	r3, [sp, #24]
 80225d4:	3b01      	subs	r3, #1
 80225d6:	9306      	str	r3, [sp, #24]
 80225d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225da:	3303      	adds	r3, #3
 80225dc:	9309      	str	r3, [sp, #36]	; 0x24
 80225de:	e680      	b.n	80222e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80225e0:	d024      	beq.n	802262c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 80225e2:	9b06      	ldr	r3, [sp, #24]
 80225e4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80225e6:	3b01      	subs	r3, #1
 80225e8:	fb00 5003 	mla	r0, r0, r3, r5
 80225ec:	1400      	asrs	r0, r0, #16
 80225ee:	f53f ae95 	bmi.w	802231c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80225f2:	3901      	subs	r1, #1
 80225f4:	4288      	cmp	r0, r1
 80225f6:	f6bf ae91 	bge.w	802231c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80225fa:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80225fc:	fb01 6303 	mla	r3, r1, r3, r6
 8022600:	141b      	asrs	r3, r3, #16
 8022602:	f53f ae8b 	bmi.w	802231c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022606:	3a01      	subs	r2, #1
 8022608:	4293      	cmp	r3, r2
 802260a:	f6bf ae87 	bge.w	802231c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802260e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022610:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022614:	1cdf      	adds	r7, r3, #3
 8022616:	f1bb 0f00 	cmp.w	fp, #0
 802261a:	dc6e      	bgt.n	80226fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802261c:	9b06      	ldr	r3, [sp, #24]
 802261e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022624:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022628:	4423      	add	r3, r4
 802262a:	9309      	str	r3, [sp, #36]	; 0x24
 802262c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802262e:	2b00      	cmp	r3, #0
 8022630:	f340 81b0 	ble.w	8022994 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8022634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022638:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802263a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802263e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022642:	eef0 6a48 	vmov.f32	s13, s16
 8022646:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802264a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802264e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022652:	ee16 5a90 	vmov	r5, s13
 8022656:	eef0 6a68 	vmov.f32	s13, s17
 802265a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802265e:	ee16 6a90 	vmov	r6, s13
 8022662:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022666:	ee69 7a27 	vmul.f32	s15, s18, s15
 802266a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802266e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022672:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022676:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802267a:	ee18 2a10 	vmov	r2, s16
 802267e:	eeb0 8a47 	vmov.f32	s16, s14
 8022682:	fb92 f3f3 	sdiv	r3, r2, r3
 8022686:	ee18 2a90 	vmov	r2, s17
 802268a:	932d      	str	r3, [sp, #180]	; 0xb4
 802268c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802268e:	eef0 8a67 	vmov.f32	s17, s15
 8022692:	fb92 f3f3 	sdiv	r3, r2, r3
 8022696:	932e      	str	r3, [sp, #184]	; 0xb8
 8022698:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802269a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802269c:	3b01      	subs	r3, #1
 802269e:	9315      	str	r3, [sp, #84]	; 0x54
 80226a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80226a2:	bf08      	it	eq
 80226a4:	4613      	moveq	r3, r2
 80226a6:	9306      	str	r3, [sp, #24]
 80226a8:	e60d      	b.n	80222c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80226aa:	2800      	cmp	r0, #0
 80226ac:	f43f ae7d 	beq.w	80223aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80226b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80226b4:	9307      	str	r3, [sp, #28]
 80226b6:	0e1b      	lsrs	r3, r3, #24
 80226b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80226ba:	e676      	b.n	80223aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80226bc:	7038      	strb	r0, [r7, #0]
 80226be:	7079      	strb	r1, [r7, #1]
 80226c0:	e779      	b.n	80225b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80226c2:	f112 0901 	adds.w	r9, r2, #1
 80226c6:	f53f af78 	bmi.w	80225ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80226ca:	454b      	cmp	r3, r9
 80226cc:	f6ff af75 	blt.w	80225ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80226d0:	f11c 0901 	adds.w	r9, ip, #1
 80226d4:	f53f af71 	bmi.w	80225ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80226d8:	45ce      	cmp	lr, r9
 80226da:	f6ff af6e 	blt.w	80225ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80226de:	b21b      	sxth	r3, r3
 80226e0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80226e4:	fa0f f28e 	sxth.w	r2, lr
 80226e8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80226ec:	9200      	str	r2, [sp, #0]
 80226ee:	4639      	mov	r1, r7
 80226f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80226f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80226f4:	f7ff fc7c 	bl	8021ff0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80226f8:	e75f      	b.n	80225ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80226fa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80226fc:	1429      	asrs	r1, r5, #16
 80226fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022700:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022704:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8022708:	1433      	asrs	r3, r6, #16
 802270a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802270e:	fb0c 1303 	mla	r3, ip, r3, r1
 8022712:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022714:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022718:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802271c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022720:	2a00      	cmp	r2, #0
 8022722:	f000 8129 	beq.w	8022978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8022726:	684c      	ldr	r4, [r1, #4]
 8022728:	940c      	str	r4, [sp, #48]	; 0x30
 802272a:	0e24      	lsrs	r4, r4, #24
 802272c:	9413      	str	r4, [sp, #76]	; 0x4c
 802272e:	b198      	cbz	r0, 8022758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8022730:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8022734:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022738:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802273c:	f10c 0c04 	add.w	ip, ip, #4
 8022740:	eb01 080c 	add.w	r8, r1, ip
 8022744:	f851 100c 	ldr.w	r1, [r1, ip]
 8022748:	9108      	str	r1, [sp, #32]
 802274a:	0e09      	lsrs	r1, r1, #24
 802274c:	9110      	str	r1, [sp, #64]	; 0x40
 802274e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022752:	910d      	str	r1, [sp, #52]	; 0x34
 8022754:	0e09      	lsrs	r1, r1, #24
 8022756:	9114      	str	r1, [sp, #80]	; 0x50
 8022758:	b292      	uxth	r2, r2
 802275a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802275c:	b280      	uxth	r0, r0
 802275e:	fb02 f900 	mul.w	r9, r2, r0
 8022762:	0112      	lsls	r2, r2, #4
 8022764:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022768:	eba2 0809 	sub.w	r8, r2, r9
 802276c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022772:	b280      	uxth	r0, r0
 8022774:	fa1f f888 	uxth.w	r8, r8
 8022778:	1a09      	subs	r1, r1, r0
 802277a:	fb08 f202 	mul.w	r2, r8, r2
 802277e:	b289      	uxth	r1, r1
 8022780:	fb01 220e 	mla	r2, r1, lr, r2
 8022784:	fb00 2204 	mla	r2, r0, r4, r2
 8022788:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802278a:	fb09 2204 	mla	r2, r9, r4, r2
 802278e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022792:	2a00      	cmp	r2, #0
 8022794:	f000 80e8 	beq.w	8022968 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8022798:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802279c:	d01b      	beq.n	80227d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 802279e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80227a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227a6:	fb0e fa0a 	mul.w	sl, lr, sl
 80227aa:	fb0e fe03 	mul.w	lr, lr, r3
 80227ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80227b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80227b6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80227ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80227be:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80227c2:	4453      	add	r3, sl
 80227c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227c8:	0a1b      	lsrs	r3, r3, #8
 80227ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80227ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80227d2:	ea43 030c 	orr.w	r3, r3, ip
 80227d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80227d8:	2cff      	cmp	r4, #255	; 0xff
 80227da:	d021      	beq.n	8022820 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 80227dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80227de:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80227e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80227e4:	fb04 fc0c 	mul.w	ip, r4, ip
 80227e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80227ea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80227ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80227f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80227f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80227f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80227fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8022800:	44e6      	add	lr, ip
 8022802:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022806:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802280a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802280e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022812:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022816:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802281a:	ea4e 040a 	orr.w	r4, lr, sl
 802281e:	940c      	str	r4, [sp, #48]	; 0x30
 8022820:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022822:	2cff      	cmp	r4, #255	; 0xff
 8022824:	d021      	beq.n	802286a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8022826:	9c08      	ldr	r4, [sp, #32]
 8022828:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802282c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802282e:	fb04 fc0c 	mul.w	ip, r4, ip
 8022832:	9c08      	ldr	r4, [sp, #32]
 8022834:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022838:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802283a:	fb04 fa0e 	mul.w	sl, r4, lr
 802283e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022842:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022846:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802284a:	44e6      	add	lr, ip
 802284c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022850:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022854:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022858:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802285c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022860:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022864:	ea4e 040a 	orr.w	r4, lr, sl
 8022868:	9408      	str	r4, [sp, #32]
 802286a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802286c:	2cff      	cmp	r4, #255	; 0xff
 802286e:	d021      	beq.n	80228b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8022870:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022872:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022876:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022878:	fb04 fc0c 	mul.w	ip, r4, ip
 802287c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802287e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022882:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022886:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022888:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802288c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022890:	fb04 fa0a 	mul.w	sl, r4, sl
 8022894:	44e6      	add	lr, ip
 8022896:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802289a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802289e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80228a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80228a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80228aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80228ae:	ea4e 040a 	orr.w	r4, lr, sl
 80228b2:	940d      	str	r4, [sp, #52]	; 0x34
 80228b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80228b6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80228ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228be:	2aff      	cmp	r2, #255	; 0xff
 80228c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80228c4:	9c08      	ldr	r4, [sp, #32]
 80228c6:	fb08 fc0c 	mul.w	ip, r8, ip
 80228ca:	fb01 cc0e 	mla	ip, r1, lr, ip
 80228ce:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80228d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80228d4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80228d8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80228dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80228de:	fb09 cc0e 	mla	ip, r9, lr, ip
 80228e2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80228e6:	fb08 f80e 	mul.w	r8, r8, lr
 80228ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80228ee:	fb01 8303 	mla	r3, r1, r3, r8
 80228f2:	9908      	ldr	r1, [sp, #32]
 80228f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80228f8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80228fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80228fe:	fb00 330a 	mla	r3, r0, sl, r3
 8022902:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022906:	fb09 3e0e 	mla	lr, r9, lr, r3
 802290a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802290e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022912:	ea4c 0c0e 	orr.w	ip, ip, lr
 8022916:	fa5f f08c 	uxtb.w	r0, ip
 802291a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802291e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022922:	d032      	beq.n	802298a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8022924:	43d2      	mvns	r2, r2
 8022926:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802292a:	b2d2      	uxtb	r2, r2
 802292c:	fb0e fe02 	mul.w	lr, lr, r2
 8022930:	f10e 0301 	add.w	r3, lr, #1
 8022934:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8022938:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802293c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8022940:	4350      	muls	r0, r2
 8022942:	f807 3c03 	strb.w	r3, [r7, #-3]
 8022946:	1c43      	adds	r3, r0, #1
 8022948:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802294c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022950:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8022954:	4353      	muls	r3, r2
 8022956:	f807 1c02 	strb.w	r1, [r7, #-2]
 802295a:	1c5a      	adds	r2, r3, #1
 802295c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022960:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8022964:	f807 cc01 	strb.w	ip, [r7, #-1]
 8022968:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802296a:	3703      	adds	r7, #3
 802296c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022970:	441d      	add	r5, r3
 8022972:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022974:	441e      	add	r6, r3
 8022976:	e64e      	b.n	8022616 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8022978:	2800      	cmp	r0, #0
 802297a:	f43f aeed 	beq.w	8022758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802297e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8022982:	9108      	str	r1, [sp, #32]
 8022984:	0e09      	lsrs	r1, r1, #24
 8022986:	9110      	str	r1, [sp, #64]	; 0x40
 8022988:	e6e6      	b.n	8022758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802298a:	f807 0c03 	strb.w	r0, [r7, #-3]
 802298e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8022992:	e7e7      	b.n	8022964 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8022994:	b019      	add	sp, #100	; 0x64
 8022996:	ecbd 8b08 	vpop	{d8-d11}
 802299a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080229a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80229a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229a4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80229a8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80229ac:	2800      	cmp	r0, #0
 80229ae:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80229b2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80229b6:	fb0c 0e03 	mla	lr, ip, r3, r0
 80229ba:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80229be:	db6b      	blt.n	8022a98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80229c0:	4580      	cmp	r8, r0
 80229c2:	dd69      	ble.n	8022a98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80229c4:	f1bc 0f00 	cmp.w	ip, #0
 80229c8:	db66      	blt.n	8022a98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80229ca:	45e1      	cmp	r9, ip
 80229cc:	dd64      	ble.n	8022a98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80229ce:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80229d2:	f01e 0f01 	tst.w	lr, #1
 80229d6:	5d16      	ldrb	r6, [r2, r4]
 80229d8:	bf0c      	ite	eq
 80229da:	f006 060f 	andeq.w	r6, r6, #15
 80229de:	1136      	asrne	r6, r6, #4
 80229e0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80229e4:	b2f6      	uxtb	r6, r6
 80229e6:	f110 0a01 	adds.w	sl, r0, #1
 80229ea:	d457      	bmi.n	8022a9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80229ec:	45d0      	cmp	r8, sl
 80229ee:	dd55      	ble.n	8022a9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80229f0:	f1bc 0f00 	cmp.w	ip, #0
 80229f4:	db52      	blt.n	8022a9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80229f6:	45e1      	cmp	r9, ip
 80229f8:	dd50      	ble.n	8022a9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80229fa:	2f00      	cmp	r7, #0
 80229fc:	f000 80ac 	beq.w	8022b58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8022a00:	f10e 0b01 	add.w	fp, lr, #1
 8022a04:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022a08:	f01b 0f01 	tst.w	fp, #1
 8022a0c:	5d14      	ldrb	r4, [r2, r4]
 8022a0e:	bf0c      	ite	eq
 8022a10:	f004 040f 	andeq.w	r4, r4, #15
 8022a14:	1124      	asrne	r4, r4, #4
 8022a16:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022a1a:	b2e4      	uxtb	r4, r4
 8022a1c:	2d00      	cmp	r5, #0
 8022a1e:	f000 8096 	beq.w	8022b4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8022a22:	2800      	cmp	r0, #0
 8022a24:	f10c 0c01 	add.w	ip, ip, #1
 8022a28:	db3c      	blt.n	8022aa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022a2a:	4580      	cmp	r8, r0
 8022a2c:	dd3a      	ble.n	8022aa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022a2e:	f1bc 0f00 	cmp.w	ip, #0
 8022a32:	db37      	blt.n	8022aa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022a34:	45e1      	cmp	r9, ip
 8022a36:	dd35      	ble.n	8022aa4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022a38:	eb03 0b0e 	add.w	fp, r3, lr
 8022a3c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022a40:	f01b 0f01 	tst.w	fp, #1
 8022a44:	5c10      	ldrb	r0, [r2, r0]
 8022a46:	bf0c      	ite	eq
 8022a48:	f000 000f 	andeq.w	r0, r0, #15
 8022a4c:	1100      	asrne	r0, r0, #4
 8022a4e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022a52:	b2c0      	uxtb	r0, r0
 8022a54:	f1ba 0f00 	cmp.w	sl, #0
 8022a58:	db26      	blt.n	8022aa8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022a5a:	45d0      	cmp	r8, sl
 8022a5c:	dd24      	ble.n	8022aa8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022a5e:	f1bc 0f00 	cmp.w	ip, #0
 8022a62:	db21      	blt.n	8022aa8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022a64:	45e1      	cmp	r9, ip
 8022a66:	dd1f      	ble.n	8022aa8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022a68:	b307      	cbz	r7, 8022aac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8022a6a:	3301      	adds	r3, #1
 8022a6c:	449e      	add	lr, r3
 8022a6e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022a72:	f01e 0f01 	tst.w	lr, #1
 8022a76:	5cd3      	ldrb	r3, [r2, r3]
 8022a78:	bf0c      	ite	eq
 8022a7a:	f003 030f 	andeq.w	r3, r3, #15
 8022a7e:	111b      	asrne	r3, r3, #4
 8022a80:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022a84:	b2db      	uxtb	r3, r3
 8022a86:	2f0f      	cmp	r7, #15
 8022a88:	d911      	bls.n	8022aae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8022a8a:	4b35      	ldr	r3, [pc, #212]	; (8022b60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8022a8c:	f240 1157 	movw	r1, #343	; 0x157
 8022a90:	4a34      	ldr	r2, [pc, #208]	; (8022b64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8022a92:	4835      	ldr	r0, [pc, #212]	; (8022b68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8022a94:	f002 fcde 	bl	8025454 <__assert_func>
 8022a98:	2600      	movs	r6, #0
 8022a9a:	e7a4      	b.n	80229e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8022a9c:	2400      	movs	r4, #0
 8022a9e:	e7bd      	b.n	8022a1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8022aa0:	463c      	mov	r4, r7
 8022aa2:	e7be      	b.n	8022a22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8022aa4:	2000      	movs	r0, #0
 8022aa6:	e7d5      	b.n	8022a54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8022aa8:	2300      	movs	r3, #0
 8022aaa:	e7ec      	b.n	8022a86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8022aac:	463b      	mov	r3, r7
 8022aae:	2d0f      	cmp	r5, #15
 8022ab0:	d8eb      	bhi.n	8022a8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022ab2:	b2bf      	uxth	r7, r7
 8022ab4:	b2ad      	uxth	r5, r5
 8022ab6:	fb07 f205 	mul.w	r2, r7, r5
 8022aba:	013f      	lsls	r7, r7, #4
 8022abc:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022ac0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022ac4:	1abf      	subs	r7, r7, r2
 8022ac6:	b2ad      	uxth	r5, r5
 8022ac8:	b2bf      	uxth	r7, r7
 8022aca:	ebac 0c05 	sub.w	ip, ip, r5
 8022ace:	437c      	muls	r4, r7
 8022ad0:	fa1f fc8c 	uxth.w	ip, ip
 8022ad4:	fb06 440c 	mla	r4, r6, ip, r4
 8022ad8:	fb05 4400 	mla	r4, r5, r0, r4
 8022adc:	fb02 4203 	mla	r2, r2, r3, r4
 8022ae0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022ae4:	b38a      	cbz	r2, 8022b4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8022ae6:	4b21      	ldr	r3, [pc, #132]	; (8022b6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8022ae8:	681c      	ldr	r4, [r3, #0]
 8022aea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8022aee:	b2e5      	uxtb	r5, r4
 8022af0:	4353      	muls	r3, r2
 8022af2:	1c5a      	adds	r2, r3, #1
 8022af4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022af8:	1212      	asrs	r2, r2, #8
 8022afa:	b290      	uxth	r0, r2
 8022afc:	43d2      	mvns	r2, r2
 8022afe:	fb15 f500 	smulbb	r5, r5, r0
 8022b02:	b2d3      	uxtb	r3, r2
 8022b04:	780a      	ldrb	r2, [r1, #0]
 8022b06:	fb02 5203 	mla	r2, r2, r3, r5
 8022b0a:	b292      	uxth	r2, r2
 8022b0c:	1c55      	adds	r5, r2, #1
 8022b0e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022b12:	784d      	ldrb	r5, [r1, #1]
 8022b14:	fb15 f503 	smulbb	r5, r5, r3
 8022b18:	1212      	asrs	r2, r2, #8
 8022b1a:	700a      	strb	r2, [r1, #0]
 8022b1c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022b20:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022b24:	fb02 5200 	mla	r2, r2, r0, r5
 8022b28:	b292      	uxth	r2, r2
 8022b2a:	1c55      	adds	r5, r2, #1
 8022b2c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022b30:	1212      	asrs	r2, r2, #8
 8022b32:	704a      	strb	r2, [r1, #1]
 8022b34:	788a      	ldrb	r2, [r1, #2]
 8022b36:	fb12 f303 	smulbb	r3, r2, r3
 8022b3a:	fb04 3300 	mla	r3, r4, r0, r3
 8022b3e:	b29b      	uxth	r3, r3
 8022b40:	1c5a      	adds	r2, r3, #1
 8022b42:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b46:	121b      	asrs	r3, r3, #8
 8022b48:	708b      	strb	r3, [r1, #2]
 8022b4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b4e:	2f0f      	cmp	r7, #15
 8022b50:	d89b      	bhi.n	8022a8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022b52:	462b      	mov	r3, r5
 8022b54:	4628      	mov	r0, r5
 8022b56:	e7ac      	b.n	8022ab2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8022b58:	2d00      	cmp	r5, #0
 8022b5a:	d1a1      	bne.n	8022aa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8022b5c:	462c      	mov	r4, r5
 8022b5e:	e7f8      	b.n	8022b52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8022b60:	0802a10b 	.word	0x0802a10b
 8022b64:	0802a673 	.word	0x0802a673
 8022b68:	0802a1d4 	.word	0x0802a1d4
 8022b6c:	20056564 	.word	0x20056564

08022b70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b74:	ed2d 8b08 	vpush	{d8-d11}
 8022b78:	b097      	sub	sp, #92	; 0x5c
 8022b7a:	eeb0 aa40 	vmov.f32	s20, s0
 8022b7e:	eef0 9a60 	vmov.f32	s19, s1
 8022b82:	9214      	str	r2, [sp, #80]	; 0x50
 8022b84:	eeb0 9a41 	vmov.f32	s18, s2
 8022b88:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022b8a:	eeb0 8a62 	vmov.f32	s16, s5
 8022b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8022b90:	eef0 8a43 	vmov.f32	s17, s6
 8022b94:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8022b98:	eef0 ba44 	vmov.f32	s23, s8
 8022b9c:	9015      	str	r0, [sp, #84]	; 0x54
 8022b9e:	eeb0 ba64 	vmov.f32	s22, s9
 8022ba2:	6850      	ldr	r0, [r2, #4]
 8022ba4:	eef0 aa45 	vmov.f32	s21, s10
 8022ba8:	910c      	str	r1, [sp, #48]	; 0x30
 8022baa:	930e      	str	r3, [sp, #56]	; 0x38
 8022bac:	6812      	ldr	r2, [r2, #0]
 8022bae:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022bb2:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8022bb6:	fb00 1303 	mla	r3, r0, r3, r1
 8022bba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022bbe:	eb02 0a03 	add.w	sl, r2, r3
 8022bc2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022bc4:	689b      	ldr	r3, [r3, #8]
 8022bc6:	3301      	adds	r3, #1
 8022bc8:	f023 0301 	bic.w	r3, r3, #1
 8022bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8022bce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022bd0:	681f      	ldr	r7, [r3, #0]
 8022bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	dc03      	bgt.n	8022be0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022bda:	2b00      	cmp	r3, #0
 8022bdc:	f340 8247 	ble.w	802306e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8022be0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022be2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022be6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022bea:	1e48      	subs	r0, r1, #1
 8022bec:	f102 3cff 	add.w	ip, r2, #4294967295
 8022bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bf2:	2b00      	cmp	r3, #0
 8022bf4:	f340 80e5 	ble.w	8022dc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8022bf8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8022bfc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c00:	d406      	bmi.n	8022c10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022c02:	4586      	cmp	lr, r0
 8022c04:	da04      	bge.n	8022c10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022c06:	2b00      	cmp	r3, #0
 8022c08:	db02      	blt.n	8022c10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022c0a:	4563      	cmp	r3, ip
 8022c0c:	f2c0 80da 	blt.w	8022dc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022c10:	f11e 0e01 	adds.w	lr, lr, #1
 8022c14:	f100 80cb 	bmi.w	8022dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8022c18:	4571      	cmp	r1, lr
 8022c1a:	f2c0 80c8 	blt.w	8022dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8022c1e:	3301      	adds	r3, #1
 8022c20:	f100 80c5 	bmi.w	8022dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8022c24:	429a      	cmp	r2, r3
 8022c26:	f2c0 80c2 	blt.w	8022dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8022c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c2c:	46d0      	mov	r8, sl
 8022c2e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8022c32:	930d      	str	r3, [sp, #52]	; 0x34
 8022c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022c36:	2b00      	cmp	r3, #0
 8022c38:	f340 80e3 	ble.w	8022e02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8022c3c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022c3e:	1430      	asrs	r0, r6, #16
 8022c40:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022c44:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022c48:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022c4c:	142b      	asrs	r3, r5, #16
 8022c4e:	f100 812e 	bmi.w	8022eae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022c52:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022c56:	455b      	cmp	r3, fp
 8022c58:	f280 8129 	bge.w	8022eae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022c5c:	2800      	cmp	r0, #0
 8022c5e:	f2c0 8126 	blt.w	8022eae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022c62:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022c66:	4558      	cmp	r0, fp
 8022c68:	f280 8121 	bge.w	8022eae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022c6c:	fb00 3309 	mla	r3, r0, r9, r3
 8022c70:	0858      	lsrs	r0, r3, #1
 8022c72:	07dc      	lsls	r4, r3, #31
 8022c74:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022c78:	bf54      	ite	pl
 8022c7a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022c7e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022c82:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022c86:	fa5f fc8c 	uxtb.w	ip, ip
 8022c8a:	2a00      	cmp	r2, #0
 8022c8c:	f000 80fe 	beq.w	8022e8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8022c90:	1c58      	adds	r0, r3, #1
 8022c92:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022c96:	07c0      	lsls	r0, r0, #31
 8022c98:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022c9c:	bf54      	ite	pl
 8022c9e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022ca2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022ca6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022caa:	fa5f f08e 	uxtb.w	r0, lr
 8022cae:	9010      	str	r0, [sp, #64]	; 0x40
 8022cb0:	b1d9      	cbz	r1, 8022cea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8022cb2:	444b      	add	r3, r9
 8022cb4:	0858      	lsrs	r0, r3, #1
 8022cb6:	07dc      	lsls	r4, r3, #31
 8022cb8:	f103 0301 	add.w	r3, r3, #1
 8022cbc:	5c38      	ldrb	r0, [r7, r0]
 8022cbe:	bf54      	ite	pl
 8022cc0:	f000 000f 	andpl.w	r0, r0, #15
 8022cc4:	1100      	asrmi	r0, r0, #4
 8022cc6:	07dc      	lsls	r4, r3, #31
 8022cc8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022ccc:	b2c0      	uxtb	r0, r0
 8022cce:	900a      	str	r0, [sp, #40]	; 0x28
 8022cd0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8022cd4:	f817 e000 	ldrb.w	lr, [r7, r0]
 8022cd8:	bf54      	ite	pl
 8022cda:	f00e 030f 	andpl.w	r3, lr, #15
 8022cde:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8022ce2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ce6:	b2db      	uxtb	r3, r3
 8022ce8:	9311      	str	r3, [sp, #68]	; 0x44
 8022cea:	b292      	uxth	r2, r2
 8022cec:	b289      	uxth	r1, r1
 8022cee:	0113      	lsls	r3, r2, #4
 8022cf0:	fb02 f001 	mul.w	r0, r2, r1
 8022cf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022cf6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022cfa:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8022cfe:	1a1b      	subs	r3, r3, r0
 8022d00:	b289      	uxth	r1, r1
 8022d02:	b29b      	uxth	r3, r3
 8022d04:	ebae 0e01 	sub.w	lr, lr, r1
 8022d08:	4353      	muls	r3, r2
 8022d0a:	fa1f fe8e 	uxth.w	lr, lr
 8022d0e:	fb0c 320e 	mla	r2, ip, lr, r3
 8022d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d14:	fb01 2203 	mla	r2, r1, r3, r2
 8022d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022d1a:	fb00 2203 	mla	r2, r0, r3, r2
 8022d1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022d22:	2a00      	cmp	r2, #0
 8022d24:	d039      	beq.n	8022d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022d26:	4bc7      	ldr	r3, [pc, #796]	; (8023044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8022d28:	6819      	ldr	r1, [r3, #0]
 8022d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d2c:	fa5f fc81 	uxtb.w	ip, r1
 8022d30:	435a      	muls	r2, r3
 8022d32:	1c53      	adds	r3, r2, #1
 8022d34:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022d38:	1212      	asrs	r2, r2, #8
 8022d3a:	b290      	uxth	r0, r2
 8022d3c:	43d2      	mvns	r2, r2
 8022d3e:	fb1c fc00 	smulbb	ip, ip, r0
 8022d42:	b2d3      	uxtb	r3, r2
 8022d44:	f898 2000 	ldrb.w	r2, [r8]
 8022d48:	fb02 c203 	mla	r2, r2, r3, ip
 8022d4c:	b292      	uxth	r2, r2
 8022d4e:	f102 0c01 	add.w	ip, r2, #1
 8022d52:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022d56:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022d5a:	fb1c fc03 	smulbb	ip, ip, r3
 8022d5e:	1212      	asrs	r2, r2, #8
 8022d60:	f888 2000 	strb.w	r2, [r8]
 8022d64:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022d68:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022d6c:	fb02 c200 	mla	r2, r2, r0, ip
 8022d70:	b292      	uxth	r2, r2
 8022d72:	f102 0c01 	add.w	ip, r2, #1
 8022d76:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022d7a:	1212      	asrs	r2, r2, #8
 8022d7c:	f888 2001 	strb.w	r2, [r8, #1]
 8022d80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8022d84:	fb12 f303 	smulbb	r3, r2, r3
 8022d88:	fb01 3300 	mla	r3, r1, r0, r3
 8022d8c:	b29b      	uxth	r3, r3
 8022d8e:	1c5a      	adds	r2, r3, #1
 8022d90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022d94:	121b      	asrs	r3, r3, #8
 8022d96:	f888 3002 	strb.w	r3, [r8, #2]
 8022d9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022d9c:	f108 0803 	add.w	r8, r8, #3
 8022da0:	441d      	add	r5, r3
 8022da2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022da4:	441e      	add	r6, r3
 8022da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022da8:	3b01      	subs	r3, #1
 8022daa:	930d      	str	r3, [sp, #52]	; 0x34
 8022dac:	e742      	b.n	8022c34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8022dae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022db0:	f10a 0a03 	add.w	sl, sl, #3
 8022db4:	441d      	add	r5, r3
 8022db6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022db8:	441e      	add	r6, r3
 8022dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dbc:	3b01      	subs	r3, #1
 8022dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8022dc0:	e716      	b.n	8022bf0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022dc2:	d024      	beq.n	8022e0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8022dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dc6:	982b      	ldr	r0, [sp, #172]	; 0xac
 8022dc8:	3b01      	subs	r3, #1
 8022dca:	fb00 5003 	mla	r0, r0, r3, r5
 8022dce:	1400      	asrs	r0, r0, #16
 8022dd0:	f53f af2b 	bmi.w	8022c2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022dd4:	3901      	subs	r1, #1
 8022dd6:	4288      	cmp	r0, r1
 8022dd8:	f6bf af27 	bge.w	8022c2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022ddc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8022dde:	fb01 6303 	mla	r3, r1, r3, r6
 8022de2:	141b      	asrs	r3, r3, #16
 8022de4:	f53f af21 	bmi.w	8022c2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022de8:	3a01      	subs	r2, #1
 8022dea:	4293      	cmp	r3, r2
 8022dec:	f6bf af1d 	bge.w	8022c2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022df0:	f10a 0e03 	add.w	lr, sl, #3
 8022df4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8022df8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8022dfc:	f1b8 0f00 	cmp.w	r8, #0
 8022e00:	dc76      	bgt.n	8022ef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8022e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022e08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e0c:	44a2      	add	sl, r4
 8022e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	f340 812c 	ble.w	802306e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8022e16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022e1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022e1c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022e20:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022e24:	eef0 6a48 	vmov.f32	s13, s16
 8022e28:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022e2c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022e30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e34:	ee16 5a90 	vmov	r5, s13
 8022e38:	eef0 6a68 	vmov.f32	s13, s17
 8022e3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e40:	ee16 6a90 	vmov	r6, s13
 8022e44:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022e48:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022e4c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022e50:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022e54:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022e58:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022e5c:	ee18 2a10 	vmov	r2, s16
 8022e60:	eeb0 8a47 	vmov.f32	s16, s14
 8022e64:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e68:	ee18 2a90 	vmov	r2, s17
 8022e6c:	932b      	str	r3, [sp, #172]	; 0xac
 8022e6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022e70:	eef0 8a67 	vmov.f32	s17, s15
 8022e74:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e78:	932c      	str	r3, [sp, #176]	; 0xb0
 8022e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022e7e:	3b01      	subs	r3, #1
 8022e80:	930c      	str	r3, [sp, #48]	; 0x30
 8022e82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022e84:	bf08      	it	eq
 8022e86:	4613      	moveq	r3, r2
 8022e88:	9309      	str	r3, [sp, #36]	; 0x24
 8022e8a:	e6a2      	b.n	8022bd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022e8c:	2900      	cmp	r1, #0
 8022e8e:	f43f af2c 	beq.w	8022cea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8022e92:	eb09 0003 	add.w	r0, r9, r3
 8022e96:	0843      	lsrs	r3, r0, #1
 8022e98:	07c0      	lsls	r0, r0, #31
 8022e9a:	5cfb      	ldrb	r3, [r7, r3]
 8022e9c:	bf54      	ite	pl
 8022e9e:	f003 030f 	andpl.w	r3, r3, #15
 8022ea2:	111b      	asrmi	r3, r3, #4
 8022ea4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ea8:	b2db      	uxtb	r3, r3
 8022eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8022eac:	e71d      	b.n	8022cea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8022eae:	f113 0b01 	adds.w	fp, r3, #1
 8022eb2:	f53f af72 	bmi.w	8022d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022eb6:	45dc      	cmp	ip, fp
 8022eb8:	f6ff af6f 	blt.w	8022d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022ebc:	f110 0b01 	adds.w	fp, r0, #1
 8022ec0:	f53f af6b 	bmi.w	8022d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022ec4:	45de      	cmp	lr, fp
 8022ec6:	f6ff af68 	blt.w	8022d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022eca:	9302      	str	r3, [sp, #8]
 8022ecc:	fa0f f38e 	sxth.w	r3, lr
 8022ed0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022ed2:	9301      	str	r3, [sp, #4]
 8022ed4:	fa0f f38c 	sxth.w	r3, ip
 8022ed8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022edc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022ee0:	9300      	str	r3, [sp, #0]
 8022ee2:	463a      	mov	r2, r7
 8022ee4:	464b      	mov	r3, r9
 8022ee6:	4641      	mov	r1, r8
 8022ee8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022eea:	f7ff fd59 	bl	80229a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8022eee:	e754      	b.n	8022d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022ef0:	142a      	asrs	r2, r5, #16
 8022ef2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022ef6:	1433      	asrs	r3, r6, #16
 8022ef8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022efc:	fb09 2303 	mla	r3, r9, r3, r2
 8022f00:	085a      	lsrs	r2, r3, #1
 8022f02:	07dc      	lsls	r4, r3, #31
 8022f04:	5cba      	ldrb	r2, [r7, r2]
 8022f06:	bf54      	ite	pl
 8022f08:	f002 020f 	andpl.w	r2, r2, #15
 8022f0c:	1112      	asrmi	r2, r2, #4
 8022f0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022f12:	b2d2      	uxtb	r2, r2
 8022f14:	2900      	cmp	r1, #0
 8022f16:	f000 8097 	beq.w	8023048 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8022f1a:	f103 0b01 	add.w	fp, r3, #1
 8022f1e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8022f22:	f01b 0f01 	tst.w	fp, #1
 8022f26:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f2a:	bf0c      	ite	eq
 8022f2c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022f30:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022f34:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f38:	fa5f f48c 	uxtb.w	r4, ip
 8022f3c:	9412      	str	r4, [sp, #72]	; 0x48
 8022f3e:	b300      	cbz	r0, 8022f82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8022f40:	444b      	add	r3, r9
 8022f42:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022f46:	07dc      	lsls	r4, r3, #31
 8022f48:	f103 0301 	add.w	r3, r3, #1
 8022f4c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f50:	bf54      	ite	pl
 8022f52:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022f56:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022f5a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f5e:	fa5f f48c 	uxtb.w	r4, ip
 8022f62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022f66:	940b      	str	r4, [sp, #44]	; 0x2c
 8022f68:	07dc      	lsls	r4, r3, #31
 8022f6a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f6e:	bf54      	ite	pl
 8022f70:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022f74:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022f78:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f7c:	fa5f f38c 	uxtb.w	r3, ip
 8022f80:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f82:	b289      	uxth	r1, r1
 8022f84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022f86:	b280      	uxth	r0, r0
 8022f88:	fb01 f300 	mul.w	r3, r1, r0
 8022f8c:	0109      	lsls	r1, r1, #4
 8022f8e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022f92:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022f96:	1ac9      	subs	r1, r1, r3
 8022f98:	b280      	uxth	r0, r0
 8022f9a:	b289      	uxth	r1, r1
 8022f9c:	ebac 0c00 	sub.w	ip, ip, r0
 8022fa0:	4361      	muls	r1, r4
 8022fa2:	fa1f fc8c 	uxth.w	ip, ip
 8022fa6:	fb02 120c 	mla	r2, r2, ip, r1
 8022faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022fac:	fb00 2001 	mla	r0, r0, r1, r2
 8022fb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022fb2:	fb03 0302 	mla	r3, r3, r2, r0
 8022fb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	d039      	beq.n	8023032 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8022fbe:	4a21      	ldr	r2, [pc, #132]	; (8023044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8022fc0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022fc4:	6810      	ldr	r0, [r2, #0]
 8022fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022fc8:	fa5f fc80 	uxtb.w	ip, r0
 8022fcc:	4353      	muls	r3, r2
 8022fce:	1c5a      	adds	r2, r3, #1
 8022fd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022fd4:	121b      	asrs	r3, r3, #8
 8022fd6:	b29a      	uxth	r2, r3
 8022fd8:	43db      	mvns	r3, r3
 8022fda:	fb1c fc02 	smulbb	ip, ip, r2
 8022fde:	b2db      	uxtb	r3, r3
 8022fe0:	fb01 c103 	mla	r1, r1, r3, ip
 8022fe4:	b289      	uxth	r1, r1
 8022fe6:	f101 0c01 	add.w	ip, r1, #1
 8022fea:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022fee:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022ff2:	fb1c fc03 	smulbb	ip, ip, r3
 8022ff6:	1209      	asrs	r1, r1, #8
 8022ff8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022ffc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8023000:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023004:	fb01 c102 	mla	r1, r1, r2, ip
 8023008:	b289      	uxth	r1, r1
 802300a:	f101 0c01 	add.w	ip, r1, #1
 802300e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023012:	1209      	asrs	r1, r1, #8
 8023014:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023018:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802301c:	fb11 f303 	smulbb	r3, r1, r3
 8023020:	fb00 3002 	mla	r0, r0, r2, r3
 8023024:	b280      	uxth	r0, r0
 8023026:	1c42      	adds	r2, r0, #1
 8023028:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802302c:	1200      	asrs	r0, r0, #8
 802302e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8023032:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023034:	f10e 0e03 	add.w	lr, lr, #3
 8023038:	f108 38ff 	add.w	r8, r8, #4294967295
 802303c:	441d      	add	r5, r3
 802303e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023040:	441e      	add	r6, r3
 8023042:	e6db      	b.n	8022dfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023044:	20056564 	.word	0x20056564
 8023048:	2800      	cmp	r0, #0
 802304a:	d09a      	beq.n	8022f82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802304c:	444b      	add	r3, r9
 802304e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023052:	07db      	lsls	r3, r3, #31
 8023054:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023058:	bf54      	ite	pl
 802305a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802305e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023062:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023066:	fa5f f38c 	uxtb.w	r3, ip
 802306a:	930b      	str	r3, [sp, #44]	; 0x2c
 802306c:	e789      	b.n	8022f82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802306e:	b017      	add	sp, #92	; 0x5c
 8023070:	ecbd 8b08 	vpop	{d8-d11}
 8023074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023078 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802307c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023080:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023084:	2800      	cmp	r0, #0
 8023086:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802308a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802308e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8023092:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023096:	db6b      	blt.n	8023170 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023098:	4580      	cmp	r8, r0
 802309a:	dd69      	ble.n	8023170 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802309c:	f1bc 0f00 	cmp.w	ip, #0
 80230a0:	db66      	blt.n	8023170 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80230a2:	45e1      	cmp	r9, ip
 80230a4:	dd64      	ble.n	8023170 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80230a6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80230aa:	f01e 0f01 	tst.w	lr, #1
 80230ae:	5d16      	ldrb	r6, [r2, r4]
 80230b0:	bf0c      	ite	eq
 80230b2:	f006 060f 	andeq.w	r6, r6, #15
 80230b6:	1136      	asrne	r6, r6, #4
 80230b8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80230bc:	b2f6      	uxtb	r6, r6
 80230be:	f110 0a01 	adds.w	sl, r0, #1
 80230c2:	d457      	bmi.n	8023174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80230c4:	45d0      	cmp	r8, sl
 80230c6:	dd55      	ble.n	8023174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80230c8:	f1bc 0f00 	cmp.w	ip, #0
 80230cc:	db52      	blt.n	8023174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80230ce:	45e1      	cmp	r9, ip
 80230d0:	dd50      	ble.n	8023174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80230d2:	2f00      	cmp	r7, #0
 80230d4:	f000 80a5 	beq.w	8023222 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80230d8:	f10e 0b01 	add.w	fp, lr, #1
 80230dc:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80230e0:	f01b 0f01 	tst.w	fp, #1
 80230e4:	5d14      	ldrb	r4, [r2, r4]
 80230e6:	bf0c      	ite	eq
 80230e8:	f004 040f 	andeq.w	r4, r4, #15
 80230ec:	1124      	asrne	r4, r4, #4
 80230ee:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80230f2:	b2e4      	uxtb	r4, r4
 80230f4:	2d00      	cmp	r5, #0
 80230f6:	f000 808f 	beq.w	8023218 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80230fa:	2800      	cmp	r0, #0
 80230fc:	f10c 0c01 	add.w	ip, ip, #1
 8023100:	db3c      	blt.n	802317c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023102:	4580      	cmp	r8, r0
 8023104:	dd3a      	ble.n	802317c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023106:	f1bc 0f00 	cmp.w	ip, #0
 802310a:	db37      	blt.n	802317c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802310c:	45e1      	cmp	r9, ip
 802310e:	dd35      	ble.n	802317c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023110:	eb03 0b0e 	add.w	fp, r3, lr
 8023114:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023118:	f01b 0f01 	tst.w	fp, #1
 802311c:	5c10      	ldrb	r0, [r2, r0]
 802311e:	bf0c      	ite	eq
 8023120:	f000 000f 	andeq.w	r0, r0, #15
 8023124:	1100      	asrne	r0, r0, #4
 8023126:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802312a:	b2c0      	uxtb	r0, r0
 802312c:	f1ba 0f00 	cmp.w	sl, #0
 8023130:	db26      	blt.n	8023180 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023132:	45d0      	cmp	r8, sl
 8023134:	dd24      	ble.n	8023180 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023136:	f1bc 0f00 	cmp.w	ip, #0
 802313a:	db21      	blt.n	8023180 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802313c:	45e1      	cmp	r9, ip
 802313e:	dd1f      	ble.n	8023180 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023140:	b307      	cbz	r7, 8023184 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8023142:	3301      	adds	r3, #1
 8023144:	449e      	add	lr, r3
 8023146:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802314a:	f01e 0f01 	tst.w	lr, #1
 802314e:	5cd3      	ldrb	r3, [r2, r3]
 8023150:	bf0c      	ite	eq
 8023152:	f003 030f 	andeq.w	r3, r3, #15
 8023156:	111b      	asrne	r3, r3, #4
 8023158:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802315c:	b2db      	uxtb	r3, r3
 802315e:	2f0f      	cmp	r7, #15
 8023160:	d911      	bls.n	8023186 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8023162:	4b32      	ldr	r3, [pc, #200]	; (802322c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8023164:	f240 1157 	movw	r1, #343	; 0x157
 8023168:	4a31      	ldr	r2, [pc, #196]	; (8023230 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802316a:	4832      	ldr	r0, [pc, #200]	; (8023234 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 802316c:	f002 f972 	bl	8025454 <__assert_func>
 8023170:	2600      	movs	r6, #0
 8023172:	e7a4      	b.n	80230be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8023174:	2400      	movs	r4, #0
 8023176:	e7bd      	b.n	80230f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023178:	463c      	mov	r4, r7
 802317a:	e7be      	b.n	80230fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 802317c:	2000      	movs	r0, #0
 802317e:	e7d5      	b.n	802312c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8023180:	2300      	movs	r3, #0
 8023182:	e7ec      	b.n	802315e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8023184:	463b      	mov	r3, r7
 8023186:	2d0f      	cmp	r5, #15
 8023188:	d8eb      	bhi.n	8023162 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802318a:	b2bf      	uxth	r7, r7
 802318c:	b2ad      	uxth	r5, r5
 802318e:	fb07 f205 	mul.w	r2, r7, r5
 8023192:	013f      	lsls	r7, r7, #4
 8023194:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023198:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802319c:	1abf      	subs	r7, r7, r2
 802319e:	b2ad      	uxth	r5, r5
 80231a0:	b2bf      	uxth	r7, r7
 80231a2:	ebac 0c05 	sub.w	ip, ip, r5
 80231a6:	437c      	muls	r4, r7
 80231a8:	fa1f fc8c 	uxth.w	ip, ip
 80231ac:	fb06 440c 	mla	r4, r6, ip, r4
 80231b0:	fb05 4400 	mla	r4, r5, r0, r4
 80231b4:	fb02 4303 	mla	r3, r2, r3, r4
 80231b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80231bc:	b353      	cbz	r3, 8023214 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80231be:	4a1e      	ldr	r2, [pc, #120]	; (8023238 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80231c0:	7808      	ldrb	r0, [r1, #0]
 80231c2:	6814      	ldr	r4, [r2, #0]
 80231c4:	b29a      	uxth	r2, r3
 80231c6:	43db      	mvns	r3, r3
 80231c8:	b2e5      	uxtb	r5, r4
 80231ca:	b2db      	uxtb	r3, r3
 80231cc:	fb15 f502 	smulbb	r5, r5, r2
 80231d0:	fb00 5003 	mla	r0, r0, r3, r5
 80231d4:	b280      	uxth	r0, r0
 80231d6:	1c45      	adds	r5, r0, #1
 80231d8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80231dc:	784d      	ldrb	r5, [r1, #1]
 80231de:	fb15 f503 	smulbb	r5, r5, r3
 80231e2:	1200      	asrs	r0, r0, #8
 80231e4:	7008      	strb	r0, [r1, #0]
 80231e6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80231ea:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80231ee:	fb00 5002 	mla	r0, r0, r2, r5
 80231f2:	b280      	uxth	r0, r0
 80231f4:	1c45      	adds	r5, r0, #1
 80231f6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80231fa:	1200      	asrs	r0, r0, #8
 80231fc:	7048      	strb	r0, [r1, #1]
 80231fe:	7888      	ldrb	r0, [r1, #2]
 8023200:	fb10 f303 	smulbb	r3, r0, r3
 8023204:	fb04 3202 	mla	r2, r4, r2, r3
 8023208:	b292      	uxth	r2, r2
 802320a:	1c53      	adds	r3, r2, #1
 802320c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023210:	1212      	asrs	r2, r2, #8
 8023212:	708a      	strb	r2, [r1, #2]
 8023214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023218:	2f0f      	cmp	r7, #15
 802321a:	d8a2      	bhi.n	8023162 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802321c:	462b      	mov	r3, r5
 802321e:	4628      	mov	r0, r5
 8023220:	e7b3      	b.n	802318a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8023222:	2d00      	cmp	r5, #0
 8023224:	d1a8      	bne.n	8023178 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8023226:	462c      	mov	r4, r5
 8023228:	e7f8      	b.n	802321c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802322a:	bf00      	nop
 802322c:	0802a10b 	.word	0x0802a10b
 8023230:	0802a673 	.word	0x0802a673
 8023234:	0802a1d4 	.word	0x0802a1d4
 8023238:	20056564 	.word	0x20056564

0802323c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023240:	ed2d 8b08 	vpush	{d8-d11}
 8023244:	b093      	sub	sp, #76	; 0x4c
 8023246:	461c      	mov	r4, r3
 8023248:	eeb0 aa40 	vmov.f32	s20, s0
 802324c:	920c      	str	r2, [sp, #48]	; 0x30
 802324e:	eef0 9a60 	vmov.f32	s19, s1
 8023252:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023254:	eeb0 9a41 	vmov.f32	s18, s2
 8023258:	9011      	str	r0, [sp, #68]	; 0x44
 802325a:	eeb0 8a62 	vmov.f32	s16, s5
 802325e:	6850      	ldr	r0, [r2, #4]
 8023260:	eef0 8a43 	vmov.f32	s17, s6
 8023264:	9107      	str	r1, [sp, #28]
 8023266:	eef0 ba44 	vmov.f32	s23, s8
 802326a:	6812      	ldr	r2, [r2, #0]
 802326c:	eeb0 ba64 	vmov.f32	s22, s9
 8023270:	eef0 aa45 	vmov.f32	s21, s10
 8023274:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023278:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 802327c:	fb00 1303 	mla	r3, r0, r3, r1
 8023280:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023284:	eb02 0b03 	add.w	fp, r2, r3
 8023288:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802328a:	689b      	ldr	r3, [r3, #8]
 802328c:	3301      	adds	r3, #1
 802328e:	f023 0301 	bic.w	r3, r3, #1
 8023292:	9309      	str	r3, [sp, #36]	; 0x24
 8023294:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023296:	f8d3 8000 	ldr.w	r8, [r3]
 802329a:	9b07      	ldr	r3, [sp, #28]
 802329c:	2b00      	cmp	r3, #0
 802329e:	dc03      	bgt.n	80232a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80232a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	f340 822b 	ble.w	80236fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80232a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80232aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80232ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80232b2:	1e48      	subs	r0, r1, #1
 80232b4:	1e57      	subs	r7, r2, #1
 80232b6:	2c00      	cmp	r4, #0
 80232b8:	f340 80d7 	ble.w	802346a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80232bc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80232c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80232c4:	d406      	bmi.n	80232d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80232c6:	4584      	cmp	ip, r0
 80232c8:	da04      	bge.n	80232d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80232ca:	2b00      	cmp	r3, #0
 80232cc:	db02      	blt.n	80232d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80232ce:	42bb      	cmp	r3, r7
 80232d0:	f2c0 80cc 	blt.w	802346c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80232d4:	f11c 0c01 	adds.w	ip, ip, #1
 80232d8:	f100 80bf 	bmi.w	802345a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80232dc:	4561      	cmp	r1, ip
 80232de:	f2c0 80bc 	blt.w	802345a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80232e2:	3301      	adds	r3, #1
 80232e4:	f100 80b9 	bmi.w	802345a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80232e8:	429a      	cmp	r2, r3
 80232ea:	f2c0 80b6 	blt.w	802345a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80232ee:	46a2      	mov	sl, r4
 80232f0:	465f      	mov	r7, fp
 80232f2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80232f6:	f1ba 0f00 	cmp.w	sl, #0
 80232fa:	f340 80d4 	ble.w	80234a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80232fe:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8023302:	1430      	asrs	r0, r6, #16
 8023304:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023308:	9308      	str	r3, [sp, #32]
 802330a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802330c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023310:	142b      	asrs	r3, r5, #16
 8023312:	f100 8124 	bmi.w	802355e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023316:	f10c 32ff 	add.w	r2, ip, #4294967295
 802331a:	4293      	cmp	r3, r2
 802331c:	f280 811f 	bge.w	802355e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023320:	2800      	cmp	r0, #0
 8023322:	f2c0 811c 	blt.w	802355e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023326:	f10e 32ff 	add.w	r2, lr, #4294967295
 802332a:	4290      	cmp	r0, r2
 802332c:	f280 8117 	bge.w	802355e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023330:	fb00 3309 	mla	r3, r0, r9, r3
 8023334:	0858      	lsrs	r0, r3, #1
 8023336:	07da      	lsls	r2, r3, #31
 8023338:	9a08      	ldr	r2, [sp, #32]
 802333a:	f818 c000 	ldrb.w	ip, [r8, r0]
 802333e:	bf54      	ite	pl
 8023340:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023344:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023348:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802334c:	fa5f fc8c 	uxtb.w	ip, ip
 8023350:	2a00      	cmp	r2, #0
 8023352:	f000 80ed 	beq.w	8023530 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023356:	1c58      	adds	r0, r3, #1
 8023358:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802335c:	07c0      	lsls	r0, r0, #31
 802335e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8023362:	bf54      	ite	pl
 8023364:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023368:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802336c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023370:	fa5f fe8e 	uxtb.w	lr, lr
 8023374:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8023378:	b1c9      	cbz	r1, 80233ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 802337a:	444b      	add	r3, r9
 802337c:	0858      	lsrs	r0, r3, #1
 802337e:	07da      	lsls	r2, r3, #31
 8023380:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023384:	bf54      	ite	pl
 8023386:	f000 000f 	andpl.w	r0, r0, #15
 802338a:	1100      	asrmi	r0, r0, #4
 802338c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023390:	b2c0      	uxtb	r0, r0
 8023392:	900a      	str	r0, [sp, #40]	; 0x28
 8023394:	1c58      	adds	r0, r3, #1
 8023396:	0843      	lsrs	r3, r0, #1
 8023398:	07c2      	lsls	r2, r0, #31
 802339a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802339e:	bf54      	ite	pl
 80233a0:	f003 030f 	andpl.w	r3, r3, #15
 80233a4:	111b      	asrmi	r3, r3, #4
 80233a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80233aa:	b2db      	uxtb	r3, r3
 80233ac:	930e      	str	r3, [sp, #56]	; 0x38
 80233ae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80233b2:	b289      	uxth	r1, r1
 80233b4:	fb02 f301 	mul.w	r3, r2, r1
 80233b8:	0112      	lsls	r2, r2, #4
 80233ba:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80233be:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80233c2:	1ad2      	subs	r2, r2, r3
 80233c4:	b289      	uxth	r1, r1
 80233c6:	b292      	uxth	r2, r2
 80233c8:	1a40      	subs	r0, r0, r1
 80233ca:	fa1f fe80 	uxth.w	lr, r0
 80233ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80233d0:	4342      	muls	r2, r0
 80233d2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80233d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80233d8:	fb01 c102 	mla	r1, r1, r2, ip
 80233dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80233de:	fb03 1302 	mla	r3, r3, r2, r1
 80233e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80233e6:	b383      	cbz	r3, 802344a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80233e8:	4ac7      	ldr	r2, [pc, #796]	; (8023708 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 80233ea:	2bff      	cmp	r3, #255	; 0xff
 80233ec:	6812      	ldr	r2, [r2, #0]
 80233ee:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80233f2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80233f6:	b2d2      	uxtb	r2, r2
 80233f8:	f000 80ac 	beq.w	8023554 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80233fc:	b299      	uxth	r1, r3
 80233fe:	43db      	mvns	r3, r3
 8023400:	f897 c000 	ldrb.w	ip, [r7]
 8023404:	fb12 f201 	smulbb	r2, r2, r1
 8023408:	b2db      	uxtb	r3, r3
 802340a:	fb10 f001 	smulbb	r0, r0, r1
 802340e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023412:	fb1e f101 	smulbb	r1, lr, r1
 8023416:	b292      	uxth	r2, r2
 8023418:	f102 0c01 	add.w	ip, r2, #1
 802341c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023420:	1212      	asrs	r2, r2, #8
 8023422:	703a      	strb	r2, [r7, #0]
 8023424:	787a      	ldrb	r2, [r7, #1]
 8023426:	fb02 0003 	mla	r0, r2, r3, r0
 802342a:	b280      	uxth	r0, r0
 802342c:	1c42      	adds	r2, r0, #1
 802342e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023432:	78ba      	ldrb	r2, [r7, #2]
 8023434:	fb02 1303 	mla	r3, r2, r3, r1
 8023438:	1200      	asrs	r0, r0, #8
 802343a:	b29b      	uxth	r3, r3
 802343c:	7078      	strb	r0, [r7, #1]
 802343e:	f103 0e01 	add.w	lr, r3, #1
 8023442:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023446:	121b      	asrs	r3, r3, #8
 8023448:	70bb      	strb	r3, [r7, #2]
 802344a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802344c:	3703      	adds	r7, #3
 802344e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023452:	441d      	add	r5, r3
 8023454:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023456:	441e      	add	r6, r3
 8023458:	e74d      	b.n	80232f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802345a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802345c:	3c01      	subs	r4, #1
 802345e:	f10b 0b03 	add.w	fp, fp, #3
 8023462:	441d      	add	r5, r3
 8023464:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023466:	441e      	add	r6, r3
 8023468:	e725      	b.n	80232b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802346a:	d021      	beq.n	80234b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802346c:	1e63      	subs	r3, r4, #1
 802346e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023470:	fb00 5003 	mla	r0, r0, r3, r5
 8023474:	1400      	asrs	r0, r0, #16
 8023476:	f53f af3a 	bmi.w	80232ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802347a:	3901      	subs	r1, #1
 802347c:	4288      	cmp	r0, r1
 802347e:	f6bf af36 	bge.w	80232ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023482:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023484:	fb01 6303 	mla	r3, r1, r3, r6
 8023488:	141b      	asrs	r3, r3, #16
 802348a:	f53f af30 	bmi.w	80232ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802348e:	3a01      	subs	r2, #1
 8023490:	4293      	cmp	r3, r2
 8023492:	f6bf af2c 	bge.w	80232ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023496:	f10b 0c03 	add.w	ip, fp, #3
 802349a:	46a6      	mov	lr, r4
 802349c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80234a0:	f1be 0f00 	cmp.w	lr, #0
 80234a4:	dc79      	bgt.n	802359a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80234a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80234aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80234ae:	44a3      	add	fp, r4
 80234b0:	9b07      	ldr	r3, [sp, #28]
 80234b2:	2b00      	cmp	r3, #0
 80234b4:	f340 8123 	ble.w	80236fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80234b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80234bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80234be:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80234c2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80234c6:	eef0 6a48 	vmov.f32	s13, s16
 80234ca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80234ce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80234d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234d6:	ee16 5a90 	vmov	r5, s13
 80234da:	eef0 6a68 	vmov.f32	s13, s17
 80234de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234e2:	ee16 6a90 	vmov	r6, s13
 80234e6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80234ea:	ee69 7a27 	vmul.f32	s15, s18, s15
 80234ee:	ee37 8a48 	vsub.f32	s16, s14, s16
 80234f2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80234f6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80234fa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80234fe:	ee18 2a10 	vmov	r2, s16
 8023502:	eeb0 8a47 	vmov.f32	s16, s14
 8023506:	fb92 f3f3 	sdiv	r3, r2, r3
 802350a:	ee18 2a90 	vmov	r2, s17
 802350e:	9327      	str	r3, [sp, #156]	; 0x9c
 8023510:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023512:	eef0 8a67 	vmov.f32	s17, s15
 8023516:	fb92 f3f3 	sdiv	r3, r2, r3
 802351a:	9328      	str	r3, [sp, #160]	; 0xa0
 802351c:	9b07      	ldr	r3, [sp, #28]
 802351e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023520:	3b01      	subs	r3, #1
 8023522:	9307      	str	r3, [sp, #28]
 8023524:	bf08      	it	eq
 8023526:	4614      	moveq	r4, r2
 8023528:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802352a:	bf18      	it	ne
 802352c:	461c      	movne	r4, r3
 802352e:	e6b4      	b.n	802329a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023530:	2900      	cmp	r1, #0
 8023532:	f43f af3c 	beq.w	80233ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8023536:	eb09 0003 	add.w	r0, r9, r3
 802353a:	0843      	lsrs	r3, r0, #1
 802353c:	07c0      	lsls	r0, r0, #31
 802353e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023542:	bf54      	ite	pl
 8023544:	f003 030f 	andpl.w	r3, r3, #15
 8023548:	111b      	asrmi	r3, r3, #4
 802354a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802354e:	b2db      	uxtb	r3, r3
 8023550:	930a      	str	r3, [sp, #40]	; 0x28
 8023552:	e72c      	b.n	80233ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8023554:	703a      	strb	r2, [r7, #0]
 8023556:	7078      	strb	r0, [r7, #1]
 8023558:	f887 e002 	strb.w	lr, [r7, #2]
 802355c:	e775      	b.n	802344a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802355e:	1c5a      	adds	r2, r3, #1
 8023560:	f53f af73 	bmi.w	802344a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023564:	4594      	cmp	ip, r2
 8023566:	f6ff af70 	blt.w	802344a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802356a:	1c42      	adds	r2, r0, #1
 802356c:	f53f af6d 	bmi.w	802344a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023570:	4596      	cmp	lr, r2
 8023572:	f6ff af6a 	blt.w	802344a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023576:	9302      	str	r3, [sp, #8]
 8023578:	fa0f f38e 	sxth.w	r3, lr
 802357c:	9a08      	ldr	r2, [sp, #32]
 802357e:	9301      	str	r3, [sp, #4]
 8023580:	fa0f f38c 	sxth.w	r3, ip
 8023584:	9105      	str	r1, [sp, #20]
 8023586:	4639      	mov	r1, r7
 8023588:	9300      	str	r3, [sp, #0]
 802358a:	464b      	mov	r3, r9
 802358c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023590:	4642      	mov	r2, r8
 8023592:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023594:	f7ff fd70 	bl	8023078 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023598:	e757      	b.n	802344a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802359a:	142a      	asrs	r2, r5, #16
 802359c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80235a0:	1433      	asrs	r3, r6, #16
 80235a2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80235a6:	fb09 2303 	mla	r3, r9, r3, r2
 80235aa:	085a      	lsrs	r2, r3, #1
 80235ac:	07d9      	lsls	r1, r3, #31
 80235ae:	f818 2002 	ldrb.w	r2, [r8, r2]
 80235b2:	bf54      	ite	pl
 80235b4:	f002 020f 	andpl.w	r2, r2, #15
 80235b8:	1112      	asrmi	r2, r2, #4
 80235ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80235be:	b2d2      	uxtb	r2, r2
 80235c0:	2800      	cmp	r0, #0
 80235c2:	f000 8085 	beq.w	80236d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80235c6:	f103 0a01 	add.w	sl, r3, #1
 80235ca:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80235ce:	f01a 0f01 	tst.w	sl, #1
 80235d2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80235d6:	bf0c      	ite	eq
 80235d8:	f001 010f 	andeq.w	r1, r1, #15
 80235dc:	1109      	asrne	r1, r1, #4
 80235de:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80235e2:	b2c9      	uxtb	r1, r1
 80235e4:	910f      	str	r1, [sp, #60]	; 0x3c
 80235e6:	b1df      	cbz	r7, 8023620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80235e8:	444b      	add	r3, r9
 80235ea:	0859      	lsrs	r1, r3, #1
 80235ec:	f013 0f01 	tst.w	r3, #1
 80235f0:	f103 0301 	add.w	r3, r3, #1
 80235f4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80235f8:	bf0c      	ite	eq
 80235fa:	f001 010f 	andeq.w	r1, r1, #15
 80235fe:	1109      	asrne	r1, r1, #4
 8023600:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023604:	b2c9      	uxtb	r1, r1
 8023606:	910b      	str	r1, [sp, #44]	; 0x2c
 8023608:	0859      	lsrs	r1, r3, #1
 802360a:	07db      	lsls	r3, r3, #31
 802360c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023610:	bf54      	ite	pl
 8023612:	f001 010f 	andpl.w	r1, r1, #15
 8023616:	1109      	asrmi	r1, r1, #4
 8023618:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802361c:	b2c9      	uxtb	r1, r1
 802361e:	9110      	str	r1, [sp, #64]	; 0x40
 8023620:	b280      	uxth	r0, r0
 8023622:	b2bf      	uxth	r7, r7
 8023624:	fb00 f307 	mul.w	r3, r0, r7
 8023628:	0100      	lsls	r0, r0, #4
 802362a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802362e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023632:	1ac0      	subs	r0, r0, r3
 8023634:	b2bf      	uxth	r7, r7
 8023636:	b280      	uxth	r0, r0
 8023638:	1bc9      	subs	r1, r1, r7
 802363a:	fa1f fa81 	uxth.w	sl, r1
 802363e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023640:	4348      	muls	r0, r1
 8023642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023644:	fb02 020a 	mla	r2, r2, sl, r0
 8023648:	fb07 2701 	mla	r7, r7, r1, r2
 802364c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802364e:	fb03 7302 	mla	r3, r3, r2, r7
 8023652:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023656:	b393      	cbz	r3, 80236be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8023658:	4a2b      	ldr	r2, [pc, #172]	; (8023708 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 802365a:	2bff      	cmp	r3, #255	; 0xff
 802365c:	6811      	ldr	r1, [r2, #0]
 802365e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8023662:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8023666:	b2c9      	uxtb	r1, r1
 8023668:	d042      	beq.n	80236f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802366a:	b298      	uxth	r0, r3
 802366c:	43db      	mvns	r3, r3
 802366e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8023672:	fb11 f100 	smulbb	r1, r1, r0
 8023676:	b2db      	uxtb	r3, r3
 8023678:	fb17 f700 	smulbb	r7, r7, r0
 802367c:	fb02 1103 	mla	r1, r2, r3, r1
 8023680:	fb1a f000 	smulbb	r0, sl, r0
 8023684:	b289      	uxth	r1, r1
 8023686:	1c4a      	adds	r2, r1, #1
 8023688:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802368c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8023690:	fb02 7703 	mla	r7, r2, r3, r7
 8023694:	1209      	asrs	r1, r1, #8
 8023696:	b2bf      	uxth	r7, r7
 8023698:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802369c:	1c7a      	adds	r2, r7, #1
 802369e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80236a2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80236a6:	fb02 0303 	mla	r3, r2, r3, r0
 80236aa:	123f      	asrs	r7, r7, #8
 80236ac:	b29b      	uxth	r3, r3
 80236ae:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80236b2:	1c5a      	adds	r2, r3, #1
 80236b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80236b8:	121b      	asrs	r3, r3, #8
 80236ba:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80236be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80236c0:	f10c 0c03 	add.w	ip, ip, #3
 80236c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80236c8:	441d      	add	r5, r3
 80236ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80236cc:	441e      	add	r6, r3
 80236ce:	e6e7      	b.n	80234a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80236d0:	2f00      	cmp	r7, #0
 80236d2:	d0a5      	beq.n	8023620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80236d4:	444b      	add	r3, r9
 80236d6:	0859      	lsrs	r1, r3, #1
 80236d8:	07db      	lsls	r3, r3, #31
 80236da:	f818 1001 	ldrb.w	r1, [r8, r1]
 80236de:	bf54      	ite	pl
 80236e0:	f001 010f 	andpl.w	r1, r1, #15
 80236e4:	1109      	asrmi	r1, r1, #4
 80236e6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80236ea:	b2c9      	uxtb	r1, r1
 80236ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80236ee:	e797      	b.n	8023620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80236f0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80236f4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80236f8:	f80c ac01 	strb.w	sl, [ip, #-1]
 80236fc:	e7df      	b.n	80236be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80236fe:	b013      	add	sp, #76	; 0x4c
 8023700:	ecbd 8b08 	vpop	{d8-d11}
 8023704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023708:	20056564 	.word	0x20056564

0802370c <CRC_Lock>:
 802370c:	4a20      	ldr	r2, [pc, #128]	; (8023790 <CRC_Lock+0x84>)
 802370e:	b530      	push	{r4, r5, lr}
 8023710:	6813      	ldr	r3, [r2, #0]
 8023712:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023716:	f24c 2540 	movw	r5, #49728	; 0xc240
 802371a:	f023 0301 	bic.w	r3, r3, #1
 802371e:	6013      	str	r3, [r2, #0]
 8023720:	4b1c      	ldr	r3, [pc, #112]	; (8023794 <CRC_Lock+0x88>)
 8023722:	681a      	ldr	r2, [r3, #0]
 8023724:	4022      	ands	r2, r4
 8023726:	42aa      	cmp	r2, r5
 8023728:	d005      	beq.n	8023736 <CRC_Lock+0x2a>
 802372a:	681b      	ldr	r3, [r3, #0]
 802372c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023730:	4023      	ands	r3, r4
 8023732:	4293      	cmp	r3, r2
 8023734:	d124      	bne.n	8023780 <CRC_Lock+0x74>
 8023736:	4b18      	ldr	r3, [pc, #96]	; (8023798 <CRC_Lock+0x8c>)
 8023738:	681b      	ldr	r3, [r3, #0]
 802373a:	bb0b      	cbnz	r3, 8023780 <CRC_Lock+0x74>
 802373c:	4b17      	ldr	r3, [pc, #92]	; (802379c <CRC_Lock+0x90>)
 802373e:	681a      	ldr	r2, [r3, #0]
 8023740:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023744:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8023748:	d00d      	beq.n	8023766 <CRC_Lock+0x5a>
 802374a:	681a      	ldr	r2, [r3, #0]
 802374c:	f240 4483 	movw	r4, #1155	; 0x483
 8023750:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023754:	42a2      	cmp	r2, r4
 8023756:	d006      	beq.n	8023766 <CRC_Lock+0x5a>
 8023758:	681b      	ldr	r3, [r3, #0]
 802375a:	f240 4285 	movw	r2, #1157	; 0x485
 802375e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023762:	4293      	cmp	r3, r2
 8023764:	d10c      	bne.n	8023780 <CRC_Lock+0x74>
 8023766:	4b0e      	ldr	r3, [pc, #56]	; (80237a0 <CRC_Lock+0x94>)
 8023768:	2201      	movs	r2, #1
 802376a:	601a      	str	r2, [r3, #0]
 802376c:	681a      	ldr	r2, [r3, #0]
 802376e:	2a00      	cmp	r2, #0
 8023770:	d1fc      	bne.n	802376c <CRC_Lock+0x60>
 8023772:	4b0c      	ldr	r3, [pc, #48]	; (80237a4 <CRC_Lock+0x98>)
 8023774:	6018      	str	r0, [r3, #0]
 8023776:	6818      	ldr	r0, [r3, #0]
 8023778:	1a43      	subs	r3, r0, r1
 802377a:	4258      	negs	r0, r3
 802377c:	4158      	adcs	r0, r3
 802377e:	bd30      	pop	{r4, r5, pc}
 8023780:	4b09      	ldr	r3, [pc, #36]	; (80237a8 <CRC_Lock+0x9c>)
 8023782:	2201      	movs	r2, #1
 8023784:	601a      	str	r2, [r3, #0]
 8023786:	681a      	ldr	r2, [r3, #0]
 8023788:	2a00      	cmp	r2, #0
 802378a:	d1fc      	bne.n	8023786 <CRC_Lock+0x7a>
 802378c:	4b07      	ldr	r3, [pc, #28]	; (80237ac <CRC_Lock+0xa0>)
 802378e:	e7f1      	b.n	8023774 <CRC_Lock+0x68>
 8023790:	e0002000 	.word	0xe0002000
 8023794:	e000ed00 	.word	0xe000ed00
 8023798:	e0042000 	.word	0xe0042000
 802379c:	5c001000 	.word	0x5c001000
 80237a0:	58024c08 	.word	0x58024c08
 80237a4:	58024c00 	.word	0x58024c00
 80237a8:	40023008 	.word	0x40023008
 80237ac:	40023000 	.word	0x40023000

080237b0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80237b0:	6101      	str	r1, [r0, #16]
 80237b2:	4770      	bx	lr

080237b4 <_ZN8touchgfx8Gestures4tickEv>:
 80237b4:	7b83      	ldrb	r3, [r0, #14]
 80237b6:	b14b      	cbz	r3, 80237cc <_ZN8touchgfx8Gestures4tickEv+0x18>
 80237b8:	8903      	ldrh	r3, [r0, #8]
 80237ba:	3301      	adds	r3, #1
 80237bc:	b29b      	uxth	r3, r3
 80237be:	2b07      	cmp	r3, #7
 80237c0:	8103      	strh	r3, [r0, #8]
 80237c2:	bf81      	itttt	hi
 80237c4:	2300      	movhi	r3, #0
 80237c6:	8143      	strhhi	r3, [r0, #10]
 80237c8:	8183      	strhhi	r3, [r0, #12]
 80237ca:	7383      	strbhi	r3, [r0, #14]
 80237cc:	4770      	bx	lr
	...

080237d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80237d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80237d4:	4604      	mov	r4, r0
 80237d6:	4698      	mov	r8, r3
 80237d8:	8880      	ldrh	r0, [r0, #4]
 80237da:	4617      	mov	r7, r2
 80237dc:	4b1d      	ldr	r3, [pc, #116]	; (8023854 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80237de:	460e      	mov	r6, r1
 80237e0:	f8ad 0006 	strh.w	r0, [sp, #6]
 80237e4:	eba8 0000 	sub.w	r0, r8, r0
 80237e8:	9300      	str	r3, [sp, #0]
 80237ea:	2300      	movs	r3, #0
 80237ec:	b280      	uxth	r0, r0
 80237ee:	8aa2      	ldrh	r2, [r4, #20]
 80237f0:	f88d 3004 	strb.w	r3, [sp, #4]
 80237f4:	b203      	sxth	r3, r0
 80237f6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80237fa:	88e1      	ldrh	r1, [r4, #6]
 80237fc:	2b00      	cmp	r3, #0
 80237fe:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023802:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023806:	bfb8      	it	lt
 8023808:	4240      	neglt	r0, r0
 802380a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802380e:	bfb8      	it	lt
 8023810:	b203      	sxthlt	r3, r0
 8023812:	4293      	cmp	r3, r2
 8023814:	dc08      	bgt.n	8023828 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023816:	1a69      	subs	r1, r5, r1
 8023818:	b289      	uxth	r1, r1
 802381a:	b20b      	sxth	r3, r1
 802381c:	2b00      	cmp	r3, #0
 802381e:	bfbc      	itt	lt
 8023820:	4249      	neglt	r1, r1
 8023822:	b20b      	sxthlt	r3, r1
 8023824:	429a      	cmp	r2, r3
 8023826:	da13      	bge.n	8023850 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023828:	6920      	ldr	r0, [r4, #16]
 802382a:	4669      	mov	r1, sp
 802382c:	eba8 0606 	sub.w	r6, r8, r6
 8023830:	1bef      	subs	r7, r5, r7
 8023832:	6803      	ldr	r3, [r0, #0]
 8023834:	685b      	ldr	r3, [r3, #4]
 8023836:	4798      	blx	r3
 8023838:	2300      	movs	r3, #0
 802383a:	2001      	movs	r0, #1
 802383c:	8166      	strh	r6, [r4, #10]
 802383e:	8123      	strh	r3, [r4, #8]
 8023840:	81a7      	strh	r7, [r4, #12]
 8023842:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023846:	80e5      	strh	r5, [r4, #6]
 8023848:	73a0      	strb	r0, [r4, #14]
 802384a:	b004      	add	sp, #16
 802384c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023850:	2000      	movs	r0, #0
 8023852:	e7fa      	b.n	802384a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023854:	08029568 	.word	0x08029568

08023858 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023858:	b5f0      	push	{r4, r5, r6, r7, lr}
 802385a:	461e      	mov	r6, r3
 802385c:	1e4b      	subs	r3, r1, #1
 802385e:	b085      	sub	sp, #20
 8023860:	4604      	mov	r4, r0
 8023862:	2b01      	cmp	r3, #1
 8023864:	460d      	mov	r5, r1
 8023866:	4617      	mov	r7, r2
 8023868:	d84b      	bhi.n	8023902 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802386a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802386e:	1cd3      	adds	r3, r2, #3
 8023870:	b29b      	uxth	r3, r3
 8023872:	2b06      	cmp	r3, #6
 8023874:	d916      	bls.n	80238a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023876:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8023918 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802387a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802387e:	f8cd c004 	str.w	ip, [sp, #4]
 8023882:	f04f 0c00 	mov.w	ip, #0
 8023886:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802388a:	6900      	ldr	r0, [r0, #16]
 802388c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023890:	a901      	add	r1, sp, #4
 8023892:	f88d c008 	strb.w	ip, [sp, #8]
 8023896:	f8ad 200a 	strh.w	r2, [sp, #10]
 802389a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802389e:	6803      	ldr	r3, [r0, #0]
 80238a0:	689b      	ldr	r3, [r3, #8]
 80238a2:	4798      	blx	r3
 80238a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80238a8:	1cd3      	adds	r3, r2, #3
 80238aa:	b29b      	uxth	r3, r3
 80238ac:	2b06      	cmp	r3, #6
 80238ae:	d916      	bls.n	80238de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80238b0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8023918 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80238b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80238b8:	f8cd c004 	str.w	ip, [sp, #4]
 80238bc:	f04f 0c01 	mov.w	ip, #1
 80238c0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80238c4:	6920      	ldr	r0, [r4, #16]
 80238c6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80238ca:	a901      	add	r1, sp, #4
 80238cc:	f88d c008 	strb.w	ip, [sp, #8]
 80238d0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80238d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80238d8:	6803      	ldr	r3, [r0, #0]
 80238da:	689b      	ldr	r3, [r3, #8]
 80238dc:	4798      	blx	r3
 80238de:	4b0d      	ldr	r3, [pc, #52]	; (8023914 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80238e0:	a901      	add	r1, sp, #4
 80238e2:	6920      	ldr	r0, [r4, #16]
 80238e4:	9301      	str	r3, [sp, #4]
 80238e6:	2300      	movs	r3, #0
 80238e8:	f88d 5008 	strb.w	r5, [sp, #8]
 80238ec:	f8ad 700a 	strh.w	r7, [sp, #10]
 80238f0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80238f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80238f8:	6803      	ldr	r3, [r0, #0]
 80238fa:	681b      	ldr	r3, [r3, #0]
 80238fc:	4798      	blx	r3
 80238fe:	b005      	add	sp, #20
 8023900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023902:	2900      	cmp	r1, #0
 8023904:	d1eb      	bne.n	80238de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023906:	80a2      	strh	r2, [r4, #4]
 8023908:	80c6      	strh	r6, [r0, #6]
 802390a:	60a1      	str	r1, [r4, #8]
 802390c:	81a1      	strh	r1, [r4, #12]
 802390e:	73a1      	strb	r1, [r4, #14]
 8023910:	e7e5      	b.n	80238de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023912:	bf00      	nop
 8023914:	08029554 	.word	0x08029554
 8023918:	0802957c 	.word	0x0802957c

0802391c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 802391c:	10c9      	asrs	r1, r1, #3
 802391e:	2900      	cmp	r1, #0
 8023920:	bfb8      	it	lt
 8023922:	4249      	neglt	r1, r1
 8023924:	2801      	cmp	r0, #1
 8023926:	d108      	bne.n	802393a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8023928:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802392c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023930:	4601      	mov	r1, r0
 8023932:	dd02      	ble.n	802393a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8023934:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8023938:	4770      	bx	lr
 802393a:	29ff      	cmp	r1, #255	; 0xff
 802393c:	bfa8      	it	ge
 802393e:	21ff      	movge	r1, #255	; 0xff
 8023940:	4608      	mov	r0, r1
 8023942:	4770      	bx	lr

08023944 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023948:	688c      	ldr	r4, [r1, #8]
 802394a:	b087      	sub	sp, #28
 802394c:	4607      	mov	r7, r0
 802394e:	2c00      	cmp	r4, #0
 8023950:	db2b      	blt.n	80239aa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023952:	6803      	ldr	r3, [r0, #0]
 8023954:	691a      	ldr	r2, [r3, #16]
 8023956:	42a2      	cmp	r2, r4
 8023958:	dd27      	ble.n	80239aa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802395a:	685a      	ldr	r2, [r3, #4]
 802395c:	695e      	ldr	r6, [r3, #20]
 802395e:	68cd      	ldr	r5, [r1, #12]
 8023960:	fb06 2604 	mla	r6, r6, r4, r2
 8023964:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8023968:	698a      	ldr	r2, [r1, #24]
 802396a:	f893 a008 	ldrb.w	sl, [r3, #8]
 802396e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023972:	9205      	str	r2, [sp, #20]
 8023974:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8023978:	9b05      	ldr	r3, [sp, #20]
 802397a:	6839      	ldr	r1, [r7, #0]
 802397c:	eb03 0c02 	add.w	ip, r3, r2
 8023980:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023984:	68c9      	ldr	r1, [r1, #12]
 8023986:	1898      	adds	r0, r3, r2
 8023988:	4288      	cmp	r0, r1
 802398a:	db02      	blt.n	8023992 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802398c:	1a8b      	subs	r3, r1, r2
 802398e:	2b00      	cmp	r3, #0
 8023990:	dd09      	ble.n	80239a6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023992:	6878      	ldr	r0, [r7, #4]
 8023994:	6801      	ldr	r1, [r0, #0]
 8023996:	9400      	str	r4, [sp, #0]
 8023998:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802399c:	4653      	mov	r3, sl
 802399e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80239a2:	4631      	mov	r1, r6
 80239a4:	47d8      	blx	fp
 80239a6:	3d01      	subs	r5, #1
 80239a8:	d1e4      	bne.n	8023974 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80239aa:	b007      	add	sp, #28
 80239ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080239b0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80239b0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80239b4:	b90b      	cbnz	r3, 80239ba <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 80239b6:	f001 b991 	b.w	8024cdc <_ZN8touchgfx7Outline6lineToEii>
 80239ba:	4770      	bx	lr

080239bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80239bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80239c0:	4604      	mov	r4, r0
 80239c2:	2600      	movs	r6, #0
 80239c4:	4b8f      	ldr	r3, [pc, #572]	; (8023c04 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80239c6:	f100 0518 	add.w	r5, r0, #24
 80239ca:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80239ce:	b086      	sub	sp, #24
 80239d0:	4690      	mov	r8, r2
 80239d2:	e9c0 3100 	strd	r3, r1, [r0]
 80239d6:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80239da:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80239de:	4628      	mov	r0, r5
 80239e0:	f001 fba0 	bl	8025124 <_ZN8touchgfx15RenderingBufferC1Ev>
 80239e4:	4638      	mov	r0, r7
 80239e6:	f000 fb45 	bl	8024074 <_ZN8touchgfx7OutlineC1Ev>
 80239ea:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80239ee:	f001 fb41 	bl	8025074 <_ZN8touchgfx8ScanlineC1Ev>
 80239f2:	2301      	movs	r3, #1
 80239f4:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 80239f8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 80239fc:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8023a00:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023a04:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8023a08:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8023a0c:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8023a10:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8023a14:	f7f2 ff36 	bl	8016884 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8023a18:	b928      	cbnz	r0, 8023a26 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 8023a1a:	4b7b      	ldr	r3, [pc, #492]	; (8023c08 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023a1c:	212d      	movs	r1, #45	; 0x2d
 8023a1e:	4a7b      	ldr	r2, [pc, #492]	; (8023c0c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023a20:	487b      	ldr	r0, [pc, #492]	; (8023c10 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8023a22:	f001 fd17 	bl	8025454 <__assert_func>
 8023a26:	f9b8 2000 	ldrsh.w	r2, [r8]
 8023a2a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8023a2e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8023a32:	4410      	add	r0, r2
 8023a34:	9602      	str	r6, [sp, #8]
 8023a36:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8023a3a:	b280      	uxth	r0, r0
 8023a3c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8023a40:	fa0f fa80 	sxth.w	sl, r0
 8023a44:	f1ba 0f00 	cmp.w	sl, #0
 8023a48:	dd70      	ble.n	8023b2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8023a4a:	4591      	cmp	r9, r2
 8023a4c:	dd6e      	ble.n	8023b2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8023a4e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8023a52:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8023a56:	440b      	add	r3, r1
 8023a58:	b29b      	uxth	r3, r3
 8023a5a:	b21e      	sxth	r6, r3
 8023a5c:	2e00      	cmp	r6, #0
 8023a5e:	dd65      	ble.n	8023b2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8023a60:	458e      	cmp	lr, r1
 8023a62:	dd63      	ble.n	8023b2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8023a64:	45d1      	cmp	r9, sl
 8023a66:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8023a6a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8023a6e:	bfb8      	it	lt
 8023a70:	fa1f f089 	uxthlt.w	r0, r9
 8023a74:	45b6      	cmp	lr, r6
 8023a76:	f8ad 2008 	strh.w	r2, [sp, #8]
 8023a7a:	bfb8      	it	lt
 8023a7c:	fa1f f38e 	uxthlt.w	r3, lr
 8023a80:	1a80      	subs	r0, r0, r2
 8023a82:	f8ad 100a 	strh.w	r1, [sp, #10]
 8023a86:	1a5b      	subs	r3, r3, r1
 8023a88:	f8ad 000c 	strh.w	r0, [sp, #12]
 8023a8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023a90:	f10d 0808 	add.w	r8, sp, #8
 8023a94:	ae04      	add	r6, sp, #16
 8023a96:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023a9a:	e886 0003 	stmia.w	r6, {r0, r1}
 8023a9e:	f8dc 3000 	ldr.w	r3, [ip]
 8023aa2:	4660      	mov	r0, ip
 8023aa4:	4631      	mov	r1, r6
 8023aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023aa8:	4798      	blx	r3
 8023aaa:	6861      	ldr	r1, [r4, #4]
 8023aac:	4640      	mov	r0, r8
 8023aae:	3104      	adds	r1, #4
 8023ab0:	f7f4 fa02 	bl	8017eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023ab4:	4630      	mov	r0, r6
 8023ab6:	f7f4 fa17 	bl	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023aba:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8023abe:	f7f2 fe71 	bl	80167a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8023ac2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8023ac6:	4638      	mov	r0, r7
 8023ac8:	f000 fab0 	bl	802402c <_ZN8touchgfx7Outline5resetEv>
 8023acc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023ad0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8023ad4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8023ad8:	015b      	lsls	r3, r3, #5
 8023ada:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8023ade:	0152      	lsls	r2, r2, #5
 8023ae0:	60e3      	str	r3, [r4, #12]
 8023ae2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023ae6:	60a2      	str	r2, [r4, #8]
 8023ae8:	015b      	lsls	r3, r3, #5
 8023aea:	6123      	str	r3, [r4, #16]
 8023aec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8023af0:	015b      	lsls	r3, r3, #5
 8023af2:	6163      	str	r3, [r4, #20]
 8023af4:	4b47      	ldr	r3, [pc, #284]	; (8023c14 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8023af6:	6818      	ldr	r0, [r3, #0]
 8023af8:	6803      	ldr	r3, [r0, #0]
 8023afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023afc:	4798      	blx	r3
 8023afe:	4606      	mov	r6, r0
 8023b00:	f7e1 fcc4 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8023b04:	6803      	ldr	r3, [r0, #0]
 8023b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023b08:	4798      	blx	r3
 8023b0a:	4607      	mov	r7, r0
 8023b0c:	f7e1 fcbe 	bl	800548c <_ZN8touchgfx3HAL3lcdEv>
 8023b10:	6803      	ldr	r3, [r0, #0]
 8023b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b14:	4798      	blx	r3
 8023b16:	280d      	cmp	r0, #13
 8023b18:	d854      	bhi.n	8023bc4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 8023b1a:	e8df f000 	tbb	[pc, r0]
 8023b1e:	554b      	.short	0x554b
 8023b20:	2b6e0a66 	.word	0x2b6e0a66
 8023b24:	5f5f5f3b 	.word	0x5f5f5f3b
 8023b28:	6e6e5f5f 	.word	0x6e6e5f5f
 8023b2c:	2300      	movs	r3, #0
 8023b2e:	9303      	str	r3, [sp, #12]
 8023b30:	e7ae      	b.n	8023a90 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8023b32:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023b36:	2108      	movs	r1, #8
 8023b38:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023b3c:	fb92 f1f1 	sdiv	r1, r2, r1
 8023b40:	fb07 1303 	mla	r3, r7, r3, r1
 8023b44:	441e      	add	r6, r3
 8023b46:	4253      	negs	r3, r2
 8023b48:	f002 0207 	and.w	r2, r2, #7
 8023b4c:	f003 0307 	and.w	r3, r3, #7
 8023b50:	bf58      	it	pl
 8023b52:	425a      	negpl	r2, r3
 8023b54:	b2d2      	uxtb	r2, r2
 8023b56:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023b5a:	4628      	mov	r0, r5
 8023b5c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023b60:	6721      	str	r1, [r4, #112]	; 0x70
 8023b62:	e9cd 1700 	strd	r1, r7, [sp]
 8023b66:	4631      	mov	r1, r6
 8023b68:	f001 fae8 	bl	802513c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8023b6c:	4620      	mov	r0, r4
 8023b6e:	b006      	add	sp, #24
 8023b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b74:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023b78:	2104      	movs	r1, #4
 8023b7a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023b7e:	fb92 f1f1 	sdiv	r1, r2, r1
 8023b82:	fb07 1303 	mla	r3, r7, r3, r1
 8023b86:	441e      	add	r6, r3
 8023b88:	4253      	negs	r3, r2
 8023b8a:	f002 0203 	and.w	r2, r2, #3
 8023b8e:	f003 0303 	and.w	r3, r3, #3
 8023b92:	e7dd      	b.n	8023b50 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023b94:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023b98:	2102      	movs	r1, #2
 8023b9a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023b9e:	2a00      	cmp	r2, #0
 8023ba0:	fb92 f1f1 	sdiv	r1, r2, r1
 8023ba4:	f002 0201 	and.w	r2, r2, #1
 8023ba8:	fb07 1303 	mla	r3, r7, r3, r1
 8023bac:	bfb8      	it	lt
 8023bae:	4252      	neglt	r2, r2
 8023bb0:	441e      	add	r6, r3
 8023bb2:	e7cf      	b.n	8023b54 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 8023bb4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023bb8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023bbc:	437b      	muls	r3, r7
 8023bbe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023bc2:	441e      	add	r6, r3
 8023bc4:	2200      	movs	r2, #0
 8023bc6:	e7c6      	b.n	8023b56 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 8023bc8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023bcc:	2103      	movs	r1, #3
 8023bce:	fb07 f203 	mul.w	r2, r7, r3
 8023bd2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8023bd6:	fb13 2301 	smlabb	r3, r3, r1, r2
 8023bda:	e7f2      	b.n	8023bc2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8023bdc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023be0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023be4:	fb07 2303 	mla	r3, r7, r3, r2
 8023be8:	e7eb      	b.n	8023bc2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8023bea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023bee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023bf2:	437b      	muls	r3, r7
 8023bf4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023bf8:	e7e3      	b.n	8023bc2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8023bfa:	4b07      	ldr	r3, [pc, #28]	; (8023c18 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 8023bfc:	216c      	movs	r1, #108	; 0x6c
 8023bfe:	4a03      	ldr	r2, [pc, #12]	; (8023c0c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023c00:	e70e      	b.n	8023a20 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8023c02:	bf00      	nop
 8023c04:	0802a998 	.word	0x0802a998
 8023c08:	0802a8e3 	.word	0x0802a8e3
 8023c0c:	0802a9a0 	.word	0x0802a9a0
 8023c10:	0802a93f 	.word	0x0802a93f
 8023c14:	2005653c 	.word	0x2005653c
 8023c18:	0802a973 	.word	0x0802a973

08023c1c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8023c1c:	6812      	ldr	r2, [r2, #0]
 8023c1e:	2a00      	cmp	r2, #0
 8023c20:	db0b      	blt.n	8023c3a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8023c22:	9800      	ldr	r0, [sp, #0]
 8023c24:	6800      	ldr	r0, [r0, #0]
 8023c26:	4290      	cmp	r0, r2
 8023c28:	bfd4      	ite	le
 8023c2a:	2002      	movle	r0, #2
 8023c2c:	2000      	movgt	r0, #0
 8023c2e:	680a      	ldr	r2, [r1, #0]
 8023c30:	2a00      	cmp	r2, #0
 8023c32:	da04      	bge.n	8023c3e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8023c34:	f040 0004 	orr.w	r0, r0, #4
 8023c38:	4770      	bx	lr
 8023c3a:	2001      	movs	r0, #1
 8023c3c:	e7f7      	b.n	8023c2e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	4293      	cmp	r3, r2
 8023c42:	bfd8      	it	le
 8023c44:	f040 0008 	orrle.w	r0, r0, #8
 8023c48:	4770      	bx	lr
	...

08023c4c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8023c4c:	4b07      	ldr	r3, [pc, #28]	; (8023c6c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8023c4e:	b510      	push	{r4, lr}
 8023c50:	781b      	ldrb	r3, [r3, #0]
 8023c52:	2b01      	cmp	r3, #1
 8023c54:	d108      	bne.n	8023c68 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8023c56:	6843      	ldr	r3, [r0, #4]
 8023c58:	6814      	ldr	r4, [r2, #0]
 8023c5a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8023c5e:	680b      	ldr	r3, [r1, #0]
 8023c60:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8023c64:	6013      	str	r3, [r2, #0]
 8023c66:	600c      	str	r4, [r1, #0]
 8023c68:	bd10      	pop	{r4, pc}
 8023c6a:	bf00      	nop
 8023c6c:	20056534 	.word	0x20056534

08023c70 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c72:	b085      	sub	sp, #20
 8023c74:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8023c78:	4604      	mov	r4, r0
 8023c7a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023c7e:	b33b      	cbz	r3, 8023cd0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023c80:	aa02      	add	r2, sp, #8
 8023c82:	a903      	add	r1, sp, #12
 8023c84:	f7ff ffe2 	bl	8023c4c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023c88:	68a3      	ldr	r3, [r4, #8]
 8023c8a:	9e03      	ldr	r6, [sp, #12]
 8023c8c:	aa02      	add	r2, sp, #8
 8023c8e:	9f02      	ldr	r7, [sp, #8]
 8023c90:	a903      	add	r1, sp, #12
 8023c92:	1af6      	subs	r6, r6, r3
 8023c94:	68e3      	ldr	r3, [r4, #12]
 8023c96:	4620      	mov	r0, r4
 8023c98:	1aff      	subs	r7, r7, r3
 8023c9a:	f104 0314 	add.w	r3, r4, #20
 8023c9e:	9603      	str	r6, [sp, #12]
 8023ca0:	9300      	str	r3, [sp, #0]
 8023ca2:	f104 0310 	add.w	r3, r4, #16
 8023ca6:	9702      	str	r7, [sp, #8]
 8023ca8:	f7ff ffb8 	bl	8023c1c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023cac:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8023cb0:	4605      	mov	r5, r0
 8023cb2:	b97b      	cbnz	r3, 8023cd4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8023cb4:	463a      	mov	r2, r7
 8023cb6:	4631      	mov	r1, r6
 8023cb8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8023cbc:	f7ff fe78 	bl	80239b0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023cc0:	9b03      	ldr	r3, [sp, #12]
 8023cc2:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8023cc6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8023cca:	9b02      	ldr	r3, [sp, #8]
 8023ccc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8023cd0:	b005      	add	sp, #20
 8023cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023cd4:	b110      	cbz	r0, 8023cdc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8023cd6:	ea13 0200 	ands.w	r2, r3, r0
 8023cda:	d11c      	bne.n	8023d16 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8023cdc:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8023ce0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8023ce4:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8023ce8:	b188      	cbz	r0, 8023d0e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8023cea:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8023cee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8023cf2:	b913      	cbnz	r3, 8023cfa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8023cf4:	4630      	mov	r0, r6
 8023cf6:	f001 f821 	bl	8024d3c <_ZN8touchgfx7Outline6moveToEii>
 8023cfa:	2300      	movs	r3, #0
 8023cfc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023d00:	2301      	movs	r3, #1
 8023d02:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8023d06:	4630      	mov	r0, r6
 8023d08:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8023d0c:	e7d6      	b.n	8023cbc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8023d0e:	4630      	mov	r0, r6
 8023d10:	f7ff fe4e 	bl	80239b0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023d14:	e7f7      	b.n	8023d06 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8023d16:	4615      	mov	r5, r2
 8023d18:	e7d2      	b.n	8023cc0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08023d1a <_ZN8touchgfx6Canvas5closeEv>:
 8023d1a:	b538      	push	{r3, r4, r5, lr}
 8023d1c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8023d20:	4604      	mov	r4, r0
 8023d22:	b993      	cbnz	r3, 8023d4a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023d24:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8023d28:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 8023d2c:	4213      	tst	r3, r2
 8023d2e:	d10c      	bne.n	8023d4a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023d30:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8023d34:	b123      	cbz	r3, 8023d40 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8023d36:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 8023d3a:	4628      	mov	r0, r5
 8023d3c:	f7ff fe38 	bl	80239b0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023d40:	4628      	mov	r0, r5
 8023d42:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8023d46:	f7ff fe33 	bl	80239b0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023d4a:	2300      	movs	r3, #0
 8023d4c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023d50:	bd38      	pop	{r3, r4, r5, pc}

08023d52 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d54:	b085      	sub	sp, #20
 8023d56:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8023d5a:	4604      	mov	r4, r0
 8023d5c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023d60:	b353      	cbz	r3, 8023db8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8023d62:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8023d66:	b90b      	cbnz	r3, 8023d6c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8023d68:	f7ff ffd7 	bl	8023d1a <_ZN8touchgfx6Canvas5closeEv>
 8023d6c:	aa02      	add	r2, sp, #8
 8023d6e:	a903      	add	r1, sp, #12
 8023d70:	4620      	mov	r0, r4
 8023d72:	f7ff ff6b 	bl	8023c4c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023d76:	68a3      	ldr	r3, [r4, #8]
 8023d78:	9d03      	ldr	r5, [sp, #12]
 8023d7a:	aa02      	add	r2, sp, #8
 8023d7c:	9e02      	ldr	r6, [sp, #8]
 8023d7e:	a903      	add	r1, sp, #12
 8023d80:	1aed      	subs	r5, r5, r3
 8023d82:	68e3      	ldr	r3, [r4, #12]
 8023d84:	4620      	mov	r0, r4
 8023d86:	1af6      	subs	r6, r6, r3
 8023d88:	f104 0314 	add.w	r3, r4, #20
 8023d8c:	9503      	str	r5, [sp, #12]
 8023d8e:	9300      	str	r3, [sp, #0]
 8023d90:	f104 0310 	add.w	r3, r4, #16
 8023d94:	9602      	str	r6, [sp, #8]
 8023d96:	f7ff ff41 	bl	8023c1c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023d9a:	4607      	mov	r7, r0
 8023d9c:	b170      	cbz	r0, 8023dbc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8023d9e:	2301      	movs	r3, #1
 8023da0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023da4:	9a03      	ldr	r2, [sp, #12]
 8023da6:	9b02      	ldr	r3, [sp, #8]
 8023da8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8023dac:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8023db0:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8023db4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 8023db8:	b005      	add	sp, #20
 8023dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023dbc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8023dc0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8023dc4:	b92b      	cbnz	r3, 8023dd2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8023dc6:	4632      	mov	r2, r6
 8023dc8:	4629      	mov	r1, r5
 8023dca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8023dce:	f000 ffb5 	bl	8024d3c <_ZN8touchgfx7Outline6moveToEii>
 8023dd2:	2300      	movs	r3, #0
 8023dd4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023dd8:	2301      	movs	r3, #1
 8023dda:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8023dde:	e7e1      	b.n	8023da4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08023de0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8023de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023de4:	4604      	mov	r4, r0
 8023de6:	b087      	sub	sp, #28
 8023de8:	9105      	str	r1, [sp, #20]
 8023dea:	f001 f8ec 	bl	8024fc6 <_ZN8touchgfx7Outline8getCellsEv>
 8023dee:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8023df2:	4605      	mov	r5, r0
 8023df4:	f1b9 0f00 	cmp.w	r9, #0
 8023df8:	d103      	bne.n	8023e02 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8023dfa:	2001      	movs	r0, #1
 8023dfc:	b007      	add	sp, #28
 8023dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e02:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8023e06:	2e00      	cmp	r6, #0
 8023e08:	d139      	bne.n	8023e7e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8023e0a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8023e0e:	f105 0708 	add.w	r7, r5, #8
 8023e12:	4640      	mov	r0, r8
 8023e14:	f001 f919 	bl	802504a <_ZN8touchgfx8Scanline5resetEv>
 8023e18:	f109 33ff 	add.w	r3, r9, #4294967295
 8023e1c:	9303      	str	r3, [sp, #12]
 8023e1e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8023e22:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8023e26:	46da      	mov	sl, fp
 8023e28:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8023e2c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8023e30:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8023e34:	9b03      	ldr	r3, [sp, #12]
 8023e36:	4416      	add	r6, r2
 8023e38:	9504      	str	r5, [sp, #16]
 8023e3a:	463d      	mov	r5, r7
 8023e3c:	3b01      	subs	r3, #1
 8023e3e:	9303      	str	r3, [sp, #12]
 8023e40:	3301      	adds	r3, #1
 8023e42:	d01e      	beq.n	8023e82 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8023e44:	3708      	adds	r7, #8
 8023e46:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8023e4a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8023e4e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8023e52:	4290      	cmp	r0, r2
 8023e54:	d11e      	bne.n	8023e94 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8023e56:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8023e5a:	4411      	add	r1, r2
 8023e5c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8023e60:	e7e8      	b.n	8023e34 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8023e62:	1c91      	adds	r1, r2, #2
 8023e64:	f04f 0301 	mov.w	r3, #1
 8023e68:	65e1      	str	r1, [r4, #92]	; 0x5c
 8023e6a:	8053      	strh	r3, [r2, #2]
 8023e6c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8023e6e:	1c91      	adds	r1, r2, #2
 8023e70:	65a1      	str	r1, [r4, #88]	; 0x58
 8023e72:	f8a2 b002 	strh.w	fp, [r2, #2]
 8023e76:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023e78:	3201      	adds	r2, #1
 8023e7a:	6562      	str	r2, [r4, #84]	; 0x54
 8023e7c:	e03a      	b.n	8023ef4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8023e7e:	2000      	movs	r0, #0
 8023e80:	e7bc      	b.n	8023dfc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8023e82:	b951      	cbnz	r1, 8023e9a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8023e84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	d0b7      	beq.n	8023dfa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023e8a:	4641      	mov	r1, r8
 8023e8c:	9805      	ldr	r0, [sp, #20]
 8023e8e:	f7ff fd59 	bl	8023944 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023e92:	e7b2      	b.n	8023dfa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023e94:	2900      	cmp	r1, #0
 8023e96:	d035      	beq.n	8023f04 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8023e98:	9504      	str	r5, [sp, #16]
 8023e9a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8023e9e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023ea2:	f7ff fd3b 	bl	802391c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8023ea6:	4605      	mov	r5, r0
 8023ea8:	b330      	cbz	r0, 8023ef8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023eaa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023eac:	b182      	cbz	r2, 8023ed0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023eae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8023eb0:	4591      	cmp	r9, r2
 8023eb2:	d00d      	beq.n	8023ed0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023eb4:	4641      	mov	r1, r8
 8023eb6:	9805      	ldr	r0, [sp, #20]
 8023eb8:	f7ff fd44 	bl	8023944 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023ebc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023ec0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8023ec2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023ec6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8023ec8:	2300      	movs	r3, #0
 8023eca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023ecc:	6563      	str	r3, [r4, #84]	; 0x54
 8023ece:	65a2      	str	r2, [r4, #88]	; 0x58
 8023ed0:	f1bb 0f00 	cmp.w	fp, #0
 8023ed4:	db10      	blt.n	8023ef8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023ed6:	f7f2 fce3 	bl	80168a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023eda:	4583      	cmp	fp, r0
 8023edc:	da0c      	bge.n	8023ef8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023ede:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8023ee0:	f802 500b 	strb.w	r5, [r2, fp]
 8023ee4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8023ee6:	3201      	adds	r2, #1
 8023ee8:	4593      	cmp	fp, r2
 8023eea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8023eec:	d1b9      	bne.n	8023e62 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8023eee:	8811      	ldrh	r1, [r2, #0]
 8023ef0:	3101      	adds	r1, #1
 8023ef2:	8011      	strh	r1, [r2, #0]
 8023ef4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8023ef8:	9b03      	ldr	r3, [sp, #12]
 8023efa:	3301      	adds	r3, #1
 8023efc:	d0c2      	beq.n	8023e84 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8023efe:	f10b 0a01 	add.w	sl, fp, #1
 8023f02:	9d04      	ldr	r5, [sp, #16]
 8023f04:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023f08:	4553      	cmp	r3, sl
 8023f0a:	dd88      	ble.n	8023e1e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023f0c:	01b1      	lsls	r1, r6, #6
 8023f0e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023f12:	f7ff fd03 	bl	802391c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8023f16:	4683      	mov	fp, r0
 8023f18:	2800      	cmp	r0, #0
 8023f1a:	d080      	beq.n	8023e1e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023f1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023f1e:	b183      	cbz	r3, 8023f42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023f20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8023f22:	4599      	cmp	r9, r3
 8023f24:	d00d      	beq.n	8023f42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023f26:	4641      	mov	r1, r8
 8023f28:	9805      	ldr	r0, [sp, #20]
 8023f2a:	f7ff fd0b 	bl	8023944 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023f2e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023f32:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023f36:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023f38:	65e3      	str	r3, [r4, #92]	; 0x5c
 8023f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023f3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8023f3e:	2300      	movs	r3, #0
 8023f40:	6563      	str	r3, [r4, #84]	; 0x54
 8023f42:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023f46:	464a      	mov	r2, r9
 8023f48:	f8cd b000 	str.w	fp, [sp]
 8023f4c:	4651      	mov	r1, sl
 8023f4e:	eba3 030a 	sub.w	r3, r3, sl
 8023f52:	4640      	mov	r0, r8
 8023f54:	f001 f8a4 	bl	80250a0 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8023f58:	e761      	b.n	8023e1e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08023f5a <_ZN8touchgfx6Canvas6renderEh>:
 8023f5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023f5c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8023f60:	4604      	mov	r4, r0
 8023f62:	460d      	mov	r5, r1
 8023f64:	b913      	cbnz	r3, 8023f6c <_ZN8touchgfx6Canvas6renderEh+0x12>
 8023f66:	2001      	movs	r0, #1
 8023f68:	b003      	add	sp, #12
 8023f6a:	bd30      	pop	{r4, r5, pc}
 8023f6c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8023f70:	2b00      	cmp	r3, #0
 8023f72:	d12f      	bne.n	8023fd4 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8023f74:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8023f78:	2b00      	cmp	r3, #0
 8023f7a:	d0f4      	beq.n	8023f66 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8023f7c:	6840      	ldr	r0, [r0, #4]
 8023f7e:	6803      	ldr	r3, [r0, #0]
 8023f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f82:	4798      	blx	r3
 8023f84:	fb10 f105 	smulbb	r1, r0, r5
 8023f88:	b288      	uxth	r0, r1
 8023f8a:	1c41      	adds	r1, r0, #1
 8023f8c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023f90:	120d      	asrs	r5, r1, #8
 8023f92:	d0e8      	beq.n	8023f66 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8023f94:	4620      	mov	r0, r4
 8023f96:	f7ff fec0 	bl	8023d1a <_ZN8touchgfx6Canvas5closeEv>
 8023f9a:	6860      	ldr	r0, [r4, #4]
 8023f9c:	6803      	ldr	r3, [r0, #0]
 8023f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023fa0:	4798      	blx	r3
 8023fa2:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 8023fa6:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8023faa:	8082      	strh	r2, [r0, #4]
 8023fac:	80c3      	strh	r3, [r0, #6]
 8023fae:	6860      	ldr	r0, [r4, #4]
 8023fb0:	6803      	ldr	r3, [r0, #0]
 8023fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023fb4:	4798      	blx	r3
 8023fb6:	7205      	strb	r5, [r0, #8]
 8023fb8:	6860      	ldr	r0, [r4, #4]
 8023fba:	6803      	ldr	r3, [r0, #0]
 8023fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023fbe:	4798      	blx	r3
 8023fc0:	f104 0318 	add.w	r3, r4, #24
 8023fc4:	4669      	mov	r1, sp
 8023fc6:	e9cd 3000 	strd	r3, r0, [sp]
 8023fca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8023fce:	f7ff ff07 	bl	8023de0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8023fd2:	e7c9      	b.n	8023f68 <_ZN8touchgfx6Canvas6renderEh+0xe>
 8023fd4:	2000      	movs	r0, #0
 8023fd6:	e7c7      	b.n	8023f68 <_ZN8touchgfx6Canvas6renderEh+0xe>

08023fd8 <_ZN8touchgfx6CanvasD1Ev>:
 8023fd8:	b538      	push	{r3, r4, r5, lr}
 8023fda:	4605      	mov	r5, r0
 8023fdc:	4b08      	ldr	r3, [pc, #32]	; (8024000 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8023fde:	4604      	mov	r4, r0
 8023fe0:	f845 3b30 	str.w	r3, [r5], #48
 8023fe4:	4b07      	ldr	r3, [pc, #28]	; (8024004 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8023fe6:	6818      	ldr	r0, [r3, #0]
 8023fe8:	6803      	ldr	r3, [r0, #0]
 8023fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023fec:	4798      	blx	r3
 8023fee:	4628      	mov	r0, r5
 8023ff0:	f000 f814 	bl	802401c <_ZN8touchgfx7OutlineD1Ev>
 8023ff4:	f104 0018 	add.w	r0, r4, #24
 8023ff8:	f001 f88b 	bl	8025112 <_ZN8touchgfx15RenderingBufferD1Ev>
 8023ffc:	4620      	mov	r0, r4
 8023ffe:	bd38      	pop	{r3, r4, r5, pc}
 8024000:	0802a998 	.word	0x0802a998
 8024004:	2005653c 	.word	0x2005653c

08024008 <_ZN8touchgfx6CanvasD0Ev>:
 8024008:	b510      	push	{r4, lr}
 802400a:	4604      	mov	r4, r0
 802400c:	f7ff ffe4 	bl	8023fd8 <_ZN8touchgfx6CanvasD1Ev>
 8024010:	21bc      	movs	r1, #188	; 0xbc
 8024012:	4620      	mov	r0, r4
 8024014:	f001 f89f 	bl	8025156 <_ZdlPvj>
 8024018:	4620      	mov	r0, r4
 802401a:	bd10      	pop	{r4, pc}

0802401c <_ZN8touchgfx7OutlineD1Ev>:
 802401c:	4770      	bx	lr

0802401e <_ZN8touchgfx7OutlineD0Ev>:
 802401e:	b510      	push	{r4, lr}
 8024020:	4604      	mov	r4, r0
 8024022:	2148      	movs	r1, #72	; 0x48
 8024024:	f001 f897 	bl	8025156 <_ZdlPvj>
 8024028:	4620      	mov	r0, r4
 802402a:	bd10      	pop	{r4, pc}

0802402c <_ZN8touchgfx7Outline5resetEv>:
 802402c:	b510      	push	{r4, lr}
 802402e:	4604      	mov	r4, r0
 8024030:	f7f2 fc4e 	bl	80168d0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8024034:	60e0      	str	r0, [r4, #12]
 8024036:	f7f2 fc51 	bl	80168dc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802403a:	68e3      	ldr	r3, [r4, #12]
 802403c:	2200      	movs	r2, #0
 802403e:	08c0      	lsrs	r0, r0, #3
 8024040:	6123      	str	r3, [r4, #16]
 8024042:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024046:	6060      	str	r0, [r4, #4]
 8024048:	82a3      	strh	r3, [r4, #20]
 802404a:	82e3      	strh	r3, [r4, #22]
 802404c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802404e:	60a2      	str	r2, [r4, #8]
 8024050:	f023 0301 	bic.w	r3, r3, #1
 8024054:	8322      	strh	r2, [r4, #24]
 8024056:	8362      	strh	r2, [r4, #26]
 8024058:	f043 0302 	orr.w	r3, r3, #2
 802405c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024060:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024062:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024066:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802406a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802406e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8024072:	bd10      	pop	{r4, pc}

08024074 <_ZN8touchgfx7OutlineC1Ev>:
 8024074:	4b0f      	ldr	r3, [pc, #60]	; (80240b4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8024076:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802407a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802407e:	b510      	push	{r4, lr}
 8024080:	6003      	str	r3, [r0, #0]
 8024082:	2300      	movs	r3, #0
 8024084:	4604      	mov	r4, r0
 8024086:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802408a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802408e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024092:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8024096:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802409a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802409e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80240a2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80240a6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80240aa:	f7ff ffbf 	bl	802402c <_ZN8touchgfx7Outline5resetEv>
 80240ae:	4620      	mov	r0, r4
 80240b0:	bd10      	pop	{r4, pc}
 80240b2:	bf00      	nop
 80240b4:	0802aa68 	.word	0x0802aa68

080240b8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80240b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240bc:	b095      	sub	sp, #84	; 0x54
 80240be:	4604      	mov	r4, r0
 80240c0:	1155      	asrs	r5, r2, #5
 80240c2:	f002 061f 	and.w	r6, r2, #31
 80240c6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80240c8:	1157      	asrs	r7, r2, #5
 80240ca:	9304      	str	r3, [sp, #16]
 80240cc:	1153      	asrs	r3, r2, #5
 80240ce:	9300      	str	r3, [sp, #0]
 80240d0:	1143      	asrs	r3, r0, #5
 80240d2:	930c      	str	r3, [sp, #48]	; 0x30
 80240d4:	f000 031f 	and.w	r3, r0, #31
 80240d8:	9303      	str	r3, [sp, #12]
 80240da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80240dc:	42ab      	cmp	r3, r5
 80240de:	bfc8      	it	gt
 80240e0:	462b      	movgt	r3, r5
 80240e2:	ea4f 1562 	mov.w	r5, r2, asr #5
 80240e6:	bfc8      	it	gt
 80240e8:	6323      	strgt	r3, [r4, #48]	; 0x30
 80240ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80240ec:	42ab      	cmp	r3, r5
 80240ee:	bfd8      	it	le
 80240f0:	462b      	movle	r3, r5
 80240f2:	ea4f 1560 	mov.w	r5, r0, asr #5
 80240f6:	bfdc      	itt	le
 80240f8:	3301      	addle	r3, #1
 80240fa:	63a3      	strle	r3, [r4, #56]	; 0x38
 80240fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80240fe:	42ab      	cmp	r3, r5
 8024100:	bfc8      	it	gt
 8024102:	462b      	movgt	r3, r5
 8024104:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024108:	bfc8      	it	gt
 802410a:	6323      	strgt	r3, [r4, #48]	; 0x30
 802410c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802410e:	42ab      	cmp	r3, r5
 8024110:	bfd8      	it	le
 8024112:	462b      	movle	r3, r5
 8024114:	ea4f 1561 	mov.w	r5, r1, asr #5
 8024118:	bfdc      	itt	le
 802411a:	3301      	addle	r3, #1
 802411c:	63a3      	strle	r3, [r4, #56]	; 0x38
 802411e:	9b04      	ldr	r3, [sp, #16]
 8024120:	eba3 0a01 	sub.w	sl, r3, r1
 8024124:	1143      	asrs	r3, r0, #5
 8024126:	429f      	cmp	r7, r3
 8024128:	f040 811d 	bne.w	8024366 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 802412c:	9b04      	ldr	r3, [sp, #16]
 802412e:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8024132:	9b03      	ldr	r3, [sp, #12]
 8024134:	429e      	cmp	r6, r3
 8024136:	d131      	bne.n	802419c <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8024138:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802413c:	fa0f fb8b 	sxth.w	fp, fp
 8024140:	f9bd 2000 	ldrsh.w	r2, [sp]
 8024144:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024148:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802414c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024150:	4281      	cmp	r1, r0
 8024152:	f000 80e6 	beq.w	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024156:	8b60      	ldrh	r0, [r4, #26]
 8024158:	8b21      	ldrh	r1, [r4, #24]
 802415a:	4301      	orrs	r1, r0
 802415c:	d00b      	beq.n	8024176 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802415e:	2b00      	cmp	r3, #0
 8024160:	db09      	blt.n	8024176 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024162:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024164:	428b      	cmp	r3, r1
 8024166:	da06      	bge.n	8024176 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024168:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802416c:	4299      	cmp	r1, r3
 802416e:	d308      	bcc.n	8024182 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 8024170:	2301      	movs	r3, #1
 8024172:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024176:	f8a4 b014 	strh.w	fp, [r4, #20]
 802417a:	2300      	movs	r3, #0
 802417c:	82e2      	strh	r2, [r4, #22]
 802417e:	8323      	strh	r3, [r4, #24]
 8024180:	e01f      	b.n	80241c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8024182:	f104 0314 	add.w	r3, r4, #20
 8024186:	6925      	ldr	r5, [r4, #16]
 8024188:	cb03      	ldmia	r3!, {r0, r1}
 802418a:	6028      	str	r0, [r5, #0]
 802418c:	6069      	str	r1, [r5, #4]
 802418e:	6923      	ldr	r3, [r4, #16]
 8024190:	3308      	adds	r3, #8
 8024192:	6123      	str	r3, [r4, #16]
 8024194:	68a3      	ldr	r3, [r4, #8]
 8024196:	3301      	adds	r3, #1
 8024198:	60a3      	str	r3, [r4, #8]
 802419a:	e7ec      	b.n	8024176 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802419c:	9b04      	ldr	r3, [sp, #16]
 802419e:	45ab      	cmp	fp, r5
 80241a0:	f001 011f 	and.w	r1, r1, #31
 80241a4:	8b20      	ldrh	r0, [r4, #24]
 80241a6:	f003 031f 	and.w	r3, r3, #31
 80241aa:	8b62      	ldrh	r2, [r4, #26]
 80241ac:	9305      	str	r3, [sp, #20]
 80241ae:	9b03      	ldr	r3, [sp, #12]
 80241b0:	eba3 0306 	sub.w	r3, r3, r6
 80241b4:	d107      	bne.n	80241c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 80241b6:	4418      	add	r0, r3
 80241b8:	8320      	strh	r0, [r4, #24]
 80241ba:	9805      	ldr	r0, [sp, #20]
 80241bc:	4401      	add	r1, r0
 80241be:	fb03 2301 	mla	r3, r3, r1, r2
 80241c2:	8363      	strh	r3, [r4, #26]
 80241c4:	e0ad      	b.n	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80241c6:	f1ba 0f00 	cmp.w	sl, #0
 80241ca:	db33      	blt.n	8024234 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 80241cc:	2701      	movs	r7, #1
 80241ce:	f1c1 0c20 	rsb	ip, r1, #32
 80241d2:	9702      	str	r7, [sp, #8]
 80241d4:	2720      	movs	r7, #32
 80241d6:	fb03 f30c 	mul.w	r3, r3, ip
 80241da:	9701      	str	r7, [sp, #4]
 80241dc:	9f01      	ldr	r7, [sp, #4]
 80241de:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80241e2:	4439      	add	r1, r7
 80241e4:	fb93 fcfa 	sdiv	ip, r3, sl
 80241e8:	fb0a 331c 	mls	r3, sl, ip, r3
 80241ec:	2b00      	cmp	r3, #0
 80241ee:	bfbc      	itt	lt
 80241f0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80241f4:	4453      	addlt	r3, sl
 80241f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80241fa:	9a02      	ldr	r2, [sp, #8]
 80241fc:	4460      	add	r0, ip
 80241fe:	4415      	add	r5, r2
 8024200:	f9bd 2000 	ldrsh.w	r2, [sp]
 8024204:	b200      	sxth	r0, r0
 8024206:	0417      	lsls	r7, r2, #16
 8024208:	9200      	str	r2, [sp, #0]
 802420a:	fa0f fe85 	sxth.w	lr, r5
 802420e:	8320      	strh	r0, [r4, #24]
 8024210:	9704      	str	r7, [sp, #16]
 8024212:	b209      	sxth	r1, r1
 8024214:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8024218:	9a04      	ldr	r2, [sp, #16]
 802421a:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802421e:	8361      	strh	r1, [r4, #26]
 8024220:	eb0e 0902 	add.w	r9, lr, r2
 8024224:	454f      	cmp	r7, r9
 8024226:	d10d      	bne.n	8024244 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8024228:	4ba0      	ldr	r3, [pc, #640]	; (80244ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802422a:	2177      	movs	r1, #119	; 0x77
 802422c:	4aa0      	ldr	r2, [pc, #640]	; (80244b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 802422e:	48a1      	ldr	r0, [pc, #644]	; (80244b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8024230:	f001 f910 	bl	8025454 <__assert_func>
 8024234:	f04f 37ff 	mov.w	r7, #4294967295
 8024238:	434b      	muls	r3, r1
 802423a:	f1ca 0a00 	rsb	sl, sl, #0
 802423e:	9702      	str	r7, [sp, #8]
 8024240:	2700      	movs	r7, #0
 8024242:	e7ca      	b.n	80241da <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8024244:	ea50 0201 	orrs.w	r2, r0, r1
 8024248:	d00c      	beq.n	8024264 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802424a:	f1b8 0f00 	cmp.w	r8, #0
 802424e:	db09      	blt.n	8024264 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024250:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024252:	4588      	cmp	r8, r1
 8024254:	da06      	bge.n	8024264 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024256:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802425a:	4288      	cmp	r0, r1
 802425c:	d364      	bcc.n	8024328 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802425e:	2101      	movs	r1, #1
 8024260:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024264:	2100      	movs	r1, #0
 8024266:	9a00      	ldr	r2, [sp, #0]
 8024268:	45ab      	cmp	fp, r5
 802426a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802426e:	82e2      	strh	r2, [r4, #22]
 8024270:	4466      	add	r6, ip
 8024272:	8321      	strh	r1, [r4, #24]
 8024274:	8361      	strh	r1, [r4, #26]
 8024276:	d04b      	beq.n	8024310 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8024278:	9a03      	ldr	r2, [sp, #12]
 802427a:	eba3 030a 	sub.w	r3, r3, sl
 802427e:	f04f 0800 	mov.w	r8, #0
 8024282:	1b91      	subs	r1, r2, r6
 8024284:	448c      	add	ip, r1
 8024286:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802428a:	fb9c f7fa 	sdiv	r7, ip, sl
 802428e:	fb0a cc17 	mls	ip, sl, r7, ip
 8024292:	f1bc 0f00 	cmp.w	ip, #0
 8024296:	bfbc      	itt	lt
 8024298:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802429c:	44d4      	addlt	ip, sl
 802429e:	1c7a      	adds	r2, r7, #1
 80242a0:	9207      	str	r2, [sp, #28]
 80242a2:	eb13 030c 	adds.w	r3, r3, ip
 80242a6:	9a02      	ldr	r2, [sp, #8]
 80242a8:	bf54      	ite	pl
 80242aa:	9807      	ldrpl	r0, [sp, #28]
 80242ac:	4638      	movmi	r0, r7
 80242ae:	4415      	add	r5, r2
 80242b0:	9a04      	ldr	r2, [sp, #16]
 80242b2:	fa0f fe80 	sxth.w	lr, r0
 80242b6:	4406      	add	r6, r0
 80242b8:	ea4f 1140 	mov.w	r1, r0, lsl #5
 80242bc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80242c0:	fa0f f985 	sxth.w	r9, r5
 80242c4:	bf58      	it	pl
 80242c6:	eba3 030a 	subpl.w	r3, r3, sl
 80242ca:	4410      	add	r0, r2
 80242cc:	b209      	sxth	r1, r1
 80242ce:	444a      	add	r2, r9
 80242d0:	f8a4 e018 	strh.w	lr, [r4, #24]
 80242d4:	8361      	strh	r1, [r4, #26]
 80242d6:	4290      	cmp	r0, r2
 80242d8:	d0a6      	beq.n	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80242da:	ea5e 0201 	orrs.w	r2, lr, r1
 80242de:	d00d      	beq.n	80242fc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 80242e0:	9a00      	ldr	r2, [sp, #0]
 80242e2:	2a00      	cmp	r2, #0
 80242e4:	db0a      	blt.n	80242fc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 80242e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80242e8:	428a      	cmp	r2, r1
 80242ea:	da07      	bge.n	80242fc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 80242ec:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80242f0:	4288      	cmp	r0, r1
 80242f2:	d329      	bcc.n	8024348 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 80242f4:	f04f 0201 	mov.w	r2, #1
 80242f8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80242fc:	9a00      	ldr	r2, [sp, #0]
 80242fe:	45ab      	cmp	fp, r5
 8024300:	f8a4 9014 	strh.w	r9, [r4, #20]
 8024304:	82e2      	strh	r2, [r4, #22]
 8024306:	f8a4 8018 	strh.w	r8, [r4, #24]
 802430a:	f8a4 801a 	strh.w	r8, [r4, #26]
 802430e:	d1c8      	bne.n	80242a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8024310:	9b03      	ldr	r3, [sp, #12]
 8024312:	9a01      	ldr	r2, [sp, #4]
 8024314:	1b9e      	subs	r6, r3, r6
 8024316:	9b05      	ldr	r3, [sp, #20]
 8024318:	3320      	adds	r3, #32
 802431a:	8326      	strh	r6, [r4, #24]
 802431c:	1a9b      	subs	r3, r3, r2
 802431e:	435e      	muls	r6, r3
 8024320:	8366      	strh	r6, [r4, #26]
 8024322:	b015      	add	sp, #84	; 0x54
 8024324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024328:	f104 0714 	add.w	r7, r4, #20
 802432c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024330:	cf03      	ldmia	r7!, {r0, r1}
 8024332:	f8c8 0000 	str.w	r0, [r8]
 8024336:	f8c8 1004 	str.w	r1, [r8, #4]
 802433a:	6921      	ldr	r1, [r4, #16]
 802433c:	3108      	adds	r1, #8
 802433e:	6121      	str	r1, [r4, #16]
 8024340:	68a1      	ldr	r1, [r4, #8]
 8024342:	3101      	adds	r1, #1
 8024344:	60a1      	str	r1, [r4, #8]
 8024346:	e78d      	b.n	8024264 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024348:	f104 0e14 	add.w	lr, r4, #20
 802434c:	6922      	ldr	r2, [r4, #16]
 802434e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024352:	9206      	str	r2, [sp, #24]
 8024354:	6010      	str	r0, [r2, #0]
 8024356:	6051      	str	r1, [r2, #4]
 8024358:	6921      	ldr	r1, [r4, #16]
 802435a:	3108      	adds	r1, #8
 802435c:	6121      	str	r1, [r4, #16]
 802435e:	68a1      	ldr	r1, [r4, #8]
 8024360:	3101      	adds	r1, #1
 8024362:	60a1      	str	r1, [r4, #8]
 8024364:	e7ca      	b.n	80242fc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024366:	eba0 0b02 	sub.w	fp, r0, r2
 802436a:	f1ba 0f00 	cmp.w	sl, #0
 802436e:	f040 80a3 	bne.w	80244b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8024372:	f1bb 0f00 	cmp.w	fp, #0
 8024376:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802437a:	8b62      	ldrh	r2, [r4, #26]
 802437c:	b22d      	sxth	r5, r5
 802437e:	bfa8      	it	ge
 8024380:	f04f 0a20 	movge.w	sl, #32
 8024384:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8024388:	8b21      	ldrh	r1, [r4, #24]
 802438a:	bfb8      	it	lt
 802438c:	f04f 39ff 	movlt.w	r9, #4294967295
 8024390:	ebaa 0606 	sub.w	r6, sl, r6
 8024394:	bfa8      	it	ge
 8024396:	f04f 0901 	movge.w	r9, #1
 802439a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802439e:	4431      	add	r1, r6
 80243a0:	fb06 2603 	mla	r6, r6, r3, r2
 80243a4:	9a00      	ldr	r2, [sp, #0]
 80243a6:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 80243aa:	b209      	sxth	r1, r1
 80243ac:	444a      	add	r2, r9
 80243ae:	b236      	sxth	r6, r6
 80243b0:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 80243b4:	8321      	strh	r1, [r4, #24]
 80243b6:	b217      	sxth	r7, r2
 80243b8:	8366      	strh	r6, [r4, #26]
 80243ba:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 80243be:	45f4      	cmp	ip, lr
 80243c0:	f43f af32 	beq.w	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80243c4:	4331      	orrs	r1, r6
 80243c6:	d00b      	beq.n	80243e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80243c8:	2800      	cmp	r0, #0
 80243ca:	db09      	blt.n	80243e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80243cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80243ce:	4288      	cmp	r0, r1
 80243d0:	da06      	bge.n	80243e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80243d2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80243d6:	4288      	cmp	r0, r1
 80243d8:	d33b      	bcc.n	8024452 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 80243da:	2101      	movs	r1, #1
 80243dc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80243e0:	f1aa 0610 	sub.w	r6, sl, #16
 80243e4:	82e7      	strh	r7, [r4, #22]
 80243e6:	2700      	movs	r7, #0
 80243e8:	82a5      	strh	r5, [r4, #20]
 80243ea:	0076      	lsls	r6, r6, #1
 80243ec:	8327      	strh	r7, [r4, #24]
 80243ee:	fb06 fc03 	mul.w	ip, r6, r3
 80243f2:	b236      	sxth	r6, r6
 80243f4:	8367      	strh	r7, [r4, #26]
 80243f6:	fa0f fc8c 	sxth.w	ip, ip
 80243fa:	ea46 010c 	orr.w	r1, r6, ip
 80243fe:	9100      	str	r1, [sp, #0]
 8024400:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024402:	428a      	cmp	r2, r1
 8024404:	d046      	beq.n	8024494 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 8024406:	444a      	add	r2, r9
 8024408:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802440c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024410:	fa0f f882 	sxth.w	r8, r2
 8024414:	8326      	strh	r6, [r4, #24]
 8024416:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802441a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802441e:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 8024422:	4570      	cmp	r0, lr
 8024424:	f43f af00 	beq.w	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024428:	9800      	ldr	r0, [sp, #0]
 802442a:	b160      	cbz	r0, 8024446 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802442c:	2900      	cmp	r1, #0
 802442e:	db0a      	blt.n	8024446 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024430:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024432:	4281      	cmp	r1, r0
 8024434:	da07      	bge.n	8024446 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024436:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802443a:	4288      	cmp	r0, r1
 802443c:	d319      	bcc.n	8024472 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 802443e:	f04f 0101 	mov.w	r1, #1
 8024442:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024446:	82a5      	strh	r5, [r4, #20]
 8024448:	f8a4 8016 	strh.w	r8, [r4, #22]
 802444c:	8327      	strh	r7, [r4, #24]
 802444e:	8367      	strh	r7, [r4, #26]
 8024450:	e7d6      	b.n	8024400 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 8024452:	f104 0614 	add.w	r6, r4, #20
 8024456:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802445a:	ce03      	ldmia	r6!, {r0, r1}
 802445c:	f8cc 0000 	str.w	r0, [ip]
 8024460:	f8cc 1004 	str.w	r1, [ip, #4]
 8024464:	6921      	ldr	r1, [r4, #16]
 8024466:	3108      	adds	r1, #8
 8024468:	6121      	str	r1, [r4, #16]
 802446a:	68a1      	ldr	r1, [r4, #8]
 802446c:	3101      	adds	r1, #1
 802446e:	60a1      	str	r1, [r4, #8]
 8024470:	e7b6      	b.n	80243e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024472:	f104 0e14 	add.w	lr, r4, #20
 8024476:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802447a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802447e:	f8cb 0000 	str.w	r0, [fp]
 8024482:	f8cb 1004 	str.w	r1, [fp, #4]
 8024486:	6921      	ldr	r1, [r4, #16]
 8024488:	3108      	adds	r1, #8
 802448a:	6121      	str	r1, [r4, #16]
 802448c:	68a1      	ldr	r1, [r4, #8]
 802448e:	3101      	adds	r1, #1
 8024490:	60a1      	str	r1, [r4, #8]
 8024492:	e7d8      	b.n	8024446 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024494:	9a03      	ldr	r2, [sp, #12]
 8024496:	8b61      	ldrh	r1, [r4, #26]
 8024498:	f1a2 0e20 	sub.w	lr, r2, #32
 802449c:	8b22      	ldrh	r2, [r4, #24]
 802449e:	44d6      	add	lr, sl
 80244a0:	4472      	add	r2, lr
 80244a2:	fb0e 1303 	mla	r3, lr, r3, r1
 80244a6:	8322      	strh	r2, [r4, #24]
 80244a8:	e68b      	b.n	80241c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 80244aa:	bf00      	nop
 80244ac:	0802a9ef 	.word	0x0802a9ef
 80244b0:	0802aa70 	.word	0x0802aa70
 80244b4:	0802aa20 	.word	0x0802aa20
 80244b8:	f1bb 0f00 	cmp.w	fp, #0
 80244bc:	f2c0 8124 	blt.w	8024708 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 80244c0:	2201      	movs	r2, #1
 80244c2:	f1c6 0320 	rsb	r3, r6, #32
 80244c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80244c8:	2220      	movs	r2, #32
 80244ca:	fb0a f303 	mul.w	r3, sl, r3
 80244ce:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80244d2:	9202      	str	r2, [sp, #8]
 80244d4:	fb93 fcfb 	sdiv	ip, r3, fp
 80244d8:	fb0b 331c 	mls	r3, fp, ip, r3
 80244dc:	2b00      	cmp	r3, #0
 80244de:	9308      	str	r3, [sp, #32]
 80244e0:	bfbe      	ittt	lt
 80244e2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80244e6:	445b      	addlt	r3, fp
 80244e8:	9308      	strlt	r3, [sp, #32]
 80244ea:	eb0c 0301 	add.w	r3, ip, r1
 80244ee:	9301      	str	r3, [sp, #4]
 80244f0:	115b      	asrs	r3, r3, #5
 80244f2:	9305      	str	r3, [sp, #20]
 80244f4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80244f8:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 80244fc:	461f      	mov	r7, r3
 80244fe:	9b02      	ldr	r3, [sp, #8]
 8024500:	42b3      	cmp	r3, r6
 8024502:	f040 8117 	bne.w	8024734 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8024506:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802450a:	f9bd 3000 	ldrsh.w	r3, [sp]
 802450e:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8024512:	42b9      	cmp	r1, r7
 8024514:	d016      	beq.n	8024544 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8024516:	8b60      	ldrh	r0, [r4, #26]
 8024518:	8b21      	ldrh	r1, [r4, #24]
 802451a:	4301      	orrs	r1, r0
 802451c:	d00d      	beq.n	802453a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802451e:	f1b8 0f00 	cmp.w	r8, #0
 8024522:	db0a      	blt.n	802453a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8024524:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024526:	4541      	cmp	r1, r8
 8024528:	dd07      	ble.n	802453a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802452a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802452e:	4288      	cmp	r0, r1
 8024530:	f0c0 80f3 	bcc.w	802471a <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 8024534:	2101      	movs	r1, #1
 8024536:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802453a:	82e3      	strh	r3, [r4, #22]
 802453c:	2300      	movs	r3, #0
 802453e:	82a2      	strh	r2, [r4, #20]
 8024540:	8323      	strh	r3, [r4, #24]
 8024542:	8363      	strh	r3, [r4, #26]
 8024544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024546:	9a00      	ldr	r2, [sp, #0]
 8024548:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802454c:	441a      	add	r2, r3
 802454e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024552:	4691      	mov	r9, r2
 8024554:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8024558:	fa0f f589 	sxth.w	r5, r9
 802455c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8024560:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8024564:	4281      	cmp	r1, r0
 8024566:	d015      	beq.n	8024594 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8024568:	8b60      	ldrh	r0, [r4, #26]
 802456a:	8b21      	ldrh	r1, [r4, #24]
 802456c:	4301      	orrs	r1, r0
 802456e:	d00c      	beq.n	802458a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024570:	2a00      	cmp	r2, #0
 8024572:	db0a      	blt.n	802458a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024574:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024576:	428a      	cmp	r2, r1
 8024578:	da07      	bge.n	802458a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802457a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802457e:	4291      	cmp	r1, r2
 8024580:	f0c0 81ae 	bcc.w	80248e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 8024584:	2201      	movs	r2, #1
 8024586:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802458a:	82a3      	strh	r3, [r4, #20]
 802458c:	2300      	movs	r3, #0
 802458e:	82e5      	strh	r5, [r4, #22]
 8024590:	8323      	strh	r3, [r4, #24]
 8024592:	8363      	strh	r3, [r4, #26]
 8024594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024596:	454b      	cmp	r3, r9
 8024598:	f000 808a 	beq.w	80246b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 802459c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80245a0:	fb93 f2fb 	sdiv	r2, r3, fp
 80245a4:	fb0b 3312 	mls	r3, fp, r2, r3
 80245a8:	9205      	str	r2, [sp, #20]
 80245aa:	2b00      	cmp	r3, #0
 80245ac:	9307      	str	r3, [sp, #28]
 80245ae:	da04      	bge.n	80245ba <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 80245b0:	1e53      	subs	r3, r2, #1
 80245b2:	9305      	str	r3, [sp, #20]
 80245b4:	9b07      	ldr	r3, [sp, #28]
 80245b6:	445b      	add	r3, fp
 80245b8:	9307      	str	r3, [sp, #28]
 80245ba:	9b08      	ldr	r3, [sp, #32]
 80245bc:	f04f 0a00 	mov.w	sl, #0
 80245c0:	eba3 030b 	sub.w	r3, r3, fp
 80245c4:	9308      	str	r3, [sp, #32]
 80245c6:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 80245ca:	f1c3 0320 	rsb	r3, r3, #32
 80245ce:	930a      	str	r3, [sp, #40]	; 0x28
 80245d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80245d2:	9b02      	ldr	r3, [sp, #8]
 80245d4:	1a9b      	subs	r3, r3, r2
 80245d6:	9309      	str	r3, [sp, #36]	; 0x24
 80245d8:	9902      	ldr	r1, [sp, #8]
 80245da:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80245de:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80245e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80245e6:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 80245ea:	189b      	adds	r3, r3, r2
 80245ec:	9308      	str	r3, [sp, #32]
 80245ee:	bf57      	itett	pl
 80245f0:	eba3 030b 	subpl.w	r3, r3, fp
 80245f4:	9b05      	ldrmi	r3, [sp, #20]
 80245f6:	9308      	strpl	r3, [sp, #32]
 80245f8:	9b05      	ldrpl	r3, [sp, #20]
 80245fa:	bf58      	it	pl
 80245fc:	3301      	addpl	r3, #1
 80245fe:	9300      	str	r3, [sp, #0]
 8024600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024604:	4413      	add	r3, r2
 8024606:	9301      	str	r3, [sp, #4]
 8024608:	115b      	asrs	r3, r3, #5
 802460a:	9306      	str	r3, [sp, #24]
 802460c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802460e:	428b      	cmp	r3, r1
 8024610:	f040 8180 	bne.w	8024914 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024614:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8024618:	fa0f f389 	sxth.w	r3, r9
 802461c:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8024620:	4541      	cmp	r1, r8
 8024622:	d017      	beq.n	8024654 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8024624:	8b60      	ldrh	r0, [r4, #26]
 8024626:	8b21      	ldrh	r1, [r4, #24]
 8024628:	4301      	orrs	r1, r0
 802462a:	d00d      	beq.n	8024648 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802462c:	2e00      	cmp	r6, #0
 802462e:	db0b      	blt.n	8024648 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8024630:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024632:	42b1      	cmp	r1, r6
 8024634:	dd08      	ble.n	8024648 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8024636:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802463a:	4288      	cmp	r0, r1
 802463c:	f0c0 815d 	bcc.w	80248fa <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8024640:	f04f 0101 	mov.w	r1, #1
 8024644:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024648:	82a2      	strh	r2, [r4, #20]
 802464a:	82e3      	strh	r3, [r4, #22]
 802464c:	f8a4 a018 	strh.w	sl, [r4, #24]
 8024650:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8024654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024656:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802465a:	4499      	add	r9, r3
 802465c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024660:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024664:	fa0f f589 	sxth.w	r5, r9
 8024668:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802466c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8024670:	4281      	cmp	r1, r0
 8024672:	f43f add9 	beq.w	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024676:	8b60      	ldrh	r0, [r4, #26]
 8024678:	8b21      	ldrh	r1, [r4, #24]
 802467a:	4301      	orrs	r1, r0
 802467c:	d00d      	beq.n	802469a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802467e:	2a00      	cmp	r2, #0
 8024680:	db0b      	blt.n	802469a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8024682:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024684:	428a      	cmp	r2, r1
 8024686:	da08      	bge.n	802469a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8024688:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802468c:	4291      	cmp	r1, r2
 802468e:	f0c0 8228 	bcc.w	8024ae2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 8024692:	f04f 0201 	mov.w	r2, #1
 8024696:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802469a:	82a3      	strh	r3, [r4, #20]
 802469c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802469e:	82e5      	strh	r5, [r4, #22]
 80246a0:	454b      	cmp	r3, r9
 80246a2:	f8a4 a018 	strh.w	sl, [r4, #24]
 80246a6:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80246aa:	f8dd c004 	ldr.w	ip, [sp, #4]
 80246ae:	d193      	bne.n	80245d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 80246b0:	9b02      	ldr	r3, [sp, #8]
 80246b2:	f1c3 0e20 	rsb	lr, r3, #32
 80246b6:	9b04      	ldr	r3, [sp, #16]
 80246b8:	ea4f 1b63 	mov.w	fp, r3, asr #5
 80246bc:	9b03      	ldr	r3, [sp, #12]
 80246be:	459e      	cmp	lr, r3
 80246c0:	f040 8229 	bne.w	8024b16 <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 80246c4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80246c8:	fa0f f58b 	sxth.w	r5, fp
 80246cc:	fa0f f289 	sxth.w	r2, r9
 80246d0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80246d4:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 80246d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80246dc:	4281      	cmp	r1, r0
 80246de:	f43f ae20 	beq.w	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80246e2:	8b60      	ldrh	r0, [r4, #26]
 80246e4:	8b21      	ldrh	r1, [r4, #24]
 80246e6:	4301      	orrs	r1, r0
 80246e8:	d00c      	beq.n	8024704 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80246ea:	2b00      	cmp	r3, #0
 80246ec:	db0a      	blt.n	8024704 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80246ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80246f0:	428b      	cmp	r3, r1
 80246f2:	da07      	bge.n	8024704 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80246f4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80246f8:	4299      	cmp	r1, r3
 80246fa:	f0c0 81ff 	bcc.w	8024afc <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 80246fe:	2301      	movs	r3, #1
 8024700:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024704:	82a5      	strh	r5, [r4, #20]
 8024706:	e538      	b.n	802417a <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 8024708:	f04f 32ff 	mov.w	r2, #4294967295
 802470c:	fb0a f306 	mul.w	r3, sl, r6
 8024710:	f1cb 0b00 	rsb	fp, fp, #0
 8024714:	920b      	str	r2, [sp, #44]	; 0x2c
 8024716:	2200      	movs	r2, #0
 8024718:	e6d9      	b.n	80244ce <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 802471a:	f104 0514 	add.w	r5, r4, #20
 802471e:	6926      	ldr	r6, [r4, #16]
 8024720:	cd03      	ldmia	r5!, {r0, r1}
 8024722:	6030      	str	r0, [r6, #0]
 8024724:	6071      	str	r1, [r6, #4]
 8024726:	6921      	ldr	r1, [r4, #16]
 8024728:	3108      	adds	r1, #8
 802472a:	6121      	str	r1, [r4, #16]
 802472c:	68a1      	ldr	r1, [r4, #8]
 802472e:	3101      	adds	r1, #1
 8024730:	60a1      	str	r1, [r4, #8]
 8024732:	e702      	b.n	802453a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8024734:	9b01      	ldr	r3, [sp, #4]
 8024736:	f001 011f 	and.w	r1, r1, #31
 802473a:	8b20      	ldrh	r0, [r4, #24]
 802473c:	f003 031f 	and.w	r3, r3, #31
 8024740:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024744:	930d      	str	r3, [sp, #52]	; 0x34
 8024746:	9b02      	ldr	r3, [sp, #8]
 8024748:	1b9a      	subs	r2, r3, r6
 802474a:	9b05      	ldr	r3, [sp, #20]
 802474c:	42ab      	cmp	r3, r5
 802474e:	d107      	bne.n	8024760 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8024750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024752:	4410      	add	r0, r2
 8024754:	4419      	add	r1, r3
 8024756:	8320      	strh	r0, [r4, #24]
 8024758:	fb02 9201 	mla	r2, r2, r1, r9
 802475c:	8362      	strh	r2, [r4, #26]
 802475e:	e6f1      	b.n	8024544 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8024760:	f1bc 0f00 	cmp.w	ip, #0
 8024764:	f2c0 8093 	blt.w	802488e <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8024768:	f1c1 0320 	rsb	r3, r1, #32
 802476c:	435a      	muls	r2, r3
 802476e:	2301      	movs	r3, #1
 8024770:	9309      	str	r3, [sp, #36]	; 0x24
 8024772:	2320      	movs	r3, #32
 8024774:	9307      	str	r3, [sp, #28]
 8024776:	9b07      	ldr	r3, [sp, #28]
 8024778:	fb92 fefc 	sdiv	lr, r2, ip
 802477c:	fb0c 221e 	mls	r2, ip, lr, r2
 8024780:	4419      	add	r1, r3
 8024782:	2a00      	cmp	r2, #0
 8024784:	bfbc      	itt	lt
 8024786:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802478a:	4462      	addlt	r2, ip
 802478c:	fb0e 9101 	mla	r1, lr, r1, r9
 8024790:	4470      	add	r0, lr
 8024792:	b20b      	sxth	r3, r1
 8024794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024796:	b200      	sxth	r0, r0
 8024798:	440d      	add	r5, r1
 802479a:	f9bd 1000 	ldrsh.w	r1, [sp]
 802479e:	8320      	strh	r0, [r4, #24]
 80247a0:	fa0f f985 	sxth.w	r9, r5
 80247a4:	9106      	str	r1, [sp, #24]
 80247a6:	0409      	lsls	r1, r1, #16
 80247a8:	8363      	strh	r3, [r4, #26]
 80247aa:	910a      	str	r1, [sp, #40]	; 0x28
 80247ac:	4449      	add	r1, r9
 80247ae:	42b9      	cmp	r1, r7
 80247b0:	f43f ad3a 	beq.w	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80247b4:	4303      	orrs	r3, r0
 80247b6:	d00c      	beq.n	80247d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80247b8:	f1b8 0f00 	cmp.w	r8, #0
 80247bc:	db09      	blt.n	80247d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80247be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80247c0:	4543      	cmp	r3, r8
 80247c2:	dd06      	ble.n	80247d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80247c4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80247c8:	4299      	cmp	r1, r3
 80247ca:	d368      	bcc.n	802489e <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 80247cc:	2301      	movs	r3, #1
 80247ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80247d2:	9b06      	ldr	r3, [sp, #24]
 80247d4:	4476      	add	r6, lr
 80247d6:	f8a4 9014 	strh.w	r9, [r4, #20]
 80247da:	82e3      	strh	r3, [r4, #22]
 80247dc:	2300      	movs	r3, #0
 80247de:	8323      	strh	r3, [r4, #24]
 80247e0:	8363      	strh	r3, [r4, #26]
 80247e2:	9b05      	ldr	r3, [sp, #20]
 80247e4:	42ab      	cmp	r3, r5
 80247e6:	d048      	beq.n	802487a <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 80247e8:	9b02      	ldr	r3, [sp, #8]
 80247ea:	eba2 020c 	sub.w	r2, r2, ip
 80247ee:	1b9b      	subs	r3, r3, r6
 80247f0:	4473      	add	r3, lr
 80247f2:	015b      	lsls	r3, r3, #5
 80247f4:	fb93 f8fc 	sdiv	r8, r3, ip
 80247f8:	fb0c 3318 	mls	r3, ip, r8, r3
 80247fc:	2b00      	cmp	r3, #0
 80247fe:	bfbc      	itt	lt
 8024800:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024804:	4463      	addlt	r3, ip
 8024806:	f108 0101 	add.w	r1, r8, #1
 802480a:	910f      	str	r1, [sp, #60]	; 0x3c
 802480c:	18d2      	adds	r2, r2, r3
 802480e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024810:	bf56      	itet	pl
 8024812:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 8024814:	4640      	movmi	r0, r8
 8024816:	eba2 020c 	subpl.w	r2, r2, ip
 802481a:	fa0f fe80 	sxth.w	lr, r0
 802481e:	4406      	add	r6, r0
 8024820:	0141      	lsls	r1, r0, #5
 8024822:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024824:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024828:	4405      	add	r5, r0
 802482a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802482e:	b209      	sxth	r1, r1
 8024830:	fa0f f985 	sxth.w	r9, r5
 8024834:	4438      	add	r0, r7
 8024836:	8361      	strh	r1, [r4, #26]
 8024838:	444f      	add	r7, r9
 802483a:	42b8      	cmp	r0, r7
 802483c:	f43f acf4 	beq.w	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024840:	ea5e 0101 	orrs.w	r1, lr, r1
 8024844:	d00e      	beq.n	8024864 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8024846:	9906      	ldr	r1, [sp, #24]
 8024848:	2900      	cmp	r1, #0
 802484a:	db0b      	blt.n	8024864 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802484c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802484e:	9806      	ldr	r0, [sp, #24]
 8024850:	4288      	cmp	r0, r1
 8024852:	da07      	bge.n	8024864 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8024854:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024858:	4288      	cmp	r0, r1
 802485a:	d330      	bcc.n	80248be <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 802485c:	f04f 0101 	mov.w	r1, #1
 8024860:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024864:	9906      	ldr	r1, [sp, #24]
 8024866:	f8a4 9014 	strh.w	r9, [r4, #20]
 802486a:	82e1      	strh	r1, [r4, #22]
 802486c:	f04f 0100 	mov.w	r1, #0
 8024870:	8321      	strh	r1, [r4, #24]
 8024872:	8361      	strh	r1, [r4, #26]
 8024874:	9905      	ldr	r1, [sp, #20]
 8024876:	42a9      	cmp	r1, r5
 8024878:	d1c8      	bne.n	802480c <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 802487a:	9b02      	ldr	r3, [sp, #8]
 802487c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802487e:	1b9e      	subs	r6, r3, r6
 8024880:	9b07      	ldr	r3, [sp, #28]
 8024882:	3120      	adds	r1, #32
 8024884:	8326      	strh	r6, [r4, #24]
 8024886:	1ac9      	subs	r1, r1, r3
 8024888:	434e      	muls	r6, r1
 802488a:	8366      	strh	r6, [r4, #26]
 802488c:	e65a      	b.n	8024544 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802488e:	f04f 33ff 	mov.w	r3, #4294967295
 8024892:	434a      	muls	r2, r1
 8024894:	f1cc 0c00 	rsb	ip, ip, #0
 8024898:	9309      	str	r3, [sp, #36]	; 0x24
 802489a:	2300      	movs	r3, #0
 802489c:	e76a      	b.n	8024774 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 802489e:	f104 0314 	add.w	r3, r4, #20
 80248a2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80248a6:	cb03      	ldmia	r3!, {r0, r1}
 80248a8:	f8c8 0000 	str.w	r0, [r8]
 80248ac:	f8c8 1004 	str.w	r1, [r8, #4]
 80248b0:	6923      	ldr	r3, [r4, #16]
 80248b2:	3308      	adds	r3, #8
 80248b4:	6123      	str	r3, [r4, #16]
 80248b6:	68a3      	ldr	r3, [r4, #8]
 80248b8:	3301      	adds	r3, #1
 80248ba:	60a3      	str	r3, [r4, #8]
 80248bc:	e789      	b.n	80247d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80248be:	6921      	ldr	r1, [r4, #16]
 80248c0:	f104 0e14 	add.w	lr, r4, #20
 80248c4:	910e      	str	r1, [sp, #56]	; 0x38
 80248c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80248c8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80248cc:	6038      	str	r0, [r7, #0]
 80248ce:	4638      	mov	r0, r7
 80248d0:	6079      	str	r1, [r7, #4]
 80248d2:	6921      	ldr	r1, [r4, #16]
 80248d4:	3108      	adds	r1, #8
 80248d6:	6121      	str	r1, [r4, #16]
 80248d8:	68a1      	ldr	r1, [r4, #8]
 80248da:	3101      	adds	r1, #1
 80248dc:	60a1      	str	r1, [r4, #8]
 80248de:	e7c1      	b.n	8024864 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 80248e0:	f104 0214 	add.w	r2, r4, #20
 80248e4:	6926      	ldr	r6, [r4, #16]
 80248e6:	ca03      	ldmia	r2!, {r0, r1}
 80248e8:	6030      	str	r0, [r6, #0]
 80248ea:	6071      	str	r1, [r6, #4]
 80248ec:	6922      	ldr	r2, [r4, #16]
 80248ee:	3208      	adds	r2, #8
 80248f0:	6122      	str	r2, [r4, #16]
 80248f2:	68a2      	ldr	r2, [r4, #8]
 80248f4:	3201      	adds	r2, #1
 80248f6:	60a2      	str	r2, [r4, #8]
 80248f8:	e647      	b.n	802458a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 80248fa:	f104 0514 	add.w	r5, r4, #20
 80248fe:	6926      	ldr	r6, [r4, #16]
 8024900:	cd03      	ldmia	r5!, {r0, r1}
 8024902:	6030      	str	r0, [r6, #0]
 8024904:	6071      	str	r1, [r6, #4]
 8024906:	6921      	ldr	r1, [r4, #16]
 8024908:	3108      	adds	r1, #8
 802490a:	6121      	str	r1, [r4, #16]
 802490c:	68a1      	ldr	r1, [r4, #8]
 802490e:	3101      	adds	r1, #1
 8024910:	60a1      	str	r1, [r4, #8]
 8024912:	e699      	b.n	8024648 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8024914:	9b01      	ldr	r3, [sp, #4]
 8024916:	ea4f 176c 	mov.w	r7, ip, asr #5
 802491a:	8b20      	ldrh	r0, [r4, #24]
 802491c:	f00c 0c1f 	and.w	ip, ip, #31
 8024920:	f003 031f 	and.w	r3, r3, #31
 8024924:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8024928:	9310      	str	r3, [sp, #64]	; 0x40
 802492a:	9b06      	ldr	r3, [sp, #24]
 802492c:	429f      	cmp	r7, r3
 802492e:	d10a      	bne.n	8024946 <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 8024930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024932:	4418      	add	r0, r3
 8024934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024936:	449c      	add	ip, r3
 8024938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802493a:	8320      	strh	r0, [r4, #24]
 802493c:	fb03 ee0c 	mla	lr, r3, ip, lr
 8024940:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024944:	e686      	b.n	8024654 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8024946:	9b00      	ldr	r3, [sp, #0]
 8024948:	2b00      	cmp	r3, #0
 802494a:	f2c0 80a0 	blt.w	8024a8e <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 802494e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024950:	f1cc 0320 	rsb	r3, ip, #32
 8024954:	434b      	muls	r3, r1
 8024956:	2101      	movs	r1, #1
 8024958:	910e      	str	r1, [sp, #56]	; 0x38
 802495a:	2120      	movs	r1, #32
 802495c:	9a00      	ldr	r2, [sp, #0]
 802495e:	910d      	str	r1, [sp, #52]	; 0x34
 8024960:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024962:	fb93 f5f2 	sdiv	r5, r3, r2
 8024966:	fb02 3315 	mls	r3, r2, r5, r3
 802496a:	448c      	add	ip, r1
 802496c:	2b00      	cmp	r3, #0
 802496e:	bfbc      	itt	lt
 8024970:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8024974:	189b      	addlt	r3, r3, r2
 8024976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024978:	fb05 ec0c 	mla	ip, r5, ip, lr
 802497c:	4428      	add	r0, r5
 802497e:	4417      	add	r7, r2
 8024980:	fa0f f18c 	sxth.w	r1, ip
 8024984:	fa0f fc89 	sxth.w	ip, r9
 8024988:	fa0f fe87 	sxth.w	lr, r7
 802498c:	8361      	strh	r1, [r4, #26]
 802498e:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8024992:	b200      	sxth	r0, r0
 8024994:	920f      	str	r2, [sp, #60]	; 0x3c
 8024996:	4472      	add	r2, lr
 8024998:	8320      	strh	r0, [r4, #24]
 802499a:	4542      	cmp	r2, r8
 802499c:	f43f ac44 	beq.w	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80249a0:	ea50 0201 	orrs.w	r2, r0, r1
 80249a4:	d00c      	beq.n	80249c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80249a6:	2e00      	cmp	r6, #0
 80249a8:	db0a      	blt.n	80249c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80249aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80249ac:	42b1      	cmp	r1, r6
 80249ae:	dd07      	ble.n	80249c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80249b0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80249b4:	4288      	cmp	r0, r1
 80249b6:	d375      	bcc.n	8024aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 80249b8:	f04f 0201 	mov.w	r2, #1
 80249bc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80249c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80249c2:	f8a4 e014 	strh.w	lr, [r4, #20]
 80249c6:	1956      	adds	r6, r2, r5
 80249c8:	9a06      	ldr	r2, [sp, #24]
 80249ca:	f8a4 c016 	strh.w	ip, [r4, #22]
 80249ce:	42ba      	cmp	r2, r7
 80249d0:	f8a4 a018 	strh.w	sl, [r4, #24]
 80249d4:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80249d8:	d04c      	beq.n	8024a74 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 80249da:	9a02      	ldr	r2, [sp, #8]
 80249dc:	1b91      	subs	r1, r2, r6
 80249de:	9a00      	ldr	r2, [sp, #0]
 80249e0:	440d      	add	r5, r1
 80249e2:	016d      	lsls	r5, r5, #5
 80249e4:	fb95 fef2 	sdiv	lr, r5, r2
 80249e8:	fb02 551e 	mls	r5, r2, lr, r5
 80249ec:	2d00      	cmp	r5, #0
 80249ee:	bfbc      	itt	lt
 80249f0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80249f4:	18ad      	addlt	r5, r5, r2
 80249f6:	9a00      	ldr	r2, [sp, #0]
 80249f8:	1a9b      	subs	r3, r3, r2
 80249fa:	f10e 0201 	add.w	r2, lr, #1
 80249fe:	9213      	str	r2, [sp, #76]	; 0x4c
 8024a00:	195b      	adds	r3, r3, r5
 8024a02:	bf57      	itett	pl
 8024a04:	9a00      	ldrpl	r2, [sp, #0]
 8024a06:	4670      	movmi	r0, lr
 8024a08:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 8024a0a:	1a9b      	subpl	r3, r3, r2
 8024a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024a0e:	fa0f f880 	sxth.w	r8, r0
 8024a12:	4406      	add	r6, r0
 8024a14:	4417      	add	r7, r2
 8024a16:	0141      	lsls	r1, r0, #5
 8024a18:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024a1c:	b23a      	sxth	r2, r7
 8024a1e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8024a22:	b209      	sxth	r1, r1
 8024a24:	9211      	str	r2, [sp, #68]	; 0x44
 8024a26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024a28:	8361      	strh	r1, [r4, #26]
 8024a2a:	1882      	adds	r2, r0, r2
 8024a2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024a2e:	9212      	str	r2, [sp, #72]	; 0x48
 8024a30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024a32:	4402      	add	r2, r0
 8024a34:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024a36:	4290      	cmp	r0, r2
 8024a38:	f43f abf6 	beq.w	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024a3c:	ea58 0201 	orrs.w	r2, r8, r1
 8024a40:	d00d      	beq.n	8024a5e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024a42:	f1bc 0f00 	cmp.w	ip, #0
 8024a46:	db0a      	blt.n	8024a5e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024a48:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024a4a:	458c      	cmp	ip, r1
 8024a4c:	da07      	bge.n	8024a5e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024a4e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024a52:	4288      	cmp	r0, r1
 8024a54:	d336      	bcc.n	8024ac4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 8024a56:	f04f 0201 	mov.w	r2, #1
 8024a5a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024a5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024a60:	f8a4 c016 	strh.w	ip, [r4, #22]
 8024a64:	82a2      	strh	r2, [r4, #20]
 8024a66:	9a06      	ldr	r2, [sp, #24]
 8024a68:	f8a4 a018 	strh.w	sl, [r4, #24]
 8024a6c:	42ba      	cmp	r2, r7
 8024a6e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8024a72:	d1c5      	bne.n	8024a00 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 8024a74:	9b02      	ldr	r3, [sp, #8]
 8024a76:	1b9e      	subs	r6, r3, r6
 8024a78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024a7a:	f103 0c20 	add.w	ip, r3, #32
 8024a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024a80:	8326      	strh	r6, [r4, #24]
 8024a82:	ebac 0c03 	sub.w	ip, ip, r3
 8024a86:	fb06 f60c 	mul.w	r6, r6, ip
 8024a8a:	8366      	strh	r6, [r4, #26]
 8024a8c:	e5e2      	b.n	8024654 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8024a8e:	9a00      	ldr	r2, [sp, #0]
 8024a90:	f04f 31ff 	mov.w	r1, #4294967295
 8024a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a96:	4252      	negs	r2, r2
 8024a98:	910e      	str	r1, [sp, #56]	; 0x38
 8024a9a:	fb03 f30c 	mul.w	r3, r3, ip
 8024a9e:	2100      	movs	r1, #0
 8024aa0:	9200      	str	r2, [sp, #0]
 8024aa2:	e75b      	b.n	802495c <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 8024aa4:	f104 0614 	add.w	r6, r4, #20
 8024aa8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024aac:	ce03      	ldmia	r6!, {r0, r1}
 8024aae:	f8c8 0000 	str.w	r0, [r8]
 8024ab2:	f8c8 1004 	str.w	r1, [r8, #4]
 8024ab6:	6921      	ldr	r1, [r4, #16]
 8024ab8:	3108      	adds	r1, #8
 8024aba:	6121      	str	r1, [r4, #16]
 8024abc:	68a1      	ldr	r1, [r4, #8]
 8024abe:	3101      	adds	r1, #1
 8024ac0:	60a1      	str	r1, [r4, #8]
 8024ac2:	e77d      	b.n	80249c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024ac4:	f104 0814 	add.w	r8, r4, #20
 8024ac8:	6922      	ldr	r2, [r4, #16]
 8024aca:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024ace:	9212      	str	r2, [sp, #72]	; 0x48
 8024ad0:	6010      	str	r0, [r2, #0]
 8024ad2:	6051      	str	r1, [r2, #4]
 8024ad4:	6921      	ldr	r1, [r4, #16]
 8024ad6:	3108      	adds	r1, #8
 8024ad8:	6121      	str	r1, [r4, #16]
 8024ada:	68a1      	ldr	r1, [r4, #8]
 8024adc:	3101      	adds	r1, #1
 8024ade:	60a1      	str	r1, [r4, #8]
 8024ae0:	e7bd      	b.n	8024a5e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024ae2:	f104 0214 	add.w	r2, r4, #20
 8024ae6:	6926      	ldr	r6, [r4, #16]
 8024ae8:	ca03      	ldmia	r2!, {r0, r1}
 8024aea:	6030      	str	r0, [r6, #0]
 8024aec:	6071      	str	r1, [r6, #4]
 8024aee:	6922      	ldr	r2, [r4, #16]
 8024af0:	3208      	adds	r2, #8
 8024af2:	6122      	str	r2, [r4, #16]
 8024af4:	68a2      	ldr	r2, [r4, #8]
 8024af6:	3201      	adds	r2, #1
 8024af8:	60a2      	str	r2, [r4, #8]
 8024afa:	e5ce      	b.n	802469a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8024afc:	f104 0314 	add.w	r3, r4, #20
 8024b00:	6926      	ldr	r6, [r4, #16]
 8024b02:	cb03      	ldmia	r3!, {r0, r1}
 8024b04:	6030      	str	r0, [r6, #0]
 8024b06:	6071      	str	r1, [r6, #4]
 8024b08:	6923      	ldr	r3, [r4, #16]
 8024b0a:	3308      	adds	r3, #8
 8024b0c:	6123      	str	r3, [r4, #16]
 8024b0e:	68a3      	ldr	r3, [r4, #8]
 8024b10:	3301      	adds	r3, #1
 8024b12:	60a3      	str	r3, [r4, #8]
 8024b14:	e5f6      	b.n	8024704 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8024b16:	9b01      	ldr	r3, [sp, #4]
 8024b18:	8b20      	ldrh	r0, [r4, #24]
 8024b1a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8024b1e:	f003 021f 	and.w	r2, r3, #31
 8024b22:	9b04      	ldr	r3, [sp, #16]
 8024b24:	45dc      	cmp	ip, fp
 8024b26:	8b66      	ldrh	r6, [r4, #26]
 8024b28:	f003 031f 	and.w	r3, r3, #31
 8024b2c:	9305      	str	r3, [sp, #20]
 8024b2e:	9b03      	ldr	r3, [sp, #12]
 8024b30:	eba3 050e 	sub.w	r5, r3, lr
 8024b34:	d108      	bne.n	8024b48 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 8024b36:	9b05      	ldr	r3, [sp, #20]
 8024b38:	4428      	add	r0, r5
 8024b3a:	441a      	add	r2, r3
 8024b3c:	8320      	strh	r0, [r4, #24]
 8024b3e:	fb05 6502 	mla	r5, r5, r2, r6
 8024b42:	8365      	strh	r5, [r4, #26]
 8024b44:	f7ff bbed 	b.w	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024b48:	9b04      	ldr	r3, [sp, #16]
 8024b4a:	9901      	ldr	r1, [sp, #4]
 8024b4c:	1a5b      	subs	r3, r3, r1
 8024b4e:	9300      	str	r3, [sp, #0]
 8024b50:	f100 809c 	bmi.w	8024c8c <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 8024b54:	f1c2 0120 	rsb	r1, r2, #32
 8024b58:	434d      	muls	r5, r1
 8024b5a:	2101      	movs	r1, #1
 8024b5c:	9102      	str	r1, [sp, #8]
 8024b5e:	2120      	movs	r1, #32
 8024b60:	9b00      	ldr	r3, [sp, #0]
 8024b62:	9101      	str	r1, [sp, #4]
 8024b64:	9901      	ldr	r1, [sp, #4]
 8024b66:	fb95 f7f3 	sdiv	r7, r5, r3
 8024b6a:	fb03 5517 	mls	r5, r3, r7, r5
 8024b6e:	440a      	add	r2, r1
 8024b70:	2d00      	cmp	r5, #0
 8024b72:	bfbc      	itt	lt
 8024b74:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024b78:	18ed      	addlt	r5, r5, r3
 8024b7a:	fb07 6202 	mla	r2, r7, r2, r6
 8024b7e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8024b82:	4438      	add	r0, r7
 8024b84:	b211      	sxth	r1, r2
 8024b86:	9a02      	ldr	r2, [sp, #8]
 8024b88:	b200      	sxth	r0, r0
 8024b8a:	4494      	add	ip, r2
 8024b8c:	fa0f f289 	sxth.w	r2, r9
 8024b90:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024b94:	0413      	lsls	r3, r2, #16
 8024b96:	8320      	strh	r0, [r4, #24]
 8024b98:	fa0f f88c 	sxth.w	r8, ip
 8024b9c:	8361      	strh	r1, [r4, #26]
 8024b9e:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 8024ba2:	9304      	str	r3, [sp, #16]
 8024ba4:	eb08 0a03 	add.w	sl, r8, r3
 8024ba8:	45d1      	cmp	r9, sl
 8024baa:	f43f ab3d 	beq.w	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024bae:	ea50 0301 	orrs.w	r3, r0, r1
 8024bb2:	d00b      	beq.n	8024bcc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8024bb4:	2e00      	cmp	r6, #0
 8024bb6:	db09      	blt.n	8024bcc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8024bb8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024bba:	428e      	cmp	r6, r1
 8024bbc:	da06      	bge.n	8024bcc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8024bbe:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024bc2:	4288      	cmp	r0, r1
 8024bc4:	d36b      	bcc.n	8024c9e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 8024bc6:	2101      	movs	r1, #1
 8024bc8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024bcc:	2100      	movs	r1, #0
 8024bce:	45e3      	cmp	fp, ip
 8024bd0:	f8a4 8014 	strh.w	r8, [r4, #20]
 8024bd4:	44be      	add	lr, r7
 8024bd6:	82e2      	strh	r2, [r4, #22]
 8024bd8:	8321      	strh	r1, [r4, #24]
 8024bda:	8361      	strh	r1, [r4, #26]
 8024bdc:	d047      	beq.n	8024c6e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 8024bde:	9b03      	ldr	r3, [sp, #12]
 8024be0:	f04f 0900 	mov.w	r9, #0
 8024be4:	eba3 060e 	sub.w	r6, r3, lr
 8024be8:	9b00      	ldr	r3, [sp, #0]
 8024bea:	443e      	add	r6, r7
 8024bec:	0176      	lsls	r6, r6, #5
 8024bee:	fb96 f7f3 	sdiv	r7, r6, r3
 8024bf2:	fb03 6617 	mls	r6, r3, r7, r6
 8024bf6:	428e      	cmp	r6, r1
 8024bf8:	bfbc      	itt	lt
 8024bfa:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024bfe:	18f6      	addlt	r6, r6, r3
 8024c00:	9b00      	ldr	r3, [sp, #0]
 8024c02:	1aed      	subs	r5, r5, r3
 8024c04:	1c7b      	adds	r3, r7, #1
 8024c06:	9307      	str	r3, [sp, #28]
 8024c08:	19ad      	adds	r5, r5, r6
 8024c0a:	bf57      	itett	pl
 8024c0c:	9b00      	ldrpl	r3, [sp, #0]
 8024c0e:	4638      	movmi	r0, r7
 8024c10:	9807      	ldrpl	r0, [sp, #28]
 8024c12:	1aed      	subpl	r5, r5, r3
 8024c14:	9b02      	ldr	r3, [sp, #8]
 8024c16:	fa0f f880 	sxth.w	r8, r0
 8024c1a:	4486      	add	lr, r0
 8024c1c:	449c      	add	ip, r3
 8024c1e:	0141      	lsls	r1, r0, #5
 8024c20:	9b04      	ldr	r3, [sp, #16]
 8024c22:	fa0f fa8c 	sxth.w	sl, ip
 8024c26:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024c2a:	b209      	sxth	r1, r1
 8024c2c:	f8a4 8018 	strh.w	r8, [r4, #24]
 8024c30:	4418      	add	r0, r3
 8024c32:	4453      	add	r3, sl
 8024c34:	8361      	strh	r1, [r4, #26]
 8024c36:	4298      	cmp	r0, r3
 8024c38:	f43f aaf6 	beq.w	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024c3c:	ea58 0301 	orrs.w	r3, r8, r1
 8024c40:	d00c      	beq.n	8024c5c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8024c42:	2a00      	cmp	r2, #0
 8024c44:	db0a      	blt.n	8024c5c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8024c46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c48:	428a      	cmp	r2, r1
 8024c4a:	da07      	bge.n	8024c5c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8024c4c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024c50:	4288      	cmp	r0, r1
 8024c52:	d334      	bcc.n	8024cbe <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8024c54:	f04f 0301 	mov.w	r3, #1
 8024c58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c5c:	45e3      	cmp	fp, ip
 8024c5e:	f8a4 a014 	strh.w	sl, [r4, #20]
 8024c62:	82e2      	strh	r2, [r4, #22]
 8024c64:	f8a4 9018 	strh.w	r9, [r4, #24]
 8024c68:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024c6c:	d1cc      	bne.n	8024c08 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 8024c6e:	9b03      	ldr	r3, [sp, #12]
 8024c70:	9e05      	ldr	r6, [sp, #20]
 8024c72:	eba3 0e0e 	sub.w	lr, r3, lr
 8024c76:	9b01      	ldr	r3, [sp, #4]
 8024c78:	3620      	adds	r6, #32
 8024c7a:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024c7e:	1af6      	subs	r6, r6, r3
 8024c80:	fb0e fe06 	mul.w	lr, lr, r6
 8024c84:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024c88:	f7ff bb4b 	b.w	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024c8c:	9b00      	ldr	r3, [sp, #0]
 8024c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8024c92:	4355      	muls	r5, r2
 8024c94:	425b      	negs	r3, r3
 8024c96:	9102      	str	r1, [sp, #8]
 8024c98:	2100      	movs	r1, #0
 8024c9a:	9300      	str	r3, [sp, #0]
 8024c9c:	e760      	b.n	8024b60 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 8024c9e:	f104 0614 	add.w	r6, r4, #20
 8024ca2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024ca6:	ce03      	ldmia	r6!, {r0, r1}
 8024ca8:	f8c9 0000 	str.w	r0, [r9]
 8024cac:	f8c9 1004 	str.w	r1, [r9, #4]
 8024cb0:	6921      	ldr	r1, [r4, #16]
 8024cb2:	3108      	adds	r1, #8
 8024cb4:	6121      	str	r1, [r4, #16]
 8024cb6:	68a1      	ldr	r1, [r4, #8]
 8024cb8:	3101      	adds	r1, #1
 8024cba:	60a1      	str	r1, [r4, #8]
 8024cbc:	e786      	b.n	8024bcc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8024cbe:	f104 0814 	add.w	r8, r4, #20
 8024cc2:	6923      	ldr	r3, [r4, #16]
 8024cc4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024cc8:	9306      	str	r3, [sp, #24]
 8024cca:	6018      	str	r0, [r3, #0]
 8024ccc:	6059      	str	r1, [r3, #4]
 8024cce:	6921      	ldr	r1, [r4, #16]
 8024cd0:	3108      	adds	r1, #8
 8024cd2:	6121      	str	r1, [r4, #16]
 8024cd4:	68a1      	ldr	r1, [r4, #8]
 8024cd6:	3101      	adds	r1, #1
 8024cd8:	60a1      	str	r1, [r4, #8]
 8024cda:	e7bf      	b.n	8024c5c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

08024cdc <_ZN8touchgfx7Outline6lineToEii>:
 8024cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024cde:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024ce0:	4604      	mov	r4, r0
 8024ce2:	460d      	mov	r5, r1
 8024ce4:	4616      	mov	r6, r2
 8024ce6:	079b      	lsls	r3, r3, #30
 8024ce8:	d526      	bpl.n	8024d38 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024cea:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8024cee:	ea85 0001 	eor.w	r0, r5, r1
 8024cf2:	ea86 0302 	eor.w	r3, r6, r2
 8024cf6:	4303      	orrs	r3, r0
 8024cf8:	d01e      	beq.n	8024d38 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024cfa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024cfc:	114b      	asrs	r3, r1, #5
 8024cfe:	9600      	str	r6, [sp, #0]
 8024d00:	4283      	cmp	r3, r0
 8024d02:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024d04:	bfb8      	it	lt
 8024d06:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024d08:	3301      	adds	r3, #1
 8024d0a:	4283      	cmp	r3, r0
 8024d0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024d0e:	bfc8      	it	gt
 8024d10:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024d12:	116b      	asrs	r3, r5, #5
 8024d14:	4283      	cmp	r3, r0
 8024d16:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024d18:	bfb8      	it	lt
 8024d1a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024d1c:	3301      	adds	r3, #1
 8024d1e:	4283      	cmp	r3, r0
 8024d20:	4620      	mov	r0, r4
 8024d22:	bfc8      	it	gt
 8024d24:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024d26:	462b      	mov	r3, r5
 8024d28:	f7ff f9c6 	bl	80240b8 <_ZN8touchgfx7Outline10renderLineEiiii>
 8024d2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024d2e:	f043 0301 	orr.w	r3, r3, #1
 8024d32:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8024d36:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024d38:	b002      	add	sp, #8
 8024d3a:	bd70      	pop	{r4, r5, r6, pc}

08024d3c <_ZN8touchgfx7Outline6moveToEii>:
 8024d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d3e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024d40:	4615      	mov	r5, r2
 8024d42:	4604      	mov	r4, r0
 8024d44:	460e      	mov	r6, r1
 8024d46:	079a      	lsls	r2, r3, #30
 8024d48:	d401      	bmi.n	8024d4e <_ZN8touchgfx7Outline6moveToEii+0x12>
 8024d4a:	f7ff f96f 	bl	802402c <_ZN8touchgfx7Outline5resetEv>
 8024d4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024d50:	07db      	lsls	r3, r3, #31
 8024d52:	d504      	bpl.n	8024d5e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8024d54:	4620      	mov	r0, r4
 8024d56:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8024d5a:	f7ff ffbf 	bl	8024cdc <_ZN8touchgfx7Outline6lineToEii>
 8024d5e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024d62:	f346 1c4f 	sbfx	ip, r6, #5, #16
 8024d66:	f345 174f 	sbfx	r7, r5, #5, #16
 8024d6a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024d6e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8024d72:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8024d76:	428a      	cmp	r2, r1
 8024d78:	d015      	beq.n	8024da6 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 8024d7a:	8b61      	ldrh	r1, [r4, #26]
 8024d7c:	8b22      	ldrh	r2, [r4, #24]
 8024d7e:	430a      	orrs	r2, r1
 8024d80:	d00b      	beq.n	8024d9a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8024d82:	2b00      	cmp	r3, #0
 8024d84:	db09      	blt.n	8024d9a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8024d86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024d88:	4293      	cmp	r3, r2
 8024d8a:	da06      	bge.n	8024d9a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8024d8c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024d90:	429a      	cmp	r2, r3
 8024d92:	d30d      	bcc.n	8024db0 <_ZN8touchgfx7Outline6moveToEii+0x74>
 8024d94:	2301      	movs	r3, #1
 8024d96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d9a:	2300      	movs	r3, #0
 8024d9c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024da0:	82e7      	strh	r7, [r4, #22]
 8024da2:	8323      	strh	r3, [r4, #24]
 8024da4:	8363      	strh	r3, [r4, #26]
 8024da6:	61e6      	str	r6, [r4, #28]
 8024da8:	62a5      	str	r5, [r4, #40]	; 0x28
 8024daa:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8024dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024db0:	f104 0314 	add.w	r3, r4, #20
 8024db4:	6922      	ldr	r2, [r4, #16]
 8024db6:	cb03      	ldmia	r3!, {r0, r1}
 8024db8:	6010      	str	r0, [r2, #0]
 8024dba:	6051      	str	r1, [r2, #4]
 8024dbc:	6923      	ldr	r3, [r4, #16]
 8024dbe:	3308      	adds	r3, #8
 8024dc0:	6123      	str	r3, [r4, #16]
 8024dc2:	68a3      	ldr	r3, [r4, #8]
 8024dc4:	3301      	adds	r3, #1
 8024dc6:	60a3      	str	r3, [r4, #8]
 8024dc8:	e7e7      	b.n	8024d9a <_ZN8touchgfx7Outline6moveToEii+0x5e>

08024dca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8024dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dce:	b0d1      	sub	sp, #324	; 0x144
 8024dd0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8024dd4:	466c      	mov	r4, sp
 8024dd6:	1a0d      	subs	r5, r1, r0
 8024dd8:	f100 0208 	add.w	r2, r0, #8
 8024ddc:	2d48      	cmp	r5, #72	; 0x48
 8024dde:	f340 80ba 	ble.w	8024f56 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024de2:	112d      	asrs	r5, r5, #4
 8024de4:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8024de8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8024dec:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8024df0:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024df4:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8024df8:	681e      	ldr	r6, [r3, #0]
 8024dfa:	6006      	str	r6, [r0, #0]
 8024dfc:	685e      	ldr	r6, [r3, #4]
 8024dfe:	6046      	str	r6, [r0, #4]
 8024e00:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8024e04:	f8a3 e002 	strh.w	lr, [r3, #2]
 8024e08:	f8a3 c004 	strh.w	ip, [r3, #4]
 8024e0c:	80df      	strh	r7, [r3, #6]
 8024e0e:	f1a1 0308 	sub.w	r3, r1, #8
 8024e12:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8024e16:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8024e1a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8024e1e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024e22:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8024e26:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024e2a:	4565      	cmp	r5, ip
 8024e2c:	da0f      	bge.n	8024e4e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8024e2e:	681d      	ldr	r5, [r3, #0]
 8024e30:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8024e34:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8024e38:	6015      	str	r5, [r2, #0]
 8024e3a:	685d      	ldr	r5, [r3, #4]
 8024e3c:	6055      	str	r5, [r2, #4]
 8024e3e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024e42:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024e46:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024e4a:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024e4e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024e52:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024e56:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8024e5a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8024e5e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024e62:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024e66:	45ac      	cmp	ip, r5
 8024e68:	da0d      	bge.n	8024e86 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8024e6a:	6815      	ldr	r5, [r2, #0]
 8024e6c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024e70:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024e74:	6005      	str	r5, [r0, #0]
 8024e76:	6855      	ldr	r5, [r2, #4]
 8024e78:	8107      	strh	r7, [r0, #8]
 8024e7a:	6045      	str	r5, [r0, #4]
 8024e7c:	8146      	strh	r6, [r0, #10]
 8024e7e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8024e82:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8024e86:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8024e8a:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024e8e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024e92:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024e96:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8024e9a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024e9e:	4565      	cmp	r5, ip
 8024ea0:	da0f      	bge.n	8024ec2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024ea2:	681d      	ldr	r5, [r3, #0]
 8024ea4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024ea8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024eac:	6005      	str	r5, [r0, #0]
 8024eae:	685d      	ldr	r5, [r3, #4]
 8024eb0:	6045      	str	r5, [r0, #4]
 8024eb2:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024eb6:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024eba:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024ebe:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024ec2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8024ec6:	f102 0508 	add.w	r5, r2, #8
 8024eca:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8024ece:	f9b0 e000 	ldrsh.w	lr, [r0]
 8024ed2:	462f      	mov	r7, r5
 8024ed4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8024ed8:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024edc:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024ee0:	4556      	cmp	r6, sl
 8024ee2:	db18      	blt.n	8024f16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024ee4:	3b08      	subs	r3, #8
 8024ee6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024eea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024eee:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8024ef2:	45b2      	cmp	sl, r6
 8024ef4:	dbf6      	blt.n	8024ee4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8024ef6:	42ab      	cmp	r3, r5
 8024ef8:	681e      	ldr	r6, [r3, #0]
 8024efa:	d30e      	bcc.n	8024f1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024efc:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024f00:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024f04:	602e      	str	r6, [r5, #0]
 8024f06:	685e      	ldr	r6, [r3, #4]
 8024f08:	606e      	str	r6, [r5, #4]
 8024f0a:	f8a3 9000 	strh.w	r9, [r3]
 8024f0e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8024f12:	809f      	strh	r7, [r3, #4]
 8024f14:	80da      	strh	r2, [r3, #6]
 8024f16:	462a      	mov	r2, r5
 8024f18:	e7d3      	b.n	8024ec2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024f1a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024f1e:	6006      	str	r6, [r0, #0]
 8024f20:	685e      	ldr	r6, [r3, #4]
 8024f22:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8024f26:	6046      	str	r6, [r0, #4]
 8024f28:	1a1e      	subs	r6, r3, r0
 8024f2a:	80da      	strh	r2, [r3, #6]
 8024f2c:	1b4a      	subs	r2, r1, r5
 8024f2e:	f8a3 e000 	strh.w	lr, [r3]
 8024f32:	10d2      	asrs	r2, r2, #3
 8024f34:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024f38:	f8a3 8004 	strh.w	r8, [r3, #4]
 8024f3c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8024f40:	bfb5      	itete	lt
 8024f42:	e9c4 0300 	strdlt	r0, r3, [r4]
 8024f46:	4607      	movge	r7, r0
 8024f48:	460b      	movlt	r3, r1
 8024f4a:	e9c4 5100 	strdge	r5, r1, [r4]
 8024f4e:	4638      	mov	r0, r7
 8024f50:	3408      	adds	r4, #8
 8024f52:	4619      	mov	r1, r3
 8024f54:	e73f      	b.n	8024dd6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024f56:	4291      	cmp	r1, r2
 8024f58:	d925      	bls.n	8024fa6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8024f5a:	f1a2 0310 	sub.w	r3, r2, #16
 8024f5e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8024f62:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8024f66:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 8024f6a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024f6e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8024f72:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024f76:	42ae      	cmp	r6, r5
 8024f78:	da13      	bge.n	8024fa2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8024f7a:	461d      	mov	r5, r3
 8024f7c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8024f80:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8024f84:	3b08      	subs	r3, #8
 8024f86:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024f8a:	619e      	str	r6, [r3, #24]
 8024f8c:	42a8      	cmp	r0, r5
 8024f8e:	686e      	ldr	r6, [r5, #4]
 8024f90:	f8a3 c010 	strh.w	ip, [r3, #16]
 8024f94:	61de      	str	r6, [r3, #28]
 8024f96:	825f      	strh	r7, [r3, #18]
 8024f98:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024f9c:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024fa0:	d1dd      	bne.n	8024f5e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8024fa2:	3208      	adds	r2, #8
 8024fa4:	e7d7      	b.n	8024f56 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024fa6:	466b      	mov	r3, sp
 8024fa8:	429c      	cmp	r4, r3
 8024faa:	d903      	bls.n	8024fb4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024fac:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024fb0:	3c08      	subs	r4, #8
 8024fb2:	e710      	b.n	8024dd6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024fb4:	b051      	add	sp, #324	; 0x144
 8024fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024fba <_ZN8touchgfx7Outline9sortCellsEv>:
 8024fba:	6881      	ldr	r1, [r0, #8]
 8024fbc:	b111      	cbz	r1, 8024fc4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024fbe:	68c0      	ldr	r0, [r0, #12]
 8024fc0:	f7ff bf03 	b.w	8024dca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024fc4:	4770      	bx	lr

08024fc6 <_ZN8touchgfx7Outline8getCellsEv>:
 8024fc6:	b510      	push	{r4, lr}
 8024fc8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024fca:	4604      	mov	r4, r0
 8024fcc:	07da      	lsls	r2, r3, #31
 8024fce:	d507      	bpl.n	8024fe0 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024fd0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024fd4:	f7ff fe82 	bl	8024cdc <_ZN8touchgfx7Outline6lineToEii>
 8024fd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024fda:	f023 0301 	bic.w	r3, r3, #1
 8024fde:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024fe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024fe2:	079b      	lsls	r3, r3, #30
 8024fe4:	d51a      	bpl.n	802501c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024fe6:	8b62      	ldrh	r2, [r4, #26]
 8024fe8:	8b23      	ldrh	r3, [r4, #24]
 8024fea:	4313      	orrs	r3, r2
 8024fec:	d00d      	beq.n	802500a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024fee:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024ff2:	2b00      	cmp	r3, #0
 8024ff4:	db09      	blt.n	802500a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024ff6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024ff8:	4293      	cmp	r3, r2
 8024ffa:	da06      	bge.n	802500a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024ffc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8025000:	429a      	cmp	r2, r3
 8025002:	d80d      	bhi.n	8025020 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025004:	2301      	movs	r3, #1
 8025006:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802500a:	68a0      	ldr	r0, [r4, #8]
 802500c:	b138      	cbz	r0, 802501e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802500e:	4620      	mov	r0, r4
 8025010:	f7ff ffd3 	bl	8024fba <_ZN8touchgfx7Outline9sortCellsEv>
 8025014:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025016:	f023 0302 	bic.w	r3, r3, #2
 802501a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802501c:	68e0      	ldr	r0, [r4, #12]
 802501e:	bd10      	pop	{r4, pc}
 8025020:	f104 0314 	add.w	r3, r4, #20
 8025024:	6922      	ldr	r2, [r4, #16]
 8025026:	cb03      	ldmia	r3!, {r0, r1}
 8025028:	6010      	str	r0, [r2, #0]
 802502a:	6051      	str	r1, [r2, #4]
 802502c:	6923      	ldr	r3, [r4, #16]
 802502e:	3308      	adds	r3, #8
 8025030:	6123      	str	r3, [r4, #16]
 8025032:	68a3      	ldr	r3, [r4, #8]
 8025034:	3301      	adds	r3, #1
 8025036:	60a3      	str	r3, [r4, #8]
 8025038:	e7e7      	b.n	802500a <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802503a <_ZN8touchgfx8ScanlineD1Ev>:
 802503a:	4770      	bx	lr

0802503c <_ZN8touchgfx8ScanlineD0Ev>:
 802503c:	b510      	push	{r4, lr}
 802503e:	4604      	mov	r4, r0
 8025040:	2124      	movs	r1, #36	; 0x24
 8025042:	f000 f888 	bl	8025156 <_ZdlPvj>
 8025046:	4620      	mov	r0, r4
 8025048:	bd10      	pop	{r4, pc}

0802504a <_ZN8touchgfx8Scanline5resetEv>:
 802504a:	b510      	push	{r4, lr}
 802504c:	4604      	mov	r4, r0
 802504e:	f7f1 fc2d 	bl	80168ac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8025052:	61a0      	str	r0, [r4, #24]
 8025054:	f7f1 fc30 	bl	80168b8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8025058:	61e0      	str	r0, [r4, #28]
 802505a:	f7f1 fc33 	bl	80168c4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802505e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025062:	6220      	str	r0, [r4, #32]
 8025064:	6160      	str	r0, [r4, #20]
 8025066:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802506a:	69e3      	ldr	r3, [r4, #28]
 802506c:	6123      	str	r3, [r4, #16]
 802506e:	2300      	movs	r3, #0
 8025070:	60e3      	str	r3, [r4, #12]
 8025072:	bd10      	pop	{r4, pc}

08025074 <_ZN8touchgfx8ScanlineC1Ev>:
 8025074:	4b09      	ldr	r3, [pc, #36]	; (802509c <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 8025076:	b510      	push	{r4, lr}
 8025078:	6003      	str	r3, [r0, #0]
 802507a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802507e:	4604      	mov	r4, r0
 8025080:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8025084:	2300      	movs	r3, #0
 8025086:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802508a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802508e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8025092:	f7ff ffda 	bl	802504a <_ZN8touchgfx8Scanline5resetEv>
 8025096:	4620      	mov	r0, r4
 8025098:	bd10      	pop	{r4, pc}
 802509a:	bf00      	nop
 802509c:	0802aaa8 	.word	0x0802aaa8

080250a0 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80250a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80250a4:	1e0c      	subs	r4, r1, #0
 80250a6:	4605      	mov	r5, r0
 80250a8:	4617      	mov	r7, r2
 80250aa:	461e      	mov	r6, r3
 80250ac:	da03      	bge.n	80250b6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80250ae:	4426      	add	r6, r4
 80250b0:	2e01      	cmp	r6, #1
 80250b2:	d421      	bmi.n	80250f8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80250b4:	2400      	movs	r4, #0
 80250b6:	f7f1 fbf3 	bl	80168a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80250ba:	42a0      	cmp	r0, r4
 80250bc:	dd1c      	ble.n	80250f8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80250be:	eb04 0806 	add.w	r8, r4, r6
 80250c2:	f7f1 fbed 	bl	80168a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80250c6:	4580      	cmp	r8, r0
 80250c8:	d902      	bls.n	80250d0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80250ca:	f7f1 fbe9 	bl	80168a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80250ce:	1b06      	subs	r6, r0, r4
 80250d0:	69a8      	ldr	r0, [r5, #24]
 80250d2:	4632      	mov	r2, r6
 80250d4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80250d8:	4420      	add	r0, r4
 80250da:	f7f4 f92f 	bl	801933c <_ZN8touchgfx6memsetEPvhm>
 80250de:	686b      	ldr	r3, [r5, #4]
 80250e0:	b2b2      	uxth	r2, r6
 80250e2:	3301      	adds	r3, #1
 80250e4:	42a3      	cmp	r3, r4
 80250e6:	696b      	ldr	r3, [r5, #20]
 80250e8:	d108      	bne.n	80250fc <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80250ea:	8819      	ldrh	r1, [r3, #0]
 80250ec:	440a      	add	r2, r1
 80250ee:	801a      	strh	r2, [r3, #0]
 80250f0:	3c01      	subs	r4, #1
 80250f2:	4434      	add	r4, r6
 80250f4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 80250f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80250fc:	1c99      	adds	r1, r3, #2
 80250fe:	6169      	str	r1, [r5, #20]
 8025100:	805a      	strh	r2, [r3, #2]
 8025102:	692b      	ldr	r3, [r5, #16]
 8025104:	1c9a      	adds	r2, r3, #2
 8025106:	612a      	str	r2, [r5, #16]
 8025108:	805c      	strh	r4, [r3, #2]
 802510a:	68eb      	ldr	r3, [r5, #12]
 802510c:	3301      	adds	r3, #1
 802510e:	60eb      	str	r3, [r5, #12]
 8025110:	e7ee      	b.n	80250f0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08025112 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8025112:	4770      	bx	lr

08025114 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8025114:	b510      	push	{r4, lr}
 8025116:	4604      	mov	r4, r0
 8025118:	2118      	movs	r1, #24
 802511a:	f000 f81c 	bl	8025156 <_ZdlPvj>
 802511e:	4620      	mov	r0, r4
 8025120:	bd10      	pop	{r4, pc}
	...

08025124 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8025124:	4a04      	ldr	r2, [pc, #16]	; (8025138 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8025126:	6002      	str	r2, [r0, #0]
 8025128:	2200      	movs	r2, #0
 802512a:	6042      	str	r2, [r0, #4]
 802512c:	7202      	strb	r2, [r0, #8]
 802512e:	6142      	str	r2, [r0, #20]
 8025130:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8025134:	4770      	bx	lr
 8025136:	bf00      	nop
 8025138:	0802aab8 	.word	0x0802aab8

0802513c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802513c:	60c3      	str	r3, [r0, #12]
 802513e:	9b00      	ldr	r3, [sp, #0]
 8025140:	6041      	str	r1, [r0, #4]
 8025142:	6103      	str	r3, [r0, #16]
 8025144:	9b01      	ldr	r3, [sp, #4]
 8025146:	7202      	strb	r2, [r0, #8]
 8025148:	6143      	str	r3, [r0, #20]
 802514a:	4770      	bx	lr

0802514c <__aeabi_atexit>:
 802514c:	460b      	mov	r3, r1
 802514e:	4601      	mov	r1, r0
 8025150:	4618      	mov	r0, r3
 8025152:	f000 b9a3 	b.w	802549c <__cxa_atexit>

08025156 <_ZdlPvj>:
 8025156:	f000 b812 	b.w	802517e <_ZdlPv>

0802515a <__cxa_guard_acquire>:
 802515a:	6803      	ldr	r3, [r0, #0]
 802515c:	07db      	lsls	r3, r3, #31
 802515e:	d406      	bmi.n	802516e <__cxa_guard_acquire+0x14>
 8025160:	7843      	ldrb	r3, [r0, #1]
 8025162:	b103      	cbz	r3, 8025166 <__cxa_guard_acquire+0xc>
 8025164:	deff      	udf	#255	; 0xff
 8025166:	2301      	movs	r3, #1
 8025168:	7043      	strb	r3, [r0, #1]
 802516a:	4618      	mov	r0, r3
 802516c:	4770      	bx	lr
 802516e:	2000      	movs	r0, #0
 8025170:	4770      	bx	lr

08025172 <__cxa_guard_release>:
 8025172:	2301      	movs	r3, #1
 8025174:	6003      	str	r3, [r0, #0]
 8025176:	4770      	bx	lr

08025178 <__cxa_pure_virtual>:
 8025178:	b508      	push	{r3, lr}
 802517a:	f000 f80f 	bl	802519c <_ZSt9terminatev>

0802517e <_ZdlPv>:
 802517e:	f000 b9df 	b.w	8025540 <free>

08025182 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025182:	b508      	push	{r3, lr}
 8025184:	4780      	blx	r0
 8025186:	f000 f95d 	bl	8025444 <abort>
	...

0802518c <_ZSt13get_terminatev>:
 802518c:	4b02      	ldr	r3, [pc, #8]	; (8025198 <_ZSt13get_terminatev+0xc>)
 802518e:	6818      	ldr	r0, [r3, #0]
 8025190:	f3bf 8f5b 	dmb	ish
 8025194:	4770      	bx	lr
 8025196:	bf00      	nop
 8025198:	20000070 	.word	0x20000070

0802519c <_ZSt9terminatev>:
 802519c:	b508      	push	{r3, lr}
 802519e:	f7ff fff5 	bl	802518c <_ZSt13get_terminatev>
 80251a2:	f7ff ffee 	bl	8025182 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080251a8 <ceil>:
 80251a8:	ee10 1a90 	vmov	r1, s1
 80251ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80251b0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80251b4:	2b13      	cmp	r3, #19
 80251b6:	b530      	push	{r4, r5, lr}
 80251b8:	ee10 0a10 	vmov	r0, s0
 80251bc:	ee10 5a10 	vmov	r5, s0
 80251c0:	dc2f      	bgt.n	8025222 <ceil+0x7a>
 80251c2:	2b00      	cmp	r3, #0
 80251c4:	da13      	bge.n	80251ee <ceil+0x46>
 80251c6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8025288 <ceil+0xe0>
 80251ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80251ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80251d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80251d6:	dd05      	ble.n	80251e4 <ceil+0x3c>
 80251d8:	2900      	cmp	r1, #0
 80251da:	db4c      	blt.n	8025276 <ceil+0xce>
 80251dc:	4301      	orrs	r1, r0
 80251de:	d04e      	beq.n	802527e <ceil+0xd6>
 80251e0:	492b      	ldr	r1, [pc, #172]	; (8025290 <ceil+0xe8>)
 80251e2:	2000      	movs	r0, #0
 80251e4:	460b      	mov	r3, r1
 80251e6:	4602      	mov	r2, r0
 80251e8:	ec43 2b10 	vmov	d0, r2, r3
 80251ec:	e020      	b.n	8025230 <ceil+0x88>
 80251ee:	4a29      	ldr	r2, [pc, #164]	; (8025294 <ceil+0xec>)
 80251f0:	411a      	asrs	r2, r3
 80251f2:	ea01 0402 	and.w	r4, r1, r2
 80251f6:	4304      	orrs	r4, r0
 80251f8:	d01a      	beq.n	8025230 <ceil+0x88>
 80251fa:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8025288 <ceil+0xe0>
 80251fe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025202:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802520a:	ddeb      	ble.n	80251e4 <ceil+0x3c>
 802520c:	2900      	cmp	r1, #0
 802520e:	bfc2      	ittt	gt
 8025210:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8025214:	fa40 f303 	asrgt.w	r3, r0, r3
 8025218:	18c9      	addgt	r1, r1, r3
 802521a:	ea21 0102 	bic.w	r1, r1, r2
 802521e:	2000      	movs	r0, #0
 8025220:	e7e0      	b.n	80251e4 <ceil+0x3c>
 8025222:	2b33      	cmp	r3, #51	; 0x33
 8025224:	dd05      	ble.n	8025232 <ceil+0x8a>
 8025226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802522a:	d101      	bne.n	8025230 <ceil+0x88>
 802522c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8025230:	bd30      	pop	{r4, r5, pc}
 8025232:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8025236:	f04f 32ff 	mov.w	r2, #4294967295
 802523a:	40e2      	lsrs	r2, r4
 802523c:	4202      	tst	r2, r0
 802523e:	d0f7      	beq.n	8025230 <ceil+0x88>
 8025240:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8025288 <ceil+0xe0>
 8025244:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025248:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802524c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025250:	ddc8      	ble.n	80251e4 <ceil+0x3c>
 8025252:	2900      	cmp	r1, #0
 8025254:	dd02      	ble.n	802525c <ceil+0xb4>
 8025256:	2b14      	cmp	r3, #20
 8025258:	d103      	bne.n	8025262 <ceil+0xba>
 802525a:	3101      	adds	r1, #1
 802525c:	ea20 0002 	bic.w	r0, r0, r2
 8025260:	e7c0      	b.n	80251e4 <ceil+0x3c>
 8025262:	2401      	movs	r4, #1
 8025264:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8025268:	fa04 f303 	lsl.w	r3, r4, r3
 802526c:	4418      	add	r0, r3
 802526e:	42a8      	cmp	r0, r5
 8025270:	bf38      	it	cc
 8025272:	1909      	addcc	r1, r1, r4
 8025274:	e7f2      	b.n	802525c <ceil+0xb4>
 8025276:	2000      	movs	r0, #0
 8025278:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802527c:	e7b2      	b.n	80251e4 <ceil+0x3c>
 802527e:	4608      	mov	r0, r1
 8025280:	e7b0      	b.n	80251e4 <ceil+0x3c>
 8025282:	bf00      	nop
 8025284:	f3af 8000 	nop.w
 8025288:	8800759c 	.word	0x8800759c
 802528c:	7e37e43c 	.word	0x7e37e43c
 8025290:	3ff00000 	.word	0x3ff00000
 8025294:	000fffff 	.word	0x000fffff

08025298 <ceilf>:
 8025298:	ee10 3a10 	vmov	r3, s0
 802529c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80252a0:	3a7f      	subs	r2, #127	; 0x7f
 80252a2:	2a16      	cmp	r2, #22
 80252a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80252a8:	dc2a      	bgt.n	8025300 <ceilf+0x68>
 80252aa:	2a00      	cmp	r2, #0
 80252ac:	da11      	bge.n	80252d2 <ceilf+0x3a>
 80252ae:	eddf 7a19 	vldr	s15, [pc, #100]	; 8025314 <ceilf+0x7c>
 80252b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80252b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80252ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252be:	dd05      	ble.n	80252cc <ceilf+0x34>
 80252c0:	2b00      	cmp	r3, #0
 80252c2:	db23      	blt.n	802530c <ceilf+0x74>
 80252c4:	2900      	cmp	r1, #0
 80252c6:	bf18      	it	ne
 80252c8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80252cc:	ee00 3a10 	vmov	s0, r3
 80252d0:	4770      	bx	lr
 80252d2:	4911      	ldr	r1, [pc, #68]	; (8025318 <ceilf+0x80>)
 80252d4:	4111      	asrs	r1, r2
 80252d6:	420b      	tst	r3, r1
 80252d8:	d0fa      	beq.n	80252d0 <ceilf+0x38>
 80252da:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8025314 <ceilf+0x7c>
 80252de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80252e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80252e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252ea:	ddef      	ble.n	80252cc <ceilf+0x34>
 80252ec:	2b00      	cmp	r3, #0
 80252ee:	bfc2      	ittt	gt
 80252f0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80252f4:	fa40 f202 	asrgt.w	r2, r0, r2
 80252f8:	189b      	addgt	r3, r3, r2
 80252fa:	ea23 0301 	bic.w	r3, r3, r1
 80252fe:	e7e5      	b.n	80252cc <ceilf+0x34>
 8025300:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025304:	d3e4      	bcc.n	80252d0 <ceilf+0x38>
 8025306:	ee30 0a00 	vadd.f32	s0, s0, s0
 802530a:	4770      	bx	lr
 802530c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8025310:	e7dc      	b.n	80252cc <ceilf+0x34>
 8025312:	bf00      	nop
 8025314:	7149f2ca 	.word	0x7149f2ca
 8025318:	007fffff 	.word	0x007fffff

0802531c <floorf>:
 802531c:	ee10 3a10 	vmov	r3, s0
 8025320:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025324:	3a7f      	subs	r2, #127	; 0x7f
 8025326:	2a16      	cmp	r2, #22
 8025328:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802532c:	dc2a      	bgt.n	8025384 <floorf+0x68>
 802532e:	2a00      	cmp	r2, #0
 8025330:	da11      	bge.n	8025356 <floorf+0x3a>
 8025332:	eddf 7a18 	vldr	s15, [pc, #96]	; 8025394 <floorf+0x78>
 8025336:	ee30 0a27 	vadd.f32	s0, s0, s15
 802533a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802533e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025342:	dd05      	ble.n	8025350 <floorf+0x34>
 8025344:	2b00      	cmp	r3, #0
 8025346:	da23      	bge.n	8025390 <floorf+0x74>
 8025348:	4a13      	ldr	r2, [pc, #76]	; (8025398 <floorf+0x7c>)
 802534a:	2900      	cmp	r1, #0
 802534c:	bf18      	it	ne
 802534e:	4613      	movne	r3, r2
 8025350:	ee00 3a10 	vmov	s0, r3
 8025354:	4770      	bx	lr
 8025356:	4911      	ldr	r1, [pc, #68]	; (802539c <floorf+0x80>)
 8025358:	4111      	asrs	r1, r2
 802535a:	420b      	tst	r3, r1
 802535c:	d0fa      	beq.n	8025354 <floorf+0x38>
 802535e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8025394 <floorf+0x78>
 8025362:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025366:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802536e:	ddef      	ble.n	8025350 <floorf+0x34>
 8025370:	2b00      	cmp	r3, #0
 8025372:	bfbe      	ittt	lt
 8025374:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8025378:	fa40 f202 	asrlt.w	r2, r0, r2
 802537c:	189b      	addlt	r3, r3, r2
 802537e:	ea23 0301 	bic.w	r3, r3, r1
 8025382:	e7e5      	b.n	8025350 <floorf+0x34>
 8025384:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025388:	d3e4      	bcc.n	8025354 <floorf+0x38>
 802538a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802538e:	4770      	bx	lr
 8025390:	2300      	movs	r3, #0
 8025392:	e7dd      	b.n	8025350 <floorf+0x34>
 8025394:	7149f2ca 	.word	0x7149f2ca
 8025398:	bf800000 	.word	0xbf800000
 802539c:	007fffff 	.word	0x007fffff

080253a0 <fmaxf>:
 80253a0:	b508      	push	{r3, lr}
 80253a2:	ed2d 8b02 	vpush	{d8}
 80253a6:	eeb0 8a40 	vmov.f32	s16, s0
 80253aa:	eef0 8a60 	vmov.f32	s17, s1
 80253ae:	f000 f82d 	bl	802540c <__fpclassifyf>
 80253b2:	b148      	cbz	r0, 80253c8 <fmaxf+0x28>
 80253b4:	eeb0 0a68 	vmov.f32	s0, s17
 80253b8:	f000 f828 	bl	802540c <__fpclassifyf>
 80253bc:	b130      	cbz	r0, 80253cc <fmaxf+0x2c>
 80253be:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80253c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253c6:	dc01      	bgt.n	80253cc <fmaxf+0x2c>
 80253c8:	eeb0 8a68 	vmov.f32	s16, s17
 80253cc:	eeb0 0a48 	vmov.f32	s0, s16
 80253d0:	ecbd 8b02 	vpop	{d8}
 80253d4:	bd08      	pop	{r3, pc}

080253d6 <fminf>:
 80253d6:	b508      	push	{r3, lr}
 80253d8:	ed2d 8b02 	vpush	{d8}
 80253dc:	eeb0 8a40 	vmov.f32	s16, s0
 80253e0:	eef0 8a60 	vmov.f32	s17, s1
 80253e4:	f000 f812 	bl	802540c <__fpclassifyf>
 80253e8:	b148      	cbz	r0, 80253fe <fminf+0x28>
 80253ea:	eeb0 0a68 	vmov.f32	s0, s17
 80253ee:	f000 f80d 	bl	802540c <__fpclassifyf>
 80253f2:	b130      	cbz	r0, 8025402 <fminf+0x2c>
 80253f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80253f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253fc:	d401      	bmi.n	8025402 <fminf+0x2c>
 80253fe:	eeb0 8a68 	vmov.f32	s16, s17
 8025402:	eeb0 0a48 	vmov.f32	s0, s16
 8025406:	ecbd 8b02 	vpop	{d8}
 802540a:	bd08      	pop	{r3, pc}

0802540c <__fpclassifyf>:
 802540c:	ee10 3a10 	vmov	r3, s0
 8025410:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8025414:	d00d      	beq.n	8025432 <__fpclassifyf+0x26>
 8025416:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 802541a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 802541e:	d30a      	bcc.n	8025436 <__fpclassifyf+0x2a>
 8025420:	4b07      	ldr	r3, [pc, #28]	; (8025440 <__fpclassifyf+0x34>)
 8025422:	1e42      	subs	r2, r0, #1
 8025424:	429a      	cmp	r2, r3
 8025426:	d908      	bls.n	802543a <__fpclassifyf+0x2e>
 8025428:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 802542c:	4258      	negs	r0, r3
 802542e:	4158      	adcs	r0, r3
 8025430:	4770      	bx	lr
 8025432:	2002      	movs	r0, #2
 8025434:	4770      	bx	lr
 8025436:	2004      	movs	r0, #4
 8025438:	4770      	bx	lr
 802543a:	2003      	movs	r0, #3
 802543c:	4770      	bx	lr
 802543e:	bf00      	nop
 8025440:	007ffffe 	.word	0x007ffffe

08025444 <abort>:
 8025444:	b508      	push	{r3, lr}
 8025446:	2006      	movs	r0, #6
 8025448:	f000 fc68 	bl	8025d1c <raise>
 802544c:	2001      	movs	r0, #1
 802544e:	f7dc ff9f 	bl	8002390 <_exit>
	...

08025454 <__assert_func>:
 8025454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025456:	4614      	mov	r4, r2
 8025458:	461a      	mov	r2, r3
 802545a:	4b09      	ldr	r3, [pc, #36]	; (8025480 <__assert_func+0x2c>)
 802545c:	681b      	ldr	r3, [r3, #0]
 802545e:	4605      	mov	r5, r0
 8025460:	68d8      	ldr	r0, [r3, #12]
 8025462:	b14c      	cbz	r4, 8025478 <__assert_func+0x24>
 8025464:	4b07      	ldr	r3, [pc, #28]	; (8025484 <__assert_func+0x30>)
 8025466:	9100      	str	r1, [sp, #0]
 8025468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802546c:	4906      	ldr	r1, [pc, #24]	; (8025488 <__assert_func+0x34>)
 802546e:	462b      	mov	r3, r5
 8025470:	f000 f828 	bl	80254c4 <fiprintf>
 8025474:	f7ff ffe6 	bl	8025444 <abort>
 8025478:	4b04      	ldr	r3, [pc, #16]	; (802548c <__assert_func+0x38>)
 802547a:	461c      	mov	r4, r3
 802547c:	e7f3      	b.n	8025466 <__assert_func+0x12>
 802547e:	bf00      	nop
 8025480:	20000074 	.word	0x20000074
 8025484:	0802aac0 	.word	0x0802aac0
 8025488:	0802aacd 	.word	0x0802aacd
 802548c:	0802aafb 	.word	0x0802aafb

08025490 <atexit>:
 8025490:	2300      	movs	r3, #0
 8025492:	4601      	mov	r1, r0
 8025494:	461a      	mov	r2, r3
 8025496:	4618      	mov	r0, r3
 8025498:	f000 bd3c 	b.w	8025f14 <__register_exitproc>

0802549c <__cxa_atexit>:
 802549c:	b510      	push	{r4, lr}
 802549e:	4c05      	ldr	r4, [pc, #20]	; (80254b4 <__cxa_atexit+0x18>)
 80254a0:	4613      	mov	r3, r2
 80254a2:	b12c      	cbz	r4, 80254b0 <__cxa_atexit+0x14>
 80254a4:	460a      	mov	r2, r1
 80254a6:	4601      	mov	r1, r0
 80254a8:	2002      	movs	r0, #2
 80254aa:	f000 fd33 	bl	8025f14 <__register_exitproc>
 80254ae:	bd10      	pop	{r4, pc}
 80254b0:	4620      	mov	r0, r4
 80254b2:	e7fc      	b.n	80254ae <__cxa_atexit+0x12>
 80254b4:	08025f15 	.word	0x08025f15

080254b8 <__errno>:
 80254b8:	4b01      	ldr	r3, [pc, #4]	; (80254c0 <__errno+0x8>)
 80254ba:	6818      	ldr	r0, [r3, #0]
 80254bc:	4770      	bx	lr
 80254be:	bf00      	nop
 80254c0:	20000074 	.word	0x20000074

080254c4 <fiprintf>:
 80254c4:	b40e      	push	{r1, r2, r3}
 80254c6:	b503      	push	{r0, r1, lr}
 80254c8:	4601      	mov	r1, r0
 80254ca:	ab03      	add	r3, sp, #12
 80254cc:	4805      	ldr	r0, [pc, #20]	; (80254e4 <fiprintf+0x20>)
 80254ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80254d2:	6800      	ldr	r0, [r0, #0]
 80254d4:	9301      	str	r3, [sp, #4]
 80254d6:	f000 f925 	bl	8025724 <_vfiprintf_r>
 80254da:	b002      	add	sp, #8
 80254dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80254e0:	b003      	add	sp, #12
 80254e2:	4770      	bx	lr
 80254e4:	20000074 	.word	0x20000074

080254e8 <__libc_init_array>:
 80254e8:	b570      	push	{r4, r5, r6, lr}
 80254ea:	4d0d      	ldr	r5, [pc, #52]	; (8025520 <__libc_init_array+0x38>)
 80254ec:	4c0d      	ldr	r4, [pc, #52]	; (8025524 <__libc_init_array+0x3c>)
 80254ee:	1b64      	subs	r4, r4, r5
 80254f0:	10a4      	asrs	r4, r4, #2
 80254f2:	2600      	movs	r6, #0
 80254f4:	42a6      	cmp	r6, r4
 80254f6:	d109      	bne.n	802550c <__libc_init_array+0x24>
 80254f8:	4d0b      	ldr	r5, [pc, #44]	; (8025528 <__libc_init_array+0x40>)
 80254fa:	4c0c      	ldr	r4, [pc, #48]	; (802552c <__libc_init_array+0x44>)
 80254fc:	f001 f9e8 	bl	80268d0 <_init>
 8025500:	1b64      	subs	r4, r4, r5
 8025502:	10a4      	asrs	r4, r4, #2
 8025504:	2600      	movs	r6, #0
 8025506:	42a6      	cmp	r6, r4
 8025508:	d105      	bne.n	8025516 <__libc_init_array+0x2e>
 802550a:	bd70      	pop	{r4, r5, r6, pc}
 802550c:	f855 3b04 	ldr.w	r3, [r5], #4
 8025510:	4798      	blx	r3
 8025512:	3601      	adds	r6, #1
 8025514:	e7ee      	b.n	80254f4 <__libc_init_array+0xc>
 8025516:	f855 3b04 	ldr.w	r3, [r5], #4
 802551a:	4798      	blx	r3
 802551c:	3601      	adds	r6, #1
 802551e:	e7f2      	b.n	8025506 <__libc_init_array+0x1e>
 8025520:	080d0128 	.word	0x080d0128
 8025524:	080d0128 	.word	0x080d0128
 8025528:	080d0128 	.word	0x080d0128
 802552c:	080d0158 	.word	0x080d0158

08025530 <malloc>:
 8025530:	4b02      	ldr	r3, [pc, #8]	; (802553c <malloc+0xc>)
 8025532:	4601      	mov	r1, r0
 8025534:	6818      	ldr	r0, [r3, #0]
 8025536:	f000 b871 	b.w	802561c <_malloc_r>
 802553a:	bf00      	nop
 802553c:	20000074 	.word	0x20000074

08025540 <free>:
 8025540:	4b02      	ldr	r3, [pc, #8]	; (802554c <free+0xc>)
 8025542:	4601      	mov	r1, r0
 8025544:	6818      	ldr	r0, [r3, #0]
 8025546:	f000 b819 	b.w	802557c <_free_r>
 802554a:	bf00      	nop
 802554c:	20000074 	.word	0x20000074

08025550 <memcpy>:
 8025550:	440a      	add	r2, r1
 8025552:	4291      	cmp	r1, r2
 8025554:	f100 33ff 	add.w	r3, r0, #4294967295
 8025558:	d100      	bne.n	802555c <memcpy+0xc>
 802555a:	4770      	bx	lr
 802555c:	b510      	push	{r4, lr}
 802555e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025566:	4291      	cmp	r1, r2
 8025568:	d1f9      	bne.n	802555e <memcpy+0xe>
 802556a:	bd10      	pop	{r4, pc}

0802556c <memset>:
 802556c:	4402      	add	r2, r0
 802556e:	4603      	mov	r3, r0
 8025570:	4293      	cmp	r3, r2
 8025572:	d100      	bne.n	8025576 <memset+0xa>
 8025574:	4770      	bx	lr
 8025576:	f803 1b01 	strb.w	r1, [r3], #1
 802557a:	e7f9      	b.n	8025570 <memset+0x4>

0802557c <_free_r>:
 802557c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802557e:	2900      	cmp	r1, #0
 8025580:	d048      	beq.n	8025614 <_free_r+0x98>
 8025582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025586:	9001      	str	r0, [sp, #4]
 8025588:	2b00      	cmp	r3, #0
 802558a:	f1a1 0404 	sub.w	r4, r1, #4
 802558e:	bfb8      	it	lt
 8025590:	18e4      	addlt	r4, r4, r3
 8025592:	f000 ff5b 	bl	802644c <__malloc_lock>
 8025596:	4a20      	ldr	r2, [pc, #128]	; (8025618 <_free_r+0x9c>)
 8025598:	9801      	ldr	r0, [sp, #4]
 802559a:	6813      	ldr	r3, [r2, #0]
 802559c:	4615      	mov	r5, r2
 802559e:	b933      	cbnz	r3, 80255ae <_free_r+0x32>
 80255a0:	6063      	str	r3, [r4, #4]
 80255a2:	6014      	str	r4, [r2, #0]
 80255a4:	b003      	add	sp, #12
 80255a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80255aa:	f000 bf55 	b.w	8026458 <__malloc_unlock>
 80255ae:	42a3      	cmp	r3, r4
 80255b0:	d90b      	bls.n	80255ca <_free_r+0x4e>
 80255b2:	6821      	ldr	r1, [r4, #0]
 80255b4:	1862      	adds	r2, r4, r1
 80255b6:	4293      	cmp	r3, r2
 80255b8:	bf04      	itt	eq
 80255ba:	681a      	ldreq	r2, [r3, #0]
 80255bc:	685b      	ldreq	r3, [r3, #4]
 80255be:	6063      	str	r3, [r4, #4]
 80255c0:	bf04      	itt	eq
 80255c2:	1852      	addeq	r2, r2, r1
 80255c4:	6022      	streq	r2, [r4, #0]
 80255c6:	602c      	str	r4, [r5, #0]
 80255c8:	e7ec      	b.n	80255a4 <_free_r+0x28>
 80255ca:	461a      	mov	r2, r3
 80255cc:	685b      	ldr	r3, [r3, #4]
 80255ce:	b10b      	cbz	r3, 80255d4 <_free_r+0x58>
 80255d0:	42a3      	cmp	r3, r4
 80255d2:	d9fa      	bls.n	80255ca <_free_r+0x4e>
 80255d4:	6811      	ldr	r1, [r2, #0]
 80255d6:	1855      	adds	r5, r2, r1
 80255d8:	42a5      	cmp	r5, r4
 80255da:	d10b      	bne.n	80255f4 <_free_r+0x78>
 80255dc:	6824      	ldr	r4, [r4, #0]
 80255de:	4421      	add	r1, r4
 80255e0:	1854      	adds	r4, r2, r1
 80255e2:	42a3      	cmp	r3, r4
 80255e4:	6011      	str	r1, [r2, #0]
 80255e6:	d1dd      	bne.n	80255a4 <_free_r+0x28>
 80255e8:	681c      	ldr	r4, [r3, #0]
 80255ea:	685b      	ldr	r3, [r3, #4]
 80255ec:	6053      	str	r3, [r2, #4]
 80255ee:	4421      	add	r1, r4
 80255f0:	6011      	str	r1, [r2, #0]
 80255f2:	e7d7      	b.n	80255a4 <_free_r+0x28>
 80255f4:	d902      	bls.n	80255fc <_free_r+0x80>
 80255f6:	230c      	movs	r3, #12
 80255f8:	6003      	str	r3, [r0, #0]
 80255fa:	e7d3      	b.n	80255a4 <_free_r+0x28>
 80255fc:	6825      	ldr	r5, [r4, #0]
 80255fe:	1961      	adds	r1, r4, r5
 8025600:	428b      	cmp	r3, r1
 8025602:	bf04      	itt	eq
 8025604:	6819      	ldreq	r1, [r3, #0]
 8025606:	685b      	ldreq	r3, [r3, #4]
 8025608:	6063      	str	r3, [r4, #4]
 802560a:	bf04      	itt	eq
 802560c:	1949      	addeq	r1, r1, r5
 802560e:	6021      	streq	r1, [r4, #0]
 8025610:	6054      	str	r4, [r2, #4]
 8025612:	e7c7      	b.n	80255a4 <_free_r+0x28>
 8025614:	b003      	add	sp, #12
 8025616:	bd30      	pop	{r4, r5, pc}
 8025618:	20056638 	.word	0x20056638

0802561c <_malloc_r>:
 802561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802561e:	1ccd      	adds	r5, r1, #3
 8025620:	f025 0503 	bic.w	r5, r5, #3
 8025624:	3508      	adds	r5, #8
 8025626:	2d0c      	cmp	r5, #12
 8025628:	bf38      	it	cc
 802562a:	250c      	movcc	r5, #12
 802562c:	2d00      	cmp	r5, #0
 802562e:	4606      	mov	r6, r0
 8025630:	db01      	blt.n	8025636 <_malloc_r+0x1a>
 8025632:	42a9      	cmp	r1, r5
 8025634:	d903      	bls.n	802563e <_malloc_r+0x22>
 8025636:	230c      	movs	r3, #12
 8025638:	6033      	str	r3, [r6, #0]
 802563a:	2000      	movs	r0, #0
 802563c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802563e:	f000 ff05 	bl	802644c <__malloc_lock>
 8025642:	4921      	ldr	r1, [pc, #132]	; (80256c8 <_malloc_r+0xac>)
 8025644:	680a      	ldr	r2, [r1, #0]
 8025646:	4614      	mov	r4, r2
 8025648:	b99c      	cbnz	r4, 8025672 <_malloc_r+0x56>
 802564a:	4f20      	ldr	r7, [pc, #128]	; (80256cc <_malloc_r+0xb0>)
 802564c:	683b      	ldr	r3, [r7, #0]
 802564e:	b923      	cbnz	r3, 802565a <_malloc_r+0x3e>
 8025650:	4621      	mov	r1, r4
 8025652:	4630      	mov	r0, r6
 8025654:	f000 fb2a 	bl	8025cac <_sbrk_r>
 8025658:	6038      	str	r0, [r7, #0]
 802565a:	4629      	mov	r1, r5
 802565c:	4630      	mov	r0, r6
 802565e:	f000 fb25 	bl	8025cac <_sbrk_r>
 8025662:	1c43      	adds	r3, r0, #1
 8025664:	d123      	bne.n	80256ae <_malloc_r+0x92>
 8025666:	230c      	movs	r3, #12
 8025668:	6033      	str	r3, [r6, #0]
 802566a:	4630      	mov	r0, r6
 802566c:	f000 fef4 	bl	8026458 <__malloc_unlock>
 8025670:	e7e3      	b.n	802563a <_malloc_r+0x1e>
 8025672:	6823      	ldr	r3, [r4, #0]
 8025674:	1b5b      	subs	r3, r3, r5
 8025676:	d417      	bmi.n	80256a8 <_malloc_r+0x8c>
 8025678:	2b0b      	cmp	r3, #11
 802567a:	d903      	bls.n	8025684 <_malloc_r+0x68>
 802567c:	6023      	str	r3, [r4, #0]
 802567e:	441c      	add	r4, r3
 8025680:	6025      	str	r5, [r4, #0]
 8025682:	e004      	b.n	802568e <_malloc_r+0x72>
 8025684:	6863      	ldr	r3, [r4, #4]
 8025686:	42a2      	cmp	r2, r4
 8025688:	bf0c      	ite	eq
 802568a:	600b      	streq	r3, [r1, #0]
 802568c:	6053      	strne	r3, [r2, #4]
 802568e:	4630      	mov	r0, r6
 8025690:	f000 fee2 	bl	8026458 <__malloc_unlock>
 8025694:	f104 000b 	add.w	r0, r4, #11
 8025698:	1d23      	adds	r3, r4, #4
 802569a:	f020 0007 	bic.w	r0, r0, #7
 802569e:	1ac2      	subs	r2, r0, r3
 80256a0:	d0cc      	beq.n	802563c <_malloc_r+0x20>
 80256a2:	1a1b      	subs	r3, r3, r0
 80256a4:	50a3      	str	r3, [r4, r2]
 80256a6:	e7c9      	b.n	802563c <_malloc_r+0x20>
 80256a8:	4622      	mov	r2, r4
 80256aa:	6864      	ldr	r4, [r4, #4]
 80256ac:	e7cc      	b.n	8025648 <_malloc_r+0x2c>
 80256ae:	1cc4      	adds	r4, r0, #3
 80256b0:	f024 0403 	bic.w	r4, r4, #3
 80256b4:	42a0      	cmp	r0, r4
 80256b6:	d0e3      	beq.n	8025680 <_malloc_r+0x64>
 80256b8:	1a21      	subs	r1, r4, r0
 80256ba:	4630      	mov	r0, r6
 80256bc:	f000 faf6 	bl	8025cac <_sbrk_r>
 80256c0:	3001      	adds	r0, #1
 80256c2:	d1dd      	bne.n	8025680 <_malloc_r+0x64>
 80256c4:	e7cf      	b.n	8025666 <_malloc_r+0x4a>
 80256c6:	bf00      	nop
 80256c8:	20056638 	.word	0x20056638
 80256cc:	2005663c 	.word	0x2005663c

080256d0 <__sfputc_r>:
 80256d0:	6893      	ldr	r3, [r2, #8]
 80256d2:	3b01      	subs	r3, #1
 80256d4:	2b00      	cmp	r3, #0
 80256d6:	b410      	push	{r4}
 80256d8:	6093      	str	r3, [r2, #8]
 80256da:	da08      	bge.n	80256ee <__sfputc_r+0x1e>
 80256dc:	6994      	ldr	r4, [r2, #24]
 80256de:	42a3      	cmp	r3, r4
 80256e0:	db01      	blt.n	80256e6 <__sfputc_r+0x16>
 80256e2:	290a      	cmp	r1, #10
 80256e4:	d103      	bne.n	80256ee <__sfputc_r+0x1e>
 80256e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80256ea:	f000 bb53 	b.w	8025d94 <__swbuf_r>
 80256ee:	6813      	ldr	r3, [r2, #0]
 80256f0:	1c58      	adds	r0, r3, #1
 80256f2:	6010      	str	r0, [r2, #0]
 80256f4:	7019      	strb	r1, [r3, #0]
 80256f6:	4608      	mov	r0, r1
 80256f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80256fc:	4770      	bx	lr

080256fe <__sfputs_r>:
 80256fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025700:	4606      	mov	r6, r0
 8025702:	460f      	mov	r7, r1
 8025704:	4614      	mov	r4, r2
 8025706:	18d5      	adds	r5, r2, r3
 8025708:	42ac      	cmp	r4, r5
 802570a:	d101      	bne.n	8025710 <__sfputs_r+0x12>
 802570c:	2000      	movs	r0, #0
 802570e:	e007      	b.n	8025720 <__sfputs_r+0x22>
 8025710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025714:	463a      	mov	r2, r7
 8025716:	4630      	mov	r0, r6
 8025718:	f7ff ffda 	bl	80256d0 <__sfputc_r>
 802571c:	1c43      	adds	r3, r0, #1
 802571e:	d1f3      	bne.n	8025708 <__sfputs_r+0xa>
 8025720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025724 <_vfiprintf_r>:
 8025724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025728:	460d      	mov	r5, r1
 802572a:	b09d      	sub	sp, #116	; 0x74
 802572c:	4614      	mov	r4, r2
 802572e:	4698      	mov	r8, r3
 8025730:	4606      	mov	r6, r0
 8025732:	b118      	cbz	r0, 802573c <_vfiprintf_r+0x18>
 8025734:	6983      	ldr	r3, [r0, #24]
 8025736:	b90b      	cbnz	r3, 802573c <_vfiprintf_r+0x18>
 8025738:	f000 fd68 	bl	802620c <__sinit>
 802573c:	4b89      	ldr	r3, [pc, #548]	; (8025964 <_vfiprintf_r+0x240>)
 802573e:	429d      	cmp	r5, r3
 8025740:	d11b      	bne.n	802577a <_vfiprintf_r+0x56>
 8025742:	6875      	ldr	r5, [r6, #4]
 8025744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025746:	07d9      	lsls	r1, r3, #31
 8025748:	d405      	bmi.n	8025756 <_vfiprintf_r+0x32>
 802574a:	89ab      	ldrh	r3, [r5, #12]
 802574c:	059a      	lsls	r2, r3, #22
 802574e:	d402      	bmi.n	8025756 <_vfiprintf_r+0x32>
 8025750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025752:	f000 fdf9 	bl	8026348 <__retarget_lock_acquire_recursive>
 8025756:	89ab      	ldrh	r3, [r5, #12]
 8025758:	071b      	lsls	r3, r3, #28
 802575a:	d501      	bpl.n	8025760 <_vfiprintf_r+0x3c>
 802575c:	692b      	ldr	r3, [r5, #16]
 802575e:	b9eb      	cbnz	r3, 802579c <_vfiprintf_r+0x78>
 8025760:	4629      	mov	r1, r5
 8025762:	4630      	mov	r0, r6
 8025764:	f000 fb68 	bl	8025e38 <__swsetup_r>
 8025768:	b1c0      	cbz	r0, 802579c <_vfiprintf_r+0x78>
 802576a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802576c:	07dc      	lsls	r4, r3, #31
 802576e:	d50e      	bpl.n	802578e <_vfiprintf_r+0x6a>
 8025770:	f04f 30ff 	mov.w	r0, #4294967295
 8025774:	b01d      	add	sp, #116	; 0x74
 8025776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802577a:	4b7b      	ldr	r3, [pc, #492]	; (8025968 <_vfiprintf_r+0x244>)
 802577c:	429d      	cmp	r5, r3
 802577e:	d101      	bne.n	8025784 <_vfiprintf_r+0x60>
 8025780:	68b5      	ldr	r5, [r6, #8]
 8025782:	e7df      	b.n	8025744 <_vfiprintf_r+0x20>
 8025784:	4b79      	ldr	r3, [pc, #484]	; (802596c <_vfiprintf_r+0x248>)
 8025786:	429d      	cmp	r5, r3
 8025788:	bf08      	it	eq
 802578a:	68f5      	ldreq	r5, [r6, #12]
 802578c:	e7da      	b.n	8025744 <_vfiprintf_r+0x20>
 802578e:	89ab      	ldrh	r3, [r5, #12]
 8025790:	0598      	lsls	r0, r3, #22
 8025792:	d4ed      	bmi.n	8025770 <_vfiprintf_r+0x4c>
 8025794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025796:	f000 fdd9 	bl	802634c <__retarget_lock_release_recursive>
 802579a:	e7e9      	b.n	8025770 <_vfiprintf_r+0x4c>
 802579c:	2300      	movs	r3, #0
 802579e:	9309      	str	r3, [sp, #36]	; 0x24
 80257a0:	2320      	movs	r3, #32
 80257a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80257a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80257aa:	2330      	movs	r3, #48	; 0x30
 80257ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8025970 <_vfiprintf_r+0x24c>
 80257b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80257b4:	f04f 0901 	mov.w	r9, #1
 80257b8:	4623      	mov	r3, r4
 80257ba:	469a      	mov	sl, r3
 80257bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80257c0:	b10a      	cbz	r2, 80257c6 <_vfiprintf_r+0xa2>
 80257c2:	2a25      	cmp	r2, #37	; 0x25
 80257c4:	d1f9      	bne.n	80257ba <_vfiprintf_r+0x96>
 80257c6:	ebba 0b04 	subs.w	fp, sl, r4
 80257ca:	d00b      	beq.n	80257e4 <_vfiprintf_r+0xc0>
 80257cc:	465b      	mov	r3, fp
 80257ce:	4622      	mov	r2, r4
 80257d0:	4629      	mov	r1, r5
 80257d2:	4630      	mov	r0, r6
 80257d4:	f7ff ff93 	bl	80256fe <__sfputs_r>
 80257d8:	3001      	adds	r0, #1
 80257da:	f000 80aa 	beq.w	8025932 <_vfiprintf_r+0x20e>
 80257de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80257e0:	445a      	add	r2, fp
 80257e2:	9209      	str	r2, [sp, #36]	; 0x24
 80257e4:	f89a 3000 	ldrb.w	r3, [sl]
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	f000 80a2 	beq.w	8025932 <_vfiprintf_r+0x20e>
 80257ee:	2300      	movs	r3, #0
 80257f0:	f04f 32ff 	mov.w	r2, #4294967295
 80257f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80257f8:	f10a 0a01 	add.w	sl, sl, #1
 80257fc:	9304      	str	r3, [sp, #16]
 80257fe:	9307      	str	r3, [sp, #28]
 8025800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025804:	931a      	str	r3, [sp, #104]	; 0x68
 8025806:	4654      	mov	r4, sl
 8025808:	2205      	movs	r2, #5
 802580a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802580e:	4858      	ldr	r0, [pc, #352]	; (8025970 <_vfiprintf_r+0x24c>)
 8025810:	f7da fd1e 	bl	8000250 <memchr>
 8025814:	9a04      	ldr	r2, [sp, #16]
 8025816:	b9d8      	cbnz	r0, 8025850 <_vfiprintf_r+0x12c>
 8025818:	06d1      	lsls	r1, r2, #27
 802581a:	bf44      	itt	mi
 802581c:	2320      	movmi	r3, #32
 802581e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025822:	0713      	lsls	r3, r2, #28
 8025824:	bf44      	itt	mi
 8025826:	232b      	movmi	r3, #43	; 0x2b
 8025828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802582c:	f89a 3000 	ldrb.w	r3, [sl]
 8025830:	2b2a      	cmp	r3, #42	; 0x2a
 8025832:	d015      	beq.n	8025860 <_vfiprintf_r+0x13c>
 8025834:	9a07      	ldr	r2, [sp, #28]
 8025836:	4654      	mov	r4, sl
 8025838:	2000      	movs	r0, #0
 802583a:	f04f 0c0a 	mov.w	ip, #10
 802583e:	4621      	mov	r1, r4
 8025840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025844:	3b30      	subs	r3, #48	; 0x30
 8025846:	2b09      	cmp	r3, #9
 8025848:	d94e      	bls.n	80258e8 <_vfiprintf_r+0x1c4>
 802584a:	b1b0      	cbz	r0, 802587a <_vfiprintf_r+0x156>
 802584c:	9207      	str	r2, [sp, #28]
 802584e:	e014      	b.n	802587a <_vfiprintf_r+0x156>
 8025850:	eba0 0308 	sub.w	r3, r0, r8
 8025854:	fa09 f303 	lsl.w	r3, r9, r3
 8025858:	4313      	orrs	r3, r2
 802585a:	9304      	str	r3, [sp, #16]
 802585c:	46a2      	mov	sl, r4
 802585e:	e7d2      	b.n	8025806 <_vfiprintf_r+0xe2>
 8025860:	9b03      	ldr	r3, [sp, #12]
 8025862:	1d19      	adds	r1, r3, #4
 8025864:	681b      	ldr	r3, [r3, #0]
 8025866:	9103      	str	r1, [sp, #12]
 8025868:	2b00      	cmp	r3, #0
 802586a:	bfbb      	ittet	lt
 802586c:	425b      	neglt	r3, r3
 802586e:	f042 0202 	orrlt.w	r2, r2, #2
 8025872:	9307      	strge	r3, [sp, #28]
 8025874:	9307      	strlt	r3, [sp, #28]
 8025876:	bfb8      	it	lt
 8025878:	9204      	strlt	r2, [sp, #16]
 802587a:	7823      	ldrb	r3, [r4, #0]
 802587c:	2b2e      	cmp	r3, #46	; 0x2e
 802587e:	d10c      	bne.n	802589a <_vfiprintf_r+0x176>
 8025880:	7863      	ldrb	r3, [r4, #1]
 8025882:	2b2a      	cmp	r3, #42	; 0x2a
 8025884:	d135      	bne.n	80258f2 <_vfiprintf_r+0x1ce>
 8025886:	9b03      	ldr	r3, [sp, #12]
 8025888:	1d1a      	adds	r2, r3, #4
 802588a:	681b      	ldr	r3, [r3, #0]
 802588c:	9203      	str	r2, [sp, #12]
 802588e:	2b00      	cmp	r3, #0
 8025890:	bfb8      	it	lt
 8025892:	f04f 33ff 	movlt.w	r3, #4294967295
 8025896:	3402      	adds	r4, #2
 8025898:	9305      	str	r3, [sp, #20]
 802589a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8025980 <_vfiprintf_r+0x25c>
 802589e:	7821      	ldrb	r1, [r4, #0]
 80258a0:	2203      	movs	r2, #3
 80258a2:	4650      	mov	r0, sl
 80258a4:	f7da fcd4 	bl	8000250 <memchr>
 80258a8:	b140      	cbz	r0, 80258bc <_vfiprintf_r+0x198>
 80258aa:	2340      	movs	r3, #64	; 0x40
 80258ac:	eba0 000a 	sub.w	r0, r0, sl
 80258b0:	fa03 f000 	lsl.w	r0, r3, r0
 80258b4:	9b04      	ldr	r3, [sp, #16]
 80258b6:	4303      	orrs	r3, r0
 80258b8:	3401      	adds	r4, #1
 80258ba:	9304      	str	r3, [sp, #16]
 80258bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80258c0:	482c      	ldr	r0, [pc, #176]	; (8025974 <_vfiprintf_r+0x250>)
 80258c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80258c6:	2206      	movs	r2, #6
 80258c8:	f7da fcc2 	bl	8000250 <memchr>
 80258cc:	2800      	cmp	r0, #0
 80258ce:	d03f      	beq.n	8025950 <_vfiprintf_r+0x22c>
 80258d0:	4b29      	ldr	r3, [pc, #164]	; (8025978 <_vfiprintf_r+0x254>)
 80258d2:	bb1b      	cbnz	r3, 802591c <_vfiprintf_r+0x1f8>
 80258d4:	9b03      	ldr	r3, [sp, #12]
 80258d6:	3307      	adds	r3, #7
 80258d8:	f023 0307 	bic.w	r3, r3, #7
 80258dc:	3308      	adds	r3, #8
 80258de:	9303      	str	r3, [sp, #12]
 80258e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80258e2:	443b      	add	r3, r7
 80258e4:	9309      	str	r3, [sp, #36]	; 0x24
 80258e6:	e767      	b.n	80257b8 <_vfiprintf_r+0x94>
 80258e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80258ec:	460c      	mov	r4, r1
 80258ee:	2001      	movs	r0, #1
 80258f0:	e7a5      	b.n	802583e <_vfiprintf_r+0x11a>
 80258f2:	2300      	movs	r3, #0
 80258f4:	3401      	adds	r4, #1
 80258f6:	9305      	str	r3, [sp, #20]
 80258f8:	4619      	mov	r1, r3
 80258fa:	f04f 0c0a 	mov.w	ip, #10
 80258fe:	4620      	mov	r0, r4
 8025900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025904:	3a30      	subs	r2, #48	; 0x30
 8025906:	2a09      	cmp	r2, #9
 8025908:	d903      	bls.n	8025912 <_vfiprintf_r+0x1ee>
 802590a:	2b00      	cmp	r3, #0
 802590c:	d0c5      	beq.n	802589a <_vfiprintf_r+0x176>
 802590e:	9105      	str	r1, [sp, #20]
 8025910:	e7c3      	b.n	802589a <_vfiprintf_r+0x176>
 8025912:	fb0c 2101 	mla	r1, ip, r1, r2
 8025916:	4604      	mov	r4, r0
 8025918:	2301      	movs	r3, #1
 802591a:	e7f0      	b.n	80258fe <_vfiprintf_r+0x1da>
 802591c:	ab03      	add	r3, sp, #12
 802591e:	9300      	str	r3, [sp, #0]
 8025920:	462a      	mov	r2, r5
 8025922:	4b16      	ldr	r3, [pc, #88]	; (802597c <_vfiprintf_r+0x258>)
 8025924:	a904      	add	r1, sp, #16
 8025926:	4630      	mov	r0, r6
 8025928:	f3af 8000 	nop.w
 802592c:	4607      	mov	r7, r0
 802592e:	1c78      	adds	r0, r7, #1
 8025930:	d1d6      	bne.n	80258e0 <_vfiprintf_r+0x1bc>
 8025932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025934:	07d9      	lsls	r1, r3, #31
 8025936:	d405      	bmi.n	8025944 <_vfiprintf_r+0x220>
 8025938:	89ab      	ldrh	r3, [r5, #12]
 802593a:	059a      	lsls	r2, r3, #22
 802593c:	d402      	bmi.n	8025944 <_vfiprintf_r+0x220>
 802593e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025940:	f000 fd04 	bl	802634c <__retarget_lock_release_recursive>
 8025944:	89ab      	ldrh	r3, [r5, #12]
 8025946:	065b      	lsls	r3, r3, #25
 8025948:	f53f af12 	bmi.w	8025770 <_vfiprintf_r+0x4c>
 802594c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802594e:	e711      	b.n	8025774 <_vfiprintf_r+0x50>
 8025950:	ab03      	add	r3, sp, #12
 8025952:	9300      	str	r3, [sp, #0]
 8025954:	462a      	mov	r2, r5
 8025956:	4b09      	ldr	r3, [pc, #36]	; (802597c <_vfiprintf_r+0x258>)
 8025958:	a904      	add	r1, sp, #16
 802595a:	4630      	mov	r0, r6
 802595c:	f000 f880 	bl	8025a60 <_printf_i>
 8025960:	e7e4      	b.n	802592c <_vfiprintf_r+0x208>
 8025962:	bf00      	nop
 8025964:	0802ab58 	.word	0x0802ab58
 8025968:	0802ab78 	.word	0x0802ab78
 802596c:	0802ab38 	.word	0x0802ab38
 8025970:	0802ab00 	.word	0x0802ab00
 8025974:	0802ab0a 	.word	0x0802ab0a
 8025978:	00000000 	.word	0x00000000
 802597c:	080256ff 	.word	0x080256ff
 8025980:	0802ab06 	.word	0x0802ab06

08025984 <_printf_common>:
 8025984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025988:	4616      	mov	r6, r2
 802598a:	4699      	mov	r9, r3
 802598c:	688a      	ldr	r2, [r1, #8]
 802598e:	690b      	ldr	r3, [r1, #16]
 8025990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025994:	4293      	cmp	r3, r2
 8025996:	bfb8      	it	lt
 8025998:	4613      	movlt	r3, r2
 802599a:	6033      	str	r3, [r6, #0]
 802599c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80259a0:	4607      	mov	r7, r0
 80259a2:	460c      	mov	r4, r1
 80259a4:	b10a      	cbz	r2, 80259aa <_printf_common+0x26>
 80259a6:	3301      	adds	r3, #1
 80259a8:	6033      	str	r3, [r6, #0]
 80259aa:	6823      	ldr	r3, [r4, #0]
 80259ac:	0699      	lsls	r1, r3, #26
 80259ae:	bf42      	ittt	mi
 80259b0:	6833      	ldrmi	r3, [r6, #0]
 80259b2:	3302      	addmi	r3, #2
 80259b4:	6033      	strmi	r3, [r6, #0]
 80259b6:	6825      	ldr	r5, [r4, #0]
 80259b8:	f015 0506 	ands.w	r5, r5, #6
 80259bc:	d106      	bne.n	80259cc <_printf_common+0x48>
 80259be:	f104 0a19 	add.w	sl, r4, #25
 80259c2:	68e3      	ldr	r3, [r4, #12]
 80259c4:	6832      	ldr	r2, [r6, #0]
 80259c6:	1a9b      	subs	r3, r3, r2
 80259c8:	42ab      	cmp	r3, r5
 80259ca:	dc26      	bgt.n	8025a1a <_printf_common+0x96>
 80259cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80259d0:	1e13      	subs	r3, r2, #0
 80259d2:	6822      	ldr	r2, [r4, #0]
 80259d4:	bf18      	it	ne
 80259d6:	2301      	movne	r3, #1
 80259d8:	0692      	lsls	r2, r2, #26
 80259da:	d42b      	bmi.n	8025a34 <_printf_common+0xb0>
 80259dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80259e0:	4649      	mov	r1, r9
 80259e2:	4638      	mov	r0, r7
 80259e4:	47c0      	blx	r8
 80259e6:	3001      	adds	r0, #1
 80259e8:	d01e      	beq.n	8025a28 <_printf_common+0xa4>
 80259ea:	6823      	ldr	r3, [r4, #0]
 80259ec:	68e5      	ldr	r5, [r4, #12]
 80259ee:	6832      	ldr	r2, [r6, #0]
 80259f0:	f003 0306 	and.w	r3, r3, #6
 80259f4:	2b04      	cmp	r3, #4
 80259f6:	bf08      	it	eq
 80259f8:	1aad      	subeq	r5, r5, r2
 80259fa:	68a3      	ldr	r3, [r4, #8]
 80259fc:	6922      	ldr	r2, [r4, #16]
 80259fe:	bf0c      	ite	eq
 8025a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025a04:	2500      	movne	r5, #0
 8025a06:	4293      	cmp	r3, r2
 8025a08:	bfc4      	itt	gt
 8025a0a:	1a9b      	subgt	r3, r3, r2
 8025a0c:	18ed      	addgt	r5, r5, r3
 8025a0e:	2600      	movs	r6, #0
 8025a10:	341a      	adds	r4, #26
 8025a12:	42b5      	cmp	r5, r6
 8025a14:	d11a      	bne.n	8025a4c <_printf_common+0xc8>
 8025a16:	2000      	movs	r0, #0
 8025a18:	e008      	b.n	8025a2c <_printf_common+0xa8>
 8025a1a:	2301      	movs	r3, #1
 8025a1c:	4652      	mov	r2, sl
 8025a1e:	4649      	mov	r1, r9
 8025a20:	4638      	mov	r0, r7
 8025a22:	47c0      	blx	r8
 8025a24:	3001      	adds	r0, #1
 8025a26:	d103      	bne.n	8025a30 <_printf_common+0xac>
 8025a28:	f04f 30ff 	mov.w	r0, #4294967295
 8025a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a30:	3501      	adds	r5, #1
 8025a32:	e7c6      	b.n	80259c2 <_printf_common+0x3e>
 8025a34:	18e1      	adds	r1, r4, r3
 8025a36:	1c5a      	adds	r2, r3, #1
 8025a38:	2030      	movs	r0, #48	; 0x30
 8025a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025a3e:	4422      	add	r2, r4
 8025a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025a48:	3302      	adds	r3, #2
 8025a4a:	e7c7      	b.n	80259dc <_printf_common+0x58>
 8025a4c:	2301      	movs	r3, #1
 8025a4e:	4622      	mov	r2, r4
 8025a50:	4649      	mov	r1, r9
 8025a52:	4638      	mov	r0, r7
 8025a54:	47c0      	blx	r8
 8025a56:	3001      	adds	r0, #1
 8025a58:	d0e6      	beq.n	8025a28 <_printf_common+0xa4>
 8025a5a:	3601      	adds	r6, #1
 8025a5c:	e7d9      	b.n	8025a12 <_printf_common+0x8e>
	...

08025a60 <_printf_i>:
 8025a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025a64:	460c      	mov	r4, r1
 8025a66:	4691      	mov	r9, r2
 8025a68:	7e27      	ldrb	r7, [r4, #24]
 8025a6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025a6c:	2f78      	cmp	r7, #120	; 0x78
 8025a6e:	4680      	mov	r8, r0
 8025a70:	469a      	mov	sl, r3
 8025a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025a76:	d807      	bhi.n	8025a88 <_printf_i+0x28>
 8025a78:	2f62      	cmp	r7, #98	; 0x62
 8025a7a:	d80a      	bhi.n	8025a92 <_printf_i+0x32>
 8025a7c:	2f00      	cmp	r7, #0
 8025a7e:	f000 80d8 	beq.w	8025c32 <_printf_i+0x1d2>
 8025a82:	2f58      	cmp	r7, #88	; 0x58
 8025a84:	f000 80a3 	beq.w	8025bce <_printf_i+0x16e>
 8025a88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025a90:	e03a      	b.n	8025b08 <_printf_i+0xa8>
 8025a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025a96:	2b15      	cmp	r3, #21
 8025a98:	d8f6      	bhi.n	8025a88 <_printf_i+0x28>
 8025a9a:	a001      	add	r0, pc, #4	; (adr r0, 8025aa0 <_printf_i+0x40>)
 8025a9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8025aa0:	08025af9 	.word	0x08025af9
 8025aa4:	08025b0d 	.word	0x08025b0d
 8025aa8:	08025a89 	.word	0x08025a89
 8025aac:	08025a89 	.word	0x08025a89
 8025ab0:	08025a89 	.word	0x08025a89
 8025ab4:	08025a89 	.word	0x08025a89
 8025ab8:	08025b0d 	.word	0x08025b0d
 8025abc:	08025a89 	.word	0x08025a89
 8025ac0:	08025a89 	.word	0x08025a89
 8025ac4:	08025a89 	.word	0x08025a89
 8025ac8:	08025a89 	.word	0x08025a89
 8025acc:	08025c19 	.word	0x08025c19
 8025ad0:	08025b3d 	.word	0x08025b3d
 8025ad4:	08025bfb 	.word	0x08025bfb
 8025ad8:	08025a89 	.word	0x08025a89
 8025adc:	08025a89 	.word	0x08025a89
 8025ae0:	08025c3b 	.word	0x08025c3b
 8025ae4:	08025a89 	.word	0x08025a89
 8025ae8:	08025b3d 	.word	0x08025b3d
 8025aec:	08025a89 	.word	0x08025a89
 8025af0:	08025a89 	.word	0x08025a89
 8025af4:	08025c03 	.word	0x08025c03
 8025af8:	680b      	ldr	r3, [r1, #0]
 8025afa:	1d1a      	adds	r2, r3, #4
 8025afc:	681b      	ldr	r3, [r3, #0]
 8025afe:	600a      	str	r2, [r1, #0]
 8025b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025b08:	2301      	movs	r3, #1
 8025b0a:	e0a3      	b.n	8025c54 <_printf_i+0x1f4>
 8025b0c:	6825      	ldr	r5, [r4, #0]
 8025b0e:	6808      	ldr	r0, [r1, #0]
 8025b10:	062e      	lsls	r6, r5, #24
 8025b12:	f100 0304 	add.w	r3, r0, #4
 8025b16:	d50a      	bpl.n	8025b2e <_printf_i+0xce>
 8025b18:	6805      	ldr	r5, [r0, #0]
 8025b1a:	600b      	str	r3, [r1, #0]
 8025b1c:	2d00      	cmp	r5, #0
 8025b1e:	da03      	bge.n	8025b28 <_printf_i+0xc8>
 8025b20:	232d      	movs	r3, #45	; 0x2d
 8025b22:	426d      	negs	r5, r5
 8025b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025b28:	485e      	ldr	r0, [pc, #376]	; (8025ca4 <_printf_i+0x244>)
 8025b2a:	230a      	movs	r3, #10
 8025b2c:	e019      	b.n	8025b62 <_printf_i+0x102>
 8025b2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8025b32:	6805      	ldr	r5, [r0, #0]
 8025b34:	600b      	str	r3, [r1, #0]
 8025b36:	bf18      	it	ne
 8025b38:	b22d      	sxthne	r5, r5
 8025b3a:	e7ef      	b.n	8025b1c <_printf_i+0xbc>
 8025b3c:	680b      	ldr	r3, [r1, #0]
 8025b3e:	6825      	ldr	r5, [r4, #0]
 8025b40:	1d18      	adds	r0, r3, #4
 8025b42:	6008      	str	r0, [r1, #0]
 8025b44:	0628      	lsls	r0, r5, #24
 8025b46:	d501      	bpl.n	8025b4c <_printf_i+0xec>
 8025b48:	681d      	ldr	r5, [r3, #0]
 8025b4a:	e002      	b.n	8025b52 <_printf_i+0xf2>
 8025b4c:	0669      	lsls	r1, r5, #25
 8025b4e:	d5fb      	bpl.n	8025b48 <_printf_i+0xe8>
 8025b50:	881d      	ldrh	r5, [r3, #0]
 8025b52:	4854      	ldr	r0, [pc, #336]	; (8025ca4 <_printf_i+0x244>)
 8025b54:	2f6f      	cmp	r7, #111	; 0x6f
 8025b56:	bf0c      	ite	eq
 8025b58:	2308      	moveq	r3, #8
 8025b5a:	230a      	movne	r3, #10
 8025b5c:	2100      	movs	r1, #0
 8025b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025b62:	6866      	ldr	r6, [r4, #4]
 8025b64:	60a6      	str	r6, [r4, #8]
 8025b66:	2e00      	cmp	r6, #0
 8025b68:	bfa2      	ittt	ge
 8025b6a:	6821      	ldrge	r1, [r4, #0]
 8025b6c:	f021 0104 	bicge.w	r1, r1, #4
 8025b70:	6021      	strge	r1, [r4, #0]
 8025b72:	b90d      	cbnz	r5, 8025b78 <_printf_i+0x118>
 8025b74:	2e00      	cmp	r6, #0
 8025b76:	d04d      	beq.n	8025c14 <_printf_i+0x1b4>
 8025b78:	4616      	mov	r6, r2
 8025b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8025b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8025b82:	5dc7      	ldrb	r7, [r0, r7]
 8025b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025b88:	462f      	mov	r7, r5
 8025b8a:	42bb      	cmp	r3, r7
 8025b8c:	460d      	mov	r5, r1
 8025b8e:	d9f4      	bls.n	8025b7a <_printf_i+0x11a>
 8025b90:	2b08      	cmp	r3, #8
 8025b92:	d10b      	bne.n	8025bac <_printf_i+0x14c>
 8025b94:	6823      	ldr	r3, [r4, #0]
 8025b96:	07df      	lsls	r7, r3, #31
 8025b98:	d508      	bpl.n	8025bac <_printf_i+0x14c>
 8025b9a:	6923      	ldr	r3, [r4, #16]
 8025b9c:	6861      	ldr	r1, [r4, #4]
 8025b9e:	4299      	cmp	r1, r3
 8025ba0:	bfde      	ittt	le
 8025ba2:	2330      	movle	r3, #48	; 0x30
 8025ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025ba8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025bac:	1b92      	subs	r2, r2, r6
 8025bae:	6122      	str	r2, [r4, #16]
 8025bb0:	f8cd a000 	str.w	sl, [sp]
 8025bb4:	464b      	mov	r3, r9
 8025bb6:	aa03      	add	r2, sp, #12
 8025bb8:	4621      	mov	r1, r4
 8025bba:	4640      	mov	r0, r8
 8025bbc:	f7ff fee2 	bl	8025984 <_printf_common>
 8025bc0:	3001      	adds	r0, #1
 8025bc2:	d14c      	bne.n	8025c5e <_printf_i+0x1fe>
 8025bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8025bc8:	b004      	add	sp, #16
 8025bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025bce:	4835      	ldr	r0, [pc, #212]	; (8025ca4 <_printf_i+0x244>)
 8025bd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025bd4:	6823      	ldr	r3, [r4, #0]
 8025bd6:	680e      	ldr	r6, [r1, #0]
 8025bd8:	061f      	lsls	r7, r3, #24
 8025bda:	f856 5b04 	ldr.w	r5, [r6], #4
 8025bde:	600e      	str	r6, [r1, #0]
 8025be0:	d514      	bpl.n	8025c0c <_printf_i+0x1ac>
 8025be2:	07d9      	lsls	r1, r3, #31
 8025be4:	bf44      	itt	mi
 8025be6:	f043 0320 	orrmi.w	r3, r3, #32
 8025bea:	6023      	strmi	r3, [r4, #0]
 8025bec:	b91d      	cbnz	r5, 8025bf6 <_printf_i+0x196>
 8025bee:	6823      	ldr	r3, [r4, #0]
 8025bf0:	f023 0320 	bic.w	r3, r3, #32
 8025bf4:	6023      	str	r3, [r4, #0]
 8025bf6:	2310      	movs	r3, #16
 8025bf8:	e7b0      	b.n	8025b5c <_printf_i+0xfc>
 8025bfa:	6823      	ldr	r3, [r4, #0]
 8025bfc:	f043 0320 	orr.w	r3, r3, #32
 8025c00:	6023      	str	r3, [r4, #0]
 8025c02:	2378      	movs	r3, #120	; 0x78
 8025c04:	4828      	ldr	r0, [pc, #160]	; (8025ca8 <_printf_i+0x248>)
 8025c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025c0a:	e7e3      	b.n	8025bd4 <_printf_i+0x174>
 8025c0c:	065e      	lsls	r6, r3, #25
 8025c0e:	bf48      	it	mi
 8025c10:	b2ad      	uxthmi	r5, r5
 8025c12:	e7e6      	b.n	8025be2 <_printf_i+0x182>
 8025c14:	4616      	mov	r6, r2
 8025c16:	e7bb      	b.n	8025b90 <_printf_i+0x130>
 8025c18:	680b      	ldr	r3, [r1, #0]
 8025c1a:	6826      	ldr	r6, [r4, #0]
 8025c1c:	6960      	ldr	r0, [r4, #20]
 8025c1e:	1d1d      	adds	r5, r3, #4
 8025c20:	600d      	str	r5, [r1, #0]
 8025c22:	0635      	lsls	r5, r6, #24
 8025c24:	681b      	ldr	r3, [r3, #0]
 8025c26:	d501      	bpl.n	8025c2c <_printf_i+0x1cc>
 8025c28:	6018      	str	r0, [r3, #0]
 8025c2a:	e002      	b.n	8025c32 <_printf_i+0x1d2>
 8025c2c:	0671      	lsls	r1, r6, #25
 8025c2e:	d5fb      	bpl.n	8025c28 <_printf_i+0x1c8>
 8025c30:	8018      	strh	r0, [r3, #0]
 8025c32:	2300      	movs	r3, #0
 8025c34:	6123      	str	r3, [r4, #16]
 8025c36:	4616      	mov	r6, r2
 8025c38:	e7ba      	b.n	8025bb0 <_printf_i+0x150>
 8025c3a:	680b      	ldr	r3, [r1, #0]
 8025c3c:	1d1a      	adds	r2, r3, #4
 8025c3e:	600a      	str	r2, [r1, #0]
 8025c40:	681e      	ldr	r6, [r3, #0]
 8025c42:	6862      	ldr	r2, [r4, #4]
 8025c44:	2100      	movs	r1, #0
 8025c46:	4630      	mov	r0, r6
 8025c48:	f7da fb02 	bl	8000250 <memchr>
 8025c4c:	b108      	cbz	r0, 8025c52 <_printf_i+0x1f2>
 8025c4e:	1b80      	subs	r0, r0, r6
 8025c50:	6060      	str	r0, [r4, #4]
 8025c52:	6863      	ldr	r3, [r4, #4]
 8025c54:	6123      	str	r3, [r4, #16]
 8025c56:	2300      	movs	r3, #0
 8025c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025c5c:	e7a8      	b.n	8025bb0 <_printf_i+0x150>
 8025c5e:	6923      	ldr	r3, [r4, #16]
 8025c60:	4632      	mov	r2, r6
 8025c62:	4649      	mov	r1, r9
 8025c64:	4640      	mov	r0, r8
 8025c66:	47d0      	blx	sl
 8025c68:	3001      	adds	r0, #1
 8025c6a:	d0ab      	beq.n	8025bc4 <_printf_i+0x164>
 8025c6c:	6823      	ldr	r3, [r4, #0]
 8025c6e:	079b      	lsls	r3, r3, #30
 8025c70:	d413      	bmi.n	8025c9a <_printf_i+0x23a>
 8025c72:	68e0      	ldr	r0, [r4, #12]
 8025c74:	9b03      	ldr	r3, [sp, #12]
 8025c76:	4298      	cmp	r0, r3
 8025c78:	bfb8      	it	lt
 8025c7a:	4618      	movlt	r0, r3
 8025c7c:	e7a4      	b.n	8025bc8 <_printf_i+0x168>
 8025c7e:	2301      	movs	r3, #1
 8025c80:	4632      	mov	r2, r6
 8025c82:	4649      	mov	r1, r9
 8025c84:	4640      	mov	r0, r8
 8025c86:	47d0      	blx	sl
 8025c88:	3001      	adds	r0, #1
 8025c8a:	d09b      	beq.n	8025bc4 <_printf_i+0x164>
 8025c8c:	3501      	adds	r5, #1
 8025c8e:	68e3      	ldr	r3, [r4, #12]
 8025c90:	9903      	ldr	r1, [sp, #12]
 8025c92:	1a5b      	subs	r3, r3, r1
 8025c94:	42ab      	cmp	r3, r5
 8025c96:	dcf2      	bgt.n	8025c7e <_printf_i+0x21e>
 8025c98:	e7eb      	b.n	8025c72 <_printf_i+0x212>
 8025c9a:	2500      	movs	r5, #0
 8025c9c:	f104 0619 	add.w	r6, r4, #25
 8025ca0:	e7f5      	b.n	8025c8e <_printf_i+0x22e>
 8025ca2:	bf00      	nop
 8025ca4:	0802ab11 	.word	0x0802ab11
 8025ca8:	0802ab22 	.word	0x0802ab22

08025cac <_sbrk_r>:
 8025cac:	b538      	push	{r3, r4, r5, lr}
 8025cae:	4d06      	ldr	r5, [pc, #24]	; (8025cc8 <_sbrk_r+0x1c>)
 8025cb0:	2300      	movs	r3, #0
 8025cb2:	4604      	mov	r4, r0
 8025cb4:	4608      	mov	r0, r1
 8025cb6:	602b      	str	r3, [r5, #0]
 8025cb8:	f7dc fbe2 	bl	8002480 <_sbrk>
 8025cbc:	1c43      	adds	r3, r0, #1
 8025cbe:	d102      	bne.n	8025cc6 <_sbrk_r+0x1a>
 8025cc0:	682b      	ldr	r3, [r5, #0]
 8025cc2:	b103      	cbz	r3, 8025cc6 <_sbrk_r+0x1a>
 8025cc4:	6023      	str	r3, [r4, #0]
 8025cc6:	bd38      	pop	{r3, r4, r5, pc}
 8025cc8:	20056f60 	.word	0x20056f60

08025ccc <_raise_r>:
 8025ccc:	291f      	cmp	r1, #31
 8025cce:	b538      	push	{r3, r4, r5, lr}
 8025cd0:	4604      	mov	r4, r0
 8025cd2:	460d      	mov	r5, r1
 8025cd4:	d904      	bls.n	8025ce0 <_raise_r+0x14>
 8025cd6:	2316      	movs	r3, #22
 8025cd8:	6003      	str	r3, [r0, #0]
 8025cda:	f04f 30ff 	mov.w	r0, #4294967295
 8025cde:	bd38      	pop	{r3, r4, r5, pc}
 8025ce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025ce2:	b112      	cbz	r2, 8025cea <_raise_r+0x1e>
 8025ce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025ce8:	b94b      	cbnz	r3, 8025cfe <_raise_r+0x32>
 8025cea:	4620      	mov	r0, r4
 8025cec:	f000 f830 	bl	8025d50 <_getpid_r>
 8025cf0:	462a      	mov	r2, r5
 8025cf2:	4601      	mov	r1, r0
 8025cf4:	4620      	mov	r0, r4
 8025cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025cfa:	f000 b817 	b.w	8025d2c <_kill_r>
 8025cfe:	2b01      	cmp	r3, #1
 8025d00:	d00a      	beq.n	8025d18 <_raise_r+0x4c>
 8025d02:	1c59      	adds	r1, r3, #1
 8025d04:	d103      	bne.n	8025d0e <_raise_r+0x42>
 8025d06:	2316      	movs	r3, #22
 8025d08:	6003      	str	r3, [r0, #0]
 8025d0a:	2001      	movs	r0, #1
 8025d0c:	e7e7      	b.n	8025cde <_raise_r+0x12>
 8025d0e:	2400      	movs	r4, #0
 8025d10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025d14:	4628      	mov	r0, r5
 8025d16:	4798      	blx	r3
 8025d18:	2000      	movs	r0, #0
 8025d1a:	e7e0      	b.n	8025cde <_raise_r+0x12>

08025d1c <raise>:
 8025d1c:	4b02      	ldr	r3, [pc, #8]	; (8025d28 <raise+0xc>)
 8025d1e:	4601      	mov	r1, r0
 8025d20:	6818      	ldr	r0, [r3, #0]
 8025d22:	f7ff bfd3 	b.w	8025ccc <_raise_r>
 8025d26:	bf00      	nop
 8025d28:	20000074 	.word	0x20000074

08025d2c <_kill_r>:
 8025d2c:	b538      	push	{r3, r4, r5, lr}
 8025d2e:	4d07      	ldr	r5, [pc, #28]	; (8025d4c <_kill_r+0x20>)
 8025d30:	2300      	movs	r3, #0
 8025d32:	4604      	mov	r4, r0
 8025d34:	4608      	mov	r0, r1
 8025d36:	4611      	mov	r1, r2
 8025d38:	602b      	str	r3, [r5, #0]
 8025d3a:	f7dc fb19 	bl	8002370 <_kill>
 8025d3e:	1c43      	adds	r3, r0, #1
 8025d40:	d102      	bne.n	8025d48 <_kill_r+0x1c>
 8025d42:	682b      	ldr	r3, [r5, #0]
 8025d44:	b103      	cbz	r3, 8025d48 <_kill_r+0x1c>
 8025d46:	6023      	str	r3, [r4, #0]
 8025d48:	bd38      	pop	{r3, r4, r5, pc}
 8025d4a:	bf00      	nop
 8025d4c:	20056f60 	.word	0x20056f60

08025d50 <_getpid_r>:
 8025d50:	f7dc bb06 	b.w	8002360 <_getpid>

08025d54 <siprintf>:
 8025d54:	b40e      	push	{r1, r2, r3}
 8025d56:	b500      	push	{lr}
 8025d58:	b09c      	sub	sp, #112	; 0x70
 8025d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8025d5c:	9002      	str	r0, [sp, #8]
 8025d5e:	9006      	str	r0, [sp, #24]
 8025d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025d64:	4809      	ldr	r0, [pc, #36]	; (8025d8c <siprintf+0x38>)
 8025d66:	9107      	str	r1, [sp, #28]
 8025d68:	9104      	str	r1, [sp, #16]
 8025d6a:	4909      	ldr	r1, [pc, #36]	; (8025d90 <siprintf+0x3c>)
 8025d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8025d70:	9105      	str	r1, [sp, #20]
 8025d72:	6800      	ldr	r0, [r0, #0]
 8025d74:	9301      	str	r3, [sp, #4]
 8025d76:	a902      	add	r1, sp, #8
 8025d78:	f000 fbf6 	bl	8026568 <_svfiprintf_r>
 8025d7c:	9b02      	ldr	r3, [sp, #8]
 8025d7e:	2200      	movs	r2, #0
 8025d80:	701a      	strb	r2, [r3, #0]
 8025d82:	b01c      	add	sp, #112	; 0x70
 8025d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8025d88:	b003      	add	sp, #12
 8025d8a:	4770      	bx	lr
 8025d8c:	20000074 	.word	0x20000074
 8025d90:	ffff0208 	.word	0xffff0208

08025d94 <__swbuf_r>:
 8025d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d96:	460e      	mov	r6, r1
 8025d98:	4614      	mov	r4, r2
 8025d9a:	4605      	mov	r5, r0
 8025d9c:	b118      	cbz	r0, 8025da6 <__swbuf_r+0x12>
 8025d9e:	6983      	ldr	r3, [r0, #24]
 8025da0:	b90b      	cbnz	r3, 8025da6 <__swbuf_r+0x12>
 8025da2:	f000 fa33 	bl	802620c <__sinit>
 8025da6:	4b21      	ldr	r3, [pc, #132]	; (8025e2c <__swbuf_r+0x98>)
 8025da8:	429c      	cmp	r4, r3
 8025daa:	d12b      	bne.n	8025e04 <__swbuf_r+0x70>
 8025dac:	686c      	ldr	r4, [r5, #4]
 8025dae:	69a3      	ldr	r3, [r4, #24]
 8025db0:	60a3      	str	r3, [r4, #8]
 8025db2:	89a3      	ldrh	r3, [r4, #12]
 8025db4:	071a      	lsls	r2, r3, #28
 8025db6:	d52f      	bpl.n	8025e18 <__swbuf_r+0x84>
 8025db8:	6923      	ldr	r3, [r4, #16]
 8025dba:	b36b      	cbz	r3, 8025e18 <__swbuf_r+0x84>
 8025dbc:	6923      	ldr	r3, [r4, #16]
 8025dbe:	6820      	ldr	r0, [r4, #0]
 8025dc0:	1ac0      	subs	r0, r0, r3
 8025dc2:	6963      	ldr	r3, [r4, #20]
 8025dc4:	b2f6      	uxtb	r6, r6
 8025dc6:	4283      	cmp	r3, r0
 8025dc8:	4637      	mov	r7, r6
 8025dca:	dc04      	bgt.n	8025dd6 <__swbuf_r+0x42>
 8025dcc:	4621      	mov	r1, r4
 8025dce:	4628      	mov	r0, r5
 8025dd0:	f000 f988 	bl	80260e4 <_fflush_r>
 8025dd4:	bb30      	cbnz	r0, 8025e24 <__swbuf_r+0x90>
 8025dd6:	68a3      	ldr	r3, [r4, #8]
 8025dd8:	3b01      	subs	r3, #1
 8025dda:	60a3      	str	r3, [r4, #8]
 8025ddc:	6823      	ldr	r3, [r4, #0]
 8025dde:	1c5a      	adds	r2, r3, #1
 8025de0:	6022      	str	r2, [r4, #0]
 8025de2:	701e      	strb	r6, [r3, #0]
 8025de4:	6963      	ldr	r3, [r4, #20]
 8025de6:	3001      	adds	r0, #1
 8025de8:	4283      	cmp	r3, r0
 8025dea:	d004      	beq.n	8025df6 <__swbuf_r+0x62>
 8025dec:	89a3      	ldrh	r3, [r4, #12]
 8025dee:	07db      	lsls	r3, r3, #31
 8025df0:	d506      	bpl.n	8025e00 <__swbuf_r+0x6c>
 8025df2:	2e0a      	cmp	r6, #10
 8025df4:	d104      	bne.n	8025e00 <__swbuf_r+0x6c>
 8025df6:	4621      	mov	r1, r4
 8025df8:	4628      	mov	r0, r5
 8025dfa:	f000 f973 	bl	80260e4 <_fflush_r>
 8025dfe:	b988      	cbnz	r0, 8025e24 <__swbuf_r+0x90>
 8025e00:	4638      	mov	r0, r7
 8025e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e04:	4b0a      	ldr	r3, [pc, #40]	; (8025e30 <__swbuf_r+0x9c>)
 8025e06:	429c      	cmp	r4, r3
 8025e08:	d101      	bne.n	8025e0e <__swbuf_r+0x7a>
 8025e0a:	68ac      	ldr	r4, [r5, #8]
 8025e0c:	e7cf      	b.n	8025dae <__swbuf_r+0x1a>
 8025e0e:	4b09      	ldr	r3, [pc, #36]	; (8025e34 <__swbuf_r+0xa0>)
 8025e10:	429c      	cmp	r4, r3
 8025e12:	bf08      	it	eq
 8025e14:	68ec      	ldreq	r4, [r5, #12]
 8025e16:	e7ca      	b.n	8025dae <__swbuf_r+0x1a>
 8025e18:	4621      	mov	r1, r4
 8025e1a:	4628      	mov	r0, r5
 8025e1c:	f000 f80c 	bl	8025e38 <__swsetup_r>
 8025e20:	2800      	cmp	r0, #0
 8025e22:	d0cb      	beq.n	8025dbc <__swbuf_r+0x28>
 8025e24:	f04f 37ff 	mov.w	r7, #4294967295
 8025e28:	e7ea      	b.n	8025e00 <__swbuf_r+0x6c>
 8025e2a:	bf00      	nop
 8025e2c:	0802ab58 	.word	0x0802ab58
 8025e30:	0802ab78 	.word	0x0802ab78
 8025e34:	0802ab38 	.word	0x0802ab38

08025e38 <__swsetup_r>:
 8025e38:	4b32      	ldr	r3, [pc, #200]	; (8025f04 <__swsetup_r+0xcc>)
 8025e3a:	b570      	push	{r4, r5, r6, lr}
 8025e3c:	681d      	ldr	r5, [r3, #0]
 8025e3e:	4606      	mov	r6, r0
 8025e40:	460c      	mov	r4, r1
 8025e42:	b125      	cbz	r5, 8025e4e <__swsetup_r+0x16>
 8025e44:	69ab      	ldr	r3, [r5, #24]
 8025e46:	b913      	cbnz	r3, 8025e4e <__swsetup_r+0x16>
 8025e48:	4628      	mov	r0, r5
 8025e4a:	f000 f9df 	bl	802620c <__sinit>
 8025e4e:	4b2e      	ldr	r3, [pc, #184]	; (8025f08 <__swsetup_r+0xd0>)
 8025e50:	429c      	cmp	r4, r3
 8025e52:	d10f      	bne.n	8025e74 <__swsetup_r+0x3c>
 8025e54:	686c      	ldr	r4, [r5, #4]
 8025e56:	89a3      	ldrh	r3, [r4, #12]
 8025e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025e5c:	0719      	lsls	r1, r3, #28
 8025e5e:	d42c      	bmi.n	8025eba <__swsetup_r+0x82>
 8025e60:	06dd      	lsls	r5, r3, #27
 8025e62:	d411      	bmi.n	8025e88 <__swsetup_r+0x50>
 8025e64:	2309      	movs	r3, #9
 8025e66:	6033      	str	r3, [r6, #0]
 8025e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025e6c:	81a3      	strh	r3, [r4, #12]
 8025e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8025e72:	e03e      	b.n	8025ef2 <__swsetup_r+0xba>
 8025e74:	4b25      	ldr	r3, [pc, #148]	; (8025f0c <__swsetup_r+0xd4>)
 8025e76:	429c      	cmp	r4, r3
 8025e78:	d101      	bne.n	8025e7e <__swsetup_r+0x46>
 8025e7a:	68ac      	ldr	r4, [r5, #8]
 8025e7c:	e7eb      	b.n	8025e56 <__swsetup_r+0x1e>
 8025e7e:	4b24      	ldr	r3, [pc, #144]	; (8025f10 <__swsetup_r+0xd8>)
 8025e80:	429c      	cmp	r4, r3
 8025e82:	bf08      	it	eq
 8025e84:	68ec      	ldreq	r4, [r5, #12]
 8025e86:	e7e6      	b.n	8025e56 <__swsetup_r+0x1e>
 8025e88:	0758      	lsls	r0, r3, #29
 8025e8a:	d512      	bpl.n	8025eb2 <__swsetup_r+0x7a>
 8025e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025e8e:	b141      	cbz	r1, 8025ea2 <__swsetup_r+0x6a>
 8025e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025e94:	4299      	cmp	r1, r3
 8025e96:	d002      	beq.n	8025e9e <__swsetup_r+0x66>
 8025e98:	4630      	mov	r0, r6
 8025e9a:	f7ff fb6f 	bl	802557c <_free_r>
 8025e9e:	2300      	movs	r3, #0
 8025ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8025ea2:	89a3      	ldrh	r3, [r4, #12]
 8025ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025ea8:	81a3      	strh	r3, [r4, #12]
 8025eaa:	2300      	movs	r3, #0
 8025eac:	6063      	str	r3, [r4, #4]
 8025eae:	6923      	ldr	r3, [r4, #16]
 8025eb0:	6023      	str	r3, [r4, #0]
 8025eb2:	89a3      	ldrh	r3, [r4, #12]
 8025eb4:	f043 0308 	orr.w	r3, r3, #8
 8025eb8:	81a3      	strh	r3, [r4, #12]
 8025eba:	6923      	ldr	r3, [r4, #16]
 8025ebc:	b94b      	cbnz	r3, 8025ed2 <__swsetup_r+0x9a>
 8025ebe:	89a3      	ldrh	r3, [r4, #12]
 8025ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025ec8:	d003      	beq.n	8025ed2 <__swsetup_r+0x9a>
 8025eca:	4621      	mov	r1, r4
 8025ecc:	4630      	mov	r0, r6
 8025ece:	f000 fa63 	bl	8026398 <__smakebuf_r>
 8025ed2:	89a0      	ldrh	r0, [r4, #12]
 8025ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025ed8:	f010 0301 	ands.w	r3, r0, #1
 8025edc:	d00a      	beq.n	8025ef4 <__swsetup_r+0xbc>
 8025ede:	2300      	movs	r3, #0
 8025ee0:	60a3      	str	r3, [r4, #8]
 8025ee2:	6963      	ldr	r3, [r4, #20]
 8025ee4:	425b      	negs	r3, r3
 8025ee6:	61a3      	str	r3, [r4, #24]
 8025ee8:	6923      	ldr	r3, [r4, #16]
 8025eea:	b943      	cbnz	r3, 8025efe <__swsetup_r+0xc6>
 8025eec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025ef0:	d1ba      	bne.n	8025e68 <__swsetup_r+0x30>
 8025ef2:	bd70      	pop	{r4, r5, r6, pc}
 8025ef4:	0781      	lsls	r1, r0, #30
 8025ef6:	bf58      	it	pl
 8025ef8:	6963      	ldrpl	r3, [r4, #20]
 8025efa:	60a3      	str	r3, [r4, #8]
 8025efc:	e7f4      	b.n	8025ee8 <__swsetup_r+0xb0>
 8025efe:	2000      	movs	r0, #0
 8025f00:	e7f7      	b.n	8025ef2 <__swsetup_r+0xba>
 8025f02:	bf00      	nop
 8025f04:	20000074 	.word	0x20000074
 8025f08:	0802ab58 	.word	0x0802ab58
 8025f0c:	0802ab78 	.word	0x0802ab78
 8025f10:	0802ab38 	.word	0x0802ab38

08025f14 <__register_exitproc>:
 8025f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025f18:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8025fd4 <__register_exitproc+0xc0>
 8025f1c:	4606      	mov	r6, r0
 8025f1e:	f8d8 0000 	ldr.w	r0, [r8]
 8025f22:	461f      	mov	r7, r3
 8025f24:	460d      	mov	r5, r1
 8025f26:	4691      	mov	r9, r2
 8025f28:	f000 fa0e 	bl	8026348 <__retarget_lock_acquire_recursive>
 8025f2c:	4b25      	ldr	r3, [pc, #148]	; (8025fc4 <__register_exitproc+0xb0>)
 8025f2e:	681c      	ldr	r4, [r3, #0]
 8025f30:	b934      	cbnz	r4, 8025f40 <__register_exitproc+0x2c>
 8025f32:	4c25      	ldr	r4, [pc, #148]	; (8025fc8 <__register_exitproc+0xb4>)
 8025f34:	601c      	str	r4, [r3, #0]
 8025f36:	4b25      	ldr	r3, [pc, #148]	; (8025fcc <__register_exitproc+0xb8>)
 8025f38:	b113      	cbz	r3, 8025f40 <__register_exitproc+0x2c>
 8025f3a:	681b      	ldr	r3, [r3, #0]
 8025f3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025f40:	6863      	ldr	r3, [r4, #4]
 8025f42:	2b1f      	cmp	r3, #31
 8025f44:	dd07      	ble.n	8025f56 <__register_exitproc+0x42>
 8025f46:	f8d8 0000 	ldr.w	r0, [r8]
 8025f4a:	f000 f9ff 	bl	802634c <__retarget_lock_release_recursive>
 8025f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8025f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025f56:	b34e      	cbz	r6, 8025fac <__register_exitproc+0x98>
 8025f58:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025f5c:	b988      	cbnz	r0, 8025f82 <__register_exitproc+0x6e>
 8025f5e:	4b1c      	ldr	r3, [pc, #112]	; (8025fd0 <__register_exitproc+0xbc>)
 8025f60:	b923      	cbnz	r3, 8025f6c <__register_exitproc+0x58>
 8025f62:	f8d8 0000 	ldr.w	r0, [r8]
 8025f66:	f000 f9f0 	bl	802634a <__retarget_lock_release>
 8025f6a:	e7f0      	b.n	8025f4e <__register_exitproc+0x3a>
 8025f6c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025f70:	f7ff fade 	bl	8025530 <malloc>
 8025f74:	2800      	cmp	r0, #0
 8025f76:	d0f4      	beq.n	8025f62 <__register_exitproc+0x4e>
 8025f78:	2300      	movs	r3, #0
 8025f7a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8025f7e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025f82:	6863      	ldr	r3, [r4, #4]
 8025f84:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025f88:	2201      	movs	r2, #1
 8025f8a:	409a      	lsls	r2, r3
 8025f8c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025f90:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025f94:	4313      	orrs	r3, r2
 8025f96:	2e02      	cmp	r6, #2
 8025f98:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025f9c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025fa0:	bf02      	ittt	eq
 8025fa2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025fa6:	431a      	orreq	r2, r3
 8025fa8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8025fac:	6863      	ldr	r3, [r4, #4]
 8025fae:	f8d8 0000 	ldr.w	r0, [r8]
 8025fb2:	1c5a      	adds	r2, r3, #1
 8025fb4:	3302      	adds	r3, #2
 8025fb6:	6062      	str	r2, [r4, #4]
 8025fb8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025fbc:	f000 f9c6 	bl	802634c <__retarget_lock_release_recursive>
 8025fc0:	2000      	movs	r0, #0
 8025fc2:	e7c6      	b.n	8025f52 <__register_exitproc+0x3e>
 8025fc4:	200567d4 	.word	0x200567d4
 8025fc8:	20056748 	.word	0x20056748
 8025fcc:	0802ab34 	.word	0x0802ab34
 8025fd0:	08025531 	.word	0x08025531
 8025fd4:	200000d8 	.word	0x200000d8

08025fd8 <__sflush_r>:
 8025fd8:	898a      	ldrh	r2, [r1, #12]
 8025fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025fde:	4605      	mov	r5, r0
 8025fe0:	0710      	lsls	r0, r2, #28
 8025fe2:	460c      	mov	r4, r1
 8025fe4:	d458      	bmi.n	8026098 <__sflush_r+0xc0>
 8025fe6:	684b      	ldr	r3, [r1, #4]
 8025fe8:	2b00      	cmp	r3, #0
 8025fea:	dc05      	bgt.n	8025ff8 <__sflush_r+0x20>
 8025fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025fee:	2b00      	cmp	r3, #0
 8025ff0:	dc02      	bgt.n	8025ff8 <__sflush_r+0x20>
 8025ff2:	2000      	movs	r0, #0
 8025ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025ffa:	2e00      	cmp	r6, #0
 8025ffc:	d0f9      	beq.n	8025ff2 <__sflush_r+0x1a>
 8025ffe:	2300      	movs	r3, #0
 8026000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026004:	682f      	ldr	r7, [r5, #0]
 8026006:	602b      	str	r3, [r5, #0]
 8026008:	d032      	beq.n	8026070 <__sflush_r+0x98>
 802600a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802600c:	89a3      	ldrh	r3, [r4, #12]
 802600e:	075a      	lsls	r2, r3, #29
 8026010:	d505      	bpl.n	802601e <__sflush_r+0x46>
 8026012:	6863      	ldr	r3, [r4, #4]
 8026014:	1ac0      	subs	r0, r0, r3
 8026016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026018:	b10b      	cbz	r3, 802601e <__sflush_r+0x46>
 802601a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802601c:	1ac0      	subs	r0, r0, r3
 802601e:	2300      	movs	r3, #0
 8026020:	4602      	mov	r2, r0
 8026022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026024:	6a21      	ldr	r1, [r4, #32]
 8026026:	4628      	mov	r0, r5
 8026028:	47b0      	blx	r6
 802602a:	1c43      	adds	r3, r0, #1
 802602c:	89a3      	ldrh	r3, [r4, #12]
 802602e:	d106      	bne.n	802603e <__sflush_r+0x66>
 8026030:	6829      	ldr	r1, [r5, #0]
 8026032:	291d      	cmp	r1, #29
 8026034:	d82c      	bhi.n	8026090 <__sflush_r+0xb8>
 8026036:	4a2a      	ldr	r2, [pc, #168]	; (80260e0 <__sflush_r+0x108>)
 8026038:	40ca      	lsrs	r2, r1
 802603a:	07d6      	lsls	r6, r2, #31
 802603c:	d528      	bpl.n	8026090 <__sflush_r+0xb8>
 802603e:	2200      	movs	r2, #0
 8026040:	6062      	str	r2, [r4, #4]
 8026042:	04d9      	lsls	r1, r3, #19
 8026044:	6922      	ldr	r2, [r4, #16]
 8026046:	6022      	str	r2, [r4, #0]
 8026048:	d504      	bpl.n	8026054 <__sflush_r+0x7c>
 802604a:	1c42      	adds	r2, r0, #1
 802604c:	d101      	bne.n	8026052 <__sflush_r+0x7a>
 802604e:	682b      	ldr	r3, [r5, #0]
 8026050:	b903      	cbnz	r3, 8026054 <__sflush_r+0x7c>
 8026052:	6560      	str	r0, [r4, #84]	; 0x54
 8026054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026056:	602f      	str	r7, [r5, #0]
 8026058:	2900      	cmp	r1, #0
 802605a:	d0ca      	beq.n	8025ff2 <__sflush_r+0x1a>
 802605c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026060:	4299      	cmp	r1, r3
 8026062:	d002      	beq.n	802606a <__sflush_r+0x92>
 8026064:	4628      	mov	r0, r5
 8026066:	f7ff fa89 	bl	802557c <_free_r>
 802606a:	2000      	movs	r0, #0
 802606c:	6360      	str	r0, [r4, #52]	; 0x34
 802606e:	e7c1      	b.n	8025ff4 <__sflush_r+0x1c>
 8026070:	6a21      	ldr	r1, [r4, #32]
 8026072:	2301      	movs	r3, #1
 8026074:	4628      	mov	r0, r5
 8026076:	47b0      	blx	r6
 8026078:	1c41      	adds	r1, r0, #1
 802607a:	d1c7      	bne.n	802600c <__sflush_r+0x34>
 802607c:	682b      	ldr	r3, [r5, #0]
 802607e:	2b00      	cmp	r3, #0
 8026080:	d0c4      	beq.n	802600c <__sflush_r+0x34>
 8026082:	2b1d      	cmp	r3, #29
 8026084:	d001      	beq.n	802608a <__sflush_r+0xb2>
 8026086:	2b16      	cmp	r3, #22
 8026088:	d101      	bne.n	802608e <__sflush_r+0xb6>
 802608a:	602f      	str	r7, [r5, #0]
 802608c:	e7b1      	b.n	8025ff2 <__sflush_r+0x1a>
 802608e:	89a3      	ldrh	r3, [r4, #12]
 8026090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026094:	81a3      	strh	r3, [r4, #12]
 8026096:	e7ad      	b.n	8025ff4 <__sflush_r+0x1c>
 8026098:	690f      	ldr	r7, [r1, #16]
 802609a:	2f00      	cmp	r7, #0
 802609c:	d0a9      	beq.n	8025ff2 <__sflush_r+0x1a>
 802609e:	0793      	lsls	r3, r2, #30
 80260a0:	680e      	ldr	r6, [r1, #0]
 80260a2:	bf08      	it	eq
 80260a4:	694b      	ldreq	r3, [r1, #20]
 80260a6:	600f      	str	r7, [r1, #0]
 80260a8:	bf18      	it	ne
 80260aa:	2300      	movne	r3, #0
 80260ac:	eba6 0807 	sub.w	r8, r6, r7
 80260b0:	608b      	str	r3, [r1, #8]
 80260b2:	f1b8 0f00 	cmp.w	r8, #0
 80260b6:	dd9c      	ble.n	8025ff2 <__sflush_r+0x1a>
 80260b8:	6a21      	ldr	r1, [r4, #32]
 80260ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80260bc:	4643      	mov	r3, r8
 80260be:	463a      	mov	r2, r7
 80260c0:	4628      	mov	r0, r5
 80260c2:	47b0      	blx	r6
 80260c4:	2800      	cmp	r0, #0
 80260c6:	dc06      	bgt.n	80260d6 <__sflush_r+0xfe>
 80260c8:	89a3      	ldrh	r3, [r4, #12]
 80260ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80260ce:	81a3      	strh	r3, [r4, #12]
 80260d0:	f04f 30ff 	mov.w	r0, #4294967295
 80260d4:	e78e      	b.n	8025ff4 <__sflush_r+0x1c>
 80260d6:	4407      	add	r7, r0
 80260d8:	eba8 0800 	sub.w	r8, r8, r0
 80260dc:	e7e9      	b.n	80260b2 <__sflush_r+0xda>
 80260de:	bf00      	nop
 80260e0:	20400001 	.word	0x20400001

080260e4 <_fflush_r>:
 80260e4:	b538      	push	{r3, r4, r5, lr}
 80260e6:	690b      	ldr	r3, [r1, #16]
 80260e8:	4605      	mov	r5, r0
 80260ea:	460c      	mov	r4, r1
 80260ec:	b913      	cbnz	r3, 80260f4 <_fflush_r+0x10>
 80260ee:	2500      	movs	r5, #0
 80260f0:	4628      	mov	r0, r5
 80260f2:	bd38      	pop	{r3, r4, r5, pc}
 80260f4:	b118      	cbz	r0, 80260fe <_fflush_r+0x1a>
 80260f6:	6983      	ldr	r3, [r0, #24]
 80260f8:	b90b      	cbnz	r3, 80260fe <_fflush_r+0x1a>
 80260fa:	f000 f887 	bl	802620c <__sinit>
 80260fe:	4b14      	ldr	r3, [pc, #80]	; (8026150 <_fflush_r+0x6c>)
 8026100:	429c      	cmp	r4, r3
 8026102:	d11b      	bne.n	802613c <_fflush_r+0x58>
 8026104:	686c      	ldr	r4, [r5, #4]
 8026106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802610a:	2b00      	cmp	r3, #0
 802610c:	d0ef      	beq.n	80260ee <_fflush_r+0xa>
 802610e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026110:	07d0      	lsls	r0, r2, #31
 8026112:	d404      	bmi.n	802611e <_fflush_r+0x3a>
 8026114:	0599      	lsls	r1, r3, #22
 8026116:	d402      	bmi.n	802611e <_fflush_r+0x3a>
 8026118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802611a:	f000 f915 	bl	8026348 <__retarget_lock_acquire_recursive>
 802611e:	4628      	mov	r0, r5
 8026120:	4621      	mov	r1, r4
 8026122:	f7ff ff59 	bl	8025fd8 <__sflush_r>
 8026126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026128:	07da      	lsls	r2, r3, #31
 802612a:	4605      	mov	r5, r0
 802612c:	d4e0      	bmi.n	80260f0 <_fflush_r+0xc>
 802612e:	89a3      	ldrh	r3, [r4, #12]
 8026130:	059b      	lsls	r3, r3, #22
 8026132:	d4dd      	bmi.n	80260f0 <_fflush_r+0xc>
 8026134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026136:	f000 f909 	bl	802634c <__retarget_lock_release_recursive>
 802613a:	e7d9      	b.n	80260f0 <_fflush_r+0xc>
 802613c:	4b05      	ldr	r3, [pc, #20]	; (8026154 <_fflush_r+0x70>)
 802613e:	429c      	cmp	r4, r3
 8026140:	d101      	bne.n	8026146 <_fflush_r+0x62>
 8026142:	68ac      	ldr	r4, [r5, #8]
 8026144:	e7df      	b.n	8026106 <_fflush_r+0x22>
 8026146:	4b04      	ldr	r3, [pc, #16]	; (8026158 <_fflush_r+0x74>)
 8026148:	429c      	cmp	r4, r3
 802614a:	bf08      	it	eq
 802614c:	68ec      	ldreq	r4, [r5, #12]
 802614e:	e7da      	b.n	8026106 <_fflush_r+0x22>
 8026150:	0802ab58 	.word	0x0802ab58
 8026154:	0802ab78 	.word	0x0802ab78
 8026158:	0802ab38 	.word	0x0802ab38

0802615c <std>:
 802615c:	2300      	movs	r3, #0
 802615e:	b510      	push	{r4, lr}
 8026160:	4604      	mov	r4, r0
 8026162:	e9c0 3300 	strd	r3, r3, [r0]
 8026166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802616a:	6083      	str	r3, [r0, #8]
 802616c:	8181      	strh	r1, [r0, #12]
 802616e:	6643      	str	r3, [r0, #100]	; 0x64
 8026170:	81c2      	strh	r2, [r0, #14]
 8026172:	6183      	str	r3, [r0, #24]
 8026174:	4619      	mov	r1, r3
 8026176:	2208      	movs	r2, #8
 8026178:	305c      	adds	r0, #92	; 0x5c
 802617a:	f7ff f9f7 	bl	802556c <memset>
 802617e:	4b05      	ldr	r3, [pc, #20]	; (8026194 <std+0x38>)
 8026180:	6263      	str	r3, [r4, #36]	; 0x24
 8026182:	4b05      	ldr	r3, [pc, #20]	; (8026198 <std+0x3c>)
 8026184:	62a3      	str	r3, [r4, #40]	; 0x28
 8026186:	4b05      	ldr	r3, [pc, #20]	; (802619c <std+0x40>)
 8026188:	62e3      	str	r3, [r4, #44]	; 0x2c
 802618a:	4b05      	ldr	r3, [pc, #20]	; (80261a0 <std+0x44>)
 802618c:	6224      	str	r4, [r4, #32]
 802618e:	6323      	str	r3, [r4, #48]	; 0x30
 8026190:	bd10      	pop	{r4, pc}
 8026192:	bf00      	nop
 8026194:	08026769 	.word	0x08026769
 8026198:	0802678b 	.word	0x0802678b
 802619c:	080267c3 	.word	0x080267c3
 80261a0:	080267e7 	.word	0x080267e7

080261a4 <_cleanup_r>:
 80261a4:	4901      	ldr	r1, [pc, #4]	; (80261ac <_cleanup_r+0x8>)
 80261a6:	f000 b8af 	b.w	8026308 <_fwalk_reent>
 80261aa:	bf00      	nop
 80261ac:	080260e5 	.word	0x080260e5

080261b0 <__sfmoreglue>:
 80261b0:	b570      	push	{r4, r5, r6, lr}
 80261b2:	1e4a      	subs	r2, r1, #1
 80261b4:	2568      	movs	r5, #104	; 0x68
 80261b6:	4355      	muls	r5, r2
 80261b8:	460e      	mov	r6, r1
 80261ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80261be:	f7ff fa2d 	bl	802561c <_malloc_r>
 80261c2:	4604      	mov	r4, r0
 80261c4:	b140      	cbz	r0, 80261d8 <__sfmoreglue+0x28>
 80261c6:	2100      	movs	r1, #0
 80261c8:	e9c0 1600 	strd	r1, r6, [r0]
 80261cc:	300c      	adds	r0, #12
 80261ce:	60a0      	str	r0, [r4, #8]
 80261d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80261d4:	f7ff f9ca 	bl	802556c <memset>
 80261d8:	4620      	mov	r0, r4
 80261da:	bd70      	pop	{r4, r5, r6, pc}

080261dc <__sfp_lock_acquire>:
 80261dc:	4801      	ldr	r0, [pc, #4]	; (80261e4 <__sfp_lock_acquire+0x8>)
 80261de:	f000 b8b3 	b.w	8026348 <__retarget_lock_acquire_recursive>
 80261e2:	bf00      	nop
 80261e4:	20056f5c 	.word	0x20056f5c

080261e8 <__sfp_lock_release>:
 80261e8:	4801      	ldr	r0, [pc, #4]	; (80261f0 <__sfp_lock_release+0x8>)
 80261ea:	f000 b8af 	b.w	802634c <__retarget_lock_release_recursive>
 80261ee:	bf00      	nop
 80261f0:	20056f5c 	.word	0x20056f5c

080261f4 <__sinit_lock_acquire>:
 80261f4:	4801      	ldr	r0, [pc, #4]	; (80261fc <__sinit_lock_acquire+0x8>)
 80261f6:	f000 b8a7 	b.w	8026348 <__retarget_lock_acquire_recursive>
 80261fa:	bf00      	nop
 80261fc:	20056f57 	.word	0x20056f57

08026200 <__sinit_lock_release>:
 8026200:	4801      	ldr	r0, [pc, #4]	; (8026208 <__sinit_lock_release+0x8>)
 8026202:	f000 b8a3 	b.w	802634c <__retarget_lock_release_recursive>
 8026206:	bf00      	nop
 8026208:	20056f57 	.word	0x20056f57

0802620c <__sinit>:
 802620c:	b510      	push	{r4, lr}
 802620e:	4604      	mov	r4, r0
 8026210:	f7ff fff0 	bl	80261f4 <__sinit_lock_acquire>
 8026214:	69a3      	ldr	r3, [r4, #24]
 8026216:	b11b      	cbz	r3, 8026220 <__sinit+0x14>
 8026218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802621c:	f7ff bff0 	b.w	8026200 <__sinit_lock_release>
 8026220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026224:	6523      	str	r3, [r4, #80]	; 0x50
 8026226:	4b13      	ldr	r3, [pc, #76]	; (8026274 <__sinit+0x68>)
 8026228:	4a13      	ldr	r2, [pc, #76]	; (8026278 <__sinit+0x6c>)
 802622a:	681b      	ldr	r3, [r3, #0]
 802622c:	62a2      	str	r2, [r4, #40]	; 0x28
 802622e:	42a3      	cmp	r3, r4
 8026230:	bf04      	itt	eq
 8026232:	2301      	moveq	r3, #1
 8026234:	61a3      	streq	r3, [r4, #24]
 8026236:	4620      	mov	r0, r4
 8026238:	f000 f820 	bl	802627c <__sfp>
 802623c:	6060      	str	r0, [r4, #4]
 802623e:	4620      	mov	r0, r4
 8026240:	f000 f81c 	bl	802627c <__sfp>
 8026244:	60a0      	str	r0, [r4, #8]
 8026246:	4620      	mov	r0, r4
 8026248:	f000 f818 	bl	802627c <__sfp>
 802624c:	2200      	movs	r2, #0
 802624e:	60e0      	str	r0, [r4, #12]
 8026250:	2104      	movs	r1, #4
 8026252:	6860      	ldr	r0, [r4, #4]
 8026254:	f7ff ff82 	bl	802615c <std>
 8026258:	68a0      	ldr	r0, [r4, #8]
 802625a:	2201      	movs	r2, #1
 802625c:	2109      	movs	r1, #9
 802625e:	f7ff ff7d 	bl	802615c <std>
 8026262:	68e0      	ldr	r0, [r4, #12]
 8026264:	2202      	movs	r2, #2
 8026266:	2112      	movs	r1, #18
 8026268:	f7ff ff78 	bl	802615c <std>
 802626c:	2301      	movs	r3, #1
 802626e:	61a3      	str	r3, [r4, #24]
 8026270:	e7d2      	b.n	8026218 <__sinit+0xc>
 8026272:	bf00      	nop
 8026274:	0802aafc 	.word	0x0802aafc
 8026278:	080261a5 	.word	0x080261a5

0802627c <__sfp>:
 802627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802627e:	4607      	mov	r7, r0
 8026280:	f7ff ffac 	bl	80261dc <__sfp_lock_acquire>
 8026284:	4b1e      	ldr	r3, [pc, #120]	; (8026300 <__sfp+0x84>)
 8026286:	681e      	ldr	r6, [r3, #0]
 8026288:	69b3      	ldr	r3, [r6, #24]
 802628a:	b913      	cbnz	r3, 8026292 <__sfp+0x16>
 802628c:	4630      	mov	r0, r6
 802628e:	f7ff ffbd 	bl	802620c <__sinit>
 8026292:	3648      	adds	r6, #72	; 0x48
 8026294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026298:	3b01      	subs	r3, #1
 802629a:	d503      	bpl.n	80262a4 <__sfp+0x28>
 802629c:	6833      	ldr	r3, [r6, #0]
 802629e:	b30b      	cbz	r3, 80262e4 <__sfp+0x68>
 80262a0:	6836      	ldr	r6, [r6, #0]
 80262a2:	e7f7      	b.n	8026294 <__sfp+0x18>
 80262a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80262a8:	b9d5      	cbnz	r5, 80262e0 <__sfp+0x64>
 80262aa:	4b16      	ldr	r3, [pc, #88]	; (8026304 <__sfp+0x88>)
 80262ac:	60e3      	str	r3, [r4, #12]
 80262ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80262b2:	6665      	str	r5, [r4, #100]	; 0x64
 80262b4:	f000 f847 	bl	8026346 <__retarget_lock_init_recursive>
 80262b8:	f7ff ff96 	bl	80261e8 <__sfp_lock_release>
 80262bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80262c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80262c4:	6025      	str	r5, [r4, #0]
 80262c6:	61a5      	str	r5, [r4, #24]
 80262c8:	2208      	movs	r2, #8
 80262ca:	4629      	mov	r1, r5
 80262cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80262d0:	f7ff f94c 	bl	802556c <memset>
 80262d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80262d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80262dc:	4620      	mov	r0, r4
 80262de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80262e0:	3468      	adds	r4, #104	; 0x68
 80262e2:	e7d9      	b.n	8026298 <__sfp+0x1c>
 80262e4:	2104      	movs	r1, #4
 80262e6:	4638      	mov	r0, r7
 80262e8:	f7ff ff62 	bl	80261b0 <__sfmoreglue>
 80262ec:	4604      	mov	r4, r0
 80262ee:	6030      	str	r0, [r6, #0]
 80262f0:	2800      	cmp	r0, #0
 80262f2:	d1d5      	bne.n	80262a0 <__sfp+0x24>
 80262f4:	f7ff ff78 	bl	80261e8 <__sfp_lock_release>
 80262f8:	230c      	movs	r3, #12
 80262fa:	603b      	str	r3, [r7, #0]
 80262fc:	e7ee      	b.n	80262dc <__sfp+0x60>
 80262fe:	bf00      	nop
 8026300:	0802aafc 	.word	0x0802aafc
 8026304:	ffff0001 	.word	0xffff0001

08026308 <_fwalk_reent>:
 8026308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802630c:	4606      	mov	r6, r0
 802630e:	4688      	mov	r8, r1
 8026310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026314:	2700      	movs	r7, #0
 8026316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802631a:	f1b9 0901 	subs.w	r9, r9, #1
 802631e:	d505      	bpl.n	802632c <_fwalk_reent+0x24>
 8026320:	6824      	ldr	r4, [r4, #0]
 8026322:	2c00      	cmp	r4, #0
 8026324:	d1f7      	bne.n	8026316 <_fwalk_reent+0xe>
 8026326:	4638      	mov	r0, r7
 8026328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802632c:	89ab      	ldrh	r3, [r5, #12]
 802632e:	2b01      	cmp	r3, #1
 8026330:	d907      	bls.n	8026342 <_fwalk_reent+0x3a>
 8026332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026336:	3301      	adds	r3, #1
 8026338:	d003      	beq.n	8026342 <_fwalk_reent+0x3a>
 802633a:	4629      	mov	r1, r5
 802633c:	4630      	mov	r0, r6
 802633e:	47c0      	blx	r8
 8026340:	4307      	orrs	r7, r0
 8026342:	3568      	adds	r5, #104	; 0x68
 8026344:	e7e9      	b.n	802631a <_fwalk_reent+0x12>

08026346 <__retarget_lock_init_recursive>:
 8026346:	4770      	bx	lr

08026348 <__retarget_lock_acquire_recursive>:
 8026348:	4770      	bx	lr

0802634a <__retarget_lock_release>:
 802634a:	4770      	bx	lr

0802634c <__retarget_lock_release_recursive>:
 802634c:	4770      	bx	lr

0802634e <__swhatbuf_r>:
 802634e:	b570      	push	{r4, r5, r6, lr}
 8026350:	460e      	mov	r6, r1
 8026352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026356:	2900      	cmp	r1, #0
 8026358:	b096      	sub	sp, #88	; 0x58
 802635a:	4614      	mov	r4, r2
 802635c:	461d      	mov	r5, r3
 802635e:	da07      	bge.n	8026370 <__swhatbuf_r+0x22>
 8026360:	2300      	movs	r3, #0
 8026362:	602b      	str	r3, [r5, #0]
 8026364:	89b3      	ldrh	r3, [r6, #12]
 8026366:	061a      	lsls	r2, r3, #24
 8026368:	d410      	bmi.n	802638c <__swhatbuf_r+0x3e>
 802636a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802636e:	e00e      	b.n	802638e <__swhatbuf_r+0x40>
 8026370:	466a      	mov	r2, sp
 8026372:	f000 fa5f 	bl	8026834 <_fstat_r>
 8026376:	2800      	cmp	r0, #0
 8026378:	dbf2      	blt.n	8026360 <__swhatbuf_r+0x12>
 802637a:	9a01      	ldr	r2, [sp, #4]
 802637c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026384:	425a      	negs	r2, r3
 8026386:	415a      	adcs	r2, r3
 8026388:	602a      	str	r2, [r5, #0]
 802638a:	e7ee      	b.n	802636a <__swhatbuf_r+0x1c>
 802638c:	2340      	movs	r3, #64	; 0x40
 802638e:	2000      	movs	r0, #0
 8026390:	6023      	str	r3, [r4, #0]
 8026392:	b016      	add	sp, #88	; 0x58
 8026394:	bd70      	pop	{r4, r5, r6, pc}
	...

08026398 <__smakebuf_r>:
 8026398:	898b      	ldrh	r3, [r1, #12]
 802639a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802639c:	079d      	lsls	r5, r3, #30
 802639e:	4606      	mov	r6, r0
 80263a0:	460c      	mov	r4, r1
 80263a2:	d507      	bpl.n	80263b4 <__smakebuf_r+0x1c>
 80263a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80263a8:	6023      	str	r3, [r4, #0]
 80263aa:	6123      	str	r3, [r4, #16]
 80263ac:	2301      	movs	r3, #1
 80263ae:	6163      	str	r3, [r4, #20]
 80263b0:	b002      	add	sp, #8
 80263b2:	bd70      	pop	{r4, r5, r6, pc}
 80263b4:	ab01      	add	r3, sp, #4
 80263b6:	466a      	mov	r2, sp
 80263b8:	f7ff ffc9 	bl	802634e <__swhatbuf_r>
 80263bc:	9900      	ldr	r1, [sp, #0]
 80263be:	4605      	mov	r5, r0
 80263c0:	4630      	mov	r0, r6
 80263c2:	f7ff f92b 	bl	802561c <_malloc_r>
 80263c6:	b948      	cbnz	r0, 80263dc <__smakebuf_r+0x44>
 80263c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80263cc:	059a      	lsls	r2, r3, #22
 80263ce:	d4ef      	bmi.n	80263b0 <__smakebuf_r+0x18>
 80263d0:	f023 0303 	bic.w	r3, r3, #3
 80263d4:	f043 0302 	orr.w	r3, r3, #2
 80263d8:	81a3      	strh	r3, [r4, #12]
 80263da:	e7e3      	b.n	80263a4 <__smakebuf_r+0xc>
 80263dc:	4b0d      	ldr	r3, [pc, #52]	; (8026414 <__smakebuf_r+0x7c>)
 80263de:	62b3      	str	r3, [r6, #40]	; 0x28
 80263e0:	89a3      	ldrh	r3, [r4, #12]
 80263e2:	6020      	str	r0, [r4, #0]
 80263e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80263e8:	81a3      	strh	r3, [r4, #12]
 80263ea:	9b00      	ldr	r3, [sp, #0]
 80263ec:	6163      	str	r3, [r4, #20]
 80263ee:	9b01      	ldr	r3, [sp, #4]
 80263f0:	6120      	str	r0, [r4, #16]
 80263f2:	b15b      	cbz	r3, 802640c <__smakebuf_r+0x74>
 80263f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80263f8:	4630      	mov	r0, r6
 80263fa:	f000 fa2d 	bl	8026858 <_isatty_r>
 80263fe:	b128      	cbz	r0, 802640c <__smakebuf_r+0x74>
 8026400:	89a3      	ldrh	r3, [r4, #12]
 8026402:	f023 0303 	bic.w	r3, r3, #3
 8026406:	f043 0301 	orr.w	r3, r3, #1
 802640a:	81a3      	strh	r3, [r4, #12]
 802640c:	89a0      	ldrh	r0, [r4, #12]
 802640e:	4305      	orrs	r5, r0
 8026410:	81a5      	strh	r5, [r4, #12]
 8026412:	e7cd      	b.n	80263b0 <__smakebuf_r+0x18>
 8026414:	080261a5 	.word	0x080261a5

08026418 <memmove>:
 8026418:	4288      	cmp	r0, r1
 802641a:	b510      	push	{r4, lr}
 802641c:	eb01 0402 	add.w	r4, r1, r2
 8026420:	d902      	bls.n	8026428 <memmove+0x10>
 8026422:	4284      	cmp	r4, r0
 8026424:	4623      	mov	r3, r4
 8026426:	d807      	bhi.n	8026438 <memmove+0x20>
 8026428:	1e43      	subs	r3, r0, #1
 802642a:	42a1      	cmp	r1, r4
 802642c:	d008      	beq.n	8026440 <memmove+0x28>
 802642e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026432:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026436:	e7f8      	b.n	802642a <memmove+0x12>
 8026438:	4402      	add	r2, r0
 802643a:	4601      	mov	r1, r0
 802643c:	428a      	cmp	r2, r1
 802643e:	d100      	bne.n	8026442 <memmove+0x2a>
 8026440:	bd10      	pop	{r4, pc}
 8026442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802644a:	e7f7      	b.n	802643c <memmove+0x24>

0802644c <__malloc_lock>:
 802644c:	4801      	ldr	r0, [pc, #4]	; (8026454 <__malloc_lock+0x8>)
 802644e:	f7ff bf7b 	b.w	8026348 <__retarget_lock_acquire_recursive>
 8026452:	bf00      	nop
 8026454:	20056f58 	.word	0x20056f58

08026458 <__malloc_unlock>:
 8026458:	4801      	ldr	r0, [pc, #4]	; (8026460 <__malloc_unlock+0x8>)
 802645a:	f7ff bf77 	b.w	802634c <__retarget_lock_release_recursive>
 802645e:	bf00      	nop
 8026460:	20056f58 	.word	0x20056f58

08026464 <_realloc_r>:
 8026464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026466:	4607      	mov	r7, r0
 8026468:	4614      	mov	r4, r2
 802646a:	460e      	mov	r6, r1
 802646c:	b921      	cbnz	r1, 8026478 <_realloc_r+0x14>
 802646e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8026472:	4611      	mov	r1, r2
 8026474:	f7ff b8d2 	b.w	802561c <_malloc_r>
 8026478:	b922      	cbnz	r2, 8026484 <_realloc_r+0x20>
 802647a:	f7ff f87f 	bl	802557c <_free_r>
 802647e:	4625      	mov	r5, r4
 8026480:	4628      	mov	r0, r5
 8026482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026484:	f000 fa0a 	bl	802689c <_malloc_usable_size_r>
 8026488:	42a0      	cmp	r0, r4
 802648a:	d20f      	bcs.n	80264ac <_realloc_r+0x48>
 802648c:	4621      	mov	r1, r4
 802648e:	4638      	mov	r0, r7
 8026490:	f7ff f8c4 	bl	802561c <_malloc_r>
 8026494:	4605      	mov	r5, r0
 8026496:	2800      	cmp	r0, #0
 8026498:	d0f2      	beq.n	8026480 <_realloc_r+0x1c>
 802649a:	4631      	mov	r1, r6
 802649c:	4622      	mov	r2, r4
 802649e:	f7ff f857 	bl	8025550 <memcpy>
 80264a2:	4631      	mov	r1, r6
 80264a4:	4638      	mov	r0, r7
 80264a6:	f7ff f869 	bl	802557c <_free_r>
 80264aa:	e7e9      	b.n	8026480 <_realloc_r+0x1c>
 80264ac:	4635      	mov	r5, r6
 80264ae:	e7e7      	b.n	8026480 <_realloc_r+0x1c>

080264b0 <__ssputs_r>:
 80264b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80264b4:	688e      	ldr	r6, [r1, #8]
 80264b6:	429e      	cmp	r6, r3
 80264b8:	4682      	mov	sl, r0
 80264ba:	460c      	mov	r4, r1
 80264bc:	4690      	mov	r8, r2
 80264be:	461f      	mov	r7, r3
 80264c0:	d838      	bhi.n	8026534 <__ssputs_r+0x84>
 80264c2:	898a      	ldrh	r2, [r1, #12]
 80264c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80264c8:	d032      	beq.n	8026530 <__ssputs_r+0x80>
 80264ca:	6825      	ldr	r5, [r4, #0]
 80264cc:	6909      	ldr	r1, [r1, #16]
 80264ce:	eba5 0901 	sub.w	r9, r5, r1
 80264d2:	6965      	ldr	r5, [r4, #20]
 80264d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80264d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80264dc:	3301      	adds	r3, #1
 80264de:	444b      	add	r3, r9
 80264e0:	106d      	asrs	r5, r5, #1
 80264e2:	429d      	cmp	r5, r3
 80264e4:	bf38      	it	cc
 80264e6:	461d      	movcc	r5, r3
 80264e8:	0553      	lsls	r3, r2, #21
 80264ea:	d531      	bpl.n	8026550 <__ssputs_r+0xa0>
 80264ec:	4629      	mov	r1, r5
 80264ee:	f7ff f895 	bl	802561c <_malloc_r>
 80264f2:	4606      	mov	r6, r0
 80264f4:	b950      	cbnz	r0, 802650c <__ssputs_r+0x5c>
 80264f6:	230c      	movs	r3, #12
 80264f8:	f8ca 3000 	str.w	r3, [sl]
 80264fc:	89a3      	ldrh	r3, [r4, #12]
 80264fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026502:	81a3      	strh	r3, [r4, #12]
 8026504:	f04f 30ff 	mov.w	r0, #4294967295
 8026508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802650c:	6921      	ldr	r1, [r4, #16]
 802650e:	464a      	mov	r2, r9
 8026510:	f7ff f81e 	bl	8025550 <memcpy>
 8026514:	89a3      	ldrh	r3, [r4, #12]
 8026516:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802651a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802651e:	81a3      	strh	r3, [r4, #12]
 8026520:	6126      	str	r6, [r4, #16]
 8026522:	6165      	str	r5, [r4, #20]
 8026524:	444e      	add	r6, r9
 8026526:	eba5 0509 	sub.w	r5, r5, r9
 802652a:	6026      	str	r6, [r4, #0]
 802652c:	60a5      	str	r5, [r4, #8]
 802652e:	463e      	mov	r6, r7
 8026530:	42be      	cmp	r6, r7
 8026532:	d900      	bls.n	8026536 <__ssputs_r+0x86>
 8026534:	463e      	mov	r6, r7
 8026536:	4632      	mov	r2, r6
 8026538:	6820      	ldr	r0, [r4, #0]
 802653a:	4641      	mov	r1, r8
 802653c:	f7ff ff6c 	bl	8026418 <memmove>
 8026540:	68a3      	ldr	r3, [r4, #8]
 8026542:	6822      	ldr	r2, [r4, #0]
 8026544:	1b9b      	subs	r3, r3, r6
 8026546:	4432      	add	r2, r6
 8026548:	60a3      	str	r3, [r4, #8]
 802654a:	6022      	str	r2, [r4, #0]
 802654c:	2000      	movs	r0, #0
 802654e:	e7db      	b.n	8026508 <__ssputs_r+0x58>
 8026550:	462a      	mov	r2, r5
 8026552:	f7ff ff87 	bl	8026464 <_realloc_r>
 8026556:	4606      	mov	r6, r0
 8026558:	2800      	cmp	r0, #0
 802655a:	d1e1      	bne.n	8026520 <__ssputs_r+0x70>
 802655c:	6921      	ldr	r1, [r4, #16]
 802655e:	4650      	mov	r0, sl
 8026560:	f7ff f80c 	bl	802557c <_free_r>
 8026564:	e7c7      	b.n	80264f6 <__ssputs_r+0x46>
	...

08026568 <_svfiprintf_r>:
 8026568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802656c:	4698      	mov	r8, r3
 802656e:	898b      	ldrh	r3, [r1, #12]
 8026570:	061b      	lsls	r3, r3, #24
 8026572:	b09d      	sub	sp, #116	; 0x74
 8026574:	4607      	mov	r7, r0
 8026576:	460d      	mov	r5, r1
 8026578:	4614      	mov	r4, r2
 802657a:	d50e      	bpl.n	802659a <_svfiprintf_r+0x32>
 802657c:	690b      	ldr	r3, [r1, #16]
 802657e:	b963      	cbnz	r3, 802659a <_svfiprintf_r+0x32>
 8026580:	2140      	movs	r1, #64	; 0x40
 8026582:	f7ff f84b 	bl	802561c <_malloc_r>
 8026586:	6028      	str	r0, [r5, #0]
 8026588:	6128      	str	r0, [r5, #16]
 802658a:	b920      	cbnz	r0, 8026596 <_svfiprintf_r+0x2e>
 802658c:	230c      	movs	r3, #12
 802658e:	603b      	str	r3, [r7, #0]
 8026590:	f04f 30ff 	mov.w	r0, #4294967295
 8026594:	e0d1      	b.n	802673a <_svfiprintf_r+0x1d2>
 8026596:	2340      	movs	r3, #64	; 0x40
 8026598:	616b      	str	r3, [r5, #20]
 802659a:	2300      	movs	r3, #0
 802659c:	9309      	str	r3, [sp, #36]	; 0x24
 802659e:	2320      	movs	r3, #32
 80265a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80265a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80265a8:	2330      	movs	r3, #48	; 0x30
 80265aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8026754 <_svfiprintf_r+0x1ec>
 80265ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80265b2:	f04f 0901 	mov.w	r9, #1
 80265b6:	4623      	mov	r3, r4
 80265b8:	469a      	mov	sl, r3
 80265ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80265be:	b10a      	cbz	r2, 80265c4 <_svfiprintf_r+0x5c>
 80265c0:	2a25      	cmp	r2, #37	; 0x25
 80265c2:	d1f9      	bne.n	80265b8 <_svfiprintf_r+0x50>
 80265c4:	ebba 0b04 	subs.w	fp, sl, r4
 80265c8:	d00b      	beq.n	80265e2 <_svfiprintf_r+0x7a>
 80265ca:	465b      	mov	r3, fp
 80265cc:	4622      	mov	r2, r4
 80265ce:	4629      	mov	r1, r5
 80265d0:	4638      	mov	r0, r7
 80265d2:	f7ff ff6d 	bl	80264b0 <__ssputs_r>
 80265d6:	3001      	adds	r0, #1
 80265d8:	f000 80aa 	beq.w	8026730 <_svfiprintf_r+0x1c8>
 80265dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80265de:	445a      	add	r2, fp
 80265e0:	9209      	str	r2, [sp, #36]	; 0x24
 80265e2:	f89a 3000 	ldrb.w	r3, [sl]
 80265e6:	2b00      	cmp	r3, #0
 80265e8:	f000 80a2 	beq.w	8026730 <_svfiprintf_r+0x1c8>
 80265ec:	2300      	movs	r3, #0
 80265ee:	f04f 32ff 	mov.w	r2, #4294967295
 80265f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80265f6:	f10a 0a01 	add.w	sl, sl, #1
 80265fa:	9304      	str	r3, [sp, #16]
 80265fc:	9307      	str	r3, [sp, #28]
 80265fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026602:	931a      	str	r3, [sp, #104]	; 0x68
 8026604:	4654      	mov	r4, sl
 8026606:	2205      	movs	r2, #5
 8026608:	f814 1b01 	ldrb.w	r1, [r4], #1
 802660c:	4851      	ldr	r0, [pc, #324]	; (8026754 <_svfiprintf_r+0x1ec>)
 802660e:	f7d9 fe1f 	bl	8000250 <memchr>
 8026612:	9a04      	ldr	r2, [sp, #16]
 8026614:	b9d8      	cbnz	r0, 802664e <_svfiprintf_r+0xe6>
 8026616:	06d0      	lsls	r0, r2, #27
 8026618:	bf44      	itt	mi
 802661a:	2320      	movmi	r3, #32
 802661c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026620:	0711      	lsls	r1, r2, #28
 8026622:	bf44      	itt	mi
 8026624:	232b      	movmi	r3, #43	; 0x2b
 8026626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802662a:	f89a 3000 	ldrb.w	r3, [sl]
 802662e:	2b2a      	cmp	r3, #42	; 0x2a
 8026630:	d015      	beq.n	802665e <_svfiprintf_r+0xf6>
 8026632:	9a07      	ldr	r2, [sp, #28]
 8026634:	4654      	mov	r4, sl
 8026636:	2000      	movs	r0, #0
 8026638:	f04f 0c0a 	mov.w	ip, #10
 802663c:	4621      	mov	r1, r4
 802663e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026642:	3b30      	subs	r3, #48	; 0x30
 8026644:	2b09      	cmp	r3, #9
 8026646:	d94e      	bls.n	80266e6 <_svfiprintf_r+0x17e>
 8026648:	b1b0      	cbz	r0, 8026678 <_svfiprintf_r+0x110>
 802664a:	9207      	str	r2, [sp, #28]
 802664c:	e014      	b.n	8026678 <_svfiprintf_r+0x110>
 802664e:	eba0 0308 	sub.w	r3, r0, r8
 8026652:	fa09 f303 	lsl.w	r3, r9, r3
 8026656:	4313      	orrs	r3, r2
 8026658:	9304      	str	r3, [sp, #16]
 802665a:	46a2      	mov	sl, r4
 802665c:	e7d2      	b.n	8026604 <_svfiprintf_r+0x9c>
 802665e:	9b03      	ldr	r3, [sp, #12]
 8026660:	1d19      	adds	r1, r3, #4
 8026662:	681b      	ldr	r3, [r3, #0]
 8026664:	9103      	str	r1, [sp, #12]
 8026666:	2b00      	cmp	r3, #0
 8026668:	bfbb      	ittet	lt
 802666a:	425b      	neglt	r3, r3
 802666c:	f042 0202 	orrlt.w	r2, r2, #2
 8026670:	9307      	strge	r3, [sp, #28]
 8026672:	9307      	strlt	r3, [sp, #28]
 8026674:	bfb8      	it	lt
 8026676:	9204      	strlt	r2, [sp, #16]
 8026678:	7823      	ldrb	r3, [r4, #0]
 802667a:	2b2e      	cmp	r3, #46	; 0x2e
 802667c:	d10c      	bne.n	8026698 <_svfiprintf_r+0x130>
 802667e:	7863      	ldrb	r3, [r4, #1]
 8026680:	2b2a      	cmp	r3, #42	; 0x2a
 8026682:	d135      	bne.n	80266f0 <_svfiprintf_r+0x188>
 8026684:	9b03      	ldr	r3, [sp, #12]
 8026686:	1d1a      	adds	r2, r3, #4
 8026688:	681b      	ldr	r3, [r3, #0]
 802668a:	9203      	str	r2, [sp, #12]
 802668c:	2b00      	cmp	r3, #0
 802668e:	bfb8      	it	lt
 8026690:	f04f 33ff 	movlt.w	r3, #4294967295
 8026694:	3402      	adds	r4, #2
 8026696:	9305      	str	r3, [sp, #20]
 8026698:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8026764 <_svfiprintf_r+0x1fc>
 802669c:	7821      	ldrb	r1, [r4, #0]
 802669e:	2203      	movs	r2, #3
 80266a0:	4650      	mov	r0, sl
 80266a2:	f7d9 fdd5 	bl	8000250 <memchr>
 80266a6:	b140      	cbz	r0, 80266ba <_svfiprintf_r+0x152>
 80266a8:	2340      	movs	r3, #64	; 0x40
 80266aa:	eba0 000a 	sub.w	r0, r0, sl
 80266ae:	fa03 f000 	lsl.w	r0, r3, r0
 80266b2:	9b04      	ldr	r3, [sp, #16]
 80266b4:	4303      	orrs	r3, r0
 80266b6:	3401      	adds	r4, #1
 80266b8:	9304      	str	r3, [sp, #16]
 80266ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80266be:	4826      	ldr	r0, [pc, #152]	; (8026758 <_svfiprintf_r+0x1f0>)
 80266c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80266c4:	2206      	movs	r2, #6
 80266c6:	f7d9 fdc3 	bl	8000250 <memchr>
 80266ca:	2800      	cmp	r0, #0
 80266cc:	d038      	beq.n	8026740 <_svfiprintf_r+0x1d8>
 80266ce:	4b23      	ldr	r3, [pc, #140]	; (802675c <_svfiprintf_r+0x1f4>)
 80266d0:	bb1b      	cbnz	r3, 802671a <_svfiprintf_r+0x1b2>
 80266d2:	9b03      	ldr	r3, [sp, #12]
 80266d4:	3307      	adds	r3, #7
 80266d6:	f023 0307 	bic.w	r3, r3, #7
 80266da:	3308      	adds	r3, #8
 80266dc:	9303      	str	r3, [sp, #12]
 80266de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80266e0:	4433      	add	r3, r6
 80266e2:	9309      	str	r3, [sp, #36]	; 0x24
 80266e4:	e767      	b.n	80265b6 <_svfiprintf_r+0x4e>
 80266e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80266ea:	460c      	mov	r4, r1
 80266ec:	2001      	movs	r0, #1
 80266ee:	e7a5      	b.n	802663c <_svfiprintf_r+0xd4>
 80266f0:	2300      	movs	r3, #0
 80266f2:	3401      	adds	r4, #1
 80266f4:	9305      	str	r3, [sp, #20]
 80266f6:	4619      	mov	r1, r3
 80266f8:	f04f 0c0a 	mov.w	ip, #10
 80266fc:	4620      	mov	r0, r4
 80266fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026702:	3a30      	subs	r2, #48	; 0x30
 8026704:	2a09      	cmp	r2, #9
 8026706:	d903      	bls.n	8026710 <_svfiprintf_r+0x1a8>
 8026708:	2b00      	cmp	r3, #0
 802670a:	d0c5      	beq.n	8026698 <_svfiprintf_r+0x130>
 802670c:	9105      	str	r1, [sp, #20]
 802670e:	e7c3      	b.n	8026698 <_svfiprintf_r+0x130>
 8026710:	fb0c 2101 	mla	r1, ip, r1, r2
 8026714:	4604      	mov	r4, r0
 8026716:	2301      	movs	r3, #1
 8026718:	e7f0      	b.n	80266fc <_svfiprintf_r+0x194>
 802671a:	ab03      	add	r3, sp, #12
 802671c:	9300      	str	r3, [sp, #0]
 802671e:	462a      	mov	r2, r5
 8026720:	4b0f      	ldr	r3, [pc, #60]	; (8026760 <_svfiprintf_r+0x1f8>)
 8026722:	a904      	add	r1, sp, #16
 8026724:	4638      	mov	r0, r7
 8026726:	f3af 8000 	nop.w
 802672a:	1c42      	adds	r2, r0, #1
 802672c:	4606      	mov	r6, r0
 802672e:	d1d6      	bne.n	80266de <_svfiprintf_r+0x176>
 8026730:	89ab      	ldrh	r3, [r5, #12]
 8026732:	065b      	lsls	r3, r3, #25
 8026734:	f53f af2c 	bmi.w	8026590 <_svfiprintf_r+0x28>
 8026738:	9809      	ldr	r0, [sp, #36]	; 0x24
 802673a:	b01d      	add	sp, #116	; 0x74
 802673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026740:	ab03      	add	r3, sp, #12
 8026742:	9300      	str	r3, [sp, #0]
 8026744:	462a      	mov	r2, r5
 8026746:	4b06      	ldr	r3, [pc, #24]	; (8026760 <_svfiprintf_r+0x1f8>)
 8026748:	a904      	add	r1, sp, #16
 802674a:	4638      	mov	r0, r7
 802674c:	f7ff f988 	bl	8025a60 <_printf_i>
 8026750:	e7eb      	b.n	802672a <_svfiprintf_r+0x1c2>
 8026752:	bf00      	nop
 8026754:	0802ab00 	.word	0x0802ab00
 8026758:	0802ab0a 	.word	0x0802ab0a
 802675c:	00000000 	.word	0x00000000
 8026760:	080264b1 	.word	0x080264b1
 8026764:	0802ab06 	.word	0x0802ab06

08026768 <__sread>:
 8026768:	b510      	push	{r4, lr}
 802676a:	460c      	mov	r4, r1
 802676c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026770:	f000 f89c 	bl	80268ac <_read_r>
 8026774:	2800      	cmp	r0, #0
 8026776:	bfab      	itete	ge
 8026778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802677a:	89a3      	ldrhlt	r3, [r4, #12]
 802677c:	181b      	addge	r3, r3, r0
 802677e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026782:	bfac      	ite	ge
 8026784:	6563      	strge	r3, [r4, #84]	; 0x54
 8026786:	81a3      	strhlt	r3, [r4, #12]
 8026788:	bd10      	pop	{r4, pc}

0802678a <__swrite>:
 802678a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802678e:	461f      	mov	r7, r3
 8026790:	898b      	ldrh	r3, [r1, #12]
 8026792:	05db      	lsls	r3, r3, #23
 8026794:	4605      	mov	r5, r0
 8026796:	460c      	mov	r4, r1
 8026798:	4616      	mov	r6, r2
 802679a:	d505      	bpl.n	80267a8 <__swrite+0x1e>
 802679c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267a0:	2302      	movs	r3, #2
 80267a2:	2200      	movs	r2, #0
 80267a4:	f000 f868 	bl	8026878 <_lseek_r>
 80267a8:	89a3      	ldrh	r3, [r4, #12]
 80267aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80267ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80267b2:	81a3      	strh	r3, [r4, #12]
 80267b4:	4632      	mov	r2, r6
 80267b6:	463b      	mov	r3, r7
 80267b8:	4628      	mov	r0, r5
 80267ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80267be:	f000 b817 	b.w	80267f0 <_write_r>

080267c2 <__sseek>:
 80267c2:	b510      	push	{r4, lr}
 80267c4:	460c      	mov	r4, r1
 80267c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267ca:	f000 f855 	bl	8026878 <_lseek_r>
 80267ce:	1c43      	adds	r3, r0, #1
 80267d0:	89a3      	ldrh	r3, [r4, #12]
 80267d2:	bf15      	itete	ne
 80267d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80267d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80267da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80267de:	81a3      	strheq	r3, [r4, #12]
 80267e0:	bf18      	it	ne
 80267e2:	81a3      	strhne	r3, [r4, #12]
 80267e4:	bd10      	pop	{r4, pc}

080267e6 <__sclose>:
 80267e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267ea:	f000 b813 	b.w	8026814 <_close_r>
	...

080267f0 <_write_r>:
 80267f0:	b538      	push	{r3, r4, r5, lr}
 80267f2:	4d07      	ldr	r5, [pc, #28]	; (8026810 <_write_r+0x20>)
 80267f4:	4604      	mov	r4, r0
 80267f6:	4608      	mov	r0, r1
 80267f8:	4611      	mov	r1, r2
 80267fa:	2200      	movs	r2, #0
 80267fc:	602a      	str	r2, [r5, #0]
 80267fe:	461a      	mov	r2, r3
 8026800:	f7db fded 	bl	80023de <_write>
 8026804:	1c43      	adds	r3, r0, #1
 8026806:	d102      	bne.n	802680e <_write_r+0x1e>
 8026808:	682b      	ldr	r3, [r5, #0]
 802680a:	b103      	cbz	r3, 802680e <_write_r+0x1e>
 802680c:	6023      	str	r3, [r4, #0]
 802680e:	bd38      	pop	{r3, r4, r5, pc}
 8026810:	20056f60 	.word	0x20056f60

08026814 <_close_r>:
 8026814:	b538      	push	{r3, r4, r5, lr}
 8026816:	4d06      	ldr	r5, [pc, #24]	; (8026830 <_close_r+0x1c>)
 8026818:	2300      	movs	r3, #0
 802681a:	4604      	mov	r4, r0
 802681c:	4608      	mov	r0, r1
 802681e:	602b      	str	r3, [r5, #0]
 8026820:	f7db fdf9 	bl	8002416 <_close>
 8026824:	1c43      	adds	r3, r0, #1
 8026826:	d102      	bne.n	802682e <_close_r+0x1a>
 8026828:	682b      	ldr	r3, [r5, #0]
 802682a:	b103      	cbz	r3, 802682e <_close_r+0x1a>
 802682c:	6023      	str	r3, [r4, #0]
 802682e:	bd38      	pop	{r3, r4, r5, pc}
 8026830:	20056f60 	.word	0x20056f60

08026834 <_fstat_r>:
 8026834:	b538      	push	{r3, r4, r5, lr}
 8026836:	4d07      	ldr	r5, [pc, #28]	; (8026854 <_fstat_r+0x20>)
 8026838:	2300      	movs	r3, #0
 802683a:	4604      	mov	r4, r0
 802683c:	4608      	mov	r0, r1
 802683e:	4611      	mov	r1, r2
 8026840:	602b      	str	r3, [r5, #0]
 8026842:	f7db fdf4 	bl	800242e <_fstat>
 8026846:	1c43      	adds	r3, r0, #1
 8026848:	d102      	bne.n	8026850 <_fstat_r+0x1c>
 802684a:	682b      	ldr	r3, [r5, #0]
 802684c:	b103      	cbz	r3, 8026850 <_fstat_r+0x1c>
 802684e:	6023      	str	r3, [r4, #0]
 8026850:	bd38      	pop	{r3, r4, r5, pc}
 8026852:	bf00      	nop
 8026854:	20056f60 	.word	0x20056f60

08026858 <_isatty_r>:
 8026858:	b538      	push	{r3, r4, r5, lr}
 802685a:	4d06      	ldr	r5, [pc, #24]	; (8026874 <_isatty_r+0x1c>)
 802685c:	2300      	movs	r3, #0
 802685e:	4604      	mov	r4, r0
 8026860:	4608      	mov	r0, r1
 8026862:	602b      	str	r3, [r5, #0]
 8026864:	f7db fdf3 	bl	800244e <_isatty>
 8026868:	1c43      	adds	r3, r0, #1
 802686a:	d102      	bne.n	8026872 <_isatty_r+0x1a>
 802686c:	682b      	ldr	r3, [r5, #0]
 802686e:	b103      	cbz	r3, 8026872 <_isatty_r+0x1a>
 8026870:	6023      	str	r3, [r4, #0]
 8026872:	bd38      	pop	{r3, r4, r5, pc}
 8026874:	20056f60 	.word	0x20056f60

08026878 <_lseek_r>:
 8026878:	b538      	push	{r3, r4, r5, lr}
 802687a:	4d07      	ldr	r5, [pc, #28]	; (8026898 <_lseek_r+0x20>)
 802687c:	4604      	mov	r4, r0
 802687e:	4608      	mov	r0, r1
 8026880:	4611      	mov	r1, r2
 8026882:	2200      	movs	r2, #0
 8026884:	602a      	str	r2, [r5, #0]
 8026886:	461a      	mov	r2, r3
 8026888:	f7db fdec 	bl	8002464 <_lseek>
 802688c:	1c43      	adds	r3, r0, #1
 802688e:	d102      	bne.n	8026896 <_lseek_r+0x1e>
 8026890:	682b      	ldr	r3, [r5, #0]
 8026892:	b103      	cbz	r3, 8026896 <_lseek_r+0x1e>
 8026894:	6023      	str	r3, [r4, #0]
 8026896:	bd38      	pop	{r3, r4, r5, pc}
 8026898:	20056f60 	.word	0x20056f60

0802689c <_malloc_usable_size_r>:
 802689c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80268a0:	1f18      	subs	r0, r3, #4
 80268a2:	2b00      	cmp	r3, #0
 80268a4:	bfbc      	itt	lt
 80268a6:	580b      	ldrlt	r3, [r1, r0]
 80268a8:	18c0      	addlt	r0, r0, r3
 80268aa:	4770      	bx	lr

080268ac <_read_r>:
 80268ac:	b538      	push	{r3, r4, r5, lr}
 80268ae:	4d07      	ldr	r5, [pc, #28]	; (80268cc <_read_r+0x20>)
 80268b0:	4604      	mov	r4, r0
 80268b2:	4608      	mov	r0, r1
 80268b4:	4611      	mov	r1, r2
 80268b6:	2200      	movs	r2, #0
 80268b8:	602a      	str	r2, [r5, #0]
 80268ba:	461a      	mov	r2, r3
 80268bc:	f7db fd72 	bl	80023a4 <_read>
 80268c0:	1c43      	adds	r3, r0, #1
 80268c2:	d102      	bne.n	80268ca <_read_r+0x1e>
 80268c4:	682b      	ldr	r3, [r5, #0]
 80268c6:	b103      	cbz	r3, 80268ca <_read_r+0x1e>
 80268c8:	6023      	str	r3, [r4, #0]
 80268ca:	bd38      	pop	{r3, r4, r5, pc}
 80268cc:	20056f60 	.word	0x20056f60

080268d0 <_init>:
 80268d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80268d2:	bf00      	nop
 80268d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80268d6:	bc08      	pop	{r3}
 80268d8:	469e      	mov	lr, r3
 80268da:	4770      	bx	lr

080268dc <_fini>:
 80268dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80268de:	bf00      	nop
 80268e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80268e2:	bc08      	pop	{r3}
 80268e4:	469e      	mov	lr, r3
 80268e6:	4770      	bx	lr
