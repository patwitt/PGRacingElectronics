
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a4c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046cc  0802a6c8  0802a6c8  0003a6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a9b16  0802ed94  0802ed94  0003ed94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000f8  080d88ac  080d88ac  000e88ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000c4  080d89a4  080d89a4  000e89a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080d8a68  080d8a68  001898c8  2**0
                  CONTENTS
  7 .ARM          00000008  080d8a68  080d8a68  000e8a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080d8a70  080d8a70  001898c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000030  080d8a70  080d8a70  000e8a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080d8aa0  080d8aa0  000e8aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000254  20000000  080d8aa8  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00056eb0  20000254  080d8cfc  000f0254  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20057104  080d8cfc  000f7104  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  001898c8  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 000898c8  90000000  90000000  00100000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000d8353  00000000  00000000  001898f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017458  00000000  00000000  00261c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003fc0  00000000  00000000  002790a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000039a0  00000000  00000000  0027d068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00039e56  00000000  00000000  00280a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004e06c  00000000  00000000  002ba85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012f295  00000000  00000000  003088ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  00437b5f  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00011b58  00000000  00000000  00437c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000254 	.word	0x20000254
 800021c:	00000000 	.word	0x00000000
 8000220:	0802a6ac 	.word	0x0802a6ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000258 	.word	0x20000258
 800023c:	0802a6ac 	.word	0x0802a6ac

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <HAL_TIM_PWM_PulseFinishedCallback>:
#define LED_N			15

volatile uint16_t leds[RESET_LEN + 24 * LED_N];

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f00f fa3c 	bl	800fe58 <HAL_TIM_PWM_Stop_DMA>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <WS2812_Init>:

void WS2812_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24 * LED_N; i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	e007      	b.n	8000a04 <WS2812_Init+0x1c>
		leds[i] = BIT_0_TIME;
 80009f4:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <WS2812_Init+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	212b      	movs	r1, #43	; 0x2b
 80009fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 24 * LED_N; i++)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3301      	adds	r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000a0a:	dbf3      	blt.n	80009f4 <WS2812_Init+0xc>

	for (int i = 0; i < RESET_LEN; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	e009      	b.n	8000a26 <WS2812_Init+0x3e>
		leds[i + LED_N * 24] = 0;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <WS2812_Init+0x5c>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < RESET_LEN; i++)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	2b27      	cmp	r3, #39	; 0x27
 8000a2a:	ddf2      	ble.n	8000a12 <WS2812_Init+0x2a>

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,	RESET_LEN + 24 * LED_N);
 8000a2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <WS2812_Init+0x5c>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <WS2812_Init+0x60>)
 8000a36:	f00f f803 	bl	800fa40 <HAL_TIM_PWM_Start_DMA>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20056994 	.word	0x20056994
 8000a48:	20056fa4 	.word	0x20056fa4

08000a4c <setLed>:

void setLed(uint8_t ledNumber, uint8_t red, uint8_t green, uint8_t blue)
{
 8000a4c:	b490      	push	{r4, r7}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4604      	mov	r4, r0
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4623      	mov	r3, r4
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71bb      	strb	r3, [r7, #6]
 8000a62:	460b      	mov	r3, r1
 8000a64:	717b      	strb	r3, [r7, #5]
 8000a66:	4613      	mov	r3, r2
 8000a68:	713b      	strb	r3, [r7, #4]
	const uint8_t lookUpTable[8] = {1,2,4,8,16,32,64,128};
 8000a6a:	4a2a      	ldr	r2, [pc, #168]	; (8000b14 <setLed+0xc8>)
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a74:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t ledId = 24 * ledNumber;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	0052      	lsls	r2, r2, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	e03a      	b.n	8000b02 <setLed+0xb6>
	{
		leds[ledId] = red & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000a8c:	f107 0208 	add.w	r2, r7, #8
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4413      	add	r3, r2
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	79bb      	ldrb	r3, [r7, #6]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <setLed+0x58>
 8000aa0:	2156      	movs	r1, #86	; 0x56
 8000aa2:	e000      	b.n	8000aa6 <setLed+0x5a>
 8000aa4:	212b      	movs	r1, #43	; 0x2b
 8000aa6:	8afb      	ldrh	r3, [r7, #22]
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <setLed+0xcc>)
 8000aaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId+8] = green & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000aae:	f107 0208 	add.w	r2, r7, #8
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	797b      	ldrb	r3, [r7, #5]
 8000aba:	4013      	ands	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <setLed+0x7a>
 8000ac2:	2156      	movs	r1, #86	; 0x56
 8000ac4:	e000      	b.n	8000ac8 <setLed+0x7c>
 8000ac6:	212b      	movs	r1, #43	; 0x2b
 8000ac8:	8afb      	ldrh	r3, [r7, #22]
 8000aca:	3308      	adds	r3, #8
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <setLed+0xcc>)
 8000ace:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId+16] = blue & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000ad2:	f107 0208 	add.w	r2, r7, #8
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	793b      	ldrb	r3, [r7, #4]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <setLed+0x9e>
 8000ae6:	2156      	movs	r1, #86	; 0x56
 8000ae8:	e000      	b.n	8000aec <setLed+0xa0>
 8000aea:	212b      	movs	r1, #43	; 0x2b
 8000aec:	8afb      	ldrh	r3, [r7, #22]
 8000aee:	3310      	adds	r3, #16
 8000af0:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <setLed+0xcc>)
 8000af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ledId++;
 8000af6:	8afb      	ldrh	r3, [r7, #22]
 8000af8:	3301      	adds	r3, #1
 8000afa:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	3301      	adds	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	2b07      	cmp	r3, #7
 8000b06:	ddc1      	ble.n	8000a8c <setLed+0x40>
	}
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc90      	pop	{r4, r7}
 8000b12:	4770      	bx	lr
 8000b14:	0802a6c8 	.word	0x0802a6c8
 8000b18:	20056994 	.word	0x20056994

08000b1c <updateLeds>:

void updateLeds(int rpm, int mode)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
	uint16_t minRPM = 8000;
 8000b26:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000b2a:	83fb      	strh	r3, [r7, #30]
	uint16_t maxRPM = 11500;
 8000b2c:	f642 43ec 	movw	r3, #11500	; 0x2cec
 8000b30:	83bb      	strh	r3, [r7, #28]
	if(mode == 1)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d105      	bne.n	8000b44 <updateLeds+0x28>
	{
		minRPM = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	83fb      	strh	r3, [r7, #30]
		maxRPM = 12000;
 8000b3c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000b40:	83bb      	strh	r3, [r7, #28]
 8000b42:	e005      	b.n	8000b50 <updateLeds+0x34>
	}
	else
	{
		minRPM = 8500;
 8000b44:	f242 1334 	movw	r3, #8500	; 0x2134
 8000b48:	83fb      	strh	r3, [r7, #30]
		maxRPM = 11500;
 8000b4a:	f642 43ec 	movw	r3, #11500	; 0x2cec
 8000b4e:	83bb      	strh	r3, [r7, #28]
	}

	int8_t activeLeds = ceil((float)(rpm - minRPM) / (float)(maxRPM - minRPM) * LED_N);
 8000b50:	8bfb      	ldrh	r3, [r7, #30]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	ee07 3a90 	vmov	s15, r3
 8000b5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b5e:	8bba      	ldrh	r2, [r7, #28]
 8000b60:	8bfb      	ldrh	r3, [r7, #30]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	ee07 3a90 	vmov	s15, r3
 8000b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b70:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b80:	f025 f892 	bl	8025ca8 <ceil>
 8000b84:	eeb0 7b40 	vmov.f64	d7, d0
 8000b88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b8c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b90:	793b      	ldrb	r3, [r7, #4]
 8000b92:	74fb      	strb	r3, [r7, #19]
	for (int i = 0; i < LED_N; i++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	e044      	b.n	8000c24 <updateLeds+0x108>
	{
		if (i < activeLeds)
 8000b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	da35      	bge.n	8000c10 <updateLeds+0xf4>
		{
			if (i < 5)
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	dc08      	bgt.n	8000bbc <updateLeds+0xa0>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	b2d8      	uxtb	r0, r3
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <updateLeds+0x124>)
 8000bb0:	7899      	ldrb	r1, [r3, #2]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f7ff ff49 	bl	8000a4c <setLed>
 8000bba:	e030      	b.n	8000c1e <updateLeds+0x102>
			}
			else if (i < 10)
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	dc08      	bgt.n	8000bd4 <updateLeds+0xb8>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	b2d8      	uxtb	r0, r3
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <updateLeds+0x124>)
 8000bc8:	78da      	ldrb	r2, [r3, #3]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f7ff ff3d 	bl	8000a4c <setLed>
 8000bd2:	e024      	b.n	8000c1e <updateLeds+0x102>
			}
			else
			{
				if (mode == 3)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d111      	bne.n	8000bfe <updateLeds+0xe2>
				{
					for (int j = i; j < LED_N; j++)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e00a      	b.n	8000bf6 <updateLeds+0xda>
					{
						setLed(j, 0, 0, displaySetup.blueLedBrightness);
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	b2d8      	uxtb	r0, r3
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <updateLeds+0x124>)
 8000be6:	791b      	ldrb	r3, [r3, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	f7ff ff2e 	bl	8000a4c <setLed>
					for (int j = i; j < LED_N; j++)
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2b0e      	cmp	r3, #14
 8000bfa:	ddf1      	ble.n	8000be0 <updateLeds+0xc4>
					}
					break;
 8000bfc:	e015      	b.n	8000c2a <updateLeds+0x10e>
				}
				else
				{
					setLed(i,0,0,displaySetup.blueLedBrightness);
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	b2d8      	uxtb	r0, r3
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <updateLeds+0x124>)
 8000c04:	791b      	ldrb	r3, [r3, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f7ff ff1f 	bl	8000a4c <setLed>
 8000c0e:	e006      	b.n	8000c1e <updateLeds+0x102>
				}
			}
		}
		else
		{
			setLed(i,0,0,0);
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	b2d8      	uxtb	r0, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	f7ff ff17 	bl	8000a4c <setLed>
	for (int i = 0; i < LED_N; i++)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	3301      	adds	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2b0e      	cmp	r3, #14
 8000c28:	ddb7      	ble.n	8000b9a <updateLeds+0x7e>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)leds, RESET_LEN + 24 * LED_N);
 8000c2a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <updateLeds+0x128>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <updateLeds+0x12c>)
 8000c34:	f00e ff04 	bl	800fa40 <HAL_TIM_PWM_Start_DMA>
}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20056994 	.word	0x20056994
 8000c48:	20056fa4 	.word	0x20056fa4

08000c4c <Lerp>:

float Lerp(float A, float B, float Alpha)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	ed87 0a03 	vstr	s0, [r7, #12]
 8000c56:	edc7 0a02 	vstr	s1, [r7, #8]
 8000c5a:	ed87 1a01 	vstr	s2, [r7, #4]
	return A + Alpha * (B - A);
 8000c5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c76:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <ComputeOptimalPoints>:
void ComputeOptimalPoints()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af00      	add	r7, sp, #0
	// Calculation based on https://glennmessersmith.com/shiftpt.html
	const uint16_t MinRPM = 3000;
 8000c8e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c92:	83fb      	strh	r3, [r7, #30]
	const uint16_t MaxRPM = 12000;
 8000c94:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000c98:	83bb      	strh	r3, [r7, #28]
	uint16_t UpRPM;// DownRPM;
#ifdef MY_OPTIMAL_SHIFT_IMPLEMENTATION
	for (int i = 0; i < GEAR_NUMBER- 1; i++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c9e:	e0fc      	b.n	8000e9a <ComputeOptimalPoints+0x212>
	{
		float MinTorqueLoss = MAX_ENGINE_TORQUE *  GearRatios[i];
 8000ca0:	4a85      	ldr	r2, [pc, #532]	; (8000eb8 <ComputeOptimalPoints+0x230>)
 8000ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8000ebc <ComputeOptimalPoints+0x234>
 8000cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float CurrentGearRatio = GearRatios[i];
 8000cb8:	4a7f      	ldr	r2, [pc, #508]	; (8000eb8 <ComputeOptimalPoints+0x230>)
 8000cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	61bb      	str	r3, [r7, #24]
		float NextGearRatio = GearRatios[i + 1];
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4a7b      	ldr	r2, [pc, #492]	; (8000eb8 <ComputeOptimalPoints+0x230>)
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	617b      	str	r3, [r7, #20]
		UpRPM = MinRPM;
 8000cd2:	8bfb      	ldrh	r3, [r7, #30]
 8000cd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (int j = MinRPM; j < MaxRPM; j += 50)
 8000cd6:	8bfb      	ldrh	r3, [r7, #30]
 8000cd8:	623b      	str	r3, [r7, #32]
 8000cda:	e0d1      	b.n	8000e80 <ComputeOptimalPoints+0x1f8>
		{
			float EngineTorque = Lerp(torque[(j-3000)/1000],torque[(j-2000)/1000], (j%1000)/1000.0f);
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000ce2:	4a77      	ldr	r2, [pc, #476]	; (8000ec0 <ComputeOptimalPoints+0x238>)
 8000ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce8:	1192      	asrs	r2, r2, #6
 8000cea:	17db      	asrs	r3, r3, #31
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	4a75      	ldr	r2, [pc, #468]	; (8000ec4 <ComputeOptimalPoints+0x23c>)
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cfa:	6a3b      	ldr	r3, [r7, #32]
 8000cfc:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d00:	4a6f      	ldr	r2, [pc, #444]	; (8000ec0 <ComputeOptimalPoints+0x238>)
 8000d02:	fb82 1203 	smull	r1, r2, r2, r3
 8000d06:	1192      	asrs	r2, r2, #6
 8000d08:	17db      	asrs	r3, r3, #31
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	4a6d      	ldr	r2, [pc, #436]	; (8000ec4 <ComputeOptimalPoints+0x23c>)
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	4a69      	ldr	r2, [pc, #420]	; (8000ec0 <ComputeOptimalPoints+0x238>)
 8000d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d20:	1191      	asrs	r1, r2, #6
 8000d22:	17da      	asrs	r2, r3, #31
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d2a:	fb01 f202 	mul.w	r2, r1, r2
 8000d2e:	1a9a      	subs	r2, r3, r2
 8000d30:	ee07 2a90 	vmov	s15, r2
 8000d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d38:	eddf 5a63 	vldr	s11, [pc, #396]	; 8000ec8 <ComputeOptimalPoints+0x240>
 8000d3c:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000d40:	eeb0 1a46 	vmov.f32	s2, s12
 8000d44:	eef0 0a66 	vmov.f32	s1, s13
 8000d48:	eeb0 0a47 	vmov.f32	s0, s14
 8000d4c:	f7ff ff7e 	bl	8000c4c <Lerp>
 8000d50:	ed87 0a04 	vstr	s0, [r7, #16]
			// calculate current torque on gearbox output
			float CurrentGearTorque = EngineTorque * CurrentGearRatio;
 8000d54:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d58:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d60:	edc7 7a03 	vstr	s15, [r7, #12]
			// calculate engine RPM on next gear
			uint16_t NextRPM = NextGearRatio * j / CurrentGearRatio;
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d76:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d82:	ee17 3a90 	vmov	r3, s15
 8000d86:	817b      	strh	r3, [r7, #10]
			if (NextRPM < MinRPM)
 8000d88:	897a      	ldrh	r2, [r7, #10]
 8000d8a:	8bfb      	ldrh	r3, [r7, #30]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d373      	bcc.n	8000e78 <ComputeOptimalPoints+0x1f0>
			{
				continue;
			}
			float NextGearEngineTorque = Lerp(torque[(NextRPM-3000)/1000],torque[(NextRPM-2000)/1000], (NextRPM%1000)/1000.0f);
 8000d90:	897b      	ldrh	r3, [r7, #10]
 8000d92:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000d96:	4a4a      	ldr	r2, [pc, #296]	; (8000ec0 <ComputeOptimalPoints+0x238>)
 8000d98:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9c:	1192      	asrs	r2, r2, #6
 8000d9e:	17db      	asrs	r3, r3, #31
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <ComputeOptimalPoints+0x23c>)
 8000da4:	5cd3      	ldrb	r3, [r2, r3]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dae:	897b      	ldrh	r3, [r7, #10]
 8000db0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000db4:	4a42      	ldr	r2, [pc, #264]	; (8000ec0 <ComputeOptimalPoints+0x238>)
 8000db6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dba:	1192      	asrs	r2, r2, #6
 8000dbc:	17db      	asrs	r3, r3, #31
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <ComputeOptimalPoints+0x23c>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000dcc:	897b      	ldrh	r3, [r7, #10]
 8000dce:	4a3c      	ldr	r2, [pc, #240]	; (8000ec0 <ComputeOptimalPoints+0x238>)
 8000dd0:	fba2 1203 	umull	r1, r2, r2, r3
 8000dd4:	0992      	lsrs	r2, r2, #6
 8000dd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dda:	fb01 f202 	mul.w	r2, r1, r2
 8000dde:	1a9b      	subs	r3, r3, r2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dea:	eddf 5a37 	vldr	s11, [pc, #220]	; 8000ec8 <ComputeOptimalPoints+0x240>
 8000dee:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000df2:	eeb0 1a46 	vmov.f32	s2, s12
 8000df6:	eef0 0a66 	vmov.f32	s1, s13
 8000dfa:	eeb0 0a47 	vmov.f32	s0, s14
 8000dfe:	f7ff ff25 	bl	8000c4c <Lerp>
 8000e02:	ed87 0a01 	vstr	s0, [r7, #4]
			// calculate torque on gearbox outpur on next gear
			float NextGearTorque = NextGearEngineTorque * NextGearRatio;
 8000e06:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e12:	edc7 7a00 	vstr	s15, [r7]

			if (CurrentGearTorque - NextGearTorque < MinTorqueLoss && CurrentGearTorque - NextGearTorque >= -0.01* MAX_ENGINE_TORQUE *  GearRatios[i])
 8000e16:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e1a:	edd7 7a00 	vldr	s15, [r7]
 8000e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2e:	dd24      	ble.n	8000e7a <ComputeOptimalPoints+0x1f2>
 8000e30:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e34:	edd7 7a00 	vldr	s15, [r7]
 8000e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <ComputeOptimalPoints+0x230>)
 8000e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e50:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8000eb0 <ComputeOptimalPoints+0x228>
 8000e54:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e60:	db0b      	blt.n	8000e7a <ComputeOptimalPoints+0x1f2>
			{
				UpRPM = j;
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	85fb      	strh	r3, [r7, #46]	; 0x2e
				//DownRPM = NextRPM;
				MinTorqueLoss = CurrentGearTorque - NextGearTorque;
 8000e66:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e6a:	edd7 7a00 	vldr	s15, [r7]
 8000e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8000e76:	e000      	b.n	8000e7a <ComputeOptimalPoints+0x1f2>
				continue;
 8000e78:	bf00      	nop
		for (int j = MinRPM; j < MaxRPM; j += 50)
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	3332      	adds	r3, #50	; 0x32
 8000e7e:	623b      	str	r3, [r7, #32]
 8000e80:	8bbb      	ldrh	r3, [r7, #28]
 8000e82:	6a3a      	ldr	r2, [r7, #32]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	f6ff af29 	blt.w	8000cdc <ComputeOptimalPoints+0x54>
			}
		}
		OptimalShiftUpRPM[i]=UpRPM;
 8000e8a:	4910      	ldr	r1, [pc, #64]	; (8000ecc <ComputeOptimalPoints+0x244>)
 8000e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < GEAR_NUMBER- 1; i++)
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	3301      	adds	r3, #1
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	f77f aeff 	ble.w	8000ca0 <ComputeOptimalPoints+0x18>
			}
			OptimalShiftUpRPM[i]=UpRPM;
			//OptimalGearDownRPM.Add(DownRPM);
		}
#endif
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3730      	adds	r7, #48	; 0x30
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	f3af 8000 	nop.w
 8000eb0:	66666667 	.word	0x66666667
 8000eb4:	bfe66666 	.word	0xbfe66666
 8000eb8:	0802b31c 	.word	0x0802b31c
 8000ebc:	428c0000 	.word	0x428c0000
 8000ec0:	10624dd3 	.word	0x10624dd3
 8000ec4:	0802b334 	.word	0x0802b334
 8000ec8:	447a0000 	.word	0x447a0000
 8000ecc:	20056cb4 	.word	0x20056cb4

08000ed0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <MX_ADC1_Init+0xa0>)
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f32:	f009 fb0d 	bl	800a550 <HAL_ADC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f001 fc3a 	bl	80027b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f40:	230b      	movs	r3, #11
 8000f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f52:	f009 fca7 	bl	800a8a4 <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f5c:	f001 fc2a 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20056cc0 	.word	0x20056cc0
 8000f6c:	40012000 	.word	0x40012000
 8000f70:	0f000001 	.word	0x0f000001

08000f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <HAL_ADC_MspInit+0x74>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d123      	bne.n	8000fde <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_ADC_MspInit+0x78>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_ADC_MspInit+0x78>)
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_ADC_MspInit+0x78>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_ADC_MspInit+0x78>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_ADC_MspInit+0x78>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_ADC_MspInit+0x78>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_ADC_MspInit+0x7c>)
 8000fda:	f00b fbdb 	bl	800c794 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012000 	.word	0x40012000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020800 	.word	0x40020800

08000ff4 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <FLASH_QSPI_Init+0x70>)
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <FLASH_QSPI_Init+0x74>)
 8000ffc:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000ffe:	4819      	ldr	r0, [pc, #100]	; (8001064 <FLASH_QSPI_Init+0x70>)
 8001000:	f00c fb18 	bl	800d634 <HAL_QSPI_DeInit>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e028      	b.n	8001060 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 800100e:	f001 fbd7 	bl	80027c0 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8001012:	f000 f82b 	bl	800106c <FLASH_QSPI_ResetChip>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e01f      	b.n	8001060 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f009 fa71 	bl	800a508 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 8001026:	f000 f87f 	bl	8001128 <FLASH_QSPI_AutoPollingMemReady>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e015      	b.n	8001060 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8001034:	f000 f8b0 	bl	8001198 <FLASH_QSPI_WriteEnable>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 8001042:	f000 f8f3 	bl	800122c <FLASH_QSPI_Configuration>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e007      	b.n	8001060 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8001050:	f000 f962 	bl	8001318 <FLASH_QSPI_EnableMemoryMappedMode>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20056ec0 	.word	0x20056ec0
 8001068:	a0001000 	.word	0xa0001000

0800106c <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	; 0x40
 8001070:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 8001076:	2366      	movs	r3, #102	; 0x66
 8001078:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800107a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001084:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001092:	2300      	movs	r3, #0
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ac:	4619      	mov	r1, r3
 80010ae:	481d      	ldr	r0, [pc, #116]	; (8001124 <FLASH_QSPI_ResetChip+0xb8>)
 80010b0:	f00c fc9e 	bl	800d9f0 <HAL_QSPI_Command>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e02e      	b.n	800111c <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010c2:	e003      	b.n	80010cc <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 80010c4:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 80010c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010c8:	3301      	adds	r3, #1
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ce:	2b2e      	cmp	r3, #46	; 0x2e
 80010d0:	d9f8      	bls.n	80010c4 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 80010d2:	2399      	movs	r3, #153	; 0x99
 80010d4:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010da:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010ee:	2300      	movs	r3, #0
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <FLASH_QSPI_ResetChip+0xb8>)
 800110c:	f00c fc70 	bl	800d9f0 <HAL_QSPI_Command>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3740      	adds	r7, #64	; 0x40
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20056ec0 	.word	0x20056ec0

08001128 <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 800112e:	2305      	movs	r3, #5
 8001130:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001144:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800114e:	2300      	movs	r3, #0
 8001150:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001152:	2300      	movs	r3, #0
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 800115a:	2301      	movs	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8001166:	2310      	movs	r3, #16
 8001168:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800116a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800116e:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001170:	463a      	mov	r2, r7
 8001172:	f107 0118 	add.w	r1, r7, #24
 8001176:	f241 3388 	movw	r3, #5000	; 0x1388
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 800117c:	f00c fdc5 	bl	800dd0a <HAL_QSPI_AutoPolling>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3750      	adds	r7, #80	; 0x50
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20056ec0 	.word	0x20056ec0

08001198 <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 800119e:	2306      	movs	r3, #6
 80011a0:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011bc:	2300      	movs	r3, #0
 80011be:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011c0:	2300      	movs	r3, #0
 80011c2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4619      	mov	r1, r3
 80011ce:	4816      	ldr	r0, [pc, #88]	; (8001228 <FLASH_QSPI_WriteEnable+0x90>)
 80011d0:	f00c fc0e 	bl	800d9f0 <HAL_QSPI_Command>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e01f      	b.n	800121e <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 80011de:	2302      	movs	r3, #2
 80011e0:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 80011e2:	2302      	movs	r3, #2
 80011e4:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80011ee:	2310      	movs	r3, #16
 80011f0:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80011f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011f6:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 80011f8:	2305      	movs	r3, #5
 80011fa:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80011fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001202:	463a      	mov	r2, r7
 8001204:	f107 0118 	add.w	r1, r7, #24
 8001208:	f241 3388 	movw	r3, #5000	; 0x1388
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <FLASH_QSPI_WriteEnable+0x90>)
 800120e:	f00c fd7c 	bl	800dd0a <HAL_QSPI_AutoPolling>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3750      	adds	r7, #80	; 0x50
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20056ec0 	.word	0x20056ec0

0800122c <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	; 0x40
 8001230:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8001232:	2335      	movs	r3, #53	; 0x35
 8001234:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123a:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001252:	2300      	movs	r3, #0
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001256:	2300      	movs	r3, #0
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 800125a:	2301      	movs	r3, #1
 800125c:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	f241 3288 	movw	r2, #5000	; 0x1388
 8001266:	4619      	mov	r1, r3
 8001268:	482a      	ldr	r0, [pc, #168]	; (8001314 <FLASH_QSPI_Configuration+0xe8>)
 800126a:	f00c fbc1 	bl	800d9f0 <HAL_QSPI_Command>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e049      	b.n	800130c <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4619      	mov	r1, r3
 8001280:	4824      	ldr	r0, [pc, #144]	; (8001314 <FLASH_QSPI_Configuration+0xe8>)
 8001282:	f00c fca5 	bl	800dbd0 <HAL_QSPI_Receive>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e03d      	b.n	800130c <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8001290:	f7ff ff82 	bl	8001198 <FLASH_QSPI_WriteEnable>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e036      	b.n	800130c <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 80012a8:	2331      	movs	r3, #49	; 0x31
 80012aa:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80012ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b0:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80012ba:	2300      	movs	r3, #0
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80012be:	2300      	movs	r3, #0
 80012c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80012c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <FLASH_QSPI_Configuration+0xe8>)
 80012e0:	f00c fb86 	bl	800d9f0 <HAL_QSPI_Command>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <FLASH_QSPI_Configuration+0xe8>)
 80012f8:	f00c fbd8 	bl	800daac <HAL_QSPI_Transmit>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8001302:	f001 fa57 	bl	80027b4 <Error_Handler>
		return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3740      	adds	r7, #64	; 0x40
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20056ec0 	.word	0x20056ec0

08001318 <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b090      	sub	sp, #64	; 0x40
 800131c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 800131e:	23eb      	movs	r3, #235	; 0xeb
 8001320:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001326:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8001328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132c:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 800132e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001340:	2300      	movs	r3, #0
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001344:	2300      	movs	r3, #0
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8001348:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 800134e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 800135c:	2304      	movs	r3, #4
 800135e:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 8001364:	463a      	mov	r2, r7
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	4619      	mov	r1, r3
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 800136e:	f00c fd43 	bl	800ddf8 <HAL_QSPI_MemoryMapped>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3740      	adds	r7, #64	; 0x40
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20056ec0 	.word	0x20056ec0

0800138c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <MX_CAN1_Init+0x9c>)
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <MX_CAN1_Init+0xa0>)
 8001396:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 9;
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <MX_CAN1_Init+0x9c>)
 800139a:	2209      	movs	r2, #9
 800139c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013b0:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013b8:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013de:	4812      	ldr	r0, [pc, #72]	; (8001428 <MX_CAN1_Init+0x9c>)
 80013e0:	f009 fca4 	bl	800ad2c <HAL_CAN_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_CAN1_Init+0x62>
	{
		Error_Handler();
 80013ea:	f001 f9e3 	bl	80027b4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013ee:	2301      	movs	r3, #1
 80013f0:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 8; // which filter bank to use from the assigned ones
 80013f2:	2308      	movs	r3, #8
 80013f4:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800140e:	2301      	movs	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8001412:	230a      	movs	r3, #10
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001416:	463b      	mov	r3, r7
 8001418:	4619      	mov	r1, r3
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <MX_CAN1_Init+0x9c>)
 800141c:	f009 fd82 	bl	800af24 <HAL_CAN_ConfigFilter>
	//HAL_CAN_Start(&hcan1);

	/* USER CODE END CAN1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20056d30 	.word	0x20056d30
 800142c:	40006400 	.word	0x40006400

08001430 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <MX_CAN2_Init+0xa0>)
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <MX_CAN2_Init+0xa4>)
 800143a:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <MX_CAN2_Init+0xa0>)
 800143e:	2209      	movs	r2, #9
 8001440:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <MX_CAN2_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_CAN2_Init+0xa0>)
 800144a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800144e:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001450:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <MX_CAN2_Init+0xa0>)
 8001452:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001456:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_CAN2_Init+0xa0>)
 800145a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800145e:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_CAN2_Init+0xa0>)
 8001462:	2200      	movs	r2, #0
 8001464:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_CAN2_Init+0xa0>)
 8001468:	2200      	movs	r2, #0
 800146a:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_CAN2_Init+0xa0>)
 800146e:	2200      	movs	r2, #0
 8001470:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_CAN2_Init+0xa0>)
 8001474:	2201      	movs	r2, #1
 8001476:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_CAN2_Init+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_CAN2_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001484:	4812      	ldr	r0, [pc, #72]	; (80014d0 <MX_CAN2_Init+0xa0>)
 8001486:	f009 fc51 	bl	800ad2c <HAL_CAN_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 8001490:	f001 f990 	bl	80027b4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001494:	2301      	movs	r3, #1
 8001496:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 8001498:	2312      	movs	r3, #18
 800149a:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 80014b8:	230a      	movs	r3, #10
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_CAN2_Init+0xa0>)
 80014c2:	f009 fd2f 	bl	800af24 <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

	/* USER CODE END CAN2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20056d08 	.word	0x20056d08
 80014d4:	40006800 	.word	0x40006800

080014d8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (canHandle->Instance == CAN1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <HAL_CAN_MspInit+0x150>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d13a      	bne.n	8001570 <HAL_CAN_MspInit+0x98>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 80014fa:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_CAN_MspInit+0x154>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a4a      	ldr	r2, [pc, #296]	; (800162c <HAL_CAN_MspInit+0x154>)
 8001502:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8001504:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_CAN_MspInit+0x154>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10b      	bne.n	8001524 <HAL_CAN_MspInit+0x4c>
		{
			__HAL_RCC_CAN1_CLK_ENABLE();
 800150c:	4b48      	ldr	r3, [pc, #288]	; (8001630 <HAL_CAN_MspInit+0x158>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a47      	ldr	r2, [pc, #284]	; (8001630 <HAL_CAN_MspInit+0x158>)
 8001512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
 8001518:	4b45      	ldr	r3, [pc, #276]	; (8001630 <HAL_CAN_MspInit+0x158>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	623b      	str	r3, [r7, #32]
 8001522:	6a3b      	ldr	r3, [r7, #32]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_CAN_MspInit+0x158>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a41      	ldr	r2, [pc, #260]	; (8001630 <HAL_CAN_MspInit+0x158>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <HAL_CAN_MspInit+0x158>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	69fb      	ldr	r3, [r7, #28]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800153c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800154e:	2309      	movs	r3, #9
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	4836      	ldr	r0, [pc, #216]	; (8001634 <HAL_CAN_MspInit+0x15c>)
 800155a:	f00b f91b 	bl	800c794 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2103      	movs	r1, #3
 8001562:	2014      	movs	r0, #20
 8001564:	f00a fa52 	bl	800ba0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001568:	2014      	movs	r0, #20
 800156a:	f00a fa6b 	bl	800ba44 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 800156e:	e056      	b.n	800161e <HAL_CAN_MspInit+0x146>
	else if (canHandle->Instance == CAN2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a30      	ldr	r2, [pc, #192]	; (8001638 <HAL_CAN_MspInit+0x160>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d151      	bne.n	800161e <HAL_CAN_MspInit+0x146>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_CAN_MspInit+0x158>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a2c      	ldr	r2, [pc, #176]	; (8001630 <HAL_CAN_MspInit+0x158>)
 8001580:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_CAN_MspInit+0x158>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN2_CLK_ENABLE();
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_CAN_MspInit+0x158>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a26      	ldr	r2, [pc, #152]	; (8001630 <HAL_CAN_MspInit+0x158>)
 8001598:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_CAN_MspInit+0x158>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697b      	ldr	r3, [r7, #20]
		HAL_RCC_CAN1_CLK_ENABLED++;
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_CAN_MspInit+0x154>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a1e      	ldr	r2, [pc, #120]	; (800162c <HAL_CAN_MspInit+0x154>)
 80015b2:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_CAN_MspInit+0x154>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d10b      	bne.n	80015d4 <HAL_CAN_MspInit+0xfc>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_CAN_MspInit+0x158>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_CAN_MspInit+0x158>)
 80015c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_CAN_MspInit+0x158>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_CAN_MspInit+0x158>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	4a15      	ldr	r2, [pc, #84]	; (8001630 <HAL_CAN_MspInit+0x158>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	6313      	str	r3, [r2, #48]	; 0x30
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_CAN_MspInit+0x158>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 80015ec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80015fe:	2309      	movs	r3, #9
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <HAL_CAN_MspInit+0x164>)
 800160a:	f00b f8c3 	bl	800c794 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2103      	movs	r1, #3
 8001612:	2040      	movs	r0, #64	; 0x40
 8001614:	f00a f9fa 	bl	800ba0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001618:	2040      	movs	r0, #64	; 0x40
 800161a:	f00a fa13 	bl	800ba44 <HAL_NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3738      	adds	r7, #56	; 0x38
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40006400 	.word	0x40006400
 800162c:	20000270 	.word	0x20000270
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000
 8001638:	40006800 	.word	0x40006800
 800163c:	40020400 	.word	0x40020400

08001640 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b091      	sub	sp, #68	; 0x44
 8001644:	af04      	add	r7, sp, #16
 8001646:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	f107 0214 	add.w	r2, r7, #20
 8001650:	2100      	movs	r1, #0
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f009 fd96 	bl	800b184 <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d10f      	bne.n	8001682 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	{
		//ComputeEcumasterFrame(RxHeader, RxData);
		ComputeInternalFrame(RxHeader, RxData);
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	9303      	str	r3, [sp, #12]
 8001668:	466c      	mov	r4, sp
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800167c:	f000 f926 	bl	80018cc <ComputeInternalFrame>
	else
	{
		//ComputeInternalFrame(RxHeader, RxData);
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}
 8001680:	e00e      	b.n	80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeEcumasterFrame(RxHeader, RxData);
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	9303      	str	r3, [sp, #12]
 8001688:	466c      	mov	r4, sp
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800169c:	f000 f806 	bl	80016ac <ComputeEcumasterFrame>
}
 80016a0:	bf00      	nop
 80016a2:	3734      	adds	r7, #52	; 0x34
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	40006400 	.word	0x40006400

080016ac <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 80016ac:	b084      	sub	sp, #16
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	f107 0c08 	add.w	ip, r7, #8
 80016b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == Frame1)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80016c0:	d121      	bne.n	8001706 <ComputeEcumasterFrame+0x5a>
	{
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 80016c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016c4:	f000 f928 	bl	8001918 <LittleToBigEndian>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b7b      	ldr	r3, [pc, #492]	; (80018bc <ComputeEcumasterFrame+0x210>)
 80016ce:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	789a      	ldrb	r2, [r3, #2]
 80016d4:	4b79      	ldr	r3, [pc, #484]	; (80018bc <ComputeEcumasterFrame+0x210>)
 80016d6:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	78da      	ldrb	r2, [r3, #3]
 80016dc:	4b77      	ldr	r3, [pc, #476]	; (80018bc <ComputeEcumasterFrame+0x210>)
 80016de:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	3304      	adds	r3, #4
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f917 	bl	8001918 <LittleToBigEndian>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b73      	ldr	r3, [pc, #460]	; (80018bc <ComputeEcumasterFrame+0x210>)
 80016f0:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	3306      	adds	r3, #6
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f90e 	bl	8001918 <LittleToBigEndian>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b6e      	ldr	r3, [pc, #440]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001702:	80da      	strh	r2, [r3, #6]
			{
				telemetryData.gear = 0;
			}
		}
	}
}
 8001704:	e0d4      	b.n	80018b0 <ComputeEcumasterFrame+0x204>
	else if (RxHeader.StdId == Frame3)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f240 6202 	movw	r2, #1538	; 0x602
 800170c:	4293      	cmp	r3, r2
 800170e:	d122      	bne.n	8001756 <ComputeEcumasterFrame+0xaa>
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 8001710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001712:	f000 f901 	bl	8001918 <LittleToBigEndian>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	4b68      	ldr	r3, [pc, #416]	; (80018bc <ComputeEcumasterFrame+0x210>)
 800171c:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	78da      	ldrb	r2, [r3, #3]
 8001722:	4b66      	ldr	r3, [pc, #408]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001724:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4] * 0.0625f;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3304      	adds	r3, #4
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001734:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80018c0 <ComputeEcumasterFrame+0x214>
 8001738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173c:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <ComputeEcumasterFrame+0x210>)
 800173e:	edc3 7a03 	vstr	s15, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	3306      	adds	r3, #6
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f8e6 	bl	8001918 <LittleToBigEndian>
 800174c:	4603      	mov	r3, r0
 800174e:	b21a      	sxth	r2, r3
 8001750:	4b5a      	ldr	r3, [pc, #360]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001752:	821a      	strh	r2, [r3, #16]
}
 8001754:	e0ac      	b.n	80018b0 <ComputeEcumasterFrame+0x204>
	else if (RxHeader.StdId == Frame4)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f240 6203 	movw	r2, #1539	; 0x603
 800175c:	4293      	cmp	r3, r2
 800175e:	d123      	bne.n	80017a8 <ComputeEcumasterFrame+0xfc>
		EcuData.ignAngle = RxData[0];
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25a      	sxtb	r2, r3
 8001766:	4b55      	ldr	r3, [pc, #340]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001768:	749a      	strb	r2, [r3, #18]
		EcuData.ignDwell = RxData[1];
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	785a      	ldrb	r2, [r3, #1]
 800176e:	4b53      	ldr	r3, [pc, #332]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001770:	74da      	strb	r2, [r3, #19]
		EcuData.lambda = RxData[2];
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	789a      	ldrb	r2, [r3, #2]
 8001776:	4b51      	ldr	r3, [pc, #324]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001778:	751a      	strb	r2, [r3, #20]
		EcuData.lambdaCorrection = RxData[3];
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	78da      	ldrb	r2, [r3, #3]
 800177e:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001780:	755a      	strb	r2, [r3, #21]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	3304      	adds	r3, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f8c6 	bl	8001918 <LittleToBigEndian>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001792:	82da      	strh	r2, [r3, #22]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	3306      	adds	r3, #6
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f8bd 	bl	8001918 <LittleToBigEndian>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b46      	ldr	r3, [pc, #280]	; (80018bc <ComputeEcumasterFrame+0x210>)
 80017a4:	831a      	strh	r2, [r3, #24]
}
 80017a6:	e083      	b.n	80018b0 <ComputeEcumasterFrame+0x204>
	else if (RxHeader.StdId == Frame5)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f240 6204 	movw	r2, #1540	; 0x604
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d129      	bne.n	8001806 <ComputeEcumasterFrame+0x15a>
		EcuData.gear = RxData[0];
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <ComputeEcumasterFrame+0x210>)
 80017b8:	769a      	strb	r2, [r3, #26]
		EcuData.ecuTemp = RxData[1];
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	3301      	adds	r3, #1
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <ComputeEcumasterFrame+0x210>)
 80017c4:	76da      	strb	r2, [r3, #27]
		EcuData.batt = LittleToBigEndian(&RxData[2]) * 0.027f;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	3302      	adds	r3, #2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f8a4 	bl	8001918 <LittleToBigEndian>
 80017d0:	4603      	mov	r3, r0
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017da:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80018c4 <ComputeEcumasterFrame+0x218>
 80017de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e2:	4b36      	ldr	r3, [pc, #216]	; (80018bc <ComputeEcumasterFrame+0x210>)
 80017e4:	edc3 7a07 	vstr	s15, [r3, #28]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	3305      	adds	r3, #5
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f893 	bl	8001918 <LittleToBigEndian>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <ComputeEcumasterFrame+0x210>)
 80017f8:	841a      	strh	r2, [r3, #32]
		EcuData.flags1 = RxData[7];
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	79da      	ldrb	r2, [r3, #7]
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001800:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001804:	e054      	b.n	80018b0 <ComputeEcumasterFrame+0x204>
	else if (RxHeader.StdId == Frame6)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f240 6205 	movw	r2, #1541	; 0x605
 800180c:	4293      	cmp	r3, r2
 800180e:	d127      	bne.n	8001860 <ComputeEcumasterFrame+0x1b4>
		EcuData.DBWPosition = RxData[0];
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001816:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		EcuData.DBWTrigger = RxData[1];
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	785a      	ldrb	r2, [r3, #1]
 800181e:	4b27      	ldr	r3, [pc, #156]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3302      	adds	r3, #2
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f875 	bl	8001918 <LittleToBigEndian>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001834:	84da      	strh	r2, [r3, #38]	; 0x26
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3304      	adds	r3, #4
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f86c 	bl	8001918 <LittleToBigEndian>
 8001840:	4603      	mov	r3, r0
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		EcuData.TCTorqueReduction = RxData[6];
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	799a      	ldrb	r2, [r3, #6]
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <ComputeEcumasterFrame+0x210>)
 8001850:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		EcuData.PitLimitTorqueReduction = RxData[7];
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	79da      	ldrb	r2, [r3, #7]
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <ComputeEcumasterFrame+0x210>)
 800185a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 800185e:	e027      	b.n	80018b0 <ComputeEcumasterFrame+0x204>
	else if (RxHeader.StdId == 768)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001866:	d123      	bne.n	80018b0 <ComputeEcumasterFrame+0x204>
		if (abs(telemetryData.gear - RxData[1]) == 1 || RxData[1] == 7)
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <ComputeEcumasterFrame+0x21c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	3301      	adds	r3, #1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	bfb8      	it	lt
 800187a:	425b      	neglt	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d004      	beq.n	800188a <ComputeEcumasterFrame+0x1de>
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	3301      	adds	r3, #1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b07      	cmp	r3, #7
 8001888:	d112      	bne.n	80018b0 <ComputeEcumasterFrame+0x204>
			telemetryData.gear = RxData[1];
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	785a      	ldrb	r2, [r3, #1]
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <ComputeEcumasterFrame+0x21c>)
 8001890:	701a      	strb	r2, [r3, #0]
			if (telemetryData.gear == 0)
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <ComputeEcumasterFrame+0x21c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <ComputeEcumasterFrame+0x1f6>
				telemetryData.gear = 1;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <ComputeEcumasterFrame+0x21c>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
}
 80018a0:	e006      	b.n	80018b0 <ComputeEcumasterFrame+0x204>
			else if (telemetryData.gear == 1)
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <ComputeEcumasterFrame+0x21c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <ComputeEcumasterFrame+0x204>
				telemetryData.gear = 0;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <ComputeEcumasterFrame+0x21c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018b8:	b004      	add	sp, #16
 80018ba:	4770      	bx	lr
 80018bc:	2002396c 	.word	0x2002396c
 80018c0:	3d800000 	.word	0x3d800000
 80018c4:	3cdd2f1b 	.word	0x3cdd2f1b
 80018c8:	20023998 	.word	0x20023998

080018cc <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 80018cc:	b084      	sub	sp, #16
 80018ce:	b490      	push	{r4, r7}
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	f107 0408 	add.w	r4, r7, #8
 80018d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (RxHeader.StdId == 768)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018e0:	d112      	bne.n	8001908 <ComputeInternalFrame+0x3c>
	{
		telemetryData.gear = RxData[1];
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	785a      	ldrb	r2, [r3, #1]
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <ComputeInternalFrame+0x48>)
 80018e8:	701a      	strb	r2, [r3, #0]
		if (telemetryData.gear == 0)
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <ComputeInternalFrame+0x48>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <ComputeInternalFrame+0x2e>
		{
			telemetryData.gear = 1;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <ComputeInternalFrame+0x48>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
		else if (telemetryData.gear == 1)
		{
			telemetryData.gear = 0;
		}
	}
}
 80018f8:	e006      	b.n	8001908 <ComputeInternalFrame+0x3c>
		else if (telemetryData.gear == 1)
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <ComputeInternalFrame+0x48>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <ComputeInternalFrame+0x3c>
			telemetryData.gear = 0;
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <ComputeInternalFrame+0x48>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc90      	pop	{r4, r7}
 800190e:	b004      	add	sp, #16
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20023998 	.word	0x20023998

08001918 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] + data[1] * 0xFF;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b29a      	uxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3301      	adds	r3, #1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	0209      	lsls	r1, r1, #8
 8001932:	1acb      	subs	r3, r1, r3
 8001934:	b29b      	uxth	r3, r3
 8001936:	4413      	add	r3, r2
 8001938:	81fb      	strh	r3, [r7, #14]
	return returnData;
 800193a:	89fb      	ldrh	r3, [r7, #14]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <MX_CRC_Init+0x3c>)
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <MX_CRC_Init+0x40>)
 8001950:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_CRC_Init+0x3c>)
 8001954:	2200      	movs	r2, #0
 8001956:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <MX_CRC_Init+0x3c>)
 800195a:	2200      	movs	r2, #0
 800195c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_CRC_Init+0x3c>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <MX_CRC_Init+0x3c>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_CRC_Init+0x3c>)
 800196c:	2201      	movs	r2, #1
 800196e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_CRC_Init+0x3c>)
 8001972:	f00a f883 	bl	800ba7c <HAL_CRC_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800197c:	f000 ff1a 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20056d58 	.word	0x20056d58
 8001988:	40023000 	.word	0x40023000

0800198c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_CRC_MspInit+0x38>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10b      	bne.n	80019b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 80019a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023000 	.word	0x40023000
 80019c8:	40023800 	.word	0x40023800

080019cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_DMA_Init+0x48>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <MX_DMA_Init+0x48>)
 80019d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <MX_DMA_Init+0x48>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2103      	movs	r1, #3
 80019ee:	200b      	movs	r0, #11
 80019f0:	f00a f80c 	bl	800ba0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019f4:	200b      	movs	r0, #11
 80019f6:	f00a f825 	bl	800ba44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2103      	movs	r1, #3
 80019fe:	200f      	movs	r0, #15
 8001a00:	f00a f804 	bl	800ba0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a04:	200f      	movs	r0, #15
 8001a06:	f00a f81d 	bl	800ba44 <HAL_NVIC_EnableIRQ>

}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800

08001a18 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a1e:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <MX_DMA2D_Init+0x6c>)
 8001a20:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a58:	4809      	ldr	r0, [pc, #36]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a5a:	f00a fc93 	bl	800c384 <HAL_DMA2D_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8001a64:	f000 fea6 	bl	80027b4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_DMA2D_Init+0x68>)
 8001a6c:	f00a fdf4 	bl	800c658 <HAL_DMA2D_ConfigLayer>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8001a76:	f000 fe9d 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20056d7c 	.word	0x20056d7c
 8001a84:	4002b000 	.word	0x4002b000

08001a88 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <HAL_DMA2D_MspInit+0x44>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d113      	bne.n	8001ac2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_DMA2D_MspInit+0x48>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <HAL_DMA2D_MspInit+0x48>)
 8001aa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_DMA2D_MspInit+0x48>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	205a      	movs	r0, #90	; 0x5a
 8001ab8:	f009 ffa8 	bl	800ba0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001abc:	205a      	movs	r0, #90	; 0x5a
 8001abe:	f009 ffc1 	bl	800ba44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	4002b000 	.word	0x4002b000
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001aec:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <MX_FMC_Init+0x144>)
 8001aee:	4a4b      	ldr	r2, [pc, #300]	; (8001c1c <MX_FMC_Init+0x148>)
 8001af0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <MX_FMC_Init+0x144>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001af8:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <MX_FMC_Init+0x144>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b04:	4b44      	ldr	r3, [pc, #272]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b06:	2210      	movs	r2, #16
 8001b08:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001b10:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b16:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b18:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001b1e:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b24:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001b26:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001b34:	2302      	movs	r3, #2
 8001b36:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001b40:	2306      	movs	r3, #6
 8001b42:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001b44:	2303      	movs	r3, #3
 8001b46:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4830      	ldr	r0, [pc, #192]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b56:	f00d fcc9 	bl	800f4ec <HAL_SDRAM_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001b60:	f000 fe28 	bl	80027b4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001b70:	2210      	movs	r2, #16
 8001b72:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	4926      	ldr	r1, [pc, #152]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001b86:	4824      	ldr	r0, [pc, #144]	; (8001c18 <MX_FMC_Init+0x144>)
 8001b88:	f00d fce4 	bl	800f554 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f008 fcbb 	bl	800a508 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001b92:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001b94:	2202      	movs	r2, #2
 8001b96:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001baa:	f04f 32ff 	mov.w	r2, #4294967295
 8001bae:	491c      	ldr	r1, [pc, #112]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001bb0:	4819      	ldr	r0, [pc, #100]	; (8001c18 <MX_FMC_Init+0x144>)
 8001bb2:	f00d fccf 	bl	800f554 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001bb8:	2203      	movs	r2, #3
 8001bba:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001bce:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd2:	4913      	ldr	r1, [pc, #76]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001bd4:	4810      	ldr	r0, [pc, #64]	; (8001c18 <MX_FMC_Init+0x144>)
 8001bd6:	f00d fcbd 	bl	800f554 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8001bda:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001bde:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001be2:	2204      	movs	r2, #4
 8001be4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001be8:	2210      	movs	r2, #16
 8001bea:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001bf6:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	4908      	ldr	r1, [pc, #32]	; (8001c20 <MX_FMC_Init+0x14c>)
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <MX_FMC_Init+0x144>)
 8001c00:	f00d fca8 	bl	800f554 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 8001c04:	f240 617c 	movw	r1, #1660	; 0x67c
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <MX_FMC_Init+0x144>)
 8001c0a:	f00d fcce 	bl	800f5aa <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001c0e:	bf00      	nop
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20056dd4 	.word	0x20056dd4
 8001c1c:	a0000140 	.word	0xa0000140
 8001c20:	20000278 	.word	0x20000278

08001c24 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c38:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_FMC_MspInit+0x100>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d16d      	bne.n	8001d1c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001c40:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_FMC_MspInit+0x100>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c46:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <HAL_FMC_MspInit+0x104>)
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	4a37      	ldr	r2, [pc, #220]	; (8001d28 <HAL_FMC_MspInit+0x104>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6393      	str	r3, [r2, #56]	; 0x38
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_FMC_MspInit+0x104>)
 8001c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001c62:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c70:	230c      	movs	r3, #12
 8001c72:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	482c      	ldr	r0, [pc, #176]	; (8001d2c <HAL_FMC_MspInit+0x108>)
 8001c7a:	f00a fd8b 	bl	800c794 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c7e:	230c      	movs	r3, #12
 8001c80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c8e:	230c      	movs	r3, #12
 8001c90:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4826      	ldr	r0, [pc, #152]	; (8001d30 <HAL_FMC_MspInit+0x10c>)
 8001c98:	f00a fd7c 	bl	800c794 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cac:	230c      	movs	r3, #12
 8001cae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	481f      	ldr	r0, [pc, #124]	; (8001d34 <HAL_FMC_MspInit+0x110>)
 8001cb6:	f00a fd6d 	bl	800c794 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001cba:	f248 1311 	movw	r3, #33041	; 0x8111
 8001cbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ccc:	230c      	movs	r3, #12
 8001cce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4818      	ldr	r0, [pc, #96]	; (8001d38 <HAL_FMC_MspInit+0x114>)
 8001cd6:	f00a fd5d 	bl	800c794 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001cda:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001cde:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cec:	230c      	movs	r3, #12
 8001cee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <HAL_FMC_MspInit+0x118>)
 8001cf6:	f00a fd4d 	bl	800c794 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001cfa:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001cfe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	4619      	mov	r1, r3
 8001d14:	480a      	ldr	r0, [pc, #40]	; (8001d40 <HAL_FMC_MspInit+0x11c>)
 8001d16:	f00a fd3d 	bl	800c794 <HAL_GPIO_Init>
 8001d1a:	e000      	b.n	8001d1e <HAL_FMC_MspInit+0xfa>
    return;
 8001d1c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000274 	.word	0x20000274
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40020c00 	.word	0x40020c00

08001d44 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001d4c:	f7ff ff6a 	bl	8001c24 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hardwareTASK */
  hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL, &hardwareTASK_attributes);
 8001d5c:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <MX_FREERTOS_Init+0x48>)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4810      	ldr	r0, [pc, #64]	; (8001da4 <MX_FREERTOS_Init+0x4c>)
 8001d62:	f00f fb51 	bl	8011408 <osThreadNew>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <MX_FREERTOS_Init+0x50>)
 8001d6a:	6013      	str	r3, [r2, #0]

  /* creation of touchGFXTask */
  touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL, &touchGFXTask_attributes);
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <MX_FREERTOS_Init+0x54>)
 8001d6e:	2100      	movs	r1, #0
 8001d70:	480f      	ldr	r0, [pc, #60]	; (8001db0 <MX_FREERTOS_Init+0x58>)
 8001d72:	f00f fb49 	bl	8011408 <osThreadNew>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <MX_FREERTOS_Init+0x5c>)
 8001d7a:	6013      	str	r3, [r2, #0]

  /* creation of infoLed */
  infoLedHandle = osThreadNew(StartInfoLed, NULL, &infoLed_attributes);
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <MX_FREERTOS_Init+0x60>)
 8001d7e:	2100      	movs	r1, #0
 8001d80:	480e      	ldr	r0, [pc, #56]	; (8001dbc <MX_FREERTOS_Init+0x64>)
 8001d82:	f00f fb41 	bl	8011408 <osThreadNew>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <MX_FREERTOS_Init+0x68>)
 8001d8a:	6013      	str	r3, [r2, #0]

  /* creation of displayBackligh */
  displayBacklighHandle = osThreadNew(StartDisplayBacklight, NULL, &displayBackligh_attributes);
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <MX_FREERTOS_Init+0x6c>)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <MX_FREERTOS_Init+0x70>)
 8001d92:	f00f fb39 	bl	8011408 <osThreadNew>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <MX_FREERTOS_Init+0x74>)
 8001d9a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	0802b340 	.word	0x0802b340
 8001da4:	08001dd1 	.word	0x08001dd1
 8001da8:	20056e0c 	.word	0x20056e0c
 8001dac:	0802b364 	.word	0x0802b364
 8001db0:	08001e6d 	.word	0x08001e6d
 8001db4:	20056e08 	.word	0x20056e08
 8001db8:	0802b388 	.word	0x0802b388
 8001dbc:	08001e81 	.word	0x08001e81
 8001dc0:	20056e10 	.word	0x20056e10
 8001dc4:	0802b3ac 	.word	0x0802b3ac
 8001dc8:	08001e9d 	.word	0x08001e9d
 8001dcc:	20056e14 	.word	0x20056e14

08001dd0 <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardwareTask */
	WS2812_Init();
 8001dd8:	f7fe fe06 	bl	80009e8 <WS2812_Init>
	ComputeOptimalPoints();
 8001ddc:	f7fe ff54 	bl	8000c88 <ComputeOptimalPoints>
	HAL_CAN_Start(&hcan2);
 8001de0:	481c      	ldr	r0, [pc, #112]	; (8001e54 <StartHardwareTask+0x84>)
 8001de2:	f009 f98b 	bl	800b0fc <HAL_CAN_Start>
	HAL_CAN_Start(&hcan1);
 8001de6:	481c      	ldr	r0, [pc, #112]	; (8001e58 <StartHardwareTask+0x88>)
 8001de8:	f009 f988 	bl	800b0fc <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001dec:	2102      	movs	r1, #2
 8001dee:	4819      	ldr	r0, [pc, #100]	; (8001e54 <StartHardwareTask+0x84>)
 8001df0:	f009 fada 	bl	800b3a8 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001df4:	2102      	movs	r1, #2
 8001df6:	4818      	ldr	r0, [pc, #96]	; (8001e58 <StartHardwareTask+0x88>)
 8001df8:	f009 fad6 	bl	800b3a8 <HAL_CAN_ActivateNotification>

	uint8_t ledMode = displaySetup.ledBarMode;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <StartHardwareTask+0x8c>)
 8001dfe:	785b      	ldrb	r3, [r3, #1]
 8001e00:	73fb      	strb	r3, [r7, #15]
	telemetryData.gear =2;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <StartHardwareTask+0x90>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	for (;;)
	{
		ledMode = telemetryData.gear == 0 ? 1 : displaySetup.ledBarMode;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <StartHardwareTask+0x90>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <StartHardwareTask+0x46>
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <StartHardwareTask+0x8c>)
 8001e12:	785b      	ldrb	r3, [r3, #1]
 8001e14:	e000      	b.n	8001e18 <StartHardwareTask+0x48>
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
		//EcuData.rpm += 100;
		//if (EcuData.rpm >12000)
		//	EcuData.rpm = 5000;
		updateLeds(EcuData.rpm, ledMode);
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <StartHardwareTask+0x94>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4610      	mov	r0, r2
 8001e26:	f7fe fe79 	bl	8000b1c <updateLeds>

		if(telemetryData.gear == 0)
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <StartHardwareTask+0x90>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <StartHardwareTask+0x70>
		{
			HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, SET);
 8001e32:	2201      	movs	r2, #1
 8001e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e38:	480b      	ldr	r0, [pc, #44]	; (8001e68 <StartHardwareTask+0x98>)
 8001e3a:	f00a ff63 	bl	800cd04 <HAL_GPIO_WritePin>
 8001e3e:	e005      	b.n	8001e4c <StartHardwareTask+0x7c>
		}
		else
		{
			HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e46:	4808      	ldr	r0, [pc, #32]	; (8001e68 <StartHardwareTask+0x98>)
 8001e48:	f00a ff5c 	bl	800cd04 <HAL_GPIO_WritePin>
		}

		osDelay(100);
 8001e4c:	2064      	movs	r0, #100	; 0x64
 8001e4e:	f00f fbb3 	bl	80115b8 <osDelay>
		ledMode = telemetryData.gear == 0 ? 1 : displaySetup.ledBarMode;
 8001e52:	e7d9      	b.n	8001e08 <StartHardwareTask+0x38>
 8001e54:	20056d08 	.word	0x20056d08
 8001e58:	20056d30 	.word	0x20056d30
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	20023998 	.word	0x20023998
 8001e64:	2002396c 	.word	0x2002396c
 8001e68:	40020800 	.word	0x40020800

08001e6c <StartTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 8001e74:	f001 f947 	bl	8003106 <MX_TouchGFX_Process>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f00f fb9d 	bl	80115b8 <osDelay>
 8001e7e:	e7fb      	b.n	8001e78 <StartTouchGFXTask+0xc>

08001e80 <StartInfoLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInfoLed */
void StartInfoLed(void *argument)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInfoLed */
	/* Infinite loop */
	for (;;)
	{
		osDelay(250);
 8001e88:	20fa      	movs	r0, #250	; 0xfa
 8001e8a:	f00f fb95 	bl	80115b8 <osDelay>
		HAL_GPIO_TogglePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin);
 8001e8e:	2104      	movs	r1, #4
 8001e90:	4801      	ldr	r0, [pc, #4]	; (8001e98 <StartInfoLed+0x18>)
 8001e92:	f00a ff50 	bl	800cd36 <HAL_GPIO_TogglePin>
		osDelay(250);
 8001e96:	e7f7      	b.n	8001e88 <StartInfoLed+0x8>
 8001e98:	40021000 	.word	0x40021000

08001e9c <StartDisplayBacklight>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayBacklight */
void StartDisplayBacklight(void *argument)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	ed2d 8b02 	vpush	{d8}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayBacklight */

	// current set point in mA
	uint8_t setPoint = displaySetup.brightness * 1.5f;
 8001ea8:	4b64      	ldr	r3, [pc, #400]	; (800203c <StartDisplayBacklight+0x1a0>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec0:	edc7 7a00 	vstr	s15, [r7]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	753b      	strb	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	485d      	ldr	r0, [pc, #372]	; (8002040 <StartDisplayBacklight+0x1a4>)
 8001ecc:	f00d fcbe 	bl	800f84c <HAL_TIM_PWM_Start>
	uint8_t PWM_Pulse = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	75fb      	strb	r3, [r7, #23]
	uint8_t PWM_PulseChange = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75bb      	strb	r3, [r7, #22]
	float voltage = 0.0f;
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
	float current = 0.0f;
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
	uint8_t delay = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	757b      	strb	r3, [r7, #21]
	osDelay(250);
 8001ee8:	20fa      	movs	r0, #250	; 0xfa
 8001eea:	f00f fb65 	bl	80115b8 <osDelay>
	/* Infinite loop */
	for (;;)
	{
		HAL_ADC_Start(&hadc1);
 8001eee:	4855      	ldr	r0, [pc, #340]	; (8002044 <StartDisplayBacklight+0x1a8>)
 8001ef0:	f008 fb72 	bl	800a5d8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8001ef4:	210a      	movs	r1, #10
 8001ef6:	4853      	ldr	r0, [pc, #332]	; (8002044 <StartDisplayBacklight+0x1a8>)
 8001ef8:	f008 fc3c 	bl	800a774 <HAL_ADC_PollForConversion>

		osDelay(100 - delay);
 8001efc:	7d7b      	ldrb	r3, [r7, #21]
 8001efe:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001f02:	4618      	mov	r0, r3
 8001f04:	f00f fb58 	bl	80115b8 <osDelay>
		voltage = HAL_ADC_GetValue(&hadc1) * 3.3f / 4095.0f;
 8001f08:	484e      	ldr	r0, [pc, #312]	; (8002044 <StartDisplayBacklight+0x1a8>)
 8001f0a:	f008 fcbe 	bl	800a88a <HAL_ADC_GetValue>
 8001f0e:	ee07 0a90 	vmov	s15, r0
 8001f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f16:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002048 <StartDisplayBacklight+0x1ac>
 8001f1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f1e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800204c <StartDisplayBacklight+0x1b0>
 8001f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f26:	edc7 7a04 	vstr	s15, [r7, #16]
		current = voltage / 5.1f * 1000.0f;
 8001f2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002050 <StartDisplayBacklight+0x1b4>
 8001f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f36:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002054 <StartDisplayBacklight+0x1b8>
 8001f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3e:	edc7 7a03 	vstr	s15, [r7, #12]

		PWM_PulseChange = (int8_t) round((setPoint - current) / 10.0f);
 8001f42:	7d3b      	ldrb	r3, [r7, #20]
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f54:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f60:	eeb0 0b47 	vmov.f64	d0, d7
 8001f64:	f023 ff5e 	bl	8025e24 <round>
 8001f68:	eeb0 7b40 	vmov.f64	d7, d0
 8001f6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001f70:	edc7 7a00 	vstr	s15, [r7]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	75bb      	strb	r3, [r7, #22]
		delay = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	757b      	strb	r3, [r7, #21]
		if (PWM_PulseChange > 10)
 8001f7e:	7dbb      	ldrb	r3, [r7, #22]
 8001f80:	2b0a      	cmp	r3, #10
 8001f82:	d951      	bls.n	8002028 <StartDisplayBacklight+0x18c>
		{
			while (PWM_PulseChange > 0)
 8001f84:	e04c      	b.n	8002020 <StartDisplayBacklight+0x184>
			{
				PWM_Pulse += fmin(fmin(PWM_PulseChange, PWM_CHANGE),215 - PWM_Pulse);
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001f90:	7dbb      	ldrb	r3, [r7, #22]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001f9a:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8001f9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001fa2:	f023 fef9 	bl	8025d98 <fmin>
 8001fa6:	eeb0 6b40 	vmov.f64	d6, d0
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fb8:	eeb0 1b47 	vmov.f64	d1, d7
 8001fbc:	eeb0 0b46 	vmov.f64	d0, d6
 8001fc0:	f023 feea 	bl	8025d98 <fmin>
 8001fc4:	eeb0 7b40 	vmov.f64	d7, d0
 8001fc8:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001fcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fd0:	edc7 7a00 	vstr	s15, [r7]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	75fb      	strb	r3, [r7, #23]
				PWM_PulseChange -= fmin(PWM_PulseChange, PWM_CHANGE);
 8001fd8:	7dbb      	ldrb	r3, [r7, #22]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001fe2:	7dbb      	ldrb	r3, [r7, #22]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001fec:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8001ff0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ff4:	f023 fed0 	bl	8025d98 <fmin>
 8001ff8:	eeb0 7b40 	vmov.f64	d7, d0
 8001ffc:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002000:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002004:	edc7 7a00 	vstr	s15, [r7]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	75bb      	strb	r3, [r7, #22]
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <StartDisplayBacklight+0x1a4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	7dfa      	ldrb	r2, [r7, #23]
 8002012:	635a      	str	r2, [r3, #52]	; 0x34
				osDelay(5);
 8002014:	2005      	movs	r0, #5
 8002016:	f00f facf 	bl	80115b8 <osDelay>
				delay += 5;
 800201a:	7d7b      	ldrb	r3, [r7, #21]
 800201c:	3305      	adds	r3, #5
 800201e:	757b      	strb	r3, [r7, #21]
			while (PWM_PulseChange > 0)
 8002020:	7dbb      	ldrb	r3, [r7, #22]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1af      	bne.n	8001f86 <StartDisplayBacklight+0xea>
 8002026:	e762      	b.n	8001eee <StartDisplayBacklight+0x52>
				delay += 5;
			}
		}
		else
		{
			PWM_Pulse += PWM_PulseChange;
 8002028:	7dfa      	ldrb	r2, [r7, #23]
 800202a:	7dbb      	ldrb	r3, [r7, #22]
 800202c:	4413      	add	r3, r2
 800202e:	75fb      	strb	r3, [r7, #23]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <StartDisplayBacklight+0x1a4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	7dfa      	ldrb	r2, [r7, #23]
 8002036:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_ADC_Start(&hadc1);
 8002038:	e759      	b.n	8001eee <StartDisplayBacklight+0x52>
 800203a:	bf00      	nop
 800203c:	20000004 	.word	0x20000004
 8002040:	20056f58 	.word	0x20056f58
 8002044:	20056cc0 	.word	0x20056cc0
 8002048:	40533333 	.word	0x40533333
 800204c:	457ff000 	.word	0x457ff000
 8002050:	40a33333 	.word	0x40a33333
 8002054:	447a0000 	.word	0x447a0000

08002058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800206e:	4b46      	ldr	r3, [pc, #280]	; (8002188 <MX_GPIO_Init+0x130>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a45      	ldr	r2, [pc, #276]	; (8002188 <MX_GPIO_Init+0x130>)
 8002074:	f043 0310 	orr.w	r3, r3, #16
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b43      	ldr	r3, [pc, #268]	; (8002188 <MX_GPIO_Init+0x130>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	623b      	str	r3, [r7, #32]
 8002084:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002086:	4b40      	ldr	r3, [pc, #256]	; (8002188 <MX_GPIO_Init+0x130>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <MX_GPIO_Init+0x130>)
 800208c:	f043 0320 	orr.w	r3, r3, #32
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <MX_GPIO_Init+0x130>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <MX_GPIO_Init+0x130>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a39      	ldr	r2, [pc, #228]	; (8002188 <MX_GPIO_Init+0x130>)
 80020a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <MX_GPIO_Init+0x130>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	4b34      	ldr	r3, [pc, #208]	; (8002188 <MX_GPIO_Init+0x130>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a33      	ldr	r2, [pc, #204]	; (8002188 <MX_GPIO_Init+0x130>)
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <MX_GPIO_Init+0x130>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <MX_GPIO_Init+0x130>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a2d      	ldr	r2, [pc, #180]	; (8002188 <MX_GPIO_Init+0x130>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <MX_GPIO_Init+0x130>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <MX_GPIO_Init+0x130>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a27      	ldr	r2, [pc, #156]	; (8002188 <MX_GPIO_Init+0x130>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b25      	ldr	r3, [pc, #148]	; (8002188 <MX_GPIO_Init+0x130>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <MX_GPIO_Init+0x130>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <MX_GPIO_Init+0x130>)
 8002104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <MX_GPIO_Init+0x130>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <MX_GPIO_Init+0x130>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <MX_GPIO_Init+0x130>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <MX_GPIO_Init+0x130>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2104      	movs	r1, #4
 8002132:	4816      	ldr	r0, [pc, #88]	; (800218c <MX_GPIO_Init+0x134>)
 8002134:	f00a fde6 	bl	800cd04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NEUTRAL_LED_Pin|ESP_PD_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800213e:	4814      	ldr	r0, [pc, #80]	; (8002190 <MX_GPIO_Init+0x138>)
 8002140:	f00a fde0 	bl	800cd04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_LED_Pin;
 8002144:	2304      	movs	r3, #4
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002148:	2301      	movs	r3, #1
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIGNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8002154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002158:	4619      	mov	r1, r3
 800215a:	480c      	ldr	r0, [pc, #48]	; (800218c <MX_GPIO_Init+0x134>)
 800215c:	f00a fb1a 	bl	800c794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NEUTRAL_LED_Pin|ESP_PD_Pin;
 8002160:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002166:	2301      	movs	r3, #1
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_GPIO_Init+0x138>)
 800217a:	f00a fb0b 	bl	800c794 <HAL_GPIO_Init>

}
 800217e:	bf00      	nop
 8002180:	3738      	adds	r7, #56	; 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40021000 	.word	0x40021000
 8002190:	40020800 	.word	0x40020800

08002194 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08e      	sub	sp, #56	; 0x38
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2234      	movs	r2, #52	; 0x34
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f023 ff19 	bl	8025fd8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021a6:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021a8:	4a3a      	ldr	r2, [pc, #232]	; (8002294 <MX_LTDC_Init+0x100>)
 80021aa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021c6:	2203      	movs	r2, #3
 80021c8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021cc:	2227      	movs	r2, #39	; 0x27
 80021ce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021d2:	220b      	movs	r2, #11
 80021d4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021d8:	222f      	movs	r2, #47	; 0x2f
 80021da:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021de:	f240 322b 	movw	r2, #811	; 0x32b
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021e6:	f240 220f 	movw	r2, #527	; 0x20f
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021ee:	f240 3233 	movw	r2, #819	; 0x333
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021f6:	f240 2217 	movw	r2, #535	; 0x217
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <MX_LTDC_Init+0xfc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <MX_LTDC_Init+0xfc>)
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800220c:	4b20      	ldr	r3, [pc, #128]	; (8002290 <MX_LTDC_Init+0xfc>)
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002214:	481e      	ldr	r0, [pc, #120]	; (8002290 <MX_LTDC_Init+0xfc>)
 8002216:	f00a fda9 	bl	800cd6c <HAL_LTDC_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002220:	f000 fac8 	bl	80027b4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8002228:	f44f 7348 	mov.w	r3, #800	; 0x320
 800222c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8002232:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002236:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002238:	2301      	movs	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800223c:	23ff      	movs	r3, #255	; 0xff
 800223e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002248:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800224a:	2305      	movs	r3, #5
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800224e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8002254:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800225a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_LTDC_Init+0xfc>)
 800227a:	f00a feff 	bl	800d07c <HAL_LTDC_ConfigLayer>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002284:	f000 fa96 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	3738      	adds	r7, #56	; 0x38
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20056e18 	.word	0x20056e18
 8002294:	40016800 	.word	0x40016800

08002298 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0b4      	sub	sp, #208	; 0xd0
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b4:	2290      	movs	r2, #144	; 0x90
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f023 fe8d 	bl	8025fd8 <memset>
  if(ltdcHandle->Instance==LTDC)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4aa6      	ldr	r2, [pc, #664]	; (800255c <HAL_LTDC_MspInit+0x2c4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f040 8144 	bne.w	8002552 <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022ca:	2308      	movs	r3, #8
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 80022ce:	f240 1317 	movw	r3, #279	; 0x117
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 80022d4:	2303      	movs	r3, #3
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80022d8:	2302      	movs	r3, #2
 80022da:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80022dc:	2300      	movs	r3, #0
 80022de:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80022e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ee:	4618      	mov	r0, r3
 80022f0:	f00c fcd4 	bl	800ec9c <HAL_RCCEx_PeriphCLKConfig>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80022fa:	f000 fa5b 	bl	80027b4 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022fe:	4b98      	ldr	r3, [pc, #608]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a97      	ldr	r2, [pc, #604]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002304:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b95      	ldr	r3, [pc, #596]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002316:	4b92      	ldr	r3, [pc, #584]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a91      	ldr	r2, [pc, #580]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 800231c:	f043 0310 	orr.w	r3, r3, #16
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800232e:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a8b      	ldr	r2, [pc, #556]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002334:	f043 0320 	orr.w	r3, r3, #32
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b89      	ldr	r3, [pc, #548]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002346:	4b86      	ldr	r3, [pc, #536]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a85      	ldr	r2, [pc, #532]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b83      	ldr	r3, [pc, #524]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	4b80      	ldr	r3, [pc, #512]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a7f      	ldr	r2, [pc, #508]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b7d      	ldr	r3, [pc, #500]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	4b7a      	ldr	r3, [pc, #488]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a79      	ldr	r2, [pc, #484]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b77      	ldr	r3, [pc, #476]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800238e:	4b74      	ldr	r3, [pc, #464]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a73      	ldr	r2, [pc, #460]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 8002394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b71      	ldr	r3, [pc, #452]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a6:	4b6e      	ldr	r3, [pc, #440]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a6d      	ldr	r2, [pc, #436]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b6b      	ldr	r3, [pc, #428]	; (8002560 <HAL_LTDC_MspInit+0x2c8>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80023be:	2370      	movs	r3, #112	; 0x70
 80023c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023d6:	230e      	movs	r3, #14
 80023d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023e0:	4619      	mov	r1, r3
 80023e2:	4860      	ldr	r0, [pc, #384]	; (8002564 <HAL_LTDC_MspInit+0x2cc>)
 80023e4:	f00a f9d6 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002402:	230e      	movs	r3, #14
 8002404:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002408:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800240c:	4619      	mov	r1, r3
 800240e:	4856      	ldr	r0, [pc, #344]	; (8002568 <HAL_LTDC_MspInit+0x2d0>)
 8002410:	f00a f9c0 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8002414:	23c1      	movs	r3, #193	; 0xc1
 8002416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800242c:	230e      	movs	r3, #14
 800242e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002432:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002436:	4619      	mov	r1, r3
 8002438:	484c      	ldr	r0, [pc, #304]	; (800256c <HAL_LTDC_MspInit+0x2d4>)
 800243a:	f00a f9ab 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800243e:	f240 437e 	movw	r3, #1150	; 0x47e
 8002442:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002458:	230e      	movs	r3, #14
 800245a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002462:	4619      	mov	r1, r3
 8002464:	4842      	ldr	r0, [pc, #264]	; (8002570 <HAL_LTDC_MspInit+0x2d8>)
 8002466:	f00a f995 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800246a:	2303      	movs	r3, #3
 800246c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002482:	2309      	movs	r3, #9
 8002484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800248c:	4619      	mov	r1, r3
 800248e:	4839      	ldr	r0, [pc, #228]	; (8002574 <HAL_LTDC_MspInit+0x2dc>)
 8002490:	f00a f980 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002494:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ae:	230e      	movs	r3, #14
 80024b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024b8:	4619      	mov	r1, r3
 80024ba:	482e      	ldr	r0, [pc, #184]	; (8002574 <HAL_LTDC_MspInit+0x2dc>)
 80024bc:	f00a f96a 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 80024c0:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 80024c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024da:	230e      	movs	r3, #14
 80024dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024e4:	4619      	mov	r1, r3
 80024e6:	4824      	ldr	r0, [pc, #144]	; (8002578 <HAL_LTDC_MspInit+0x2e0>)
 80024e8:	f00a f954 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80024ec:	2348      	movs	r3, #72	; 0x48
 80024ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002504:	230e      	movs	r3, #14
 8002506:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800250e:	4619      	mov	r1, r3
 8002510:	481a      	ldr	r0, [pc, #104]	; (800257c <HAL_LTDC_MspInit+0x2e4>)
 8002512:	f00a f93f 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002516:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800251a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002530:	2309      	movs	r3, #9
 8002532:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002536:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800253a:	4619      	mov	r1, r3
 800253c:	480e      	ldr	r0, [pc, #56]	; (8002578 <HAL_LTDC_MspInit+0x2e0>)
 800253e:	f00a f929 	bl	800c794 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2103      	movs	r1, #3
 8002546:	2058      	movs	r0, #88	; 0x58
 8002548:	f009 fa60 	bl	800ba0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800254c:	2058      	movs	r0, #88	; 0x58
 800254e:	f009 fa79 	bl	800ba44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002552:	bf00      	nop
 8002554:	37d0      	adds	r7, #208	; 0xd0
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40016800 	.word	0x40016800
 8002560:	40023800 	.word	0x40023800
 8002564:	40021000 	.word	0x40021000
 8002568:	40021400 	.word	0x40021400
 800256c:	40020800 	.word	0x40020800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40021800 	.word	0x40021800
 800257c:	40020c00 	.word	0x40020c00

08002580 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002584:	f3bf 8f4f 	dsb	sy
}
 8002588:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800258a:	f3bf 8f6f 	isb	sy
}
 800258e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <SCB_EnableICache+0x48>)
 8002592:	2200      	movs	r2, #0
 8002594:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002598:	f3bf 8f4f 	dsb	sy
}
 800259c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800259e:	f3bf 8f6f 	isb	sy
}
 80025a2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <SCB_EnableICache+0x48>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <SCB_EnableICache+0x48>)
 80025aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80025b0:	f3bf 8f4f 	dsb	sy
}
 80025b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025b6:	f3bf 8f6f 	isb	sy
}
 80025ba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80025d2:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <SCB_EnableDCache+0x84>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80025da:	f3bf 8f4f 	dsb	sy
}
 80025de:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <SCB_EnableDCache+0x84>)
 80025e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0b5b      	lsrs	r3, r3, #13
 80025ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025f0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	08db      	lsrs	r3, r3, #3
 80025f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002604:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800260a:	4911      	ldr	r1, [pc, #68]	; (8002650 <SCB_EnableDCache+0x84>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	60ba      	str	r2, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ef      	bne.n	80025fc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e5a      	subs	r2, r3, #1
 8002620:	60fa      	str	r2, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e5      	bne.n	80025f2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8002626:	f3bf 8f4f 	dsb	sy
}
 800262a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <SCB_EnableDCache+0x84>)
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <SCB_EnableDCache+0x84>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002636:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002638:	f3bf 8f4f 	dsb	sy
}
 800263c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800263e:	f3bf 8f6f 	isb	sy
}
 8002642:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002658:	f7ff ff92 	bl	8002580 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800265c:	f7ff ffb6 	bl	80025cc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002660:	f007 ff24 	bl	800a4ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002664:	f000 f824 	bl	80026b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002668:	f7ff fcf6 	bl	8002058 <MX_GPIO_Init>
  MX_CRC_Init();
 800266c:	f7ff f96c 	bl	8001948 <MX_CRC_Init>
  MX_FMC_Init();
 8002670:	f7ff fa30 	bl	8001ad4 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8002674:	f000 f8a4 	bl	80027c0 <MX_QUADSPI_Init>
  MX_LTDC_Init();
 8002678:	f7ff fd8c 	bl	8002194 <MX_LTDC_Init>
  MX_DMA2D_Init();
 800267c:	f7ff f9cc 	bl	8001a18 <MX_DMA2D_Init>
  MX_CAN2_Init();
 8002680:	f7fe fed6 	bl	8001430 <MX_CAN2_Init>
  MX_CAN1_Init();
 8002684:	f7fe fe82 	bl	800138c <MX_CAN1_Init>
  MX_DMA_Init();
 8002688:	f7ff f9a0 	bl	80019cc <MX_DMA_Init>
  MX_TIM4_Init();
 800268c:	f000 fb98 	bl	8002dc0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002690:	f000 fb20 	bl	8002cd4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002694:	f7fe fc1c 	bl	8000ed0 <MX_ADC1_Init>
  MX_TouchGFX_Init();
 8002698:	f000 fd2f 	bl	80030fa <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 800269c:	f7fe fcaa 	bl	8000ff4 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80026a0:	f00e fe48 	bl	8011334 <osKernelInitialize>
  MX_FREERTOS_Init();
 80026a4:	f7ff fb58 	bl	8001d58 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80026a8:	f00e fe78 	bl	801139c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <main+0x58>
	...

080026b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b094      	sub	sp, #80	; 0x50
 80026b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	2234      	movs	r2, #52	; 0x34
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f023 fc8a 	bl	8025fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <SystemClock_Config+0xd8>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	4a2b      	ldr	r2, [pc, #172]	; (8002788 <SystemClock_Config+0xd8>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	6413      	str	r3, [r2, #64]	; 0x40
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <SystemClock_Config+0xd8>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <SystemClock_Config+0xdc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a26      	ldr	r2, [pc, #152]	; (800278c <SystemClock_Config+0xdc>)
 80026f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <SystemClock_Config+0xdc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002704:	2301      	movs	r3, #1
 8002706:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800270c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800270e:	2302      	movs	r3, #2
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002718:	2319      	movs	r3, #25
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 800271c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002720:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002722:	2302      	movs	r3, #2
 8002724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002726:	2302      	movs	r3, #2
 8002728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800272a:	2302      	movs	r3, #2
 800272c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4618      	mov	r0, r3
 8002734:	f00b fe10 	bl	800e358 <HAL_RCC_OscConfig>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800273e:	f000 f839 	bl	80027b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002742:	f00a feab 	bl	800d49c <HAL_PWREx_EnableOverDrive>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800274c:	f000 f832 	bl	80027b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002750:	230f      	movs	r3, #15
 8002752:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002754:	2302      	movs	r3, #2
 8002756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800275c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002768:	f107 0308 	add.w	r3, r7, #8
 800276c:	2107      	movs	r1, #7
 800276e:	4618      	mov	r0, r3
 8002770:	f00c f8a0 	bl	800e8b4 <HAL_RCC_ClockConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800277a:	f000 f81b 	bl	80027b4 <Error_Handler>
  }
}
 800277e:	bf00      	nop
 8002780:	3750      	adds	r7, #80	; 0x50
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000

08002790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027a2:	f007 fe91 	bl	800a4c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40001000 	.word	0x40001000

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027b8:	b672      	cpsid	i
}
 80027ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027bc:	e7fe      	b.n	80027bc <Error_Handler+0x8>
	...

080027c0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027c6:	4a13      	ldr	r2, [pc, #76]	; (8002814 <MX_QUADSPI_Init+0x54>)
 80027c8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027cc:	2203      	movs	r2, #3
 80027ce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027d8:	2210      	movs	r2, #16
 80027da:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027de:	2217      	movs	r2, #23
 80027e0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027e4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80027e8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <MX_QUADSPI_Init+0x50>)
 80027fe:	f00a fe9d 	bl	800d53c <HAL_QSPI_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002808:	f7ff ffd4 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20056ec0 	.word	0x20056ec0
 8002814:	a0001000 	.word	0xa0001000

08002818 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_QSPI_MspInit+0x104>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d16c      	bne.n	8002914 <HAL_QSPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <HAL_QSPI_MspInit+0x108>)
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	4a38      	ldr	r2, [pc, #224]	; (8002920 <HAL_QSPI_MspInit+0x108>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6393      	str	r3, [r2, #56]	; 0x38
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <HAL_QSPI_MspInit+0x108>)
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002852:	4b33      	ldr	r3, [pc, #204]	; (8002920 <HAL_QSPI_MspInit+0x108>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a32      	ldr	r2, [pc, #200]	; (8002920 <HAL_QSPI_MspInit+0x108>)
 8002858:	f043 0320 	orr.w	r3, r3, #32
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_QSPI_MspInit+0x108>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_QSPI_MspInit+0x108>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <HAL_QSPI_MspInit+0x108>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <HAL_QSPI_MspInit+0x108>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002882:	23c0      	movs	r3, #192	; 0xc0
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002892:	2309      	movs	r3, #9
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	4821      	ldr	r0, [pc, #132]	; (8002924 <HAL_QSPI_MspInit+0x10c>)
 800289e:	f009 ff79 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80028b4:	230a      	movs	r3, #10
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4619      	mov	r1, r3
 80028be:	4819      	ldr	r0, [pc, #100]	; (8002924 <HAL_QSPI_MspInit+0x10c>)
 80028c0:	f009 ff68 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028c4:	2304      	movs	r3, #4
 80028c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80028d4:	2309      	movs	r3, #9
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	4619      	mov	r1, r3
 80028de:	4812      	ldr	r0, [pc, #72]	; (8002928 <HAL_QSPI_MspInit+0x110>)
 80028e0:	f009 ff58 	bl	800c794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028e4:	2340      	movs	r3, #64	; 0x40
 80028e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80028f4:	230a      	movs	r3, #10
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4619      	mov	r1, r3
 80028fe:	480a      	ldr	r0, [pc, #40]	; (8002928 <HAL_QSPI_MspInit+0x110>)
 8002900:	f009 ff48 	bl	800c794 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 3, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2103      	movs	r1, #3
 8002908:	205c      	movs	r0, #92	; 0x5c
 800290a:	f009 f87f 	bl	800ba0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800290e:	205c      	movs	r0, #92	; 0x5c
 8002910:	f009 f898 	bl	800ba44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002914:	bf00      	nop
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	a0001000 	.word	0xa0001000
 8002920:	40023800 	.word	0x40023800
 8002924:	40021400 	.word	0x40021400
 8002928:	40020400 	.word	0x40020400

0800292c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_QSPI_MspDeInit+0x40>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d111      	bne.n	8002962 <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_QSPI_MspDeInit+0x44>)
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <HAL_QSPI_MspDeInit+0x44>)
 8002944:	f023 0302 	bic.w	r3, r3, #2
 8002948:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800294a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800294e:	4809      	ldr	r0, [pc, #36]	; (8002974 <HAL_QSPI_MspDeInit+0x48>)
 8002950:	f00a f8cc 	bl	800caec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8002954:	2144      	movs	r1, #68	; 0x44
 8002956:	4808      	ldr	r0, [pc, #32]	; (8002978 <HAL_QSPI_MspDeInit+0x4c>)
 8002958:	f00a f8c8 	bl	800caec <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 800295c:	205c      	movs	r0, #92	; 0x5c
 800295e:	f009 f87f 	bl	800ba60 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	a0001000 	.word	0xa0001000
 8002970:	40023800 	.word	0x40023800
 8002974:	40021400 	.word	0x40021400
 8002978:	40020400 	.word	0x40020400

0800297c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_MspInit+0x4c>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <HAL_MspInit+0x4c>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_MspInit+0x4c>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_MspInit+0x4c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_MspInit+0x4c>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_MspInit+0x4c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	210f      	movs	r1, #15
 80029b6:	f06f 0001 	mvn.w	r0, #1
 80029ba:	f009 f827 	bl	800ba0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	2036      	movs	r0, #54	; 0x36
 80029e2:	f009 f813 	bl	800ba0c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029e6:	2036      	movs	r0, #54	; 0x36
 80029e8:	f009 f82c 	bl	800ba44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <HAL_InitTick+0xa0>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <HAL_InitTick+0xa0>)
 80029f2:	f043 0310 	orr.w	r3, r3, #16
 80029f6:	6413      	str	r3, [r2, #64]	; 0x40
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <HAL_InitTick+0xa0>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a04:	f107 0210 	add.w	r2, r7, #16
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f00c f912 	bl	800ec38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a14:	f00c f8fc 	bl	800ec10 <HAL_RCC_GetPCLK1Freq>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <HAL_InitTick+0xa4>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0c9b      	lsrs	r3, r3, #18
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_InitTick+0xa8>)
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_InitTick+0xac>)
 8002a30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_InitTick+0xa8>)
 8002a34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_InitTick+0xa8>)
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_InitTick+0xa8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_InitTick+0xa8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a4c:	4809      	ldr	r0, [pc, #36]	; (8002a74 <HAL_InitTick+0xa8>)
 8002a4e:	f00c fdcc 	bl	800f5ea <HAL_TIM_Base_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a58:	4806      	ldr	r0, [pc, #24]	; (8002a74 <HAL_InitTick+0xa8>)
 8002a5a:	f00c fe1d 	bl	800f698 <HAL_TIM_Base_Start_IT>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	e000      	b.n	8002a64 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3730      	adds	r7, #48	; 0x30
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	431bde83 	.word	0x431bde83
 8002a74:	20056f0c 	.word	0x20056f0c
 8002a78:	40001000 	.word	0x40001000

08002a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <NMI_Handler+0x4>

08002a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <HardFault_Handler+0x4>

08002a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <MemManage_Handler+0x4>

08002a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a92:	e7fe      	b.n	8002a92 <BusFault_Handler+0x4>

08002a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <UsageFault_Handler+0x4>

08002a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <DMA1_Stream0_IRQHandler+0x10>)
 8002aae:	f009 f9ff 	bl	800beb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20057050 	.word	0x20057050

08002abc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <DMA1_Stream4_IRQHandler+0x10>)
 8002ac2:	f009 f9f5 	bl	800beb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20056ff0 	.word	0x20056ff0

08002ad0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <CAN1_RX0_IRQHandler+0x10>)
 8002ad6:	f008 fc8d 	bl	800b3f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20056d30 	.word	0x20056d30

08002ae4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <TIM6_DAC_IRQHandler+0x10>)
 8002aea:	f00d fa8f 	bl	801000c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20056f0c 	.word	0x20056f0c

08002af8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <CAN2_RX0_IRQHandler+0x10>)
 8002afe:	f008 fc79 	bl	800b3f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20056d08 	.word	0x20056d08

08002b0c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <LTDC_IRQHandler+0x10>)
 8002b12:	f00a f9fb 	bl	800cf0c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20056e18 	.word	0x20056e18

08002b20 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <DMA2D_IRQHandler+0x10>)
 8002b26:	f009 fc87 	bl	800c438 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20056d7c 	.word	0x20056d7c

08002b34 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <QUADSPI_IRQHandler+0x10>)
 8002b3a:	f00a fd9f 	bl	800d67c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20056ec0 	.word	0x20056ec0

08002b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
	return 1;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_kill>:

int _kill(int pid, int sig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b62:	f023 f9df 	bl	8025f24 <__errno>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2216      	movs	r2, #22
 8002b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_exit>:

void _exit (int status)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ffe7 	bl	8002b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b8a:	e7fe      	b.n	8002b8a <_exit+0x12>

08002b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e00a      	b.n	8002bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b9e:	f3af 8000 	nop.w
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	60ba      	str	r2, [r7, #8]
 8002baa:	b2ca      	uxtb	r2, r1
 8002bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dbf0      	blt.n	8002b9e <_read+0x12>
	}

return len;
 8002bbc:	687b      	ldr	r3, [r7, #4]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e009      	b.n	8002bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	60ba      	str	r2, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3301      	adds	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dbf1      	blt.n	8002bd8 <_write+0x12>
	}
	return len;
 8002bf4:	687b      	ldr	r3, [r7, #4]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <_close>:

int _close(int file)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	return -1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c26:	605a      	str	r2, [r3, #4]
	return 0;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <_isatty>:

int _isatty(int file)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c3e:	2301      	movs	r3, #1
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	return 0;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <_sbrk+0x5c>)
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <_sbrk+0x60>)
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <_sbrk+0x64>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <_sbrk+0x68>)
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d207      	bcs.n	8002ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c98:	f023 f944 	bl	8025f24 <__errno>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	e009      	b.n	8002cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <_sbrk+0x64>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <_sbrk+0x64>)
 8002cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20080000 	.word	0x20080000
 8002cc8:	00000400 	.word	0x00000400
 8002ccc:	20000288 	.word	0x20000288
 8002cd0:	20057108 	.word	0x20057108

08002cd4 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08e      	sub	sp, #56	; 0x38
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cf4:	463b      	mov	r3, r7
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	615a      	str	r2, [r3, #20]
 8002d04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d06:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d08:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <MX_TIM3_Init+0xe8>)
 8002d0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d0c:	4b2a      	ldr	r3, [pc, #168]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 8002d18:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d1a:	2286      	movs	r2, #134	; 0x86
 8002d1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d24:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d2a:	4823      	ldr	r0, [pc, #140]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d2c:	f00c fc5d 	bl	800f5ea <HAL_TIM_Base_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d36:	f7ff fd3d 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d44:	4619      	mov	r1, r3
 8002d46:	481c      	ldr	r0, [pc, #112]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d48:	f00d fb90 	bl	801046c <HAL_TIM_ConfigClockSource>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d52:	f7ff fd2f 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d56:	4818      	ldr	r0, [pc, #96]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d58:	f00c fd16 	bl	800f788 <HAL_TIM_PWM_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d62:	f7ff fd27 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	4619      	mov	r1, r3
 8002d74:	4810      	ldr	r0, [pc, #64]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d76:	f00e f901 	bl	8010f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002d80:	f7ff fd18 	bl	80027b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d84:	2360      	movs	r3, #96	; 0x60
 8002d86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d94:	463b      	mov	r3, r7
 8002d96:	2200      	movs	r2, #0
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4807      	ldr	r0, [pc, #28]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002d9c:	f00d fa56 	bl	801024c <HAL_TIM_PWM_ConfigChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002da6:	f7ff fd05 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002daa:	4803      	ldr	r0, [pc, #12]	; (8002db8 <MX_TIM3_Init+0xe4>)
 8002dac:	f000 f91e 	bl	8002fec <HAL_TIM_MspPostInit>

}
 8002db0:	bf00      	nop
 8002db2:	3738      	adds	r7, #56	; 0x38
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20056fa4 	.word	0x20056fa4
 8002dbc:	40000400 	.word	0x40000400

08002dc0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	; 0x38
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de0:	463b      	mov	r3, r7
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002df2:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002df4:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <MX_TIM4_Init+0xe8>)
 8002df6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfe:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e06:	22d7      	movs	r2, #215	; 0xd7
 8002e08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0a:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e16:	4823      	ldr	r0, [pc, #140]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e18:	f00c fbe7 	bl	800f5ea <HAL_TIM_Base_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002e22:	f7ff fcc7 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e30:	4619      	mov	r1, r3
 8002e32:	481c      	ldr	r0, [pc, #112]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e34:	f00d fb1a 	bl	801046c <HAL_TIM_ConfigClockSource>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002e3e:	f7ff fcb9 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e42:	4818      	ldr	r0, [pc, #96]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e44:	f00c fca0 	bl	800f788 <HAL_TIM_PWM_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002e4e:	f7ff fcb1 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4810      	ldr	r0, [pc, #64]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e62:	f00e f88b 	bl	8010f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002e6c:	f7ff fca2 	bl	80027b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e70:	2360      	movs	r3, #96	; 0x60
 8002e72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e80:	463b      	mov	r3, r7
 8002e82:	2200      	movs	r2, #0
 8002e84:	4619      	mov	r1, r3
 8002e86:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e88:	f00d f9e0 	bl	801024c <HAL_TIM_PWM_ConfigChannel>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002e92:	f7ff fc8f 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e96:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <MX_TIM4_Init+0xe4>)
 8002e98:	f000 f8a8 	bl	8002fec <HAL_TIM_MspPostInit>

}
 8002e9c:	bf00      	nop
 8002e9e:	3738      	adds	r7, #56	; 0x38
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20056f58 	.word	0x20056f58
 8002ea8:	40000800 	.word	0x40000800

08002eac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a45      	ldr	r2, [pc, #276]	; (8002fd0 <HAL_TIM_Base_MspInit+0x124>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d142      	bne.n	8002f44 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ebe:	4b45      	ldr	r3, [pc, #276]	; (8002fd4 <HAL_TIM_Base_MspInit+0x128>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a44      	ldr	r2, [pc, #272]	; (8002fd4 <HAL_TIM_Base_MspInit+0x128>)
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <HAL_TIM_Base_MspInit+0x128>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002ed6:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002ed8:	4a40      	ldr	r2, [pc, #256]	; (8002fdc <HAL_TIM_Base_MspInit+0x130>)
 8002eda:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002edc:	4b3e      	ldr	r3, [pc, #248]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002ede:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002ee2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ee4:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002ee6:	2240      	movs	r2, #64	; 0x40
 8002ee8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eea:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002ef0:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ef8:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002efe:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f00:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f06:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002f0e:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f14:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002f1a:	482f      	ldr	r0, [pc, #188]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002f1c:	f008 fe98 	bl	800bc50 <HAL_DMA_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8002f26:	f7ff fc45 	bl	80027b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2a      	ldr	r2, [pc, #168]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8002f30:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <HAL_TIM_Base_MspInit+0x12c>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002f42:	e040      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_TIM_Base_MspInit+0x134>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d13b      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f4e:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_TIM_Base_MspInit+0x128>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a20      	ldr	r2, [pc, #128]	; (8002fd4 <HAL_TIM_Base_MspInit+0x128>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_TIM_Base_MspInit+0x128>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f6a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002f6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f72:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002f76:	2240      	movs	r2, #64	; 0x40
 8002f78:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f86:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f8e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f96:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002faa:	480e      	ldr	r0, [pc, #56]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002fac:	f008 fe50 	bl	800bc50 <HAL_DMA_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 8002fb6:	f7ff fbfd 	bl	80027b4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc0:	4a08      	ldr	r2, [pc, #32]	; (8002fe4 <HAL_TIM_Base_MspInit+0x138>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	20056ff0 	.word	0x20056ff0
 8002fdc:	40026070 	.word	0x40026070
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	20057050 	.word	0x20057050
 8002fe8:	40026010 	.word	0x40026010

08002fec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_TIM_MspPostInit+0xa8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d11c      	bne.n	8003048 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_TIM_MspPostInit+0xac>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a21      	ldr	r2, [pc, #132]	; (8003098 <HAL_TIM_MspPostInit+0xac>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <HAL_TIM_MspPostInit+0xac>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003026:	2310      	movs	r3, #16
 8003028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003036:	2302      	movs	r3, #2
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303a:	f107 0314 	add.w	r3, r7, #20
 800303e:	4619      	mov	r1, r3
 8003040:	4816      	ldr	r0, [pc, #88]	; (800309c <HAL_TIM_MspPostInit+0xb0>)
 8003042:	f009 fba7 	bl	800c794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003046:	e021      	b.n	800308c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <HAL_TIM_MspPostInit+0xb4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d11c      	bne.n	800308c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_TIM_MspPostInit+0xac>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a10      	ldr	r2, [pc, #64]	; (8003098 <HAL_TIM_MspPostInit+0xac>)
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_TIM_MspPostInit+0xac>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800306a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	2300      	movs	r3, #0
 800307a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800307c:	2302      	movs	r3, #2
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	4807      	ldr	r0, [pc, #28]	; (80030a4 <HAL_TIM_MspPostInit+0xb8>)
 8003088:	f009 fb84 	bl	800c794 <HAL_GPIO_Init>
}
 800308c:	bf00      	nop
 800308e:	3728      	adds	r7, #40	; 0x28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40000400 	.word	0x40000400
 8003098:	40023800 	.word	0x40023800
 800309c:	40020400 	.word	0x40020400
 80030a0:	40000800 	.word	0x40000800
 80030a4:	40020c00 	.word	0x40020c00

080030a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030ac:	480d      	ldr	r0, [pc, #52]	; (80030e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030ae:	490e      	ldr	r1, [pc, #56]	; (80030e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030b0:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b4:	e002      	b.n	80030bc <LoopCopyDataInit>

080030b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ba:	3304      	adds	r3, #4

080030bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c0:	d3f9      	bcc.n	80030b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030c4:	4c0b      	ldr	r4, [pc, #44]	; (80030f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c8:	e001      	b.n	80030ce <LoopFillZerobss>

080030ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030cc:	3204      	adds	r2, #4

080030ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d0:	d3fb      	bcc.n	80030ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030d2:	f007 f9d9 	bl	800a488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030d6:	f022 ff3d 	bl	8025f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030da:	f7ff fabb 	bl	8002654 <main>
  bx  lr    
 80030de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030e0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80030e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e8:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80030ec:	080d8aa8 	.word	0x080d8aa8
  ldr r2, =_sbss
 80030f0:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80030f4:	20057104 	.word	0x20057104

080030f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f8:	e7fe      	b.n	80030f8 <ADC_IRQHandler>

080030fa <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80030fe:	f001 fbdf 	bl	80048c0 <touchgfx_init>
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}

08003106 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800310a:	f001 fc03 	bl	8004914 <touchgfx_taskEntry>
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    {
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
    }
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	0802b3f0 	.word	0x0802b3f0

08003134 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
    }
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ffe9 	bl	8003114 <_ZN8touchgfx15TouchControllerD1Ev>
 8003142:	2104      	movs	r1, #4
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f022 fd86 	bl	8025c56 <_ZdlPvj>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ffbd 	bl	8003114 <_ZN8touchgfx15TouchControllerD1Ev>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	0802b3d8 	.word	0x0802b3d8

080031a8 <_ZN20STM32TouchControllerD0Ev>:
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ffe7 	bl	8003184 <_ZN20STM32TouchControllerD1Ev>
 80031b6:	2104      	movs	r1, #4
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f022 fd4c 	bl	8025c56 <_ZdlPvj>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]

}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]

}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]

}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    {
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
    }
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	0802c2f8 	.word	0x0802c2f8

0800322c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    }
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffe9 	bl	800320c <_ZN8touchgfx3HALD1Ev>
 800323a:	217c      	movs	r1, #124	; 0x7c
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f022 fd0a 	bl	8025c56 <_ZdlPvj>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4610      	mov	r0, r2
 8003294:	4798      	blx	r3
 8003296:	4603      	mov	r3, r0
 8003298:	e000      	b.n	800329c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 800329a:	2300      	movs	r3, #0
        }
    }
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f012 fde9 	bl	8015e84 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	33a0      	adds	r3, #160	; 0xa0
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4798      	blx	r3
    }
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
    {
        return false;
 80032d0:	2300      	movs	r3, #0
    }
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80032f8:	f44f 7125 	mov.w	r1, #660	; 0x294
 80032fc:	4811      	ldr	r0, [pc, #68]	; (8003344 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80032fe:	f022 fddf 	bl	8025ec0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2da      	uxtb	r2, r3
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8003322:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf14      	ite	ne
 800332a:	2301      	movne	r3, #1
 800332c:	2300      	moveq	r3, #0
 800332e:	b2da      	uxtb	r2, r3
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8003332:	701a      	strb	r2, [r3, #0]
    }
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	0802a708 	.word	0x0802a708
 8003340:	0802a740 	.word	0x0802a740
 8003344:	0802a790 	.word	0x0802a790
 8003348:	200566f6 	.word	0x200566f6
 800334c:	200566f7 	.word	0x200566f7

08003350 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003358:	2300      	movs	r3, #0
    }
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	4610      	mov	r0, r2
 8003382:	4798      	blx	r3
        }
    }
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3318      	adds	r3, #24
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4610      	mov	r0, r2
 80033a4:	4798      	blx	r3
 80033a6:	4603      	mov	r3, r0
    }
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d017      	beq.n	80033f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d12a      	bne.n	8003426 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80033d2:	881a      	ldrh	r2, [r3, #0]
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80033d6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80033da:	881a      	ldrh	r2, [r3, #0]
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80033de:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	4b16      	ldr	r3, [pc, #88]	; (8003440 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80033e6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80033ea:	881a      	ldrh	r2, [r3, #0]
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80033ee:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80033f6:	e016      	b.n	8003426 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d012      	beq.n	8003426 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8003402:	881a      	ldrh	r2, [r3, #0]
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8003406:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800340a:	881a      	ldrh	r2, [r3, #0]
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800340e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8003416:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800341a:	881a      	ldrh	r2, [r3, #0]
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800341e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
    }
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	200566f0 	.word	0x200566f0
 8003438:	200566ec 	.word	0x200566ec
 800343c:	200566f2 	.word	0x200566f2
 8003440:	200566ee 	.word	0x200566ee
 8003444:	200566f4 	.word	0x200566f4

08003448 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	f011 fee7 	bl	8015226 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	4a05      	ldr	r2, [pc, #20]	; (8003480 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fecb 	bl	800320c <_ZN8touchgfx3HALD1Ev>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	0802b754 	.word	0x0802b754

08003484 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ffe7 	bl	8003460 <_ZN20TouchGFXGeneratedHALD1Ev>
 8003492:	217c      	movs	r1, #124	; 0x7c
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f022 fbde 	bl	8025c56 <_ZdlPvj>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ffca 	bl	8003448 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_ZN11TouchGFXHAL10initializeEv>:
{
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXHAL::initialize() {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f001 fee0 	bl	800528c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
/**
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 ff7a 	bl	80053d8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
/**
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address) {
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6839      	ldr	r1, [r7, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 ff79 	bl	80053f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 *
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect) {
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6839      	ldr	r1, [r7, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f001 ff81 	bl	8005420 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	f001 ff8e 	bl	800545c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <_ZN11TouchGFXHAL19configureInterruptsEv>:

/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts() {
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4618      	mov	r0, r3
 8003558:	f001 feca 	bl	80052f0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

	// custom code
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <_ZN11TouchGFXHAL19configureInterruptsEv+0x44>)
 800356e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	b29b      	uxth	r3, r3
 8003576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <_ZN11TouchGFXHAL19configureInterruptsEv+0x48>)
 8003582:	801a      	strh	r2, [r3, #0]
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40016800 	.word	0x40016800
 8003590:	2000028c 	.word	0x2000028c
 8003594:	2000028e 	.word	0x2000028e

08003598 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts() {
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 feb4 	bl	8005310 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts() {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 feb6 	bl	800532c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:

/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt() {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 feb8 	bl	8005348 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	4a05      	ldr	r2, [pc, #20]	; (8003600 <_ZN11TouchGFXHALD1Ev+0x20>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff35 	bl	8003460 <_ZN20TouchGFXGeneratedHALD1Ev>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	0802b408 	.word	0x0802b408

08003604 <_ZN11TouchGFXHALD0Ev>:
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ffe7 	bl	80035e0 <_ZN11TouchGFXHALD1Ev>
 8003612:	217c      	movs	r1, #124	; 0x7c
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f022 fb1e 	bl	8025c56 <_ZdlPvj>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8003628:	2200      	movs	r2, #0
 800362a:	2101      	movs	r1, #1
 800362c:	2001      	movs	r0, #1
 800362e:	f00d fff1 	bl	8011614 <osSemaphoreNew>
 8003632:	4603      	mov	r3, r0
 8003634:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8003636:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8003642:	4a0e      	ldr	r2, [pc, #56]	; (800367c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8003644:	2126      	movs	r1, #38	; 0x26
 8003646:	480e      	ldr	r0, [pc, #56]	; (8003680 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8003648:	f022 fc3a 	bl	8025ec0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800364c:	2200      	movs	r2, #0
 800364e:	2104      	movs	r1, #4
 8003650:	2001      	movs	r0, #1
 8003652:	f00e f939 	bl	80118c8 <osMessageQueueNew>
 8003656:	4603      	mov	r3, r0
 8003658:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800365a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8003666:	4a05      	ldr	r2, [pc, #20]	; (800367c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8003668:	212a      	movs	r1, #42	; 0x2a
 800366a:	4805      	ldr	r0, [pc, #20]	; (8003680 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800366c:	f022 fc28 	bl	8025ec0 <__assert_func>
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000290 	.word	0x20000290
 8003678:	0802a7d8 	.word	0x0802a7d8
 800367c:	0802a824 	.word	0x0802a824
 8003680:	0802a854 	.word	0x0802a854
 8003684:	20000294 	.word	0x20000294
 8003688:	0802a8d0 	.word	0x0802a8d0

0800368c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	4618      	mov	r0, r3
 800369a:	f00e f857 	bl	801174c <osSemaphoreAcquire>
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000290 	.word	0x20000290

080036a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f00e f8b1 	bl	8011818 <osSemaphoreRelease>
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000290 	.word	0x20000290

080036c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f00e f83e 	bl	801174c <osSemaphoreAcquire>
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000290 	.word	0x20000290

080036d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f00e f899 	bl	8011818 <osSemaphoreRelease>
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000290 	.word	0x20000290

080036f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	2300      	movs	r3, #0
 80036fa:	2200      	movs	r2, #0
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80036fe:	f00e f969 	bl	80119d4 <osMessageQueuePut>
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000294 	.word	0x20000294
 800370c:	2000000c 	.word	0x2000000c

08003710 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	1d39      	adds	r1, r7, #4
 800371c:	2300      	movs	r3, #0
 800371e:	2200      	movs	r2, #0
 8003720:	f00e f9cc 	bl	8011abc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	1d39      	adds	r1, r7, #4
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	2200      	movs	r2, #0
 8003730:	f00e f9c4 	bl	8011abc <osMessageQueueGet>
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000294 	.word	0x20000294

08003740 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	4618      	mov	r0, r3
 800374e:	f00d ff33 	bl	80115b8 <osDelay>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 800375a:	b580      	push	{r7, lr}
 800375c:	af00      	add	r7, sp, #0
    osThreadYield();
 800375e:	f00d fef9 	bl	8011554 <osThreadYield>
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <__NVIC_EnableIRQ>:
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	2b00      	cmp	r3, #0
 8003778:	db0b      	blt.n	8003792 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	4907      	ldr	r1, [pc, #28]	; (80037a0 <__NVIC_EnableIRQ+0x38>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2001      	movs	r0, #1
 800378a:	fa00 f202 	lsl.w	r2, r0, r2
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000e100 	.word	0xe000e100

080037a4 <__NVIC_DisableIRQ>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	db12      	blt.n	80037dc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	490a      	ldr	r1, [pc, #40]	; (80037e8 <__NVIC_DisableIRQ+0x44>)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2001      	movs	r0, #1
 80037c6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ca:	3320      	adds	r3, #32
 80037cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d0:	f3bf 8f4f 	dsb	sy
}
 80037d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037d6:	f3bf 8f6f 	isb	sy
}
 80037da:	bf00      	nop
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000e100 	.word	0xe000e100

080037ec <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
        : color(0)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
    {
    }
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
    }
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
    {
 8003828:	4a04      	ldr	r2, [pc, #16]	; (800383c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	601a      	str	r2, [r3, #0]
    }
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	0802b524 	.word	0x0802b524

08003840 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
    }
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ffe9 	bl	8003820 <_ZN8touchgfx9DMA_QueueD1Ev>
 800384e:	2104      	movs	r1, #4
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f022 fa00 	bl	8025c56 <_ZdlPvj>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3344      	adds	r3, #68	; 0x44
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
    }
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
    {
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	601a      	str	r2, [r3, #0]
    }
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	0802c838 	.word	0x0802c838

0800389c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    }
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ffe9 	bl	800387c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80038aa:	210c      	movs	r1, #12
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f022 f9d2 	bl	8025c56 <_ZdlPvj>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	721a      	strb	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	725a      	strb	r2, [r3, #9]
    {
    }
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	0802c838 	.word	0x0802c838

080038f0 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80038f8:	2301      	movs	r3, #1
    }
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3328      	adds	r3, #40	; 0x28
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4610      	mov	r0, r2
 800391a:	4798      	blx	r3
    }
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
        return instance;
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
    }
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	200566f8 	.word	0x200566f8

0800393c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4610      	mov	r0, r2
 8003954:	4798      	blx	r3
    }
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8003966:	f7ff ffdd 	bl	8003924 <_ZN8touchgfx3HAL11getInstanceEv>
 800396a:	4603      	mov	r3, r0
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ffe5 	bl	800393c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	330c      	adds	r3, #12
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff30 	bl	80037ec <_ZN8touchgfx9colortypeC1Ev>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	330c      	adds	r3, #12
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7ff ff87 	bl	80038bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80039ae:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <_ZN10STM32F7DMAC1Ev+0x50>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f103 000c 	add.w	r0, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3320      	adds	r3, #32
 80039be:	2260      	movs	r2, #96	; 0x60
 80039c0:	4619      	mov	r1, r3
 80039c2:	f012 fbc9 	bl	8016158 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3320      	adds	r3, #32
 80039ca:	245f      	movs	r4, #95	; 0x5f
 80039cc:	461d      	mov	r5, r3
 80039ce:	2c00      	cmp	r4, #0
 80039d0:	db05      	blt.n	80039de <_ZN10STM32F7DMAC1Ev+0x46>
 80039d2:	4628      	mov	r0, r5
 80039d4:	f7ff ffd1 	bl	800397a <_ZN8touchgfx6BlitOpC1Ev>
 80039d8:	3520      	adds	r5, #32
 80039da:	3c01      	subs	r4, #1
 80039dc:	e7f7      	b.n	80039ce <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bdb0      	pop	{r4, r5, r7, pc}
 80039e8:	0802b4d4 	.word	0x0802b4d4

080039ec <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <_ZN10STM32F7DMAD1Ev+0x30>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80039fa:	205a      	movs	r0, #90	; 0x5a
 80039fc:	f7ff fed2 	bl	80037a4 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	330c      	adds	r3, #12
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 faad 	bl	8003f64 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff35 	bl	800387c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	0802b4d4 	.word	0x0802b4d4

08003a20 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
}
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ffdf 	bl	80039ec <_ZN10STM32F7DMAD1Ev>
 8003a2e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f022 f90f 	bl	8025c56 <_ZdlPvj>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003a52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a56:	6313      	str	r3, [r2, #48]	; 0x30
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	4a09      	ldr	r2, [pc, #36]	; (8003a90 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003a6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a6e:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003a76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a7a:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8003a7e:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <_ZN10STM32F7DMA10initializeEv+0x54>)
 8003a80:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003a82:	205a      	movs	r0, #90	; 0x5a
 8003a84:	f7ff fe70 	bl	8003768 <__NVIC_EnableIRQ>
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023800 	.word	0x40023800
 8003a94:	20056d7c 	.word	0x20056d7c
 8003a98:	0800395f 	.word	0x0800395f

08003a9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	2b0b      	cmp	r3, #11
 8003ab0:	d826      	bhi.n	8003b00 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8003ab2:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003af5 	.word	0x08003af5
 8003abc:	08003aef 	.word	0x08003aef
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003b01 	.word	0x08003b01
 8003ac8:	08003b01 	.word	0x08003b01
 8003acc:	08003b01 	.word	0x08003b01
 8003ad0:	08003b01 	.word	0x08003b01
 8003ad4:	08003afb 	.word	0x08003afb
 8003ad8:	08003afb 	.word	0x08003afb
 8003adc:	08003afb 	.word	0x08003afb
 8003ae0:	08003afb 	.word	0x08003afb
 8003ae4:	08003afb 	.word	0x08003afb
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
        break;
 8003aec:	e00e      	b.n	8003b0c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003aee:	2301      	movs	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
        break;
 8003af2:	e00b      	b.n	8003b0c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003af4:	2302      	movs	r3, #2
 8003af6:	60fb      	str	r3, [r7, #12]
        break;
 8003af8:	e008      	b.n	8003b0c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8003afa:	2305      	movs	r3, #5
 8003afc:	60fb      	str	r3, [r7, #12]
        break;
 8003afe:	e005      	b.n	8003b0c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8003b02:	4a06      	ldr	r2, [pc, #24]	; (8003b1c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8003b04:	2164      	movs	r1, #100	; 0x64
 8003b06:	4806      	ldr	r0, [pc, #24]	; (8003b20 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8003b08:	f022 f9da 	bl	8025ec0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	0802a914 	.word	0x0802a914
 8003b1c:	0802a930 	.word	0x0802a930
 8003b20:	0802a97c 	.word	0x0802a97c

08003b24 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	2b0a      	cmp	r3, #10
 8003b38:	d821      	bhi.n	8003b7e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8003b3a:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003b73 	.word	0x08003b73
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b7f 	.word	0x08003b7f
 8003b50:	08003b7f 	.word	0x08003b7f
 8003b54:	08003b7f 	.word	0x08003b7f
 8003b58:	08003b7f 	.word	0x08003b7f
 8003b5c:	08003b73 	.word	0x08003b73
 8003b60:	08003b73 	.word	0x08003b73
 8003b64:	08003b73 	.word	0x08003b73
 8003b68:	08003b73 	.word	0x08003b73
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
        break;
 8003b70:	e00b      	b.n	8003b8a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8003b72:	2301      	movs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
        break;
 8003b76:	e008      	b.n	8003b8a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	60fb      	str	r3, [r7, #12]
        break;
 8003b7c:	e005      	b.n	8003b8a <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8003b80:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8003b82:	2185      	movs	r1, #133	; 0x85
 8003b84:	4805      	ldr	r0, [pc, #20]	; (8003b9c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8003b86:	f022 f99b 	bl	8025ec0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	0802a914 	.word	0x0802a914
 8003b98:	0802a9f4 	.word	0x0802a9f4
 8003b9c:	0802a97c 	.word	0x0802a97c

08003ba0 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8003ba8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b089      	sub	sp, #36	; 0x24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	7f5b      	ldrb	r3, [r3, #29]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff67 	bl	8003a9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003bce:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	7f9b      	ldrb	r3, [r3, #30]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ff60 	bl	8003a9c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003bdc:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	7f9b      	ldrb	r3, [r3, #30]
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff9d 	bl	8003b24 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003bea:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	8b5b      	ldrh	r3, [r3, #26]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	8a9b      	ldrh	r3, [r3, #20]
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	4b97      	ldr	r3, [pc, #604]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	8b5b      	ldrh	r3, [r3, #26]
 8003c00:	461a      	mov	r2, r3
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	8a9b      	ldrh	r3, [r3, #20]
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	4b93      	ldr	r3, [pc, #588]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003c0a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	8b1b      	ldrh	r3, [r3, #24]
 8003c10:	461a      	mov	r2, r3
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	8a9b      	ldrh	r3, [r3, #20]
 8003c16:	1ad2      	subs	r2, r2, r3
 8003c18:	4b8f      	ldr	r3, [pc, #572]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003c1a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003c1c:	4a8e      	ldr	r2, [pc, #568]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	8adb      	ldrh	r3, [r3, #22]
 8003c26:	461a      	mov	r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	8a9b      	ldrh	r3, [r3, #20]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	4b89      	ldr	r3, [pc, #548]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003c32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	4b87      	ldr	r3, [pc, #540]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003c3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	4b85      	ldr	r3, [pc, #532]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003c42:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4c:	d037      	beq.n	8003cbe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8003c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c52:	f200 80e4 	bhi.w	8003e1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5a:	d015      	beq.n	8003c88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c60:	f200 80dd 	bhi.w	8003e1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d045      	beq.n	8003cf4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8003c68:	2b80      	cmp	r3, #128	; 0x80
 8003c6a:	f200 80d8 	bhi.w	8003e1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	f000 80c0 	beq.w	8003df4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	f200 80d2 	bhi.w	8003e1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	f000 80a5 	beq.w	8003dca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	f000 80b7 	beq.w	8003df4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8003c86:	e0ca      	b.n	8003e1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	7f1b      	ldrb	r3, [r3, #28]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4a71      	ldr	r2, [pc, #452]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003c92:	4b72      	ldr	r3, [pc, #456]	; (8003e5c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	4c6e      	ldr	r4, [pc, #440]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fdb2 	bl	8003808 <_ZNK8touchgfx9colortypecvmEv>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003ca8:	4a6b      	ldr	r2, [pc, #428]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	4b69      	ldr	r3, [pc, #420]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cb4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003cb6:	4b68      	ldr	r3, [pc, #416]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cb8:	4a69      	ldr	r2, [pc, #420]	; (8003e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003cba:	601a      	str	r2, [r3, #0]
        break;
 8003cbc:	e0c8      	b.n	8003e50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	7f1b      	ldrb	r3, [r3, #28]
 8003cc2:	061b      	lsls	r3, r3, #24
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4a64      	ldr	r2, [pc, #400]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cc8:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	4c61      	ldr	r4, [pc, #388]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fd97 	bl	8003808 <_ZNK8touchgfx9colortypecvmEv>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003cde:	4a5e      	ldr	r2, [pc, #376]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	4b5b      	ldr	r3, [pc, #364]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cea:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003cec:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003cee:	4a5c      	ldr	r2, [pc, #368]	; (8003e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003cf0:	601a      	str	r2, [r3, #0]
        break;
 8003cf2:	e0ad      	b.n	8003e50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	7f1b      	ldrb	r3, [r3, #28]
 8003d02:	061b      	lsls	r3, r3, #24
 8003d04:	461a      	mov	r2, r3
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	4a53      	ldr	r2, [pc, #332]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d10:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003d12:	4a51      	ldr	r2, [pc, #324]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d1e:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1d1a      	adds	r2, r3, #4
 8003d24:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d00d      	beq.n	8003d52 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8003d36:	e020      	b.n	8003d7a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003d38:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	8852      	ldrh	r2, [r2, #2]
 8003d44:	3a01      	subs	r2, #1
 8003d46:	0212      	lsls	r2, r2, #8
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4a43      	ldr	r2, [pc, #268]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	61d3      	str	r3, [r2, #28]
            break;
 8003d50:	e019      	b.n	8003d86 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	7f1b      	ldrb	r3, [r3, #28]
 8003d56:	2bff      	cmp	r3, #255	; 0xff
 8003d58:	d101      	bne.n	8003d5e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003d5e:	4b3e      	ldr	r3, [pc, #248]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	8852      	ldrh	r2, [r2, #2]
 8003d6a:	3a01      	subs	r2, #1
 8003d6c:	0212      	lsls	r2, r2, #8
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	4a39      	ldr	r2, [pc, #228]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d72:	f043 0310 	orr.w	r3, r3, #16
 8003d76:	61d3      	str	r3, [r2, #28]
            break;
 8003d78:	e005      	b.n	8003d86 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8003d7c:	4a3c      	ldr	r2, [pc, #240]	; (8003e70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8003d7e:	21ff      	movs	r1, #255	; 0xff
 8003d80:	483c      	ldr	r0, [pc, #240]	; (8003e74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8003d82:	f022 f89d 	bl	8025ec0 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003d86:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4a33      	ldr	r2, [pc, #204]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d8c:	f043 0320 	orr.w	r3, r3, #32
 8003d90:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 8003da8:	f7ff fcd7 	bl	800375a <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003dac:	e7f1      	b.n	8003d92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003dae:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003db0:	2210      	movs	r2, #16
 8003db2:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dbc:	4a28      	ldr	r2, [pc, #160]	; (8003e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003dbe:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 8003dc0:	e046      	b.n	8003e50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003dc2:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dc4:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8003dc6:	601a      	str	r2, [r3, #0]
      break;
 8003dc8:	e042      	b.n	8003e50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	7f1b      	ldrb	r3, [r3, #28]
 8003dce:	061b      	lsls	r3, r3, #24
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	4a20      	ldr	r2, [pc, #128]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ddc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dea:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003dee:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003df0:	601a      	str	r2, [r3, #0]
        break;
 8003df2:	e02d      	b.n	8003e50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	7f1b      	ldrb	r3, [r3, #28]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	4a15      	ldr	r2, [pc, #84]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e06:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003e08:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e14:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e18:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003e1a:	601a      	str	r2, [r3, #0]
        break;
 8003e1c:	e018      	b.n	8003e50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	7f1b      	ldrb	r3, [r3, #28]
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	461a      	mov	r2, r3
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	4a0b      	ldr	r2, [pc, #44]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e30:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	7f5a      	ldrb	r2, [r3, #29]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	7f9b      	ldrb	r3, [r3, #30]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d003      	beq.n	8003e46 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e40:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8003e42:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8003e44:	e003      	b.n	8003e4e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003e48:	f240 2201 	movw	r2, #513	; 0x201
 8003e4c:	601a      	str	r2, [r3, #0]
        break;
 8003e4e:	bf00      	nop
    }
}
 8003e50:	bf00      	nop
 8003e52:	3724      	adds	r7, #36	; 0x24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	4002b000 	.word	0x4002b000
 8003e5c:	0002000a 	.word	0x0002000a
 8003e60:	00020201 	.word	0x00020201
 8003e64:	00020009 	.word	0x00020009
 8003e68:	ffff00ef 	.word	0xffff00ef
 8003e6c:	0802aa44 	.word	0x0802aa44
 8003e70:	0802aa60 	.word	0x0802aa60
 8003e74:	0802a97c 	.word	0x0802a97c
 8003e78:	00010201 	.word	0x00010201

08003e7c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	7f9b      	ldrb	r3, [r3, #30]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff fe49 	bl	8003b24 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003e92:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003e94:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	8adb      	ldrh	r3, [r3, #22]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	8a9b      	ldrh	r3, [r3, #20]
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003eaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	4b28      	ldr	r3, [pc, #160]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003eb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	8b5b      	ldrh	r3, [r3, #26]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	8a9b      	ldrh	r3, [r3, #20]
 8003ebe:	1ad2      	subs	r2, r2, r3
 8003ec0:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d12e      	bne.n	8003f2a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	8b5b      	ldrh	r3, [r3, #26]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	8a9b      	ldrh	r3, [r3, #20]
 8003ed6:	1ad2      	subs	r2, r2, r3
 8003ed8:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003eda:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	8b5b      	ldrh	r3, [r3, #26]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	8a9b      	ldrh	r3, [r3, #20]
 8003ee6:	1ad2      	subs	r2, r2, r3
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003eea:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	7f1b      	ldrb	r3, [r3, #28]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003efc:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8003efe:	430b      	orrs	r3, r1
 8003f00:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	4c13      	ldr	r4, [pc, #76]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fc7d 	bl	8003808 <_ZNK8touchgfx9colortypecvmEv>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f18:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f20:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f24:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8003f26:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8003f28:	e010      	b.n	8003f4c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	4c06      	ldr	r4, [pc, #24]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fc63 	bl	8003808 <_ZNK8touchgfx9colortypecvmEv>
 8003f42:	4603      	mov	r3, r0
 8003f44:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8003f46:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003f48:	4a05      	ldr	r2, [pc, #20]	; (8003f60 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8003f4a:	601a      	str	r2, [r3, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}
 8003f54:	4002b000 	.word	0x4002b000
 8003f58:	00010009 	.word	0x00010009
 8003f5c:	00020201 	.word	0x00020201
 8003f60:	00030201 	.word	0x00030201

08003f64 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fc53 	bl	8003820 <_ZN8touchgfx9DMA_QueueD1Ev>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	0802c888 	.word	0x0802c888

08003f88 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ffe7 	bl	8003f64 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003f96:	2114      	movs	r1, #20
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f021 fe5c 	bl	8025c56 <_ZdlPvj>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
        : color(col)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	601a      	str	r2, [r3, #0]
    }
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	805a      	strh	r2, [r3, #2]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	809a      	strh	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	80da      	strh	r2, [r3, #6]
    {
    }
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6013      	str	r3, [r2, #0]
    }
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20056774 	.word	0x20056774

08004014 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    {
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
    }
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	0802b740 	.word	0x0802b740

08004034 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    }
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff ffe9 	bl	8004014 <_ZN8touchgfx12FontProviderD1Ev>
 8004042:	2104      	movs	r1, #4
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f021 fe06 	bl	8025c56 <_ZdlPvj>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8004062:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	611a      	str	r2, [r3, #16]
    {
    }
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	0802b730 	.word	0x0802b730

08004094 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    {
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	601a      	str	r2, [r3, #0]
    }
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	0802b730 	.word	0x0802b730

080040b4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
    }
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ffe9 	bl	8004094 <_ZN8touchgfx7MVPHeapD1Ev>
 80040c2:	2114      	movs	r1, #20
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f021 fdc6 	bl	8025c56 <_ZdlPvj>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
    {
    }
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
    {
    }
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
    {
    }
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
    {
    }
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
    {
    }
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
    {
    }
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
    {
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	601a      	str	r2, [r3, #0]
    }
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	0802b708 	.word	0x0802b708

08004178 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    }
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ffe9 	bl	8004158 <_ZN8touchgfx15UIEventListenerD1Ev>
 8004186:	2104      	movs	r1, #4
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f021 fd64 	bl	8025c56 <_ZdlPvj>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
    {
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
    }
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	0802d0f4 	.word	0x0802d0f4

080041b8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
    }
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ffe9 	bl	8004198 <_ZN8touchgfx3LCDD1Ev>
 80041c6:	2108      	movs	r1, #8
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f021 fd44 	bl	8025c56 <_ZdlPvj>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
    {
    }
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8004202:	6810      	ldr	r0, [r2, #0]
 8004204:	6851      	ldr	r1, [r2, #4]
 8004206:	c303      	stmia	r3!, {r0, r1}
    }
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    {
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	601a      	str	r2, [r3, #0]
    }
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	0802b6f0 	.word	0x0802b6f0

08004234 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    }
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ffe9 	bl	8004214 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8004242:	2104      	movs	r1, #4
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f021 fd06 	bl	8025c56 <_ZdlPvj>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	4a05      	ldr	r2, [pc, #20]	; (8004274 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff77 	bl	8004158 <_ZN8touchgfx15UIEventListenerD1Ev>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	0802d1cc 	.word	0x0802d1cc

08004278 <_ZN8touchgfx11ApplicationD0Ev>:
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ffe7 	bl	8004254 <_ZN8touchgfx11ApplicationD1Ev>
 8004286:	f44f 719c 	mov.w	r1, #312	; 0x138
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f021 fce3 	bl	8025c56 <_ZdlPvj>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f804 	bl	80042b0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00f      	beq.n	80042e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4610      	mov	r0, r2
 80042d6:	4798      	blx	r3
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4610      	mov	r0, r2
 80042fc:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	4a05      	ldr	r2, [pc, #20]	; (8004330 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff ff97 	bl	8004254 <_ZN8touchgfx11ApplicationD1Ev>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	0802b6ac 	.word	0x0802b6ac

08004334 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ffe7 	bl	8004310 <_ZN8touchgfx14MVPApplicationD1Ev>
 8004342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f021 fc85 	bl	8025c56 <_ZdlPvj>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	4a08      	ldr	r2, [pc, #32]	; (8004384 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fd07 	bl	8004d80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ffcb 	bl	8004310 <_ZN8touchgfx14MVPApplicationD1Ev>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	0802b650 	.word	0x0802b650

08004388 <_ZN23FrontendApplicationBaseD0Ev>:
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ffe1 	bl	8004358 <_ZN23FrontendApplicationBaseD1Ev>
 8004396:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f021 fc5b 	bl	8025c56 <_ZdlPvj>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	4a05      	ldr	r2, [pc, #20]	; (80043cc <_ZN19FrontendApplicationD1Ev+0x20>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ffcb 	bl	8004358 <_ZN23FrontendApplicationBaseD1Ev>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	0802b60c 	.word	0x0802b60c

080043d0 <_ZN19FrontendApplicationD0Ev>:
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ffe7 	bl	80043ac <_ZN19FrontendApplicationD1Ev>
 80043de:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f021 fc37 	bl	8025c56 <_ZdlPvj>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004400:	4618      	mov	r0, r3
 8004402:	f004 fd1f 	bl	8008e44 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4618      	mov	r0, r3
 800440a:	f014 fb59 	bl	8018ac0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	805a      	strh	r2, [r3, #2]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	809a      	strh	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	80da      	strh	r2, [r3, #6]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	811a      	strh	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	815a      	strh	r2, [r3, #10]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	819a      	strh	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	739a      	strb	r2, [r3, #14]
        {
        }
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ffd5 	bl	8004416 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	611a      	str	r2, [r3, #16]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	829a      	strh	r2, [r3, #20]
    {
    }
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8004492:	4a55      	ldr	r2, [pc, #340]	; (80045e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	611a      	str	r2, [r3, #16]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	615a      	str	r2, [r3, #20]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	619a      	str	r2, [r3, #24]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	331c      	adds	r3, #28
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ffcb 	bl	800445c <_ZN8touchgfx8GesturesC1Ev>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	64da      	str	r2, [r3, #76]	; 0x4c
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3350      	adds	r3, #80	; 0x50
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fd58 	bl	8003fc6 <_ZN8touchgfx4RectC1Ev>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	659a      	str	r2, [r3, #88]	; 0x58
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	65da      	str	r2, [r3, #92]	; 0x5c
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	661a      	str	r2, [r3, #96]	; 0x60
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	671a      	str	r2, [r3, #112]	; 0x70
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800459e:	4a13      	ldr	r2, [pc, #76]	; (80045ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80045a4:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80045a6:	8b3b      	ldrh	r3, [r7, #24]
 80045a8:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80045aa:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80045ac:	8bbb      	ldrh	r3, [r7, #28]
 80045ae:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80045bc:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80045c4:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80045c6:	8b3a      	ldrh	r2, [r7, #24]
 80045c8:	8bbb      	ldrh	r3, [r7, #28]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	bf34      	ite	cc
 80045ce:	2301      	movcc	r3, #1
 80045d0:	2300      	movcs	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	0802c2f8 	.word	0x0802c2f8
 80045ec:	200566f8 	.word	0x200566f8
 80045f0:	200566ec 	.word	0x200566ec
 80045f4:	200566ee 	.word	0x200566ee
 80045f8:	200566f0 	.word	0x200566f0
 80045fc:	200566f2 	.word	0x200566f2
 8004600:	200566f4 	.word	0x200566f4

08004604 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f001 fbb5 	bl	8005d80 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	f7ff fd0b 	bl	8004054 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800463e:	4a04      	ldr	r2, [pc, #16]	; (8004650 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	601a      	str	r2, [r3, #0]
    {

    }
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	0802b5f8 	.word	0x0802b5f8

08004654 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__tcf_0+0xc>)
 800465a:	f000 f965 	bl	8004928 <_ZN12FrontendHeapD1Ev>
 800465e:	bd80      	pop	{r7, pc}
 8004660:	200002b0 	.word	0x200002b0

08004664 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f3bf 8f5b 	dmb	ish
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf0c      	ite	eq
 800467a:	2301      	moveq	r3, #1
 800467c:	2300      	movne	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d013      	beq.n	80046ac <_ZN12FrontendHeap11getInstanceEv+0x48>
 8004684:	480b      	ldr	r0, [pc, #44]	; (80046b4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8004686:	f021 fae8 	bl	8025c5a <__cxa_guard_acquire>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <_ZN12FrontendHeap11getInstanceEv+0x48>
 800469a:	4807      	ldr	r0, [pc, #28]	; (80046b8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800469c:	f000 f868 	bl	8004770 <_ZN12FrontendHeapC1Ev>
 80046a0:	4804      	ldr	r0, [pc, #16]	; (80046b4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80046a2:	f021 fae6 	bl	8025c72 <__cxa_guard_release>
 80046a6:	4805      	ldr	r0, [pc, #20]	; (80046bc <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80046a8:	f021 fc28 	bl	8025efc <atexit>
        return instance;
 80046ac:	4b02      	ldr	r3, [pc, #8]	; (80046b8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80046ae:	4618      	mov	r0, r3
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20022a90 	.word	0x20022a90
 80046b8:	200002b0 	.word	0x200002b0
 80046bc:	08004655 	.word	0x08004655

080046c0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fcdf 	bl	8004094 <_ZN8touchgfx7MVPHeapD1Ev>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	0802b5f8 	.word	0x0802b5f8

080046e4 <_ZN16FrontendHeapBaseD0Ev>:
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ffe7 	bl	80046c0 <_ZN16FrontendHeapBaseD1Ev>
 80046f2:	2114      	movs	r1, #20
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f021 faae 	bl	8025c56 <_ZdlPvj>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4618      	mov	r0, r3
 8004710:	f010 fba4 	bl	8014e5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004714:	4a03      	ldr	r2, [pc, #12]	; (8004724 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	0802b5c4 	.word	0x0802b5c4

08004728 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4618      	mov	r0, r3
 8004734:	f010 fb92 	bl	8014e5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004738:	4a03      	ldr	r2, [pc, #12]	; (8004748 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	0802b590 	.word	0x0802b590

0800474c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	f010 fb80 	bl	8014e5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800475c:	4a03      	ldr	r2, [pc, #12]	; (800476c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	0802b55c 	.word	0x0802b55c

08004770 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004770:	b5b0      	push	{r4, r5, r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af02      	add	r7, sp, #8
 8004776:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f103 0414 	add.w	r4, r3, #20
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <_ZN12FrontendHeapC1Ev+0x8c>)
 800478a:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <_ZN12FrontendHeapC1Ev+0x90>)
 8004790:	440b      	add	r3, r1
                     app(model, *this)
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	462a      	mov	r2, r5
 8004798:	4621      	mov	r1, r4
 800479a:	f7ff ff41 	bl	8004620 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800479e:	4a19      	ldr	r2, [pc, #100]	; (8004804 <_ZN12FrontendHeapC1Ev+0x94>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3314      	adds	r3, #20
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ffab 	bl	8004704 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	332c      	adds	r3, #44	; 0x2c
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff ffb8 	bl	8004728 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <_ZN12FrontendHeapC1Ev+0x8c>)
 80047bc:	4413      	add	r3, r2
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff ffc4 	bl	800474c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <_ZN12FrontendHeapC1Ev+0x98>)
 80047c8:	4413      	add	r3, r2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f004 fb2c 	bl	8008e28 <_ZN5ModelC1Ev>
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <_ZN12FrontendHeapC1Ev+0x90>)
 80047d4:	4413      	add	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	490b      	ldr	r1, [pc, #44]	; (8004808 <_ZN12FrontendHeapC1Ev+0x98>)
 80047da:	4411      	add	r1, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4618      	mov	r0, r3
 80047e0:	f004 fb0c 	bl	8008dfc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <_ZN12FrontendHeapC1Ev+0x90>)
 80047ea:	4413      	add	r3, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	f7ff ff09 	bl	8004604 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bdb0      	pop	{r4, r5, r7, pc}
 80047fc:	00022670 	.word	0x00022670
 8004800:	00022688 	.word	0x00022688
 8004804:	0802b548 	.word	0x0802b548
 8004808:	00022684 	.word	0x00022684

0800480c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	8bbb      	ldrh	r3, [r7, #28]
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	8b3b      	ldrh	r3, [r7, #24]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	f7ff fe2b 	bl	8004484 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800482e:	4a04      	ldr	r2, [pc, #16]	; (8004840 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	601a      	str	r2, [r3, #0]
    }
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	0802b754 	.word	0x0802b754

08004844 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	8bbb      	ldrh	r3, [r7, #28]
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	8b3b      	ldrh	r3, [r7, #24]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	f7ff ffd3 	bl	800480c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004866:	4a04      	ldr	r2, [pc, #16]	; (8004878 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	601a      	str	r2, [r3, #0]
    }
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	0802b408 	.word	0x0802b408

0800487c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	4a04      	ldr	r2, [pc, #16]	; (8004898 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	0802b3f0 	.word	0x0802b3f0

0800489c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff ffe8 	bl	800487c <_ZN8touchgfx15TouchControllerC1Ev>
 80048ac:	4a03      	ldr	r2, [pc, #12]	; (80048bc <_ZN20STM32TouchControllerC1Ev+0x20>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	0802b3d8 	.word	0x0802b3d8

080048c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80048c6:	f000 fffb 	bl	80058c0 <_ZN14BitmapDatabase11getInstanceEv>
 80048ca:	4604      	mov	r4, r0
 80048cc:	f001 f802 	bl	80058d4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80048d0:	4603      	mov	r3, r0
 80048d2:	4619      	mov	r1, r3
 80048d4:	2300      	movs	r3, #0
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	2300      	movs	r3, #0
 80048da:	2200      	movs	r2, #0
 80048dc:	4620      	mov	r0, r4
 80048de:	f017 faaf 	bl	801be40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80048e2:	4809      	ldr	r0, [pc, #36]	; (8004908 <touchgfx_init+0x48>)
 80048e4:	f7ff fb86 	bl	8003ff4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80048e8:	2000      	movs	r0, #0
 80048ea:	f003 ffbb 	bl	8008864 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80048ee:	4807      	ldr	r0, [pc, #28]	; (800490c <touchgfx_init+0x4c>)
 80048f0:	f017 f9e8 	bl	801bcc4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80048f4:	f7ff feb6 	bl	8004664 <_ZN12FrontendHeap11getInstanceEv>
 80048f8:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80048fa:	4805      	ldr	r0, [pc, #20]	; (8004910 <touchgfx_init+0x50>)
 80048fc:	f7fe fdde 	bl	80034bc <_ZN11TouchGFXHAL10initializeEv>
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	bd90      	pop	{r4, r7, pc}
 8004908:	20023710 	.word	0x20023710
 800490c:	20000010 	.word	0x20000010
 8004910:	20023714 	.word	0x20023714

08004914 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8004918:	4802      	ldr	r0, [pc, #8]	; (8004924 <touchgfx_taskEntry+0x10>)
 800491a:	f010 fce8 	bl	80152ee <_ZN8touchgfx3HAL9taskEntryEv>
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20023714 	.word	0x20023714

08004928 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	4a10      	ldr	r2, [pc, #64]	; (8004974 <_ZN12FrontendHeapD1Ev+0x4c>)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <_ZN12FrontendHeapD1Ev+0x50>)
 800493a:	4413      	add	r3, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fd35 	bl	80043ac <_ZN19FrontendApplicationD1Ev>
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4b0d      	ldr	r3, [pc, #52]	; (800497c <_ZN12FrontendHeapD1Ev+0x54>)
 8004946:	4413      	add	r3, r2
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f82b 	bl	80049a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	332c      	adds	r3, #44	; 0x2c
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f848 	bl	80049e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3314      	adds	r3, #20
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f867 	bl	8004a30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff feab 	bl	80046c0 <_ZN16FrontendHeapBaseD1Ev>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	0802b548 	.word	0x0802b548
 8004978:	00022688 	.word	0x00022688
 800497c:	00022670 	.word	0x00022670

08004980 <_ZN12FrontendHeapD0Ev>:
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ffcd 	bl	8004928 <_ZN12FrontendHeapD1Ev>
 800498e:	4904      	ldr	r1, [pc, #16]	; (80049a0 <_ZN12FrontendHeapD0Ev+0x20>)
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f021 f960 	bl	8025c56 <_ZdlPvj>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	000227e0 	.word	0x000227e0

080049a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f010 fa4f 	bl	8014e58 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	0802b55c 	.word	0x0802b55c

080049c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ffe7 	bl	80049a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80049d6:	2114      	movs	r1, #20
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f021 f93c 	bl	8025c56 <_ZdlPvj>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	4a05      	ldr	r2, [pc, #20]	; (8004a08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f010 fa2d 	bl	8014e58 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	0802b590 	.word	0x0802b590

08004a0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ffe7 	bl	80049e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004a1a:	4904      	ldr	r1, [pc, #16]	; (8004a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x20>)
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f021 f91a 	bl	8025c56 <_ZdlPvj>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	00022644 	.word	0x00022644

08004a30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f010 fa09 	bl	8014e58 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	0802b5c4 	.word	0x0802b5c4

08004a54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff ffe7 	bl	8004a30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004a62:	2118      	movs	r1, #24
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f021 f8f6 	bl	8025c56 <_ZdlPvj>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fb87 	bl	8004198 <_ZN8touchgfx3LCDD1Ev>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	0802e1c4 	.word	0x0802e1c4

08004a98 <_ZN8touchgfx8LCD24bppD0Ev>:
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff ffe7 	bl	8004a74 <_ZN8touchgfx8LCD24bppD1Ev>
 8004aa6:	2158      	movs	r1, #88	; 0x58
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f021 f8d4 	bl	8025c56 <_ZdlPvj>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <_Z41__static_initialization_and_destruction_0ii>:
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b094      	sub	sp, #80	; 0x50
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f040 8129 	bne.w	8004d1c <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	f040 8123 	bne.w	8004d1c <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ae8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004aec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004af0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004af4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004afc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	461a      	mov	r2, r3
 8004b08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004b1a:	f107 0320 	add.w	r3, r7, #32
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fa41 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8004b26:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8004b28:	bf00      	nop
 8004b2a:	461a      	mov	r2, r3
};

namespace colors
{
    using namespace touchgfx;
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004b2c:	4b89      	ldr	r3, [pc, #548]	; (8004d54 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	23ff      	movs	r3, #255	; 0xff
 8004b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004b4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004b5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	461a      	mov	r2, r3
 8004b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004b74:	f107 031c 	add.w	r3, r7, #28
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fa14 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8004b80:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8004b82:	bf00      	nop
 8004b84:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8004b86:	4b74      	ldr	r3, [pc, #464]	; (8004d58 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004b90:	23ff      	movs	r3, #255	; 0xff
 8004b92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b9c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ba0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ba4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ba8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004bb4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004bb8:	041b      	lsls	r3, r3, #16
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004bce:	f107 0318 	add.w	r3, r7, #24
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff f9e7 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8004bda:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8004bdc:	bf00      	nop
 8004bde:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8004be0:	4b5e      	ldr	r3, [pc, #376]	; (8004d5c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bea:	2300      	movs	r3, #0
 8004bec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004bf0:	23ff      	movs	r3, #255	; 0xff
 8004bf2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004bf6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004bfa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004bfe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004c02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004c06:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004c0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004c0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c12:	041b      	lsls	r3, r3, #16
 8004c14:	461a      	mov	r2, r3
 8004c16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004c28:	f107 0314 	add.w	r3, r7, #20
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff f9ba 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8004c34:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8004c36:	bf00      	nop
 8004c38:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8004c3a:	4b49      	ldr	r3, [pc, #292]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	23f7      	movs	r3, #247	; 0xf7
 8004c40:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004c44:	234c      	movs	r3, #76	; 0x4c
 8004c46:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004c50:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004c54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004c58:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004c5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004c60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c64:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004c68:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	431a      	orrs	r2, r3
 8004c78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004c82:	f107 0310 	add.w	r3, r7, #16
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff f98d 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8004c8e:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8004c90:	bf00      	nop
 8004c92:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8004c94:	4b33      	ldr	r3, [pc, #204]	; (8004d64 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	23f7      	movs	r3, #247	; 0xf7
 8004c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004c9e:	23d2      	movs	r3, #210	; 0xd2
 8004ca0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004caa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004cae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8004cb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004cbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004cc2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004cdc:	f107 030c 	add.w	r3, r7, #12
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f960 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8004cea:	bf00      	nop
 8004cec:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8004cee:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8004cf0:	601a      	str	r2, [r3, #0]
static STM32TouchController tc;
 8004cf2:	481e      	ldr	r0, [pc, #120]	; (8004d6c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004cf4:	f7ff fdd2 	bl	800489c <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8004cf8:	481d      	ldr	r0, [pc, #116]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004cfa:	f7fe fe4d 	bl	8003998 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8004cfe:	481d      	ldr	r0, [pc, #116]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004d00:	f019 fb00 	bl	801e304 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8004d04:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004d08:	9301      	str	r3, [sp, #4]
 8004d0a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	4b16      	ldr	r3, [pc, #88]	; (8004d6c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004d12:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004d14:	4916      	ldr	r1, [pc, #88]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004d16:	4818      	ldr	r0, [pc, #96]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004d18:	f7ff fd94 	bl	8004844 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d113      	bne.n	8004d4a <_Z41__static_initialization_and_destruction_0ii+0x292>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10e      	bne.n	8004d4a <_Z41__static_initialization_and_destruction_0ii+0x292>
 8004d2c:	4812      	ldr	r0, [pc, #72]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8004d2e:	f7fe fc57 	bl	80035e0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8004d32:	4812      	ldr	r0, [pc, #72]	; (8004d7c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8004d34:	f000 f846 	bl	8004dc4 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8004d38:	480e      	ldr	r0, [pc, #56]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004d3a:	f7ff fe9b 	bl	8004a74 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8004d3e:	480c      	ldr	r0, [pc, #48]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004d40:	f7fe fe54 	bl	80039ec <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8004d44:	4809      	ldr	r0, [pc, #36]	; (8004d6c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004d46:	f7fe fa1d 	bl	8003184 <_ZN20STM32TouchControllerD1Ev>
}
 8004d4a:	bf00      	nop
 8004d4c:	3748      	adds	r7, #72	; 0x48
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000298 	.word	0x20000298
 8004d58:	2000029c 	.word	0x2000029c
 8004d5c:	200002a0 	.word	0x200002a0
 8004d60:	200002a4 	.word	0x200002a4
 8004d64:	200002a8 	.word	0x200002a8
 8004d68:	200002ac 	.word	0x200002ac
 8004d6c:	20022a94 	.word	0x20022a94
 8004d70:	20022a98 	.word	0x20022a98
 8004d74:	200236b8 	.word	0x200236b8
 8004d78:	20023714 	.word	0x20023714
 8004d7c:	20000010 	.word	0x20000010

08004d80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	4a05      	ldr	r2, [pc, #20]	; (8004da0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fa3f 	bl	8004214 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	0802b694 	.word	0x0802b694

08004da4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ffe7 	bl	8004d80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004db2:	2110      	movs	r1, #16
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f020 ff4e 	bl	8025c56 <_ZdlPvj>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_05 = 5; // JetBrainsMono_Regular_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_06 = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	4a05      	ldr	r2, [pc, #20]	; (8004de4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff f91d 	bl	8004014 <_ZN8touchgfx12FontProviderD1Ev>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	0802b820 	.word	0x0802b820

08004de8 <_ZN23ApplicationFontProviderD0Ev>:
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ffe7 	bl	8004dc4 <_ZN23ApplicationFontProviderD1Ev>
 8004df6:	2104      	movs	r1, #4
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f020 ff2c 	bl	8025c56 <_ZdlPvj>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8004e10:	2301      	movs	r3, #1
    }
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8004e26:	230c      	movs	r3, #12
    }
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004e40:	887a      	ldrh	r2, [r7, #2]
 8004e42:	4613      	mov	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4413      	add	r3, r2
    }
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8004e68:	887a      	ldrh	r2, [r7, #2]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	3308      	adds	r3, #8
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	4413      	add	r3, r2
    }
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004e8c:	2301      	movs	r3, #1
    }
 8004e8e:	4618      	mov	r0, r3
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x18>)
    }
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	0002263c 	.word	0x0002263c

08004eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004ec4:	887b      	ldrh	r3, [r7, #2]
 8004ec6:	4a06      	ldr	r2, [pc, #24]	; (8004ee0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8004ec8:	fb02 f303 	mul.w	r3, r2, r3
 8004ecc:	3308      	adds	r3, #8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4413      	add	r3, r2
    }
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	0002263c 	.word	0x0002263c

08004ee4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	4a06      	ldr	r2, [pc, #24]	; (8004f0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
 8004ef8:	3308      	adds	r3, #8
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4413      	add	r3, r2
    }
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	0002263c 	.word	0x0002263c

08004f10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8004f18:	2301      	movs	r3, #1
    }
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8004f2e:	2310      	movs	r3, #16
    }
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004f48:	887b      	ldrh	r3, [r7, #2]
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4413      	add	r3, r2
    }
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8004f6a:	887b      	ldrh	r3, [r7, #2]
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	3308      	adds	r3, #8
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4413      	add	r3, r2
    }
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	68d2      	ldr	r2, [r2, #12]
 8004f90:	1052      	asrs	r2, r2, #1
 8004f92:	1899      	adds	r1, r3, r2
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	e00a      	b.n	8004fbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	1052      	asrs	r2, r2, #1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	4413      	add	r3, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4798      	blx	r3
    }
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d010      	beq.n	8004ffa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d107      	bne.n	8004ff0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8004ffa:	2300      	movs	r3, #0
    }
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <_GLOBAL__sub_I_touchgfx_init>:
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
 800500c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005010:	2001      	movs	r0, #1
 8005012:	f7ff fd51 	bl	8004ab8 <_Z41__static_initialization_and_destruction_0ii>
 8005016:	bd80      	pop	{r7, pc}

08005018 <_GLOBAL__sub_D_touchgfx_init>:
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
 800501c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005020:	2000      	movs	r0, #0
 8005022:	f7ff fd49 	bl	8004ab8 <_Z41__static_initialization_and_destruction_0ii>
 8005026:	bd80      	pop	{r7, pc}

08005028 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	331c      	adds	r3, #28
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4798      	blx	r3
    }
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005072:	3301      	adds	r3, #1
 8005074:	b2da      	uxtb	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d105      	bne.n	80050ac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e027      	b.n	80050fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d123      	bne.n	80050fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d014      	beq.n	80050e4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3390      	adds	r3, #144	; 0x90
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	461a      	mov	r2, r3
 80050ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d008      	beq.n	80050e4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	f083 0301 	eor.w	r3, r3, #1
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80050e4:	2300      	movs	r3, #0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e002      	b.n	80050fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e000      	b.n	80050fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80050fa:	2300      	movs	r3, #0
    }
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	200566f6 	.word	0x200566f6

08005108 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <__NVIC_EnableIRQ>:
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	2b00      	cmp	r3, #0
 8005134:	db0b      	blt.n	800514e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	f003 021f 	and.w	r2, r3, #31
 800513c:	4907      	ldr	r1, [pc, #28]	; (800515c <__NVIC_EnableIRQ+0x38>)
 800513e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	2001      	movs	r0, #1
 8005146:	fa00 f202 	lsl.w	r2, r0, r2
 800514a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	e000e100 	.word	0xe000e100

08005160 <__NVIC_DisableIRQ>:
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800516a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516e:	2b00      	cmp	r3, #0
 8005170:	db12      	blt.n	8005198 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	f003 021f 	and.w	r2, r3, #31
 8005178:	490a      	ldr	r1, [pc, #40]	; (80051a4 <__NVIC_DisableIRQ+0x44>)
 800517a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2001      	movs	r0, #1
 8005182:	fa00 f202 	lsl.w	r2, r0, r2
 8005186:	3320      	adds	r3, #32
 8005188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800518c:	f3bf 8f4f 	dsb	sy
}
 8005190:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005192:	f3bf 8f6f 	isb	sy
}
 8005196:	bf00      	nop
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000e100 	.word	0xe000e100

080051a8 <__NVIC_SetPriority>:
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	6039      	str	r1, [r7, #0]
 80051b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	db0a      	blt.n	80051d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	490c      	ldr	r1, [pc, #48]	; (80051f4 <__NVIC_SetPriority+0x4c>)
 80051c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c6:	0112      	lsls	r2, r2, #4
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	440b      	add	r3, r1
 80051cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80051d0:	e00a      	b.n	80051e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4908      	ldr	r1, [pc, #32]	; (80051f8 <__NVIC_SetPriority+0x50>)
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	3b04      	subs	r3, #4
 80051e0:	0112      	lsls	r2, r2, #4
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	440b      	add	r3, r1
 80051e6:	761a      	strb	r2, [r3, #24]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	e000e100 	.word	0xe000e100
 80051f8:	e000ed00 	.word	0xe000ed00

080051fc <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005202:	4b21      	ldr	r3, [pc, #132]	; (8005288 <SCB_CleanInvalidateDCache+0x8c>)
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800520a:	f3bf 8f4f 	dsb	sy
}
 800520e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <SCB_CleanInvalidateDCache+0x8c>)
 8005212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005216:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	0b5b      	lsrs	r3, r3, #13
 800521c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005220:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	08db      	lsrs	r3, r3, #3
 8005226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800522a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005234:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800523a:	4913      	ldr	r1, [pc, #76]	; (8005288 <SCB_CleanInvalidateDCache+0x8c>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	1e5a      	subs	r2, r3, #1
 8005246:	60ba      	str	r2, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d000      	beq.n	8005258 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8005256:	e7e9      	b.n	800522c <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1e5a      	subs	r2, r3, #1
 800525c:	60fa      	str	r2, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	bf14      	ite	ne
 8005262:	2301      	movne	r3, #1
 8005264:	2300      	moveq	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d000      	beq.n	800526e <SCB_CleanInvalidateDCache+0x72>
    do {
 800526c:	e7d9      	b.n	8005222 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800526e:	f3bf 8f4f 	dsb	sy
}
 8005272:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005274:	f3bf 8f6f 	isb	sy
}
 8005278:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000ed00 	.word	0xe000ed00

0800528c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800528c:	b5b0      	push	{r4, r5, r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4618      	mov	r0, r3
 8005298:	f010 f817 	bl	80152ca <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800529c:	687d      	ldr	r5, [r7, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	335c      	adds	r3, #92	; 0x5c
 80052a4:	681c      	ldr	r4, [r3, #0]
 80052a6:	f013 fd07 	bl	8018cb8 <_ZN8touchgfx11Application11getInstanceEv>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4619      	mov	r1, r3
 80052ae:	4628      	mov	r0, r5
 80052b0:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	490d      	ldr	r1, [pc, #52]	; (80052ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff ff26 	bl	8005108 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2101      	movs	r1, #1
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fee1 	bl	8005088 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3380      	adds	r3, #128	; 0x80
 80052ce:	681c      	ldr	r4, [r3, #0]
 80052d0:	2300      	movs	r3, #0
 80052d2:	2200      	movs	r2, #0
 80052d4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80052d8:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2101      	movs	r1, #1
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff feb0 	bl	8005044 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bdb0      	pop	{r4, r5, r7, pc}
 80052ec:	08003741 	.word	0x08003741

080052f0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80052f8:	2109      	movs	r1, #9
 80052fa:	205a      	movs	r0, #90	; 0x5a
 80052fc:	f7ff ff54 	bl	80051a8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8005300:	2109      	movs	r1, #9
 8005302:	2058      	movs	r0, #88	; 0x58
 8005304:	f7ff ff50 	bl	80051a8 <__NVIC_SetPriority>
}
 8005308:	bf00      	nop
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8005318:	205a      	movs	r0, #90	; 0x5a
 800531a:	f7ff ff03 	bl	8005124 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800531e:	2058      	movs	r0, #88	; 0x58
 8005320:	f7ff ff00 	bl	8005124 <__NVIC_EnableIRQ>
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8005334:	205a      	movs	r0, #90	; 0x5a
 8005336:	f7ff ff13 	bl	8005160 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800533a:	2058      	movs	r0, #88	; 0x58
 800533c:	f7ff ff10 	bl	8005160 <__NVIC_DisableIRQ>
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8005362:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	b29b      	uxth	r3, r3
 800536a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8005376:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8005378:	4b08      	ldr	r3, [pc, #32]	; (800539c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800537a:	881a      	ldrh	r2, [r3, #0]
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800537e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	4a04      	ldr	r2, [pc, #16]	; (8005398 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40016800 	.word	0x40016800
 800539c:	200237a8 	.word	0x200237a8
 80053a0:	200237aa 	.word	0x200237aa

080053a4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f00f ff72 	bl	8015298 <_ZN8touchgfx3HAL10beginFrameEv>
 80053b4:	4603      	mov	r3, r0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f00f ff71 	bl	80152b0 <_ZN8touchgfx3HAL8endFrameEv>
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80053e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40016884 	.word	0x40016884

080053f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80053fe:	4a06      	ldr	r2, [pc, #24]	; (8005418 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8005406:	2201      	movs	r2, #1
 8005408:	625a      	str	r2, [r3, #36]	; 0x24
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40016884 	.word	0x40016884
 800541c:	40016800 	.word	0x40016800

08005420 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f00f feff 	bl	8015232 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8005434:	4b08      	ldr	r3, [pc, #32]	; (8005458 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543c:	2b00      	cmp	r3, #0
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 800544a:	f7ff fed7 	bl	80051fc <SCB_CleanInvalidateDCache>
    }
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	e000ed00 	.word	0xe000ed00

0800545c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	f010 f846 	bl	8015502 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8005488:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800548a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005498:	b29b      	uxth	r3, r3
 800549a:	3301      	adds	r3, #1
 800549c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 800549e:	89fa      	ldrh	r2, [r7, #14]
 80054a0:	89bb      	ldrh	r3, [r7, #12]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d304      	bcc.n	80054b0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 80054a6:	89fa      	ldrh	r2, [r7, #14]
 80054a8:	89bb      	ldrh	r3, [r7, #12]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	e000      	b.n	80054b2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40016800 	.word	0x40016800

080054c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 80054e2:	f7ff fe8b 	bl	80051fc <SCB_CleanInvalidateDCache>
    }
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	e000ed00 	.word	0xe000ed00

080054f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80054fc:	4b08      	ldr	r3, [pc, #32]	; (8005520 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8005512:	f7ff fe73 	bl	80051fc <SCB_CleanInvalidateDCache>
    }
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	e000ed00 	.word	0xe000ed00

08005524 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <HAL_LTDC_LineEventCallback+0x74>)
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	4a1a      	ldr	r2, [pc, #104]	; (800559c <HAL_LTDC_LineEventCallback+0x78>)
 8005532:	8812      	ldrh	r2, [r2, #0]
 8005534:	4293      	cmp	r3, r2
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d017      	beq.n	8005572 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8005542:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <HAL_LTDC_LineEventCallback+0x7c>)
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f007 fdd5 	bl	800d0f8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800554e:	f7fe f9e9 	bl	8003924 <_ZN8touchgfx3HAL11getInstanceEv>
 8005552:	4603      	mov	r3, r0
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff fd85 	bl	8005064 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800555a:	f7fe f8c9 	bl	80036f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800555e:	f7fe f9e1 	bl	8003924 <_ZN8touchgfx3HAL11getInstanceEv>
 8005562:	4603      	mov	r3, r0
 8005564:	4618      	mov	r0, r3
 8005566:	f010 fc8d 	bl	8015e84 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800556a:	2000      	movs	r0, #0
 800556c:	f7fd fe2c 	bl	80031c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8005570:	e00e      	b.n	8005590 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_LTDC_LineEventCallback+0x78>)
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f007 fdbd 	bl	800d0f8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800557e:	2000      	movs	r0, #0
 8005580:	f7fd fe2d 	bl	80031de <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8005584:	f7fe f9ce 	bl	8003924 <_ZN8touchgfx3HAL11getInstanceEv>
 8005588:	4603      	mov	r3, r0
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fd4c 	bl	8005028 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40016800 	.word	0x40016800
 800559c:	200237a8 	.word	0x200237a8
 80055a0:	200237aa 	.word	0x200237aa

080055a4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b092      	sub	sp, #72	; 0x48
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	f040 8114 	bne.w	80057de <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055bc:	4293      	cmp	r3, r2
 80055be:	f040 810e 	bne.w	80057de <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80055ce:	2300      	movs	r3, #0
 80055d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055d4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80055d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80055dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80055e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80055ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055f0:	041b      	lsls	r3, r3, #16
 80055f2:	461a      	mov	r2, r3
 80055f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	431a      	orrs	r2, r3
 80055fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005600:	4313      	orrs	r3, r2
 8005602:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005606:	f107 0320 	add.w	r3, r7, #32
 800560a:	4611      	mov	r1, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe fccb 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8005612:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8005614:	bf00      	nop
 8005616:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8005618:	4b73      	ldr	r3, [pc, #460]	; (80057e8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	23ff      	movs	r3, #255	; 0xff
 800561e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005622:	2300      	movs	r3, #0
 8005624:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005628:	2300      	movs	r3, #0
 800562a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800562e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005632:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8005636:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005642:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005646:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	461a      	mov	r2, r3
 800564e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	431a      	orrs	r2, r3
 8005656:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800565a:	4313      	orrs	r3, r2
 800565c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005660:	f107 031c 	add.w	r3, r7, #28
 8005664:	4611      	mov	r1, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fc9e 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800566c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800566e:	bf00      	nop
 8005670:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8005672:	4b5e      	ldr	r3, [pc, #376]	; (80057ec <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	2300      	movs	r3, #0
 8005678:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800567c:	23ff      	movs	r3, #255	; 0xff
 800567e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8005682:	2300      	movs	r3, #0
 8005684:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005688:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800568c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005690:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005694:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8005698:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800569c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80056a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	461a      	mov	r2, r3
 80056a8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	431a      	orrs	r2, r3
 80056b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80056ba:	f107 0318 	add.w	r3, r7, #24
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe fc71 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80056c6:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80056c8:	bf00      	nop
 80056ca:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 80056cc:	4b48      	ldr	r3, [pc, #288]	; (80057f0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056d6:	2300      	movs	r3, #0
 80056d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80056dc:	23ff      	movs	r3, #255	; 0xff
 80056de:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80056e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80056e6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80056ea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80056ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80056f2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80056f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80056fa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	461a      	mov	r2, r3
 8005702:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	431a      	orrs	r2, r3
 800570a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800570e:	4313      	orrs	r3, r2
 8005710:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005714:	f107 0314 	add.w	r3, r7, #20
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fc44 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8005720:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8005722:	bf00      	nop
 8005724:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8005726:	4b33      	ldr	r3, [pc, #204]	; (80057f4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	23f7      	movs	r3, #247	; 0xf7
 800572c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005730:	234c      	movs	r3, #76	; 0x4c
 8005732:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005736:	2302      	movs	r3, #2
 8005738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800573c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005740:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005744:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005748:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800574c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005750:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005754:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	461a      	mov	r2, r3
 800575c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	431a      	orrs	r2, r3
 8005764:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005768:	4313      	orrs	r3, r2
 800576a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800576e:	f107 0310 	add.w	r3, r7, #16
 8005772:	4611      	mov	r1, r2
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fc17 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800577a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800577c:	bf00      	nop
 800577e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8005780:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	23f7      	movs	r3, #247	; 0xf7
 8005786:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800578a:	23d2      	movs	r3, #210	; 0xd2
 800578c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005790:	2302      	movs	r3, #2
 8005792:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005796:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800579a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800579e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80057aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80057ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	461a      	mov	r2, r3
 80057b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	431a      	orrs	r2, r3
 80057be:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80057c8:	f107 030c 	add.w	r3, r7, #12
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fbea 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80057d4:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 80057d6:	bf00      	nop
 80057d8:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 80057da:	4b08      	ldr	r3, [pc, #32]	; (80057fc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	bf00      	nop
 80057e0:	3748      	adds	r7, #72	; 0x48
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20023790 	.word	0x20023790
 80057ec:	20023794 	.word	0x20023794
 80057f0:	20023798 	.word	0x20023798
 80057f4:	2002379c 	.word	0x2002379c
 80057f8:	200237a0 	.word	0x200237a0
 80057fc:	200237a4 	.word	0x200237a4

08005800 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
 8005804:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005808:	2001      	movs	r0, #1
 800580a:	f7ff fecb 	bl	80055a4 <_Z41__static_initialization_and_destruction_0ii>
 800580e:	bd80      	pop	{r7, pc}

08005810 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800581c:	887b      	ldrh	r3, [r7, #2]
 800581e:	2b09      	cmp	r3, #9
 8005820:	d848      	bhi.n	80058b4 <_ZN23ApplicationFontProvider7getFontEt+0xa4>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	08005851 	.word	0x08005851
 800582c:	0800585b 	.word	0x0800585b
 8005830:	08005865 	.word	0x08005865
 8005834:	0800586f 	.word	0x0800586f
 8005838:	08005879 	.word	0x08005879
 800583c:	08005883 	.word	0x08005883
 8005840:	0800588d 	.word	0x0800588d
 8005844:	08005897 	.word	0x08005897
 8005848:	080058a1 	.word	0x080058a1
 800584c:	080058ab 	.word	0x080058ab
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005850:	f003 f880 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 8005854:	4603      	mov	r3, r0
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	e02d      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800585a:	f003 f87b 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 800585e:	4603      	mov	r3, r0
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	e028      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8005864:	f003 f876 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 8005868:	4603      	mov	r3, r0
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	e023      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800586e:	f003 f871 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 8005872:	4603      	mov	r3, r0
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	e01e      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8005878:	f003 f86c 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 800587c:	4603      	mov	r3, r0
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	e019      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_02:
        // JetBrainsMono_Regular_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8005882:	f003 f867 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 8005886:	4603      	mov	r3, r0
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	e014      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_03:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800588c:	f003 f862 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 8005890:	4603      	mov	r3, r0
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	e00f      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8005896:	f003 f85d 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 800589a:	4603      	mov	r3, r0
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	e00a      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_05:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80058a0:	f003 f858 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 80058a4:	4603      	mov	r3, r0
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	e005      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    case Typography::TYPOGRAPHY_06:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80058aa:	f003 f853 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 80058ae:	4603      	mov	r3, r0
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	e000      	b.n	80058b6 <_ZN23ApplicationFontProvider7getFontEt+0xa6>
    default:
        return 0;
 80058b4:	2300      	movs	r3, #0
    }
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop

080058c0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
    return bitmap_database;
 80058c4:	4b02      	ldr	r3, [pc, #8]	; (80058d0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	0802b82c 	.word	0x0802b82c

080058d4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80058d8:	2301      	movs	r3, #1
}
 80058da:	4618      	mov	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
    {
 80058ec:	4a04      	ldr	r2, [pc, #16]	; (8005900 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
    }
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	0802b9f4 	.word	0x0802b9f4

08005904 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
    }
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ffe9 	bl	80058e4 <_ZN8touchgfx4FontD1Ev>
 8005912:	2110      	movs	r1, #16
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f020 f99e 	bl	8025c56 <_ZdlPvj>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005924:	b590      	push	{r4, r7, lr}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8005930:	887b      	ldrh	r3, [r7, #2]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8005936:	2300      	movs	r3, #0
 8005938:	e010      	b.n	800595c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3308      	adds	r3, #8
 8005948:	681c      	ldr	r4, [r3, #0]
 800594a:	f107 030f 	add.w	r3, r7, #15
 800594e:	f107 0210 	add.w	r2, r7, #16
 8005952:	8879      	ldrh	r1, [r7, #2]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	47a0      	blx	r4
 8005958:	6178      	str	r0, [r7, #20]
        return glyph;
 800595a:	697b      	ldr	r3, [r7, #20]
    }
 800595c:	4618      	mov	r0, r3
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	bd90      	pop	{r4, r7, pc}

08005964 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	895b      	ldrh	r3, [r3, #10]
    }
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	899b      	ldrh	r3, [r3, #12]
    }
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	889b      	ldrh	r3, [r3, #4]
    }
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	889a      	ldrh	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	799b      	ldrb	r3, [r3, #6]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	4413      	add	r3, r2
 80059c0:	b29b      	uxth	r3, r3
    }
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	79db      	ldrb	r3, [r3, #7]
 80059da:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80059de:	b2db      	uxtb	r3, r3
    }
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	79db      	ldrb	r3, [r3, #7]
 80059f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80059fc:	b2db      	uxtb	r3, r3
    }
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
	...

08005a0c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff ff61 	bl	80058e4 <_ZN8touchgfx4FontD1Ev>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	0802d320 	.word	0x0802d320

08005a30 <_ZN8touchgfx9ConstFontD0Ev>:
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ffe7 	bl	8005a0c <_ZN8touchgfx9ConstFontD1Ev>
 8005a3e:	2118      	movs	r1, #24
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f020 f908 	bl	8025c56 <_ZdlPvj>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff ffd3 	bl	8005a0c <_ZN8touchgfx9ConstFontD1Ev>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	0802b8a0 	.word	0x0802b8a0

08005a74 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ffe7 	bl	8005a50 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005a82:	2128      	movs	r1, #40	; 0x28
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f020 f8e6 	bl	8025c56 <_ZdlPvj>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
    {
 8005a9c:	4a04      	ldr	r2, [pc, #16]	; (8005ab0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	601a      	str	r2, [r3, #0]
    }
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	0802b848 	.word	0x0802b848

08005ab4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
    }
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff ffe9 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>
 8005ac2:	2108      	movs	r1, #8
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f020 f8c6 	bl	8025c56 <_ZdlPvj>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	4a07      	ldr	r2, [pc, #28]	; (8005afc <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	889a      	ldrh	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	809a      	strh	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	0802b848 	.word	0x0802b848

08005b00 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8005b20:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	721a      	strb	r2, [r3, #8]
    {
    }
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	0802b87c 	.word	0x0802b87c

08005b44 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
    {
 8005b4c:	4a04      	ldr	r2, [pc, #16]	; (8005b60 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
    }
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	0802b87c 	.word	0x0802b87c

08005b64 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
    }
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff ffe9 	bl	8005b44 <_ZN8touchgfx10TransitionD1Ev>
 8005b72:	210c      	movs	r1, #12
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f020 f86e 	bl	8025c56 <_ZdlPvj>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
    {
    }
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
    {
    }
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
    {
    }
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8005bc8:	f013 f876 	bl	8018cb8 <_ZN8touchgfx11Application11getInstanceEv>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	3230      	adds	r2, #48	; 0x30
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	4790      	blx	r2
    }
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	605a      	str	r2, [r3, #4]
    }
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f013 f878 	bl	8018cfc <_ZN8touchgfx11ApplicationC1Ev>
 8005c0c:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8005c26:	6013      	str	r3, [r2, #0]
    }
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	0802b6ac 	.word	0x0802b6ac
 8005c38:	20056764 	.word	0x20056764

08005c3c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	601a      	str	r2, [r3, #0]
    }
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	721a      	strb	r2, [r3, #8]
    }
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	605a      	str	r2, [r3, #4]
    }
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8005ca0:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb0:	e002      	b.n	8005cb8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8005cb2:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
    }
 8005cb8:	4618      	mov	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	200566f8 	.word	0x200566f8

08005cc8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff ff90 	bl	8005bfc <_ZN8touchgfx14MVPApplicationC1Ev>
 8005cdc:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 f89f 	bl	8005e2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005cfe:	f7fd fe11 	bl	8003924 <_ZN8touchgfx3HAL11getInstanceEv>
 8005d02:	4603      	mov	r3, r0
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	3208      	adds	r2, #8
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8005d10:	2000      	movs	r0, #0
 8005d12:	f002 fda7 	bl	8008864 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8005d16:	f7ff ffbb 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f019 fbd2 	bl	801f4c6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	0802b650 	.word	0x0802b650

08005d30 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	4611      	mov	r1, r2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff ffe9 	bl	8005d30 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	3208      	adds	r2, #8
 8005d6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d72:	e883 0003 	stmia.w	r3, {r0, r1}
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b089      	sub	sp, #36	; 0x24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	f107 0008 	add.w	r0, r7, #8
 8005d9a:	f107 0318 	add.w	r3, r7, #24
 8005d9e:	cb0c      	ldmia	r3, {r2, r3}
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	f000 f85f 	bl	8005e64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8005da6:	f107 0308 	add.w	r3, r7, #8
 8005daa:	4619      	mov	r1, r3
 8005dac:	4620      	mov	r0, r4
 8005dae:	f7ff ffcb 	bl	8005d48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8005db2:	f107 0308 	add.w	r3, r7, #8
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe ffe2 	bl	8004d80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8005dc8:	bf00      	nop
 8005dca:	3724      	adds	r7, #36	; 0x24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd90      	pop	{r4, r7, pc}
 8005dd0:	08005dd5 	.word	0x08005dd5

08005dd4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005de8:	461a      	mov	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8005df4:	4804      	ldr	r0, [pc, #16]	; (8005e08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8005df6:	f000 f867 	bl	8005ec8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20056758 	.word	0x20056758
 8005e08:	20056754 	.word	0x20056754

08005e0c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	4a04      	ldr	r2, [pc, #16]	; (8005e28 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	0802b6f0 	.word	0x0802b6f0

08005e2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff ffe8 	bl	8005e0c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005e3c:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	609a      	str	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	60da      	str	r2, [r3, #12]
    }
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	0802b694 	.word	0x0802b694

08005e64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	4639      	mov	r1, r7
 8005e70:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff ffc8 	bl	8005e0c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8005e7c:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	605a      	str	r2, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	463a      	mov	r2, r7
 8005e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e92:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	0802b694 	.word	0x0802b694

08005ea4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fe32 	bl	8005b18 <_ZN8touchgfx10TransitionC1Ev>
 8005eb4:	4a03      	ldr	r2, [pc, #12]	; (8005ec4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	0802b858 	.word	0x0802b858

08005ec8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005ec8:	b590      	push	{r4, r7, lr}
 8005eca:	b08f      	sub	sp, #60	; 0x3c
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3320      	adds	r3, #32
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4798      	blx	r3
 8005ee8:	4603      	mov	r3, r0
 8005eea:	4a80      	ldr	r2, [pc, #512]	; (80060ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d805      	bhi.n	8005efc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8005ef0:	4b7f      	ldr	r3, [pc, #508]	; (80060f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8005ef2:	4a80      	ldr	r2, [pc, #512]	; (80060f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005ef4:	21a3      	movs	r1, #163	; 0xa3
 8005ef6:	4880      	ldr	r0, [pc, #512]	; (80060f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005ef8:	f01f ffe2 	bl	8025ec0 <__assert_func>
 8005efc:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3320      	adds	r3, #32
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4798      	blx	r3
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b0f      	cmp	r3, #15
 8005f14:	d805      	bhi.n	8005f22 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8005f16:	4b79      	ldr	r3, [pc, #484]	; (80060fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8005f18:	4a76      	ldr	r2, [pc, #472]	; (80060f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005f1a:	21a4      	movs	r1, #164	; 0xa4
 8005f1c:	4876      	ldr	r0, [pc, #472]	; (80060f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005f1e:	f01f ffcf 	bl	8025ec0 <__assert_func>
 8005f22:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3320      	adds	r3, #32
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4610      	mov	r0, r2
 8005f34:	4798      	blx	r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b0b      	cmp	r3, #11
 8005f3a:	d805      	bhi.n	8005f48 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8005f3c:	4b70      	ldr	r3, [pc, #448]	; (8006100 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8005f3e:	4a6d      	ldr	r2, [pc, #436]	; (80060f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8005f40:	21a5      	movs	r1, #165	; 0xa5
 8005f42:	486d      	ldr	r0, [pc, #436]	; (80060f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8005f44:	f01f ffbc 	bl	8025ec0 <__assert_func>
 8005f48:	bf00      	nop
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8005f56:	f012 feaf 	bl	8018cb8 <_ZN8touchgfx11Application11getInstanceEv>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f012 feb1 	bl	8018cc4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4798      	blx	r3
    if (*currentTrans)
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
    if (*currentScreen)
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4610      	mov	r0, r2
 8005fac:	4798      	blx	r3
    if (*currentPresenter)
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d008      	beq.n	8005fc8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4798      	blx	r3
    if (*currentScreen)
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4798      	blx	r3
    if (*currentPresenter)
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4798      	blx	r3
}
 8005ffa:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	2100      	movs	r1, #0
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f880 	bl	8006108 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8006008:	4603      	mov	r3, r0
 800600a:	4619      	mov	r1, r3
 800600c:	200c      	movs	r0, #12
 800600e:	f7ff fd77 	bl	8005b00 <_ZnwjPv>
 8006012:	4604      	mov	r4, r0
 8006014:	4620      	mov	r0, r4
 8006016:	f7ff ff45 	bl	8005ea4 <_ZN8touchgfx12NoTransitionC1Ev>
 800601a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2100      	movs	r1, #0
 8006022:	4618      	mov	r0, r3
 8006024:	f000 f883 	bl	800612e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8006028:	4603      	mov	r3, r0
 800602a:	4619      	mov	r1, r3
 800602c:	4835      	ldr	r0, [pc, #212]	; (8006104 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x23c>)
 800602e:	f7ff fd67 	bl	8005b00 <_ZnwjPv>
 8006032:	4604      	mov	r4, r0
 8006034:	4620      	mov	r0, r4
 8006036:	f003 f949 	bl	80092cc <_ZN11Screen1ViewC1Ev>
 800603a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f886 	bl	8006154 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8006048:	4603      	mov	r3, r0
 800604a:	4619      	mov	r1, r3
 800604c:	2010      	movs	r0, #16
 800604e:	f7ff fd57 	bl	8005b00 <_ZnwjPv>
 8006052:	4604      	mov	r4, r0
 8006054:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006056:	4620      	mov	r0, r4
 8006058:	f002 ffaa 	bl	8008fb0 <_ZN16Screen1PresenterC1ER11Screen1View>
 800605c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006062:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006068:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	3304      	adds	r3, #4
 800607a:	e000      	b.n	800607e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800607c:	2300      	movs	r3, #0
 800607e:	4619      	mov	r1, r3
 8006080:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006082:	f7ff fddb 	bl	8005c3c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	3304      	adds	r3, #4
 800608a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fdf0 	bl	8005c72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f86f 	bl	800617a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69f8      	ldr	r0, [r7, #28]
 80060b2:	4798      	blx	r3
    newPresenter->activate();
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69b8      	ldr	r0, [r7, #24]
 80060bc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80060be:	6979      	ldr	r1, [r7, #20]
 80060c0:	69f8      	ldr	r0, [r7, #28]
 80060c2:	f014 fad6 	bl	801a672 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3310      	adds	r3, #16
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6978      	ldr	r0, [r7, #20]
 80060d0:	4798      	blx	r3
    newTransition->invalidate();
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	4798      	blx	r3
}
 80060de:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	373c      	adds	r7, #60	; 0x3c
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd90      	pop	{r4, r7, pc}
 80060ea:	bf00      	nop
 80060ec:	0002263b 	.word	0x0002263b
 80060f0:	0802aaa0 	.word	0x0802aaa0
 80060f4:	0802ab30 	.word	0x0802ab30
 80060f8:	0802ac34 	.word	0x0802ac34
 80060fc:	0802ac7c 	.word	0x0802ac7c
 8006100:	0802ad20 	.word	0x0802ad20
 8006104:	0002263c 	.word	0x0002263c

08006108 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3324      	adds	r3, #36	; 0x24
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	887a      	ldrh	r2, [r7, #2]
 800611e:	4611      	mov	r1, r2
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
 8006124:	4603      	mov	r3, r0
    }
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	460b      	mov	r3, r1
 8006138:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3324      	adds	r3, #36	; 0x24
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	887a      	ldrh	r2, [r7, #2]
 8006144:	4611      	mov	r1, r2
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
 800614a:	4603      	mov	r3, r0
    }
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3324      	adds	r3, #36	; 0x24
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	887a      	ldrh	r2, [r7, #2]
 800616a:	4611      	mov	r1, r2
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
 8006170:	4603      	mov	r3, r0
    }
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <_ZN8touchgfx12NoTransitionD1Ev>:
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	4a05      	ldr	r2, [pc, #20]	; (80061b8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fccb 	bl	8005b44 <_ZN8touchgfx10TransitionD1Ev>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	0802b858 	.word	0x0802b858

080061bc <_ZN8touchgfx12NoTransitionD0Ev>:
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff ffe7 	bl	8006198 <_ZN8touchgfx12NoTransitionD1Ev>
 80061ca:	210c      	movs	r1, #12
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f01f fd42 	bl	8025c56 <_ZdlPvj>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <_Z41__static_initialization_and_destruction_0ii>:
 80061dc:	b580      	push	{r7, lr}
 80061de:	b092      	sub	sp, #72	; 0x48
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	f040 8114 	bne.w	8006416 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061f4:	4293      	cmp	r3, r2
 80061f6:	f040 810e 	bne.w	8006416 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80061fa:	2300      	movs	r3, #0
 80061fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006200:	2300      	movs	r3, #0
 8006202:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006206:	2300      	movs	r3, #0
 8006208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800620c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006214:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006218:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800621c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006220:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006224:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	461a      	mov	r2, r3
 800622c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	431a      	orrs	r2, r3
 8006234:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006238:	4313      	orrs	r3, r2
 800623a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800623e:	f107 0320 	add.w	r3, r7, #32
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f7fd feaf 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800624a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800624c:	bf00      	nop
 800624e:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8006250:	4b73      	ldr	r3, [pc, #460]	; (8006420 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	23ff      	movs	r3, #255	; 0xff
 8006256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800625a:	2300      	movs	r3, #0
 800625c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006260:	2300      	movs	r3, #0
 8006262:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8006266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800626a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800626e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006276:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800627a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800627e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	461a      	mov	r2, r3
 8006286:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	431a      	orrs	r2, r3
 800628e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006292:	4313      	orrs	r3, r2
 8006294:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006298:	f107 031c 	add.w	r3, r7, #28
 800629c:	4611      	mov	r1, r2
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fd fe82 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80062a4:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80062a6:	bf00      	nop
 80062a8:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80062aa:	4b5e      	ldr	r3, [pc, #376]	; (8006424 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	2300      	movs	r3, #0
 80062b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80062b4:	23ff      	movs	r3, #255	; 0xff
 80062b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80062ba:	2300      	movs	r3, #0
 80062bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80062c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80062c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80062cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80062d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80062d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	461a      	mov	r2, r3
 80062e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	431a      	orrs	r2, r3
 80062e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80062f2:	f107 0318 	add.w	r3, r7, #24
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fd fe55 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80062fe:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8006300:	bf00      	nop
 8006302:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8006304:	4b48      	ldr	r3, [pc, #288]	; (8006428 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	2300      	movs	r3, #0
 800630a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800630e:	2300      	movs	r3, #0
 8006310:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8006314:	23ff      	movs	r3, #255	; 0xff
 8006316:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800631a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800631e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8006322:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800632a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800632e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006332:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006336:	041b      	lsls	r3, r3, #16
 8006338:	461a      	mov	r2, r3
 800633a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	431a      	orrs	r2, r3
 8006342:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006346:	4313      	orrs	r3, r2
 8006348:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800634c:	f107 0314 	add.w	r3, r7, #20
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f7fd fe28 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8006358:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800635a:	bf00      	nop
 800635c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800635e:	4b33      	ldr	r3, [pc, #204]	; (800642c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	23f7      	movs	r3, #247	; 0xf7
 8006364:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8006368:	234c      	movs	r3, #76	; 0x4c
 800636a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800636e:	2302      	movs	r3, #2
 8006370:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006374:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006378:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800637c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006380:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006384:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006388:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800638c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	461a      	mov	r2, r3
 8006394:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	431a      	orrs	r2, r3
 800639c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80063a6:	f107 0310 	add.w	r3, r7, #16
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fd fdfb 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80063b2:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80063b4:	bf00      	nop
 80063b6:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	23f7      	movs	r3, #247	; 0xf7
 80063be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80063c2:	23d2      	movs	r3, #210	; 0xd2
 80063c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80063c8:	2302      	movs	r3, #2
 80063ca:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80063ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80063d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80063e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80063e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80063ea:	041b      	lsls	r3, r3, #16
 80063ec:	461a      	mov	r2, r3
 80063ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	431a      	orrs	r2, r3
 80063f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006400:	f107 030c 	add.w	r3, r7, #12
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f7fd fdce 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800640c:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800640e:	bf00      	nop
 8006410:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8006412:	4b08      	ldr	r3, [pc, #32]	; (8006434 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	bf00      	nop
 8006418:	3748      	adds	r7, #72	; 0x48
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	200237ac 	.word	0x200237ac
 8006424:	200237b0 	.word	0x200237b0
 8006428:	200237b4 	.word	0x200237b4
 800642c:	200237b8 	.word	0x200237b8
 8006430:	200237bc 	.word	0x200237bc
 8006434:	200237c0 	.word	0x200237c0

08006438 <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
 800643c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006440:	2001      	movs	r0, #1
 8006442:	f7ff fecb 	bl	80061dc <_Z41__static_initialization_and_destruction_0ii>
 8006446:	bd80      	pop	{r7, pc}

08006448 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
    }
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af08      	add	r7, sp, #32
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4611      	mov	r1, r2
 8006484:	461a      	mov	r2, r3
 8006486:	460b      	mov	r3, r1
 8006488:	80fb      	strh	r3, [r7, #6]
 800648a:	4613      	mov	r3, r2
 800648c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	88b9      	ldrh	r1, [r7, #4]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006496:	9306      	str	r3, [sp, #24]
 8006498:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800649a:	9305      	str	r3, [sp, #20]
 800649c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064a0:	9304      	str	r3, [sp, #16]
 80064a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064a6:	9303      	str	r3, [sp, #12]
 80064a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	7f3b      	ldrb	r3, [r7, #28]
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	7e3b      	ldrb	r3, [r7, #24]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	460b      	mov	r3, r1
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	f013 fc33 	bl	8019d24 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80064be:	4a0a      	ldr	r2, [pc, #40]	; (80064e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c8:	619a      	str	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ce:	61da      	str	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064d4:	621a      	str	r2, [r3, #32]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064da:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	0802b8a0 	.word	0x0802b8a0

080064ec <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	889b      	ldrh	r3, [r3, #4]
 8006500:	0adb      	lsrs	r3, r3, #11
 8006502:	b29b      	uxth	r3, r3
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4413      	add	r3, r2
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4413      	add	r3, r2
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800651e:	b480      	push	{r7}
 8006520:	b089      	sub	sp, #36	; 0x24
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	460b      	mov	r3, r1
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7b1b      	ldrb	r3, [r3, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800653a:	2300      	movs	r3, #0
 800653c:	e030      	b.n	80065a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	69da      	ldr	r2, [r3, #28]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	7b5b      	ldrb	r3, [r3, #13]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	b21b      	sxth	r3, r3
 800654e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006552:	b219      	sxth	r1, r3
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	7adb      	ldrb	r3, [r3, #11]
 8006558:	b21b      	sxth	r3, r3
 800655a:	430b      	orrs	r3, r1
 800655c:	b21b      	sxth	r3, r3
 800655e:	b29b      	uxth	r3, r3
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	7b1b      	ldrb	r3, [r3, #12]
 800656a:	837b      	strh	r3, [r7, #26]
 800656c:	8b7b      	ldrh	r3, [r7, #26]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d015      	beq.n	800659e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	897a      	ldrh	r2, [r7, #10]
 8006578:	429a      	cmp	r2, r3
 800657a:	d103      	bne.n	8006584 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006582:	e00d      	b.n	80065a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	897a      	ldrh	r2, [r7, #10]
 800658a:	429a      	cmp	r2, r3
 800658c:	d306      	bcc.n	800659c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800658e:	8b7b      	ldrh	r3, [r7, #26]
 8006590:	3b01      	subs	r3, #1
 8006592:	837b      	strh	r3, [r7, #26]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3304      	adds	r3, #4
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	e7e7      	b.n	800656c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800659c:	bf00      	nop
        }
    }
    return 0;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3724      	adds	r7, #36	; 0x24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80065b4:	4a14      	ldr	r2, [pc, #80]	; (8006608 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3304      	adds	r3, #4
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fd fd01 	bl	8003fc6 <_ZN8touchgfx4RectC1Ev>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	330c      	adds	r3, #12
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fd fcfc 	bl	8003fc6 <_ZN8touchgfx4RectC1Ev>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	615a      	str	r2, [r3, #20]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	619a      	str	r2, [r3, #24]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	61da      	str	r2, [r3, #28]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	841a      	strh	r2, [r3, #32]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	845a      	strh	r2, [r3, #34]	; 0x22
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	0802d2bc 	.word	0x0802d2bc

0800660c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
    {
 8006614:	4a04      	ldr	r2, [pc, #16]	; (8006628 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
    }
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	0802d2bc 	.word	0x0802d2bc

0800662c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
    }
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff ffe9 	bl	800660c <_ZN8touchgfx8DrawableD1Ev>
 800663a:	2128      	movs	r1, #40	; 0x28
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f01f fb0a 	bl	8025c56 <_ZdlPvj>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	887a      	ldrh	r2, [r7, #2]
 800665c:	809a      	strh	r2, [r3, #4]
    }
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	887a      	ldrh	r2, [r7, #2]
 800667a:	80da      	strh	r2, [r3, #6]
    }
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	887a      	ldrh	r2, [r7, #2]
 8006698:	811a      	strh	r2, [r3, #8]
    }
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	887a      	ldrh	r2, [r7, #2]
 80066b6:	815a      	strh	r2, [r3, #10]
    }
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
    {
    }
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
    {
    }
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
    {
    }
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
    {
    }
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
    {
    }
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	807b      	strh	r3, [r7, #2]
 800673a:	4613      	mov	r3, r2
 800673c:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3350      	adds	r3, #80	; 0x50
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	8879      	ldrh	r1, [r7, #2]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800674e:	b292      	uxth	r2, r2
 8006750:	1a8a      	subs	r2, r1, r2
 8006752:	b292      	uxth	r2, r2
 8006754:	b210      	sxth	r0, r2
 8006756:	8839      	ldrh	r1, [r7, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800675e:	b292      	uxth	r2, r2
 8006760:	1a8a      	subs	r2, r1, r2
 8006762:	b292      	uxth	r2, r2
 8006764:	b212      	sxth	r2, r2
 8006766:	4601      	mov	r1, r0
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
    }
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff ff14 	bl	80065ac <_ZN8touchgfx8DrawableC1Ev>
 8006784:	4a05      	ldr	r2, [pc, #20]	; (800679c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	0802bfd4 	.word	0x0802bfd4

080067a0 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	4a05      	ldr	r2, [pc, #20]	; (80067d8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff ff1f 	bl	800660c <_ZN8touchgfx8DrawableD1Ev>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	0802bfd4 	.word	0x0802bfd4

080067dc <_ZN8touchgfx9ContainerD0Ev>:
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff ffe7 	bl	80067b8 <_ZN8touchgfx9ContainerD1Ev>
 80067ea:	212c      	movs	r1, #44	; 0x2c
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f01f fa32 	bl	8025c56 <_ZdlPvj>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
        return 0;
 8006804:	2300      	movs	r3, #0
    }
 8006806:	4618      	mov	r0, r3
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	4608      	mov	r0, r1
 800681c:	4611      	mov	r1, r2
 800681e:	461a      	mov	r2, r3
 8006820:	4603      	mov	r3, r0
 8006822:	817b      	strh	r3, [r7, #10]
 8006824:	460b      	mov	r3, r1
 8006826:	813b      	strh	r3, [r7, #8]
 8006828:	4613      	mov	r3, r2
 800682a:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 800682c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006830:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006834:	4619      	mov	r1, r3
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f80c 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800683c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006844:	4619      	mov	r1, r3
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f822 	bl	8006890 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	807b      	strh	r3, [r7, #2]
 8006860:	4613      	mov	r3, r2
 8006862:	803b      	strh	r3, [r7, #0]
        setX(x);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	332c      	adds	r3, #44	; 0x2c
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006870:	4611      	mov	r1, r2
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	4798      	blx	r3
        setY(y);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3330      	adds	r3, #48	; 0x30
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006882:	4611      	mov	r1, r2
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	4798      	blx	r3
    }
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	807b      	strh	r3, [r7, #2]
 800689c:	4613      	mov	r3, r2
 800689e:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3334      	adds	r3, #52	; 0x34
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80068ac:	4611      	mov	r1, r2
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
        setHeight(height);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3338      	adds	r3, #56	; 0x38
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f9b7 2000 	ldrsh.w	r2, [r7]
 80068be:	4611      	mov	r1, r2
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
    }
 80068c4:	bf00      	nop
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
        return visible;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
        return touchable;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800690e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006916:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800691e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff ffe1 	bl	8006900 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]
    }
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
    {
 800695c:	4a06      	ldr	r2, [pc, #24]	; (8006978 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff ff26 	bl	80067b8 <_ZN8touchgfx9ContainerD1Ev>
    }
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	0802d3b4 	.word	0x0802d3b4

0800697c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
    }
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ffe5 	bl	8006954 <_ZN8touchgfx6ScreenD1Ev>
 800698a:	213c      	movs	r1, #60	; 0x3c
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f01f f962 	bl	8025c56 <_ZdlPvj>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
    {
    }
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
    {
    }
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
    {
    }
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
    {
    }
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
    {
    }
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3304      	adds	r3, #4
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f00e fac1 	bl	8014f9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	607b      	str	r3, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	817b      	strh	r3, [r7, #10]
 8006a30:	4613      	mov	r3, r2
 8006a32:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff ff48 	bl	80068cc <_ZNK8touchgfx8Drawable9isVisibleEv>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff ff4e 	bl	80068e6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
        }
    }
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fd9a 	bl	80065ac <_ZN8touchgfx8DrawableC1Ev>
 8006a78:	4a03      	ldr	r2, [pc, #12]	; (8006a88 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	0802b974 	.word	0x0802b974

08006a8c <_ZN8touchgfx6WidgetD1Ev>:
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	4a05      	ldr	r2, [pc, #20]	; (8006aac <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff fdb5 	bl	800660c <_ZN8touchgfx8DrawableD1Ev>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	0802b974 	.word	0x0802b974

08006ab0 <_ZN8touchgfx6WidgetD0Ev>:
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff ffe7 	bl	8006a8c <_ZN8touchgfx6WidgetD1Ev>
 8006abe:	2128      	movs	r1, #40	; 0x28
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f01f f8c8 	bl	8025c56 <_ZdlPvj>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4618      	mov	r0, r3
 8006adc:	2326      	movs	r3, #38	; 0x26
 8006ade:	461a      	mov	r2, r3
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f01f fa79 	bl	8025fd8 <memset>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff ffbd 	bl	8006a68 <_ZN8touchgfx6WidgetC1Ev>
 8006aee:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	22ff      	movs	r2, #255	; 0xff
 8006af8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3328      	adds	r3, #40	; 0x28
 8006b00:	2100      	movs	r1, #0
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fd fa50 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	0802ce70 	.word	0x0802ce70

08006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8006b40:	4a06      	ldr	r2, [pc, #24]	; (8006b5c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	887a      	ldrh	r2, [r7, #2]
 8006b4a:	809a      	strh	r2, [r3, #4]
    }
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	0802b848 	.word	0x0802b848

08006b60 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	2326      	movs	r3, #38	; 0x26
 8006b6e:	461a      	mov	r2, r3
 8006b70:	2100      	movs	r1, #0
 8006b72:	f01f fa31 	bl	8025fd8 <memset>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff ff75 	bl	8006a68 <_ZN8touchgfx6WidgetC1Ev>
 8006b7e:	4a14      	ldr	r2, [pc, #80]	; (8006bd0 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3328      	adds	r3, #40	; 0x28
 8006b88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff ffd1 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3330      	adds	r3, #48	; 0x30
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fd fa05 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	869a      	strh	r2, [r3, #52]	; 0x34
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	22ff      	movs	r2, #255	; 0xff
 8006ba8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	0802cdc8 	.word	0x0802cdc8

08006bd4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3328      	adds	r3, #40	; 0x28
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe ff54 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff ff4c 	bl	8006a8c <_ZN8touchgfx6WidgetD1Ev>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	0802cdc8 	.word	0x0802cdc8

08006c04 <_ZN8touchgfx8TextAreaD0Ev>:
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff ffe1 	bl	8006bd4 <_ZN8touchgfx8TextAreaD1Ev>
 8006c12:	213c      	movs	r1, #60	; 0x3c
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f01f f81e 	bl	8025c56 <_ZdlPvj>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff ff96 	bl	8006b60 <_ZN8touchgfx8TextAreaC1Ev>
 8006c34:	4a05      	ldr	r2, [pc, #20]	; (8006c4c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	0802ced4 	.word	0x0802ced4

08006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8006c8c:	4a09      	ldr	r2, [pc, #36]	; (8006cb4 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	809a      	strh	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	80da      	strh	r2, [r3, #6]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	22ff      	movs	r2, #255	; 0xff
 8006ca2:	721a      	strb	r2, [r3, #8]
    {
    }
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	0802b960 	.word	0x0802b960

08006cb8 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
    {
 8006cc0:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
    }
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	0802b960 	.word	0x0802b960

08006cd8 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
    }
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ffe9 	bl	8006cb8 <_ZN8touchgfx15AbstractPainterD1Ev>
 8006ce6:	210c      	movs	r1, #12
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f01e ffb4 	bl	8025c56 <_ZdlPvj>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
            : v(i)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	601a      	str	r2, [r3, #0]
        {
        }
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
        {
            return v;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
        }
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8006d2e:	b590      	push	{r4, r7, lr}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3340      	adds	r3, #64	; 0x40
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff ffea 	bl	8006d16 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8006d42:	4604      	mov	r4, r0
 8006d44:	463b      	mov	r3, r7
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff ffe5 	bl	8006d16 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	429c      	cmp	r4, r3
 8006d50:	bf0c      	ite	eq
 8006d52:	2301      	moveq	r3, #1
 8006d54:	2300      	movne	r3, #0
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f00f fd2e 	bl	80167c4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8006d68:	e000      	b.n	8006d6c <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8006d6a:	bf00      	nop
    }
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd90      	pop	{r4, r7, pc}
	...

08006d74 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7ff ff80 	bl	8006c84 <_ZN8touchgfx15AbstractPainterC1Ev>
 8006d84:	4a29      	ldr	r2, [pc, #164]	; (8006e2c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	60da      	str	r2, [r3, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	611a      	str	r2, [r3, #16]
 8006d96:	2301      	movs	r3, #1
 8006d98:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8006d9a:	f7fe ff79 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	3224      	adds	r2, #36	; 0x24
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	4790      	blx	r2
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	bf0c      	ite	eq
 8006db4:	2301      	moveq	r3, #1
 8006db6:	2300      	movne	r3, #0
 8006db8:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8006dba:	f7fc fdb3 	bl	8003924 <_ZN8touchgfx3HAL11getInstanceEv>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff ff53 	bl	8006c6c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bf14      	ite	ne
 8006dcc:	2301      	movne	r3, #1
 8006dce:	2300      	moveq	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01b      	beq.n	8006e0e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8006dd6:	f7fc fda5 	bl	8003924 <_ZN8touchgfx3HAL11getInstanceEv>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff ff45 	bl	8006c6c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8006de2:	4603      	mov	r3, r0
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	3224      	adds	r2, #36	; 0x24
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	4790      	blx	r2
 8006dee:	4603      	mov	r3, r0
 8006df0:	461a      	mov	r2, r3
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	bf0c      	ite	eq
 8006df8:	2301      	moveq	r3, #1
 8006dfa:	2300      	movne	r3, #0
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bf14      	ite	ne
 8006e08:	2301      	movne	r3, #1
 8006e0a:	2300      	moveq	r3, #0
 8006e0c:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8006e16:	4a07      	ldr	r2, [pc, #28]	; (8006e34 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 8006e18:	2128      	movs	r1, #40	; 0x28
 8006e1a:	4807      	ldr	r0, [pc, #28]	; (8006e38 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 8006e1c:	f01f f850 	bl	8025ec0 <__assert_func>
 8006e20:	bf00      	nop
    }
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	0802c95c 	.word	0x0802c95c
 8006e30:	0802adc4 	.word	0x0802adc4
 8006e34:	0802ae24 	.word	0x0802ae24
 8006e38:	0802ae60 	.word	0x0802ae60

08006e3c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	4a05      	ldr	r2, [pc, #20]	; (8006e5c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff ff33 	bl	8006cb8 <_ZN8touchgfx15AbstractPainterD1Ev>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	0802c95c 	.word	0x0802c95c

08006e60 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff ffe7 	bl	8006e3c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8006e6e:	2114      	movs	r1, #20
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f01e fef0 	bl	8025c56 <_ZdlPvj>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff ff71 	bl	8006d74 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8006e92:	4a0a      	ldr	r2, [pc, #40]	; (8006ebc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	751a      	strb	r2, [r3, #20]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	755a      	strb	r2, [r3, #21]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f807 	bl	8006ec0 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	0802c97c 	.word	0x0802c97c

08006ec0 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 8006ece:	f107 0314 	add.w	r3, r7, #20
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fc fc98 	bl	8003808 <_ZNK8touchgfx9colortypecvmEv>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	0c1b      	lsrs	r3, r3, #16
 8006edc:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	751a      	strb	r2, [r3, #20]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 8006ee6:	f107 0310 	add.w	r3, r7, #16
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fc fc8c 	bl	8003808 <_ZNK8touchgfx9colortypecvmEv>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	755a      	strb	r2, [r3, #21]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 8006efe:	f107 030c 	add.w	r3, r7, #12
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fc fc80 	bl	8003808 <_ZNK8touchgfx9colortypecvmEv>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	759a      	strb	r2, [r3, #22]
    }
 8006f10:	bf00      	nop
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <_ZN11tempBoxBaseD1Ev>:

class tempBoxBase : public touchgfx::Container
{
public:
    tempBoxBase();
    virtual ~tempBoxBase() {}
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	4a0d      	ldr	r2, [pc, #52]	; (8006f58 <_ZN11tempBoxBaseD1Ev+0x40>)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	33b8      	adds	r3, #184	; 0xb8
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fe52 	bl	8006bd4 <_ZN8touchgfx8TextAreaD1Ev>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	33a0      	adds	r3, #160	; 0xa0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f88f 	bl	8008058 <_ZN8touchgfx13PainterRGB888D1Ev>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	332c      	adds	r3, #44	; 0x2c
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 f868 	bl	8008014 <_ZN8touchgfx4LineD1Ev>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff fc36 	bl	80067b8 <_ZN8touchgfx9ContainerD1Ev>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	0802bad4 	.word	0x0802bad4

08006f5c <_ZN11tempBoxBaseD0Ev>:
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7ff ffd7 	bl	8006f18 <_ZN11tempBoxBaseD1Ev>
 8006f6a:	21f4      	movs	r1, #244	; 0xf4
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f01e fe72 	bl	8025c56 <_ZdlPvj>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	4a1c      	ldr	r2, [pc, #112]	; (8006ff8 <_ZN7tempBoxD1Ev+0x7c>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	f646 031c 	movw	r3, #26652	; 0x681c
 8006f90:	4413      	add	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d011      	beq.n	8006fba <_ZN7tempBoxD1Ev+0x3e>
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	f646 031c 	movw	r3, #26652	; 0x681c
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 54a5 	add.w	r4, r3, #5280	; 0x14a0
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	f646 031c 	movw	r3, #26652	; 0x681c
 8006fa8:	4413      	add	r3, r2
 8006faa:	429c      	cmp	r4, r3
 8006fac:	d005      	beq.n	8006fba <_ZN7tempBoxD1Ev+0x3e>
 8006fae:	3c18      	subs	r4, #24
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4798      	blx	r3
 8006fb8:	e7f3      	b.n	8006fa2 <_ZN7tempBoxD1Ev+0x26>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d010      	beq.n	8006fe6 <_ZN7tempBoxD1Ev+0x6a>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8006fca:	f246 34b0 	movw	r4, #25520	; 0x63b0
 8006fce:	441c      	add	r4, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8006fd6:	429c      	cmp	r4, r3
 8006fd8:	d005      	beq.n	8006fe6 <_ZN7tempBoxD1Ev+0x6a>
 8006fda:	3c74      	subs	r4, #116	; 0x74
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	4798      	blx	r3
 8006fe4:	e7f4      	b.n	8006fd0 <_ZN7tempBoxD1Ev+0x54>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff ff95 	bl	8006f18 <_ZN11tempBoxBaseD1Ev>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd90      	pop	{r4, r7, pc}
 8006ff8:	0802bc70 	.word	0x0802bc70

08006ffc <_ZN7tempBoxD0Ev>:
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff ffb9 	bl	8006f7c <_ZN7tempBoxD1Ev>
 800700a:	f647 41bc 	movw	r1, #31932	; 0x7cbc
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f01e fe21 	bl	8025c56 <_ZdlPvj>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	4a05      	ldr	r2, [pc, #20]	; (8007040 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff fd2b 	bl	8006a8c <_ZN8touchgfx6WidgetD1Ev>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	0802ce70 	.word	0x0802ce70

08007044 <_ZN8touchgfx3BoxD0Ev>:
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff ffe7 	bl	8007020 <_ZN8touchgfx3BoxD1Ev>
 8007052:	212c      	movs	r1, #44	; 0x2c
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f01e fdfe 	bl	8025c56 <_ZdlPvj>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <_ZN12alertBarBaseD1Ev>:

class alertBarBase : public touchgfx::Container
{
public:
    alertBarBase();
    virtual ~alertBarBase() {}
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	4a0a      	ldr	r2, [pc, #40]	; (8007098 <_ZN12alertBarBaseD1Ev+0x34>)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3360      	adds	r3, #96	; 0x60
 8007076:	4618      	mov	r0, r3
 8007078:	f001 f832 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	332c      	adds	r3, #44	; 0x2c
 8007080:	4618      	mov	r0, r3
 8007082:	f001 f80b 	bl	800809c <_ZN8touchgfx13BoxWithBorderD1Ev>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fb95 	bl	80067b8 <_ZN8touchgfx9ContainerD1Ev>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	0802ba48 	.word	0x0802ba48

0800709c <_ZN12alertBarBaseD0Ev>:
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff ffdd 	bl	8007064 <_ZN12alertBarBaseD1Ev>
 80070aa:	21a0      	movs	r1, #160	; 0xa0
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f01e fdd2 	bl	8025c56 <_ZdlPvj>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	4a05      	ldr	r2, [pc, #20]	; (80070dc <_ZN8alertBarD1Ev+0x20>)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff ffc9 	bl	8007064 <_ZN12alertBarBaseD1Ev>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	0802bbe4 	.word	0x0802bbe4

080070e0 <_ZN8alertBarD0Ev>:
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ffe7 	bl	80070bc <_ZN8alertBarD1Ev>
 80070ee:	21d8      	movs	r1, #216	; 0xd8
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f01e fdb0 	bl	8025c56 <_ZdlPvj>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	4a05      	ldr	r2, [pc, #20]	; (8007120 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff fc1f 	bl	8006954 <_ZN8touchgfx6ScreenD1Ev>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	0802b92c 	.word	0x0802b92c

08007124 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff ffe7 	bl	8007100 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8007132:	2140      	movs	r1, #64	; 0x40
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f01e fd8e 	bl	8025c56 <_ZdlPvj>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	4a31      	ldr	r2, [pc, #196]	; (8007214 <_ZN15Screen1ViewBaseD1Ev+0xd0>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	4b30      	ldr	r3, [pc, #192]	; (8007218 <_ZN15Screen1ViewBaseD1Ev+0xd4>)
 8007156:	4413      	add	r3, r2
 8007158:	4618      	mov	r0, r3
 800715a:	f000 ffc1 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4b2e      	ldr	r3, [pc, #184]	; (800721c <_ZN15Screen1ViewBaseD1Ev+0xd8>)
 8007162:	4413      	add	r3, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff ffa9 	bl	80070bc <_ZN8alertBarD1Ev>
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4b2c      	ldr	r3, [pc, #176]	; (8007220 <_ZN15Screen1ViewBaseD1Ev+0xdc>)
 800716e:	4413      	add	r3, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff ffa3 	bl	80070bc <_ZN8alertBarD1Ev>
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	4b2a      	ldr	r3, [pc, #168]	; (8007224 <_ZN15Screen1ViewBaseD1Ev+0xe0>)
 800717a:	4413      	add	r3, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff fefd 	bl	8006f7c <_ZN7tempBoxD1Ev>
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007188:	4413      	add	r3, r2
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fef6 	bl	8006f7c <_ZN7tempBoxD1Ev>
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007196:	4413      	add	r3, r2
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff feef 	bl	8006f7c <_ZN7tempBoxD1Ev>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff fee9 	bl	8006f7c <_ZN7tempBoxD1Ev>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 ff95 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 ff8f 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 ff89 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 ff3f 	bl	8008058 <_ZN8touchgfx13PainterRGB888D1Ev>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	33d8      	adds	r3, #216	; 0xd8
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 ff18 	bl	8008014 <_ZN8touchgfx4LineD1Ev>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3398      	adds	r3, #152	; 0x98
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 ff79 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	336c      	adds	r3, #108	; 0x6c
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff ff14 	bl	8007020 <_ZN8touchgfx3BoxD1Ev>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3340      	adds	r3, #64	; 0x40
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff ff0f 	bl	8007020 <_ZN8touchgfx3BoxD1Ev>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff ff7b 	bl	8007100 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	0802b8f8 	.word	0x0802b8f8
 8007218:	0001f6c4 	.word	0x0001f6c4
 800721c:	0001f5ec 	.word	0x0001f5ec
 8007220:	0001f514 	.word	0x0001f514
 8007224:	00017858 	.word	0x00017858

08007228 <_ZN15Screen1ViewBaseD0Ev>:
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff ff87 	bl	8007144 <_ZN15Screen1ViewBaseD1Ev>
 8007236:	4904      	ldr	r1, [pc, #16]	; (8007248 <_ZN15Screen1ViewBaseD0Ev+0x20>)
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f01e fd0c 	bl	8025c56 <_ZdlPvj>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	00022638 	.word	0x00022638

0800724c <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b0c1      	sub	sp, #260	; 0x104
 8007250:	af02      	add	r7, sp, #8
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fd12 	bl	8007c80 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800725c:	4a96      	ldr	r2, [pc, #600]	; (80074b8 <_ZN15Screen1ViewBaseC1Ev+0x26c>)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3340      	adds	r3, #64	; 0x40
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff fc32 	bl	8006ad0 <_ZN8touchgfx3BoxC1Ev>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	336c      	adds	r3, #108	; 0x6c
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff fc2d 	bl	8006ad0 <_ZN8touchgfx3BoxC1Ev>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3398      	adds	r3, #152	; 0x98
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff fcd2 	bl	8006c24 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	33d8      	adds	r3, #216	; 0xd8
 8007284:	4618      	mov	r0, r3
 8007286:	f00f fa7d 	bl	8016784 <_ZN8touchgfx4LineC1Ev>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8007290:	f107 0320 	add.w	r3, r7, #32
 8007294:	2100      	movs	r1, #0
 8007296:	4618      	mov	r0, r3
 8007298:	f7fc fe86 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800729c:	6a39      	ldr	r1, [r7, #32]
 800729e:	4620      	mov	r0, r4
 80072a0:	f7ff fdee 	bl	8006e80 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fcba 	bl	8006c24 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff fcb4 	bl	8006c24 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fcae 	bl	8006c24 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80072ce:	4618      	mov	r0, r3
 80072d0:	f002 fe9c 	bl	800a00c <_ZN7tempBoxC1Ev>
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80072da:	4413      	add	r3, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f002 fe95 	bl	800a00c <_ZN7tempBoxC1Ev>
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80072e8:	4413      	add	r3, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 fe8e 	bl	800a00c <_ZN7tempBoxC1Ev>
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	4b72      	ldr	r3, [pc, #456]	; (80074bc <_ZN15Screen1ViewBaseC1Ev+0x270>)
 80072f4:	4413      	add	r3, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f002 fe88 	bl	800a00c <_ZN7tempBoxC1Ev>
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	4b70      	ldr	r3, [pc, #448]	; (80074c0 <_ZN15Screen1ViewBaseC1Ev+0x274>)
 8007300:	4413      	add	r3, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f002 fc7e 	bl	8009c04 <_ZN8alertBarC1Ev>
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	4b6e      	ldr	r3, [pc, #440]	; (80074c4 <_ZN15Screen1ViewBaseC1Ev+0x278>)
 800730c:	4413      	add	r3, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f002 fc78 	bl	8009c04 <_ZN8alertBarC1Ev>
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	4b6c      	ldr	r3, [pc, #432]	; (80074c8 <_ZN15Screen1ViewBaseC1Ev+0x27c>)
 8007318:	4413      	add	r3, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fc82 	bl	8006c24 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	4b6a      	ldr	r3, [pc, #424]	; (80074cc <_ZN15Screen1ViewBaseC1Ev+0x280>)
 8007324:	4413      	add	r3, r2
 8007326:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800732a:	4618      	mov	r0, r3
 800732c:	f00f ffb0 	bl	8017290 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007336:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007340:	2200      	movs	r2, #0
 8007342:	2100      	movs	r1, #0
 8007344:	f7ff fa65 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800734e:	2300      	movs	r3, #0
 8007350:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8007354:	2300      	movs	r3, #0
 8007356:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 800735a:	2300      	movs	r3, #0
 800735c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007360:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8007364:	041b      	lsls	r3, r3, #16
 8007366:	461a      	mov	r2, r3
 8007368:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	431a      	orrs	r2, r3
 8007370:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007374:	4313      	orrs	r3, r2
 8007376:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800737a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800737e:	4611      	mov	r1, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f7fc fe11 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800738a:	4619      	mov	r1, r3
 800738c:	4620      	mov	r0, r4
 800738e:	f7ff fbc3 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8007398:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	f240 3325 	movw	r3, #805	; 0x325
 80073a2:	2200      	movs	r2, #0
 80073a4:	2100      	movs	r1, #0
 80073a6:	f7ff fa34 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80073b0:	2300      	movs	r3, #0
 80073b2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 80073b6:	2300      	movs	r3, #0
 80073b8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 80073c2:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80073c6:	041b      	lsls	r3, r3, #16
 80073c8:	461a      	mov	r2, r3
 80073ca:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80073ce:	021b      	lsls	r3, r3, #8
 80073d0:	431a      	orrs	r2, r3
 80073d2:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80073dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fc fde0 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80073e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ec:	4619      	mov	r1, r3
 80073ee:	4620      	mov	r0, r4
 80073f0:	f7ff fb92 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3398      	adds	r3, #152	; 0x98
 80073f8:	223c      	movs	r2, #60	; 0x3c
 80073fa:	f240 114b 	movw	r1, #331	; 0x14b
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fa28 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800740a:	23ff      	movs	r3, #255	; 0xff
 800740c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007410:	23ff      	movs	r3, #255	; 0xff
 8007412:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007416:	23ff      	movs	r3, #255	; 0xff
 8007418:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800741c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007420:	041b      	lsls	r3, r3, #16
 8007422:	461a      	mov	r2, r3
 8007424:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	431a      	orrs	r2, r3
 800742c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8007430:	4313      	orrs	r3, r2
 8007432:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007436:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800743a:	4611      	mov	r1, r2
 800743c:	4618      	mov	r0, r3
 800743e:	f7fc fdb3 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007442:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007446:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800744a:	61fb      	str	r3, [r7, #28]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800744c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007454:	bf00      	nop
    gearArea.setLinespacing(0);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3398      	adds	r3, #152	; 0x98
 800745a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800745e:	2300      	movs	r3, #0
 8007460:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8007464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007468:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800746c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800746e:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID14).getText());
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4c17      	ldr	r4, [pc, #92]	; (80074d0 <_ZN15Screen1ViewBaseC1Ev+0x284>)
 8007474:	441c      	add	r4, r3
 8007476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800747a:	210b      	movs	r1, #11
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fb59 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8007482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800748a:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <_ZN15Screen1ViewBaseC1Ev+0x288>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <_ZN15Screen1ViewBaseC1Ev+0x252>
 8007492:	4b11      	ldr	r3, [pc, #68]	; (80074d8 <_ZN15Screen1ViewBaseC1Ev+0x28c>)
 8007494:	4a11      	ldr	r2, [pc, #68]	; (80074dc <_ZN15Screen1ViewBaseC1Ev+0x290>)
 8007496:	21ae      	movs	r1, #174	; 0xae
 8007498:	4811      	ldr	r0, [pc, #68]	; (80074e0 <_ZN15Screen1ViewBaseC1Ev+0x294>)
 800749a:	f01e fd11 	bl	8025ec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800749e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074a2:	889a      	ldrh	r2, [r3, #4]
 80074a4:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <_ZN15Screen1ViewBaseC1Ev+0x298>)
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d31f      	bcc.n	80074ec <_ZN15Screen1ViewBaseC1Ev+0x2a0>
 80074ac:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <_ZN15Screen1ViewBaseC1Ev+0x29c>)
 80074ae:	4a0b      	ldr	r2, [pc, #44]	; (80074dc <_ZN15Screen1ViewBaseC1Ev+0x290>)
 80074b0:	21af      	movs	r1, #175	; 0xaf
 80074b2:	480b      	ldr	r0, [pc, #44]	; (80074e0 <_ZN15Screen1ViewBaseC1Ev+0x294>)
 80074b4:	f01e fd04 	bl	8025ec0 <__assert_func>
 80074b8:	0802b8f8 	.word	0x0802b8f8
 80074bc:	00017858 	.word	0x00017858
 80074c0:	0001f514 	.word	0x0001f514
 80074c4:	0001f5ec 	.word	0x0001f5ec
 80074c8:	0001f6c4 	.word	0x0001f6c4
 80074cc:	0001f758 	.word	0x0001f758
 80074d0:	0001f704 	.word	0x0001f704
 80074d4:	20056768 	.word	0x20056768
 80074d8:	0802aec4 	.word	0x0802aec4
 80074dc:	0802af08 	.word	0x0802af08
 80074e0:	0802af38 	.word	0x0802af38
 80074e4:	2005676c 	.word	0x2005676c
 80074e8:	0802af80 	.word	0x0802af80
    }
 80074ec:	bf00      	nop
        return texts->getText(typedTextId);
 80074ee:	4bc1      	ldr	r3, [pc, #772]	; (80077f4 <_ZN15Screen1ViewBaseC1Ev+0x5a8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80074f4:	4611      	mov	r1, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 fa0a 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 80074fc:	4603      	mov	r3, r0
 80074fe:	bf00      	nop
 8007500:	4abd      	ldr	r2, [pc, #756]	; (80077f8 <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 8007502:	2102      	movs	r1, #2
 8007504:	4620      	mov	r0, r4
 8007506:	f014 fbcf 	bl	801bca8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800750a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fac0 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	4bb7      	ldr	r3, [pc, #732]	; (80077fc <_ZN15Screen1ViewBaseC1Ev+0x5b0>)
 800751e:	4413      	add	r3, r2
 8007520:	4619      	mov	r1, r3
 8007522:	f7ff fb95 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3398      	adds	r3, #152	; 0x98
 800752a:	4618      	mov	r0, r3
 800752c:	f00f fcd8 	bl	8016ee0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8007536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800753a:	2100      	movs	r1, #0
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff faf9 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8007542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007546:	4619      	mov	r1, r3
 8007548:	4620      	mov	r0, r4
 800754a:	f00f fce6 	bl	8016f1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800754e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe fa9e 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800755e:	2314      	movs	r3, #20
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	2398      	movs	r3, #152	; 0x98
 8007564:	228c      	movs	r2, #140	; 0x8c
 8007566:	f240 1149 	movw	r1, #329	; 0x149
 800756a:	f7ff f952 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8007574:	23ff      	movs	r3, #255	; 0xff
 8007576:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 800757a:	23ff      	movs	r3, #255	; 0xff
 800757c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8007580:	23ff      	movs	r3, #255	; 0xff
 8007582:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8007586:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800758a:	041b      	lsls	r3, r3, #16
 800758c:	461a      	mov	r2, r3
 800758e:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8007592:	021b      	lsls	r3, r3, #8
 8007594:	431a      	orrs	r2, r3
 8007596:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 800759a:	4313      	orrs	r3, r2
 800759c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80075a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fc fcfe 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80075ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075ae:	4619      	mov	r1, r3
 80075b0:	4620      	mov	r0, r4
 80075b2:	f7ff fc85 	bl	8006ec0 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80075c2:	4619      	mov	r1, r3
 80075c4:	4610      	mov	r0, r2
 80075c6:	f00e ff01 	bl	80163cc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	33d8      	adds	r3, #216	; 0xd8
 80075ce:	2200      	movs	r2, #0
 80075d0:	2100      	movs	r1, #0
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fb6a 	bl	8007cac <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	33d8      	adds	r3, #216	; 0xd8
 80075dc:	2200      	movs	r2, #0
 80075de:	2196      	movs	r1, #150	; 0x96
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fb89 	bl	8007cf8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	33d8      	adds	r3, #216	; 0xd8
 80075ea:	2104      	movs	r1, #4
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fba9 	bl	8007d44 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	33d8      	adds	r3, #216	; 0xd8
 80075f6:	2101      	movs	r1, #1
 80075f8:	4618      	mov	r0, r3
 80075fa:	f00f fa09 	bl	8016a10 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8007604:	2345      	movs	r3, #69	; 0x45
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	23d4      	movs	r3, #212	; 0xd4
 800760a:	2247      	movs	r2, #71	; 0x47
 800760c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8007610:	f7ff f8ff 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 800761a:	2300      	movs	r3, #0
 800761c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8007620:	2366      	movs	r3, #102	; 0x66
 8007622:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8007626:	23ff      	movs	r3, #255	; 0xff
 8007628:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 800762c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8007630:	041b      	lsls	r3, r3, #16
 8007632:	461a      	mov	r2, r3
 8007634:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8007638:	021b      	lsls	r3, r3, #8
 800763a:	431a      	orrs	r2, r3
 800763c:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8007640:	4313      	orrs	r3, r2
 8007642:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007646:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800764a:	4611      	mov	r1, r2
 800764c:	4618      	mov	r0, r3
 800764e:	f7fc fcab 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007654:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8007658:	61bb      	str	r3, [r7, #24]
        this->color = color;
 800765a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007662:	bf00      	nop
    rpmArea.setLinespacing(0);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800766a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800766e:	2300      	movs	r3, #0
 8007670:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        linespace = space;
 8007674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007678:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800767c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800767e:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4c5f      	ldr	r4, [pc, #380]	; (8007800 <_ZN15Screen1ViewBaseC1Ev+0x5b4>)
 8007684:	441c      	add	r4, r3
 8007686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800768a:	210a      	movs	r1, #10
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff fa51 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8007692:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007696:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800769a:	4b5a      	ldr	r3, [pc, #360]	; (8007804 <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <_ZN15Screen1ViewBaseC1Ev+0x462>
 80076a2:	4b59      	ldr	r3, [pc, #356]	; (8007808 <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 80076a4:	4a59      	ldr	r2, [pc, #356]	; (800780c <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 80076a6:	21ae      	movs	r1, #174	; 0xae
 80076a8:	4859      	ldr	r0, [pc, #356]	; (8007810 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 80076aa:	f01e fc09 	bl	8025ec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80076ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076b2:	889a      	ldrh	r2, [r3, #4]
 80076b4:	4b57      	ldr	r3, [pc, #348]	; (8007814 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d305      	bcc.n	80076c8 <_ZN15Screen1ViewBaseC1Ev+0x47c>
 80076bc:	4b56      	ldr	r3, [pc, #344]	; (8007818 <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 80076be:	4a53      	ldr	r2, [pc, #332]	; (800780c <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 80076c0:	21af      	movs	r1, #175	; 0xaf
 80076c2:	4853      	ldr	r0, [pc, #332]	; (8007810 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 80076c4:	f01e fbfc 	bl	8025ec0 <__assert_func>
    }
 80076c8:	bf00      	nop
        return texts->getText(typedTextId);
 80076ca:	4b4a      	ldr	r3, [pc, #296]	; (80077f4 <_ZN15Screen1ViewBaseC1Ev+0x5a8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 f91c 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 80076d8:	4603      	mov	r3, r0
 80076da:	bf00      	nop
 80076dc:	4a46      	ldr	r2, [pc, #280]	; (80077f8 <_ZN15Screen1ViewBaseC1Ev+0x5ac>)
 80076de:	210a      	movs	r1, #10
 80076e0:	4620      	mov	r0, r4
 80076e2:	f014 fae1 	bl	801bca8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80076e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe f9d2 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4b41      	ldr	r3, [pc, #260]	; (8007800 <_ZN15Screen1ViewBaseC1Ev+0x5b4>)
 80076fa:	4413      	add	r3, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	f7ff faa7 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8007708:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800770c:	2101      	movs	r1, #1
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fa10 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8007714:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007718:	4619      	mov	r1, r3
 800771a:	4620      	mov	r0, r4
 800771c:	f00f fbfd 	bl	8016f1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe f9b5 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 240, 49);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8007730:	2331      	movs	r3, #49	; 0x31
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	23f0      	movs	r3, #240	; 0xf0
 8007736:	2252      	movs	r2, #82	; 0x52
 8007738:	210e      	movs	r1, #14
 800773a:	f7ff f86a 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8007744:	23ff      	movs	r3, #255	; 0xff
 8007746:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 800774a:	23ff      	movs	r3, #255	; 0xff
 800774c:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8007750:	23ff      	movs	r3, #255	; 0xff
 8007752:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8007756:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	461a      	mov	r2, r3
 800775e:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	431a      	orrs	r2, r3
 8007766:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 800776a:	4313      	orrs	r3, r2
 800776c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007770:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f7fc fc16 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800777c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800777e:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8007782:	617b      	str	r3, [r7, #20]
        this->color = color;
 8007784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800778c:	bf00      	nop
    battArea.setLinespacing(0);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007798:	2300      	movs	r3, #0
 800779a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
        linespace = space;
 800779e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077a2:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80077a6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80077a8:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4c1b      	ldr	r4, [pc, #108]	; (800781c <_ZN15Screen1ViewBaseC1Ev+0x5d0>)
 80077ae:	441c      	add	r4, r3
 80077b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80077b4:	2108      	movs	r1, #8
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff f9bc 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 80077bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80077c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <_ZN15Screen1ViewBaseC1Ev+0x5b8>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d105      	bne.n	80077d8 <_ZN15Screen1ViewBaseC1Ev+0x58c>
 80077cc:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <_ZN15Screen1ViewBaseC1Ev+0x5bc>)
 80077ce:	4a0f      	ldr	r2, [pc, #60]	; (800780c <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 80077d0:	21ae      	movs	r1, #174	; 0xae
 80077d2:	480f      	ldr	r0, [pc, #60]	; (8007810 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 80077d4:	f01e fb74 	bl	8025ec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80077d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077dc:	889a      	ldrh	r2, [r3, #4]
 80077de:	4b0d      	ldr	r3, [pc, #52]	; (8007814 <_ZN15Screen1ViewBaseC1Ev+0x5c8>)
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d31c      	bcc.n	8007820 <_ZN15Screen1ViewBaseC1Ev+0x5d4>
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <_ZN15Screen1ViewBaseC1Ev+0x5cc>)
 80077e8:	4a08      	ldr	r2, [pc, #32]	; (800780c <_ZN15Screen1ViewBaseC1Ev+0x5c0>)
 80077ea:	21af      	movs	r1, #175	; 0xaf
 80077ec:	4808      	ldr	r0, [pc, #32]	; (8007810 <_ZN15Screen1ViewBaseC1Ev+0x5c4>)
 80077ee:	f01e fb67 	bl	8025ec0 <__assert_func>
 80077f2:	bf00      	nop
 80077f4:	20056774 	.word	0x20056774
 80077f8:	0802afd4 	.word	0x0802afd4
 80077fc:	0001f704 	.word	0x0001f704
 8007800:	0001f708 	.word	0x0001f708
 8007804:	20056768 	.word	0x20056768
 8007808:	0802aec4 	.word	0x0802aec4
 800780c:	0802af08 	.word	0x0802af08
 8007810:	0802af38 	.word	0x0802af38
 8007814:	2005676c 	.word	0x2005676c
 8007818:	0802af80 	.word	0x0802af80
 800781c:	0001f71c 	.word	0x0001f71c
    }
 8007820:	bf00      	nop
        return texts->getText(typedTextId);
 8007822:	4b97      	ldr	r3, [pc, #604]	; (8007a80 <_ZN15Screen1ViewBaseC1Ev+0x834>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800782a:	4611      	mov	r1, r2
 800782c:	4618      	mov	r0, r3
 800782e:	f001 f86f 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 8007832:	4603      	mov	r3, r0
 8007834:	bf00      	nop
 8007836:	4a93      	ldr	r2, [pc, #588]	; (8007a84 <_ZN15Screen1ViewBaseC1Ev+0x838>)
 8007838:	210a      	movs	r1, #10
 800783a:	4620      	mov	r0, r4
 800783c:	f014 fa34 	bl	801bca8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007840:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe f925 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	4b8d      	ldr	r3, [pc, #564]	; (8007a88 <_ZN15Screen1ViewBaseC1Ev+0x83c>)
 8007854:	4413      	add	r3, r2
 8007856:	4619      	mov	r1, r3
 8007858:	f7ff f9fa 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8007862:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007866:	2102      	movs	r1, #2
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff f963 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 800786e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007872:	4619      	mov	r1, r3
 8007874:	4620      	mov	r0, r4
 8007876:	f00f fb50 	bl	8016f1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800787a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe f908 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>

    oilPressArea.setPosition(544, 82, 240, 117);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 800788a:	2375      	movs	r3, #117	; 0x75
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	23f0      	movs	r3, #240	; 0xf0
 8007890:	2252      	movs	r2, #82	; 0x52
 8007892:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007896:	f7fe ffbc 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilPressArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80078a0:	23ff      	movs	r3, #255	; 0xff
 80078a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80078a6:	23ff      	movs	r3, #255	; 0xff
 80078a8:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 80078ac:	23ff      	movs	r3, #255	; 0xff
 80078ae:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80078b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80078b6:	041b      	lsls	r3, r3, #16
 80078b8:	461a      	mov	r2, r3
 80078ba:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80078be:	021b      	lsls	r3, r3, #8
 80078c0:	431a      	orrs	r2, r3
 80078c2:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80078cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80078d0:	4611      	mov	r1, r2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fc fb68 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80078d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078da:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 80078de:	613b      	str	r3, [r7, #16]
        this->color = color;
 80078e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80078e8:	bf00      	nop
    oilPressArea.setLinespacing(0);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80078f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
        linespace = space;
 80078fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fe:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 8007902:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007904:	bf00      	nop
    oilPressAreaBuffer[0] = 0;
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	4b60      	ldr	r3, [pc, #384]	; (8007a8c <_ZN15Screen1ViewBaseC1Ev+0x840>)
 800790a:	4413      	add	r3, r2
 800790c:	2200      	movs	r2, #0
 800790e:	801a      	strh	r2, [r3, #0]
    oilPressArea.setWildcard(oilPressAreaBuffer);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	4b5c      	ldr	r3, [pc, #368]	; (8007a8c <_ZN15Screen1ViewBaseC1Ev+0x840>)
 800791a:	4413      	add	r3, r2
 800791c:	4619      	mov	r1, r3
 800791e:	f7ff f997 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilPressArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8007928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800792c:	2103      	movs	r1, #3
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff f900 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8007934:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007938:	4619      	mov	r1, r3
 800793a:	4620      	mov	r0, r4
 800793c:	f00f faed 	bl	8016f1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe f8a5 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007950:	22f8      	movs	r2, #248	; 0xf8
 8007952:	210b      	movs	r1, #11
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe ff7d 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007960:	4413      	add	r3, r2
 8007962:	f240 1249 	movw	r2, #329	; 0x149
 8007966:	210b      	movs	r1, #11
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe ff73 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007974:	4413      	add	r3, r2
 8007976:	22f8      	movs	r2, #248	; 0xf8
 8007978:	f240 213a 	movw	r1, #570	; 0x23a
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe ff69 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	4b42      	ldr	r3, [pc, #264]	; (8007a90 <_ZN15Screen1ViewBaseC1Ev+0x844>)
 8007986:	4413      	add	r3, r2
 8007988:	f240 1249 	movw	r2, #329	; 0x149
 800798c:	f240 213a 	movw	r1, #570	; 0x23a
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe ff5f 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4b3e      	ldr	r3, [pc, #248]	; (8007a94 <_ZN15Screen1ViewBaseC1Ev+0x848>)
 800799a:	4413      	add	r3, r2
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe ff57 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	4b3b      	ldr	r3, [pc, #236]	; (8007a98 <_ZN15Screen1ViewBaseC1Ev+0x84c>)
 80079aa:	4413      	add	r3, r2
 80079ac:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe ff4e 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4838      	ldr	r0, [pc, #224]	; (8007a9c <_ZN15Screen1ViewBaseC1Ev+0x850>)
 80079bc:	4418      	add	r0, r3
 80079be:	2331      	movs	r3, #49	; 0x31
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	23ee      	movs	r3, #238	; 0xee
 80079c4:	2296      	movs	r2, #150	; 0x96
 80079c6:	210e      	movs	r1, #14
 80079c8:	f7fe ff23 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4c33      	ldr	r4, [pc, #204]	; (8007a9c <_ZN15Screen1ViewBaseC1Ev+0x850>)
 80079d0:	441c      	add	r4, r3
 80079d2:	23ff      	movs	r3, #255	; 0xff
 80079d4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80079d8:	23ff      	movs	r3, #255	; 0xff
 80079da:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 80079de:	23ff      	movs	r3, #255	; 0xff
 80079e0:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 80079e4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80079e8:	041b      	lsls	r3, r3, #16
 80079ea:	461a      	mov	r2, r3
 80079ec:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80079f0:	021b      	lsls	r3, r3, #8
 80079f2:	431a      	orrs	r2, r3
 80079f4:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80079f8:	4313      	orrs	r3, r2
 80079fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80079fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007a02:	4611      	mov	r1, r2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fc facf 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0c:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8007a10:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8007a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007a1a:	bf00      	nop
    cltArea.setLinespacing(0);
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	4b1f      	ldr	r3, [pc, #124]	; (8007a9c <_ZN15Screen1ViewBaseC1Ev+0x850>)
 8007a20:	4413      	add	r3, r2
 8007a22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a26:	2300      	movs	r3, #0
 8007a28:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
        linespace = space;
 8007a2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a30:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 8007a34:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007a36:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4c19      	ldr	r4, [pc, #100]	; (8007aa0 <_ZN15Screen1ViewBaseC1Ev+0x854>)
 8007a3c:	441c      	add	r4, r3
 8007a3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007a42:	2109      	movs	r1, #9
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff f875 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8007a4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007a4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007a52:	4b14      	ldr	r3, [pc, #80]	; (8007aa4 <_ZN15Screen1ViewBaseC1Ev+0x858>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <_ZN15Screen1ViewBaseC1Ev+0x81a>
 8007a5a:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <_ZN15Screen1ViewBaseC1Ev+0x85c>)
 8007a5c:	4a13      	ldr	r2, [pc, #76]	; (8007aac <_ZN15Screen1ViewBaseC1Ev+0x860>)
 8007a5e:	21ae      	movs	r1, #174	; 0xae
 8007a60:	4813      	ldr	r0, [pc, #76]	; (8007ab0 <_ZN15Screen1ViewBaseC1Ev+0x864>)
 8007a62:	f01e fa2d 	bl	8025ec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6a:	889a      	ldrh	r2, [r3, #4]
 8007a6c:	4b11      	ldr	r3, [pc, #68]	; (8007ab4 <_ZN15Screen1ViewBaseC1Ev+0x868>)
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d323      	bcc.n	8007abc <_ZN15Screen1ViewBaseC1Ev+0x870>
 8007a74:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <_ZN15Screen1ViewBaseC1Ev+0x86c>)
 8007a76:	4a0d      	ldr	r2, [pc, #52]	; (8007aac <_ZN15Screen1ViewBaseC1Ev+0x860>)
 8007a78:	21af      	movs	r1, #175	; 0xaf
 8007a7a:	480d      	ldr	r0, [pc, #52]	; (8007ab0 <_ZN15Screen1ViewBaseC1Ev+0x864>)
 8007a7c:	f01e fa20 	bl	8025ec0 <__assert_func>
 8007a80:	20056774 	.word	0x20056774
 8007a84:	0802afd4 	.word	0x0802afd4
 8007a88:	0001f71c 	.word	0x0001f71c
 8007a8c:	0001f730 	.word	0x0001f730
 8007a90:	00017858 	.word	0x00017858
 8007a94:	0001f514 	.word	0x0001f514
 8007a98:	0001f5ec 	.word	0x0001f5ec
 8007a9c:	0001f6c4 	.word	0x0001f6c4
 8007aa0:	0001f744 	.word	0x0001f744
 8007aa4:	20056768 	.word	0x20056768
 8007aa8:	0802aec4 	.word	0x0802aec4
 8007aac:	0802af08 	.word	0x0802af08
 8007ab0:	0802af38 	.word	0x0802af38
 8007ab4:	2005676c 	.word	0x2005676c
 8007ab8:	0802af80 	.word	0x0802af80
    }
 8007abc:	bf00      	nop
        return texts->getText(typedTextId);
 8007abe:	4b4f      	ldr	r3, [pc, #316]	; (8007bfc <_ZN15Screen1ViewBaseC1Ev+0x9b0>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 ff21 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	bf00      	nop
 8007ad2:	4a4b      	ldr	r2, [pc, #300]	; (8007c00 <_ZN15Screen1ViewBaseC1Ev+0x9b4>)
 8007ad4:	210a      	movs	r1, #10
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f014 f8e6 	bl	801bca8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007adc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fd ffd7 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	4b46      	ldr	r3, [pc, #280]	; (8007c04 <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 8007aea:	4413      	add	r3, r2
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	4a46      	ldr	r2, [pc, #280]	; (8007c08 <_ZN15Screen1ViewBaseC1Ev+0x9bc>)
 8007af0:	440a      	add	r2, r1
 8007af2:	4611      	mov	r1, r2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff f8ab 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4c41      	ldr	r4, [pc, #260]	; (8007c04 <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 8007afe:	441c      	add	r4, r3
 8007b00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007b04:	2107      	movs	r1, #7
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff f814 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8007b0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007b10:	4619      	mov	r1, r3
 8007b12:	4620      	mov	r0, r4
 8007b14:	f00f fa01 	bl	8016f1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007b18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fd ffb9 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3340      	adds	r3, #64	; 0x40
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	f7fe ff6a 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	336c      	adds	r3, #108	; 0x6c
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f7fe ff63 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3398      	adds	r3, #152	; 0x98
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f7fe ff5c 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	33d8      	adds	r3, #216	; 0xd8
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f7fe ff55 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f7fe ff4d 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f7fe ff45 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilPressArea);
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7fe ff3d 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f7fe ff35 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f7fe ff2d 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007bb2:	4413      	add	r3, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	f7fe ff25 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <_ZN15Screen1ViewBaseC1Ev+0x9c0>)
 8007bc0:	4413      	add	r3, r2
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	f7fe ff1e 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <_ZN15Screen1ViewBaseC1Ev+0x9c4>)
 8007bce:	4413      	add	r3, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	f7fe ff17 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <_ZN15Screen1ViewBaseC1Ev+0x9c8>)
 8007bdc:	4413      	add	r3, r2
 8007bde:	4619      	mov	r1, r3
 8007be0:	f7fe ff10 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 8007bea:	4413      	add	r3, r2
 8007bec:	4619      	mov	r1, r3
 8007bee:	f7fe ff09 	bl	8006a04 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	37fc      	adds	r7, #252	; 0xfc
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd90      	pop	{r4, r7, pc}
 8007bfc:	20056774 	.word	0x20056774
 8007c00:	0802afd4 	.word	0x0802afd4
 8007c04:	0001f6c4 	.word	0x0001f6c4
 8007c08:	0001f744 	.word	0x0001f744
 8007c0c:	00017858 	.word	0x00017858
 8007c10:	0001f514 	.word	0x0001f514
 8007c14:	0001f5ec 	.word	0x0001f5ec

08007c18 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007c26:	4618      	mov	r0, r3
 8007c28:	f002 fad0 	bl	800a1cc <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007c32:	4413      	add	r3, r2
 8007c34:	4618      	mov	r0, r3
 8007c36:	f002 fac9 	bl	800a1cc <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007c40:	4413      	add	r3, r2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f002 fac2 	bl	800a1cc <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <_ZN15Screen1ViewBase11setupScreenEv+0x5c>)
 8007c4c:	4413      	add	r3, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f002 fabc 	bl	800a1cc <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <_ZN15Screen1ViewBase11setupScreenEv+0x60>)
 8007c58:	4413      	add	r3, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f002 f800 	bl	8009c60 <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <_ZN15Screen1ViewBase11setupScreenEv+0x64>)
 8007c64:	4413      	add	r3, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 fffa 	bl	8009c60 <_ZN8alertBar10initializeEv>
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	00017858 	.word	0x00017858
 8007c78:	0001f514 	.word	0x0001f514
 8007c7c:	0001f5ec 	.word	0x0001f5ec

08007c80 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f012 fb74 	bl	801a378 <_ZN8touchgfx6ScreenC1Ev>
 8007c90:	4a05      	ldr	r2, [pc, #20]	; (8007ca8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	0802b92c 	.word	0x0802b92c

08007cac <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8007cac:	b590      	push	{r4, r7, lr}
 8007cae:	b089      	sub	sp, #36	; 0x24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	f107 0314 	add.w	r3, r7, #20
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff f816 	bl	8006cf8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	461c      	mov	r4, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	f107 0310 	add.w	r3, r7, #16
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff f80a 	bl	8006cf8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007ce4:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4621      	mov	r1, r4
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f00e fe7a 	bl	80169e4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8007cf0:	bf00      	nop
 8007cf2:	3724      	adds	r7, #36	; 0x24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd90      	pop	{r4, r7, pc}

08007cf8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8007cf8:	b590      	push	{r4, r7, lr}
 8007cfa:	b089      	sub	sp, #36	; 0x24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	f107 0314 	add.w	r3, r7, #20
 8007d10:	4611      	mov	r1, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fff0 	bl	8006cf8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	461c      	mov	r4, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	61fb      	str	r3, [r7, #28]
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	f107 0310 	add.w	r3, r7, #16
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe ffe4 	bl	8006cf8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007d30:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007d32:	461a      	mov	r2, r3
 8007d34:	4621      	mov	r1, r4
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f00e fe5f 	bl	80169fa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8007d3c:	bf00      	nop
 8007d3e:	3724      	adds	r7, #36	; 0x24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd90      	pop	{r4, r7, pc}

08007d44 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	f107 0308 	add.w	r3, r7, #8
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe ffcb 	bl	8006cf8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007d62:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fe ffe1 	bl	8006d2e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <_Z41__static_initialization_and_destruction_0ii>:
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b092      	sub	sp, #72	; 0x48
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	f040 8114 	bne.w	8007fae <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	f040 810e 	bne.w	8007fae <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8007d92:	2300      	movs	r3, #0
 8007d94:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007da4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007da8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007dac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007db0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dc0:	041b      	lsls	r3, r3, #16
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007dd6:	f107 0320 	add.w	r3, r7, #32
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fc f8e3 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007de2:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8007de4:	bf00      	nop
 8007de6:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8007de8:	4b73      	ldr	r3, [pc, #460]	; (8007fb8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	23ff      	movs	r3, #255	; 0xff
 8007dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007df2:	2300      	movs	r3, #0
 8007df4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8007dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8007e06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007e16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e1a:	041b      	lsls	r3, r3, #16
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	431a      	orrs	r2, r3
 8007e26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007e30:	f107 031c 	add.w	r3, r7, #28
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fc f8b6 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007e3c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8007e3e:	bf00      	nop
 8007e40:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8007e42:	4b5e      	ldr	r3, [pc, #376]	; (8007fbc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8007e4c:	23ff      	movs	r3, #255	; 0xff
 8007e4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8007e52:	2300      	movs	r3, #0
 8007e54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e58:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007e5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007e60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007e64:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8007e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007e70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	461a      	mov	r2, r3
 8007e78:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007e7c:	021b      	lsls	r3, r3, #8
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007e8a:	f107 0318 	add.w	r3, r7, #24
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fc f889 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007e96:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8007e98:	bf00      	nop
 8007e9a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8007e9c:	4b48      	ldr	r3, [pc, #288]	; (8007fc0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8007eac:	23ff      	movs	r3, #255	; 0xff
 8007eae:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8007eb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007eb6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8007eba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007ebe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007ec2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007ec6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007eca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007ece:	041b      	lsls	r3, r3, #16
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007ee4:	f107 0314 	add.w	r3, r7, #20
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fc f85c 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007ef0:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8007ef2:	bf00      	nop
 8007ef4:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8007ef6:	4b33      	ldr	r3, [pc, #204]	; (8007fc4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	23f7      	movs	r3, #247	; 0xf7
 8007efc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8007f00:	234c      	movs	r3, #76	; 0x4c
 8007f02:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8007f06:	2302      	movs	r3, #2
 8007f08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007f0c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8007f10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007f14:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007f18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8007f1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f20:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007f24:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	431a      	orrs	r2, r3
 8007f34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007f3e:	f107 0310 	add.w	r3, r7, #16
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fc f82f 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007f4a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8007f4c:	bf00      	nop
 8007f4e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8007f50:	4b1d      	ldr	r3, [pc, #116]	; (8007fc8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	23f7      	movs	r3, #247	; 0xf7
 8007f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007f5a:	23d2      	movs	r3, #210	; 0xd2
 8007f5c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007f60:	2302      	movs	r3, #2
 8007f62:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8007f66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f6a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8007f6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f76:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007f7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8007f7e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007f82:	041b      	lsls	r3, r3, #16
 8007f84:	461a      	mov	r2, r3
 8007f86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007f98:	f107 030c 	add.w	r3, r7, #12
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fc f802 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8007fa6:	bf00      	nop
 8007fa8:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8007faa:	4b08      	ldr	r3, [pc, #32]	; (8007fcc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	bf00      	nop
 8007fb0:	3748      	adds	r7, #72	; 0x48
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	200237c4 	.word	0x200237c4
 8007fbc:	200237c8 	.word	0x200237c8
 8007fc0:	200237cc 	.word	0x200237cc
 8007fc4:	200237d0 	.word	0x200237d0
 8007fc8:	200237d4 	.word	0x200237d4
 8007fcc:	200237d8 	.word	0x200237d8

08007fd0 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	4a05      	ldr	r2, [pc, #20]	; (8007ff0 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fd53 	bl	8006a8c <_ZN8touchgfx6WidgetD1Ev>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	0802ca00 	.word	0x0802ca00

08007ff4 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff ffe7 	bl	8007fd0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8008002:	2130      	movs	r1, #48	; 0x30
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f01d fe26 	bl	8025c56 <_ZdlPvj>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	4a05      	ldr	r2, [pc, #20]	; (8008034 <_ZN8touchgfx4LineD1Ev+0x20>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff ffd3 	bl	8007fd0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	0802cc24 	.word	0x0802cc24

08008038 <_ZN8touchgfx4LineD0Ev>:
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff ffe7 	bl	8008014 <_ZN8touchgfx4LineD1Ev>
 8008046:	2174      	movs	r1, #116	; 0x74
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f01d fe04 	bl	8025c56 <_ZdlPvj>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	4a05      	ldr	r2, [pc, #20]	; (8008078 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe fee7 	bl	8006e3c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	0802c97c 	.word	0x0802c97c

0800807c <_ZN8touchgfx13PainterRGB888D0Ev>:
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff ffe7 	bl	8008058 <_ZN8touchgfx13PainterRGB888D1Ev>
 800808a:	2118      	movs	r1, #24
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f01d fde2 	bl	8025c56 <_ZdlPvj>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <_ZN8touchgfx13BoxWithBorderD1Ev>:
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	4a05      	ldr	r2, [pc, #20]	; (80080bc <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fe ffb7 	bl	8007020 <_ZN8touchgfx3BoxD1Ev>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	0802cf7c 	.word	0x0802cf7c

080080c0 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff ffe7 	bl	800809c <_ZN8touchgfx13BoxWithBorderD1Ev>
 80080ce:	2134      	movs	r1, #52	; 0x34
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f01d fdc0 	bl	8025c56 <_ZdlPvj>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	4a05      	ldr	r2, [pc, #20]	; (8008100 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fe fd6f 	bl	8006bd4 <_ZN8touchgfx8TextAreaD1Ev>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	0802ced4 	.word	0x0802ced4

08008104 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff ffe7 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8008112:	2140      	movs	r1, #64	; 0x40
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f01d fd9e 	bl	8025c56 <_ZdlPvj>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <_GLOBAL__sub_I__ZN15Screen1ViewBaseC2Ev>:
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
 8008128:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800812c:	2001      	movs	r0, #1
 800812e:	f7ff fe21 	bl	8007d74 <_Z41__static_initialization_and_destruction_0ii>
 8008132:	bd80      	pop	{r7, pc}

08008134 <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <__tcf_0+0xc>)
 800813a:	f7fd fc89 	bl	8005a50 <_ZN8touchgfx13GeneratedFontD1Ev>
 800813e:	bd80      	pop	{r7, pc}
 8008140:	200237dc 	.word	0x200237dc

08008144 <_Z37getFont_JetBrainsMono_Regular_40_4bppv>:
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08c      	sub	sp, #48	; 0x30
 8008148:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 800814a:	4b1f      	ldr	r3, [pc, #124]	; (80081c8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f3bf 8f5b 	dmb	ish
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	bf0c      	ite	eq
 800815c:	2301      	moveq	r3, #1
 800815e:	2300      	movne	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d02c      	beq.n	80081c0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 8008166:	4818      	ldr	r0, [pc, #96]	; (80081c8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 8008168:	f01d fd77 	bl	8025c5a <__cxa_guard_acquire>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	bf14      	ite	ne
 8008172:	2301      	movne	r3, #1
 8008174:	2300      	moveq	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d021      	beq.n	80081c0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800817c:	2300      	movs	r3, #0
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	2300      	movs	r3, #0
 8008182:	9309      	str	r3, [sp, #36]	; 0x24
 8008184:	2300      	movs	r3, #0
 8008186:	9308      	str	r3, [sp, #32]
 8008188:	233f      	movs	r3, #63	; 0x3f
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x88>)
 800818e:	9306      	str	r3, [sp, #24]
 8008190:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x8c>)
 8008192:	9305      	str	r3, [sp, #20]
 8008194:	2300      	movs	r3, #0
 8008196:	9304      	str	r3, [sp, #16]
 8008198:	2300      	movs	r3, #0
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	2301      	movs	r3, #1
 800819e:	9302      	str	r3, [sp, #8]
 80081a0:	2304      	movs	r3, #4
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	2307      	movs	r3, #7
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	2328      	movs	r3, #40	; 0x28
 80081aa:	2242      	movs	r2, #66	; 0x42
 80081ac:	4909      	ldr	r1, [pc, #36]	; (80081d4 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x90>)
 80081ae:	480a      	ldr	r0, [pc, #40]	; (80081d8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
 80081b0:	f7fe f962 	bl	8006478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80081b4:	4804      	ldr	r0, [pc, #16]	; (80081c8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 80081b6:	f01d fd5c 	bl	8025c72 <__cxa_guard_release>
 80081ba:	4808      	ldr	r0, [pc, #32]	; (80081dc <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x98>)
 80081bc:	f01d fe9e 	bl	8025efc <atexit>
    return JetBrainsMono_Regular_40_4bpp;
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20023804 	.word	0x20023804
 80081cc:	080d88ac 	.word	0x080d88ac
 80081d0:	0802b9d0 	.word	0x0802b9d0
 80081d4:	080d7704 	.word	0x080d7704
 80081d8:	200237dc 	.word	0x200237dc
 80081dc:	08008135 	.word	0x08008135

080081e0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__tcf_0+0xc>)
 80081e6:	f7fd fc33 	bl	8005a50 <_ZN8touchgfx13GeneratedFontD1Ev>
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20023808 	.word	0x20023808

080081f0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>:
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08c      	sub	sp, #48	; 0x30
 80081f4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 80081f6:	4b1f      	ldr	r3, [pc, #124]	; (8008274 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	f3bf 8f5b 	dmb	ish
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	bf0c      	ite	eq
 8008208:	2301      	moveq	r3, #1
 800820a:	2300      	movne	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d02c      	beq.n	800826c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 8008212:	4818      	ldr	r0, [pc, #96]	; (8008274 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 8008214:	f01d fd21 	bl	8025c5a <__cxa_guard_acquire>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	bf14      	ite	ne
 800821e:	2301      	movne	r3, #1
 8008220:	2300      	moveq	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d021      	beq.n	800826c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 8008228:	2300      	movs	r3, #0
 800822a:	930a      	str	r3, [sp, #40]	; 0x28
 800822c:	2300      	movs	r3, #0
 800822e:	9309      	str	r3, [sp, #36]	; 0x24
 8008230:	2300      	movs	r3, #0
 8008232:	9308      	str	r3, [sp, #32]
 8008234:	233f      	movs	r3, #63	; 0x3f
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x88>)
 800823a:	9306      	str	r3, [sp, #24]
 800823c:	4b0f      	ldr	r3, [pc, #60]	; (800827c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x8c>)
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	2300      	movs	r3, #0
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	2300      	movs	r3, #0
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	2301      	movs	r3, #1
 800824a:	9302      	str	r3, [sp, #8]
 800824c:	2304      	movs	r3, #4
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	230b      	movs	r3, #11
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	233c      	movs	r3, #60	; 0x3c
 8008256:	223f      	movs	r2, #63	; 0x3f
 8008258:	4909      	ldr	r1, [pc, #36]	; (8008280 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x90>)
 800825a:	480a      	ldr	r0, [pc, #40]	; (8008284 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
 800825c:	f7fe f90c 	bl	8006478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008260:	4804      	ldr	r0, [pc, #16]	; (8008274 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 8008262:	f01d fd06 	bl	8025c72 <__cxa_guard_release>
 8008266:	4808      	ldr	r0, [pc, #32]	; (8008288 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x98>)
 8008268:	f01d fe48 	bl	8025efc <atexit>
    return JetBrainsMono_Regular_60_4bpp;
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
}
 800826e:	4618      	mov	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20023830 	.word	0x20023830
 8008278:	080d88b0 	.word	0x080d88b0
 800827c:	0802b9d4 	.word	0x0802b9d4
 8008280:	080d7aa0 	.word	0x080d7aa0
 8008284:	20023808 	.word	0x20023808
 8008288:	080081e1 	.word	0x080081e1

0800828c <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
 8008290:	4801      	ldr	r0, [pc, #4]	; (8008298 <__tcf_0+0xc>)
 8008292:	f7fd fbdd 	bl	8005a50 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20023834 	.word	0x20023834

0800829c <_Z24getFont_swisop3_300_4bppv>:
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08c      	sub	sp, #48	; 0x30
 80082a0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 80082a2:	4b20      	ldr	r3, [pc, #128]	; (8008324 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	f3bf 8f5b 	dmb	ish
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bf0c      	ite	eq
 80082b4:	2301      	moveq	r3, #1
 80082b6:	2300      	movne	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d02d      	beq.n	800831a <_Z24getFont_swisop3_300_4bppv+0x7e>
 80082be:	4819      	ldr	r0, [pc, #100]	; (8008324 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80082c0:	f01d fccb 	bl	8025c5a <__cxa_guard_acquire>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bf14      	ite	ne
 80082ca:	2301      	movne	r3, #1
 80082cc:	2300      	moveq	r3, #0
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d022      	beq.n	800831a <_Z24getFont_swisop3_300_4bppv+0x7e>
 80082d4:	2300      	movs	r3, #0
 80082d6:	930a      	str	r3, [sp, #40]	; 0x28
 80082d8:	2300      	movs	r3, #0
 80082da:	9309      	str	r3, [sp, #36]	; 0x24
 80082dc:	2300      	movs	r3, #0
 80082de:	9308      	str	r3, [sp, #32]
 80082e0:	233f      	movs	r3, #63	; 0x3f
 80082e2:	9307      	str	r3, [sp, #28]
 80082e4:	4b10      	ldr	r3, [pc, #64]	; (8008328 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 80082e6:	9306      	str	r3, [sp, #24]
 80082e8:	4b10      	ldr	r3, [pc, #64]	; (800832c <_Z24getFont_swisop3_300_4bppv+0x90>)
 80082ea:	9305      	str	r3, [sp, #20]
 80082ec:	2300      	movs	r3, #0
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	2300      	movs	r3, #0
 80082f2:	9303      	str	r3, [sp, #12]
 80082f4:	2301      	movs	r3, #1
 80082f6:	9302      	str	r3, [sp, #8]
 80082f8:	2304      	movs	r3, #4
 80082fa:	9301      	str	r3, [sp, #4]
 80082fc:	233b      	movs	r3, #59	; 0x3b
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008304:	223f      	movs	r2, #63	; 0x3f
 8008306:	490a      	ldr	r1, [pc, #40]	; (8008330 <_Z24getFont_swisop3_300_4bppv+0x94>)
 8008308:	480a      	ldr	r0, [pc, #40]	; (8008334 <_Z24getFont_swisop3_300_4bppv+0x98>)
 800830a:	f7fe f8b5 	bl	8006478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800830e:	4805      	ldr	r0, [pc, #20]	; (8008324 <_Z24getFont_swisop3_300_4bppv+0x88>)
 8008310:	f01d fcaf 	bl	8025c72 <__cxa_guard_release>
 8008314:	4808      	ldr	r0, [pc, #32]	; (8008338 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 8008316:	f01d fdf1 	bl	8025efc <atexit>
    return swisop3_300_4bpp;
 800831a:	4b06      	ldr	r3, [pc, #24]	; (8008334 <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 800831c:	4618      	mov	r0, r3
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	2002385c 	.word	0x2002385c
 8008328:	080d88b4 	.word	0x080d88b4
 800832c:	0802b9d8 	.word	0x0802b9d8
 8008330:	080d7e14 	.word	0x080d7e14
 8008334:	20023834 	.word	0x20023834
 8008338:	0800828d 	.word	0x0800828d

0800833c <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
 8008340:	4801      	ldr	r0, [pc, #4]	; (8008348 <__tcf_0+0xc>)
 8008342:	f7fd fb85 	bl	8005a50 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20023860 	.word	0x20023860

0800834c <_Z23getFont_swisop3_50_4bppv>:
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08c      	sub	sp, #48	; 0x30
 8008350:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 8008352:	4b1f      	ldr	r3, [pc, #124]	; (80083d0 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	f3bf 8f5b 	dmb	ish
 800835a:	b2db      	uxtb	r3, r3
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d02c      	beq.n	80083c8 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800836e:	4818      	ldr	r0, [pc, #96]	; (80083d0 <_Z23getFont_swisop3_50_4bppv+0x84>)
 8008370:	f01d fc73 	bl	8025c5a <__cxa_guard_acquire>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	bf14      	ite	ne
 800837a:	2301      	movne	r3, #1
 800837c:	2300      	moveq	r3, #0
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d021      	beq.n	80083c8 <_Z23getFont_swisop3_50_4bppv+0x7c>
 8008384:	2300      	movs	r3, #0
 8008386:	930a      	str	r3, [sp, #40]	; 0x28
 8008388:	2300      	movs	r3, #0
 800838a:	9309      	str	r3, [sp, #36]	; 0x24
 800838c:	2300      	movs	r3, #0
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	233f      	movs	r3, #63	; 0x3f
 8008392:	9307      	str	r3, [sp, #28]
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <_Z23getFont_swisop3_50_4bppv+0x88>)
 8008396:	9306      	str	r3, [sp, #24]
 8008398:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	2300      	movs	r3, #0
 800839e:	9304      	str	r3, [sp, #16]
 80083a0:	2300      	movs	r3, #0
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	2301      	movs	r3, #1
 80083a6:	9302      	str	r3, [sp, #8]
 80083a8:	2304      	movs	r3, #4
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	230a      	movs	r3, #10
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	2332      	movs	r3, #50	; 0x32
 80083b2:	2241      	movs	r2, #65	; 0x41
 80083b4:	4909      	ldr	r1, [pc, #36]	; (80083dc <_Z23getFont_swisop3_50_4bppv+0x90>)
 80083b6:	480a      	ldr	r0, [pc, #40]	; (80083e0 <_Z23getFont_swisop3_50_4bppv+0x94>)
 80083b8:	f7fe f85e 	bl	8006478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80083bc:	4804      	ldr	r0, [pc, #16]	; (80083d0 <_Z23getFont_swisop3_50_4bppv+0x84>)
 80083be:	f01d fc58 	bl	8025c72 <__cxa_guard_release>
 80083c2:	4808      	ldr	r0, [pc, #32]	; (80083e4 <_Z23getFont_swisop3_50_4bppv+0x98>)
 80083c4:	f01d fd9a 	bl	8025efc <atexit>
    return swisop3_50_4bpp;
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20023888 	.word	0x20023888
 80083d4:	080d88b8 	.word	0x080d88b8
 80083d8:	0802b9dc 	.word	0x0802b9dc
 80083dc:	080d8188 	.word	0x080d8188
 80083e0:	20023860 	.word	0x20023860
 80083e4:	0800833d 	.word	0x0800833d

080083e8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <__tcf_0+0xc>)
 80083ee:	f7fd fb2f 	bl	8005a50 <_ZN8touchgfx13GeneratedFontD1Ev>
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	2002388c 	.word	0x2002388c

080083f8 <_Z23getFont_verdana_10_4bppv>:
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08c      	sub	sp, #48	; 0x30
 80083fc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80083fe:	4b1f      	ldr	r3, [pc, #124]	; (800847c <_Z23getFont_verdana_10_4bppv+0x84>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	f3bf 8f5b 	dmb	ish
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	bf0c      	ite	eq
 8008410:	2301      	moveq	r3, #1
 8008412:	2300      	movne	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d02c      	beq.n	8008474 <_Z23getFont_verdana_10_4bppv+0x7c>
 800841a:	4818      	ldr	r0, [pc, #96]	; (800847c <_Z23getFont_verdana_10_4bppv+0x84>)
 800841c:	f01d fc1d 	bl	8025c5a <__cxa_guard_acquire>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	bf14      	ite	ne
 8008426:	2301      	movne	r3, #1
 8008428:	2300      	moveq	r3, #0
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	d021      	beq.n	8008474 <_Z23getFont_verdana_10_4bppv+0x7c>
 8008430:	2300      	movs	r3, #0
 8008432:	930a      	str	r3, [sp, #40]	; 0x28
 8008434:	2300      	movs	r3, #0
 8008436:	9309      	str	r3, [sp, #36]	; 0x24
 8008438:	2300      	movs	r3, #0
 800843a:	9308      	str	r3, [sp, #32]
 800843c:	233f      	movs	r3, #63	; 0x3f
 800843e:	9307      	str	r3, [sp, #28]
 8008440:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <_Z23getFont_verdana_10_4bppv+0x88>)
 8008442:	9306      	str	r3, [sp, #24]
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	2300      	movs	r3, #0
 800844a:	9304      	str	r3, [sp, #16]
 800844c:	2300      	movs	r3, #0
 800844e:	9303      	str	r3, [sp, #12]
 8008450:	2301      	movs	r3, #1
 8008452:	9302      	str	r3, [sp, #8]
 8008454:	2304      	movs	r3, #4
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	2300      	movs	r3, #0
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	230a      	movs	r3, #10
 800845e:	2201      	movs	r2, #1
 8008460:	4909      	ldr	r1, [pc, #36]	; (8008488 <_Z23getFont_verdana_10_4bppv+0x90>)
 8008462:	480a      	ldr	r0, [pc, #40]	; (800848c <_Z23getFont_verdana_10_4bppv+0x94>)
 8008464:	f7fe f808 	bl	8006478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008468:	4804      	ldr	r0, [pc, #16]	; (800847c <_Z23getFont_verdana_10_4bppv+0x84>)
 800846a:	f01d fc02 	bl	8025c72 <__cxa_guard_release>
 800846e:	4808      	ldr	r0, [pc, #32]	; (8008490 <_Z23getFont_verdana_10_4bppv+0x98>)
 8008470:	f01d fd44 	bl	8025efc <atexit>
    return verdana_10_4bpp;
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8008476:	4618      	mov	r0, r3
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	200238b4 	.word	0x200238b4
 8008480:	080d88bc 	.word	0x080d88bc
 8008484:	0802b9e0 	.word	0x0802b9e0
 8008488:	080d8518 	.word	0x080d8518
 800848c:	2002388c 	.word	0x2002388c
 8008490:	080083e9 	.word	0x080083e9

08008494 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
 8008498:	4801      	ldr	r0, [pc, #4]	; (80084a0 <__tcf_0+0xc>)
 800849a:	f7fd fad9 	bl	8005a50 <_ZN8touchgfx13GeneratedFontD1Ev>
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	200238b8 	.word	0x200238b8

080084a4 <_Z23getFont_verdana_20_4bppv>:
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08c      	sub	sp, #48	; 0x30
 80084a8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80084aa:	4b1f      	ldr	r3, [pc, #124]	; (8008528 <_Z23getFont_verdana_20_4bppv+0x84>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	f3bf 8f5b 	dmb	ish
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d02c      	beq.n	8008520 <_Z23getFont_verdana_20_4bppv+0x7c>
 80084c6:	4818      	ldr	r0, [pc, #96]	; (8008528 <_Z23getFont_verdana_20_4bppv+0x84>)
 80084c8:	f01d fbc7 	bl	8025c5a <__cxa_guard_acquire>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bf14      	ite	ne
 80084d2:	2301      	movne	r3, #1
 80084d4:	2300      	moveq	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d021      	beq.n	8008520 <_Z23getFont_verdana_20_4bppv+0x7c>
 80084dc:	2300      	movs	r3, #0
 80084de:	930a      	str	r3, [sp, #40]	; 0x28
 80084e0:	2300      	movs	r3, #0
 80084e2:	9309      	str	r3, [sp, #36]	; 0x24
 80084e4:	2300      	movs	r3, #0
 80084e6:	9308      	str	r3, [sp, #32]
 80084e8:	233f      	movs	r3, #63	; 0x3f
 80084ea:	9307      	str	r3, [sp, #28]
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <_Z23getFont_verdana_20_4bppv+0x88>)
 80084ee:	9306      	str	r3, [sp, #24]
 80084f0:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80084f2:	9305      	str	r3, [sp, #20]
 80084f4:	2301      	movs	r3, #1
 80084f6:	9304      	str	r3, [sp, #16]
 80084f8:	2301      	movs	r3, #1
 80084fa:	9303      	str	r3, [sp, #12]
 80084fc:	2301      	movs	r3, #1
 80084fe:	9302      	str	r3, [sp, #8]
 8008500:	2304      	movs	r3, #4
 8008502:	9301      	str	r3, [sp, #4]
 8008504:	2304      	movs	r3, #4
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	2314      	movs	r3, #20
 800850a:	223f      	movs	r2, #63	; 0x3f
 800850c:	4909      	ldr	r1, [pc, #36]	; (8008534 <_Z23getFont_verdana_20_4bppv+0x90>)
 800850e:	480a      	ldr	r0, [pc, #40]	; (8008538 <_Z23getFont_verdana_20_4bppv+0x94>)
 8008510:	f7fd ffb2 	bl	8006478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008514:	4804      	ldr	r0, [pc, #16]	; (8008528 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008516:	f01d fbac 	bl	8025c72 <__cxa_guard_release>
 800851a:	4808      	ldr	r0, [pc, #32]	; (800853c <_Z23getFont_verdana_20_4bppv+0x98>)
 800851c:	f01d fcee 	bl	8025efc <atexit>
    return verdana_20_4bpp;
 8008520:	4b05      	ldr	r3, [pc, #20]	; (8008538 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8008522:	4618      	mov	r0, r3
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	200238e0 	.word	0x200238e0
 800852c:	080d88c0 	.word	0x080d88c0
 8008530:	0802b9e4 	.word	0x0802b9e4
 8008534:	080d8528 	.word	0x080d8528
 8008538:	200238b8 	.word	0x200238b8
 800853c:	08008495 	.word	0x08008495

08008540 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
 8008544:	4801      	ldr	r0, [pc, #4]	; (800854c <__tcf_0+0xc>)
 8008546:	f7fd fa83 	bl	8005a50 <_ZN8touchgfx13GeneratedFontD1Ev>
 800854a:	bd80      	pop	{r7, pc}
 800854c:	200238e4 	.word	0x200238e4

08008550 <_Z23getFont_verdana_40_4bppv>:
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08c      	sub	sp, #48	; 0x30
 8008554:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008556:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	f3bf 8f5b 	dmb	ish
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	bf0c      	ite	eq
 8008568:	2301      	moveq	r3, #1
 800856a:	2300      	movne	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d02c      	beq.n	80085cc <_Z23getFont_verdana_40_4bppv+0x7c>
 8008572:	4818      	ldr	r0, [pc, #96]	; (80085d4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008574:	f01d fb71 	bl	8025c5a <__cxa_guard_acquire>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	bf14      	ite	ne
 800857e:	2301      	movne	r3, #1
 8008580:	2300      	moveq	r3, #0
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d021      	beq.n	80085cc <_Z23getFont_verdana_40_4bppv+0x7c>
 8008588:	2300      	movs	r3, #0
 800858a:	930a      	str	r3, [sp, #40]	; 0x28
 800858c:	2300      	movs	r3, #0
 800858e:	9309      	str	r3, [sp, #36]	; 0x24
 8008590:	2300      	movs	r3, #0
 8008592:	9308      	str	r3, [sp, #32]
 8008594:	233f      	movs	r3, #63	; 0x3f
 8008596:	9307      	str	r3, [sp, #28]
 8008598:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <_Z23getFont_verdana_40_4bppv+0x88>)
 800859a:	9306      	str	r3, [sp, #24]
 800859c:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <_Z23getFont_verdana_40_4bppv+0x8c>)
 800859e:	9305      	str	r3, [sp, #20]
 80085a0:	2300      	movs	r3, #0
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	2300      	movs	r3, #0
 80085a6:	9303      	str	r3, [sp, #12]
 80085a8:	2301      	movs	r3, #1
 80085aa:	9302      	str	r3, [sp, #8]
 80085ac:	2304      	movs	r3, #4
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	2300      	movs	r3, #0
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	2328      	movs	r3, #40	; 0x28
 80085b6:	2201      	movs	r2, #1
 80085b8:	4909      	ldr	r1, [pc, #36]	; (80085e0 <_Z23getFont_verdana_40_4bppv+0x90>)
 80085ba:	480a      	ldr	r0, [pc, #40]	; (80085e4 <_Z23getFont_verdana_40_4bppv+0x94>)
 80085bc:	f7fd ff5c 	bl	8006478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80085c0:	4804      	ldr	r0, [pc, #16]	; (80085d4 <_Z23getFont_verdana_40_4bppv+0x84>)
 80085c2:	f01d fb56 	bl	8025c72 <__cxa_guard_release>
 80085c6:	4808      	ldr	r0, [pc, #32]	; (80085e8 <_Z23getFont_verdana_40_4bppv+0x98>)
 80085c8:	f01d fc98 	bl	8025efc <atexit>
    return verdana_40_4bpp;
 80085cc:	4b05      	ldr	r3, [pc, #20]	; (80085e4 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	2002390c 	.word	0x2002390c
 80085d8:	080d89a0 	.word	0x080d89a0
 80085dc:	0802b9e8 	.word	0x0802b9e8
 80085e0:	080d889c 	.word	0x080d889c
 80085e4:	200238e4 	.word	0x200238e4
 80085e8:	08008541 	.word	0x08008541

080085ec <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	460b      	mov	r3, r1
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 80085fa:	2300      	movs	r3, #0
    }
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008610:	2300      	movs	r3, #0
    }
 8008612:	4618      	mov	r0, r3
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008626:	2300      	movs	r3, #0
    }
 8008628:	4618      	mov	r0, r3
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8008642:	4a07      	ldr	r2, [pc, #28]	; (8008660 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008648:	4a06      	ldr	r2, [pc, #24]	; (8008664 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800864e:	4a06      	ldr	r2, [pc, #24]	; (8008668 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	8013      	strh	r3, [r2, #0]
    }
 8008654:	bf00      	nop
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20056768 	.word	0x20056768
 8008664:	20056770 	.word	0x20056770
 8008668:	2005676c 	.word	0x2005676c

0800866c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800866c:	b40e      	push	{r1, r2, r3}
 800866e:	b580      	push	{r7, lr}
 8008670:	b085      	sub	sp, #20
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8008676:	f107 0320 	add.w	r3, r7, #32
 800867a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	2100      	movs	r1, #0
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f011 f96c 	bl	8019960 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008688:	4603      	mov	r3, r0
 800868a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800868c:	89fb      	ldrh	r3, [r7, #14]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008698:	b003      	add	sp, #12
 800869a:	4770      	bx	lr

0800869c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800869c:	b40c      	push	{r2, r3}
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80086aa:	f107 031c 	add.w	r3, r7, #28
 80086ae:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80086b0:	78f9      	ldrb	r1, [r7, #3]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f011 f952 	bl	8019960 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80086bc:	4603      	mov	r3, r0
 80086be:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80086c0:	89fb      	ldrh	r3, [r7, #14]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086cc:	b002      	add	sp, #8
 80086ce:	4770      	bx	lr

080086d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08a      	sub	sp, #40	; 0x28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d016      	beq.n	8008712 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	331a      	adds	r3, #26
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	8adb      	ldrh	r3, [r3, #22]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d105      	bne.n	80086fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80086f2:	4b43      	ldr	r3, [pc, #268]	; (8008800 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80086f4:	4a43      	ldr	r2, [pc, #268]	; (8008804 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80086f6:	21bf      	movs	r1, #191	; 0xbf
 80086f8:	4843      	ldr	r0, [pc, #268]	; (8008808 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80086fa:	f01d fbe1 	bl	8025ec0 <__assert_func>
            return buffer[pos];
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	8a9b      	ldrh	r3, [r3, #20]
 8008702:	461a      	mov	r2, r3
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d06a      	beq.n	80087ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f012 fd0d 	bl	801b138 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	331a      	adds	r3, #26
 8008722:	623b      	str	r3, [r7, #32]
 8008724:	2301      	movs	r3, #1
 8008726:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	8adb      	ldrh	r3, [r3, #22]
 800872c:	8bfa      	ldrh	r2, [r7, #30]
 800872e:	429a      	cmp	r2, r3
 8008730:	d305      	bcc.n	800873e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008732:	4b36      	ldr	r3, [pc, #216]	; (800880c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008734:	4a36      	ldr	r2, [pc, #216]	; (8008810 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008736:	21c4      	movs	r1, #196	; 0xc4
 8008738:	4833      	ldr	r0, [pc, #204]	; (8008808 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800873a:	f01d fbc1 	bl	8025ec0 <__assert_func>
            const uint16_t index = pos + offset;
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	8a9a      	ldrh	r2, [r3, #20]
 8008742:	8bfb      	ldrh	r3, [r7, #30]
 8008744:	4413      	add	r3, r2
 8008746:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008748:	8bbb      	ldrh	r3, [r7, #28]
 800874a:	2b09      	cmp	r3, #9
 800874c:	d801      	bhi.n	8008752 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800874e:	8bbb      	ldrh	r3, [r7, #28]
 8008750:	e001      	b.n	8008756 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008752:	8bbb      	ldrh	r3, [r7, #28]
 8008754:	3b0a      	subs	r3, #10
 8008756:	6a3a      	ldr	r2, [r7, #32]
 8008758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800875c:	f640 123f 	movw	r2, #2367	; 0x93f
 8008760:	4293      	cmp	r3, r2
 8008762:	bf0c      	ite	eq
 8008764:	2301      	moveq	r3, #1
 8008766:	2300      	movne	r3, #0
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d03f      	beq.n	80087ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	331a      	adds	r3, #26
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	321a      	adds	r2, #26
 8008776:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	8ad2      	ldrh	r2, [r2, #22]
 800877c:	2a00      	cmp	r2, #0
 800877e:	d105      	bne.n	800878c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008780:	4b1f      	ldr	r3, [pc, #124]	; (8008800 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008782:	4a20      	ldr	r2, [pc, #128]	; (8008804 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008784:	21bf      	movs	r1, #191	; 0xbf
 8008786:	4820      	ldr	r0, [pc, #128]	; (8008808 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008788:	f01d fb9a 	bl	8025ec0 <__assert_func>
            return buffer[pos];
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	8a92      	ldrh	r2, [r2, #20]
 8008790:	4611      	mov	r1, r2
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	4613      	mov	r3, r2
 800879c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	8adb      	ldrh	r3, [r3, #22]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d806      	bhi.n	80087b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80087a6:	4b1b      	ldr	r3, [pc, #108]	; (8008814 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80087a8:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80087aa:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80087ae:	4816      	ldr	r0, [pc, #88]	; (8008808 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80087b0:	f01d fb86 	bl	8025ec0 <__assert_func>
            const uint16_t index = pos + 1;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	8a9b      	ldrh	r3, [r3, #20]
 80087b8:	3301      	adds	r3, #1
 80087ba:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80087bc:	89bb      	ldrh	r3, [r7, #12]
 80087be:	2b09      	cmp	r3, #9
 80087c0:	d801      	bhi.n	80087c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80087c2:	89bb      	ldrh	r3, [r7, #12]
 80087c4:	e000      	b.n	80087c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80087c6:	2300      	movs	r3, #0
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	89f9      	ldrh	r1, [r7, #14]
 80087cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80087d0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	331a      	adds	r3, #26
 80087d6:	61bb      	str	r3, [r7, #24]
 80087d8:	f640 133f 	movw	r3, #2367	; 0x93f
 80087dc:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	8a9b      	ldrh	r3, [r3, #20]
 80087e2:	4619      	mov	r1, r3
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	8afa      	ldrh	r2, [r7, #22]
 80087e8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80087ec:	bf00      	nop
        }
    }
    return getNextChar();
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f012 fb86 	bl	801af00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80087f4:	4603      	mov	r3, r0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3728      	adds	r7, #40	; 0x28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	0802afd8 	.word	0x0802afd8
 8008804:	0802afe4 	.word	0x0802afe4
 8008808:	0802b090 	.word	0x0802b090
 800880c:	0802b0dc 	.word	0x0802b0dc
 8008810:	0802b0ec 	.word	0x0802b0ec
 8008814:	0802b1c0 	.word	0x0802b1c0
 8008818:	0802b1cc 	.word	0x0802b1cc

0800881c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f012 fb25 	bl	801ae74 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b088      	sub	sp, #32
 8008836:	af02      	add	r7, sp, #8
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	1d38      	adds	r0, r7, #4
 800883c:	e880 0006 	stmia.w	r0, {r1, r2}
 8008840:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8008842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008846:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008848:	1d39      	adds	r1, r7, #4
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f00f fdde 	bl	8018418 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800885c:	bf00      	nop
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d127      	bne.n	80088c8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	4a1e      	ldr	r2, [pc, #120]	; (80088f4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800887c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d016      	beq.n	80088b2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	4a1b      	ldr	r2, [pc, #108]	; (80088f4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800888c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	4413      	add	r3, r2
 8008896:	4a18      	ldr	r2, [pc, #96]	; (80088f8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008898:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	4413      	add	r3, r2
 80088a2:	4a16      	ldr	r2, [pc, #88]	; (80088fc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80088a4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4413      	add	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	e00a      	b.n	80088c8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80088b2:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80088b4:	4a12      	ldr	r2, [pc, #72]	; (8008900 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80088b6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80088b8:	4a12      	ldr	r2, [pc, #72]	; (8008904 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80088ba:	4b10      	ldr	r3, [pc, #64]	; (80088fc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80088bc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80088be:	88fb      	ldrh	r3, [r7, #6]
 80088c0:	4a11      	ldr	r2, [pc, #68]	; (8008908 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80088c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088c6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00d      	beq.n	80088ea <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80088ce:	4a0f      	ldr	r2, [pc, #60]	; (800890c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80088d0:	88fb      	ldrh	r3, [r7, #6]
 80088d2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80088d4:	f000 f83e 	bl	8008954 <_ZN17TypedTextDatabase8getFontsEv>
 80088d8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80088da:	f000 f833 	bl	8008944 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80088de:	4603      	mov	r3, r0
 80088e0:	461a      	mov	r2, r3
 80088e2:	4621      	mov	r1, r4
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff fea5 	bl	8008634 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80088ea:	bf00      	nop
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd90      	pop	{r4, r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20023910 	.word	0x20023910
 80088f8:	20023918 	.word	0x20023918
 80088fc:	2002391c 	.word	0x2002391c
 8008900:	080d89d4 	.word	0x080d89d4
 8008904:	080d89a4 	.word	0x080d89a4
 8008908:	080d8a64 	.word	0x080d8a64
 800890c:	20023914 	.word	0x20023914

08008910 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800891c:	4b07      	ldr	r3, [pc, #28]	; (800893c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	4b07      	ldr	r3, [pc, #28]	; (8008940 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8008922:	6819      	ldr	r1, [r3, #0]
 8008924:	887b      	ldrh	r3, [r7, #2]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	4413      	add	r3, r2
}
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	20023918 	.word	0x20023918
 8008940:	2002391c 	.word	0x2002391c

08008944 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8008944:	b480      	push	{r7}
 8008946:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8008948:	230c      	movs	r3, #12
}
 800894a:	4618      	mov	r0, r3
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8008958:	4b02      	ldr	r3, [pc, #8]	; (8008964 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800895a:	4618      	mov	r0, r3
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	20023920 	.word	0x20023920

08008968 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_swisop3_50_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d127      	bne.n	80089c8 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800897e:	4293      	cmp	r3, r2
 8008980:	d122      	bne.n	80089c8 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_verdana_20_4bpp()),
 8008982:	f7ff fd8f 	bl	80084a4 <_Z23getFont_verdana_20_4bppv>
 8008986:	4603      	mov	r3, r0
};
 8008988:	4a11      	ldr	r2, [pc, #68]	; (80089d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800898a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800898c:	f7ff fde0 	bl	8008550 <_Z23getFont_verdana_40_4bppv>
 8008990:	4603      	mov	r3, r0
};
 8008992:	4a0f      	ldr	r2, [pc, #60]	; (80089d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008994:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 8008996:	f7ff fd2f 	bl	80083f8 <_Z23getFont_verdana_10_4bppv>
 800899a:	4603      	mov	r3, r0
};
 800899c:	4a0c      	ldr	r2, [pc, #48]	; (80089d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800899e:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_300_4bpp()),
 80089a0:	f7ff fc7c 	bl	800829c <_Z24getFont_swisop3_300_4bppv>
 80089a4:	4603      	mov	r3, r0
};
 80089a6:	4a0a      	ldr	r2, [pc, #40]	; (80089d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80089a8:	60d3      	str	r3, [r2, #12]
    &(getFont_JetBrainsMono_Regular_40_4bpp()),
 80089aa:	f7ff fbcb 	bl	8008144 <_Z37getFont_JetBrainsMono_Regular_40_4bppv>
 80089ae:	4603      	mov	r3, r0
};
 80089b0:	4a07      	ldr	r2, [pc, #28]	; (80089d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80089b2:	6113      	str	r3, [r2, #16]
    &(getFont_JetBrainsMono_Regular_60_4bpp()),
 80089b4:	f7ff fc1c 	bl	80081f0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>
 80089b8:	4603      	mov	r3, r0
};
 80089ba:	4a05      	ldr	r2, [pc, #20]	; (80089d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80089bc:	6153      	str	r3, [r2, #20]
    &(getFont_swisop3_50_4bpp())
 80089be:	f7ff fcc5 	bl	800834c <_Z23getFont_swisop3_50_4bppv>
 80089c2:	4603      	mov	r3, r0
};
 80089c4:	4a02      	ldr	r2, [pc, #8]	; (80089d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80089c6:	6193      	str	r3, [r2, #24]
} // namespace TypedTextDatabase
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20023920 	.word	0x20023920

080089d4 <_GLOBAL__sub_I_touchgfx_fonts>:
 80089d4:	b580      	push	{r7, lr}
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089dc:	2001      	movs	r0, #1
 80089de:	f7ff ffc3 	bl	8008968 <_Z41__static_initialization_and_destruction_0ii>
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <_ZN8touchgfx13BoxWithBorderC1Ev>:
{
public:
    BoxWithBorder()
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe f86e 	bl	8006ad0 <_ZN8touchgfx3BoxC1Ev>
 80089f4:	4a08      	ldr	r2, [pc, #32]	; (8008a18 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	332c      	adds	r3, #44	; 0x2c
 80089fe:	2100      	movs	r1, #0
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fb fad1 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	0802cf7c 	.word	0x0802cf7c

08008a1c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	887a      	ldrh	r2, [r7, #2]
 8008a48:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
	...

08008a58 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 8008a58:	b590      	push	{r4, r7, lr}
 8008a5a:	b091      	sub	sp, #68	; 0x44
 8008a5c:	af02      	add	r7, sp, #8
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fd fe86 	bl	8006774 <_ZN8touchgfx9ContainerC1Ev>
 8008a68:	4a69      	ldr	r2, [pc, #420]	; (8008c10 <_ZN12alertBarBaseC1Ev+0x1b8>)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	332c      	adds	r3, #44	; 0x2c
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff ffb6 	bl	80089e4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3360      	adds	r3, #96	; 0x60
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe f8d1 	bl	8006c24 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fd fdfd 	bl	8006688 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	213c      	movs	r1, #60	; 0x3c
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fd fe07 	bl	80066a6 <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008a9e:	233c      	movs	r3, #60	; 0x3c
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f7fd feb2 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008ab4:	23ff      	movs	r3, #255	; 0xff
 8008ab6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008aba:	2300      	movs	r3, #0
 8008abc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008ac6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008aca:	041b      	lsls	r3, r3, #16
 8008acc:	461a      	mov	r2, r3
 8008ace:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ada:	4313      	orrs	r3, r2
 8008adc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008ae0:	f107 031c 	add.w	r3, r7, #28
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fb fa5e 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	4619      	mov	r1, r3
 8008af0:	4620      	mov	r0, r4
 8008af2:	f7fe f811 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008afc:	2300      	movs	r3, #0
 8008afe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008b02:	2300      	movs	r3, #0
 8008b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b12:	041b      	lsls	r3, r3, #16
 8008b14:	461a      	mov	r2, r3
 8008b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b1a:	021b      	lsls	r3, r3, #8
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b22:	4313      	orrs	r3, r2
 8008b24:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b28:	f107 0318 	add.w	r3, r7, #24
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fb fa3a 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	4619      	mov	r1, r3
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f7ff ff6f 	bl	8008a1c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	332c      	adds	r3, #44	; 0x2c
 8008b42:	2105      	movs	r1, #5
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff ff77 	bl	8008a38 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(263, 0, 302, 60);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8008b50:	233c      	movs	r3, #60	; 0x3c
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f240 1107 	movw	r1, #263	; 0x107
 8008b5e:	f7fd fe58 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008b68:	23ff      	movs	r3, #255	; 0xff
 8008b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b6e:	23ff      	movs	r3, #255	; 0xff
 8008b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b74:	23ff      	movs	r3, #255	; 0xff
 8008b76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b7e:	041b      	lsls	r3, r3, #16
 8008b80:	461a      	mov	r2, r3
 8008b82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	431a      	orrs	r2, r3
 8008b8a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b94:	f107 0314 	add.w	r3, r7, #20
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fb fa04 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	62fc      	str	r4, [r7, #44]	; 0x2c
 8008ba4:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8008ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008bac:	bf00      	nop
    frontText.setLinespacing(0);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3360      	adds	r3, #96	; 0x60
 8008bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bba:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008bbc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008bbe:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008bc6:	f107 030c 	add.w	r3, r7, #12
 8008bca:	2105      	movs	r1, #5
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fd ffb1 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8008bd2:	f107 030c 	add.w	r3, r7, #12
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f00e f99e 	bl	8016f1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008bde:	f107 030c 	add.w	r3, r7, #12
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fc ff56 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	332c      	adds	r3, #44	; 0x2c
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	f00c f9d3 	bl	8014f9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3360      	adds	r3, #96	; 0x60
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f00c f9cc 	bl	8014f9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4618      	mov	r0, r3
 8008c08:	373c      	adds	r7, #60	; 0x3c
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd90      	pop	{r4, r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	0802ba48 	.word	0x0802ba48

08008c14 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]

}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 8008c28:	b590      	push	{r4, r7, lr}
 8008c2a:	b091      	sub	sp, #68	; 0x44
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fd fd9e 	bl	8006774 <_ZN8touchgfx9ContainerC1Ev>
 8008c38:	4a6a      	ldr	r2, [pc, #424]	; (8008de4 <_ZN11tempBoxBaseC1Ev+0x1bc>)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	332c      	adds	r3, #44	; 0x2c
 8008c42:	4618      	mov	r0, r3
 8008c44:	f00d fd9e 	bl	8016784 <_ZN8touchgfx4LineC1Ev>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008c4e:	f107 0310 	add.w	r3, r7, #16
 8008c52:	2100      	movs	r1, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fb f9a7 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8008c5a:	6939      	ldr	r1, [r7, #16]
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f7fe f90f 	bl	8006e80 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	33b8      	adds	r3, #184	; 0xb8
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fd ff7a 	bl	8006b60 <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	21dc      	movs	r1, #220	; 0xdc
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fd fd09 	bl	8006688 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	213c      	movs	r1, #60	; 0x3c
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fd fd13 	bl	80066a6 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8008c86:	233c      	movs	r3, #60	; 0x3c
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	2364      	movs	r3, #100	; 0x64
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2100      	movs	r1, #0
 8008c90:	f7fd fdbf 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008c9a:	23ff      	movs	r3, #255	; 0xff
 8008c9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008ca0:	23ff      	movs	r3, #255	; 0xff
 8008ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ca6:	23ff      	movs	r3, #255	; 0xff
 8008ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008cac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cb8:	021b      	lsls	r3, r3, #8
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008cc6:	f107 0320 	add.w	r3, r7, #32
 8008cca:	4611      	mov	r1, r2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fb f96b 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f7fe f8f2 	bl	8006ec0 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	33a0      	adds	r3, #160	; 0xa0
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4610      	mov	r0, r2
 8008cea:	f00d fb6f 	bl	80163cc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	332c      	adds	r3, #44	; 0x2c
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe ffd8 	bl	8007cac <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	332c      	adds	r3, #44	; 0x2c
 8008d00:	22dc      	movs	r2, #220	; 0xdc
 8008d02:	2100      	movs	r1, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe fff7 	bl	8007cf8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	332c      	adds	r3, #44	; 0x2c
 8008d0e:	2101      	movs	r1, #1
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7ff f817 	bl	8007d44 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	332c      	adds	r3, #44	; 0x2c
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f00d fe77 	bl	8016a10 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8008d28:	233c      	movs	r3, #60	; 0x3c
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	23dc      	movs	r3, #220	; 0xdc
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2100      	movs	r1, #0
 8008d32:	f7fd fd6e 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8008d3c:	23ff      	movs	r3, #255	; 0xff
 8008d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d42:	23ff      	movs	r3, #255	; 0xff
 8008d44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d48:	23ff      	movs	r3, #255	; 0xff
 8008d4a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d52:	041b      	lsls	r3, r3, #16
 8008d54:	461a      	mov	r2, r3
 8008d56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008d62:	4313      	orrs	r3, r2
 8008d64:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008d68:	f107 031c 	add.w	r3, r7, #28
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fb f91a 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	62fc      	str	r4, [r7, #44]	; 0x2c
 8008d78:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008d80:	bf00      	nop
    textArea1.setLinespacing(2);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	33b8      	adds	r3, #184	; 0xb8
 8008d86:	637b      	str	r3, [r7, #52]	; 0x34
 8008d88:	2302      	movs	r3, #2
 8008d8a:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008d90:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008d92:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8008d9a:	f107 0314 	add.w	r3, r7, #20
 8008d9e:	2104      	movs	r1, #4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fd fec7 	bl	8006b34 <_ZN8touchgfx9TypedTextC1Et>
 8008da6:	f107 0314 	add.w	r3, r7, #20
 8008daa:	4619      	mov	r1, r3
 8008dac:	4620      	mov	r0, r4
 8008dae:	f00e f8b4 	bl	8016f1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008db2:	f107 0314 	add.w	r3, r7, #20
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fc fe6c 	bl	8005a94 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	332c      	adds	r3, #44	; 0x2c
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	f00c f8e9 	bl	8014f9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	33b8      	adds	r3, #184	; 0xb8
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f00c f8e2 	bl	8014f9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	373c      	adds	r7, #60	; 0x3c
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd90      	pop	{r4, r7, pc}
 8008de2:	bf00      	nop
 8008de4:	0802bad4 	.word	0x0802bad4

08008de8 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]

}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fc ff5a 	bl	8005cc8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008e14:	4a03      	ldr	r2, [pc, #12]	; (8008e24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	601a      	str	r2, [r3, #0]
{

}
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	0802b60c 	.word	0x0802b60c

08008e28 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
{

}
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <_ZN5Model4tickEv>:

void Model::tick()
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]

}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
    {
    }
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
    {
    }
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
    {
 8008e88:	4a04      	ldr	r2, [pc, #16]	; (8008e9c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
    }
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	0802bb98 	.word	0x0802bb98

08008ea0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
    }
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff ffe9 	bl	8008e80 <_ZN8touchgfx9PresenterD1Ev>
 8008eae:	2104      	movs	r1, #4
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f01c fed0 	bl	8025c56 <_ZdlPvj>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
    {
 8008ec8:	4a04      	ldr	r2, [pc, #16]	; (8008edc <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	601a      	str	r2, [r3, #0]
    }
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	0802bb98 	.word	0x0802bb98

08008ee0 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	4a06      	ldr	r2, [pc, #24]	; (8008f04 <_ZN13ModelListenerC1Ev+0x24>)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	605a      	str	r2, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	0802bb88 	.word	0x0802bb88

08008f08 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	4a04      	ldr	r2, [pc, #16]	; (8008f24 <_ZN13ModelListenerD1Ev+0x1c>)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	0802bb88 	.word	0x0802bb88

08008f28 <_ZN13ModelListenerD0Ev>:
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff ffe9 	bl	8008f08 <_ZN13ModelListenerD1Ev>
 8008f36:	2108      	movs	r1, #8
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f01c fe8c 	bl	8025c56 <_ZdlPvj>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	4a09      	ldr	r2, [pc, #36]	; (8008f78 <_ZN16Screen1PresenterD1Ev+0x30>)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	4a09      	ldr	r2, [pc, #36]	; (8008f7c <_ZN16Screen1PresenterD1Ev+0x34>)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	605a      	str	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff ffd1 	bl	8008f08 <_ZN13ModelListenerD1Ev>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff ff89 	bl	8008e80 <_ZN8touchgfx9PresenterD1Ev>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	0802bb60 	.word	0x0802bb60
 8008f7c:	0802bb78 	.word	0x0802bb78

08008f80 <_ZThn4_N16Screen1PresenterD1Ev>:
 8008f80:	f1a0 0004 	sub.w	r0, r0, #4
 8008f84:	e7e0      	b.n	8008f48 <_ZN16Screen1PresenterD1Ev>
 8008f86:	bf00      	nop

08008f88 <_ZN16Screen1PresenterD0Ev>:
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff ffd9 	bl	8008f48 <_ZN16Screen1PresenterD1Ev>
 8008f96:	2110      	movs	r1, #16
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f01c fe5c 	bl	8025c56 <_ZdlPvj>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <_ZThn4_N16Screen1PresenterD0Ev>:
 8008fa8:	f1a0 0004 	sub.w	r0, r0, #4
 8008fac:	e7ec      	b.n	8008f88 <_ZN16Screen1PresenterD0Ev>
	...

08008fb0 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
    : view(v)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7ff ff7f 	bl	8008ec0 <_ZN8touchgfx9PresenterC1Ev>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff ff8a 	bl	8008ee0 <_ZN13ModelListenerC1Ev>
 8008fcc:	4a06      	ldr	r2, [pc, #24]	; (8008fe8 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	4a06      	ldr	r2, [pc, #24]	; (8008fec <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	605a      	str	r2, [r3, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	60da      	str	r2, [r3, #12]
{

}
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	0802bb60 	.word	0x0802bb60
 8008fec:	0802bb78 	.word	0x0802bb78

08008ff0 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]

}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]

}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <_Z41__static_initialization_and_destruction_0ii>:
 8009018:	b580      	push	{r7, lr}
 800901a:	b092      	sub	sp, #72	; 0x48
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b01      	cmp	r3, #1
 8009026:	f040 8114 	bne.w	8009252 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009030:	4293      	cmp	r3, r2
 8009032:	f040 810e 	bne.w	8009252 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009036:	2300      	movs	r3, #0
 8009038:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800903c:	2300      	movs	r3, #0
 800903e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009042:	2300      	movs	r3, #0
 8009044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009048:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800904c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009050:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009054:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800905c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8009060:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009064:	041b      	lsls	r3, r3, #16
 8009066:	461a      	mov	r2, r3
 8009068:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	431a      	orrs	r2, r3
 8009070:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009074:	4313      	orrs	r3, r2
 8009076:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800907a:	f107 0320 	add.w	r3, r7, #32
 800907e:	4611      	mov	r1, r2
 8009080:	4618      	mov	r0, r3
 8009082:	f7fa ff91 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009086:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009088:	bf00      	nop
 800908a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800908c:	4b73      	ldr	r3, [pc, #460]	; (800925c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	23ff      	movs	r3, #255	; 0xff
 8009092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009096:	2300      	movs	r3, #0
 8009098:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800909c:	2300      	movs	r3, #0
 800909e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80090a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80090aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80090ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80090b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80090ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090be:	041b      	lsls	r3, r3, #16
 80090c0:	461a      	mov	r2, r3
 80090c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090c6:	021b      	lsls	r3, r3, #8
 80090c8:	431a      	orrs	r2, r3
 80090ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80090ce:	4313      	orrs	r3, r2
 80090d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80090d4:	f107 031c 	add.w	r3, r7, #28
 80090d8:	4611      	mov	r1, r2
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fa ff64 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80090e0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80090e2:	bf00      	nop
 80090e4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80090e6:	4b5e      	ldr	r3, [pc, #376]	; (8009260 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	2300      	movs	r3, #0
 80090ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80090f0:	23ff      	movs	r3, #255	; 0xff
 80090f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80090f6:	2300      	movs	r3, #0
 80090f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009100:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009104:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009108:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800910c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009110:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009114:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009118:	041b      	lsls	r3, r3, #16
 800911a:	461a      	mov	r2, r3
 800911c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009120:	021b      	lsls	r3, r3, #8
 8009122:	431a      	orrs	r2, r3
 8009124:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009128:	4313      	orrs	r3, r2
 800912a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800912e:	f107 0318 	add.w	r3, r7, #24
 8009132:	4611      	mov	r1, r2
 8009134:	4618      	mov	r0, r3
 8009136:	f7fa ff37 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800913a:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800913c:	bf00      	nop
 800913e:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009140:	4b48      	ldr	r3, [pc, #288]	; (8009264 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	2300      	movs	r3, #0
 8009146:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800914a:	2300      	movs	r3, #0
 800914c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009150:	23ff      	movs	r3, #255	; 0xff
 8009152:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009156:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800915a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800915e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009162:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009166:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800916a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800916e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009172:	041b      	lsls	r3, r3, #16
 8009174:	461a      	mov	r2, r3
 8009176:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800917a:	021b      	lsls	r3, r3, #8
 800917c:	431a      	orrs	r2, r3
 800917e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009182:	4313      	orrs	r3, r2
 8009184:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009188:	f107 0314 	add.w	r3, r7, #20
 800918c:	4611      	mov	r1, r2
 800918e:	4618      	mov	r0, r3
 8009190:	f7fa ff0a 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009194:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8009196:	bf00      	nop
 8009198:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800919a:	4b33      	ldr	r3, [pc, #204]	; (8009268 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	23f7      	movs	r3, #247	; 0xf7
 80091a0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80091a4:	234c      	movs	r3, #76	; 0x4c
 80091a6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80091aa:	2302      	movs	r3, #2
 80091ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80091b0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80091b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80091b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80091bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80091c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091c4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80091c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80091cc:	041b      	lsls	r3, r3, #16
 80091ce:	461a      	mov	r2, r3
 80091d0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	431a      	orrs	r2, r3
 80091d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80091dc:	4313      	orrs	r3, r2
 80091de:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80091e2:	f107 0310 	add.w	r3, r7, #16
 80091e6:	4611      	mov	r1, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fa fedd 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 80091ee:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80091f0:	bf00      	nop
 80091f2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80091f4:	4b1d      	ldr	r3, [pc, #116]	; (800926c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	23f7      	movs	r3, #247	; 0xf7
 80091fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80091fe:	23d2      	movs	r3, #210	; 0xd2
 8009200:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009204:	2302      	movs	r3, #2
 8009206:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800920a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800920e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8009212:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800921e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009222:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009226:	041b      	lsls	r3, r3, #16
 8009228:	461a      	mov	r2, r3
 800922a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	431a      	orrs	r2, r3
 8009232:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009236:	4313      	orrs	r3, r2
 8009238:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800923c:	f107 030c 	add.w	r3, r7, #12
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f7fa feb0 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009248:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800924a:	bf00      	nop
 800924c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800924e:	4b08      	ldr	r3, [pc, #32]	; (8009270 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	bf00      	nop
 8009254:	3748      	adds	r7, #72	; 0x48
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	2002393c 	.word	0x2002393c
 8009260:	20023940 	.word	0x20023940
 8009264:	20023944 	.word	0x20023944
 8009268:	20023948 	.word	0x20023948
 800926c:	2002394c 	.word	0x2002394c
 8009270:	20023950 	.word	0x20023950

08009274 <_GLOBAL__sub_I__ZN16Screen1PresenterC2ER11Screen1View>:
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
 8009278:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800927c:	2001      	movs	r0, #1
 800927e:	f7ff fecb 	bl	8009018 <_Z41__static_initialization_and_destruction_0ii>
 8009282:	bd80      	pop	{r7, pc}

08009284 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	4a05      	ldr	r2, [pc, #20]	; (80092a4 <_ZN11Screen1ViewD1Ev+0x20>)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4618      	mov	r0, r3
 8009296:	f7fd ff55 	bl	8007144 <_ZN15Screen1ViewBaseD1Ev>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	0802bbb0 	.word	0x0802bbb0

080092a8 <_ZN11Screen1ViewD0Ev>:
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7ff ffe7 	bl	8009284 <_ZN11Screen1ViewD1Ev>
 80092b6:	4904      	ldr	r1, [pc, #16]	; (80092c8 <_ZN11Screen1ViewD0Ev+0x20>)
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f01c fccc 	bl	8025c56 <_ZdlPvj>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	0002263c 	.word	0x0002263c

080092cc <_ZN11Screen1ViewC1Ev>:
#include <stdio.h>
#include <cstring>
#include <ecumaster.h>
#include <telemetry_data.h>

Screen1View::Screen1View()
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fd ffb8 	bl	800724c <_ZN15Screen1ViewBaseC1Ev>
 80092dc:	4a35      	ldr	r2, [pc, #212]	; (80093b4 <_ZN11Screen1ViewC1Ev+0xe8>)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	4b34      	ldr	r3, [pc, #208]	; (80093b8 <_ZN11Screen1ViewC1Ev+0xec>)
 80092e6:	4413      	add	r3, r2
 80092e8:	2200      	movs	r2, #0
 80092ea:	601a      	str	r2, [r3, #0]
{
	rpmArea.setWildcard(rpmAreaBuffer);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	4b31      	ldr	r3, [pc, #196]	; (80093bc <_ZN11Screen1ViewC1Ev+0xf0>)
 80092f6:	4413      	add	r3, r2
 80092f8:	4619      	mov	r1, r3
 80092fa:	f7fd fca9 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	gearArea.setWildcard(gearAreaBuffer);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	4b2e      	ldr	r3, [pc, #184]	; (80093c0 <_ZN11Screen1ViewC1Ev+0xf4>)
 8009308:	4413      	add	r3, r2
 800930a:	4619      	mov	r1, r3
 800930c:	f7fd fca0 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	cltArea.setWildcard(cltAreaBuffer);
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	4b2c      	ldr	r3, [pc, #176]	; (80093c4 <_ZN11Screen1ViewC1Ev+0xf8>)
 8009314:	4413      	add	r3, r2
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	4a2b      	ldr	r2, [pc, #172]	; (80093c8 <_ZN11Screen1ViewC1Ev+0xfc>)
 800931a:	440a      	add	r2, r1
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f7fd fc96 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	battArea.setWildcard(battAreaBuffer);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	4b27      	ldr	r3, [pc, #156]	; (80093cc <_ZN11Screen1ViewC1Ev+0x100>)
 800932e:	4413      	add	r3, r2
 8009330:	4619      	mov	r1, r3
 8009332:	f7fd fc8d 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	oilPressArea.setWildcard(oilPressAreaBuffer);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	4b24      	ldr	r3, [pc, #144]	; (80093d0 <_ZN11Screen1ViewC1Ev+0x104>)
 8009340:	4413      	add	r3, r2
 8009342:	4619      	mov	r1, r3
 8009344:	f7fd fc84 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

	setRPM(EcuData.rpm);
 8009348:	4b22      	ldr	r3, [pc, #136]	; (80093d4 <_ZN11Screen1ViewC1Ev+0x108>)
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa24 	bl	800979c <_ZN11Screen1View6setRPMEi>
	setGear(telemetryData.gear);
 8009354:	4b20      	ldr	r3, [pc, #128]	; (80093d8 <_ZN11Screen1ViewC1Ev+0x10c>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fade 	bl	800991c <_ZN11Screen1View7setGearEi>
	setClt(EcuData.clt);
 8009360:	4b1c      	ldr	r3, [pc, #112]	; (80093d4 <_ZN11Screen1ViewC1Ev+0x108>)
 8009362:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 faa7 	bl	80098bc <_ZN11Screen1View6setCltEs>
	setBatt(EcuData.batt);
 800936e:	4b19      	ldr	r3, [pc, #100]	; (80093d4 <_ZN11Screen1ViewC1Ev+0x108>)
 8009370:	edd3 7a07 	vldr	s15, [r3, #28]
 8009374:	eeb0 0a67 	vmov.f32	s0, s15
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fa3b 	bl	80097f4 <_ZN11Screen1View7setBattEf>
	setOilPress(EcuData.oilPress);
 800937e:	4b15      	ldr	r3, [pc, #84]	; (80093d4 <_ZN11Screen1ViewC1Ev+0x108>)
 8009380:	edd3 7a03 	vldr	s15, [r3, #12]
 8009384:	eeb0 0a67 	vmov.f32	s0, s15
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa65 	bl	8009858 <_ZN11Screen1View11setOilPressEf>
	alertBar1.setState(EBarState::Blank);
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	4b12      	ldr	r3, [pc, #72]	; (80093dc <_ZN11Screen1ViewC1Ev+0x110>)
 8009392:	4413      	add	r3, r2
 8009394:	2100      	movs	r1, #0
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fc78 	bl	8009c8c <_ZN8alertBar8setStateE9EBarState>
	alertBar2.setState(EBarState::Blank);
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <_ZN11Screen1ViewC1Ev+0x114>)
 80093a0:	4413      	add	r3, r2
 80093a2:	2100      	movs	r1, #0
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 fc71 	bl	8009c8c <_ZN8alertBar8setStateE9EBarState>
}
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	0802bbb0 	.word	0x0802bbb0
 80093b8:	00022638 	.word	0x00022638
 80093bc:	0001f708 	.word	0x0001f708
 80093c0:	0001f704 	.word	0x0001f704
 80093c4:	0001f6c4 	.word	0x0001f6c4
 80093c8:	0001f744 	.word	0x0001f744
 80093cc:	0001f71c 	.word	0x0001f71c
 80093d0:	0001f730 	.word	0x0001f730
 80093d4:	2002396c 	.word	0x2002396c
 80093d8:	20023998 	.word	0x20023998
 80093dc:	0001f514 	.word	0x0001f514
 80093e0:	0001f5ec 	.word	0x0001f5ec

080093e4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fc12 	bl	8007c18 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4618      	mov	r0, r3
 8009408:	f7fd fadc 	bl	80069c4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	//// Screen1View::tempBox1_1.redraw();
	//tempBox1_1.invalidate();
	static int a = 0;

	static uint16_t lastRPM = 0;
	if (EcuData.rpm != lastRPM)
 800941c:	4b6a      	ldr	r3, [pc, #424]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 800941e:	881a      	ldrh	r2, [r3, #0]
 8009420:	4b6a      	ldr	r3, [pc, #424]	; (80095cc <_ZN11Screen1View15handleTickEventEv+0x1b8>)
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d00e      	beq.n	8009446 <_ZN11Screen1View15handleTickEventEv+0x32>
	{
		setRPM(EcuData.rpm);
 8009428:	4b67      	ldr	r3, [pc, #412]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f9b4 	bl	800979c <_ZN11Screen1View6setRPMEi>
		lastRPM = EcuData.rpm;
 8009434:	4b64      	ldr	r3, [pc, #400]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009436:	881a      	ldrh	r2, [r3, #0]
 8009438:	4b64      	ldr	r3, [pc, #400]	; (80095cc <_ZN11Screen1View15handleTickEventEv+0x1b8>)
 800943a:	801a      	strh	r2, [r3, #0]
		// if(EcuData.rpm <12000)
		gearArea.invalidate();
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3398      	adds	r3, #152	; 0x98
 8009440:	4618      	mov	r0, r3
 8009442:	f010 fbaf 	bl	8019ba4 <_ZNK8touchgfx8Drawable10invalidateEv>
		//setGear(2);
	}
	static uint8_t lastGear = 0;
	if (telemetryData.gear != lastGear)
 8009446:	4b62      	ldr	r3, [pc, #392]	; (80095d0 <_ZN11Screen1View15handleTickEventEv+0x1bc>)
 8009448:	781a      	ldrb	r2, [r3, #0]
 800944a:	4b62      	ldr	r3, [pc, #392]	; (80095d4 <_ZN11Screen1View15handleTickEventEv+0x1c0>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d009      	beq.n	8009466 <_ZN11Screen1View15handleTickEventEv+0x52>
	{
		setGear(telemetryData.gear);
 8009452:	4b5f      	ldr	r3, [pc, #380]	; (80095d0 <_ZN11Screen1View15handleTickEventEv+0x1bc>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fa5f 	bl	800991c <_ZN11Screen1View7setGearEi>
		lastGear = telemetryData.gear;
 800945e:	4b5c      	ldr	r3, [pc, #368]	; (80095d0 <_ZN11Screen1View15handleTickEventEv+0x1bc>)
 8009460:	781a      	ldrb	r2, [r3, #0]
 8009462:	4b5c      	ldr	r3, [pc, #368]	; (80095d4 <_ZN11Screen1View15handleTickEventEv+0x1c0>)
 8009464:	701a      	strb	r2, [r3, #0]
	}
	static float lastBatt = 0.0f;
	if (lastBatt != EcuData.batt)
 8009466:	4b58      	ldr	r3, [pc, #352]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009468:	ed93 7a07 	vldr	s14, [r3, #28]
 800946c:	4b5a      	ldr	r3, [pc, #360]	; (80095d8 <_ZN11Screen1View15handleTickEventEv+0x1c4>)
 800946e:	edd3 7a00 	vldr	s15, [r3]
 8009472:	eeb4 7a67 	vcmp.f32	s14, s15
 8009476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800947a:	d00b      	beq.n	8009494 <_ZN11Screen1View15handleTickEventEv+0x80>
	{
		setBatt(EcuData.batt);
 800947c:	4b52      	ldr	r3, [pc, #328]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 800947e:	edd3 7a07 	vldr	s15, [r3, #28]
 8009482:	eeb0 0a67 	vmov.f32	s0, s15
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9b4 	bl	80097f4 <_ZN11Screen1View7setBattEf>
		lastBatt = EcuData.batt;
 800948c:	4b4e      	ldr	r3, [pc, #312]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	4a51      	ldr	r2, [pc, #324]	; (80095d8 <_ZN11Screen1View15handleTickEventEv+0x1c4>)
 8009492:	6013      	str	r3, [r2, #0]
	}
	static int16_t lastClt = 0;
	if (lastClt != EcuData.clt)
 8009494:	4b4c      	ldr	r3, [pc, #304]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009496:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800949a:	4b50      	ldr	r3, [pc, #320]	; (80095dc <_ZN11Screen1View15handleTickEventEv+0x1c8>)
 800949c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d00b      	beq.n	80094bc <_ZN11Screen1View15handleTickEventEv+0xa8>
	{
		setClt(EcuData.clt);
 80094a4:	4b48      	ldr	r3, [pc, #288]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80094a6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fa05 	bl	80098bc <_ZN11Screen1View6setCltEs>
		lastClt = EcuData.clt;
 80094b2:	4b45      	ldr	r3, [pc, #276]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80094b4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80094b8:	4b48      	ldr	r3, [pc, #288]	; (80095dc <_ZN11Screen1View15handleTickEventEv+0x1c8>)
 80094ba:	801a      	strh	r2, [r3, #0]
	}
	static float lastOilPressure = 0;
	if (lastOilPressure != EcuData.oilPress)
 80094bc:	4b42      	ldr	r3, [pc, #264]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80094be:	ed93 7a03 	vldr	s14, [r3, #12]
 80094c2:	4b47      	ldr	r3, [pc, #284]	; (80095e0 <_ZN11Screen1View15handleTickEventEv+0x1cc>)
 80094c4:	edd3 7a00 	vldr	s15, [r3]
 80094c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80094cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d0:	d00b      	beq.n	80094ea <_ZN11Screen1View15handleTickEventEv+0xd6>
	{
		setOilPress(EcuData.oilPress);
 80094d2:	4b3d      	ldr	r3, [pc, #244]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80094d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80094d8:	eeb0 0a67 	vmov.f32	s0, s15
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f9bb 	bl	8009858 <_ZN11Screen1View11setOilPressEf>
		lastOilPressure = EcuData.oilPress;
 80094e2:	4b39      	ldr	r3, [pc, #228]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	4a3e      	ldr	r2, [pc, #248]	; (80095e0 <_ZN11Screen1View15handleTickEventEv+0x1cc>)
 80094e8:	6013      	str	r3, [r2, #0]
	}

	if (EcuData.oilPress < 1.5f && EcuData.rpm > 1000)
 80094ea:	4b37      	ldr	r3, [pc, #220]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 80094ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80094f0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80094f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fc:	d53a      	bpl.n	8009574 <_ZN11Screen1View15handleTickEventEv+0x160>
 80094fe:	4b32      	ldr	r3, [pc, #200]	; (80095c8 <_ZN11Screen1View15handleTickEventEv+0x1b4>)
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009506:	d935      	bls.n	8009574 <_ZN11Screen1View15handleTickEventEv+0x160>
	{
		static int lastChange = 0;
		if (tickCounter - lastChange > 15)
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	4b36      	ldr	r3, [pc, #216]	; (80095e4 <_ZN11Screen1View15handleTickEventEv+0x1d0>)
 800950c:	4413      	add	r3, r2
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	4b35      	ldr	r3, [pc, #212]	; (80095e8 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	2b0f      	cmp	r3, #15
 8009518:	dd47      	ble.n	80095aa <_ZN11Screen1View15handleTickEventEv+0x196>
		{
			alertBar1.setText("LOW OIL PRESS\n");
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4b33      	ldr	r3, [pc, #204]	; (80095ec <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 800951e:	4413      	add	r3, r2
 8009520:	4933      	ldr	r1, [pc, #204]	; (80095f0 <_ZN11Screen1View15handleTickEventEv+0x1dc>)
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fc1a 	bl	8009d5c <_ZN8alertBar7setTextEPKc>
			if (a == 0)
 8009528:	4b32      	ldr	r3, [pc, #200]	; (80095f4 <_ZN11Screen1View15handleTickEventEv+0x1e0>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d107      	bne.n	8009540 <_ZN11Screen1View15handleTickEventEv+0x12c>
			{
				alertBar1.setState(EBarState::Critical1);
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	4b2e      	ldr	r3, [pc, #184]	; (80095ec <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 8009534:	4413      	add	r3, r2
 8009536:	2104      	movs	r1, #4
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fba7 	bl	8009c8c <_ZN8alertBar8setStateE9EBarState>
 800953e:	e006      	b.n	800954e <_ZN11Screen1View15handleTickEventEv+0x13a>
			}
			else
			{
				alertBar1.setState(EBarState::Critical2);
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	4b2a      	ldr	r3, [pc, #168]	; (80095ec <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 8009544:	4413      	add	r3, r2
 8009546:	2105      	movs	r1, #5
 8009548:	4618      	mov	r0, r3
 800954a:	f000 fb9f 	bl	8009c8c <_ZN8alertBar8setStateE9EBarState>
			}
			alertBar1.invalidate();
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	4b26      	ldr	r3, [pc, #152]	; (80095ec <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 8009552:	4413      	add	r3, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f010 fb25 	bl	8019ba4 <_ZNK8touchgfx8Drawable10invalidateEv>
			a = 1 - a;
 800955a:	4b26      	ldr	r3, [pc, #152]	; (80095f4 <_ZN11Screen1View15handleTickEventEv+0x1e0>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f1c3 0301 	rsb	r3, r3, #1
 8009562:	4a24      	ldr	r2, [pc, #144]	; (80095f4 <_ZN11Screen1View15handleTickEventEv+0x1e0>)
 8009564:	6013      	str	r3, [r2, #0]
			lastChange = tickCounter;
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	4b1e      	ldr	r3, [pc, #120]	; (80095e4 <_ZN11Screen1View15handleTickEventEv+0x1d0>)
 800956a:	4413      	add	r3, r2
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a1e      	ldr	r2, [pc, #120]	; (80095e8 <_ZN11Screen1View15handleTickEventEv+0x1d4>)
 8009570:	6013      	str	r3, [r2, #0]
		}
 8009572:	e01a      	b.n	80095aa <_ZN11Screen1View15handleTickEventEv+0x196>
	}
	else if (telemetryData.gear == 7)
 8009574:	4b16      	ldr	r3, [pc, #88]	; (80095d0 <_ZN11Screen1View15handleTickEventEv+0x1bc>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b07      	cmp	r3, #7
 800957a:	d10e      	bne.n	800959a <_ZN11Screen1View15handleTickEventEv+0x186>
	{
		alertBar1.setState(EBarState::Warning);
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 8009580:	4413      	add	r3, r2
 8009582:	2102      	movs	r1, #2
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fb81 	bl	8009c8c <_ZN8alertBar8setStateE9EBarState>
		alertBar1.setText("GEAR UNKNOWN");
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	4b17      	ldr	r3, [pc, #92]	; (80095ec <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 800958e:	4413      	add	r3, r2
 8009590:	4919      	ldr	r1, [pc, #100]	; (80095f8 <_ZN11Screen1View15handleTickEventEv+0x1e4>)
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fbe2 	bl	8009d5c <_ZN8alertBar7setTextEPKc>
 8009598:	e008      	b.n	80095ac <_ZN11Screen1View15handleTickEventEv+0x198>
	}
	else
	{
		alertBar1.setState(EBarState::Blank);
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	4b13      	ldr	r3, [pc, #76]	; (80095ec <_ZN11Screen1View15handleTickEventEv+0x1d8>)
 800959e:	4413      	add	r3, r2
 80095a0:	2100      	movs	r1, #0
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fb72 	bl	8009c8c <_ZN8alertBar8setStateE9EBarState>
 80095a8:	e000      	b.n	80095ac <_ZN11Screen1View15handleTickEventEv+0x198>
		}
 80095aa:	bf00      	nop

	//setClt(EcuData.clt);
	//setBatt(EcuData.batt);
	//alertBar1.invalidate();
	//alertBar1.setText("12345678912345\n");
	tickCounter++;
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <_ZN11Screen1View15handleTickEventEv+0x1d0>)
 80095b0:	4413      	add	r3, r2
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <_ZN11Screen1View15handleTickEventEv+0x1d0>)
 80095ba:	440b      	add	r3, r1
 80095bc:	601a      	str	r2, [r3, #0]
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	2002396c 	.word	0x2002396c
 80095cc:	200239a0 	.word	0x200239a0
 80095d0:	20023998 	.word	0x20023998
 80095d4:	200239a2 	.word	0x200239a2
 80095d8:	200239a4 	.word	0x200239a4
 80095dc:	200239a8 	.word	0x200239a8
 80095e0:	200239ac 	.word	0x200239ac
 80095e4:	00022638 	.word	0x00022638
 80095e8:	200239b0 	.word	0x200239b0
 80095ec:	0001f514 	.word	0x0001f514
 80095f0:	0802b280 	.word	0x0802b280
 80095f4:	2002399c 	.word	0x2002399c
 80095f8:	0802b290 	.word	0x0802b290

080095fc <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>:

void Screen1View::setText(touchgfx::TextAreaWithOneWildcard textArea,
		touchgfx::Unicode::UnicodeChar *buffer, const char inText[])
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]
	Unicode::snprintf(buffer, strlen(inText) + 1, inText);
 800960a:	6838      	ldr	r0, [r7, #0]
 800960c:	f7f6 fe18 	bl	8000240 <strlen>
 8009610:	4603      	mov	r3, r0
 8009612:	b29b      	uxth	r3, r3
 8009614:	3301      	adds	r3, #1
 8009616:	b29b      	uxth	r3, r3
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f012 fb43 	bl	801bca8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	//textArea.resizeToCurrentText();
	textArea.invalidate();
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	4618      	mov	r0, r3
 8009626:	f010 fabd 	bl	8019ba4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <_ZN8touchgfx8DrawableC1ERKS0_>:
class Drawable
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
 800963e:	4a1e      	ldr	r2, [pc, #120]	; (80096b8 <_ZN8touchgfx8DrawableC1ERKS0_+0x84>)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	3304      	adds	r3, #4
 800964a:	3204      	adds	r2, #4
 800964c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009650:	e883 0003 	stmia.w	r3, {r0, r1}
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	320c      	adds	r2, #12
 800965c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009660:	e883 0003 	stmia.w	r3, {r0, r1}
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	695a      	ldr	r2, [r3, #20]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	615a      	str	r2, [r3, #20]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	619a      	str	r2, [r3, #24]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	69da      	ldr	r2, [r3, #28]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	61da      	str	r2, [r3, #28]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	841a      	strh	r2, [r3, #32]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	845a      	strh	r2, [r3, #34]	; 0x22
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	0802d2bc 	.word	0x0802d2bc

080096bc <_ZN8touchgfx6WidgetC1ERKS0_>:
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	4611      	mov	r1, r2
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff ffb1 	bl	8009634 <_ZN8touchgfx8DrawableC1ERKS0_>
 80096d2:	4a04      	ldr	r2, [pc, #16]	; (80096e4 <_ZN8touchgfx6WidgetC1ERKS0_+0x28>)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	0802b974 	.word	0x0802b974

080096e8 <_ZN8touchgfx8TextAreaC1ERKS0_>:
class TextArea : public Widget
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7ff ffdf 	bl	80096bc <_ZN8touchgfx6WidgetC1ERKS0_>
 80096fe:	4a19      	ldr	r2, [pc, #100]	; (8009764 <_ZN8touchgfx8TextAreaC1ERKS0_+0x7c>)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	3328      	adds	r3, #40	; 0x28
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f7fc f9df 	bl	8005ad4 <_ZN8touchgfx9TypedTextC1ERKS0_>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800971c:	631a      	str	r2, [r3, #48]	; 0x30
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	869a      	strh	r2, [r3, #52]	; 0x34
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	0802cdc8 	.word	0x0802cdc8

08009768 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>:
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	4611      	mov	r1, r2
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff ffb5 	bl	80096e8 <_ZN8touchgfx8TextAreaC1ERKS0_>
 800977e:	4a06      	ldr	r2, [pc, #24]	; (8009798 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_+0x30>)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	63da      	str	r2, [r3, #60]	; 0x3c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	0802ced4 	.word	0x0802ced4

0800979c <_ZN11Screen1View6setRPMEi>:

void Screen1View::setRPM(int inRPM)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b096      	sub	sp, #88	; 0x58
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	sprintf(textBuffer, "%d", inRPM);
 80097a6:	f107 030c 	add.w	r3, r7, #12
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	490f      	ldr	r1, [pc, #60]	; (80097ec <_ZN11Screen1View6setRPMEi+0x50>)
 80097ae:	4618      	mov	r0, r3
 80097b0:	f01d fcbe 	bl	8027130 <siprintf>
	setText(rpmArea, rpmAreaBuffer, textBuffer);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 80097ba:	f107 0318 	add.w	r3, r7, #24
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7ff ffd1 	bl	8009768 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a09      	ldr	r2, [pc, #36]	; (80097f0 <_ZN11Screen1View6setRPMEi+0x54>)
 80097ca:	441a      	add	r2, r3
 80097cc:	f107 030c 	add.w	r3, r7, #12
 80097d0:	f107 0118 	add.w	r1, r7, #24
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff ff11 	bl	80095fc <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 80097da:	f107 0318 	add.w	r3, r7, #24
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fc7e 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 80097e4:	bf00      	nop
 80097e6:	3758      	adds	r7, #88	; 0x58
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	0802b2a0 	.word	0x0802b2a0
 80097f0:	0001f708 	.word	0x0001f708

080097f4 <_ZN11Screen1View7setBattEf>:

void Screen1View::setBatt(float inBatt)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b096      	sub	sp, #88	; 0x58
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	sprintf(textBuffer, "%.2f", inBatt);
 8009800:	edd7 7a00 	vldr	s15, [r7]
 8009804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009808:	f107 000c 	add.w	r0, r7, #12
 800980c:	ec53 2b17 	vmov	r2, r3, d7
 8009810:	490f      	ldr	r1, [pc, #60]	; (8009850 <_ZN11Screen1View7setBattEf+0x5c>)
 8009812:	f01d fc8d 	bl	8027130 <siprintf>
	setText(battArea, battAreaBuffer, textBuffer);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 800981c:	f107 0318 	add.w	r3, r7, #24
 8009820:	4611      	mov	r1, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff ffa0 	bl	8009768 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a0a      	ldr	r2, [pc, #40]	; (8009854 <_ZN11Screen1View7setBattEf+0x60>)
 800982c:	441a      	add	r2, r3
 800982e:	f107 030c 	add.w	r3, r7, #12
 8009832:	f107 0118 	add.w	r1, r7, #24
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff fee0 	bl	80095fc <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800983c:	f107 0318 	add.w	r3, r7, #24
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe fc4d 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009846:	bf00      	nop
 8009848:	3758      	adds	r7, #88	; 0x58
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	0802b2a4 	.word	0x0802b2a4
 8009854:	0001f71c 	.word	0x0001f71c

08009858 <_ZN11Screen1View11setOilPressEf>:

void Screen1View::setOilPress(float inOilPress)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b096      	sub	sp, #88	; 0x58
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	sprintf(textBuffer, "%.2f", inOilPress);
 8009864:	edd7 7a00 	vldr	s15, [r7]
 8009868:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800986c:	f107 000c 	add.w	r0, r7, #12
 8009870:	ec53 2b17 	vmov	r2, r3, d7
 8009874:	490f      	ldr	r1, [pc, #60]	; (80098b4 <_ZN11Screen1View11setOilPressEf+0x5c>)
 8009876:	f01d fc5b 	bl	8027130 <siprintf>
	setText(battArea, battAreaBuffer, textBuffer);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 8009880:	f107 0318 	add.w	r3, r7, #24
 8009884:	4611      	mov	r1, r2
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff ff6e 	bl	8009768 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a0a      	ldr	r2, [pc, #40]	; (80098b8 <_ZN11Screen1View11setOilPressEf+0x60>)
 8009890:	441a      	add	r2, r3
 8009892:	f107 030c 	add.w	r3, r7, #12
 8009896:	f107 0118 	add.w	r1, r7, #24
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff feae 	bl	80095fc <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 80098a0:	f107 0318 	add.w	r3, r7, #24
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fc1b 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 80098aa:	bf00      	nop
 80098ac:	3758      	adds	r7, #88	; 0x58
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	0802b2a4 	.word	0x0802b2a4
 80098b8:	0001f71c 	.word	0x0001f71c

080098bc <_ZN11Screen1View6setCltEs>:

void Screen1View::setClt(int16_t inClt)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b096      	sub	sp, #88	; 0x58
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	807b      	strh	r3, [r7, #2]
	char textBuffer[10];
	sprintf(textBuffer, "%i", inClt);
 80098c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80098cc:	f107 030c 	add.w	r3, r7, #12
 80098d0:	490f      	ldr	r1, [pc, #60]	; (8009910 <_ZN11Screen1View6setCltEs+0x54>)
 80098d2:	4618      	mov	r0, r3
 80098d4:	f01d fc2c 	bl	8027130 <siprintf>
	setText(cltArea, cltAreaBuffer, textBuffer);
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <_ZN11Screen1View6setCltEs+0x58>)
 80098dc:	4413      	add	r3, r2
 80098de:	f107 0218 	add.w	r2, r7, #24
 80098e2:	4619      	mov	r1, r3
 80098e4:	4610      	mov	r0, r2
 80098e6:	f7ff ff3f 	bl	8009768 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <_ZN11Screen1View6setCltEs+0x5c>)
 80098ee:	441a      	add	r2, r3
 80098f0:	f107 030c 	add.w	r3, r7, #12
 80098f4:	f107 0118 	add.w	r1, r7, #24
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff fe7f 	bl	80095fc <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 80098fe:	f107 0318 	add.w	r3, r7, #24
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe fbec 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009908:	bf00      	nop
 800990a:	3758      	adds	r7, #88	; 0x58
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	0802b2ac 	.word	0x0802b2ac
 8009914:	0001f6c4 	.word	0x0001f6c4
 8009918:	0001f744 	.word	0x0001f744

0800991c <_ZN11Screen1View7setGearEi>:

void Screen1View::setGear(int inGear)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b096      	sub	sp, #88	; 0x58
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	if (inGear == 0)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d107      	bne.n	800993c <_ZN11Screen1View7setGearEi+0x20>
	{
		sprintf(textBuffer, "%s", "N");
 800992c:	f107 030c 	add.w	r3, r7, #12
 8009930:	4a15      	ldr	r2, [pc, #84]	; (8009988 <_ZN11Screen1View7setGearEi+0x6c>)
 8009932:	4916      	ldr	r1, [pc, #88]	; (800998c <_ZN11Screen1View7setGearEi+0x70>)
 8009934:	4618      	mov	r0, r3
 8009936:	f01d fbfb 	bl	8027130 <siprintf>
 800993a:	e009      	b.n	8009950 <_ZN11Screen1View7setGearEi+0x34>
	}
	else if (inGear < 7)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b06      	cmp	r3, #6
 8009940:	dc06      	bgt.n	8009950 <_ZN11Screen1View7setGearEi+0x34>
	{
		sprintf(textBuffer, "%d", inGear);
 8009942:	f107 030c 	add.w	r3, r7, #12
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	4911      	ldr	r1, [pc, #68]	; (8009990 <_ZN11Screen1View7setGearEi+0x74>)
 800994a:	4618      	mov	r0, r3
 800994c:	f01d fbf0 	bl	8027130 <siprintf>
	}
	setText(gearArea, gearAreaBuffer, textBuffer);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8009956:	f107 0318 	add.w	r3, r7, #24
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff ff03 	bl	8009768 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a0b      	ldr	r2, [pc, #44]	; (8009994 <_ZN11Screen1View7setGearEi+0x78>)
 8009966:	441a      	add	r2, r3
 8009968:	f107 030c 	add.w	r3, r7, #12
 800996c:	f107 0118 	add.w	r1, r7, #24
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff fe43 	bl	80095fc <_ZN11Screen1View7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 8009976:	f107 0318 	add.w	r3, r7, #24
 800997a:	4618      	mov	r0, r3
 800997c:	f7fe fbb0 	bl	80080e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 8009980:	bf00      	nop
 8009982:	3758      	adds	r7, #88	; 0x58
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	0802b2b0 	.word	0x0802b2b0
 800998c:	0802b2b4 	.word	0x0802b2b4
 8009990:	0802b2a0 	.word	0x0802b2a0
 8009994:	0001f704 	.word	0x0001f704

08009998 <_Z41__static_initialization_and_destruction_0ii>:
 8009998:	b580      	push	{r7, lr}
 800999a:	b092      	sub	sp, #72	; 0x48
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	f040 8114 	bne.w	8009bd2 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099b0:	4293      	cmp	r3, r2
 80099b2:	f040 810e 	bne.w	8009bd2 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80099b6:	2300      	movs	r3, #0
 80099b8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80099bc:	2300      	movs	r3, #0
 80099be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80099c2:	2300      	movs	r3, #0
 80099c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80099cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80099d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80099d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80099e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099e4:	041b      	lsls	r3, r3, #16
 80099e6:	461a      	mov	r2, r3
 80099e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80099ec:	021b      	lsls	r3, r3, #8
 80099ee:	431a      	orrs	r2, r3
 80099f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099f4:	4313      	orrs	r3, r2
 80099f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80099fa:	f107 0320 	add.w	r3, r7, #32
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fa fad1 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009a06:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009a08:	bf00      	nop
 8009a0a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009a0c:	4b73      	ldr	r3, [pc, #460]	; (8009bdc <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	23ff      	movs	r3, #255	; 0xff
 8009a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a16:	2300      	movs	r3, #0
 8009a18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009a2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009a36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009a3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a3e:	041b      	lsls	r3, r3, #16
 8009a40:	461a      	mov	r2, r3
 8009a42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a46:	021b      	lsls	r3, r3, #8
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009a54:	f107 031c 	add.w	r3, r7, #28
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fa faa4 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009a60:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8009a62:	bf00      	nop
 8009a64:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8009a66:	4b5e      	ldr	r3, [pc, #376]	; (8009be0 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009a70:	23ff      	movs	r3, #255	; 0xff
 8009a72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009a76:	2300      	movs	r3, #0
 8009a78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009a80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009a88:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009a94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a98:	041b      	lsls	r3, r3, #16
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009aae:	f107 0318 	add.w	r3, r7, #24
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fa fa77 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009aba:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009abc:	bf00      	nop
 8009abe:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009ac0:	4b48      	ldr	r3, [pc, #288]	; (8009be4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aca:	2300      	movs	r3, #0
 8009acc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009ad0:	23ff      	movs	r3, #255	; 0xff
 8009ad2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009ad6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009ada:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009ade:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009ae2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009ae6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009aea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009aee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	461a      	mov	r2, r3
 8009af6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009afa:	021b      	lsls	r3, r3, #8
 8009afc:	431a      	orrs	r2, r3
 8009afe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009b02:	4313      	orrs	r3, r2
 8009b04:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009b08:	f107 0314 	add.w	r3, r7, #20
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fa fa4a 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009b14:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8009b16:	bf00      	nop
 8009b18:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8009b1a:	4b33      	ldr	r3, [pc, #204]	; (8009be8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	23f7      	movs	r3, #247	; 0xf7
 8009b20:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8009b24:	234c      	movs	r3, #76	; 0x4c
 8009b26:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009b30:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009b34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009b38:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009b3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009b40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b44:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009b48:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009b4c:	041b      	lsls	r3, r3, #16
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009b54:	021b      	lsls	r3, r3, #8
 8009b56:	431a      	orrs	r2, r3
 8009b58:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009b62:	f107 0310 	add.w	r3, r7, #16
 8009b66:	4611      	mov	r1, r2
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fa fa1d 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009b6e:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009b70:	bf00      	nop
 8009b72:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009b74:	4b1d      	ldr	r3, [pc, #116]	; (8009bec <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	23f7      	movs	r3, #247	; 0xf7
 8009b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b7e:	23d2      	movs	r3, #210	; 0xd2
 8009b80:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009b84:	2302      	movs	r3, #2
 8009b86:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009b8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b8e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8009b92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009b9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009ba2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009bae:	021b      	lsls	r3, r3, #8
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009bbc:	f107 030c 	add.w	r3, r7, #12
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fa f9f0 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009bca:	bf00      	nop
 8009bcc:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8009bce:	4b08      	ldr	r3, [pc, #32]	; (8009bf0 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	bf00      	nop
 8009bd4:	3748      	adds	r7, #72	; 0x48
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20023954 	.word	0x20023954
 8009be0:	20023958 	.word	0x20023958
 8009be4:	2002395c 	.word	0x2002395c
 8009be8:	20023960 	.word	0x20023960
 8009bec:	20023964 	.word	0x20023964
 8009bf0:	20023968 	.word	0x20023968

08009bf4 <_GLOBAL__sub_I_EcuData>:
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	f7ff fecb 	bl	8009998 <_Z41__static_initialization_and_destruction_0ii>
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>
#include <string.h>

alertBar::alertBar()
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe ff22 	bl	8008a58 <_ZN12alertBarBaseC1Ev>
 8009c14:	4a0d      	ldr	r2, [pc, #52]	; (8009c4c <_ZN8alertBarC1Ev+0x48>)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a0c      	ldr	r2, [pc, #48]	; (8009c50 <_ZN8alertBarC1Ev+0x4c>)
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a0b      	ldr	r2, [pc, #44]	; (8009c54 <_ZN8alertBarC1Ev+0x50>)
 8009c28:	6812      	ldr	r2, [r2, #0]
 8009c2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a09      	ldr	r2, [pc, #36]	; (8009c58 <_ZN8alertBarC1Ev+0x54>)
 8009c32:	6812      	ldr	r2, [r2, #0]
 8009c34:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a08      	ldr	r2, [pc, #32]	; (8009c5c <_ZN8alertBarC1Ev+0x58>)
 8009c3c:	6812      	ldr	r2, [r2, #0]
 8009c3e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
{
}
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	0802bbe4 	.word	0x0802bbe4
 8009c50:	200239c0 	.word	0x200239c0
 8009c54:	200239c4 	.word	0x200239c4
 8009c58:	200239b8 	.word	0x200239b8
 8009c5c:	200239c8 	.word	0x200239c8

08009c60 <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe ffd2 	bl	8008c14 <_ZN12alertBarBase10initializeEv>
    frontText.setWildcard(frontTextBuffer);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	33b0      	adds	r3, #176	; 0xb0
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	f7fc ffe7 	bl	8006c50 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
}
 8009c82:	bf00      	nop
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <_ZN8alertBar8setStateE9EBarState>:

void alertBar::setState(EBarState inState)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b06      	cmp	r3, #6
 8009c9a:	d84d      	bhi.n	8009d38 <_ZN8alertBar8setStateE9EBarState+0xac>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <_ZN8alertBar8setStateE9EBarState+0x18>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009cc1 	.word	0x08009cc1
 8009ca8:	08009cd9 	.word	0x08009cd9
 8009cac:	08009ce9 	.word	0x08009ce9
 8009cb0:	08009cf9 	.word	0x08009cf9
 8009cb4:	08009d09 	.word	0x08009d09
 8009cb8:	08009d19 	.word	0x08009d19
 8009cbc:	08009d29 	.word	0x08009d29
    switch (inState)
    {
    case EBarState::Blank:
    	bgBox.setColor(colors::blue);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	332c      	adds	r3, #44	; 0x2c
 8009cc4:	4a1f      	ldr	r2, [pc, #124]	; (8009d44 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 8009cc6:	6811      	ldr	r1, [r2, #0]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fc ff25 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	setText("");
 8009cce:	491e      	ldr	r1, [pc, #120]	; (8009d48 <_ZN8alertBar8setStateE9EBarState+0xbc>)
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f843 	bl	8009d5c <_ZN8alertBar7setTextEPKc>
    	break;
 8009cd6:	e030      	b.n	8009d3a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Info:
        bgBox.setColor(colors::green);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	332c      	adds	r3, #44	; 0x2c
 8009cdc:	4a1b      	ldr	r2, [pc, #108]	; (8009d4c <_ZN8alertBar8setStateE9EBarState+0xc0>)
 8009cde:	6811      	ldr	r1, [r2, #0]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fc ff19 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009ce6:	e028      	b.n	8009d3a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Warning:
        bgBox.setColor(colors::orange);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	332c      	adds	r3, #44	; 0x2c
 8009cec:	4a18      	ldr	r2, [pc, #96]	; (8009d50 <_ZN8alertBar8setStateE9EBarState+0xc4>)
 8009cee:	6811      	ldr	r1, [r2, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fc ff11 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009cf6:	e020      	b.n	8009d3a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Fault:
        bgBox.setColor(colors::red);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	332c      	adds	r3, #44	; 0x2c
 8009cfc:	4a15      	ldr	r2, [pc, #84]	; (8009d54 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 8009cfe:	6811      	ldr	r1, [r2, #0]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fc ff09 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009d06:	e018      	b.n	8009d3a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical1:
    	bgBox.setColor(colors::red);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	332c      	adds	r3, #44	; 0x2c
 8009d0c:	4a11      	ldr	r2, [pc, #68]	; (8009d54 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 8009d0e:	6811      	ldr	r1, [r2, #0]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fc ff01 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 8009d16:	e010      	b.n	8009d3a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical2:
    	bgBox.setColor(colors::yellow);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	332c      	adds	r3, #44	; 0x2c
 8009d1c:	4a0e      	ldr	r2, [pc, #56]	; (8009d58 <_ZN8alertBar8setStateE9EBarState+0xcc>)
 8009d1e:	6811      	ldr	r1, [r2, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fc fef9 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 8009d26:	e008      	b.n	8009d3a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::News:
        bgBox.setColor(colors::blue);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	332c      	adds	r3, #44	; 0x2c
 8009d2c:	4a05      	ldr	r2, [pc, #20]	; (8009d44 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 8009d2e:	6811      	ldr	r1, [r2, #0]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fc fef1 	bl	8006b18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 8009d36:	e000      	b.n	8009d3a <_ZN8alertBar8setStateE9EBarState+0xae>

    default:
        break;
 8009d38:	bf00      	nop
    }
}
 8009d3a:	bf00      	nop
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	200239c0 	.word	0x200239c0
 8009d48:	0802b2b8 	.word	0x0802b2b8
 8009d4c:	200239bc 	.word	0x200239bc
 8009d50:	200239c4 	.word	0x200239c4
 8009d54:	200239b8 	.word	0x200239b8
 8009d58:	200239c8 	.word	0x200239c8

08009d5c <_ZN8alertBar7setTextEPKc>:

void alertBar::setText(const char inText[])
{
 8009d5c:	b590      	push	{r4, r7, lr}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
    Unicode::snprintf(frontTextBuffer, strlen(inText) + 1, inText);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8009d6c:	6838      	ldr	r0, [r7, #0]
 8009d6e:	f7f6 fa67 	bl	8000240 <strlen>
 8009d72:	4603      	mov	r3, r0
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	3301      	adds	r3, #1
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f011 ff92 	bl	801bca8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    frontText.resizeToCurrentText();
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3360      	adds	r3, #96	; 0x60
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f00d f8a9 	bl	8016ee0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    frontText.invalidate();
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3360      	adds	r3, #96	; 0x60
 8009d92:	4618      	mov	r0, r3
 8009d94:	f00f ff06 	bl	8019ba4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd90      	pop	{r4, r7, pc}

08009da0 <_Z41__static_initialization_and_destruction_0ii>:
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b092      	sub	sp, #72	; 0x48
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	f040 8114 	bne.w	8009fda <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009db8:	4293      	cmp	r3, r2
 8009dba:	f040 810e 	bne.w	8009fda <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dd0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009dd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009dd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ddc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009de8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dec:	041b      	lsls	r3, r3, #16
 8009dee:	461a      	mov	r2, r3
 8009df0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009df4:	021b      	lsls	r3, r3, #8
 8009df6:	431a      	orrs	r2, r3
 8009df8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009e02:	f107 0320 	add.w	r3, r7, #32
 8009e06:	4611      	mov	r1, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fa f8cd 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009e10:	bf00      	nop
 8009e12:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8009e14:	4b73      	ldr	r3, [pc, #460]	; (8009fe4 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	23ff      	movs	r3, #255	; 0xff
 8009e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009e24:	2300      	movs	r3, #0
 8009e26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009e32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009e3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009e42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009e46:	041b      	lsls	r3, r3, #16
 8009e48:	461a      	mov	r2, r3
 8009e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e4e:	021b      	lsls	r3, r3, #8
 8009e50:	431a      	orrs	r2, r3
 8009e52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009e5c:	f107 031c 	add.w	r3, r7, #28
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fa f8a0 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009e68:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8009e6a:	bf00      	nop
 8009e6c:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8009e6e:	4b5e      	ldr	r3, [pc, #376]	; (8009fe8 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	2300      	movs	r3, #0
 8009e74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009e78:	23ff      	movs	r3, #255	; 0xff
 8009e7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e84:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009e88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009e90:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8009e94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009e9c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ea0:	041b      	lsls	r3, r3, #16
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009ea8:	021b      	lsls	r3, r3, #8
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009eb6:	f107 0318 	add.w	r3, r7, #24
 8009eba:	4611      	mov	r1, r2
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fa f873 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009ec2:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8009ec4:	bf00      	nop
 8009ec6:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 8009ec8:	4b48      	ldr	r3, [pc, #288]	; (8009fec <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009ed8:	23ff      	movs	r3, #255	; 0xff
 8009eda:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009ede:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009ee2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8009ee6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009eea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009eee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009ef2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009ef6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009efa:	041b      	lsls	r3, r3, #16
 8009efc:	461a      	mov	r2, r3
 8009efe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	431a      	orrs	r2, r3
 8009f06:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009f10:	f107 0314 	add.w	r3, r7, #20
 8009f14:	4611      	mov	r1, r2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fa f846 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009f1c:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8009f1e:	bf00      	nop
 8009f20:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 8009f22:	4b33      	ldr	r3, [pc, #204]	; (8009ff0 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8009f24:	601a      	str	r2, [r3, #0]
 8009f26:	23f7      	movs	r3, #247	; 0xf7
 8009f28:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8009f2c:	234c      	movs	r3, #76	; 0x4c
 8009f2e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8009f32:	2302      	movs	r3, #2
 8009f34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f38:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009f3c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009f40:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009f44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009f48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f4c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009f50:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009f54:	041b      	lsls	r3, r3, #16
 8009f56:	461a      	mov	r2, r3
 8009f58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009f64:	4313      	orrs	r3, r2
 8009f66:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009f6a:	f107 0310 	add.w	r3, r7, #16
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fa f819 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009f76:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8009f78:	bf00      	nop
 8009f7a:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8009f7c:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	23f7      	movs	r3, #247	; 0xf7
 8009f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f86:	23d2      	movs	r3, #210	; 0xd2
 8009f88:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009f92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f96:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8009f9a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009fa6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009faa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009fae:	041b      	lsls	r3, r3, #16
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009fc4:	f107 030c 	add.w	r3, r7, #12
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f9 ffec 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8009fd2:	bf00      	nop
 8009fd4:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8009fd6:	4b08      	ldr	r3, [pc, #32]	; (8009ff8 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	bf00      	nop
 8009fdc:	3748      	adds	r7, #72	; 0x48
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200239b4 	.word	0x200239b4
 8009fe8:	200239b8 	.word	0x200239b8
 8009fec:	200239bc 	.word	0x200239bc
 8009ff0:	200239c0 	.word	0x200239c0
 8009ff4:	200239c4 	.word	0x200239c4
 8009ff8:	200239c8 	.word	0x200239c8

08009ffc <_GLOBAL__sub_I__ZN8alertBarC2Ev>:
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a004:	2001      	movs	r0, #1
 800a006:	f7ff fecb 	bl	8009da0 <_Z41__static_initialization_and_destruction_0ii>
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>
#include <cmath>

tempBox::tempBox()
 800a00c:	b5b0      	push	{r4, r5, r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af02      	add	r7, sp, #8
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fe06 	bl	8008c28 <_ZN11tempBoxBaseC1Ev>
 800a01c:	4a6a      	ldr	r2, [pc, #424]	; (800a1c8 <_ZN7tempBoxC1Ev+0x1bc>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	22dc      	movs	r2, #220	; 0xdc
 800a02e:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800a038:	24db      	movs	r4, #219	; 0xdb
 800a03a:	461d      	mov	r5, r3
 800a03c:	2c00      	cmp	r4, #0
 800a03e:	db05      	blt.n	800a04c <_ZN7tempBoxC1Ev+0x40>
 800a040:	4628      	mov	r0, r5
 800a042:	f00c fb9f 	bl	8016784 <_ZN8touchgfx4LineC1Ev>
 800a046:	3574      	adds	r5, #116	; 0x74
 800a048:	3c01      	subs	r4, #1
 800a04a:	e7f7      	b.n	800a03c <_ZN7tempBoxC1Ev+0x30>
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	f646 031c 	movw	r3, #26652	; 0x681c
 800a052:	4413      	add	r3, r2
 800a054:	24db      	movs	r4, #219	; 0xdb
 800a056:	461d      	mov	r5, r3
 800a058:	2c00      	cmp	r4, #0
 800a05a:	db0c      	blt.n	800a076 <_ZN7tempBoxC1Ev+0x6a>
 800a05c:	f107 0308 	add.w	r3, r7, #8
 800a060:	2100      	movs	r1, #0
 800a062:	4618      	mov	r0, r3
 800a064:	f7f9 ffa0 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800a068:	68b9      	ldr	r1, [r7, #8]
 800a06a:	4628      	mov	r0, r5
 800a06c:	f7fc ff08 	bl	8006e80 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800a070:	3518      	adds	r5, #24
 800a072:	3c01      	subs	r4, #1
 800a074:	e7f0      	b.n	800a058 <_ZN7tempBoxC1Ev+0x4c>
{
    for(int i=0; i < 220; i++)
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2bdb      	cmp	r3, #219	; 0xdb
 800a07e:	f300 809e 	bgt.w	800a1be <_ZN7tempBoxC1Ev+0x1b2>
    {
        lines[i].setPosition(0,0,220,60);
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2274      	movs	r2, #116	; 0x74
 800a086:	fb02 f303 	mul.w	r3, r2, r3
 800a08a:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	4413      	add	r3, r2
 800a092:	1d18      	adds	r0, r3, #4
 800a094:	233c      	movs	r3, #60	; 0x3c
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	23dc      	movs	r3, #220	; 0xdc
 800a09a:	2200      	movs	r2, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	f7fc fbb8 	bl	8006812 <_ZN8touchgfx8Drawable11setPositionEssss>
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB(10 ,255, 0));
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	f646 0218 	movw	r2, #26648	; 0x6818
 800a0b0:	441a      	add	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	1d1c      	adds	r4, r3, #4
 800a0b8:	230a      	movs	r3, #10
 800a0ba:	74fb      	strb	r3, [r7, #19]
 800a0bc:	23ff      	movs	r3, #255	; 0xff
 800a0be:	74bb      	strb	r3, [r7, #18]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	747b      	strb	r3, [r7, #17]
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a0c4:	7cfb      	ldrb	r3, [r7, #19]
 800a0c6:	041b      	lsls	r3, r3, #16
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	7cbb      	ldrb	r3, [r7, #18]
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	431a      	orrs	r2, r3
 800a0d0:	7c7b      	ldrb	r3, [r7, #17]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a0d8:	f107 030c 	add.w	r3, r7, #12
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7f9 ff62 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f7fc fee9 	bl	8006ec0 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        lines[i].setPainter(linesPainter[i]);
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2274      	movs	r2, #116	; 0x74
 800a0f2:	fb02 f303 	mul.w	r3, r2, r3
 800a0f6:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	1d18      	adds	r0, r3, #4
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2174      	movs	r1, #116	; 0x74
 800a106:	fb01 f303 	mul.w	r3, r1, r3
 800a10a:	4413      	add	r3, r2
 800a10c:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	335c      	adds	r3, #92	; 0x5c
 800a114:	681c      	ldr	r4, [r3, #0]
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	4613      	mov	r3, r2
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	4413      	add	r3, r2
 800a11e:	00db      	lsls	r3, r3, #3
 800a120:	f646 0218 	movw	r2, #26648	; 0x6818
 800a124:	441a      	add	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4413      	add	r3, r2
 800a12a:	3304      	adds	r3, #4
 800a12c:	4619      	mov	r1, r3
 800a12e:	47a0      	blx	r4
        lines[i].setStart(i,0);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2274      	movs	r2, #116	; 0x74
 800a134:	fb02 f303 	mul.w	r3, r2, r3
 800a138:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	4413      	add	r3, r2
 800a140:	3304      	adds	r3, #4
 800a142:	2200      	movs	r2, #0
 800a144:	6979      	ldr	r1, [r7, #20]
 800a146:	4618      	mov	r0, r3
 800a148:	f7fd fdb0 	bl	8007cac <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
        lines[i].setEnd(i,60);
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	2274      	movs	r2, #116	; 0x74
 800a150:	fb02 f303 	mul.w	r3, r2, r3
 800a154:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	4413      	add	r3, r2
 800a15c:	3304      	adds	r3, #4
 800a15e:	223c      	movs	r2, #60	; 0x3c
 800a160:	6979      	ldr	r1, [r7, #20]
 800a162:	4618      	mov	r0, r3
 800a164:	f7fd fdc8 	bl	8007cf8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
        lines[i].setLineWidth(1);
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2274      	movs	r2, #116	; 0x74
 800a16c:	fb02 f303 	mul.w	r3, r2, r3
 800a170:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	4413      	add	r3, r2
 800a178:	3304      	adds	r3, #4
 800a17a:	2101      	movs	r1, #1
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fd fde1 	bl	8007d44 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
        lines[i].setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	2274      	movs	r2, #116	; 0x74
 800a186:	fb02 f303 	mul.w	r3, r2, r3
 800a18a:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	4413      	add	r3, r2
 800a192:	3304      	adds	r3, #4
 800a194:	2101      	movs	r1, #1
 800a196:	4618      	mov	r0, r3
 800a198:	f00c fc3a 	bl	8016a10 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
        add(lines[i]);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2274      	movs	r2, #116	; 0x74
 800a1a2:	fb02 f303 	mul.w	r3, r2, r3
 800a1a6:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	f00a fef3 	bl	8014f9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for(int i=0; i < 220; i++)
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	e75d      	b.n	800a07a <_ZN7tempBoxC1Ev+0x6e>
    }

}
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bdb0      	pop	{r4, r5, r7, pc}
 800a1c8:	0802bc70 	.word	0x0802bc70

0800a1cc <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe fe06 	bl	8008de8 <_ZN11tempBoxBase10initializeEv>
    tempValues[0] = 25;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2219      	movs	r2, #25
 800a1e0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    tempValues[1] = 25;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2219      	movs	r2, #25
 800a1e8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tempValues[2] = 25;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2219      	movs	r2, #25
 800a1f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    tempValues[3] = 25;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2219      	movs	r2, #25
 800a1f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    tempValues[4] = 25;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2219      	movs	r2, #25
 800a200:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    tempValues[5]= 25;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2219      	movs	r2, #25
 800a208:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    numberOfValues = 5;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2205      	movs	r2, #5
 800a210:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <_Z41__static_initialization_and_destruction_0ii>:
        float endValue = lerp(tempValues[kFloor], tempValues[kCeil], alpha);
        
        const colortype tempColor = mapTemp(endValue);
        linesPainter[i].setColor(tempColor);
    }
}
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b092      	sub	sp, #72	; 0x48
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	f040 8114 	bne.w	800a456 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a234:	4293      	cmp	r3, r2
 800a236:	f040 810e 	bne.w	800a456 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a23a:	2300      	movs	r3, #0
 800a23c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a240:	2300      	movs	r3, #0
 800a242:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a246:	2300      	movs	r3, #0
 800a248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a24c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a254:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a258:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a260:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800a264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a268:	041b      	lsls	r3, r3, #16
 800a26a:	461a      	mov	r2, r3
 800a26c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a270:	021b      	lsls	r3, r3, #8
 800a272:	431a      	orrs	r2, r3
 800a274:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a278:	4313      	orrs	r3, r2
 800a27a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a27e:	f107 0320 	add.w	r3, r7, #32
 800a282:	4611      	mov	r1, r2
 800a284:	4618      	mov	r0, r3
 800a286:	f7f9 fe8f 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800a28a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800a28c:	bf00      	nop
 800a28e:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800a290:	4b73      	ldr	r3, [pc, #460]	; (800a460 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	23ff      	movs	r3, #255	; 0xff
 800a296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a29a:	2300      	movs	r3, #0
 800a29c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800a2a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a2ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a2b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a2ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a2be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a2c2:	041b      	lsls	r3, r3, #16
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2ca:	021b      	lsls	r3, r3, #8
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a2d8:	f107 031c 	add.w	r3, r7, #28
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7f9 fe62 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800a2e4:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800a2e6:	bf00      	nop
 800a2e8:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800a2ea:	4b5e      	ldr	r3, [pc, #376]	; (800a464 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a2f4:	23ff      	movs	r3, #255	; 0xff
 800a2f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a300:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a304:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a308:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a30c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800a310:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a314:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a318:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a31c:	041b      	lsls	r3, r3, #16
 800a31e:	461a      	mov	r2, r3
 800a320:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a324:	021b      	lsls	r3, r3, #8
 800a326:	431a      	orrs	r2, r3
 800a328:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a32c:	4313      	orrs	r3, r2
 800a32e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a332:	f107 0318 	add.w	r3, r7, #24
 800a336:	4611      	mov	r1, r2
 800a338:	4618      	mov	r0, r3
 800a33a:	f7f9 fe35 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800a33e:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800a340:	bf00      	nop
 800a342:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 255, 0);
 800a344:	4b48      	ldr	r3, [pc, #288]	; (800a468 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	2300      	movs	r3, #0
 800a34a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a34e:	2300      	movs	r3, #0
 800a350:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a354:	23ff      	movs	r3, #255	; 0xff
 800a356:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a35a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a35e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a362:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a366:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a36a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a36e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a372:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a376:	041b      	lsls	r3, r3, #16
 800a378:	461a      	mov	r2, r3
 800a37a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a37e:	021b      	lsls	r3, r3, #8
 800a380:	431a      	orrs	r2, r3
 800a382:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a386:	4313      	orrs	r3, r2
 800a388:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a38c:	f107 0314 	add.w	r3, r7, #20
 800a390:	4611      	mov	r1, r2
 800a392:	4618      	mov	r0, r3
 800a394:	f7f9 fe08 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800a398:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800a39a:	bf00      	nop
 800a39c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 255);
 800a39e:	4b33      	ldr	r3, [pc, #204]	; (800a46c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	23f7      	movs	r3, #247	; 0xf7
 800a3a4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a3a8:	234c      	movs	r3, #76	; 0x4c
 800a3aa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a3b4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a3b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a3bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a3c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a3c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a3c8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a3cc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a3d0:	041b      	lsls	r3, r3, #16
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a3d8:	021b      	lsls	r3, r3, #8
 800a3da:	431a      	orrs	r2, r3
 800a3dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a3e6:	f107 0310 	add.w	r3, r7, #16
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f9 fddb 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800a3f2:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800a3f4:	bf00      	nop
 800a3f6:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800a3f8:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	23f7      	movs	r3, #247	; 0xf7
 800a3fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a402:	23d2      	movs	r3, #210	; 0xd2
 800a404:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a408:	2302      	movs	r3, #2
 800a40a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a40e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a412:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a416:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a422:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a426:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a42a:	041b      	lsls	r3, r3, #16
 800a42c:	461a      	mov	r2, r3
 800a42e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a432:	021b      	lsls	r3, r3, #8
 800a434:	431a      	orrs	r2, r3
 800a436:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a43a:	4313      	orrs	r3, r2
 800a43c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f7f9 fdae 	bl	8003fa8 <_ZN8touchgfx9colortypeC1Em>
 800a44c:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a44e:	bf00      	nop
 800a450:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a452:	4b08      	ldr	r3, [pc, #32]	; (800a474 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	bf00      	nop
 800a458:	3748      	adds	r7, #72	; 0x48
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	200239cc 	.word	0x200239cc
 800a464:	200239d0 	.word	0x200239d0
 800a468:	200239d4 	.word	0x200239d4
 800a46c:	200239d8 	.word	0x200239d8
 800a470:	200239dc 	.word	0x200239dc
 800a474:	200239e0 	.word	0x200239e0

0800a478 <_GLOBAL__sub_I__ZN7tempBoxC2Ev>:
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a480:	2001      	movs	r0, #1
 800a482:	f7ff fecb 	bl	800a21c <_Z41__static_initialization_and_destruction_0ii>
 800a486:	bd80      	pop	{r7, pc}

0800a488 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a48c:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <SystemInit+0x20>)
 800a48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a492:	4a05      	ldr	r2, [pc, #20]	; (800a4a8 <SystemInit+0x20>)
 800a494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a49c:	bf00      	nop
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	e000ed00 	.word	0xe000ed00

0800a4ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a4b0:	2003      	movs	r0, #3
 800a4b2:	f001 faa0 	bl	800b9f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a4b6:	200f      	movs	r0, #15
 800a4b8:	f7f8 fa88 	bl	80029cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800a4bc:	f7f8 fa5e 	bl	800297c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a4cc:	4b06      	ldr	r3, [pc, #24]	; (800a4e8 <HAL_IncTick+0x20>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <HAL_IncTick+0x24>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	4a04      	ldr	r2, [pc, #16]	; (800a4ec <HAL_IncTick+0x24>)
 800a4da:	6013      	str	r3, [r2, #0]
}
 800a4dc:	bf00      	nop
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	2000001c 	.word	0x2000001c
 800a4ec:	200570b0 	.word	0x200570b0

0800a4f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	af00      	add	r7, sp, #0
  return uwTick;
 800a4f4:	4b03      	ldr	r3, [pc, #12]	; (800a504 <HAL_GetTick+0x14>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	200570b0 	.word	0x200570b0

0800a508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a510:	f7ff ffee 	bl	800a4f0 <HAL_GetTick>
 800a514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a520:	d005      	beq.n	800a52e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a522:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <HAL_Delay+0x44>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4413      	add	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a52e:	bf00      	nop
 800a530:	f7ff ffde 	bl	800a4f0 <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d8f7      	bhi.n	800a530 <HAL_Delay+0x28>
  {
  }
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	2000001c 	.word	0x2000001c

0800a550 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d101      	bne.n	800a566 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e031      	b.n	800a5ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d109      	bne.n	800a582 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7f6 fd00 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	f003 0310 	and.w	r3, r3, #16
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d116      	bne.n	800a5bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <HAL_ADC_Init+0x84>)
 800a594:	4013      	ands	r3, r2
 800a596:	f043 0202 	orr.w	r2, r3, #2
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 faca 	bl	800ab38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ae:	f023 0303 	bic.w	r3, r3, #3
 800a5b2:	f043 0201 	orr.w	r2, r3, #1
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	641a      	str	r2, [r3, #64]	; 0x40
 800a5ba:	e001      	b.n	800a5c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	ffffeefd 	.word	0xffffeefd

0800a5d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d101      	bne.n	800a5f2 <HAL_ADC_Start+0x1a>
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	e0ad      	b.n	800a74e <HAL_ADC_Start+0x176>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b01      	cmp	r3, #1
 800a606:	d018      	beq.n	800a63a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689a      	ldr	r2, [r3, #8]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0201 	orr.w	r2, r2, #1
 800a616:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800a618:	4b50      	ldr	r3, [pc, #320]	; (800a75c <HAL_ADC_Start+0x184>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a50      	ldr	r2, [pc, #320]	; (800a760 <HAL_ADC_Start+0x188>)
 800a61e:	fba2 2303 	umull	r2, r3, r2, r3
 800a622:	0c9a      	lsrs	r2, r3, #18
 800a624:	4613      	mov	r3, r2
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	4413      	add	r3, r2
 800a62a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a62c:	e002      	b.n	800a634 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3b01      	subs	r3, #1
 800a632:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1f9      	bne.n	800a62e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	2b01      	cmp	r3, #1
 800a646:	d175      	bne.n	800a734 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a64c:	4b45      	ldr	r3, [pc, #276]	; (800a764 <HAL_ADC_Start+0x18c>)
 800a64e:	4013      	ands	r3, r2
 800a650:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a662:	2b00      	cmp	r3, #0
 800a664:	d007      	beq.n	800a676 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a66e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a682:	d106      	bne.n	800a692 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a688:	f023 0206 	bic.w	r2, r3, #6
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	645a      	str	r2, [r3, #68]	; 0x44
 800a690:	e002      	b.n	800a698 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a6a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800a6aa:	4b2f      	ldr	r3, [pc, #188]	; (800a768 <HAL_ADC_Start+0x190>)
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f003 031f 	and.w	r3, r3, #31
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10f      	bne.n	800a6d6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d143      	bne.n	800a74c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a6d2:	609a      	str	r2, [r3, #8]
 800a6d4:	e03a      	b.n	800a74c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a24      	ldr	r2, [pc, #144]	; (800a76c <HAL_ADC_Start+0x194>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d10e      	bne.n	800a6fe <HAL_ADC_Start+0x126>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d107      	bne.n	800a6fe <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a6fc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800a6fe:	4b1a      	ldr	r3, [pc, #104]	; (800a768 <HAL_ADC_Start+0x190>)
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f003 0310 	and.w	r3, r3, #16
 800a706:	2b00      	cmp	r3, #0
 800a708:	d120      	bne.n	800a74c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a18      	ldr	r2, [pc, #96]	; (800a770 <HAL_ADC_Start+0x198>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d11b      	bne.n	800a74c <HAL_ADC_Start+0x174>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d114      	bne.n	800a74c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a730:	609a      	str	r2, [r3, #8]
 800a732:	e00b      	b.n	800a74c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	f043 0210 	orr.w	r2, r3, #16
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a744:	f043 0201 	orr.w	r2, r3, #1
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	20000014 	.word	0x20000014
 800a760:	431bde83 	.word	0x431bde83
 800a764:	fffff8fe 	.word	0xfffff8fe
 800a768:	40012300 	.word	0x40012300
 800a76c:	40012000 	.word	0x40012000
 800a770:	40012200 	.word	0x40012200

0800a774 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a78c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a790:	d113      	bne.n	800a7ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a79c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7a0:	d10b      	bne.n	800a7ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a6:	f043 0220 	orr.w	r2, r3, #32
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e063      	b.n	800a882 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a7ba:	f7ff fe99 	bl	800a4f0 <HAL_GetTick>
 800a7be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a7c0:	e021      	b.n	800a806 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c8:	d01d      	beq.n	800a806 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d007      	beq.n	800a7e0 <HAL_ADC_PollForConversion+0x6c>
 800a7d0:	f7ff fe8e 	bl	800a4f0 <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d212      	bcs.n	800a806 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0302 	and.w	r3, r3, #2
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d00b      	beq.n	800a806 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	f043 0204 	orr.w	r2, r3, #4
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e03d      	b.n	800a882 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0302 	and.w	r3, r3, #2
 800a810:	2b02      	cmp	r3, #2
 800a812:	d1d6      	bne.n	800a7c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f06f 0212 	mvn.w	r2, #18
 800a81c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a822:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d123      	bne.n	800a880 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d11f      	bne.n	800a880 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a846:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d006      	beq.n	800a85c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d111      	bne.n	800a880 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a870:	2b00      	cmp	r3, #0
 800a872:	d105      	bne.n	800a880 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	f043 0201 	orr.w	r2, r3, #1
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800a898:	4618      	mov	r0, r3
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d101      	bne.n	800a8c0 <HAL_ADC_ConfigChannel+0x1c>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e12a      	b.n	800ab16 <HAL_ADC_ConfigChannel+0x272>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b09      	cmp	r3, #9
 800a8ce:	d93a      	bls.n	800a946 <HAL_ADC_ConfigChannel+0xa2>
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8d8:	d035      	beq.n	800a946 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68d9      	ldr	r1, [r3, #12]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	4413      	add	r3, r2
 800a8ee:	3b1e      	subs	r3, #30
 800a8f0:	2207      	movs	r2, #7
 800a8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f6:	43da      	mvns	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	400a      	ands	r2, r1
 800a8fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a87      	ldr	r2, [pc, #540]	; (800ab24 <HAL_ADC_ConfigChannel+0x280>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d10a      	bne.n	800a920 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68d9      	ldr	r1, [r3, #12]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	061a      	lsls	r2, r3, #24
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	430a      	orrs	r2, r1
 800a91c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a91e:	e035      	b.n	800a98c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68d9      	ldr	r1, [r3, #12]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	689a      	ldr	r2, [r3, #8]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	4618      	mov	r0, r3
 800a932:	4603      	mov	r3, r0
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	4403      	add	r3, r0
 800a938:	3b1e      	subs	r3, #30
 800a93a:	409a      	lsls	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a944:	e022      	b.n	800a98c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6919      	ldr	r1, [r3, #16]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	b29b      	uxth	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	4613      	mov	r3, r2
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	4413      	add	r3, r2
 800a95a:	2207      	movs	r2, #7
 800a95c:	fa02 f303 	lsl.w	r3, r2, r3
 800a960:	43da      	mvns	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	400a      	ands	r2, r1
 800a968:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6919      	ldr	r1, [r3, #16]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	4618      	mov	r0, r3
 800a97c:	4603      	mov	r3, r0
 800a97e:	005b      	lsls	r3, r3, #1
 800a980:	4403      	add	r3, r0
 800a982:	409a      	lsls	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	430a      	orrs	r2, r1
 800a98a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b06      	cmp	r3, #6
 800a992:	d824      	bhi.n	800a9de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	3b05      	subs	r3, #5
 800a9a6:	221f      	movs	r2, #31
 800a9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ac:	43da      	mvns	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	400a      	ands	r2, r1
 800a9b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	3b05      	subs	r3, #5
 800a9d0:	fa00 f203 	lsl.w	r2, r0, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	635a      	str	r2, [r3, #52]	; 0x34
 800a9dc:	e04c      	b.n	800aa78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2b0c      	cmp	r3, #12
 800a9e4:	d824      	bhi.n	800aa30 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	3b23      	subs	r3, #35	; 0x23
 800a9f8:	221f      	movs	r2, #31
 800a9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a9fe:	43da      	mvns	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	400a      	ands	r2, r1
 800aa06:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	4618      	mov	r0, r3
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	3b23      	subs	r3, #35	; 0x23
 800aa22:	fa00 f203 	lsl.w	r2, r0, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	631a      	str	r2, [r3, #48]	; 0x30
 800aa2e:	e023      	b.n	800aa78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	3b41      	subs	r3, #65	; 0x41
 800aa42:	221f      	movs	r2, #31
 800aa44:	fa02 f303 	lsl.w	r3, r2, r3
 800aa48:	43da      	mvns	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	400a      	ands	r2, r1
 800aa50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	4618      	mov	r0, r3
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685a      	ldr	r2, [r3, #4]
 800aa64:	4613      	mov	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	3b41      	subs	r3, #65	; 0x41
 800aa6c:	fa00 f203 	lsl.w	r2, r0, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	430a      	orrs	r2, r1
 800aa76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a2a      	ldr	r2, [pc, #168]	; (800ab28 <HAL_ADC_ConfigChannel+0x284>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d10a      	bne.n	800aa98 <HAL_ADC_ConfigChannel+0x1f4>
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa8a:	d105      	bne.n	800aa98 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800aa8c:	4b27      	ldr	r3, [pc, #156]	; (800ab2c <HAL_ADC_ConfigChannel+0x288>)
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	4a26      	ldr	r2, [pc, #152]	; (800ab2c <HAL_ADC_ConfigChannel+0x288>)
 800aa92:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800aa96:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a22      	ldr	r2, [pc, #136]	; (800ab28 <HAL_ADC_ConfigChannel+0x284>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d109      	bne.n	800aab6 <HAL_ADC_ConfigChannel+0x212>
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b12      	cmp	r3, #18
 800aaa8:	d105      	bne.n	800aab6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800aaaa:	4b20      	ldr	r3, [pc, #128]	; (800ab2c <HAL_ADC_ConfigChannel+0x288>)
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	4a1f      	ldr	r2, [pc, #124]	; (800ab2c <HAL_ADC_ConfigChannel+0x288>)
 800aab0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aab4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a1b      	ldr	r2, [pc, #108]	; (800ab28 <HAL_ADC_ConfigChannel+0x284>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d125      	bne.n	800ab0c <HAL_ADC_ConfigChannel+0x268>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a17      	ldr	r2, [pc, #92]	; (800ab24 <HAL_ADC_ConfigChannel+0x280>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d003      	beq.n	800aad2 <HAL_ADC_ConfigChannel+0x22e>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b11      	cmp	r3, #17
 800aad0:	d11c      	bne.n	800ab0c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800aad2:	4b16      	ldr	r3, [pc, #88]	; (800ab2c <HAL_ADC_ConfigChannel+0x288>)
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	4a15      	ldr	r2, [pc, #84]	; (800ab2c <HAL_ADC_ConfigChannel+0x288>)
 800aad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aadc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a10      	ldr	r2, [pc, #64]	; (800ab24 <HAL_ADC_ConfigChannel+0x280>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d111      	bne.n	800ab0c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800aae8:	4b11      	ldr	r3, [pc, #68]	; (800ab30 <HAL_ADC_ConfigChannel+0x28c>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a11      	ldr	r2, [pc, #68]	; (800ab34 <HAL_ADC_ConfigChannel+0x290>)
 800aaee:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf2:	0c9a      	lsrs	r2, r3, #18
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	005b      	lsls	r3, r3, #1
 800aafc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800aafe:	e002      	b.n	800ab06 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1f9      	bne.n	800ab00 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	10000012 	.word	0x10000012
 800ab28:	40012000 	.word	0x40012000
 800ab2c:	40012300 	.word	0x40012300
 800ab30:	20000014 	.word	0x20000014
 800ab34:	431bde83 	.word	0x431bde83

0800ab38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800ab40:	4b78      	ldr	r3, [pc, #480]	; (800ad24 <ADC_Init+0x1ec>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	4a77      	ldr	r2, [pc, #476]	; (800ad24 <ADC_Init+0x1ec>)
 800ab46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ab4a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800ab4c:	4b75      	ldr	r3, [pc, #468]	; (800ad24 <ADC_Init+0x1ec>)
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	4973      	ldr	r1, [pc, #460]	; (800ad24 <ADC_Init+0x1ec>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6859      	ldr	r1, [r3, #4]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	021a      	lsls	r2, r3, #8
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ab8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6859      	ldr	r1, [r3, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689a      	ldr	r2, [r3, #8]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6899      	ldr	r1, [r3, #8]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68da      	ldr	r2, [r3, #12]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	430a      	orrs	r2, r1
 800abc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc6:	4a58      	ldr	r2, [pc, #352]	; (800ad28 <ADC_Init+0x1f0>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d022      	beq.n	800ac12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689a      	ldr	r2, [r3, #8]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800abda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6899      	ldr	r1, [r3, #8]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	430a      	orrs	r2, r1
 800abec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	689a      	ldr	r2, [r3, #8]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800abfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6899      	ldr	r1, [r3, #8]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	609a      	str	r2, [r3, #8]
 800ac10:	e00f      	b.n	800ac32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ac20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	689a      	ldr	r2, [r3, #8]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ac30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	689a      	ldr	r2, [r3, #8]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f022 0202 	bic.w	r2, r2, #2
 800ac40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6899      	ldr	r1, [r3, #8]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	005a      	lsls	r2, r3, #1
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	430a      	orrs	r2, r1
 800ac54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01b      	beq.n	800ac98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ac7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6859      	ldr	r1, [r3, #4]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	035a      	lsls	r2, r3, #13
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	605a      	str	r2, [r3, #4]
 800ac96:	e007      	b.n	800aca8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aca6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800acb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	3b01      	subs	r3, #1
 800acc4:	051a      	lsls	r2, r3, #20
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	430a      	orrs	r2, r1
 800accc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	689a      	ldr	r2, [r3, #8]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800acdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6899      	ldr	r1, [r3, #8]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acea:	025a      	lsls	r2, r3, #9
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689a      	ldr	r2, [r3, #8]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6899      	ldr	r1, [r3, #8]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	029a      	lsls	r2, r3, #10
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	430a      	orrs	r2, r1
 800ad16:	609a      	str	r2, [r3, #8]
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	40012300 	.word	0x40012300
 800ad28:	0f000001 	.word	0x0f000001

0800ad2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d101      	bne.n	800ad3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e0ed      	b.n	800af1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d102      	bne.n	800ad50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7f6 fbc4 	bl	80014d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f022 0202 	bic.w	r2, r2, #2
 800ad5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad60:	f7ff fbc6 	bl	800a4f0 <HAL_GetTick>
 800ad64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ad66:	e012      	b.n	800ad8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ad68:	f7ff fbc2 	bl	800a4f0 <HAL_GetTick>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	2b0a      	cmp	r3, #10
 800ad74:	d90b      	bls.n	800ad8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2205      	movs	r2, #5
 800ad86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e0c5      	b.n	800af1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e5      	bne.n	800ad68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f042 0201 	orr.w	r2, r2, #1
 800adaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800adac:	f7ff fba0 	bl	800a4f0 <HAL_GetTick>
 800adb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800adb2:	e012      	b.n	800adda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800adb4:	f7ff fb9c 	bl	800a4f0 <HAL_GetTick>
 800adb8:	4602      	mov	r2, r0
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	2b0a      	cmp	r3, #10
 800adc0:	d90b      	bls.n	800adda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2205      	movs	r2, #5
 800add2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e09f      	b.n	800af1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d0e5      	beq.n	800adb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	7e1b      	ldrb	r3, [r3, #24]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d108      	bne.n	800ae02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e007      	b.n	800ae12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	7e5b      	ldrb	r3, [r3, #25]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d108      	bne.n	800ae2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	e007      	b.n	800ae3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7e9b      	ldrb	r3, [r3, #26]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d108      	bne.n	800ae56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f042 0220 	orr.w	r2, r2, #32
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e007      	b.n	800ae66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f022 0220 	bic.w	r2, r2, #32
 800ae64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7edb      	ldrb	r3, [r3, #27]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d108      	bne.n	800ae80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f022 0210 	bic.w	r2, r2, #16
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	e007      	b.n	800ae90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f042 0210 	orr.w	r2, r2, #16
 800ae8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	7f1b      	ldrb	r3, [r3, #28]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d108      	bne.n	800aeaa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f042 0208 	orr.w	r2, r2, #8
 800aea6:	601a      	str	r2, [r3, #0]
 800aea8:	e007      	b.n	800aeba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f022 0208 	bic.w	r2, r2, #8
 800aeb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	7f5b      	ldrb	r3, [r3, #29]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d108      	bne.n	800aed4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f042 0204 	orr.w	r2, r2, #4
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	e007      	b.n	800aee4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0204 	bic.w	r2, r2, #4
 800aee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	431a      	orrs	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	431a      	orrs	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	ea42 0103 	orr.w	r1, r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	1e5a      	subs	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	430a      	orrs	r2, r1
 800af08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af3a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800af3c:	7cfb      	ldrb	r3, [r7, #19]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d003      	beq.n	800af4a <HAL_CAN_ConfigFilter+0x26>
 800af42:	7cfb      	ldrb	r3, [r7, #19]
 800af44:	2b02      	cmp	r3, #2
 800af46:	f040 80c7 	bne.w	800b0d8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a69      	ldr	r2, [pc, #420]	; (800b0f4 <HAL_CAN_ConfigFilter+0x1d0>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d001      	beq.n	800af58 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800af54:	4b68      	ldr	r3, [pc, #416]	; (800b0f8 <HAL_CAN_ConfigFilter+0x1d4>)
 800af56:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800af5e:	f043 0201 	orr.w	r2, r3, #1
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	4a63      	ldr	r2, [pc, #396]	; (800b0f8 <HAL_CAN_ConfigFilter+0x1d4>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d111      	bne.n	800af94 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800af76:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	021b      	lsls	r3, r3, #8
 800af8c:	431a      	orrs	r2, r3
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	f003 031f 	and.w	r3, r3, #31
 800af9c:	2201      	movs	r2, #1
 800af9e:	fa02 f303 	lsl.w	r3, r2, r3
 800afa2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	43db      	mvns	r3, r3
 800afae:	401a      	ands	r2, r3
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d123      	bne.n	800b006 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	43db      	mvns	r3, r3
 800afc8:	401a      	ands	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800afe0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	3248      	adds	r2, #72	; 0x48
 800afe6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800affa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800affc:	6979      	ldr	r1, [r7, #20]
 800affe:	3348      	adds	r3, #72	; 0x48
 800b000:	00db      	lsls	r3, r3, #3
 800b002:	440b      	add	r3, r1
 800b004:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	69db      	ldr	r3, [r3, #28]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d122      	bne.n	800b054 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	431a      	orrs	r2, r3
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b02e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	3248      	adds	r2, #72	; 0x48
 800b034:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b048:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b04a:	6979      	ldr	r1, [r7, #20]
 800b04c:	3348      	adds	r3, #72	; 0x48
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	440b      	add	r3, r1
 800b052:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d109      	bne.n	800b070 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	43db      	mvns	r3, r3
 800b066:	401a      	ands	r2, r3
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b06e:	e007      	b.n	800b080 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	431a      	orrs	r2, r3
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d109      	bne.n	800b09c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	43db      	mvns	r3, r3
 800b092:	401a      	ands	r2, r3
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b09a:	e007      	b.n	800b0ac <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	431a      	orrs	r2, r3
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	6a1b      	ldr	r3, [r3, #32]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d107      	bne.n	800b0c4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b0ca:	f023 0201 	bic.w	r2, r3, #1
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e006      	b.n	800b0e6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
  }
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	371c      	adds	r7, #28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	40003400 	.word	0x40003400
 800b0f8:	40006400 	.word	0x40006400

0800b0fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d12e      	bne.n	800b16e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f022 0201 	bic.w	r2, r2, #1
 800b126:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b128:	f7ff f9e2 	bl	800a4f0 <HAL_GetTick>
 800b12c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b12e:	e012      	b.n	800b156 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b130:	f7ff f9de 	bl	800a4f0 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	2b0a      	cmp	r3, #10
 800b13c:	d90b      	bls.n	800b156 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2205      	movs	r2, #5
 800b14e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	e012      	b.n	800b17c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e5      	bne.n	800b130 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	e006      	b.n	800b17c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
  }
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b184:	b480      	push	{r7}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b198:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d003      	beq.n	800b1a8 <HAL_CAN_GetRxMessage+0x24>
 800b1a0:	7dfb      	ldrb	r3, [r7, #23]
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	f040 80f3 	bne.w	800b38e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10e      	bne.n	800b1cc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f003 0303 	and.w	r3, r3, #3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d116      	bne.n	800b1ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e0e7      	b.n	800b39c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	f003 0303 	and.w	r3, r3, #3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d107      	bne.n	800b1ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e0d8      	b.n	800b39c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	331b      	adds	r3, #27
 800b1f2:	011b      	lsls	r3, r3, #4
 800b1f4:	4413      	add	r3, r2
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 0204 	and.w	r2, r3, #4
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10c      	bne.n	800b222 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	331b      	adds	r3, #27
 800b210:	011b      	lsls	r3, r3, #4
 800b212:	4413      	add	r3, r2
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	0d5b      	lsrs	r3, r3, #21
 800b218:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	e00b      	b.n	800b23a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	331b      	adds	r3, #27
 800b22a:	011b      	lsls	r3, r3, #4
 800b22c:	4413      	add	r3, r2
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	08db      	lsrs	r3, r3, #3
 800b232:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	331b      	adds	r3, #27
 800b242:	011b      	lsls	r3, r3, #4
 800b244:	4413      	add	r3, r2
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0202 	and.w	r2, r3, #2
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	331b      	adds	r3, #27
 800b258:	011b      	lsls	r3, r3, #4
 800b25a:	4413      	add	r3, r2
 800b25c:	3304      	adds	r3, #4
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 020f 	and.w	r2, r3, #15
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	331b      	adds	r3, #27
 800b270:	011b      	lsls	r3, r3, #4
 800b272:	4413      	add	r3, r2
 800b274:	3304      	adds	r3, #4
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	0a1b      	lsrs	r3, r3, #8
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	331b      	adds	r3, #27
 800b288:	011b      	lsls	r3, r3, #4
 800b28a:	4413      	add	r3, r2
 800b28c:	3304      	adds	r3, #4
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	0c1b      	lsrs	r3, r3, #16
 800b292:	b29a      	uxth	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	011b      	lsls	r3, r3, #4
 800b2a0:	4413      	add	r3, r2
 800b2a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	011b      	lsls	r3, r3, #4
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	0a1a      	lsrs	r2, r3, #8
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	b2d2      	uxtb	r2, r2
 800b2c6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	011b      	lsls	r3, r3, #4
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	0c1a      	lsrs	r2, r3, #16
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	3302      	adds	r3, #2
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	011b      	lsls	r3, r3, #4
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	0e1a      	lsrs	r2, r3, #24
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	3303      	adds	r3, #3
 800b2f8:	b2d2      	uxtb	r2, r2
 800b2fa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	011b      	lsls	r3, r3, #4
 800b304:	4413      	add	r3, r2
 800b306:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	3304      	adds	r3, #4
 800b310:	b2d2      	uxtb	r2, r2
 800b312:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	011b      	lsls	r3, r3, #4
 800b31c:	4413      	add	r3, r2
 800b31e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	0a1a      	lsrs	r2, r3, #8
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	3305      	adds	r3, #5
 800b32a:	b2d2      	uxtb	r2, r2
 800b32c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	011b      	lsls	r3, r3, #4
 800b336:	4413      	add	r3, r2
 800b338:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	0c1a      	lsrs	r2, r3, #16
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	3306      	adds	r3, #6
 800b344:	b2d2      	uxtb	r2, r2
 800b346:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	011b      	lsls	r3, r3, #4
 800b350:	4413      	add	r3, r2
 800b352:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	0e1a      	lsrs	r2, r3, #24
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	3307      	adds	r3, #7
 800b35e:	b2d2      	uxtb	r2, r2
 800b360:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d108      	bne.n	800b37a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68da      	ldr	r2, [r3, #12]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f042 0220 	orr.w	r2, r2, #32
 800b376:	60da      	str	r2, [r3, #12]
 800b378:	e007      	b.n	800b38a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	691a      	ldr	r2, [r3, #16]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f042 0220 	orr.w	r2, r2, #32
 800b388:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	e006      	b.n	800b39c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b392:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
  }
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	371c      	adds	r7, #28
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b3b8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d002      	beq.n	800b3c6 <HAL_CAN_ActivateNotification+0x1e>
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d109      	bne.n	800b3da <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	6959      	ldr	r1, [r3, #20]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e006      	b.n	800b3e8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
  }
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08a      	sub	sp, #40	; 0x28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	699b      	ldr	r3, [r3, #24]
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	f003 0301 	and.w	r3, r3, #1
 800b436:	2b00      	cmp	r3, #0
 800b438:	d07c      	beq.n	800b534 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	2b00      	cmp	r3, #0
 800b442:	d023      	beq.n	800b48c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2201      	movs	r2, #1
 800b44a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	f003 0302 	and.w	r3, r3, #2
 800b452:	2b00      	cmp	r3, #0
 800b454:	d003      	beq.n	800b45e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f983 	bl	800b762 <HAL_CAN_TxMailbox0CompleteCallback>
 800b45c:	e016      	b.n	800b48c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	f003 0304 	and.w	r3, r3, #4
 800b464:	2b00      	cmp	r3, #0
 800b466:	d004      	beq.n	800b472 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b46e:	627b      	str	r3, [r7, #36]	; 0x24
 800b470:	e00c      	b.n	800b48c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	f003 0308 	and.w	r3, r3, #8
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d004      	beq.n	800b486 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
 800b484:	e002      	b.n	800b48c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f989 	bl	800b79e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b492:	2b00      	cmp	r3, #0
 800b494:	d024      	beq.n	800b4e0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b49e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f963 	bl	800b776 <HAL_CAN_TxMailbox1CompleteCallback>
 800b4b0:	e016      	b.n	800b4e0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d004      	beq.n	800b4c6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b4c4:	e00c      	b.n	800b4e0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d004      	beq.n	800b4da <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d8:	e002      	b.n	800b4e0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f969 	bl	800b7b2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d024      	beq.n	800b534 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b4f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f943 	bl	800b78a <HAL_CAN_TxMailbox2CompleteCallback>
 800b504:	e016      	b.n	800b534 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b516:	627b      	str	r3, [r7, #36]	; 0x24
 800b518:	e00c      	b.n	800b534 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d004      	beq.n	800b52e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800b524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b52a:	627b      	str	r3, [r7, #36]	; 0x24
 800b52c:	e002      	b.n	800b534 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f949 	bl	800b7c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	f003 0308 	and.w	r3, r3, #8
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00c      	beq.n	800b558 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f003 0310 	and.w	r3, r3, #16
 800b544:	2b00      	cmp	r3, #0
 800b546:	d007      	beq.n	800b558 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800b548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b54e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2210      	movs	r2, #16
 800b556:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800b558:	6a3b      	ldr	r3, [r7, #32]
 800b55a:	f003 0304 	and.w	r3, r3, #4
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00b      	beq.n	800b57a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	f003 0308 	and.w	r3, r3, #8
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d006      	beq.n	800b57a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2208      	movs	r2, #8
 800b572:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f930 	bl	800b7da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b00      	cmp	r3, #0
 800b582:	d009      	beq.n	800b598 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	f003 0303 	and.w	r3, r3, #3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7f6 f854 	bl	8001640 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00c      	beq.n	800b5bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f003 0310 	and.w	r3, r3, #16
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d007      	beq.n	800b5bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2210      	movs	r2, #16
 800b5ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	f003 0320 	and.w	r3, r3, #32
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00b      	beq.n	800b5de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	f003 0308 	and.w	r3, r3, #8
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d006      	beq.n	800b5de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2208      	movs	r2, #8
 800b5d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f912 	bl	800b802 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800b5de:	6a3b      	ldr	r3, [r7, #32]
 800b5e0:	f003 0310 	and.w	r3, r3, #16
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d009      	beq.n	800b5fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	f003 0303 	and.w	r3, r3, #3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f8f9 	bl	800b7ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00b      	beq.n	800b61e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	f003 0310 	and.w	r3, r3, #16
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d006      	beq.n	800b61e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2210      	movs	r2, #16
 800b616:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 f8fc 	bl	800b816 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800b61e:	6a3b      	ldr	r3, [r7, #32]
 800b620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00b      	beq.n	800b640 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	f003 0308 	and.w	r3, r3, #8
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d006      	beq.n	800b640 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2208      	movs	r2, #8
 800b638:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f8f5 	bl	800b82a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d07b      	beq.n	800b742 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	f003 0304 	and.w	r3, r3, #4
 800b650:	2b00      	cmp	r3, #0
 800b652:	d072      	beq.n	800b73a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d008      	beq.n	800b670 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	f043 0301 	orr.w	r3, r3, #1
 800b66e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b676:	2b00      	cmp	r3, #0
 800b678:	d008      	beq.n	800b68c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b680:	2b00      	cmp	r3, #0
 800b682:	d003      	beq.n	800b68c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	f043 0302 	orr.w	r3, r3, #2
 800b68a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b692:	2b00      	cmp	r3, #0
 800b694:	d008      	beq.n	800b6a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d003      	beq.n	800b6a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	f043 0304 	orr.w	r3, r3, #4
 800b6a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d043      	beq.n	800b73a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d03e      	beq.n	800b73a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6c2:	2b60      	cmp	r3, #96	; 0x60
 800b6c4:	d02b      	beq.n	800b71e <HAL_CAN_IRQHandler+0x32a>
 800b6c6:	2b60      	cmp	r3, #96	; 0x60
 800b6c8:	d82e      	bhi.n	800b728 <HAL_CAN_IRQHandler+0x334>
 800b6ca:	2b50      	cmp	r3, #80	; 0x50
 800b6cc:	d022      	beq.n	800b714 <HAL_CAN_IRQHandler+0x320>
 800b6ce:	2b50      	cmp	r3, #80	; 0x50
 800b6d0:	d82a      	bhi.n	800b728 <HAL_CAN_IRQHandler+0x334>
 800b6d2:	2b40      	cmp	r3, #64	; 0x40
 800b6d4:	d019      	beq.n	800b70a <HAL_CAN_IRQHandler+0x316>
 800b6d6:	2b40      	cmp	r3, #64	; 0x40
 800b6d8:	d826      	bhi.n	800b728 <HAL_CAN_IRQHandler+0x334>
 800b6da:	2b30      	cmp	r3, #48	; 0x30
 800b6dc:	d010      	beq.n	800b700 <HAL_CAN_IRQHandler+0x30c>
 800b6de:	2b30      	cmp	r3, #48	; 0x30
 800b6e0:	d822      	bhi.n	800b728 <HAL_CAN_IRQHandler+0x334>
 800b6e2:	2b10      	cmp	r3, #16
 800b6e4:	d002      	beq.n	800b6ec <HAL_CAN_IRQHandler+0x2f8>
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d005      	beq.n	800b6f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b6ea:	e01d      	b.n	800b728 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	f043 0308 	orr.w	r3, r3, #8
 800b6f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b6f4:	e019      	b.n	800b72a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	f043 0310 	orr.w	r3, r3, #16
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b6fe:	e014      	b.n	800b72a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	f043 0320 	orr.w	r3, r3, #32
 800b706:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b708:	e00f      	b.n	800b72a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b710:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b712:	e00a      	b.n	800b72a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b71a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b71c:	e005      	b.n	800b72a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b724:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b726:	e000      	b.n	800b72a <HAL_CAN_IRQHandler+0x336>
            break;
 800b728:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	699a      	ldr	r2, [r3, #24]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b738:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2204      	movs	r2, #4
 800b740:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b744:	2b00      	cmp	r3, #0
 800b746:	d008      	beq.n	800b75a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	431a      	orrs	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f872 	bl	800b83e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800b75a:	bf00      	nop
 800b75c:	3728      	adds	r7, #40	; 0x28
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800b77e:	bf00      	nop
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b083      	sub	sp, #12
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800b7ba:	bf00      	nop
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b083      	sub	sp, #12
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800b7ce:	bf00      	nop
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800b7e2:	bf00      	nop
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800b80a:	bf00      	nop
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800b816:	b480      	push	{r7}
 800b818:	b083      	sub	sp, #12
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b083      	sub	sp, #12
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800b832:	bf00      	nop
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800b83e:	b480      	push	{r7}
 800b840:	b083      	sub	sp, #12
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800b846:	bf00      	nop
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
	...

0800b854 <__NVIC_SetPriorityGrouping>:
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f003 0307 	and.w	r3, r3, #7
 800b862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b864:	4b0b      	ldr	r3, [pc, #44]	; (800b894 <__NVIC_SetPriorityGrouping+0x40>)
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b870:	4013      	ands	r3, r2
 800b872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b87c:	4b06      	ldr	r3, [pc, #24]	; (800b898 <__NVIC_SetPriorityGrouping+0x44>)
 800b87e:	4313      	orrs	r3, r2
 800b880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b882:	4a04      	ldr	r2, [pc, #16]	; (800b894 <__NVIC_SetPriorityGrouping+0x40>)
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	60d3      	str	r3, [r2, #12]
}
 800b888:	bf00      	nop
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	e000ed00 	.word	0xe000ed00
 800b898:	05fa0000 	.word	0x05fa0000

0800b89c <__NVIC_GetPriorityGrouping>:
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b8a0:	4b04      	ldr	r3, [pc, #16]	; (800b8b4 <__NVIC_GetPriorityGrouping+0x18>)
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	0a1b      	lsrs	r3, r3, #8
 800b8a6:	f003 0307 	and.w	r3, r3, #7
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	e000ed00 	.word	0xe000ed00

0800b8b8 <__NVIC_EnableIRQ>:
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	db0b      	blt.n	800b8e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b8ca:	79fb      	ldrb	r3, [r7, #7]
 800b8cc:	f003 021f 	and.w	r2, r3, #31
 800b8d0:	4907      	ldr	r1, [pc, #28]	; (800b8f0 <__NVIC_EnableIRQ+0x38>)
 800b8d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8d6:	095b      	lsrs	r3, r3, #5
 800b8d8:	2001      	movs	r0, #1
 800b8da:	fa00 f202 	lsl.w	r2, r0, r2
 800b8de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b8e2:	bf00      	nop
 800b8e4:	370c      	adds	r7, #12
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	e000e100 	.word	0xe000e100

0800b8f4 <__NVIC_DisableIRQ>:
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b902:	2b00      	cmp	r3, #0
 800b904:	db12      	blt.n	800b92c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b906:	79fb      	ldrb	r3, [r7, #7]
 800b908:	f003 021f 	and.w	r2, r3, #31
 800b90c:	490a      	ldr	r1, [pc, #40]	; (800b938 <__NVIC_DisableIRQ+0x44>)
 800b90e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b912:	095b      	lsrs	r3, r3, #5
 800b914:	2001      	movs	r0, #1
 800b916:	fa00 f202 	lsl.w	r2, r0, r2
 800b91a:	3320      	adds	r3, #32
 800b91c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b920:	f3bf 8f4f 	dsb	sy
}
 800b924:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b926:	f3bf 8f6f 	isb	sy
}
 800b92a:	bf00      	nop
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	e000e100 	.word	0xe000e100

0800b93c <__NVIC_SetPriority>:
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	6039      	str	r1, [r7, #0]
 800b946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	db0a      	blt.n	800b966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	b2da      	uxtb	r2, r3
 800b954:	490c      	ldr	r1, [pc, #48]	; (800b988 <__NVIC_SetPriority+0x4c>)
 800b956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b95a:	0112      	lsls	r2, r2, #4
 800b95c:	b2d2      	uxtb	r2, r2
 800b95e:	440b      	add	r3, r1
 800b960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b964:	e00a      	b.n	800b97c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	4908      	ldr	r1, [pc, #32]	; (800b98c <__NVIC_SetPriority+0x50>)
 800b96c:	79fb      	ldrb	r3, [r7, #7]
 800b96e:	f003 030f 	and.w	r3, r3, #15
 800b972:	3b04      	subs	r3, #4
 800b974:	0112      	lsls	r2, r2, #4
 800b976:	b2d2      	uxtb	r2, r2
 800b978:	440b      	add	r3, r1
 800b97a:	761a      	strb	r2, [r3, #24]
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	e000e100 	.word	0xe000e100
 800b98c:	e000ed00 	.word	0xe000ed00

0800b990 <NVIC_EncodePriority>:
{
 800b990:	b480      	push	{r7}
 800b992:	b089      	sub	sp, #36	; 0x24
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f003 0307 	and.w	r3, r3, #7
 800b9a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	f1c3 0307 	rsb	r3, r3, #7
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	bf28      	it	cs
 800b9ae:	2304      	movcs	r3, #4
 800b9b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	2b06      	cmp	r3, #6
 800b9b8:	d902      	bls.n	800b9c0 <NVIC_EncodePriority+0x30>
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	3b03      	subs	r3, #3
 800b9be:	e000      	b.n	800b9c2 <NVIC_EncodePriority+0x32>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ce:	43da      	mvns	r2, r3
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	401a      	ands	r2, r3
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b9d8:	f04f 31ff 	mov.w	r1, #4294967295
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e2:	43d9      	mvns	r1, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b9e8:	4313      	orrs	r3, r2
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3724      	adds	r7, #36	; 0x24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7ff ff28 	bl	800b854 <__NVIC_SetPriorityGrouping>
}
 800ba04:	bf00      	nop
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ba1e:	f7ff ff3d 	bl	800b89c <__NVIC_GetPriorityGrouping>
 800ba22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	68b9      	ldr	r1, [r7, #8]
 800ba28:	6978      	ldr	r0, [r7, #20]
 800ba2a:	f7ff ffb1 	bl	800b990 <NVIC_EncodePriority>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba34:	4611      	mov	r1, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff ff80 	bl	800b93c <__NVIC_SetPriority>
}
 800ba3c:	bf00      	nop
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ba4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7ff ff30 	bl	800b8b8 <__NVIC_EnableIRQ>
}
 800ba58:	bf00      	nop
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4603      	mov	r3, r0
 800ba68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ba6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff ff40 	bl	800b8f4 <__NVIC_DisableIRQ>
}
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e054      	b.n	800bb38 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	7f5b      	ldrb	r3, [r3, #29]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d105      	bne.n	800baa4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7f5 ff74 	bl	800198c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2202      	movs	r2, #2
 800baa8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	791b      	ldrb	r3, [r3, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10c      	bne.n	800bacc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a22      	ldr	r2, [pc, #136]	; (800bb40 <HAL_CRC_Init+0xc4>)
 800bab8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689a      	ldr	r2, [r3, #8]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f022 0218 	bic.w	r2, r2, #24
 800bac8:	609a      	str	r2, [r3, #8]
 800baca:	e00c      	b.n	800bae6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6899      	ldr	r1, [r3, #8]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	461a      	mov	r2, r3
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f834 	bl	800bb44 <HAL_CRCEx_Polynomial_Set>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	e028      	b.n	800bb38 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	795b      	ldrb	r3, [r3, #5]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d105      	bne.n	800bafa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f04f 32ff 	mov.w	r2, #4294967295
 800baf6:	611a      	str	r2, [r3, #16]
 800baf8:	e004      	b.n	800bb04 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	6912      	ldr	r2, [r2, #16]
 800bb02:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	695a      	ldr	r2, [r3, #20]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	430a      	orrs	r2, r1
 800bb18:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	699a      	ldr	r2, [r3, #24]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	430a      	orrs	r2, r1
 800bb2e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	04c11db7 	.word	0x04c11db7

0800bb44 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b087      	sub	sp, #28
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800bb54:	231f      	movs	r3, #31
 800bb56:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800bb58:	bf00      	nop
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	1e5a      	subs	r2, r3, #1
 800bb5e:	613a      	str	r2, [r7, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d009      	beq.n	800bb78 <HAL_CRCEx_Polynomial_Set+0x34>
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f003 031f 	and.w	r3, r3, #31
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d0f0      	beq.n	800bb5a <HAL_CRCEx_Polynomial_Set+0x16>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b18      	cmp	r3, #24
 800bb7c:	d846      	bhi.n	800bc0c <HAL_CRCEx_Polynomial_Set+0xc8>
 800bb7e:	a201      	add	r2, pc, #4	; (adr r2, 800bb84 <HAL_CRCEx_Polynomial_Set+0x40>)
 800bb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb84:	0800bc13 	.word	0x0800bc13
 800bb88:	0800bc0d 	.word	0x0800bc0d
 800bb8c:	0800bc0d 	.word	0x0800bc0d
 800bb90:	0800bc0d 	.word	0x0800bc0d
 800bb94:	0800bc0d 	.word	0x0800bc0d
 800bb98:	0800bc0d 	.word	0x0800bc0d
 800bb9c:	0800bc0d 	.word	0x0800bc0d
 800bba0:	0800bc0d 	.word	0x0800bc0d
 800bba4:	0800bc01 	.word	0x0800bc01
 800bba8:	0800bc0d 	.word	0x0800bc0d
 800bbac:	0800bc0d 	.word	0x0800bc0d
 800bbb0:	0800bc0d 	.word	0x0800bc0d
 800bbb4:	0800bc0d 	.word	0x0800bc0d
 800bbb8:	0800bc0d 	.word	0x0800bc0d
 800bbbc:	0800bc0d 	.word	0x0800bc0d
 800bbc0:	0800bc0d 	.word	0x0800bc0d
 800bbc4:	0800bbf5 	.word	0x0800bbf5
 800bbc8:	0800bc0d 	.word	0x0800bc0d
 800bbcc:	0800bc0d 	.word	0x0800bc0d
 800bbd0:	0800bc0d 	.word	0x0800bc0d
 800bbd4:	0800bc0d 	.word	0x0800bc0d
 800bbd8:	0800bc0d 	.word	0x0800bc0d
 800bbdc:	0800bc0d 	.word	0x0800bc0d
 800bbe0:	0800bc0d 	.word	0x0800bc0d
 800bbe4:	0800bbe9 	.word	0x0800bbe9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	2b06      	cmp	r3, #6
 800bbec:	d913      	bls.n	800bc16 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bbf2:	e010      	b.n	800bc16 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	2b07      	cmp	r3, #7
 800bbf8:	d90f      	bls.n	800bc1a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bbfe:	e00c      	b.n	800bc1a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	2b0f      	cmp	r3, #15
 800bc04:	d90b      	bls.n	800bc1e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bc0a:	e008      	b.n	800bc1e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	75fb      	strb	r3, [r7, #23]
      break;
 800bc10:	e006      	b.n	800bc20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bc12:	bf00      	nop
 800bc14:	e004      	b.n	800bc20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bc16:	bf00      	nop
 800bc18:	e002      	b.n	800bc20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bc1a:	bf00      	nop
 800bc1c:	e000      	b.n	800bc20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bc1e:	bf00      	nop
  }
  if (status == HAL_OK)
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10d      	bne.n	800bc42 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	f023 0118 	bic.w	r1, r3, #24
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	430a      	orrs	r2, r1
 800bc40:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	371c      	adds	r7, #28
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bc5c:	f7fe fc48 	bl	800a4f0 <HAL_GetTick>
 800bc60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d101      	bne.n	800bc6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e099      	b.n	800bda0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2202      	movs	r2, #2
 800bc78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0201 	bic.w	r2, r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc8c:	e00f      	b.n	800bcae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bc8e:	f7fe fc2f 	bl	800a4f0 <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	2b05      	cmp	r3, #5
 800bc9a:	d908      	bls.n	800bcae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2220      	movs	r2, #32
 800bca0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2203      	movs	r2, #3
 800bca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e078      	b.n	800bda0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1e8      	bne.n	800bc8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	4b38      	ldr	r3, [pc, #224]	; (800bda8 <HAL_DMA_Init+0x158>)
 800bcc8:	4013      	ands	r3, r2
 800bcca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bcda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bcf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a1b      	ldr	r3, [r3, #32]
 800bcf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	2b04      	cmp	r3, #4
 800bd06:	d107      	bne.n	800bd18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd10:	4313      	orrs	r3, r2
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	697a      	ldr	r2, [r7, #20]
 800bd1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f023 0307 	bic.w	r3, r3, #7
 800bd2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	697a      	ldr	r2, [r7, #20]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3e:	2b04      	cmp	r3, #4
 800bd40:	d117      	bne.n	800bd72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00e      	beq.n	800bd72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fa99 	bl	800c28c <DMA_CheckFifoParam>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d008      	beq.n	800bd72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2240      	movs	r2, #64	; 0x40
 800bd64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e016      	b.n	800bda0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	697a      	ldr	r2, [r7, #20]
 800bd78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fa50 	bl	800c220 <DMA_CalcBaseAndBitshift>
 800bd80:	4603      	mov	r3, r0
 800bd82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd88:	223f      	movs	r2, #63	; 0x3f
 800bd8a:	409a      	lsls	r2, r3
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	e010803f 	.word	0xe010803f

0800bdac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d101      	bne.n	800bdd2 <HAL_DMA_Start_IT+0x26>
 800bdce:	2302      	movs	r3, #2
 800bdd0:	e048      	b.n	800be64 <HAL_DMA_Start_IT+0xb8>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d137      	bne.n	800be56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2202      	movs	r2, #2
 800bdea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	68b9      	ldr	r1, [r7, #8]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 f9e2 	bl	800c1c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be04:	223f      	movs	r2, #63	; 0x3f
 800be06:	409a      	lsls	r2, r3
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f042 0216 	orr.w	r2, r2, #22
 800be1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	695a      	ldr	r2, [r3, #20]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800be2a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f042 0208 	orr.w	r2, r2, #8
 800be42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f042 0201 	orr.w	r2, r2, #1
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	e005      	b.n	800be62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800be5e:	2302      	movs	r3, #2
 800be60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800be62:	7dfb      	ldrb	r3, [r7, #23]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3718      	adds	r7, #24
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d004      	beq.n	800be8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2280      	movs	r2, #128	; 0x80
 800be84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e00c      	b.n	800bea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2205      	movs	r2, #5
 800be8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f022 0201 	bic.w	r2, r2, #1
 800bea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800beb8:	2300      	movs	r3, #0
 800beba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800bebc:	4b92      	ldr	r3, [pc, #584]	; (800c108 <HAL_DMA_IRQHandler+0x258>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a92      	ldr	r2, [pc, #584]	; (800c10c <HAL_DMA_IRQHandler+0x25c>)
 800bec2:	fba2 2303 	umull	r2, r3, r2, r3
 800bec6:	0a9b      	lsrs	r3, r3, #10
 800bec8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bece:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800beda:	2208      	movs	r2, #8
 800bedc:	409a      	lsls	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4013      	ands	r3, r2
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d01a      	beq.n	800bf1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0304 	and.w	r3, r3, #4
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d013      	beq.n	800bf1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f022 0204 	bic.w	r2, r2, #4
 800bf02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf08:	2208      	movs	r2, #8
 800bf0a:	409a      	lsls	r2, r3
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf14:	f043 0201 	orr.w	r2, r3, #1
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf20:	2201      	movs	r2, #1
 800bf22:	409a      	lsls	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	4013      	ands	r3, r2
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d012      	beq.n	800bf52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00b      	beq.n	800bf52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf3e:	2201      	movs	r2, #1
 800bf40:	409a      	lsls	r2, r3
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf4a:	f043 0202 	orr.w	r2, r3, #2
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf56:	2204      	movs	r2, #4
 800bf58:	409a      	lsls	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d012      	beq.n	800bf88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 0302 	and.w	r3, r3, #2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00b      	beq.n	800bf88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf74:	2204      	movs	r2, #4
 800bf76:	409a      	lsls	r2, r3
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf80:	f043 0204 	orr.w	r2, r3, #4
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf8c:	2210      	movs	r2, #16
 800bf8e:	409a      	lsls	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4013      	ands	r3, r2
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d043      	beq.n	800c020 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0308 	and.w	r3, r3, #8
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d03c      	beq.n	800c020 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfaa:	2210      	movs	r2, #16
 800bfac:	409a      	lsls	r2, r3
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d018      	beq.n	800bff2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d108      	bne.n	800bfe0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d024      	beq.n	800c020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	4798      	blx	r3
 800bfde:	e01f      	b.n	800c020 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01b      	beq.n	800c020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	4798      	blx	r3
 800bff0:	e016      	b.n	800c020 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d107      	bne.n	800c010 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f022 0208 	bic.w	r2, r2, #8
 800c00e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c014:	2b00      	cmp	r3, #0
 800c016:	d003      	beq.n	800c020 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c024:	2220      	movs	r2, #32
 800c026:	409a      	lsls	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	4013      	ands	r3, r2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 808e 	beq.w	800c14e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 0310 	and.w	r3, r3, #16
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f000 8086 	beq.w	800c14e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c046:	2220      	movs	r2, #32
 800c048:	409a      	lsls	r2, r3
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b05      	cmp	r3, #5
 800c058:	d136      	bne.n	800c0c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f022 0216 	bic.w	r2, r2, #22
 800c068:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	695a      	ldr	r2, [r3, #20]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c078:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d103      	bne.n	800c08a <HAL_DMA_IRQHandler+0x1da>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c086:	2b00      	cmp	r3, #0
 800c088:	d007      	beq.n	800c09a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f022 0208 	bic.w	r2, r2, #8
 800c098:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c09e:	223f      	movs	r2, #63	; 0x3f
 800c0a0:	409a      	lsls	r2, r3
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d07d      	beq.n	800c1ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	4798      	blx	r3
        }
        return;
 800c0c6:	e078      	b.n	800c1ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d01c      	beq.n	800c110 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d108      	bne.n	800c0f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d030      	beq.n	800c14e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	4798      	blx	r3
 800c0f4:	e02b      	b.n	800c14e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d027      	beq.n	800c14e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	4798      	blx	r3
 800c106:	e022      	b.n	800c14e <HAL_DMA_IRQHandler+0x29e>
 800c108:	20000014 	.word	0x20000014
 800c10c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10f      	bne.n	800c13e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f022 0210 	bic.w	r2, r2, #16
 800c12c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c142:	2b00      	cmp	r3, #0
 800c144:	d003      	beq.n	800c14e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c152:	2b00      	cmp	r3, #0
 800c154:	d032      	beq.n	800c1bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d022      	beq.n	800c1a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2205      	movs	r2, #5
 800c166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f022 0201 	bic.w	r2, r2, #1
 800c178:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	3301      	adds	r3, #1
 800c17e:	60bb      	str	r3, [r7, #8]
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	429a      	cmp	r2, r3
 800c184:	d307      	bcc.n	800c196 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 0301 	and.w	r3, r3, #1
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1f2      	bne.n	800c17a <HAL_DMA_IRQHandler+0x2ca>
 800c194:	e000      	b.n	800c198 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c196:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d005      	beq.n	800c1bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	4798      	blx	r3
 800c1b8:	e000      	b.n	800c1bc <HAL_DMA_IRQHandler+0x30c>
        return;
 800c1ba:	bf00      	nop
    }
  }
}
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop

0800c1c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c1e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	2b40      	cmp	r3, #64	; 0x40
 800c1f0:	d108      	bne.n	800c204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c202:	e007      	b.n	800c214 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	60da      	str	r2, [r3, #12]
}
 800c214:	bf00      	nop
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	3b10      	subs	r3, #16
 800c230:	4a13      	ldr	r2, [pc, #76]	; (800c280 <DMA_CalcBaseAndBitshift+0x60>)
 800c232:	fba2 2303 	umull	r2, r3, r2, r3
 800c236:	091b      	lsrs	r3, r3, #4
 800c238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c23a:	4a12      	ldr	r2, [pc, #72]	; (800c284 <DMA_CalcBaseAndBitshift+0x64>)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	461a      	mov	r2, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d908      	bls.n	800c260 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	461a      	mov	r2, r3
 800c254:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <DMA_CalcBaseAndBitshift+0x68>)
 800c256:	4013      	ands	r3, r2
 800c258:	1d1a      	adds	r2, r3, #4
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	659a      	str	r2, [r3, #88]	; 0x58
 800c25e:	e006      	b.n	800c26e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	461a      	mov	r2, r3
 800c266:	4b08      	ldr	r3, [pc, #32]	; (800c288 <DMA_CalcBaseAndBitshift+0x68>)
 800c268:	4013      	ands	r3, r2
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c272:	4618      	mov	r0, r3
 800c274:	3714      	adds	r7, #20
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	aaaaaaab 	.word	0xaaaaaaab
 800c284:	0802bd0c 	.word	0x0802bd0c
 800c288:	fffffc00 	.word	0xfffffc00

0800c28c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c29c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d11f      	bne.n	800c2e6 <DMA_CheckFifoParam+0x5a>
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2b03      	cmp	r3, #3
 800c2aa:	d856      	bhi.n	800c35a <DMA_CheckFifoParam+0xce>
 800c2ac:	a201      	add	r2, pc, #4	; (adr r2, 800c2b4 <DMA_CheckFifoParam+0x28>)
 800c2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b2:	bf00      	nop
 800c2b4:	0800c2c5 	.word	0x0800c2c5
 800c2b8:	0800c2d7 	.word	0x0800c2d7
 800c2bc:	0800c2c5 	.word	0x0800c2c5
 800c2c0:	0800c35b 	.word	0x0800c35b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d046      	beq.n	800c35e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c2d4:	e043      	b.n	800c35e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c2de:	d140      	bne.n	800c362 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c2e4:	e03d      	b.n	800c362 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2ee:	d121      	bne.n	800c334 <DMA_CheckFifoParam+0xa8>
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d837      	bhi.n	800c366 <DMA_CheckFifoParam+0xda>
 800c2f6:	a201      	add	r2, pc, #4	; (adr r2, 800c2fc <DMA_CheckFifoParam+0x70>)
 800c2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fc:	0800c30d 	.word	0x0800c30d
 800c300:	0800c313 	.word	0x0800c313
 800c304:	0800c30d 	.word	0x0800c30d
 800c308:	0800c325 	.word	0x0800c325
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	73fb      	strb	r3, [r7, #15]
      break;
 800c310:	e030      	b.n	800c374 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d025      	beq.n	800c36a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c322:	e022      	b.n	800c36a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c32c:	d11f      	bne.n	800c36e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c332:	e01c      	b.n	800c36e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2b02      	cmp	r3, #2
 800c338:	d903      	bls.n	800c342 <DMA_CheckFifoParam+0xb6>
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	d003      	beq.n	800c348 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c340:	e018      	b.n	800c374 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	73fb      	strb	r3, [r7, #15]
      break;
 800c346:	e015      	b.n	800c374 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00e      	beq.n	800c372 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	73fb      	strb	r3, [r7, #15]
      break;
 800c358:	e00b      	b.n	800c372 <DMA_CheckFifoParam+0xe6>
      break;
 800c35a:	bf00      	nop
 800c35c:	e00a      	b.n	800c374 <DMA_CheckFifoParam+0xe8>
      break;
 800c35e:	bf00      	nop
 800c360:	e008      	b.n	800c374 <DMA_CheckFifoParam+0xe8>
      break;
 800c362:	bf00      	nop
 800c364:	e006      	b.n	800c374 <DMA_CheckFifoParam+0xe8>
      break;
 800c366:	bf00      	nop
 800c368:	e004      	b.n	800c374 <DMA_CheckFifoParam+0xe8>
      break;
 800c36a:	bf00      	nop
 800c36c:	e002      	b.n	800c374 <DMA_CheckFifoParam+0xe8>
      break;   
 800c36e:	bf00      	nop
 800c370:	e000      	b.n	800c374 <DMA_CheckFifoParam+0xe8>
      break;
 800c372:	bf00      	nop
    }
  } 
  
  return status; 
 800c374:	7bfb      	ldrb	r3, [r7, #15]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop

0800c384 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c392:	2301      	movs	r3, #1
 800c394:	e049      	b.n	800c42a <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d106      	bne.n	800c3b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7f5 fb6c 	bl	8001a88 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	685a      	ldr	r2, [r3, #4]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3d4:	f023 0107 	bic.w	r1, r3, #7
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	689a      	ldr	r2, [r3, #8]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3ea:	4b12      	ldr	r3, [pc, #72]	; (800c434 <HAL_DMA2D_Init+0xb0>)
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	68d1      	ldr	r1, [r2, #12]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	6812      	ldr	r2, [r2, #0]
 800c3f6:	430b      	orrs	r3, r1
 800c3f8:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c400:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	051a      	lsls	r2, r3, #20
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	695b      	ldr	r3, [r3, #20]
 800c40e:	055b      	lsls	r3, r3, #21
 800c410:	431a      	orrs	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	430a      	orrs	r2, r1
 800c418:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	ffffc000 	.word	0xffffc000

0800c438 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	2b00      	cmp	r3, #0
 800c458:	d026      	beq.n	800c4a8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c460:	2b00      	cmp	r3, #0
 800c462:	d021      	beq.n	800c4a8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c472:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c478:	f043 0201 	orr.w	r2, r3, #1
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2201      	movs	r2, #1
 800c486:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2204      	movs	r2, #4
 800c48c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	69db      	ldr	r3, [r3, #28]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d003      	beq.n	800c4a8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	69db      	ldr	r3, [r3, #28]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f003 0320 	and.w	r3, r3, #32
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d026      	beq.n	800c500 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d021      	beq.n	800c500 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4ca:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2220      	movs	r2, #32
 800c4d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4d8:	f043 0202 	orr.w	r2, r3, #2
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2204      	movs	r2, #4
 800c4e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	69db      	ldr	r3, [r3, #28]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d003      	beq.n	800c500 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	69db      	ldr	r3, [r3, #28]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f003 0308 	and.w	r3, r3, #8
 800c506:	2b00      	cmp	r3, #0
 800c508:	d026      	beq.n	800c558 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c510:	2b00      	cmp	r3, #0
 800c512:	d021      	beq.n	800c558 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c522:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2208      	movs	r2, #8
 800c52a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c530:	f043 0204 	orr.w	r2, r3, #4
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2204      	movs	r2, #4
 800c53c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	69db      	ldr	r3, [r3, #28]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d003      	beq.n	800c558 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	69db      	ldr	r3, [r3, #28]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d013      	beq.n	800c58a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00e      	beq.n	800c58a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c57a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2204      	movs	r2, #4
 800c582:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f853 	bl	800c630 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f003 0302 	and.w	r3, r3, #2
 800c590:	2b00      	cmp	r3, #0
 800c592:	d024      	beq.n	800c5de <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d01f      	beq.n	800c5de <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c5ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d003      	beq.n	800c5de <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	699b      	ldr	r3, [r3, #24]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f003 0310 	and.w	r3, r3, #16
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01f      	beq.n	800c628 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d01a      	beq.n	800c628 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c600:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2210      	movs	r2, #16
 800c608:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2201      	movs	r2, #1
 800c616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f80e 	bl	800c644 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800c628:	bf00      	nop
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800c658:	b480      	push	{r7}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c670:	2b01      	cmp	r3, #1
 800c672:	d101      	bne.n	800c678 <HAL_DMA2D_ConfigLayer+0x20>
 800c674:	2302      	movs	r3, #2
 800c676:	e084      	b.n	800c782 <HAL_DMA2D_ConfigLayer+0x12a>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2202      	movs	r2, #2
 800c684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800c688:	683a      	ldr	r2, [r7, #0]
 800c68a:	4613      	mov	r3, r2
 800c68c:	005b      	lsls	r3, r3, #1
 800c68e:	4413      	add	r3, r2
 800c690:	00db      	lsls	r3, r3, #3
 800c692:	3320      	adds	r3, #32
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	4413      	add	r3, r2
 800c698:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	041b      	lsls	r3, r3, #16
 800c6a4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c6ac:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	695b      	ldr	r3, [r3, #20]
 800c6b2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800c6b8:	4b35      	ldr	r3, [pc, #212]	; (800c790 <HAL_DMA2D_ConfigLayer+0x138>)
 800c6ba:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	2b0a      	cmp	r3, #10
 800c6c2:	d003      	beq.n	800c6cc <HAL_DMA2D_ConfigLayer+0x74>
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	2b09      	cmp	r3, #9
 800c6ca:	d107      	bne.n	800c6dc <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	617b      	str	r3, [r7, #20]
 800c6da:	e005      	b.n	800c6e8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	061b      	lsls	r3, r3, #24
 800c6e2:	697a      	ldr	r2, [r7, #20]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d120      	bne.n	800c730 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	43db      	mvns	r3, r3
 800c6f8:	ea02 0103 	and.w	r1, r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	430a      	orrs	r2, r1
 800c704:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	6812      	ldr	r2, [r2, #0]
 800c70e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	2b0a      	cmp	r3, #10
 800c716:	d003      	beq.n	800c720 <HAL_DMA2D_ConfigLayer+0xc8>
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	2b09      	cmp	r3, #9
 800c71e:	d127      	bne.n	800c770 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c72c:	629a      	str	r2, [r3, #40]	; 0x28
 800c72e:	e01f      	b.n	800c770 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	69da      	ldr	r2, [r3, #28]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	43db      	mvns	r3, r3
 800c73a:	ea02 0103 	and.w	r1, r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	430a      	orrs	r2, r1
 800c746:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	6812      	ldr	r2, [r2, #0]
 800c750:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	2b0a      	cmp	r3, #10
 800c758:	d003      	beq.n	800c762 <HAL_DMA2D_ConfigLayer+0x10a>
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	2b09      	cmp	r3, #9
 800c760:	d106      	bne.n	800c770 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	68da      	ldr	r2, [r3, #12]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c76e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	371c      	adds	r7, #28
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	ff33000f 	.word	0xff33000f

0800c794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c794:	b480      	push	{r7}
 800c796:	b089      	sub	sp, #36	; 0x24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	61fb      	str	r3, [r7, #28]
 800c7b2:	e175      	b.n	800caa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c7bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	f040 8164 	bne.w	800ca9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d00b      	beq.n	800c7f2 <HAL_GPIO_Init+0x5e>
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d007      	beq.n	800c7f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c7e6:	2b11      	cmp	r3, #17
 800c7e8:	d003      	beq.n	800c7f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	2b12      	cmp	r3, #18
 800c7f0:	d130      	bne.n	800c854 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	2203      	movs	r2, #3
 800c7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c802:	43db      	mvns	r3, r3
 800c804:	69ba      	ldr	r2, [r7, #24]
 800c806:	4013      	ands	r3, r2
 800c808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	68da      	ldr	r2, [r3, #12]
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	fa02 f303 	lsl.w	r3, r2, r3
 800c816:	69ba      	ldr	r2, [r7, #24]
 800c818:	4313      	orrs	r3, r2
 800c81a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	69ba      	ldr	r2, [r7, #24]
 800c820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c828:	2201      	movs	r2, #1
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	fa02 f303 	lsl.w	r3, r2, r3
 800c830:	43db      	mvns	r3, r3
 800c832:	69ba      	ldr	r2, [r7, #24]
 800c834:	4013      	ands	r3, r2
 800c836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	091b      	lsrs	r3, r3, #4
 800c83e:	f003 0201 	and.w	r2, r3, #1
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	fa02 f303 	lsl.w	r3, r2, r3
 800c848:	69ba      	ldr	r2, [r7, #24]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	69ba      	ldr	r2, [r7, #24]
 800c852:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	2203      	movs	r2, #3
 800c860:	fa02 f303 	lsl.w	r3, r2, r3
 800c864:	43db      	mvns	r3, r3
 800c866:	69ba      	ldr	r2, [r7, #24]
 800c868:	4013      	ands	r3, r2
 800c86a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	689a      	ldr	r2, [r3, #8]
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	fa02 f303 	lsl.w	r3, r2, r3
 800c878:	69ba      	ldr	r2, [r7, #24]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	69ba      	ldr	r2, [r7, #24]
 800c882:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d003      	beq.n	800c894 <HAL_GPIO_Init+0x100>
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	2b12      	cmp	r3, #18
 800c892:	d123      	bne.n	800c8dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	08da      	lsrs	r2, r3, #3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	3208      	adds	r2, #8
 800c89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	f003 0307 	and.w	r3, r3, #7
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	220f      	movs	r2, #15
 800c8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b0:	43db      	mvns	r3, r3
 800c8b2:	69ba      	ldr	r2, [r7, #24]
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	691a      	ldr	r2, [r3, #16]
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	f003 0307 	and.w	r3, r3, #7
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c8:	69ba      	ldr	r2, [r7, #24]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	08da      	lsrs	r2, r3, #3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	3208      	adds	r2, #8
 800c8d6:	69b9      	ldr	r1, [r7, #24]
 800c8d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ec:	43db      	mvns	r3, r3
 800c8ee:	69ba      	ldr	r2, [r7, #24]
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	f003 0203 	and.w	r2, r3, #3
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	005b      	lsls	r3, r3, #1
 800c900:	fa02 f303 	lsl.w	r3, r2, r3
 800c904:	69ba      	ldr	r2, [r7, #24]
 800c906:	4313      	orrs	r3, r2
 800c908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	69ba      	ldr	r2, [r7, #24]
 800c90e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 80be 	beq.w	800ca9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c91e:	4b66      	ldr	r3, [pc, #408]	; (800cab8 <HAL_GPIO_Init+0x324>)
 800c920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c922:	4a65      	ldr	r2, [pc, #404]	; (800cab8 <HAL_GPIO_Init+0x324>)
 800c924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c928:	6453      	str	r3, [r2, #68]	; 0x44
 800c92a:	4b63      	ldr	r3, [pc, #396]	; (800cab8 <HAL_GPIO_Init+0x324>)
 800c92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c92e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c936:	4a61      	ldr	r2, [pc, #388]	; (800cabc <HAL_GPIO_Init+0x328>)
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	089b      	lsrs	r3, r3, #2
 800c93c:	3302      	adds	r3, #2
 800c93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c942:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	f003 0303 	and.w	r3, r3, #3
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	220f      	movs	r2, #15
 800c94e:	fa02 f303 	lsl.w	r3, r2, r3
 800c952:	43db      	mvns	r3, r3
 800c954:	69ba      	ldr	r2, [r7, #24]
 800c956:	4013      	ands	r3, r2
 800c958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a58      	ldr	r2, [pc, #352]	; (800cac0 <HAL_GPIO_Init+0x32c>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d037      	beq.n	800c9d2 <HAL_GPIO_Init+0x23e>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a57      	ldr	r2, [pc, #348]	; (800cac4 <HAL_GPIO_Init+0x330>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d031      	beq.n	800c9ce <HAL_GPIO_Init+0x23a>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a56      	ldr	r2, [pc, #344]	; (800cac8 <HAL_GPIO_Init+0x334>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d02b      	beq.n	800c9ca <HAL_GPIO_Init+0x236>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a55      	ldr	r2, [pc, #340]	; (800cacc <HAL_GPIO_Init+0x338>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d025      	beq.n	800c9c6 <HAL_GPIO_Init+0x232>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a54      	ldr	r2, [pc, #336]	; (800cad0 <HAL_GPIO_Init+0x33c>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d01f      	beq.n	800c9c2 <HAL_GPIO_Init+0x22e>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a53      	ldr	r2, [pc, #332]	; (800cad4 <HAL_GPIO_Init+0x340>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d019      	beq.n	800c9be <HAL_GPIO_Init+0x22a>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a52      	ldr	r2, [pc, #328]	; (800cad8 <HAL_GPIO_Init+0x344>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d013      	beq.n	800c9ba <HAL_GPIO_Init+0x226>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a51      	ldr	r2, [pc, #324]	; (800cadc <HAL_GPIO_Init+0x348>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d00d      	beq.n	800c9b6 <HAL_GPIO_Init+0x222>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a50      	ldr	r2, [pc, #320]	; (800cae0 <HAL_GPIO_Init+0x34c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d007      	beq.n	800c9b2 <HAL_GPIO_Init+0x21e>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a4f      	ldr	r2, [pc, #316]	; (800cae4 <HAL_GPIO_Init+0x350>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d101      	bne.n	800c9ae <HAL_GPIO_Init+0x21a>
 800c9aa:	2309      	movs	r3, #9
 800c9ac:	e012      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9ae:	230a      	movs	r3, #10
 800c9b0:	e010      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9b2:	2308      	movs	r3, #8
 800c9b4:	e00e      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9b6:	2307      	movs	r3, #7
 800c9b8:	e00c      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9ba:	2306      	movs	r3, #6
 800c9bc:	e00a      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9be:	2305      	movs	r3, #5
 800c9c0:	e008      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9c2:	2304      	movs	r3, #4
 800c9c4:	e006      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	e004      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	e002      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e000      	b.n	800c9d4 <HAL_GPIO_Init+0x240>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	69fa      	ldr	r2, [r7, #28]
 800c9d6:	f002 0203 	and.w	r2, r2, #3
 800c9da:	0092      	lsls	r2, r2, #2
 800c9dc:	4093      	lsls	r3, r2
 800c9de:	69ba      	ldr	r2, [r7, #24]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c9e4:	4935      	ldr	r1, [pc, #212]	; (800cabc <HAL_GPIO_Init+0x328>)
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	089b      	lsrs	r3, r3, #2
 800c9ea:	3302      	adds	r3, #2
 800c9ec:	69ba      	ldr	r2, [r7, #24]
 800c9ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c9f2:	4b3d      	ldr	r3, [pc, #244]	; (800cae8 <HAL_GPIO_Init+0x354>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	43db      	mvns	r3, r3
 800c9fc:	69ba      	ldr	r2, [r7, #24]
 800c9fe:	4013      	ands	r3, r2
 800ca00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ca0e:	69ba      	ldr	r2, [r7, #24]
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	4313      	orrs	r3, r2
 800ca14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ca16:	4a34      	ldr	r2, [pc, #208]	; (800cae8 <HAL_GPIO_Init+0x354>)
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ca1c:	4b32      	ldr	r3, [pc, #200]	; (800cae8 <HAL_GPIO_Init+0x354>)
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	43db      	mvns	r3, r3
 800ca26:	69ba      	ldr	r2, [r7, #24]
 800ca28:	4013      	ands	r3, r2
 800ca2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d003      	beq.n	800ca40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ca38:	69ba      	ldr	r2, [r7, #24]
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ca40:	4a29      	ldr	r2, [pc, #164]	; (800cae8 <HAL_GPIO_Init+0x354>)
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ca46:	4b28      	ldr	r3, [pc, #160]	; (800cae8 <HAL_GPIO_Init+0x354>)
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	43db      	mvns	r3, r3
 800ca50:	69ba      	ldr	r2, [r7, #24]
 800ca52:	4013      	ands	r3, r2
 800ca54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d003      	beq.n	800ca6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ca62:	69ba      	ldr	r2, [r7, #24]
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ca6a:	4a1f      	ldr	r2, [pc, #124]	; (800cae8 <HAL_GPIO_Init+0x354>)
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ca70:	4b1d      	ldr	r3, [pc, #116]	; (800cae8 <HAL_GPIO_Init+0x354>)
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	43db      	mvns	r3, r3
 800ca7a:	69ba      	ldr	r2, [r7, #24]
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d003      	beq.n	800ca94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ca8c:	69ba      	ldr	r2, [r7, #24]
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ca94:	4a14      	ldr	r2, [pc, #80]	; (800cae8 <HAL_GPIO_Init+0x354>)
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	61fb      	str	r3, [r7, #28]
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	2b0f      	cmp	r3, #15
 800caa4:	f67f ae86 	bls.w	800c7b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800caa8:	bf00      	nop
 800caaa:	bf00      	nop
 800caac:	3724      	adds	r7, #36	; 0x24
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	40023800 	.word	0x40023800
 800cabc:	40013800 	.word	0x40013800
 800cac0:	40020000 	.word	0x40020000
 800cac4:	40020400 	.word	0x40020400
 800cac8:	40020800 	.word	0x40020800
 800cacc:	40020c00 	.word	0x40020c00
 800cad0:	40021000 	.word	0x40021000
 800cad4:	40021400 	.word	0x40021400
 800cad8:	40021800 	.word	0x40021800
 800cadc:	40021c00 	.word	0x40021c00
 800cae0:	40022000 	.word	0x40022000
 800cae4:	40022400 	.word	0x40022400
 800cae8:	40013c00 	.word	0x40013c00

0800caec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800caec:	b480      	push	{r7}
 800caee:	b087      	sub	sp, #28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800caf6:	2300      	movs	r3, #0
 800caf8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800cafe:	2300      	movs	r3, #0
 800cb00:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800cb02:	2300      	movs	r3, #0
 800cb04:	617b      	str	r3, [r7, #20]
 800cb06:	e0d9      	b.n	800ccbc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800cb08:	2201      	movs	r2, #1
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb10:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	4013      	ands	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	f040 80c9 	bne.w	800ccb6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800cb24:	4a6b      	ldr	r2, [pc, #428]	; (800ccd4 <HAL_GPIO_DeInit+0x1e8>)
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	089b      	lsrs	r3, r3, #2
 800cb2a:	3302      	adds	r3, #2
 800cb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb30:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f003 0303 	and.w	r3, r3, #3
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	220f      	movs	r2, #15
 800cb3c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	4013      	ands	r3, r2
 800cb44:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a63      	ldr	r2, [pc, #396]	; (800ccd8 <HAL_GPIO_DeInit+0x1ec>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d037      	beq.n	800cbbe <HAL_GPIO_DeInit+0xd2>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a62      	ldr	r2, [pc, #392]	; (800ccdc <HAL_GPIO_DeInit+0x1f0>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d031      	beq.n	800cbba <HAL_GPIO_DeInit+0xce>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a61      	ldr	r2, [pc, #388]	; (800cce0 <HAL_GPIO_DeInit+0x1f4>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d02b      	beq.n	800cbb6 <HAL_GPIO_DeInit+0xca>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a60      	ldr	r2, [pc, #384]	; (800cce4 <HAL_GPIO_DeInit+0x1f8>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d025      	beq.n	800cbb2 <HAL_GPIO_DeInit+0xc6>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a5f      	ldr	r2, [pc, #380]	; (800cce8 <HAL_GPIO_DeInit+0x1fc>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d01f      	beq.n	800cbae <HAL_GPIO_DeInit+0xc2>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a5e      	ldr	r2, [pc, #376]	; (800ccec <HAL_GPIO_DeInit+0x200>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d019      	beq.n	800cbaa <HAL_GPIO_DeInit+0xbe>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a5d      	ldr	r2, [pc, #372]	; (800ccf0 <HAL_GPIO_DeInit+0x204>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d013      	beq.n	800cba6 <HAL_GPIO_DeInit+0xba>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a5c      	ldr	r2, [pc, #368]	; (800ccf4 <HAL_GPIO_DeInit+0x208>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d00d      	beq.n	800cba2 <HAL_GPIO_DeInit+0xb6>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a5b      	ldr	r2, [pc, #364]	; (800ccf8 <HAL_GPIO_DeInit+0x20c>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d007      	beq.n	800cb9e <HAL_GPIO_DeInit+0xb2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a5a      	ldr	r2, [pc, #360]	; (800ccfc <HAL_GPIO_DeInit+0x210>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d101      	bne.n	800cb9a <HAL_GPIO_DeInit+0xae>
 800cb96:	2309      	movs	r3, #9
 800cb98:	e012      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cb9a:	230a      	movs	r3, #10
 800cb9c:	e010      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cb9e:	2308      	movs	r3, #8
 800cba0:	e00e      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cba2:	2307      	movs	r3, #7
 800cba4:	e00c      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cba6:	2306      	movs	r3, #6
 800cba8:	e00a      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cbaa:	2305      	movs	r3, #5
 800cbac:	e008      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cbae:	2304      	movs	r3, #4
 800cbb0:	e006      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	e004      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cbb6:	2302      	movs	r3, #2
 800cbb8:	e002      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <HAL_GPIO_DeInit+0xd4>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	697a      	ldr	r2, [r7, #20]
 800cbc2:	f002 0203 	and.w	r2, r2, #3
 800cbc6:	0092      	lsls	r2, r2, #2
 800cbc8:	4093      	lsls	r3, r2
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d132      	bne.n	800cc36 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cbd0:	4b4b      	ldr	r3, [pc, #300]	; (800cd00 <HAL_GPIO_DeInit+0x214>)
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	43db      	mvns	r3, r3
 800cbd8:	4949      	ldr	r1, [pc, #292]	; (800cd00 <HAL_GPIO_DeInit+0x214>)
 800cbda:	4013      	ands	r3, r2
 800cbdc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cbde:	4b48      	ldr	r3, [pc, #288]	; (800cd00 <HAL_GPIO_DeInit+0x214>)
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	43db      	mvns	r3, r3
 800cbe6:	4946      	ldr	r1, [pc, #280]	; (800cd00 <HAL_GPIO_DeInit+0x214>)
 800cbe8:	4013      	ands	r3, r2
 800cbea:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cbec:	4b44      	ldr	r3, [pc, #272]	; (800cd00 <HAL_GPIO_DeInit+0x214>)
 800cbee:	689a      	ldr	r2, [r3, #8]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	43db      	mvns	r3, r3
 800cbf4:	4942      	ldr	r1, [pc, #264]	; (800cd00 <HAL_GPIO_DeInit+0x214>)
 800cbf6:	4013      	ands	r3, r2
 800cbf8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cbfa:	4b41      	ldr	r3, [pc, #260]	; (800cd00 <HAL_GPIO_DeInit+0x214>)
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	43db      	mvns	r3, r3
 800cc02:	493f      	ldr	r1, [pc, #252]	; (800cd00 <HAL_GPIO_DeInit+0x214>)
 800cc04:	4013      	ands	r3, r2
 800cc06:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	f003 0303 	and.w	r3, r3, #3
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	220f      	movs	r2, #15
 800cc12:	fa02 f303 	lsl.w	r3, r2, r3
 800cc16:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800cc18:	4a2e      	ldr	r2, [pc, #184]	; (800ccd4 <HAL_GPIO_DeInit+0x1e8>)
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	089b      	lsrs	r3, r3, #2
 800cc1e:	3302      	adds	r3, #2
 800cc20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	43da      	mvns	r2, r3
 800cc28:	482a      	ldr	r0, [pc, #168]	; (800ccd4 <HAL_GPIO_DeInit+0x1e8>)
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	089b      	lsrs	r3, r3, #2
 800cc2e:	400a      	ands	r2, r1
 800cc30:	3302      	adds	r3, #2
 800cc32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	2103      	movs	r1, #3
 800cc40:	fa01 f303 	lsl.w	r3, r1, r3
 800cc44:	43db      	mvns	r3, r3
 800cc46:	401a      	ands	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	08da      	lsrs	r2, r3, #3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	3208      	adds	r2, #8
 800cc54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f003 0307 	and.w	r3, r3, #7
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	220f      	movs	r2, #15
 800cc62:	fa02 f303 	lsl.w	r3, r2, r3
 800cc66:	43db      	mvns	r3, r3
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	08d2      	lsrs	r2, r2, #3
 800cc6c:	4019      	ands	r1, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3208      	adds	r2, #8
 800cc72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	68da      	ldr	r2, [r3, #12]
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	2103      	movs	r1, #3
 800cc80:	fa01 f303 	lsl.w	r3, r1, r3
 800cc84:	43db      	mvns	r3, r3
 800cc86:	401a      	ands	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685a      	ldr	r2, [r3, #4]
 800cc90:	2101      	movs	r1, #1
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	fa01 f303 	lsl.w	r3, r1, r3
 800cc98:	43db      	mvns	r3, r3
 800cc9a:	401a      	ands	r2, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	689a      	ldr	r2, [r3, #8]
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	2103      	movs	r1, #3
 800ccaa:	fa01 f303 	lsl.w	r3, r1, r3
 800ccae:	43db      	mvns	r3, r3
 800ccb0:	401a      	ands	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	2b0f      	cmp	r3, #15
 800ccc0:	f67f af22 	bls.w	800cb08 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ccc4:	bf00      	nop
 800ccc6:	bf00      	nop
 800ccc8:	371c      	adds	r7, #28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	40013800 	.word	0x40013800
 800ccd8:	40020000 	.word	0x40020000
 800ccdc:	40020400 	.word	0x40020400
 800cce0:	40020800 	.word	0x40020800
 800cce4:	40020c00 	.word	0x40020c00
 800cce8:	40021000 	.word	0x40021000
 800ccec:	40021400 	.word	0x40021400
 800ccf0:	40021800 	.word	0x40021800
 800ccf4:	40021c00 	.word	0x40021c00
 800ccf8:	40022000 	.word	0x40022000
 800ccfc:	40022400 	.word	0x40022400
 800cd00:	40013c00 	.word	0x40013c00

0800cd04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	807b      	strh	r3, [r7, #2]
 800cd10:	4613      	mov	r3, r2
 800cd12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cd14:	787b      	ldrb	r3, [r7, #1]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d003      	beq.n	800cd22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cd1a:	887a      	ldrh	r2, [r7, #2]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800cd20:	e003      	b.n	800cd2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800cd22:	887b      	ldrh	r3, [r7, #2]
 800cd24:	041a      	lsls	r2, r3, #16
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	619a      	str	r2, [r3, #24]
}
 800cd2a:	bf00      	nop
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cd36:	b480      	push	{r7}
 800cd38:	b085      	sub	sp, #20
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	460b      	mov	r3, r1
 800cd40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cd48:	887a      	ldrh	r2, [r7, #2]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	041a      	lsls	r2, r3, #16
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	43d9      	mvns	r1, r3
 800cd54:	887b      	ldrh	r3, [r7, #2]
 800cd56:	400b      	ands	r3, r1
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	619a      	str	r2, [r3, #24]
}
 800cd5e:	bf00      	nop
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
	...

0800cd6c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e0bf      	b.n	800cefe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d106      	bne.n	800cd98 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7f5 fa80 	bl	8002298 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	699a      	ldr	r2, [r3, #24]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800cdae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6999      	ldr	r1, [r3, #24]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685a      	ldr	r2, [r3, #4]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cdc4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	430a      	orrs	r2, r1
 800cdd2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6899      	ldr	r1, [r3, #8]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	4b4a      	ldr	r3, [pc, #296]	; (800cf08 <HAL_LTDC_Init+0x19c>)
 800cde0:	400b      	ands	r3, r1
 800cde2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	695b      	ldr	r3, [r3, #20]
 800cde8:	041b      	lsls	r3, r3, #16
 800cdea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6899      	ldr	r1, [r3, #8]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	699a      	ldr	r2, [r3, #24]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	431a      	orrs	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	430a      	orrs	r2, r1
 800ce00:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68d9      	ldr	r1, [r3, #12]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	4b3e      	ldr	r3, [pc, #248]	; (800cf08 <HAL_LTDC_Init+0x19c>)
 800ce0e:	400b      	ands	r3, r1
 800ce10:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	69db      	ldr	r3, [r3, #28]
 800ce16:	041b      	lsls	r3, r3, #16
 800ce18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68d9      	ldr	r1, [r3, #12]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6a1a      	ldr	r2, [r3, #32]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	431a      	orrs	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	430a      	orrs	r2, r1
 800ce2e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6919      	ldr	r1, [r3, #16]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	4b33      	ldr	r3, [pc, #204]	; (800cf08 <HAL_LTDC_Init+0x19c>)
 800ce3c:	400b      	ands	r3, r1
 800ce3e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce44:	041b      	lsls	r3, r3, #16
 800ce46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6919      	ldr	r1, [r3, #16]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	431a      	orrs	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	430a      	orrs	r2, r1
 800ce5c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	6959      	ldr	r1, [r3, #20]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	4b27      	ldr	r3, [pc, #156]	; (800cf08 <HAL_LTDC_Init+0x19c>)
 800ce6a:	400b      	ands	r3, r1
 800ce6c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce72:	041b      	lsls	r3, r3, #16
 800ce74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6959      	ldr	r1, [r3, #20]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	431a      	orrs	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	430a      	orrs	r2, r1
 800ce8a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ce92:	021b      	lsls	r3, r3, #8
 800ce94:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ce9c:	041b      	lsls	r3, r3, #16
 800ce9e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ceae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800cec2:	431a      	orrs	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	430a      	orrs	r2, r1
 800ceca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f042 0206 	orr.w	r2, r2, #6
 800ceda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	699a      	ldr	r2, [r3, #24]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f042 0201 	orr.w	r2, r2, #1
 800ceea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	f000f800 	.word	0xf000f800

0800cf0c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf22:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f003 0304 	and.w	r3, r3, #4
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d023      	beq.n	800cf76 <HAL_LTDC_IRQHandler+0x6a>
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	f003 0304 	and.w	r3, r3, #4
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d01e      	beq.n	800cf76 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f022 0204 	bic.w	r2, r2, #4
 800cf46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2204      	movs	r2, #4
 800cf4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cf56:	f043 0201 	orr.w	r2, r3, #1
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2204      	movs	r2, #4
 800cf64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 f86f 	bl	800d054 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f003 0302 	and.w	r3, r3, #2
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d023      	beq.n	800cfc8 <HAL_LTDC_IRQHandler+0xbc>
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	f003 0302 	and.w	r3, r3, #2
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d01e      	beq.n	800cfc8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f022 0202 	bic.w	r2, r2, #2
 800cf98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2202      	movs	r2, #2
 800cfa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cfa8:	f043 0202 	orr.w	r2, r3, #2
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2204      	movs	r2, #4
 800cfb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 f846 	bl	800d054 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d01b      	beq.n	800d00a <HAL_LTDC_IRQHandler+0xfe>
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	f003 0301 	and.w	r3, r3, #1
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d016      	beq.n	800d00a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f022 0201 	bic.w	r2, r2, #1
 800cfea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2201      	movs	r2, #1
 800cff2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7f8 fa8d 	bl	8005524 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f003 0308 	and.w	r3, r3, #8
 800d010:	2b00      	cmp	r3, #0
 800d012:	d01b      	beq.n	800d04c <HAL_LTDC_IRQHandler+0x140>
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	f003 0308 	and.w	r3, r3, #8
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d016      	beq.n	800d04c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f022 0208 	bic.w	r2, r2, #8
 800d02c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2208      	movs	r2, #8
 800d034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f80e 	bl	800d068 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800d04c:	bf00      	nop
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d07c:	b5b0      	push	{r4, r5, r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d101      	bne.n	800d096 <HAL_LTDC_ConfigLayer+0x1a>
 800d092:	2302      	movs	r3, #2
 800d094:	e02c      	b.n	800d0f0 <HAL_LTDC_ConfigLayer+0x74>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2201      	movs	r2, #1
 800d09a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2202      	movs	r2, #2
 800d0a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d0a6:	68fa      	ldr	r2, [r7, #12]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2134      	movs	r1, #52	; 0x34
 800d0ac:	fb01 f303 	mul.w	r3, r1, r3
 800d0b0:	4413      	add	r3, r2
 800d0b2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	4614      	mov	r4, r2
 800d0ba:	461d      	mov	r5, r3
 800d0bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	68b9      	ldr	r1, [r7, #8]
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f000 f849 	bl	800d168 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bdb0      	pop	{r4, r5, r7, pc}

0800d0f8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d101      	bne.n	800d110 <HAL_LTDC_ProgramLineEvent+0x18>
 800d10c:	2302      	movs	r3, #2
 800d10e:	e023      	b.n	800d158 <HAL_LTDC_ProgramLineEvent+0x60>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2202      	movs	r2, #2
 800d11c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f022 0201 	bic.w	r2, r2, #1
 800d12e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800d130:	4a0c      	ldr	r2, [pc, #48]	; (800d164 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f042 0201 	orr.w	r2, r2, #1
 800d144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr
 800d164:	40016800 	.word	0x40016800

0800d168 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d168:	b480      	push	{r7}
 800d16a:	b089      	sub	sp, #36	; 0x24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	0c1b      	lsrs	r3, r3, #16
 800d180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d184:	4413      	add	r3, r2
 800d186:	041b      	lsls	r3, r3, #16
 800d188:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	01db      	lsls	r3, r3, #7
 800d194:	4413      	add	r3, r2
 800d196:	3384      	adds	r3, #132	; 0x84
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	6812      	ldr	r2, [r2, #0]
 800d19e:	4611      	mov	r1, r2
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	01d2      	lsls	r2, r2, #7
 800d1a4:	440a      	add	r2, r1
 800d1a6:	3284      	adds	r2, #132	; 0x84
 800d1a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d1ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	0c1b      	lsrs	r3, r3, #16
 800d1ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d1be:	4413      	add	r3, r2
 800d1c0:	1c5a      	adds	r2, r3, #1
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	01db      	lsls	r3, r3, #7
 800d1cc:	440b      	add	r3, r1
 800d1ce:	3384      	adds	r3, #132	; 0x84
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	68da      	ldr	r2, [r3, #12]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1e6:	4413      	add	r3, r2
 800d1e8:	041b      	lsls	r3, r3, #16
 800d1ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	01db      	lsls	r3, r3, #7
 800d1f6:	4413      	add	r3, r2
 800d1f8:	3384      	adds	r3, #132	; 0x84
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	6812      	ldr	r2, [r2, #0]
 800d200:	4611      	mov	r1, r2
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	01d2      	lsls	r2, r2, #7
 800d206:	440a      	add	r2, r1
 800d208:	3284      	adds	r2, #132	; 0x84
 800d20a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d20e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	689a      	ldr	r2, [r3, #8]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d21e:	4413      	add	r3, r2
 800d220:	1c5a      	adds	r2, r3, #1
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4619      	mov	r1, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	01db      	lsls	r3, r3, #7
 800d22c:	440b      	add	r3, r1
 800d22e:	3384      	adds	r3, #132	; 0x84
 800d230:	4619      	mov	r1, r3
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	4313      	orrs	r3, r2
 800d236:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	461a      	mov	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	01db      	lsls	r3, r3, #7
 800d242:	4413      	add	r3, r2
 800d244:	3384      	adds	r3, #132	; 0x84
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	6812      	ldr	r2, [r2, #0]
 800d24c:	4611      	mov	r1, r2
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	01d2      	lsls	r2, r2, #7
 800d252:	440a      	add	r2, r1
 800d254:	3284      	adds	r2, #132	; 0x84
 800d256:	f023 0307 	bic.w	r3, r3, #7
 800d25a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	461a      	mov	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	01db      	lsls	r3, r3, #7
 800d266:	4413      	add	r3, r2
 800d268:	3384      	adds	r3, #132	; 0x84
 800d26a:	461a      	mov	r2, r3
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d278:	021b      	lsls	r3, r3, #8
 800d27a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d282:	041b      	lsls	r3, r3, #16
 800d284:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	061b      	lsls	r3, r3, #24
 800d28c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	461a      	mov	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	01db      	lsls	r3, r3, #7
 800d298:	4413      	add	r3, r2
 800d29a:	3384      	adds	r3, #132	; 0x84
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	01db      	lsls	r3, r3, #7
 800d2a8:	4413      	add	r3, r2
 800d2aa:	3384      	adds	r3, #132	; 0x84
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	431a      	orrs	r2, r3
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	431a      	orrs	r2, r3
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	01db      	lsls	r3, r3, #7
 800d2cc:	440b      	add	r3, r1
 800d2ce:	3384      	adds	r3, #132	; 0x84
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	461a      	mov	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	01db      	lsls	r3, r3, #7
 800d2e2:	4413      	add	r3, r2
 800d2e4:	3384      	adds	r3, #132	; 0x84
 800d2e6:	695b      	ldr	r3, [r3, #20]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	6812      	ldr	r2, [r2, #0]
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	01d2      	lsls	r2, r2, #7
 800d2f2:	440a      	add	r2, r1
 800d2f4:	3284      	adds	r2, #132	; 0x84
 800d2f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	461a      	mov	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	01db      	lsls	r3, r3, #7
 800d306:	4413      	add	r3, r2
 800d308:	3384      	adds	r3, #132	; 0x84
 800d30a:	461a      	mov	r2, r3
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	461a      	mov	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	01db      	lsls	r3, r3, #7
 800d31c:	4413      	add	r3, r2
 800d31e:	3384      	adds	r3, #132	; 0x84
 800d320:	69da      	ldr	r2, [r3, #28]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4619      	mov	r1, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	01db      	lsls	r3, r3, #7
 800d32c:	440b      	add	r3, r1
 800d32e:	3384      	adds	r3, #132	; 0x84
 800d330:	4619      	mov	r1, r3
 800d332:	4b58      	ldr	r3, [pc, #352]	; (800d494 <LTDC_SetConfig+0x32c>)
 800d334:	4013      	ands	r3, r2
 800d336:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	69da      	ldr	r2, [r3, #28]
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	6a1b      	ldr	r3, [r3, #32]
 800d340:	68f9      	ldr	r1, [r7, #12]
 800d342:	6809      	ldr	r1, [r1, #0]
 800d344:	4608      	mov	r0, r1
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	01c9      	lsls	r1, r1, #7
 800d34a:	4401      	add	r1, r0
 800d34c:	3184      	adds	r1, #132	; 0x84
 800d34e:	4313      	orrs	r3, r2
 800d350:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	461a      	mov	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	01db      	lsls	r3, r3, #7
 800d35c:	4413      	add	r3, r2
 800d35e:	3384      	adds	r3, #132	; 0x84
 800d360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	01db      	lsls	r3, r3, #7
 800d36c:	4413      	add	r3, r2
 800d36e:	3384      	adds	r3, #132	; 0x84
 800d370:	461a      	mov	r2, r3
 800d372:	2300      	movs	r3, #0
 800d374:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	461a      	mov	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	01db      	lsls	r3, r3, #7
 800d380:	4413      	add	r3, r2
 800d382:	3384      	adds	r3, #132	; 0x84
 800d384:	461a      	mov	r2, r3
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d102      	bne.n	800d39a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800d394:	2304      	movs	r3, #4
 800d396:	61fb      	str	r3, [r7, #28]
 800d398:	e01b      	b.n	800d3d2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d102      	bne.n	800d3a8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	61fb      	str	r3, [r7, #28]
 800d3a6:	e014      	b.n	800d3d2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	2b04      	cmp	r3, #4
 800d3ae:	d00b      	beq.n	800d3c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d007      	beq.n	800d3c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d3bc:	2b03      	cmp	r3, #3
 800d3be:	d003      	beq.n	800d3c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d3c4:	2b07      	cmp	r3, #7
 800d3c6:	d102      	bne.n	800d3ce <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	61fb      	str	r3, [r7, #28]
 800d3cc:	e001      	b.n	800d3d2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	01db      	lsls	r3, r3, #7
 800d3dc:	4413      	add	r3, r2
 800d3de:	3384      	adds	r3, #132	; 0x84
 800d3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	6812      	ldr	r2, [r2, #0]
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	01d2      	lsls	r2, r2, #7
 800d3ec:	440a      	add	r2, r1
 800d3ee:	3284      	adds	r2, #132	; 0x84
 800d3f0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800d3f4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3fa:	69fa      	ldr	r2, [r7, #28]
 800d3fc:	fb02 f303 	mul.w	r3, r2, r3
 800d400:	041a      	lsls	r2, r3, #16
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	6859      	ldr	r1, [r3, #4]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	1acb      	subs	r3, r1, r3
 800d40c:	69f9      	ldr	r1, [r7, #28]
 800d40e:	fb01 f303 	mul.w	r3, r1, r3
 800d412:	3303      	adds	r3, #3
 800d414:	68f9      	ldr	r1, [r7, #12]
 800d416:	6809      	ldr	r1, [r1, #0]
 800d418:	4608      	mov	r0, r1
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	01c9      	lsls	r1, r1, #7
 800d41e:	4401      	add	r1, r0
 800d420:	3184      	adds	r1, #132	; 0x84
 800d422:	4313      	orrs	r3, r2
 800d424:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	461a      	mov	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	01db      	lsls	r3, r3, #7
 800d430:	4413      	add	r3, r2
 800d432:	3384      	adds	r3, #132	; 0x84
 800d434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4619      	mov	r1, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	01db      	lsls	r3, r3, #7
 800d440:	440b      	add	r3, r1
 800d442:	3384      	adds	r3, #132	; 0x84
 800d444:	4619      	mov	r1, r3
 800d446:	4b14      	ldr	r3, [pc, #80]	; (800d498 <LTDC_SetConfig+0x330>)
 800d448:	4013      	ands	r3, r2
 800d44a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	01db      	lsls	r3, r3, #7
 800d456:	4413      	add	r3, r2
 800d458:	3384      	adds	r3, #132	; 0x84
 800d45a:	461a      	mov	r2, r3
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	01db      	lsls	r3, r3, #7
 800d46c:	4413      	add	r3, r2
 800d46e:	3384      	adds	r3, #132	; 0x84
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	6812      	ldr	r2, [r2, #0]
 800d476:	4611      	mov	r1, r2
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	01d2      	lsls	r2, r2, #7
 800d47c:	440a      	add	r2, r1
 800d47e:	3284      	adds	r2, #132	; 0x84
 800d480:	f043 0301 	orr.w	r3, r3, #1
 800d484:	6013      	str	r3, [r2, #0]
}
 800d486:	bf00      	nop
 800d488:	3724      	adds	r7, #36	; 0x24
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	fffff8f8 	.word	0xfffff8f8
 800d498:	fffff800 	.word	0xfffff800

0800d49c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d4a6:	4b23      	ldr	r3, [pc, #140]	; (800d534 <HAL_PWREx_EnableOverDrive+0x98>)
 800d4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4aa:	4a22      	ldr	r2, [pc, #136]	; (800d534 <HAL_PWREx_EnableOverDrive+0x98>)
 800d4ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4b0:	6413      	str	r3, [r2, #64]	; 0x40
 800d4b2:	4b20      	ldr	r3, [pc, #128]	; (800d534 <HAL_PWREx_EnableOverDrive+0x98>)
 800d4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d4be:	4b1e      	ldr	r3, [pc, #120]	; (800d538 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a1d      	ldr	r2, [pc, #116]	; (800d538 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d4c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d4ca:	f7fd f811 	bl	800a4f0 <HAL_GetTick>
 800d4ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d4d0:	e009      	b.n	800d4e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d4d2:	f7fd f80d 	bl	800a4f0 <HAL_GetTick>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	1ad3      	subs	r3, r2, r3
 800d4dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4e0:	d901      	bls.n	800d4e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d4e2:	2303      	movs	r3, #3
 800d4e4:	e022      	b.n	800d52c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d4e6:	4b14      	ldr	r3, [pc, #80]	; (800d538 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4f2:	d1ee      	bne.n	800d4d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d4f4:	4b10      	ldr	r3, [pc, #64]	; (800d538 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a0f      	ldr	r2, [pc, #60]	; (800d538 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d4fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d500:	f7fc fff6 	bl	800a4f0 <HAL_GetTick>
 800d504:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d506:	e009      	b.n	800d51c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d508:	f7fc fff2 	bl	800a4f0 <HAL_GetTick>
 800d50c:	4602      	mov	r2, r0
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	1ad3      	subs	r3, r2, r3
 800d512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d516:	d901      	bls.n	800d51c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d518:	2303      	movs	r3, #3
 800d51a:	e007      	b.n	800d52c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d51c:	4b06      	ldr	r3, [pc, #24]	; (800d538 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d528:	d1ee      	bne.n	800d508 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	40023800 	.word	0x40023800
 800d538:	40007000 	.word	0x40007000

0800d53c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af02      	add	r7, sp, #8
 800d542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d544:	f7fc ffd4 	bl	800a4f0 <HAL_GetTick>
 800d548:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d101      	bne.n	800d554 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800d550:	2301      	movs	r3, #1
 800d552:	e067      	b.n	800d624 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10b      	bne.n	800d578 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7f5 f955 	bl	8002818 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800d56e:	f241 3188 	movw	r1, #5000	; 0x1388
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 fcf2 	bl	800df5c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	3b01      	subs	r3, #1
 800d588:	021a      	lsls	r2, r3, #8
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	430a      	orrs	r2, r1
 800d590:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	2120      	movs	r1, #32
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 fd1d 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800d5a8:	7afb      	ldrb	r3, [r7, #11]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d135      	bne.n	800d61a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	4b1d      	ldr	r3, [pc, #116]	; (800d62c <HAL_QSPI_Init+0xf0>)
 800d5b6:	4013      	ands	r3, r2
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	6852      	ldr	r2, [r2, #4]
 800d5bc:	0611      	lsls	r1, r2, #24
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	68d2      	ldr	r2, [r2, #12]
 800d5c2:	4311      	orrs	r1, r2
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	69d2      	ldr	r2, [r2, #28]
 800d5c8:	4311      	orrs	r1, r2
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	6a12      	ldr	r2, [r2, #32]
 800d5ce:	4311      	orrs	r1, r2
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	6812      	ldr	r2, [r2, #0]
 800d5d4:	430b      	orrs	r3, r1
 800d5d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	685a      	ldr	r2, [r3, #4]
 800d5de:	4b14      	ldr	r3, [pc, #80]	; (800d630 <HAL_QSPI_Init+0xf4>)
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	6912      	ldr	r2, [r2, #16]
 800d5e6:	0411      	lsls	r1, r2, #16
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	6952      	ldr	r2, [r2, #20]
 800d5ec:	4311      	orrs	r1, r2
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	6992      	ldr	r2, [r2, #24]
 800d5f2:	4311      	orrs	r1, r2
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	6812      	ldr	r2, [r2, #0]
 800d5f8:	430b      	orrs	r3, r1
 800d5fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f042 0201 	orr.w	r2, r2, #1
 800d60a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d622:	7afb      	ldrb	r3, [r7, #11]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	00ffff2f 	.word	0x00ffff2f
 800d630:	ffe0f8fe 	.word	0xffe0f8fe

0800d634 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d101      	bne.n	800d646 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d642:	2301      	movs	r3, #1
 800d644:	e016      	b.n	800d674 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f022 0201 	bic.w	r2, r2, #1
 800d654:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7f5 f968 	bl	800292c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b086      	sub	sp, #24
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	f003 0304 	and.w	r3, r3, #4
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d064      	beq.n	800d768 <HAL_QSPI_IRQHandler+0xec>
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d05f      	beq.n	800d768 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3320      	adds	r3, #32
 800d6ae:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	2b12      	cmp	r3, #18
 800d6ba:	d125      	bne.n	800d708 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800d6bc:	e01c      	b.n	800d6f8 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00f      	beq.n	800d6e6 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ca:	781a      	ldrb	r2, [r3, #0]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d4:	1c5a      	adds	r2, r3, #1
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6de:	1e5a      	subs	r2, r3, #1
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	62da      	str	r2, [r3, #44]	; 0x2c
 800d6e4:	e008      	b.n	800d6f8 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d6f4:	601a      	str	r2, [r3, #0]
          break;
 800d6f6:	e033      	b.n	800d760 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	f003 0304 	and.w	r3, r3, #4
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1db      	bne.n	800d6be <HAL_QSPI_IRQHandler+0x42>
 800d706:	e02b      	b.n	800d760 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	2b22      	cmp	r3, #34	; 0x22
 800d712:	d125      	bne.n	800d760 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800d714:	e01d      	b.n	800d752 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d010      	beq.n	800d740 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	7812      	ldrb	r2, [r2, #0]
 800d726:	b2d2      	uxtb	r2, r2
 800d728:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d72e:	1c5a      	adds	r2, r3, #1
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d738:	1e5a      	subs	r2, r3, #1
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	639a      	str	r2, [r3, #56]	; 0x38
 800d73e:	e008      	b.n	800d752 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d74e:	601a      	str	r2, [r3, #0]
          break;
 800d750:	e006      	b.n	800d760 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f003 0304 	and.w	r3, r3, #4
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1da      	bne.n	800d716 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fbdd 	bl	800df20 <HAL_QSPI_FifoThresholdCallback>
 800d766:	e13c      	b.n	800d9e2 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	f003 0302 	and.w	r3, r3, #2
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 80b0 	beq.w	800d8d4 <HAL_QSPI_IRQHandler+0x258>
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 80aa 	beq.w	800d8d4 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2202      	movs	r2, #2
 800d786:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800d796:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	2b12      	cmp	r3, #18
 800d7a2:	d120      	bne.n	800d7e6 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f003 0304 	and.w	r3, r3, #4
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d011      	beq.n	800d7d6 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f022 0204 	bic.w	r2, r2, #4
 800d7c0:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f022 0201 	bic.w	r2, r2, #1
 800d7d4:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 fb94 	bl	800df0c <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d7e4:	e0fa      	b.n	800d9dc <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	2b22      	cmp	r3, #34	; 0x22
 800d7f0:	d143      	bne.n	800d87a <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 0304 	and.w	r3, r3, #4
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d012      	beq.n	800d826 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f022 0204 	bic.w	r2, r2, #4
 800d80e:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f022 0201 	bic.w	r2, r2, #1
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	e021      	b.n	800d86a <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	3320      	adds	r3, #32
 800d82c:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800d82e:	e013      	b.n	800d858 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d834:	2b00      	cmp	r3, #0
 800d836:	d017      	beq.n	800d868 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	7812      	ldrb	r2, [r2, #0]
 800d840:	b2d2      	uxtb	r2, r2
 800d842:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d848:	1c5a      	adds	r2, r3, #1
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d852:	1e5a      	subs	r2, r3, #1
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1e4      	bne.n	800d830 <HAL_QSPI_IRQHandler+0x1b4>
 800d866:	e000      	b.n	800d86a <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800d868:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 fb40 	bl	800def8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d878:	e0b0      	b.n	800d9dc <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b02      	cmp	r3, #2
 800d884:	d107      	bne.n	800d896 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fb28 	bl	800dee4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d894:	e0a2      	b.n	800d9dc <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	2b08      	cmp	r3, #8
 800d8a0:	f040 809c 	bne.w	800d9dc <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	695a      	ldr	r2, [r3, #20]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800d8b2:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d103      	bne.n	800d8cc <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 fb03 	bl	800ded0 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d8ca:	e087      	b.n	800d9dc <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 faf5 	bl	800debc <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d8d2:	e083      	b.n	800d9dc <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	f003 0308 	and.w	r3, r3, #8
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d01f      	beq.n	800d91e <HAL_QSPI_IRQHandler+0x2a2>
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d01a      	beq.n	800d91e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2208      	movs	r2, #8
 800d8ee:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00b      	beq.n	800d916 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800d90c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2201      	movs	r2, #1
 800d912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fb0c 	bl	800df34 <HAL_QSPI_StatusMatchCallback>
 800d91c:	e061      	b.n	800d9e2 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	2b00      	cmp	r3, #0
 800d926:	d047      	beq.n	800d9b8 <HAL_QSPI_IRQHandler+0x33c>
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d042      	beq.n	800d9b8 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2201      	movs	r2, #1
 800d938:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800d948:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d94e:	f043 0202 	orr.w	r2, r3, #2
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f003 0304 	and.w	r3, r3, #4
 800d960:	2b00      	cmp	r3, #0
 800d962:	d021      	beq.n	800d9a8 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f022 0204 	bic.w	r2, r2, #4
 800d972:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d978:	4a1c      	ldr	r2, [pc, #112]	; (800d9ec <HAL_QSPI_IRQHandler+0x370>)
 800d97a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d980:	4618      	mov	r0, r3
 800d982:	f7fe fa73 	bl	800be6c <HAL_DMA_Abort_IT>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d029      	beq.n	800d9e0 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d990:	f043 0204 	orr.w	r2, r3, #4
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fa8b 	bl	800debc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d9a6:	e01b      	b.n	800d9e0 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fa83 	bl	800debc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d9b6:	e013      	b.n	800d9e0 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	f003 0310 	and.w	r3, r3, #16
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00f      	beq.n	800d9e2 <HAL_QSPI_IRQHandler+0x366>
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00a      	beq.n	800d9e2 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2210      	movs	r2, #16
 800d9d2:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fab7 	bl	800df48 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800d9da:	e002      	b.n	800d9e2 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800d9dc:	bf00      	nop
 800d9de:	e000      	b.n	800d9e2 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d9e0:	bf00      	nop
}
 800d9e2:	bf00      	nop
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	0800df79 	.word	0x0800df79

0800d9f0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b088      	sub	sp, #32
 800d9f4:	af02      	add	r7, sp, #8
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d9fc:	f7fc fd78 	bl	800a4f0 <HAL_GetTick>
 800da00:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d101      	bne.n	800da12 <HAL_QSPI_Command+0x22>
 800da0e:	2302      	movs	r3, #2
 800da10:	e048      	b.n	800daa4 <HAL_QSPI_Command+0xb4>
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b01      	cmp	r3, #1
 800da24:	d137      	bne.n	800da96 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2200      	movs	r2, #0
 800da2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2202      	movs	r2, #2
 800da30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	2200      	movs	r2, #0
 800da3c:	2120      	movs	r1, #32
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f000 facd 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800da44:	4603      	mov	r3, r0
 800da46:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800da48:	7dfb      	ldrb	r3, [r7, #23]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d125      	bne.n	800da9a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800da4e:	2200      	movs	r2, #0
 800da50:	68b9      	ldr	r1, [r7, #8]
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	f000 fafa 	bl	800e04c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d115      	bne.n	800da8c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	2201      	movs	r2, #1
 800da68:	2102      	movs	r1, #2
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f000 fab7 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800da70:	4603      	mov	r3, r0
 800da72:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800da74:	7dfb      	ldrb	r3, [r7, #23]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d10f      	bne.n	800da9a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2202      	movs	r2, #2
 800da80:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2201      	movs	r2, #1
 800da86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da8a:	e006      	b.n	800da9a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da94:	e001      	b.n	800da9a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800da96:	2302      	movs	r3, #2
 800da98:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800daa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3718      	adds	r7, #24
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b08a      	sub	sp, #40	; 0x28
 800dab0:	af02      	add	r7, sp, #8
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dab8:	2300      	movs	r3, #0
 800daba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800dabc:	f7fc fd18 	bl	800a4f0 <HAL_GetTick>
 800dac0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	3320      	adds	r3, #32
 800dac8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d101      	bne.n	800dada <HAL_QSPI_Transmit+0x2e>
 800dad6:	2302      	movs	r3, #2
 800dad8:	e076      	b.n	800dbc8 <HAL_QSPI_Transmit+0x11c>
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b01      	cmp	r3, #1
 800daec:	d165      	bne.n	800dbba <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d056      	beq.n	800dba8 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2212      	movs	r2, #18
 800dafe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	691b      	ldr	r3, [r3, #16]
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	695a      	ldr	r2, [r3, #20]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800db2e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800db30:	e01b      	b.n	800db6a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	2201      	movs	r2, #1
 800db3a:	2104      	movs	r1, #4
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f000 fa4e 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800db42:	4603      	mov	r3, r0
 800db44:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800db46:	7ffb      	ldrb	r3, [r7, #31]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d113      	bne.n	800db74 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db50:	781a      	ldrb	r2, [r3, #0]
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db64:	1e5a      	subs	r2, r3, #1
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d1df      	bne.n	800db32 <HAL_QSPI_Transmit+0x86>
 800db72:	e000      	b.n	800db76 <HAL_QSPI_Transmit+0xca>
          break;
 800db74:	bf00      	nop
      }

      if (status == HAL_OK)
 800db76:	7ffb      	ldrb	r3, [r7, #31]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d110      	bne.n	800db9e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	2201      	movs	r2, #1
 800db84:	2102      	movs	r1, #2
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f000 fa29 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800db8c:	4603      	mov	r3, r0
 800db8e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800db90:	7ffb      	ldrb	r3, [r7, #31]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d103      	bne.n	800db9e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2202      	movs	r2, #2
 800db9c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2201      	movs	r2, #1
 800dba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dba6:	e00a      	b.n	800dbbe <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbac:	f043 0208 	orr.w	r2, r3, #8
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	77fb      	strb	r3, [r7, #31]
 800dbb8:	e001      	b.n	800dbbe <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800dbba:	2302      	movs	r3, #2
 800dbbc:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800dbc6:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3720      	adds	r7, #32
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b08a      	sub	sp, #40	; 0x28
 800dbd4:	af02      	add	r7, sp, #8
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800dbe0:	f7fc fc86 	bl	800a4f0 <HAL_GetTick>
 800dbe4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	3320      	adds	r3, #32
 800dbf4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d101      	bne.n	800dc06 <HAL_QSPI_Receive+0x36>
 800dc02:	2302      	movs	r3, #2
 800dc04:	e07d      	b.n	800dd02 <HAL_QSPI_Receive+0x132>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d16c      	bne.n	800dcf4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d05d      	beq.n	800dce2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2222      	movs	r2, #34	; 0x22
 800dc2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	1c5a      	adds	r2, r3, #1
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	691b      	ldr	r3, [r3, #16]
 800dc40:	1c5a      	adds	r2, r3, #1
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	68ba      	ldr	r2, [r7, #8]
 800dc4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	695b      	ldr	r3, [r3, #20]
 800dc52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800dc5e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	697a      	ldr	r2, [r7, #20]
 800dc66:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800dc68:	e01c      	b.n	800dca4 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	2201      	movs	r2, #1
 800dc72:	2106      	movs	r1, #6
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f000 f9b2 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800dc7e:	7ffb      	ldrb	r3, [r7, #31]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d114      	bne.n	800dcae <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc88:	693a      	ldr	r2, [r7, #16]
 800dc8a:	7812      	ldrb	r2, [r2, #0]
 800dc8c:	b2d2      	uxtb	r2, r2
 800dc8e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc94:	1c5a      	adds	r2, r3, #1
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9e:	1e5a      	subs	r2, r3, #1
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1de      	bne.n	800dc6a <HAL_QSPI_Receive+0x9a>
 800dcac:	e000      	b.n	800dcb0 <HAL_QSPI_Receive+0xe0>
          break;
 800dcae:	bf00      	nop
      }

      if (status == HAL_OK)
 800dcb0:	7ffb      	ldrb	r3, [r7, #31]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d110      	bne.n	800dcd8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	2102      	movs	r1, #2
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f000 f98c 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800dcca:	7ffb      	ldrb	r3, [r7, #31]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d103      	bne.n	800dcd8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2202      	movs	r2, #2
 800dcd6:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dce0:	e00a      	b.n	800dcf8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dce6:	f043 0208 	orr.w	r2, r3, #8
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	77fb      	strb	r3, [r7, #31]
 800dcf2:	e001      	b.n	800dcf8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800dd00:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3720      	adds	r7, #32
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b088      	sub	sp, #32
 800dd0e:	af02      	add	r7, sp, #8
 800dd10:	60f8      	str	r0, [r7, #12]
 800dd12:	60b9      	str	r1, [r7, #8]
 800dd14:	607a      	str	r2, [r7, #4]
 800dd16:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800dd18:	f7fc fbea 	bl	800a4f0 <HAL_GetTick>
 800dd1c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d101      	bne.n	800dd2e <HAL_QSPI_AutoPolling+0x24>
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	e060      	b.n	800ddf0 <HAL_QSPI_AutoPolling+0xe6>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2201      	movs	r2, #1
 800dd32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d14f      	bne.n	800dde2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2200      	movs	r2, #0
 800dd46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2242      	movs	r2, #66	; 0x42
 800dd4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	2200      	movs	r2, #0
 800dd58:	2120      	movs	r1, #32
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f000 f93f 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800dd60:	4603      	mov	r3, r0
 800dd62:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800dd64:	7dfb      	ldrb	r3, [r7, #23]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d13d      	bne.n	800dde6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	6812      	ldr	r2, [r2, #0]
 800dd72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	6852      	ldr	r2, [r2, #4]
 800dd7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	6892      	ldr	r2, [r2, #8]
 800dd86:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	431a      	orrs	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800dda0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68da      	ldr	r2, [r3, #12]
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ddaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ddae:	68b9      	ldr	r1, [r7, #8]
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f000 f94b 	bl	800e04c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	2108      	movs	r1, #8
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f000 f90c 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10a      	bne.n	800dde6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2208      	movs	r2, #8
 800ddd6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dde0:	e001      	b.n	800dde6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800dde2:	2302      	movs	r3, #2
 800dde4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ddee:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3718      	adds	r7, #24
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af02      	add	r7, sp, #8
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800de04:	f7fc fb74 	bl	800a4f0 <HAL_GetTick>
 800de08:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b01      	cmp	r3, #1
 800de14:	d101      	bne.n	800de1a <HAL_QSPI_MemoryMapped+0x22>
 800de16:	2302      	movs	r3, #2
 800de18:	e04c      	b.n	800deb4 <HAL_QSPI_MemoryMapped+0xbc>
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d13b      	bne.n	800dea6 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2200      	movs	r2, #0
 800de32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2282      	movs	r2, #130	; 0x82
 800de38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	2200      	movs	r2, #0
 800de46:	2120      	movs	r1, #32
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f000 f8c8 	bl	800dfde <QSPI_WaitFlagStateUntilTimeout>
 800de4e:	4603      	mov	r3, r0
 800de50:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800de52:	7dfb      	ldrb	r3, [r7, #23]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d128      	bne.n	800deaa <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f023 0108 	bic.w	r1, r3, #8
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	685a      	ldr	r2, [r3, #4]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	430a      	orrs	r2, r1
 800de6c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	2b08      	cmp	r3, #8
 800de74:	d110      	bne.n	800de98 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	6812      	ldr	r2, [r2, #0]
 800de7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2210      	movs	r2, #16
 800de86:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800de96:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800de98:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800de9c:	68b9      	ldr	r1, [r7, #8]
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f000 f8d4 	bl	800e04c <QSPI_Config>
 800dea4:	e001      	b.n	800deaa <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800dea6:	2302      	movs	r3, #2
 800dea8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800deb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3718      	adds	r7, #24
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800ded8:	bf00      	nop
 800deda:	370c      	adds	r7, #12
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800deec:	bf00      	nop
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800df14:	bf00      	nop
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	683a      	ldr	r2, [r7, #0]
 800df6a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800df6c:	bf00      	nop
 800df6e:	370c      	adds	r7, #12
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df84:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2200      	movs	r2, #0
 800df8a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2200      	movs	r2, #0
 800df90:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b08      	cmp	r3, #8
 800df9c:	d114      	bne.n	800dfc8 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800dfb4:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f042 0202 	orr.w	r2, r2, #2
 800dfc4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800dfc6:	e006      	b.n	800dfd6 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f7ff ff73 	bl	800debc <HAL_QSPI_ErrorCallback>
}
 800dfd6:	bf00      	nop
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	60b9      	str	r1, [r7, #8]
 800dfe8:	603b      	str	r3, [r7, #0]
 800dfea:	4613      	mov	r3, r2
 800dfec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800dfee:	e01a      	b.n	800e026 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff6:	d016      	beq.n	800e026 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dff8:	f7fc fa7a 	bl	800a4f0 <HAL_GetTick>
 800dffc:	4602      	mov	r2, r0
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	69ba      	ldr	r2, [r7, #24]
 800e004:	429a      	cmp	r2, r3
 800e006:	d302      	bcc.n	800e00e <QSPI_WaitFlagStateUntilTimeout+0x30>
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10b      	bne.n	800e026 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2204      	movs	r2, #4
 800e012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e01a:	f043 0201 	orr.w	r2, r3, #1
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800e022:	2301      	movs	r3, #1
 800e024:	e00e      	b.n	800e044 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	689a      	ldr	r2, [r3, #8]
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	4013      	ands	r3, r2
 800e030:	2b00      	cmp	r3, #0
 800e032:	bf14      	ite	ne
 800e034:	2301      	movne	r3, #1
 800e036:	2300      	moveq	r3, #0
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	461a      	mov	r2, r3
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d1d6      	bne.n	800dff0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e042:	2300      	movs	r3, #0
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d009      	beq.n	800e074 <QSPI_Config+0x28>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e066:	d005      	beq.n	800e074 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	3a01      	subs	r2, #1
 800e072:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	699b      	ldr	r3, [r3, #24]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 80b9 	beq.w	800e1f0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d05f      	beq.n	800e146 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	68ba      	ldr	r2, [r7, #8]
 800e08c:	6892      	ldr	r2, [r2, #8]
 800e08e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	69db      	ldr	r3, [r3, #28]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d031      	beq.n	800e0fc <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a0:	431a      	orrs	r2, r3
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a6:	431a      	orrs	r2, r3
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ac:	431a      	orrs	r2, r3
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	695b      	ldr	r3, [r3, #20]
 800e0b2:	049b      	lsls	r3, r3, #18
 800e0b4:	431a      	orrs	r2, r3
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	431a      	orrs	r2, r3
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	6a1b      	ldr	r3, [r3, #32]
 800e0c0:	431a      	orrs	r2, r3
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	431a      	orrs	r2, r3
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	69db      	ldr	r3, [r3, #28]
 800e0cc:	431a      	orrs	r2, r3
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	431a      	orrs	r2, r3
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	ea42 0103 	orr.w	r1, r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	430a      	orrs	r2, r1
 800e0e4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e0ec:	f000 812e 	beq.w	800e34c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	68ba      	ldr	r2, [r7, #8]
 800e0f6:	6852      	ldr	r2, [r2, #4]
 800e0f8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800e0fa:	e127      	b.n	800e34c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e104:	431a      	orrs	r2, r3
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10a:	431a      	orrs	r2, r3
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e110:	431a      	orrs	r2, r3
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	695b      	ldr	r3, [r3, #20]
 800e116:	049b      	lsls	r3, r3, #18
 800e118:	431a      	orrs	r2, r3
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	431a      	orrs	r2, r3
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	6a1b      	ldr	r3, [r3, #32]
 800e124:	431a      	orrs	r2, r3
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	69db      	ldr	r3, [r3, #28]
 800e12a:	431a      	orrs	r2, r3
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	431a      	orrs	r2, r3
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	ea42 0103 	orr.w	r1, r2, r3
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	430a      	orrs	r2, r1
 800e142:	615a      	str	r2, [r3, #20]
}
 800e144:	e102      	b.n	800e34c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	69db      	ldr	r3, [r3, #28]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d02e      	beq.n	800e1ac <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e156:	431a      	orrs	r2, r3
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e15c:	431a      	orrs	r2, r3
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e162:	431a      	orrs	r2, r3
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	695b      	ldr	r3, [r3, #20]
 800e168:	049b      	lsls	r3, r3, #18
 800e16a:	431a      	orrs	r2, r3
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	6a1b      	ldr	r3, [r3, #32]
 800e170:	431a      	orrs	r2, r3
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	431a      	orrs	r2, r3
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	69db      	ldr	r3, [r3, #28]
 800e17c:	431a      	orrs	r2, r3
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	699b      	ldr	r3, [r3, #24]
 800e182:	431a      	orrs	r2, r3
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	ea42 0103 	orr.w	r1, r2, r3
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	430a      	orrs	r2, r1
 800e194:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e19c:	f000 80d6 	beq.w	800e34c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	68ba      	ldr	r2, [r7, #8]
 800e1a6:	6852      	ldr	r2, [r2, #4]
 800e1a8:	619a      	str	r2, [r3, #24]
}
 800e1aa:	e0cf      	b.n	800e34c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b4:	431a      	orrs	r2, r3
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ba:	431a      	orrs	r2, r3
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c0:	431a      	orrs	r2, r3
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	695b      	ldr	r3, [r3, #20]
 800e1c6:	049b      	lsls	r3, r3, #18
 800e1c8:	431a      	orrs	r2, r3
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	431a      	orrs	r2, r3
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	69db      	ldr	r3, [r3, #28]
 800e1d4:	431a      	orrs	r2, r3
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	699b      	ldr	r3, [r3, #24]
 800e1da:	431a      	orrs	r2, r3
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	ea42 0103 	orr.w	r1, r2, r3
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	430a      	orrs	r2, r1
 800e1ec:	615a      	str	r2, [r3, #20]
}
 800e1ee:	e0ad      	b.n	800e34c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	6a1b      	ldr	r3, [r3, #32]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d058      	beq.n	800e2aa <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	6892      	ldr	r2, [r2, #8]
 800e200:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	69db      	ldr	r3, [r3, #28]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d02d      	beq.n	800e266 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e212:	431a      	orrs	r2, r3
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e218:	431a      	orrs	r2, r3
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21e:	431a      	orrs	r2, r3
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	695b      	ldr	r3, [r3, #20]
 800e224:	049b      	lsls	r3, r3, #18
 800e226:	431a      	orrs	r2, r3
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	431a      	orrs	r2, r3
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	431a      	orrs	r2, r3
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	431a      	orrs	r2, r3
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	69db      	ldr	r3, [r3, #28]
 800e23e:	431a      	orrs	r2, r3
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	ea42 0103 	orr.w	r1, r2, r3
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	430a      	orrs	r2, r1
 800e250:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e258:	d078      	beq.n	800e34c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	68ba      	ldr	r2, [r7, #8]
 800e260:	6852      	ldr	r2, [r2, #4]
 800e262:	619a      	str	r2, [r3, #24]
}
 800e264:	e072      	b.n	800e34c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26e:	431a      	orrs	r2, r3
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e274:	431a      	orrs	r2, r3
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27a:	431a      	orrs	r2, r3
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	695b      	ldr	r3, [r3, #20]
 800e280:	049b      	lsls	r3, r3, #18
 800e282:	431a      	orrs	r2, r3
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	431a      	orrs	r2, r3
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	431a      	orrs	r2, r3
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	69db      	ldr	r3, [r3, #28]
 800e294:	431a      	orrs	r2, r3
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	699b      	ldr	r3, [r3, #24]
 800e29a:	ea42 0103 	orr.w	r1, r2, r3
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	430a      	orrs	r2, r1
 800e2a6:	615a      	str	r2, [r3, #20]
}
 800e2a8:	e050      	b.n	800e34c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	69db      	ldr	r3, [r3, #28]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d02a      	beq.n	800e308 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ba:	431a      	orrs	r2, r3
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c0:	431a      	orrs	r2, r3
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c6:	431a      	orrs	r2, r3
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	695b      	ldr	r3, [r3, #20]
 800e2cc:	049b      	lsls	r3, r3, #18
 800e2ce:	431a      	orrs	r2, r3
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	6a1b      	ldr	r3, [r3, #32]
 800e2d4:	431a      	orrs	r2, r3
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	431a      	orrs	r2, r3
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	69db      	ldr	r3, [r3, #28]
 800e2e0:	431a      	orrs	r2, r3
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	699b      	ldr	r3, [r3, #24]
 800e2e6:	ea42 0103 	orr.w	r1, r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	430a      	orrs	r2, r1
 800e2f2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e2fa:	d027      	beq.n	800e34c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	6852      	ldr	r2, [r2, #4]
 800e304:	619a      	str	r2, [r3, #24]
}
 800e306:	e021      	b.n	800e34c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d01d      	beq.n	800e34c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e318:	431a      	orrs	r2, r3
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31e:	431a      	orrs	r2, r3
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e324:	431a      	orrs	r2, r3
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	695b      	ldr	r3, [r3, #20]
 800e32a:	049b      	lsls	r3, r3, #18
 800e32c:	431a      	orrs	r2, r3
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	6a1b      	ldr	r3, [r3, #32]
 800e332:	431a      	orrs	r2, r3
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	69db      	ldr	r3, [r3, #28]
 800e338:	431a      	orrs	r2, r3
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	699b      	ldr	r3, [r3, #24]
 800e33e:	ea42 0103 	orr.w	r1, r2, r3
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	430a      	orrs	r2, r1
 800e34a:	615a      	str	r2, [r3, #20]
}
 800e34c:	bf00      	nop
 800e34e:	3714      	adds	r7, #20
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b086      	sub	sp, #24
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800e360:	2300      	movs	r3, #0
 800e362:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d101      	bne.n	800e36e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800e36a:	2301      	movs	r3, #1
 800e36c:	e29b      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f003 0301 	and.w	r3, r3, #1
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 8087 	beq.w	800e48a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e37c:	4b96      	ldr	r3, [pc, #600]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	f003 030c 	and.w	r3, r3, #12
 800e384:	2b04      	cmp	r3, #4
 800e386:	d00c      	beq.n	800e3a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e388:	4b93      	ldr	r3, [pc, #588]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	f003 030c 	and.w	r3, r3, #12
 800e390:	2b08      	cmp	r3, #8
 800e392:	d112      	bne.n	800e3ba <HAL_RCC_OscConfig+0x62>
 800e394:	4b90      	ldr	r3, [pc, #576]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e39c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e3a0:	d10b      	bne.n	800e3ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e3a2:	4b8d      	ldr	r3, [pc, #564]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d06c      	beq.n	800e488 <HAL_RCC_OscConfig+0x130>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d168      	bne.n	800e488 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e275      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3c2:	d106      	bne.n	800e3d2 <HAL_RCC_OscConfig+0x7a>
 800e3c4:	4b84      	ldr	r3, [pc, #528]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a83      	ldr	r2, [pc, #524]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e3ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e3ce:	6013      	str	r3, [r2, #0]
 800e3d0:	e02e      	b.n	800e430 <HAL_RCC_OscConfig+0xd8>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10c      	bne.n	800e3f4 <HAL_RCC_OscConfig+0x9c>
 800e3da:	4b7f      	ldr	r3, [pc, #508]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	4a7e      	ldr	r2, [pc, #504]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e3e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	4b7c      	ldr	r3, [pc, #496]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4a7b      	ldr	r2, [pc, #492]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e3ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e3f0:	6013      	str	r3, [r2, #0]
 800e3f2:	e01d      	b.n	800e430 <HAL_RCC_OscConfig+0xd8>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e3fc:	d10c      	bne.n	800e418 <HAL_RCC_OscConfig+0xc0>
 800e3fe:	4b76      	ldr	r3, [pc, #472]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4a75      	ldr	r2, [pc, #468]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e408:	6013      	str	r3, [r2, #0]
 800e40a:	4b73      	ldr	r3, [pc, #460]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a72      	ldr	r2, [pc, #456]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e414:	6013      	str	r3, [r2, #0]
 800e416:	e00b      	b.n	800e430 <HAL_RCC_OscConfig+0xd8>
 800e418:	4b6f      	ldr	r3, [pc, #444]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a6e      	ldr	r2, [pc, #440]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e41e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e422:	6013      	str	r3, [r2, #0]
 800e424:	4b6c      	ldr	r3, [pc, #432]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a6b      	ldr	r2, [pc, #428]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e42a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e42e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d013      	beq.n	800e460 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e438:	f7fc f85a 	bl	800a4f0 <HAL_GetTick>
 800e43c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e43e:	e008      	b.n	800e452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e440:	f7fc f856 	bl	800a4f0 <HAL_GetTick>
 800e444:	4602      	mov	r2, r0
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	2b64      	cmp	r3, #100	; 0x64
 800e44c:	d901      	bls.n	800e452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e44e:	2303      	movs	r3, #3
 800e450:	e229      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e452:	4b61      	ldr	r3, [pc, #388]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d0f0      	beq.n	800e440 <HAL_RCC_OscConfig+0xe8>
 800e45e:	e014      	b.n	800e48a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e460:	f7fc f846 	bl	800a4f0 <HAL_GetTick>
 800e464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e466:	e008      	b.n	800e47a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e468:	f7fc f842 	bl	800a4f0 <HAL_GetTick>
 800e46c:	4602      	mov	r2, r0
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	2b64      	cmp	r3, #100	; 0x64
 800e474:	d901      	bls.n	800e47a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e476:	2303      	movs	r3, #3
 800e478:	e215      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e47a:	4b57      	ldr	r3, [pc, #348]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e482:	2b00      	cmp	r3, #0
 800e484:	d1f0      	bne.n	800e468 <HAL_RCC_OscConfig+0x110>
 800e486:	e000      	b.n	800e48a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f003 0302 	and.w	r3, r3, #2
 800e492:	2b00      	cmp	r3, #0
 800e494:	d069      	beq.n	800e56a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e496:	4b50      	ldr	r3, [pc, #320]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	f003 030c 	and.w	r3, r3, #12
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00b      	beq.n	800e4ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e4a2:	4b4d      	ldr	r3, [pc, #308]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	f003 030c 	and.w	r3, r3, #12
 800e4aa:	2b08      	cmp	r3, #8
 800e4ac:	d11c      	bne.n	800e4e8 <HAL_RCC_OscConfig+0x190>
 800e4ae:	4b4a      	ldr	r3, [pc, #296]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d116      	bne.n	800e4e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e4ba:	4b47      	ldr	r3, [pc, #284]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f003 0302 	and.w	r3, r3, #2
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d005      	beq.n	800e4d2 <HAL_RCC_OscConfig+0x17a>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d001      	beq.n	800e4d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e1e9      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e4d2:	4b41      	ldr	r3, [pc, #260]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	691b      	ldr	r3, [r3, #16]
 800e4de:	00db      	lsls	r3, r3, #3
 800e4e0:	493d      	ldr	r1, [pc, #244]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e4e6:	e040      	b.n	800e56a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d023      	beq.n	800e538 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e4f0:	4b39      	ldr	r3, [pc, #228]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a38      	ldr	r2, [pc, #224]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e4f6:	f043 0301 	orr.w	r3, r3, #1
 800e4fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4fc:	f7fb fff8 	bl	800a4f0 <HAL_GetTick>
 800e500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e502:	e008      	b.n	800e516 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e504:	f7fb fff4 	bl	800a4f0 <HAL_GetTick>
 800e508:	4602      	mov	r2, r0
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	1ad3      	subs	r3, r2, r3
 800e50e:	2b02      	cmp	r3, #2
 800e510:	d901      	bls.n	800e516 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800e512:	2303      	movs	r3, #3
 800e514:	e1c7      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e516:	4b30      	ldr	r3, [pc, #192]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f003 0302 	and.w	r3, r3, #2
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d0f0      	beq.n	800e504 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e522:	4b2d      	ldr	r3, [pc, #180]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	691b      	ldr	r3, [r3, #16]
 800e52e:	00db      	lsls	r3, r3, #3
 800e530:	4929      	ldr	r1, [pc, #164]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e532:	4313      	orrs	r3, r2
 800e534:	600b      	str	r3, [r1, #0]
 800e536:	e018      	b.n	800e56a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e538:	4b27      	ldr	r3, [pc, #156]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a26      	ldr	r2, [pc, #152]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e53e:	f023 0301 	bic.w	r3, r3, #1
 800e542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e544:	f7fb ffd4 	bl	800a4f0 <HAL_GetTick>
 800e548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e54a:	e008      	b.n	800e55e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e54c:	f7fb ffd0 	bl	800a4f0 <HAL_GetTick>
 800e550:	4602      	mov	r2, r0
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	2b02      	cmp	r3, #2
 800e558:	d901      	bls.n	800e55e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e55a:	2303      	movs	r3, #3
 800e55c:	e1a3      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e55e:	4b1e      	ldr	r3, [pc, #120]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f003 0302 	and.w	r3, r3, #2
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1f0      	bne.n	800e54c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f003 0308 	and.w	r3, r3, #8
 800e572:	2b00      	cmp	r3, #0
 800e574:	d038      	beq.n	800e5e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d019      	beq.n	800e5b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e57e:	4b16      	ldr	r3, [pc, #88]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e582:	4a15      	ldr	r2, [pc, #84]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e584:	f043 0301 	orr.w	r3, r3, #1
 800e588:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e58a:	f7fb ffb1 	bl	800a4f0 <HAL_GetTick>
 800e58e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e590:	e008      	b.n	800e5a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e592:	f7fb ffad 	bl	800a4f0 <HAL_GetTick>
 800e596:	4602      	mov	r2, r0
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	1ad3      	subs	r3, r2, r3
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	d901      	bls.n	800e5a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e5a0:	2303      	movs	r3, #3
 800e5a2:	e180      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e5a4:	4b0c      	ldr	r3, [pc, #48]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e5a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5a8:	f003 0302 	and.w	r3, r3, #2
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d0f0      	beq.n	800e592 <HAL_RCC_OscConfig+0x23a>
 800e5b0:	e01a      	b.n	800e5e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e5b2:	4b09      	ldr	r3, [pc, #36]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5b6:	4a08      	ldr	r2, [pc, #32]	; (800e5d8 <HAL_RCC_OscConfig+0x280>)
 800e5b8:	f023 0301 	bic.w	r3, r3, #1
 800e5bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5be:	f7fb ff97 	bl	800a4f0 <HAL_GetTick>
 800e5c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e5c4:	e00a      	b.n	800e5dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e5c6:	f7fb ff93 	bl	800a4f0 <HAL_GetTick>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	d903      	bls.n	800e5dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	e166      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
 800e5d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e5dc:	4b92      	ldr	r3, [pc, #584]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e5de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5e0:	f003 0302 	and.w	r3, r3, #2
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1ee      	bne.n	800e5c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f003 0304 	and.w	r3, r3, #4
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 80a4 	beq.w	800e73e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e5f6:	4b8c      	ldr	r3, [pc, #560]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10d      	bne.n	800e61e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800e602:	4b89      	ldr	r3, [pc, #548]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e606:	4a88      	ldr	r2, [pc, #544]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e60c:	6413      	str	r3, [r2, #64]	; 0x40
 800e60e:	4b86      	ldr	r3, [pc, #536]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e616:	60bb      	str	r3, [r7, #8]
 800e618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e61a:	2301      	movs	r3, #1
 800e61c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e61e:	4b83      	ldr	r3, [pc, #524]	; (800e82c <HAL_RCC_OscConfig+0x4d4>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e626:	2b00      	cmp	r3, #0
 800e628:	d118      	bne.n	800e65c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800e62a:	4b80      	ldr	r3, [pc, #512]	; (800e82c <HAL_RCC_OscConfig+0x4d4>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a7f      	ldr	r2, [pc, #508]	; (800e82c <HAL_RCC_OscConfig+0x4d4>)
 800e630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e636:	f7fb ff5b 	bl	800a4f0 <HAL_GetTick>
 800e63a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e63c:	e008      	b.n	800e650 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e63e:	f7fb ff57 	bl	800a4f0 <HAL_GetTick>
 800e642:	4602      	mov	r2, r0
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	2b64      	cmp	r3, #100	; 0x64
 800e64a:	d901      	bls.n	800e650 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800e64c:	2303      	movs	r3, #3
 800e64e:	e12a      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e650:	4b76      	ldr	r3, [pc, #472]	; (800e82c <HAL_RCC_OscConfig+0x4d4>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d0f0      	beq.n	800e63e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d106      	bne.n	800e672 <HAL_RCC_OscConfig+0x31a>
 800e664:	4b70      	ldr	r3, [pc, #448]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e668:	4a6f      	ldr	r2, [pc, #444]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e66a:	f043 0301 	orr.w	r3, r3, #1
 800e66e:	6713      	str	r3, [r2, #112]	; 0x70
 800e670:	e02d      	b.n	800e6ce <HAL_RCC_OscConfig+0x376>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d10c      	bne.n	800e694 <HAL_RCC_OscConfig+0x33c>
 800e67a:	4b6b      	ldr	r3, [pc, #428]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e67e:	4a6a      	ldr	r2, [pc, #424]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e680:	f023 0301 	bic.w	r3, r3, #1
 800e684:	6713      	str	r3, [r2, #112]	; 0x70
 800e686:	4b68      	ldr	r3, [pc, #416]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e68a:	4a67      	ldr	r2, [pc, #412]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e68c:	f023 0304 	bic.w	r3, r3, #4
 800e690:	6713      	str	r3, [r2, #112]	; 0x70
 800e692:	e01c      	b.n	800e6ce <HAL_RCC_OscConfig+0x376>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	2b05      	cmp	r3, #5
 800e69a:	d10c      	bne.n	800e6b6 <HAL_RCC_OscConfig+0x35e>
 800e69c:	4b62      	ldr	r3, [pc, #392]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6a0:	4a61      	ldr	r2, [pc, #388]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e6a2:	f043 0304 	orr.w	r3, r3, #4
 800e6a6:	6713      	str	r3, [r2, #112]	; 0x70
 800e6a8:	4b5f      	ldr	r3, [pc, #380]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ac:	4a5e      	ldr	r2, [pc, #376]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e6ae:	f043 0301 	orr.w	r3, r3, #1
 800e6b2:	6713      	str	r3, [r2, #112]	; 0x70
 800e6b4:	e00b      	b.n	800e6ce <HAL_RCC_OscConfig+0x376>
 800e6b6:	4b5c      	ldr	r3, [pc, #368]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ba:	4a5b      	ldr	r2, [pc, #364]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e6bc:	f023 0301 	bic.w	r3, r3, #1
 800e6c0:	6713      	str	r3, [r2, #112]	; 0x70
 800e6c2:	4b59      	ldr	r3, [pc, #356]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6c6:	4a58      	ldr	r2, [pc, #352]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e6c8:	f023 0304 	bic.w	r3, r3, #4
 800e6cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d015      	beq.n	800e702 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e6d6:	f7fb ff0b 	bl	800a4f0 <HAL_GetTick>
 800e6da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e6dc:	e00a      	b.n	800e6f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e6de:	f7fb ff07 	bl	800a4f0 <HAL_GetTick>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	1ad3      	subs	r3, r2, r3
 800e6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d901      	bls.n	800e6f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800e6f0:	2303      	movs	r3, #3
 800e6f2:	e0d8      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e6f4:	4b4c      	ldr	r3, [pc, #304]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e6f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6f8:	f003 0302 	and.w	r3, r3, #2
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d0ee      	beq.n	800e6de <HAL_RCC_OscConfig+0x386>
 800e700:	e014      	b.n	800e72c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e702:	f7fb fef5 	bl	800a4f0 <HAL_GetTick>
 800e706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e708:	e00a      	b.n	800e720 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e70a:	f7fb fef1 	bl	800a4f0 <HAL_GetTick>
 800e70e:	4602      	mov	r2, r0
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	1ad3      	subs	r3, r2, r3
 800e714:	f241 3288 	movw	r2, #5000	; 0x1388
 800e718:	4293      	cmp	r3, r2
 800e71a:	d901      	bls.n	800e720 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800e71c:	2303      	movs	r3, #3
 800e71e:	e0c2      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e720:	4b41      	ldr	r3, [pc, #260]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e724:	f003 0302 	and.w	r3, r3, #2
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1ee      	bne.n	800e70a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e72c:	7dfb      	ldrb	r3, [r7, #23]
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d105      	bne.n	800e73e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e732:	4b3d      	ldr	r3, [pc, #244]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e736:	4a3c      	ldr	r2, [pc, #240]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e73c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	699b      	ldr	r3, [r3, #24]
 800e742:	2b00      	cmp	r3, #0
 800e744:	f000 80ae 	beq.w	800e8a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e748:	4b37      	ldr	r3, [pc, #220]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e74a:	689b      	ldr	r3, [r3, #8]
 800e74c:	f003 030c 	and.w	r3, r3, #12
 800e750:	2b08      	cmp	r3, #8
 800e752:	d06d      	beq.n	800e830 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d14b      	bne.n	800e7f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e75c:	4b32      	ldr	r3, [pc, #200]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a31      	ldr	r2, [pc, #196]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e768:	f7fb fec2 	bl	800a4f0 <HAL_GetTick>
 800e76c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e76e:	e008      	b.n	800e782 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e770:	f7fb febe 	bl	800a4f0 <HAL_GetTick>
 800e774:	4602      	mov	r2, r0
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d901      	bls.n	800e782 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800e77e:	2303      	movs	r3, #3
 800e780:	e091      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e782:	4b29      	ldr	r3, [pc, #164]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1f0      	bne.n	800e770 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	69da      	ldr	r2, [r3, #28]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6a1b      	ldr	r3, [r3, #32]
 800e796:	431a      	orrs	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79c:	019b      	lsls	r3, r3, #6
 800e79e:	431a      	orrs	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a4:	085b      	lsrs	r3, r3, #1
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	041b      	lsls	r3, r3, #16
 800e7aa:	431a      	orrs	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b0:	061b      	lsls	r3, r3, #24
 800e7b2:	431a      	orrs	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b8:	071b      	lsls	r3, r3, #28
 800e7ba:	491b      	ldr	r1, [pc, #108]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e7c0:	4b19      	ldr	r3, [pc, #100]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a18      	ldr	r2, [pc, #96]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e7c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e7ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7cc:	f7fb fe90 	bl	800a4f0 <HAL_GetTick>
 800e7d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e7d2:	e008      	b.n	800e7e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e7d4:	f7fb fe8c 	bl	800a4f0 <HAL_GetTick>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	1ad3      	subs	r3, r2, r3
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	d901      	bls.n	800e7e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	e05f      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e7e6:	4b10      	ldr	r3, [pc, #64]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d0f0      	beq.n	800e7d4 <HAL_RCC_OscConfig+0x47c>
 800e7f2:	e057      	b.n	800e8a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e7f4:	4b0c      	ldr	r3, [pc, #48]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a0b      	ldr	r2, [pc, #44]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e7fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e7fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e800:	f7fb fe76 	bl	800a4f0 <HAL_GetTick>
 800e804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e806:	e008      	b.n	800e81a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e808:	f7fb fe72 	bl	800a4f0 <HAL_GetTick>
 800e80c:	4602      	mov	r2, r0
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	2b02      	cmp	r3, #2
 800e814:	d901      	bls.n	800e81a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800e816:	2303      	movs	r3, #3
 800e818:	e045      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e81a:	4b03      	ldr	r3, [pc, #12]	; (800e828 <HAL_RCC_OscConfig+0x4d0>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1f0      	bne.n	800e808 <HAL_RCC_OscConfig+0x4b0>
 800e826:	e03d      	b.n	800e8a4 <HAL_RCC_OscConfig+0x54c>
 800e828:	40023800 	.word	0x40023800
 800e82c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800e830:	4b1f      	ldr	r3, [pc, #124]	; (800e8b0 <HAL_RCC_OscConfig+0x558>)
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d030      	beq.n	800e8a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e848:	429a      	cmp	r2, r3
 800e84a:	d129      	bne.n	800e8a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e856:	429a      	cmp	r2, r3
 800e858:	d122      	bne.n	800e8a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e860:	4013      	ands	r3, r2
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e866:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e868:	4293      	cmp	r3, r2
 800e86a:	d119      	bne.n	800e8a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e876:	085b      	lsrs	r3, r3, #1
 800e878:	3b01      	subs	r3, #1
 800e87a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d10f      	bne.n	800e8a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d107      	bne.n	800e8a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d001      	beq.n	800e8a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e000      	b.n	800e8a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800e8a4:	2300      	movs	r3, #0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3718      	adds	r7, #24
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	40023800 	.word	0x40023800

0800e8b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d101      	bne.n	800e8cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e0d0      	b.n	800ea6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e8cc:	4b6a      	ldr	r3, [pc, #424]	; (800ea78 <HAL_RCC_ClockConfig+0x1c4>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f003 030f 	and.w	r3, r3, #15
 800e8d4:	683a      	ldr	r2, [r7, #0]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d910      	bls.n	800e8fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8da:	4b67      	ldr	r3, [pc, #412]	; (800ea78 <HAL_RCC_ClockConfig+0x1c4>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f023 020f 	bic.w	r2, r3, #15
 800e8e2:	4965      	ldr	r1, [pc, #404]	; (800ea78 <HAL_RCC_ClockConfig+0x1c4>)
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8ea:	4b63      	ldr	r3, [pc, #396]	; (800ea78 <HAL_RCC_ClockConfig+0x1c4>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f003 030f 	and.w	r3, r3, #15
 800e8f2:	683a      	ldr	r2, [r7, #0]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d001      	beq.n	800e8fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e0b8      	b.n	800ea6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f003 0302 	and.w	r3, r3, #2
 800e904:	2b00      	cmp	r3, #0
 800e906:	d020      	beq.n	800e94a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	2b00      	cmp	r3, #0
 800e912:	d005      	beq.n	800e920 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e914:	4b59      	ldr	r3, [pc, #356]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	4a58      	ldr	r2, [pc, #352]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e91a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e91e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f003 0308 	and.w	r3, r3, #8
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d005      	beq.n	800e938 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e92c:	4b53      	ldr	r3, [pc, #332]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	4a52      	ldr	r2, [pc, #328]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e938:	4b50      	ldr	r3, [pc, #320]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	494d      	ldr	r1, [pc, #308]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e946:	4313      	orrs	r3, r2
 800e948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f003 0301 	and.w	r3, r3, #1
 800e952:	2b00      	cmp	r3, #0
 800e954:	d040      	beq.n	800e9d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d107      	bne.n	800e96e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e95e:	4b47      	ldr	r3, [pc, #284]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e966:	2b00      	cmp	r3, #0
 800e968:	d115      	bne.n	800e996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	e07f      	b.n	800ea6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	2b02      	cmp	r3, #2
 800e974:	d107      	bne.n	800e986 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e976:	4b41      	ldr	r3, [pc, #260]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d109      	bne.n	800e996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	e073      	b.n	800ea6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e986:	4b3d      	ldr	r3, [pc, #244]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f003 0302 	and.w	r3, r3, #2
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d101      	bne.n	800e996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e992:	2301      	movs	r3, #1
 800e994:	e06b      	b.n	800ea6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e996:	4b39      	ldr	r3, [pc, #228]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	f023 0203 	bic.w	r2, r3, #3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	4936      	ldr	r1, [pc, #216]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9a8:	f7fb fda2 	bl	800a4f0 <HAL_GetTick>
 800e9ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e9ae:	e00a      	b.n	800e9c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e9b0:	f7fb fd9e 	bl	800a4f0 <HAL_GetTick>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d901      	bls.n	800e9c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800e9c2:	2303      	movs	r3, #3
 800e9c4:	e053      	b.n	800ea6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e9c6:	4b2d      	ldr	r3, [pc, #180]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	f003 020c 	and.w	r2, r3, #12
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	009b      	lsls	r3, r3, #2
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d1eb      	bne.n	800e9b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e9d8:	4b27      	ldr	r3, [pc, #156]	; (800ea78 <HAL_RCC_ClockConfig+0x1c4>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f003 030f 	and.w	r3, r3, #15
 800e9e0:	683a      	ldr	r2, [r7, #0]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d210      	bcs.n	800ea08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e9e6:	4b24      	ldr	r3, [pc, #144]	; (800ea78 <HAL_RCC_ClockConfig+0x1c4>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f023 020f 	bic.w	r2, r3, #15
 800e9ee:	4922      	ldr	r1, [pc, #136]	; (800ea78 <HAL_RCC_ClockConfig+0x1c4>)
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e9f6:	4b20      	ldr	r3, [pc, #128]	; (800ea78 <HAL_RCC_ClockConfig+0x1c4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f003 030f 	and.w	r3, r3, #15
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d001      	beq.n	800ea08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ea04:	2301      	movs	r3, #1
 800ea06:	e032      	b.n	800ea6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f003 0304 	and.w	r3, r3, #4
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d008      	beq.n	800ea26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ea14:	4b19      	ldr	r3, [pc, #100]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	4916      	ldr	r1, [pc, #88]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800ea22:	4313      	orrs	r3, r2
 800ea24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f003 0308 	and.w	r3, r3, #8
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d009      	beq.n	800ea46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ea32:	4b12      	ldr	r3, [pc, #72]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	00db      	lsls	r3, r3, #3
 800ea40:	490e      	ldr	r1, [pc, #56]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800ea42:	4313      	orrs	r3, r2
 800ea44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ea46:	f000 f821 	bl	800ea8c <HAL_RCC_GetSysClockFreq>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	4b0b      	ldr	r3, [pc, #44]	; (800ea7c <HAL_RCC_ClockConfig+0x1c8>)
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	091b      	lsrs	r3, r3, #4
 800ea52:	f003 030f 	and.w	r3, r3, #15
 800ea56:	490a      	ldr	r1, [pc, #40]	; (800ea80 <HAL_RCC_ClockConfig+0x1cc>)
 800ea58:	5ccb      	ldrb	r3, [r1, r3]
 800ea5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea5e:	4a09      	ldr	r2, [pc, #36]	; (800ea84 <HAL_RCC_ClockConfig+0x1d0>)
 800ea60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ea62:	4b09      	ldr	r3, [pc, #36]	; (800ea88 <HAL_RCC_ClockConfig+0x1d4>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7f3 ffb0 	bl	80029cc <HAL_InitTick>

  return HAL_OK;
 800ea6c:	2300      	movs	r3, #0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	40023c00 	.word	0x40023c00
 800ea7c:	40023800 	.word	0x40023800
 800ea80:	0802bcf4 	.word	0x0802bcf4
 800ea84:	20000014 	.word	0x20000014
 800ea88:	20000018 	.word	0x20000018

0800ea8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ea8c:	b5b0      	push	{r4, r5, r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ea92:	2100      	movs	r1, #0
 800ea94:	6079      	str	r1, [r7, #4]
 800ea96:	2100      	movs	r1, #0
 800ea98:	60f9      	str	r1, [r7, #12]
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eaa2:	4952      	ldr	r1, [pc, #328]	; (800ebec <HAL_RCC_GetSysClockFreq+0x160>)
 800eaa4:	6889      	ldr	r1, [r1, #8]
 800eaa6:	f001 010c 	and.w	r1, r1, #12
 800eaaa:	2908      	cmp	r1, #8
 800eaac:	d00d      	beq.n	800eaca <HAL_RCC_GetSysClockFreq+0x3e>
 800eaae:	2908      	cmp	r1, #8
 800eab0:	f200 8094 	bhi.w	800ebdc <HAL_RCC_GetSysClockFreq+0x150>
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d002      	beq.n	800eabe <HAL_RCC_GetSysClockFreq+0x32>
 800eab8:	2904      	cmp	r1, #4
 800eaba:	d003      	beq.n	800eac4 <HAL_RCC_GetSysClockFreq+0x38>
 800eabc:	e08e      	b.n	800ebdc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800eabe:	4b4c      	ldr	r3, [pc, #304]	; (800ebf0 <HAL_RCC_GetSysClockFreq+0x164>)
 800eac0:	60bb      	str	r3, [r7, #8]
      break;
 800eac2:	e08e      	b.n	800ebe2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800eac4:	4b4b      	ldr	r3, [pc, #300]	; (800ebf4 <HAL_RCC_GetSysClockFreq+0x168>)
 800eac6:	60bb      	str	r3, [r7, #8]
      break;
 800eac8:	e08b      	b.n	800ebe2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800eaca:	4948      	ldr	r1, [pc, #288]	; (800ebec <HAL_RCC_GetSysClockFreq+0x160>)
 800eacc:	6849      	ldr	r1, [r1, #4]
 800eace:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800ead2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ead4:	4945      	ldr	r1, [pc, #276]	; (800ebec <HAL_RCC_GetSysClockFreq+0x160>)
 800ead6:	6849      	ldr	r1, [r1, #4]
 800ead8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800eadc:	2900      	cmp	r1, #0
 800eade:	d024      	beq.n	800eb2a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eae0:	4942      	ldr	r1, [pc, #264]	; (800ebec <HAL_RCC_GetSysClockFreq+0x160>)
 800eae2:	6849      	ldr	r1, [r1, #4]
 800eae4:	0989      	lsrs	r1, r1, #6
 800eae6:	4608      	mov	r0, r1
 800eae8:	f04f 0100 	mov.w	r1, #0
 800eaec:	f240 14ff 	movw	r4, #511	; 0x1ff
 800eaf0:	f04f 0500 	mov.w	r5, #0
 800eaf4:	ea00 0204 	and.w	r2, r0, r4
 800eaf8:	ea01 0305 	and.w	r3, r1, r5
 800eafc:	493d      	ldr	r1, [pc, #244]	; (800ebf4 <HAL_RCC_GetSysClockFreq+0x168>)
 800eafe:	fb01 f003 	mul.w	r0, r1, r3
 800eb02:	2100      	movs	r1, #0
 800eb04:	fb01 f102 	mul.w	r1, r1, r2
 800eb08:	1844      	adds	r4, r0, r1
 800eb0a:	493a      	ldr	r1, [pc, #232]	; (800ebf4 <HAL_RCC_GetSysClockFreq+0x168>)
 800eb0c:	fba2 0101 	umull	r0, r1, r2, r1
 800eb10:	1863      	adds	r3, r4, r1
 800eb12:	4619      	mov	r1, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	461a      	mov	r2, r3
 800eb18:	f04f 0300 	mov.w	r3, #0
 800eb1c:	f7f1 fda4 	bl	8000668 <__aeabi_uldivmod>
 800eb20:	4602      	mov	r2, r0
 800eb22:	460b      	mov	r3, r1
 800eb24:	4613      	mov	r3, r2
 800eb26:	60fb      	str	r3, [r7, #12]
 800eb28:	e04a      	b.n	800ebc0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eb2a:	4b30      	ldr	r3, [pc, #192]	; (800ebec <HAL_RCC_GetSysClockFreq+0x160>)
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	099b      	lsrs	r3, r3, #6
 800eb30:	461a      	mov	r2, r3
 800eb32:	f04f 0300 	mov.w	r3, #0
 800eb36:	f240 10ff 	movw	r0, #511	; 0x1ff
 800eb3a:	f04f 0100 	mov.w	r1, #0
 800eb3e:	ea02 0400 	and.w	r4, r2, r0
 800eb42:	ea03 0501 	and.w	r5, r3, r1
 800eb46:	4620      	mov	r0, r4
 800eb48:	4629      	mov	r1, r5
 800eb4a:	f04f 0200 	mov.w	r2, #0
 800eb4e:	f04f 0300 	mov.w	r3, #0
 800eb52:	014b      	lsls	r3, r1, #5
 800eb54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800eb58:	0142      	lsls	r2, r0, #5
 800eb5a:	4610      	mov	r0, r2
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	1b00      	subs	r0, r0, r4
 800eb60:	eb61 0105 	sbc.w	r1, r1, r5
 800eb64:	f04f 0200 	mov.w	r2, #0
 800eb68:	f04f 0300 	mov.w	r3, #0
 800eb6c:	018b      	lsls	r3, r1, #6
 800eb6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800eb72:	0182      	lsls	r2, r0, #6
 800eb74:	1a12      	subs	r2, r2, r0
 800eb76:	eb63 0301 	sbc.w	r3, r3, r1
 800eb7a:	f04f 0000 	mov.w	r0, #0
 800eb7e:	f04f 0100 	mov.w	r1, #0
 800eb82:	00d9      	lsls	r1, r3, #3
 800eb84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800eb88:	00d0      	lsls	r0, r2, #3
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	1912      	adds	r2, r2, r4
 800eb90:	eb45 0303 	adc.w	r3, r5, r3
 800eb94:	f04f 0000 	mov.w	r0, #0
 800eb98:	f04f 0100 	mov.w	r1, #0
 800eb9c:	0299      	lsls	r1, r3, #10
 800eb9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800eba2:	0290      	lsls	r0, r2, #10
 800eba4:	4602      	mov	r2, r0
 800eba6:	460b      	mov	r3, r1
 800eba8:	4610      	mov	r0, r2
 800ebaa:	4619      	mov	r1, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	f04f 0300 	mov.w	r3, #0
 800ebb4:	f7f1 fd58 	bl	8000668 <__aeabi_uldivmod>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ebc0:	4b0a      	ldr	r3, [pc, #40]	; (800ebec <HAL_RCC_GetSysClockFreq+0x160>)
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	0c1b      	lsrs	r3, r3, #16
 800ebc6:	f003 0303 	and.w	r3, r3, #3
 800ebca:	3301      	adds	r3, #1
 800ebcc:	005b      	lsls	r3, r3, #1
 800ebce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebd8:	60bb      	str	r3, [r7, #8]
      break;
 800ebda:	e002      	b.n	800ebe2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ebdc:	4b04      	ldr	r3, [pc, #16]	; (800ebf0 <HAL_RCC_GetSysClockFreq+0x164>)
 800ebde:	60bb      	str	r3, [r7, #8]
      break;
 800ebe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ebe2:	68bb      	ldr	r3, [r7, #8]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3710      	adds	r7, #16
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bdb0      	pop	{r4, r5, r7, pc}
 800ebec:	40023800 	.word	0x40023800
 800ebf0:	00f42400 	.word	0x00f42400
 800ebf4:	017d7840 	.word	0x017d7840

0800ebf8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ebfc:	4b03      	ldr	r3, [pc, #12]	; (800ec0c <HAL_RCC_GetHCLKFreq+0x14>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	20000014 	.word	0x20000014

0800ec10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ec14:	f7ff fff0 	bl	800ebf8 <HAL_RCC_GetHCLKFreq>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	4b05      	ldr	r3, [pc, #20]	; (800ec30 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	0a9b      	lsrs	r3, r3, #10
 800ec20:	f003 0307 	and.w	r3, r3, #7
 800ec24:	4903      	ldr	r1, [pc, #12]	; (800ec34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ec26:	5ccb      	ldrb	r3, [r1, r3]
 800ec28:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	40023800 	.word	0x40023800
 800ec34:	0802bd04 	.word	0x0802bd04

0800ec38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	220f      	movs	r2, #15
 800ec46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ec48:	4b12      	ldr	r3, [pc, #72]	; (800ec94 <HAL_RCC_GetClockConfig+0x5c>)
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	f003 0203 	and.w	r2, r3, #3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ec54:	4b0f      	ldr	r3, [pc, #60]	; (800ec94 <HAL_RCC_GetClockConfig+0x5c>)
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ec60:	4b0c      	ldr	r3, [pc, #48]	; (800ec94 <HAL_RCC_GetClockConfig+0x5c>)
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ec6c:	4b09      	ldr	r3, [pc, #36]	; (800ec94 <HAL_RCC_GetClockConfig+0x5c>)
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	08db      	lsrs	r3, r3, #3
 800ec72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ec7a:	4b07      	ldr	r3, [pc, #28]	; (800ec98 <HAL_RCC_GetClockConfig+0x60>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f003 020f 	and.w	r2, r3, #15
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	601a      	str	r2, [r3, #0]
}
 800ec86:	bf00      	nop
 800ec88:	370c      	adds	r7, #12
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	40023800 	.word	0x40023800
 800ec98:	40023c00 	.word	0x40023c00

0800ec9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b088      	sub	sp, #32
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800eca4:	2300      	movs	r3, #0
 800eca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f003 0301 	and.w	r3, r3, #1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d012      	beq.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ecc4:	4b69      	ldr	r3, [pc, #420]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	4a68      	ldr	r2, [pc, #416]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ecca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ecce:	6093      	str	r3, [r2, #8]
 800ecd0:	4b66      	ldr	r3, [pc, #408]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ecd2:	689a      	ldr	r2, [r3, #8]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecd8:	4964      	ldr	r1, [pc, #400]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d101      	bne.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ece6:	2301      	movs	r3, #1
 800ece8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d017      	beq.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ecf6:	4b5d      	ldr	r3, [pc, #372]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ecf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed04:	4959      	ldr	r1, [pc, #356]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ed06:	4313      	orrs	r3, r2
 800ed08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed14:	d101      	bne.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ed16:	2301      	movs	r3, #1
 800ed18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d101      	bne.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ed22:	2301      	movs	r3, #1
 800ed24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d017      	beq.n	800ed62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ed32:	4b4e      	ldr	r3, [pc, #312]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ed34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed40:	494a      	ldr	r1, [pc, #296]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ed42:	4313      	orrs	r3, r2
 800ed44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed50:	d101      	bne.n	800ed56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ed52:	2301      	movs	r3, #1
 800ed54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 0320 	and.w	r3, r3, #32
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 808b 	beq.w	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ed80:	4b3a      	ldr	r3, [pc, #232]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ed82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed84:	4a39      	ldr	r2, [pc, #228]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ed86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed8a:	6413      	str	r3, [r2, #64]	; 0x40
 800ed8c:	4b37      	ldr	r3, [pc, #220]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ed8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed94:	60bb      	str	r3, [r7, #8]
 800ed96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ed98:	4b35      	ldr	r3, [pc, #212]	; (800ee70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a34      	ldr	r2, [pc, #208]	; (800ee70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ed9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eda2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eda4:	f7fb fba4 	bl	800a4f0 <HAL_GetTick>
 800eda8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800edaa:	e008      	b.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800edac:	f7fb fba0 	bl	800a4f0 <HAL_GetTick>
 800edb0:	4602      	mov	r2, r0
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	2b64      	cmp	r3, #100	; 0x64
 800edb8:	d901      	bls.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800edba:	2303      	movs	r3, #3
 800edbc:	e38f      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800edbe:	4b2c      	ldr	r3, [pc, #176]	; (800ee70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d0f0      	beq.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800edca:	4b28      	ldr	r3, [pc, #160]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800edcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d035      	beq.n	800ee46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ede2:	693a      	ldr	r2, [r7, #16]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d02e      	beq.n	800ee46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ede8:	4b20      	ldr	r3, [pc, #128]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800edea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edf0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800edf2:	4b1e      	ldr	r3, [pc, #120]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800edf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edf6:	4a1d      	ldr	r2, [pc, #116]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800edf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edfc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800edfe:	4b1b      	ldr	r3, [pc, #108]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee02:	4a1a      	ldr	r2, [pc, #104]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ee0a:	4a18      	ldr	r2, [pc, #96]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ee10:	4b16      	ldr	r3, [pc, #88]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee14:	f003 0301 	and.w	r3, r3, #1
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d114      	bne.n	800ee46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee1c:	f7fb fb68 	bl	800a4f0 <HAL_GetTick>
 800ee20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ee22:	e00a      	b.n	800ee3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ee24:	f7fb fb64 	bl	800a4f0 <HAL_GetTick>
 800ee28:	4602      	mov	r2, r0
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	1ad3      	subs	r3, r2, r3
 800ee2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d901      	bls.n	800ee3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ee36:	2303      	movs	r3, #3
 800ee38:	e351      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ee3a:	4b0c      	ldr	r3, [pc, #48]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee3e:	f003 0302 	and.w	r3, r3, #2
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d0ee      	beq.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee52:	d111      	bne.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ee54:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ee60:	4b04      	ldr	r3, [pc, #16]	; (800ee74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ee62:	400b      	ands	r3, r1
 800ee64:	4901      	ldr	r1, [pc, #4]	; (800ee6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ee66:	4313      	orrs	r3, r2
 800ee68:	608b      	str	r3, [r1, #8]
 800ee6a:	e00b      	b.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ee6c:	40023800 	.word	0x40023800
 800ee70:	40007000 	.word	0x40007000
 800ee74:	0ffffcff 	.word	0x0ffffcff
 800ee78:	4bb3      	ldr	r3, [pc, #716]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	4ab2      	ldr	r2, [pc, #712]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ee7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ee82:	6093      	str	r3, [r2, #8]
 800ee84:	4bb0      	ldr	r3, [pc, #704]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ee86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee90:	49ad      	ldr	r1, [pc, #692]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ee92:	4313      	orrs	r3, r2
 800ee94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f003 0310 	and.w	r3, r3, #16
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d010      	beq.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800eea2:	4ba9      	ldr	r3, [pc, #676]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800eea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eea8:	4aa7      	ldr	r2, [pc, #668]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800eeaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eeae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800eeb2:	4ba5      	ldr	r3, [pc, #660]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800eeb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eebc:	49a2      	ldr	r1, [pc, #648]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800eebe:	4313      	orrs	r3, r2
 800eec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00a      	beq.n	800eee6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800eed0:	4b9d      	ldr	r3, [pc, #628]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800eed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eed6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eede:	499a      	ldr	r1, [pc, #616]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800eee0:	4313      	orrs	r3, r2
 800eee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00a      	beq.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800eef2:	4b95      	ldr	r3, [pc, #596]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800eef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eef8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef00:	4991      	ldr	r1, [pc, #580]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef02:	4313      	orrs	r3, r2
 800ef04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d00a      	beq.n	800ef2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ef14:	4b8c      	ldr	r3, [pc, #560]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef22:	4989      	ldr	r1, [pc, #548]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef24:	4313      	orrs	r3, r2
 800ef26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d00a      	beq.n	800ef4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ef36:	4b84      	ldr	r3, [pc, #528]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef44:	4980      	ldr	r1, [pc, #512]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef46:	4313      	orrs	r3, r2
 800ef48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00a      	beq.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ef58:	4b7b      	ldr	r3, [pc, #492]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef5e:	f023 0203 	bic.w	r2, r3, #3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef66:	4978      	ldr	r1, [pc, #480]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00a      	beq.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ef7a:	4b73      	ldr	r3, [pc, #460]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef80:	f023 020c 	bic.w	r2, r3, #12
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef88:	496f      	ldr	r1, [pc, #444]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00a      	beq.n	800efb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ef9c:	4b6a      	ldr	r3, [pc, #424]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ef9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efa2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efaa:	4967      	ldr	r1, [pc, #412]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efac:	4313      	orrs	r3, r2
 800efae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00a      	beq.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800efbe:	4b62      	ldr	r3, [pc, #392]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efc4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efcc:	495e      	ldr	r1, [pc, #376]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efce:	4313      	orrs	r3, r2
 800efd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00a      	beq.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800efe0:	4b59      	ldr	r3, [pc, #356]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800efe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efe6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efee:	4956      	ldr	r1, [pc, #344]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800eff0:	4313      	orrs	r3, r2
 800eff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00a      	beq.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f002:	4b51      	ldr	r3, [pc, #324]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f008:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f010:	494d      	ldr	r1, [pc, #308]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f012:	4313      	orrs	r3, r2
 800f014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f020:	2b00      	cmp	r3, #0
 800f022:	d00a      	beq.n	800f03a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f024:	4b48      	ldr	r3, [pc, #288]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f02a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f032:	4945      	ldr	r1, [pc, #276]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f034:	4313      	orrs	r3, r2
 800f036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00a      	beq.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f046:	4b40      	ldr	r3, [pc, #256]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f04c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f054:	493c      	ldr	r1, [pc, #240]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f056:	4313      	orrs	r3, r2
 800f058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00a      	beq.n	800f07e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f068:	4b37      	ldr	r3, [pc, #220]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f06e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f076:	4934      	ldr	r1, [pc, #208]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f078:	4313      	orrs	r3, r2
 800f07a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f086:	2b00      	cmp	r3, #0
 800f088:	d011      	beq.n	800f0ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f08a:	4b2f      	ldr	r3, [pc, #188]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f08c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f090:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f098:	492b      	ldr	r1, [pc, #172]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f09a:	4313      	orrs	r3, r2
 800f09c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0a8:	d101      	bne.n	800f0ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f003 0308 	and.w	r3, r3, #8
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d001      	beq.n	800f0be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00a      	beq.n	800f0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f0ca:	4b1f      	ldr	r3, [pc, #124]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0d8:	491b      	ldr	r1, [pc, #108]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00b      	beq.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f0ec:	4b16      	ldr	r3, [pc, #88]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f0ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0fc:	4912      	ldr	r1, [pc, #72]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f0fe:	4313      	orrs	r3, r2
 800f100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00b      	beq.n	800f128 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f110:	4b0d      	ldr	r3, [pc, #52]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f116:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f120:	4909      	ldr	r1, [pc, #36]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f122:	4313      	orrs	r3, r2
 800f124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f130:	2b00      	cmp	r3, #0
 800f132:	d00f      	beq.n	800f154 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f134:	4b04      	ldr	r3, [pc, #16]	; (800f148 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f13a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f144:	e002      	b.n	800f14c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800f146:	bf00      	nop
 800f148:	40023800 	.word	0x40023800
 800f14c:	4986      	ldr	r1, [pc, #536]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f14e:	4313      	orrs	r3, r2
 800f150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00b      	beq.n	800f178 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f160:	4b81      	ldr	r3, [pc, #516]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f166:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f170:	497d      	ldr	r1, [pc, #500]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f172:	4313      	orrs	r3, r2
 800f174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d006      	beq.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f186:	2b00      	cmp	r3, #0
 800f188:	f000 80d6 	beq.w	800f338 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f18c:	4b76      	ldr	r3, [pc, #472]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a75      	ldr	r2, [pc, #468]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f192:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f198:	f7fb f9aa 	bl	800a4f0 <HAL_GetTick>
 800f19c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f19e:	e008      	b.n	800f1b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f1a0:	f7fb f9a6 	bl	800a4f0 <HAL_GetTick>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	2b64      	cmp	r3, #100	; 0x64
 800f1ac:	d901      	bls.n	800f1b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f1ae:	2303      	movs	r3, #3
 800f1b0:	e195      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f1b2:	4b6d      	ldr	r3, [pc, #436]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1f0      	bne.n	800f1a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f003 0301 	and.w	r3, r3, #1
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d021      	beq.n	800f20e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d11d      	bne.n	800f20e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f1d2:	4b65      	ldr	r3, [pc, #404]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f1d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1d8:	0c1b      	lsrs	r3, r3, #16
 800f1da:	f003 0303 	and.w	r3, r3, #3
 800f1de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f1e0:	4b61      	ldr	r3, [pc, #388]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1e6:	0e1b      	lsrs	r3, r3, #24
 800f1e8:	f003 030f 	and.w	r3, r3, #15
 800f1ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	019a      	lsls	r2, r3, #6
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	041b      	lsls	r3, r3, #16
 800f1f8:	431a      	orrs	r2, r3
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	061b      	lsls	r3, r3, #24
 800f1fe:	431a      	orrs	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	071b      	lsls	r3, r3, #28
 800f206:	4958      	ldr	r1, [pc, #352]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f208:	4313      	orrs	r3, r2
 800f20a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f216:	2b00      	cmp	r3, #0
 800f218:	d004      	beq.n	800f224 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f21e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f222:	d00a      	beq.n	800f23a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d02e      	beq.n	800f28e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f238:	d129      	bne.n	800f28e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f23a:	4b4b      	ldr	r3, [pc, #300]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f240:	0c1b      	lsrs	r3, r3, #16
 800f242:	f003 0303 	and.w	r3, r3, #3
 800f246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f248:	4b47      	ldr	r3, [pc, #284]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f24a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f24e:	0f1b      	lsrs	r3, r3, #28
 800f250:	f003 0307 	and.w	r3, r3, #7
 800f254:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	019a      	lsls	r2, r3, #6
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	041b      	lsls	r3, r3, #16
 800f260:	431a      	orrs	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	061b      	lsls	r3, r3, #24
 800f268:	431a      	orrs	r2, r3
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	071b      	lsls	r3, r3, #28
 800f26e:	493e      	ldr	r1, [pc, #248]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f270:	4313      	orrs	r3, r2
 800f272:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f276:	4b3c      	ldr	r3, [pc, #240]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f27c:	f023 021f 	bic.w	r2, r3, #31
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f284:	3b01      	subs	r3, #1
 800f286:	4938      	ldr	r1, [pc, #224]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f288:	4313      	orrs	r3, r2
 800f28a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f296:	2b00      	cmp	r3, #0
 800f298:	d01d      	beq.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f29a:	4b33      	ldr	r3, [pc, #204]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2a0:	0e1b      	lsrs	r3, r3, #24
 800f2a2:	f003 030f 	and.w	r3, r3, #15
 800f2a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f2a8:	4b2f      	ldr	r3, [pc, #188]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ae:	0f1b      	lsrs	r3, r3, #28
 800f2b0:	f003 0307 	and.w	r3, r3, #7
 800f2b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	019a      	lsls	r2, r3, #6
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	691b      	ldr	r3, [r3, #16]
 800f2c0:	041b      	lsls	r3, r3, #16
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	061b      	lsls	r3, r3, #24
 800f2c8:	431a      	orrs	r2, r3
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	071b      	lsls	r3, r3, #28
 800f2ce:	4926      	ldr	r1, [pc, #152]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d011      	beq.n	800f306 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	019a      	lsls	r2, r3, #6
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	691b      	ldr	r3, [r3, #16]
 800f2ec:	041b      	lsls	r3, r3, #16
 800f2ee:	431a      	orrs	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	061b      	lsls	r3, r3, #24
 800f2f6:	431a      	orrs	r2, r3
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	071b      	lsls	r3, r3, #28
 800f2fe:	491a      	ldr	r1, [pc, #104]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f300:	4313      	orrs	r3, r2
 800f302:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f306:	4b18      	ldr	r3, [pc, #96]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4a17      	ldr	r2, [pc, #92]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f30c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f312:	f7fb f8ed 	bl	800a4f0 <HAL_GetTick>
 800f316:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f318:	e008      	b.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f31a:	f7fb f8e9 	bl	800a4f0 <HAL_GetTick>
 800f31e:	4602      	mov	r2, r0
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	1ad3      	subs	r3, r2, r3
 800f324:	2b64      	cmp	r3, #100	; 0x64
 800f326:	d901      	bls.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f328:	2303      	movs	r3, #3
 800f32a:	e0d8      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f32c:	4b0e      	ldr	r3, [pc, #56]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f334:	2b00      	cmp	r3, #0
 800f336:	d0f0      	beq.n	800f31a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f338:	69bb      	ldr	r3, [r7, #24]
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	f040 80ce 	bne.w	800f4dc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800f340:	4b09      	ldr	r3, [pc, #36]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4a08      	ldr	r2, [pc, #32]	; (800f368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800f346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f34a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f34c:	f7fb f8d0 	bl	800a4f0 <HAL_GetTick>
 800f350:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f352:	e00b      	b.n	800f36c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f354:	f7fb f8cc 	bl	800a4f0 <HAL_GetTick>
 800f358:	4602      	mov	r2, r0
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	1ad3      	subs	r3, r2, r3
 800f35e:	2b64      	cmp	r3, #100	; 0x64
 800f360:	d904      	bls.n	800f36c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f362:	2303      	movs	r3, #3
 800f364:	e0bb      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x842>
 800f366:	bf00      	nop
 800f368:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f36c:	4b5e      	ldr	r3, [pc, #376]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f378:	d0ec      	beq.n	800f354 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f382:	2b00      	cmp	r3, #0
 800f384:	d003      	beq.n	800f38e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d009      	beq.n	800f3a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f396:	2b00      	cmp	r3, #0
 800f398:	d02e      	beq.n	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d12a      	bne.n	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f3a2:	4b51      	ldr	r3, [pc, #324]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3a8:	0c1b      	lsrs	r3, r3, #16
 800f3aa:	f003 0303 	and.w	r3, r3, #3
 800f3ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f3b0:	4b4d      	ldr	r3, [pc, #308]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3b6:	0f1b      	lsrs	r3, r3, #28
 800f3b8:	f003 0307 	and.w	r3, r3, #7
 800f3bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	695b      	ldr	r3, [r3, #20]
 800f3c2:	019a      	lsls	r2, r3, #6
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	041b      	lsls	r3, r3, #16
 800f3c8:	431a      	orrs	r2, r3
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	699b      	ldr	r3, [r3, #24]
 800f3ce:	061b      	lsls	r3, r3, #24
 800f3d0:	431a      	orrs	r2, r3
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	071b      	lsls	r3, r3, #28
 800f3d6:	4944      	ldr	r1, [pc, #272]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f3de:	4b42      	ldr	r3, [pc, #264]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f3e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	021b      	lsls	r3, r3, #8
 800f3f0:	493d      	ldr	r1, [pc, #244]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f400:	2b00      	cmp	r3, #0
 800f402:	d022      	beq.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f40c:	d11d      	bne.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f40e:	4b36      	ldr	r3, [pc, #216]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f414:	0e1b      	lsrs	r3, r3, #24
 800f416:	f003 030f 	and.w	r3, r3, #15
 800f41a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f41c:	4b32      	ldr	r3, [pc, #200]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f422:	0f1b      	lsrs	r3, r3, #28
 800f424:	f003 0307 	and.w	r3, r3, #7
 800f428:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	695b      	ldr	r3, [r3, #20]
 800f42e:	019a      	lsls	r2, r3, #6
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6a1b      	ldr	r3, [r3, #32]
 800f434:	041b      	lsls	r3, r3, #16
 800f436:	431a      	orrs	r2, r3
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	061b      	lsls	r3, r3, #24
 800f43c:	431a      	orrs	r2, r3
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	071b      	lsls	r3, r3, #28
 800f442:	4929      	ldr	r1, [pc, #164]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f444:	4313      	orrs	r3, r2
 800f446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f003 0308 	and.w	r3, r3, #8
 800f452:	2b00      	cmp	r3, #0
 800f454:	d028      	beq.n	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f456:	4b24      	ldr	r3, [pc, #144]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f45c:	0e1b      	lsrs	r3, r3, #24
 800f45e:	f003 030f 	and.w	r3, r3, #15
 800f462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f464:	4b20      	ldr	r3, [pc, #128]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f46a:	0c1b      	lsrs	r3, r3, #16
 800f46c:	f003 0303 	and.w	r3, r3, #3
 800f470:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	695b      	ldr	r3, [r3, #20]
 800f476:	019a      	lsls	r2, r3, #6
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	041b      	lsls	r3, r3, #16
 800f47c:	431a      	orrs	r2, r3
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	061b      	lsls	r3, r3, #24
 800f482:	431a      	orrs	r2, r3
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	69db      	ldr	r3, [r3, #28]
 800f488:	071b      	lsls	r3, r3, #28
 800f48a:	4917      	ldr	r1, [pc, #92]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f48c:	4313      	orrs	r3, r2
 800f48e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f492:	4b15      	ldr	r3, [pc, #84]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f498:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a0:	4911      	ldr	r1, [pc, #68]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800f4a8:	4b0f      	ldr	r3, [pc, #60]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4a0e      	ldr	r2, [pc, #56]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f4ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4b4:	f7fb f81c 	bl	800a4f0 <HAL_GetTick>
 800f4b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f4ba:	e008      	b.n	800f4ce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f4bc:	f7fb f818 	bl	800a4f0 <HAL_GetTick>
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	1ad3      	subs	r3, r2, r3
 800f4c6:	2b64      	cmp	r3, #100	; 0x64
 800f4c8:	d901      	bls.n	800f4ce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f4ca:	2303      	movs	r3, #3
 800f4cc:	e007      	b.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f4ce:	4b06      	ldr	r3, [pc, #24]	; (800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4da:	d1ef      	bne.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800f4dc:	2300      	movs	r3, #0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3720      	adds	r7, #32
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	40023800 	.word	0x40023800

0800f4ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d101      	bne.n	800f500 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	e025      	b.n	800f54c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f506:	b2db      	uxtb	r3, r3
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d106      	bne.n	800f51a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f7f2 fc15 	bl	8001d44 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2202      	movs	r2, #2
 800f51e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	3304      	adds	r3, #4
 800f52a:	4619      	mov	r1, r3
 800f52c:	4610      	mov	r0, r2
 800f52e:	f001 fdd1 	bl	80110d4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6818      	ldr	r0, [r3, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	461a      	mov	r2, r3
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	f001 fe3b 	bl	80111b8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2201      	movs	r2, #1
 800f546:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f566:	b2db      	uxtb	r3, r3
 800f568:	2b02      	cmp	r3, #2
 800f56a:	d101      	bne.n	800f570 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800f56c:	2302      	movs	r3, #2
 800f56e:	e018      	b.n	800f5a2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2202      	movs	r2, #2
 800f574:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	68b9      	ldr	r1, [r7, #8]
 800f580:	4618      	mov	r0, r3
 800f582:	f001 fe99 	bl	80112b8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2b02      	cmp	r3, #2
 800f58c:	d104      	bne.n	800f598 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2205      	movs	r2, #5
 800f592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800f596:	e003      	b.n	800f5a0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2201      	movs	r2, #1
 800f59c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b082      	sub	sp, #8
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d101      	bne.n	800f5c4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	e00e      	b.n	800f5e2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2202      	movs	r2, #2
 800f5c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	6839      	ldr	r1, [r7, #0]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f001 fe94 	bl	8011300 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2201      	movs	r2, #1
 800f5dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800f5e0:	2300      	movs	r3, #0
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3708      	adds	r7, #8
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b082      	sub	sp, #8
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d101      	bne.n	800f5fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	e049      	b.n	800f690 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f602:	b2db      	uxtb	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d106      	bne.n	800f616 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7f3 fc4b 	bl	8002eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2202      	movs	r2, #2
 800f61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	3304      	adds	r3, #4
 800f626:	4619      	mov	r1, r3
 800f628:	4610      	mov	r0, r2
 800f62a:	f001 f8e9 	bl	8010800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2201      	movs	r2, #1
 800f632:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2201      	movs	r2, #1
 800f63a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2201      	movs	r2, #1
 800f642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2201      	movs	r2, #1
 800f64a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2201      	movs	r2, #1
 800f652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2201      	movs	r2, #1
 800f65a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2201      	movs	r2, #1
 800f662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2201      	movs	r2, #1
 800f66a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2201      	movs	r2, #1
 800f672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2201      	movs	r2, #1
 800f67a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2201      	movs	r2, #1
 800f682:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d001      	beq.n	800f6b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	e054      	b.n	800f75a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2202      	movs	r2, #2
 800f6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	68da      	ldr	r2, [r3, #12]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f042 0201 	orr.w	r2, r2, #1
 800f6c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a26      	ldr	r2, [pc, #152]	; (800f768 <HAL_TIM_Base_Start_IT+0xd0>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d022      	beq.n	800f718 <HAL_TIM_Base_Start_IT+0x80>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6da:	d01d      	beq.n	800f718 <HAL_TIM_Base_Start_IT+0x80>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a22      	ldr	r2, [pc, #136]	; (800f76c <HAL_TIM_Base_Start_IT+0xd4>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d018      	beq.n	800f718 <HAL_TIM_Base_Start_IT+0x80>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4a21      	ldr	r2, [pc, #132]	; (800f770 <HAL_TIM_Base_Start_IT+0xd8>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d013      	beq.n	800f718 <HAL_TIM_Base_Start_IT+0x80>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a1f      	ldr	r2, [pc, #124]	; (800f774 <HAL_TIM_Base_Start_IT+0xdc>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d00e      	beq.n	800f718 <HAL_TIM_Base_Start_IT+0x80>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4a1e      	ldr	r2, [pc, #120]	; (800f778 <HAL_TIM_Base_Start_IT+0xe0>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d009      	beq.n	800f718 <HAL_TIM_Base_Start_IT+0x80>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a1c      	ldr	r2, [pc, #112]	; (800f77c <HAL_TIM_Base_Start_IT+0xe4>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d004      	beq.n	800f718 <HAL_TIM_Base_Start_IT+0x80>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4a1b      	ldr	r2, [pc, #108]	; (800f780 <HAL_TIM_Base_Start_IT+0xe8>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d115      	bne.n	800f744 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	689a      	ldr	r2, [r3, #8]
 800f71e:	4b19      	ldr	r3, [pc, #100]	; (800f784 <HAL_TIM_Base_Start_IT+0xec>)
 800f720:	4013      	ands	r3, r2
 800f722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	2b06      	cmp	r3, #6
 800f728:	d015      	beq.n	800f756 <HAL_TIM_Base_Start_IT+0xbe>
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f730:	d011      	beq.n	800f756 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f042 0201 	orr.w	r2, r2, #1
 800f740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f742:	e008      	b.n	800f756 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f042 0201 	orr.w	r2, r2, #1
 800f752:	601a      	str	r2, [r3, #0]
 800f754:	e000      	b.n	800f758 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f756:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3714      	adds	r7, #20
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	40010000 	.word	0x40010000
 800f76c:	40000400 	.word	0x40000400
 800f770:	40000800 	.word	0x40000800
 800f774:	40000c00 	.word	0x40000c00
 800f778:	40010400 	.word	0x40010400
 800f77c:	40014000 	.word	0x40014000
 800f780:	40001800 	.word	0x40001800
 800f784:	00010007 	.word	0x00010007

0800f788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d101      	bne.n	800f79a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f796:	2301      	movs	r3, #1
 800f798:	e049      	b.n	800f82e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 f841 	bl	800f836 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2202      	movs	r2, #2
 800f7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	3304      	adds	r3, #4
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4610      	mov	r0, r2
 800f7c8:	f001 f81a 	bl	8010800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2201      	movs	r2, #1
 800f808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2201      	movs	r2, #1
 800f820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2201      	movs	r2, #1
 800f828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f82c:	2300      	movs	r3, #0
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f836:	b480      	push	{r7}
 800f838:	b083      	sub	sp, #12
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f83e:	bf00      	nop
 800f840:	370c      	adds	r7, #12
 800f842:	46bd      	mov	sp, r7
 800f844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f848:	4770      	bx	lr
	...

0800f84c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d109      	bne.n	800f870 <HAL_TIM_PWM_Start+0x24>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f862:	b2db      	uxtb	r3, r3
 800f864:	2b01      	cmp	r3, #1
 800f866:	bf14      	ite	ne
 800f868:	2301      	movne	r3, #1
 800f86a:	2300      	moveq	r3, #0
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	e03c      	b.n	800f8ea <HAL_TIM_PWM_Start+0x9e>
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	2b04      	cmp	r3, #4
 800f874:	d109      	bne.n	800f88a <HAL_TIM_PWM_Start+0x3e>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	2b01      	cmp	r3, #1
 800f880:	bf14      	ite	ne
 800f882:	2301      	movne	r3, #1
 800f884:	2300      	moveq	r3, #0
 800f886:	b2db      	uxtb	r3, r3
 800f888:	e02f      	b.n	800f8ea <HAL_TIM_PWM_Start+0x9e>
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	2b08      	cmp	r3, #8
 800f88e:	d109      	bne.n	800f8a4 <HAL_TIM_PWM_Start+0x58>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f896:	b2db      	uxtb	r3, r3
 800f898:	2b01      	cmp	r3, #1
 800f89a:	bf14      	ite	ne
 800f89c:	2301      	movne	r3, #1
 800f89e:	2300      	moveq	r3, #0
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	e022      	b.n	800f8ea <HAL_TIM_PWM_Start+0x9e>
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	2b0c      	cmp	r3, #12
 800f8a8:	d109      	bne.n	800f8be <HAL_TIM_PWM_Start+0x72>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	bf14      	ite	ne
 800f8b6:	2301      	movne	r3, #1
 800f8b8:	2300      	moveq	r3, #0
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	e015      	b.n	800f8ea <HAL_TIM_PWM_Start+0x9e>
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	2b10      	cmp	r3, #16
 800f8c2:	d109      	bne.n	800f8d8 <HAL_TIM_PWM_Start+0x8c>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	bf14      	ite	ne
 800f8d0:	2301      	movne	r3, #1
 800f8d2:	2300      	moveq	r3, #0
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	e008      	b.n	800f8ea <HAL_TIM_PWM_Start+0x9e>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	bf14      	ite	ne
 800f8e4:	2301      	movne	r3, #1
 800f8e6:	2300      	moveq	r3, #0
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d001      	beq.n	800f8f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e092      	b.n	800fa18 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d104      	bne.n	800f902 <HAL_TIM_PWM_Start+0xb6>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2202      	movs	r2, #2
 800f8fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f900:	e023      	b.n	800f94a <HAL_TIM_PWM_Start+0xfe>
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b04      	cmp	r3, #4
 800f906:	d104      	bne.n	800f912 <HAL_TIM_PWM_Start+0xc6>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2202      	movs	r2, #2
 800f90c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f910:	e01b      	b.n	800f94a <HAL_TIM_PWM_Start+0xfe>
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	2b08      	cmp	r3, #8
 800f916:	d104      	bne.n	800f922 <HAL_TIM_PWM_Start+0xd6>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2202      	movs	r2, #2
 800f91c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f920:	e013      	b.n	800f94a <HAL_TIM_PWM_Start+0xfe>
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	2b0c      	cmp	r3, #12
 800f926:	d104      	bne.n	800f932 <HAL_TIM_PWM_Start+0xe6>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2202      	movs	r2, #2
 800f92c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f930:	e00b      	b.n	800f94a <HAL_TIM_PWM_Start+0xfe>
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	2b10      	cmp	r3, #16
 800f936:	d104      	bne.n	800f942 <HAL_TIM_PWM_Start+0xf6>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2202      	movs	r2, #2
 800f93c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f940:	e003      	b.n	800f94a <HAL_TIM_PWM_Start+0xfe>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2202      	movs	r2, #2
 800f946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2201      	movs	r2, #1
 800f950:	6839      	ldr	r1, [r7, #0]
 800f952:	4618      	mov	r0, r3
 800f954:	f001 faec 	bl	8010f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4a30      	ldr	r2, [pc, #192]	; (800fa20 <HAL_TIM_PWM_Start+0x1d4>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d004      	beq.n	800f96c <HAL_TIM_PWM_Start+0x120>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a2f      	ldr	r2, [pc, #188]	; (800fa24 <HAL_TIM_PWM_Start+0x1d8>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d101      	bne.n	800f970 <HAL_TIM_PWM_Start+0x124>
 800f96c:	2301      	movs	r3, #1
 800f96e:	e000      	b.n	800f972 <HAL_TIM_PWM_Start+0x126>
 800f970:	2300      	movs	r3, #0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d007      	beq.n	800f986 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f984:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	4a25      	ldr	r2, [pc, #148]	; (800fa20 <HAL_TIM_PWM_Start+0x1d4>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d022      	beq.n	800f9d6 <HAL_TIM_PWM_Start+0x18a>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f998:	d01d      	beq.n	800f9d6 <HAL_TIM_PWM_Start+0x18a>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4a22      	ldr	r2, [pc, #136]	; (800fa28 <HAL_TIM_PWM_Start+0x1dc>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d018      	beq.n	800f9d6 <HAL_TIM_PWM_Start+0x18a>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a20      	ldr	r2, [pc, #128]	; (800fa2c <HAL_TIM_PWM_Start+0x1e0>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d013      	beq.n	800f9d6 <HAL_TIM_PWM_Start+0x18a>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	4a1f      	ldr	r2, [pc, #124]	; (800fa30 <HAL_TIM_PWM_Start+0x1e4>)
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d00e      	beq.n	800f9d6 <HAL_TIM_PWM_Start+0x18a>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4a19      	ldr	r2, [pc, #100]	; (800fa24 <HAL_TIM_PWM_Start+0x1d8>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d009      	beq.n	800f9d6 <HAL_TIM_PWM_Start+0x18a>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	4a1b      	ldr	r2, [pc, #108]	; (800fa34 <HAL_TIM_PWM_Start+0x1e8>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d004      	beq.n	800f9d6 <HAL_TIM_PWM_Start+0x18a>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4a19      	ldr	r2, [pc, #100]	; (800fa38 <HAL_TIM_PWM_Start+0x1ec>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d115      	bne.n	800fa02 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	689a      	ldr	r2, [r3, #8]
 800f9dc:	4b17      	ldr	r3, [pc, #92]	; (800fa3c <HAL_TIM_PWM_Start+0x1f0>)
 800f9de:	4013      	ands	r3, r2
 800f9e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2b06      	cmp	r3, #6
 800f9e6:	d015      	beq.n	800fa14 <HAL_TIM_PWM_Start+0x1c8>
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9ee:	d011      	beq.n	800fa14 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f042 0201 	orr.w	r2, r2, #1
 800f9fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa00:	e008      	b.n	800fa14 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f042 0201 	orr.w	r2, r2, #1
 800fa10:	601a      	str	r2, [r3, #0]
 800fa12:	e000      	b.n	800fa16 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	40010000 	.word	0x40010000
 800fa24:	40010400 	.word	0x40010400
 800fa28:	40000400 	.word	0x40000400
 800fa2c:	40000800 	.word	0x40000800
 800fa30:	40000c00 	.word	0x40000c00
 800fa34:	40014000 	.word	0x40014000
 800fa38:	40001800 	.word	0x40001800
 800fa3c:	00010007 	.word	0x00010007

0800fa40 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b086      	sub	sp, #24
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
 800fa4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d109      	bne.n	800fa68 <HAL_TIM_PWM_Start_DMA+0x28>
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	bf0c      	ite	eq
 800fa60:	2301      	moveq	r3, #1
 800fa62:	2300      	movne	r3, #0
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	e03c      	b.n	800fae2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	2b04      	cmp	r3, #4
 800fa6c:	d109      	bne.n	800fa82 <HAL_TIM_PWM_Start_DMA+0x42>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	bf0c      	ite	eq
 800fa7a:	2301      	moveq	r3, #1
 800fa7c:	2300      	movne	r3, #0
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	e02f      	b.n	800fae2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	2b08      	cmp	r3, #8
 800fa86:	d109      	bne.n	800fa9c <HAL_TIM_PWM_Start_DMA+0x5c>
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	bf0c      	ite	eq
 800fa94:	2301      	moveq	r3, #1
 800fa96:	2300      	movne	r3, #0
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	e022      	b.n	800fae2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2b0c      	cmp	r3, #12
 800faa0:	d109      	bne.n	800fab6 <HAL_TIM_PWM_Start_DMA+0x76>
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	2b02      	cmp	r3, #2
 800faac:	bf0c      	ite	eq
 800faae:	2301      	moveq	r3, #1
 800fab0:	2300      	movne	r3, #0
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	e015      	b.n	800fae2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	2b10      	cmp	r3, #16
 800faba:	d109      	bne.n	800fad0 <HAL_TIM_PWM_Start_DMA+0x90>
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	bf0c      	ite	eq
 800fac8:	2301      	moveq	r3, #1
 800faca:	2300      	movne	r3, #0
 800facc:	b2db      	uxtb	r3, r3
 800face:	e008      	b.n	800fae2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	2b02      	cmp	r3, #2
 800fada:	bf0c      	ite	eq
 800fadc:	2301      	moveq	r3, #1
 800fade:	2300      	movne	r3, #0
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d001      	beq.n	800faea <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800fae6:	2302      	movs	r3, #2
 800fae8:	e19c      	b.n	800fe24 <HAL_TIM_PWM_Start_DMA+0x3e4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d109      	bne.n	800fb04 <HAL_TIM_PWM_Start_DMA+0xc4>
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	bf0c      	ite	eq
 800fafc:	2301      	moveq	r3, #1
 800fafe:	2300      	movne	r3, #0
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	e03c      	b.n	800fb7e <HAL_TIM_PWM_Start_DMA+0x13e>
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	2b04      	cmp	r3, #4
 800fb08:	d109      	bne.n	800fb1e <HAL_TIM_PWM_Start_DMA+0xde>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	bf0c      	ite	eq
 800fb16:	2301      	moveq	r3, #1
 800fb18:	2300      	movne	r3, #0
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	e02f      	b.n	800fb7e <HAL_TIM_PWM_Start_DMA+0x13e>
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	2b08      	cmp	r3, #8
 800fb22:	d109      	bne.n	800fb38 <HAL_TIM_PWM_Start_DMA+0xf8>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	bf0c      	ite	eq
 800fb30:	2301      	moveq	r3, #1
 800fb32:	2300      	movne	r3, #0
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	e022      	b.n	800fb7e <HAL_TIM_PWM_Start_DMA+0x13e>
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	2b0c      	cmp	r3, #12
 800fb3c:	d109      	bne.n	800fb52 <HAL_TIM_PWM_Start_DMA+0x112>
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	bf0c      	ite	eq
 800fb4a:	2301      	moveq	r3, #1
 800fb4c:	2300      	movne	r3, #0
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	e015      	b.n	800fb7e <HAL_TIM_PWM_Start_DMA+0x13e>
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	2b10      	cmp	r3, #16
 800fb56:	d109      	bne.n	800fb6c <HAL_TIM_PWM_Start_DMA+0x12c>
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	bf0c      	ite	eq
 800fb64:	2301      	moveq	r3, #1
 800fb66:	2300      	movne	r3, #0
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	e008      	b.n	800fb7e <HAL_TIM_PWM_Start_DMA+0x13e>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	bf0c      	ite	eq
 800fb78:	2301      	moveq	r3, #1
 800fb7a:	2300      	movne	r3, #0
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d034      	beq.n	800fbec <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d104      	bne.n	800fb92 <HAL_TIM_PWM_Start_DMA+0x152>
 800fb88:	887b      	ldrh	r3, [r7, #2]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d001      	beq.n	800fb92 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	e148      	b.n	800fe24 <HAL_TIM_PWM_Start_DMA+0x3e4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d104      	bne.n	800fba2 <HAL_TIM_PWM_Start_DMA+0x162>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fba0:	e026      	b.n	800fbf0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	2b04      	cmp	r3, #4
 800fba6:	d104      	bne.n	800fbb2 <HAL_TIM_PWM_Start_DMA+0x172>
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2202      	movs	r2, #2
 800fbac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fbb0:	e01e      	b.n	800fbf0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	2b08      	cmp	r3, #8
 800fbb6:	d104      	bne.n	800fbc2 <HAL_TIM_PWM_Start_DMA+0x182>
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2202      	movs	r2, #2
 800fbbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fbc0:	e016      	b.n	800fbf0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	2b0c      	cmp	r3, #12
 800fbc6:	d104      	bne.n	800fbd2 <HAL_TIM_PWM_Start_DMA+0x192>
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2202      	movs	r2, #2
 800fbcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fbd0:	e00e      	b.n	800fbf0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	2b10      	cmp	r3, #16
 800fbd6:	d104      	bne.n	800fbe2 <HAL_TIM_PWM_Start_DMA+0x1a2>
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2202      	movs	r2, #2
 800fbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbe0:	e006      	b.n	800fbf0 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2202      	movs	r2, #2
 800fbe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fbea:	e001      	b.n	800fbf0 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 800fbec:	2301      	movs	r3, #1
 800fbee:	e119      	b.n	800fe24 <HAL_TIM_PWM_Start_DMA+0x3e4>
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	2b0c      	cmp	r3, #12
 800fbf4:	f200 80ae 	bhi.w	800fd54 <HAL_TIM_PWM_Start_DMA+0x314>
 800fbf8:	a201      	add	r2, pc, #4	; (adr r2, 800fc00 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800fbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbfe:	bf00      	nop
 800fc00:	0800fc35 	.word	0x0800fc35
 800fc04:	0800fd55 	.word	0x0800fd55
 800fc08:	0800fd55 	.word	0x0800fd55
 800fc0c:	0800fd55 	.word	0x0800fd55
 800fc10:	0800fc7d 	.word	0x0800fc7d
 800fc14:	0800fd55 	.word	0x0800fd55
 800fc18:	0800fd55 	.word	0x0800fd55
 800fc1c:	0800fd55 	.word	0x0800fd55
 800fc20:	0800fcc5 	.word	0x0800fcc5
 800fc24:	0800fd55 	.word	0x0800fd55
 800fc28:	0800fd55 	.word	0x0800fd55
 800fc2c:	0800fd55 	.word	0x0800fd55
 800fc30:	0800fd0d 	.word	0x0800fd0d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc38:	4a7c      	ldr	r2, [pc, #496]	; (800fe2c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800fc3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc40:	4a7b      	ldr	r2, [pc, #492]	; (800fe30 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800fc42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc48:	4a7a      	ldr	r2, [pc, #488]	; (800fe34 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800fc4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fc50:	6879      	ldr	r1, [r7, #4]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	3334      	adds	r3, #52	; 0x34
 800fc58:	461a      	mov	r2, r3
 800fc5a:	887b      	ldrh	r3, [r7, #2]
 800fc5c:	f7fc f8a6 	bl	800bdac <HAL_DMA_Start_IT>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	e0dc      	b.n	800fe24 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	68da      	ldr	r2, [r3, #12]
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc78:	60da      	str	r2, [r3, #12]
      break;
 800fc7a:	e06c      	b.n	800fd56 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc80:	4a6a      	ldr	r2, [pc, #424]	; (800fe2c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800fc82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc88:	4a69      	ldr	r2, [pc, #420]	; (800fe30 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800fc8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc90:	4a68      	ldr	r2, [pc, #416]	; (800fe34 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800fc92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fc98:	6879      	ldr	r1, [r7, #4]
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	3338      	adds	r3, #56	; 0x38
 800fca0:	461a      	mov	r2, r3
 800fca2:	887b      	ldrh	r3, [r7, #2]
 800fca4:	f7fc f882 	bl	800bdac <HAL_DMA_Start_IT>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d001      	beq.n	800fcb2 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e0b8      	b.n	800fe24 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	68da      	ldr	r2, [r3, #12]
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fcc0:	60da      	str	r2, [r3, #12]
      break;
 800fcc2:	e048      	b.n	800fd56 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc8:	4a58      	ldr	r2, [pc, #352]	; (800fe2c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800fcca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd0:	4a57      	ldr	r2, [pc, #348]	; (800fe30 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800fcd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd8:	4a56      	ldr	r2, [pc, #344]	; (800fe34 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800fcda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fce0:	6879      	ldr	r1, [r7, #4]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	333c      	adds	r3, #60	; 0x3c
 800fce8:	461a      	mov	r2, r3
 800fcea:	887b      	ldrh	r3, [r7, #2]
 800fcec:	f7fc f85e 	bl	800bdac <HAL_DMA_Start_IT>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d001      	beq.n	800fcfa <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	e094      	b.n	800fe24 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	68da      	ldr	r2, [r3, #12]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd08:	60da      	str	r2, [r3, #12]
      break;
 800fd0a:	e024      	b.n	800fd56 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd10:	4a46      	ldr	r2, [pc, #280]	; (800fe2c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800fd12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd18:	4a45      	ldr	r2, [pc, #276]	; (800fe30 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800fd1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd20:	4a44      	ldr	r2, [pc, #272]	; (800fe34 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800fd22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fd28:	6879      	ldr	r1, [r7, #4]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	3340      	adds	r3, #64	; 0x40
 800fd30:	461a      	mov	r2, r3
 800fd32:	887b      	ldrh	r3, [r7, #2]
 800fd34:	f7fc f83a 	bl	800bdac <HAL_DMA_Start_IT>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d001      	beq.n	800fd42 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e070      	b.n	800fe24 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68da      	ldr	r2, [r3, #12]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fd50:	60da      	str	r2, [r3, #12]
      break;
 800fd52:	e000      	b.n	800fd56 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 800fd54:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	68b9      	ldr	r1, [r7, #8]
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f001 f8e6 	bl	8010f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a33      	ldr	r2, [pc, #204]	; (800fe38 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d004      	beq.n	800fd78 <HAL_TIM_PWM_Start_DMA+0x338>
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a32      	ldr	r2, [pc, #200]	; (800fe3c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d101      	bne.n	800fd7c <HAL_TIM_PWM_Start_DMA+0x33c>
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e000      	b.n	800fd7e <HAL_TIM_PWM_Start_DMA+0x33e>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d007      	beq.n	800fd92 <HAL_TIM_PWM_Start_DMA+0x352>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a28      	ldr	r2, [pc, #160]	; (800fe38 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d022      	beq.n	800fde2 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fda4:	d01d      	beq.n	800fde2 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4a25      	ldr	r2, [pc, #148]	; (800fe40 <HAL_TIM_PWM_Start_DMA+0x400>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d018      	beq.n	800fde2 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4a23      	ldr	r2, [pc, #140]	; (800fe44 <HAL_TIM_PWM_Start_DMA+0x404>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d013      	beq.n	800fde2 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4a22      	ldr	r2, [pc, #136]	; (800fe48 <HAL_TIM_PWM_Start_DMA+0x408>)
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d00e      	beq.n	800fde2 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4a1c      	ldr	r2, [pc, #112]	; (800fe3c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d009      	beq.n	800fde2 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	4a1e      	ldr	r2, [pc, #120]	; (800fe4c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d004      	beq.n	800fde2 <HAL_TIM_PWM_Start_DMA+0x3a2>
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4a1c      	ldr	r2, [pc, #112]	; (800fe50 <HAL_TIM_PWM_Start_DMA+0x410>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d115      	bne.n	800fe0e <HAL_TIM_PWM_Start_DMA+0x3ce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	689a      	ldr	r2, [r3, #8]
 800fde8:	4b1a      	ldr	r3, [pc, #104]	; (800fe54 <HAL_TIM_PWM_Start_DMA+0x414>)
 800fdea:	4013      	ands	r3, r2
 800fdec:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2b06      	cmp	r3, #6
 800fdf2:	d015      	beq.n	800fe20 <HAL_TIM_PWM_Start_DMA+0x3e0>
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdfa:	d011      	beq.n	800fe20 <HAL_TIM_PWM_Start_DMA+0x3e0>
    {
      __HAL_TIM_ENABLE(htim);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f042 0201 	orr.w	r2, r2, #1
 800fe0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe0c:	e008      	b.n	800fe20 <HAL_TIM_PWM_Start_DMA+0x3e0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f042 0201 	orr.w	r2, r2, #1
 800fe1c:	601a      	str	r2, [r3, #0]
 800fe1e:	e000      	b.n	800fe22 <HAL_TIM_PWM_Start_DMA+0x3e2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3718      	adds	r7, #24
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	080106ef 	.word	0x080106ef
 800fe30:	08010797 	.word	0x08010797
 800fe34:	0801065d 	.word	0x0801065d
 800fe38:	40010000 	.word	0x40010000
 800fe3c:	40010400 	.word	0x40010400
 800fe40:	40000400 	.word	0x40000400
 800fe44:	40000800 	.word	0x40000800
 800fe48:	40000c00 	.word	0x40000c00
 800fe4c:	40014000 	.word	0x40014000
 800fe50:	40001800 	.word	0x40001800
 800fe54:	00010007 	.word	0x00010007

0800fe58 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	2b0c      	cmp	r3, #12
 800fe66:	d855      	bhi.n	800ff14 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800fe68:	a201      	add	r2, pc, #4	; (adr r2, 800fe70 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800fe6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6e:	bf00      	nop
 800fe70:	0800fea5 	.word	0x0800fea5
 800fe74:	0800ff15 	.word	0x0800ff15
 800fe78:	0800ff15 	.word	0x0800ff15
 800fe7c:	0800ff15 	.word	0x0800ff15
 800fe80:	0800fec1 	.word	0x0800fec1
 800fe84:	0800ff15 	.word	0x0800ff15
 800fe88:	0800ff15 	.word	0x0800ff15
 800fe8c:	0800ff15 	.word	0x0800ff15
 800fe90:	0800fedd 	.word	0x0800fedd
 800fe94:	0800ff15 	.word	0x0800ff15
 800fe98:	0800ff15 	.word	0x0800ff15
 800fe9c:	0800ff15 	.word	0x0800ff15
 800fea0:	0800fef9 	.word	0x0800fef9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	68da      	ldr	r2, [r3, #12]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800feb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fb ffd7 	bl	800be6c <HAL_DMA_Abort_IT>
      break;
 800febe:	e02a      	b.n	800ff16 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	68da      	ldr	r2, [r3, #12]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fece:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fb ffc9 	bl	800be6c <HAL_DMA_Abort_IT>
      break;
 800feda:	e01c      	b.n	800ff16 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	68da      	ldr	r2, [r3, #12]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800feea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7fb ffbb 	bl	800be6c <HAL_DMA_Abort_IT>
      break;
 800fef6:	e00e      	b.n	800ff16 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	68da      	ldr	r2, [r3, #12]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ff06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fb ffad 	bl	800be6c <HAL_DMA_Abort_IT>
      break;
 800ff12:	e000      	b.n	800ff16 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800ff14:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	6839      	ldr	r1, [r7, #0]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f001 f806 	bl	8010f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4a36      	ldr	r2, [pc, #216]	; (8010004 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d004      	beq.n	800ff38 <HAL_TIM_PWM_Stop_DMA+0xe0>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4a35      	ldr	r2, [pc, #212]	; (8010008 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d101      	bne.n	800ff3c <HAL_TIM_PWM_Stop_DMA+0xe4>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	e000      	b.n	800ff3e <HAL_TIM_PWM_Stop_DMA+0xe6>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d017      	beq.n	800ff72 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	6a1a      	ldr	r2, [r3, #32]
 800ff48:	f241 1311 	movw	r3, #4369	; 0x1111
 800ff4c:	4013      	ands	r3, r2
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d10f      	bne.n	800ff72 <HAL_TIM_PWM_Stop_DMA+0x11a>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	6a1a      	ldr	r2, [r3, #32]
 800ff58:	f240 4344 	movw	r3, #1092	; 0x444
 800ff5c:	4013      	ands	r3, r2
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d107      	bne.n	800ff72 <HAL_TIM_PWM_Stop_DMA+0x11a>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ff70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	6a1a      	ldr	r2, [r3, #32]
 800ff78:	f241 1311 	movw	r3, #4369	; 0x1111
 800ff7c:	4013      	ands	r3, r2
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d10f      	bne.n	800ffa2 <HAL_TIM_PWM_Stop_DMA+0x14a>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	6a1a      	ldr	r2, [r3, #32]
 800ff88:	f240 4344 	movw	r3, #1092	; 0x444
 800ff8c:	4013      	ands	r3, r2
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d107      	bne.n	800ffa2 <HAL_TIM_PWM_Stop_DMA+0x14a>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f022 0201 	bic.w	r2, r2, #1
 800ffa0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d104      	bne.n	800ffb2 <HAL_TIM_PWM_Stop_DMA+0x15a>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ffb0:	e023      	b.n	800fffa <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	2b04      	cmp	r3, #4
 800ffb6:	d104      	bne.n	800ffc2 <HAL_TIM_PWM_Stop_DMA+0x16a>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ffc0:	e01b      	b.n	800fffa <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	2b08      	cmp	r3, #8
 800ffc6:	d104      	bne.n	800ffd2 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ffd0:	e013      	b.n	800fffa <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	2b0c      	cmp	r3, #12
 800ffd6:	d104      	bne.n	800ffe2 <HAL_TIM_PWM_Stop_DMA+0x18a>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffe0:	e00b      	b.n	800fffa <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	2b10      	cmp	r3, #16
 800ffe6:	d104      	bne.n	800fff2 <HAL_TIM_PWM_Stop_DMA+0x19a>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2201      	movs	r2, #1
 800ffec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fff0:	e003      	b.n	800fffa <HAL_TIM_PWM_Stop_DMA+0x1a2>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2201      	movs	r2, #1
 800fff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	40010000 	.word	0x40010000
 8010008:	40010400 	.word	0x40010400

0801000c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	691b      	ldr	r3, [r3, #16]
 801001a:	f003 0302 	and.w	r3, r3, #2
 801001e:	2b02      	cmp	r3, #2
 8010020:	d122      	bne.n	8010068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	f003 0302 	and.w	r3, r3, #2
 801002c:	2b02      	cmp	r3, #2
 801002e:	d11b      	bne.n	8010068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f06f 0202 	mvn.w	r2, #2
 8010038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2201      	movs	r2, #1
 801003e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	699b      	ldr	r3, [r3, #24]
 8010046:	f003 0303 	and.w	r3, r3, #3
 801004a:	2b00      	cmp	r3, #0
 801004c:	d003      	beq.n	8010056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 fadc 	bl	801060c <HAL_TIM_IC_CaptureCallback>
 8010054:	e005      	b.n	8010062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 face 	bl	80105f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7f0 fcb7 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	691b      	ldr	r3, [r3, #16]
 801006e:	f003 0304 	and.w	r3, r3, #4
 8010072:	2b04      	cmp	r3, #4
 8010074:	d122      	bne.n	80100bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	f003 0304 	and.w	r3, r3, #4
 8010080:	2b04      	cmp	r3, #4
 8010082:	d11b      	bne.n	80100bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f06f 0204 	mvn.w	r2, #4
 801008c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2202      	movs	r2, #2
 8010092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	699b      	ldr	r3, [r3, #24]
 801009a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d003      	beq.n	80100aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 fab2 	bl	801060c <HAL_TIM_IC_CaptureCallback>
 80100a8:	e005      	b.n	80100b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 faa4 	bl	80105f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f7f0 fc8d 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	691b      	ldr	r3, [r3, #16]
 80100c2:	f003 0308 	and.w	r3, r3, #8
 80100c6:	2b08      	cmp	r3, #8
 80100c8:	d122      	bne.n	8010110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	f003 0308 	and.w	r3, r3, #8
 80100d4:	2b08      	cmp	r3, #8
 80100d6:	d11b      	bne.n	8010110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f06f 0208 	mvn.w	r2, #8
 80100e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2204      	movs	r2, #4
 80100e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	69db      	ldr	r3, [r3, #28]
 80100ee:	f003 0303 	and.w	r3, r3, #3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d003      	beq.n	80100fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 fa88 	bl	801060c <HAL_TIM_IC_CaptureCallback>
 80100fc:	e005      	b.n	801010a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f000 fa7a 	bl	80105f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7f0 fc63 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	691b      	ldr	r3, [r3, #16]
 8010116:	f003 0310 	and.w	r3, r3, #16
 801011a:	2b10      	cmp	r3, #16
 801011c:	d122      	bne.n	8010164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	f003 0310 	and.w	r3, r3, #16
 8010128:	2b10      	cmp	r3, #16
 801012a:	d11b      	bne.n	8010164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f06f 0210 	mvn.w	r2, #16
 8010134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2208      	movs	r2, #8
 801013a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	69db      	ldr	r3, [r3, #28]
 8010142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010146:	2b00      	cmp	r3, #0
 8010148:	d003      	beq.n	8010152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 fa5e 	bl	801060c <HAL_TIM_IC_CaptureCallback>
 8010150:	e005      	b.n	801015e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 fa50 	bl	80105f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7f0 fc39 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	f003 0301 	and.w	r3, r3, #1
 801016e:	2b01      	cmp	r3, #1
 8010170:	d10e      	bne.n	8010190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	f003 0301 	and.w	r3, r3, #1
 801017c:	2b01      	cmp	r3, #1
 801017e:	d107      	bne.n	8010190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f06f 0201 	mvn.w	r2, #1
 8010188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f7f2 fb00 	bl	8002790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	691b      	ldr	r3, [r3, #16]
 8010196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801019a:	2b80      	cmp	r3, #128	; 0x80
 801019c:	d10e      	bne.n	80101bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101a8:	2b80      	cmp	r3, #128	; 0x80
 80101aa:	d107      	bne.n	80101bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80101b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 ff78 	bl	80110ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	691b      	ldr	r3, [r3, #16]
 80101c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101ca:	d10e      	bne.n	80101ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101d6:	2b80      	cmp	r3, #128	; 0x80
 80101d8:	d107      	bne.n	80101ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80101e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 ff6b 	bl	80110c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	691b      	ldr	r3, [r3, #16]
 80101f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101f4:	2b40      	cmp	r3, #64	; 0x40
 80101f6:	d10e      	bne.n	8010216 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	68db      	ldr	r3, [r3, #12]
 80101fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010202:	2b40      	cmp	r3, #64	; 0x40
 8010204:	d107      	bne.n	8010216 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801020e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 fa0f 	bl	8010634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	f003 0320 	and.w	r3, r3, #32
 8010220:	2b20      	cmp	r3, #32
 8010222:	d10e      	bne.n	8010242 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	68db      	ldr	r3, [r3, #12]
 801022a:	f003 0320 	and.w	r3, r3, #32
 801022e:	2b20      	cmp	r3, #32
 8010230:	d107      	bne.n	8010242 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f06f 0220 	mvn.w	r2, #32
 801023a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f000 ff2b 	bl	8011098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010242:	bf00      	nop
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
	...

0801024c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801025e:	2b01      	cmp	r3, #1
 8010260:	d101      	bne.n	8010266 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010262:	2302      	movs	r3, #2
 8010264:	e0fd      	b.n	8010462 <HAL_TIM_PWM_ConfigChannel+0x216>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2201      	movs	r2, #1
 801026a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2b14      	cmp	r3, #20
 8010272:	f200 80f0 	bhi.w	8010456 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010276:	a201      	add	r2, pc, #4	; (adr r2, 801027c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027c:	080102d1 	.word	0x080102d1
 8010280:	08010457 	.word	0x08010457
 8010284:	08010457 	.word	0x08010457
 8010288:	08010457 	.word	0x08010457
 801028c:	08010311 	.word	0x08010311
 8010290:	08010457 	.word	0x08010457
 8010294:	08010457 	.word	0x08010457
 8010298:	08010457 	.word	0x08010457
 801029c:	08010353 	.word	0x08010353
 80102a0:	08010457 	.word	0x08010457
 80102a4:	08010457 	.word	0x08010457
 80102a8:	08010457 	.word	0x08010457
 80102ac:	08010393 	.word	0x08010393
 80102b0:	08010457 	.word	0x08010457
 80102b4:	08010457 	.word	0x08010457
 80102b8:	08010457 	.word	0x08010457
 80102bc:	080103d5 	.word	0x080103d5
 80102c0:	08010457 	.word	0x08010457
 80102c4:	08010457 	.word	0x08010457
 80102c8:	08010457 	.word	0x08010457
 80102cc:	08010415 	.word	0x08010415
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	68b9      	ldr	r1, [r7, #8]
 80102d6:	4618      	mov	r0, r3
 80102d8:	f000 fb32 	bl	8010940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	699a      	ldr	r2, [r3, #24]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f042 0208 	orr.w	r2, r2, #8
 80102ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	699a      	ldr	r2, [r3, #24]
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f022 0204 	bic.w	r2, r2, #4
 80102fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	6999      	ldr	r1, [r3, #24]
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	691a      	ldr	r2, [r3, #16]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	430a      	orrs	r2, r1
 801030c:	619a      	str	r2, [r3, #24]
      break;
 801030e:	e0a3      	b.n	8010458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	68b9      	ldr	r1, [r7, #8]
 8010316:	4618      	mov	r0, r3
 8010318:	f000 fb84 	bl	8010a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	699a      	ldr	r2, [r3, #24]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801032a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	699a      	ldr	r2, [r3, #24]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801033a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	6999      	ldr	r1, [r3, #24]
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	691b      	ldr	r3, [r3, #16]
 8010346:	021a      	lsls	r2, r3, #8
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	430a      	orrs	r2, r1
 801034e:	619a      	str	r2, [r3, #24]
      break;
 8010350:	e082      	b.n	8010458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	68b9      	ldr	r1, [r7, #8]
 8010358:	4618      	mov	r0, r3
 801035a:	f000 fbdb 	bl	8010b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	69da      	ldr	r2, [r3, #28]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f042 0208 	orr.w	r2, r2, #8
 801036c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	69da      	ldr	r2, [r3, #28]
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f022 0204 	bic.w	r2, r2, #4
 801037c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	69d9      	ldr	r1, [r3, #28]
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	691a      	ldr	r2, [r3, #16]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	430a      	orrs	r2, r1
 801038e:	61da      	str	r2, [r3, #28]
      break;
 8010390:	e062      	b.n	8010458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	68b9      	ldr	r1, [r7, #8]
 8010398:	4618      	mov	r0, r3
 801039a:	f000 fc31 	bl	8010c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	69da      	ldr	r2, [r3, #28]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80103ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	69da      	ldr	r2, [r3, #28]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	69d9      	ldr	r1, [r3, #28]
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	691b      	ldr	r3, [r3, #16]
 80103c8:	021a      	lsls	r2, r3, #8
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	430a      	orrs	r2, r1
 80103d0:	61da      	str	r2, [r3, #28]
      break;
 80103d2:	e041      	b.n	8010458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	68b9      	ldr	r1, [r7, #8]
 80103da:	4618      	mov	r0, r3
 80103dc:	f000 fc68 	bl	8010cb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f042 0208 	orr.w	r2, r2, #8
 80103ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f022 0204 	bic.w	r2, r2, #4
 80103fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	691a      	ldr	r2, [r3, #16]
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	430a      	orrs	r2, r1
 8010410:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010412:	e021      	b.n	8010458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	68b9      	ldr	r1, [r7, #8]
 801041a:	4618      	mov	r0, r3
 801041c:	f000 fc9a 	bl	8010d54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801042e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801043e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	691b      	ldr	r3, [r3, #16]
 801044a:	021a      	lsls	r2, r3, #8
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	430a      	orrs	r2, r1
 8010452:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010454:	e000      	b.n	8010458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2200      	movs	r2, #0
 801045c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010460:	2300      	movs	r3, #0
}
 8010462:	4618      	mov	r0, r3
 8010464:	3710      	adds	r7, #16
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop

0801046c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801047c:	2b01      	cmp	r3, #1
 801047e:	d101      	bne.n	8010484 <HAL_TIM_ConfigClockSource+0x18>
 8010480:	2302      	movs	r3, #2
 8010482:	e0b3      	b.n	80105ec <HAL_TIM_ConfigClockSource+0x180>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2201      	movs	r2, #1
 8010488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2202      	movs	r2, #2
 8010490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	689b      	ldr	r3, [r3, #8]
 801049a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	4b55      	ldr	r3, [pc, #340]	; (80105f4 <HAL_TIM_ConfigClockSource+0x188>)
 80104a0:	4013      	ands	r3, r2
 80104a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80104aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68fa      	ldr	r2, [r7, #12]
 80104b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80104bc:	d03e      	beq.n	801053c <HAL_TIM_ConfigClockSource+0xd0>
 80104be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80104c2:	f200 8087 	bhi.w	80105d4 <HAL_TIM_ConfigClockSource+0x168>
 80104c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104ca:	f000 8085 	beq.w	80105d8 <HAL_TIM_ConfigClockSource+0x16c>
 80104ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104d2:	d87f      	bhi.n	80105d4 <HAL_TIM_ConfigClockSource+0x168>
 80104d4:	2b70      	cmp	r3, #112	; 0x70
 80104d6:	d01a      	beq.n	801050e <HAL_TIM_ConfigClockSource+0xa2>
 80104d8:	2b70      	cmp	r3, #112	; 0x70
 80104da:	d87b      	bhi.n	80105d4 <HAL_TIM_ConfigClockSource+0x168>
 80104dc:	2b60      	cmp	r3, #96	; 0x60
 80104de:	d050      	beq.n	8010582 <HAL_TIM_ConfigClockSource+0x116>
 80104e0:	2b60      	cmp	r3, #96	; 0x60
 80104e2:	d877      	bhi.n	80105d4 <HAL_TIM_ConfigClockSource+0x168>
 80104e4:	2b50      	cmp	r3, #80	; 0x50
 80104e6:	d03c      	beq.n	8010562 <HAL_TIM_ConfigClockSource+0xf6>
 80104e8:	2b50      	cmp	r3, #80	; 0x50
 80104ea:	d873      	bhi.n	80105d4 <HAL_TIM_ConfigClockSource+0x168>
 80104ec:	2b40      	cmp	r3, #64	; 0x40
 80104ee:	d058      	beq.n	80105a2 <HAL_TIM_ConfigClockSource+0x136>
 80104f0:	2b40      	cmp	r3, #64	; 0x40
 80104f2:	d86f      	bhi.n	80105d4 <HAL_TIM_ConfigClockSource+0x168>
 80104f4:	2b30      	cmp	r3, #48	; 0x30
 80104f6:	d064      	beq.n	80105c2 <HAL_TIM_ConfigClockSource+0x156>
 80104f8:	2b30      	cmp	r3, #48	; 0x30
 80104fa:	d86b      	bhi.n	80105d4 <HAL_TIM_ConfigClockSource+0x168>
 80104fc:	2b20      	cmp	r3, #32
 80104fe:	d060      	beq.n	80105c2 <HAL_TIM_ConfigClockSource+0x156>
 8010500:	2b20      	cmp	r3, #32
 8010502:	d867      	bhi.n	80105d4 <HAL_TIM_ConfigClockSource+0x168>
 8010504:	2b00      	cmp	r3, #0
 8010506:	d05c      	beq.n	80105c2 <HAL_TIM_ConfigClockSource+0x156>
 8010508:	2b10      	cmp	r3, #16
 801050a:	d05a      	beq.n	80105c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 801050c:	e062      	b.n	80105d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6818      	ldr	r0, [r3, #0]
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	6899      	ldr	r1, [r3, #8]
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	685a      	ldr	r2, [r3, #4]
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	f000 fce7 	bl	8010ef0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010530:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	68fa      	ldr	r2, [r7, #12]
 8010538:	609a      	str	r2, [r3, #8]
      break;
 801053a:	e04e      	b.n	80105da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6818      	ldr	r0, [r3, #0]
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	6899      	ldr	r1, [r3, #8]
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	685a      	ldr	r2, [r3, #4]
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	f000 fcd0 	bl	8010ef0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	689a      	ldr	r2, [r3, #8]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801055e:	609a      	str	r2, [r3, #8]
      break;
 8010560:	e03b      	b.n	80105da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6818      	ldr	r0, [r3, #0]
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	6859      	ldr	r1, [r3, #4]
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	461a      	mov	r2, r3
 8010570:	f000 fc44 	bl	8010dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2150      	movs	r1, #80	; 0x50
 801057a:	4618      	mov	r0, r3
 801057c:	f000 fc9d 	bl	8010eba <TIM_ITRx_SetConfig>
      break;
 8010580:	e02b      	b.n	80105da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6818      	ldr	r0, [r3, #0]
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	6859      	ldr	r1, [r3, #4]
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	461a      	mov	r2, r3
 8010590:	f000 fc63 	bl	8010e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2160      	movs	r1, #96	; 0x60
 801059a:	4618      	mov	r0, r3
 801059c:	f000 fc8d 	bl	8010eba <TIM_ITRx_SetConfig>
      break;
 80105a0:	e01b      	b.n	80105da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6818      	ldr	r0, [r3, #0]
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	6859      	ldr	r1, [r3, #4]
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	461a      	mov	r2, r3
 80105b0:	f000 fc24 	bl	8010dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2140      	movs	r1, #64	; 0x40
 80105ba:	4618      	mov	r0, r3
 80105bc:	f000 fc7d 	bl	8010eba <TIM_ITRx_SetConfig>
      break;
 80105c0:	e00b      	b.n	80105da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4619      	mov	r1, r3
 80105cc:	4610      	mov	r0, r2
 80105ce:	f000 fc74 	bl	8010eba <TIM_ITRx_SetConfig>
        break;
 80105d2:	e002      	b.n	80105da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80105d4:	bf00      	nop
 80105d6:	e000      	b.n	80105da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80105d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2201      	movs	r2, #1
 80105de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80105ea:	2300      	movs	r3, #0
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3710      	adds	r7, #16
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	fffeff88 	.word	0xfffeff88

080105f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010614:	bf00      	nop
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010620:	b480      	push	{r7}
 8010622:	b083      	sub	sp, #12
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010628:	bf00      	nop
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801063c:	bf00      	nop
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010650:	bf00      	nop
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010668:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	429a      	cmp	r2, r3
 8010672:	d107      	bne.n	8010684 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	2201      	movs	r2, #1
 8010678:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2201      	movs	r2, #1
 801067e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010682:	e02a      	b.n	80106da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	429a      	cmp	r2, r3
 801068c:	d107      	bne.n	801069e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2202      	movs	r2, #2
 8010692:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2201      	movs	r2, #1
 8010698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801069c:	e01d      	b.n	80106da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d107      	bne.n	80106b8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2204      	movs	r2, #4
 80106ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2201      	movs	r2, #1
 80106b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106b6:	e010      	b.n	80106da <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d107      	bne.n	80106d2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2208      	movs	r2, #8
 80106c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	2201      	movs	r2, #1
 80106cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80106d0:	e003      	b.n	80106da <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2201      	movs	r2, #1
 80106d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f7ff ffb4 	bl	8010648 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2200      	movs	r2, #0
 80106e4:	771a      	strb	r2, [r3, #28]
}
 80106e6:	bf00      	nop
 80106e8:	3710      	adds	r7, #16
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b084      	sub	sp, #16
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	429a      	cmp	r2, r3
 8010704:	d10b      	bne.n	801071e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2201      	movs	r2, #1
 801070a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	69db      	ldr	r3, [r3, #28]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d136      	bne.n	8010782 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2201      	movs	r2, #1
 8010718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801071c:	e031      	b.n	8010782 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	429a      	cmp	r2, r3
 8010726:	d10b      	bne.n	8010740 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2202      	movs	r2, #2
 801072c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	69db      	ldr	r3, [r3, #28]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d125      	bne.n	8010782 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2201      	movs	r2, #1
 801073a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801073e:	e020      	b.n	8010782 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	429a      	cmp	r2, r3
 8010748:	d10b      	bne.n	8010762 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2204      	movs	r2, #4
 801074e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	69db      	ldr	r3, [r3, #28]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d114      	bne.n	8010782 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2201      	movs	r2, #1
 801075c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010760:	e00f      	b.n	8010782 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	429a      	cmp	r2, r3
 801076a:	d10a      	bne.n	8010782 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2208      	movs	r2, #8
 8010770:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	69db      	ldr	r3, [r3, #28]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d103      	bne.n	8010782 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2201      	movs	r2, #1
 801077e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010782:	68f8      	ldr	r0, [r7, #12]
 8010784:	f7f0 f924 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2200      	movs	r2, #0
 801078c:	771a      	strb	r2, [r3, #28]
}
 801078e:	bf00      	nop
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010796:	b580      	push	{r7, lr}
 8010798:	b084      	sub	sp, #16
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d103      	bne.n	80107b6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2201      	movs	r2, #1
 80107b2:	771a      	strb	r2, [r3, #28]
 80107b4:	e019      	b.n	80107ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d103      	bne.n	80107c8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2202      	movs	r2, #2
 80107c4:	771a      	strb	r2, [r3, #28]
 80107c6:	e010      	b.n	80107ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d103      	bne.n	80107da <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2204      	movs	r2, #4
 80107d6:	771a      	strb	r2, [r3, #28]
 80107d8:	e007      	b.n	80107ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d102      	bne.n	80107ea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2208      	movs	r2, #8
 80107e8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	f7ff ff18 	bl	8010620 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2200      	movs	r2, #0
 80107f4:	771a      	strb	r2, [r3, #28]
}
 80107f6:	bf00      	nop
 80107f8:	3710      	adds	r7, #16
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
	...

08010800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4a40      	ldr	r2, [pc, #256]	; (8010914 <TIM_Base_SetConfig+0x114>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d013      	beq.n	8010840 <TIM_Base_SetConfig+0x40>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801081e:	d00f      	beq.n	8010840 <TIM_Base_SetConfig+0x40>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4a3d      	ldr	r2, [pc, #244]	; (8010918 <TIM_Base_SetConfig+0x118>)
 8010824:	4293      	cmp	r3, r2
 8010826:	d00b      	beq.n	8010840 <TIM_Base_SetConfig+0x40>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	4a3c      	ldr	r2, [pc, #240]	; (801091c <TIM_Base_SetConfig+0x11c>)
 801082c:	4293      	cmp	r3, r2
 801082e:	d007      	beq.n	8010840 <TIM_Base_SetConfig+0x40>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	4a3b      	ldr	r2, [pc, #236]	; (8010920 <TIM_Base_SetConfig+0x120>)
 8010834:	4293      	cmp	r3, r2
 8010836:	d003      	beq.n	8010840 <TIM_Base_SetConfig+0x40>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	4a3a      	ldr	r2, [pc, #232]	; (8010924 <TIM_Base_SetConfig+0x124>)
 801083c:	4293      	cmp	r3, r2
 801083e:	d108      	bne.n	8010852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	68fa      	ldr	r2, [r7, #12]
 801084e:	4313      	orrs	r3, r2
 8010850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4a2f      	ldr	r2, [pc, #188]	; (8010914 <TIM_Base_SetConfig+0x114>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d02b      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010860:	d027      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	4a2c      	ldr	r2, [pc, #176]	; (8010918 <TIM_Base_SetConfig+0x118>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d023      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4a2b      	ldr	r2, [pc, #172]	; (801091c <TIM_Base_SetConfig+0x11c>)
 801086e:	4293      	cmp	r3, r2
 8010870:	d01f      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4a2a      	ldr	r2, [pc, #168]	; (8010920 <TIM_Base_SetConfig+0x120>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d01b      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	4a29      	ldr	r2, [pc, #164]	; (8010924 <TIM_Base_SetConfig+0x124>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d017      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	4a28      	ldr	r2, [pc, #160]	; (8010928 <TIM_Base_SetConfig+0x128>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d013      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4a27      	ldr	r2, [pc, #156]	; (801092c <TIM_Base_SetConfig+0x12c>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d00f      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	4a26      	ldr	r2, [pc, #152]	; (8010930 <TIM_Base_SetConfig+0x130>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d00b      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4a25      	ldr	r2, [pc, #148]	; (8010934 <TIM_Base_SetConfig+0x134>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d007      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4a24      	ldr	r2, [pc, #144]	; (8010938 <TIM_Base_SetConfig+0x138>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d003      	beq.n	80108b2 <TIM_Base_SetConfig+0xb2>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4a23      	ldr	r2, [pc, #140]	; (801093c <TIM_Base_SetConfig+0x13c>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d108      	bne.n	80108c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80108b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	4313      	orrs	r3, r2
 80108c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	695b      	ldr	r3, [r3, #20]
 80108ce:	4313      	orrs	r3, r2
 80108d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	689a      	ldr	r2, [r3, #8]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	4a0a      	ldr	r2, [pc, #40]	; (8010914 <TIM_Base_SetConfig+0x114>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d003      	beq.n	80108f8 <TIM_Base_SetConfig+0xf8>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	4a0c      	ldr	r2, [pc, #48]	; (8010924 <TIM_Base_SetConfig+0x124>)
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d103      	bne.n	8010900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	691a      	ldr	r2, [r3, #16]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2201      	movs	r2, #1
 8010904:	615a      	str	r2, [r3, #20]
}
 8010906:	bf00      	nop
 8010908:	3714      	adds	r7, #20
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	40010000 	.word	0x40010000
 8010918:	40000400 	.word	0x40000400
 801091c:	40000800 	.word	0x40000800
 8010920:	40000c00 	.word	0x40000c00
 8010924:	40010400 	.word	0x40010400
 8010928:	40014000 	.word	0x40014000
 801092c:	40014400 	.word	0x40014400
 8010930:	40014800 	.word	0x40014800
 8010934:	40001800 	.word	0x40001800
 8010938:	40001c00 	.word	0x40001c00
 801093c:	40002000 	.word	0x40002000

08010940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010940:	b480      	push	{r7}
 8010942:	b087      	sub	sp, #28
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6a1b      	ldr	r3, [r3, #32]
 801094e:	f023 0201 	bic.w	r2, r3, #1
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6a1b      	ldr	r3, [r3, #32]
 801095a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	699b      	ldr	r3, [r3, #24]
 8010966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010968:	68fa      	ldr	r2, [r7, #12]
 801096a:	4b2b      	ldr	r3, [pc, #172]	; (8010a18 <TIM_OC1_SetConfig+0xd8>)
 801096c:	4013      	ands	r3, r2
 801096e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f023 0303 	bic.w	r3, r3, #3
 8010976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	4313      	orrs	r3, r2
 8010980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f023 0302 	bic.w	r3, r3, #2
 8010988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	697a      	ldr	r2, [r7, #20]
 8010990:	4313      	orrs	r3, r2
 8010992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4a21      	ldr	r2, [pc, #132]	; (8010a1c <TIM_OC1_SetConfig+0xdc>)
 8010998:	4293      	cmp	r3, r2
 801099a:	d003      	beq.n	80109a4 <TIM_OC1_SetConfig+0x64>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4a20      	ldr	r2, [pc, #128]	; (8010a20 <TIM_OC1_SetConfig+0xe0>)
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d10c      	bne.n	80109be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	f023 0308 	bic.w	r3, r3, #8
 80109aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	697a      	ldr	r2, [r7, #20]
 80109b2:	4313      	orrs	r3, r2
 80109b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	f023 0304 	bic.w	r3, r3, #4
 80109bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4a16      	ldr	r2, [pc, #88]	; (8010a1c <TIM_OC1_SetConfig+0xdc>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d003      	beq.n	80109ce <TIM_OC1_SetConfig+0x8e>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4a15      	ldr	r2, [pc, #84]	; (8010a20 <TIM_OC1_SetConfig+0xe0>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d111      	bne.n	80109f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80109dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	695b      	ldr	r3, [r3, #20]
 80109e2:	693a      	ldr	r2, [r7, #16]
 80109e4:	4313      	orrs	r3, r2
 80109e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	699b      	ldr	r3, [r3, #24]
 80109ec:	693a      	ldr	r2, [r7, #16]
 80109ee:	4313      	orrs	r3, r2
 80109f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	693a      	ldr	r2, [r7, #16]
 80109f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	68fa      	ldr	r2, [r7, #12]
 80109fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	685a      	ldr	r2, [r3, #4]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	621a      	str	r2, [r3, #32]
}
 8010a0c:	bf00      	nop
 8010a0e:	371c      	adds	r7, #28
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr
 8010a18:	fffeff8f 	.word	0xfffeff8f
 8010a1c:	40010000 	.word	0x40010000
 8010a20:	40010400 	.word	0x40010400

08010a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b087      	sub	sp, #28
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6a1b      	ldr	r3, [r3, #32]
 8010a32:	f023 0210 	bic.w	r2, r3, #16
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6a1b      	ldr	r3, [r3, #32]
 8010a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	699b      	ldr	r3, [r3, #24]
 8010a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010a4c:	68fa      	ldr	r2, [r7, #12]
 8010a4e:	4b2e      	ldr	r3, [pc, #184]	; (8010b08 <TIM_OC2_SetConfig+0xe4>)
 8010a50:	4013      	ands	r3, r2
 8010a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	021b      	lsls	r3, r3, #8
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	4313      	orrs	r3, r2
 8010a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	f023 0320 	bic.w	r3, r3, #32
 8010a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	689b      	ldr	r3, [r3, #8]
 8010a74:	011b      	lsls	r3, r3, #4
 8010a76:	697a      	ldr	r2, [r7, #20]
 8010a78:	4313      	orrs	r3, r2
 8010a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	4a23      	ldr	r2, [pc, #140]	; (8010b0c <TIM_OC2_SetConfig+0xe8>)
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d003      	beq.n	8010a8c <TIM_OC2_SetConfig+0x68>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	4a22      	ldr	r2, [pc, #136]	; (8010b10 <TIM_OC2_SetConfig+0xec>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d10d      	bne.n	8010aa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	011b      	lsls	r3, r3, #4
 8010a9a:	697a      	ldr	r2, [r7, #20]
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010aa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4a18      	ldr	r2, [pc, #96]	; (8010b0c <TIM_OC2_SetConfig+0xe8>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d003      	beq.n	8010ab8 <TIM_OC2_SetConfig+0x94>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4a17      	ldr	r2, [pc, #92]	; (8010b10 <TIM_OC2_SetConfig+0xec>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d113      	bne.n	8010ae0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	695b      	ldr	r3, [r3, #20]
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	693a      	ldr	r2, [r7, #16]
 8010ad0:	4313      	orrs	r3, r2
 8010ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	699b      	ldr	r3, [r3, #24]
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	693a      	ldr	r2, [r7, #16]
 8010adc:	4313      	orrs	r3, r2
 8010ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	693a      	ldr	r2, [r7, #16]
 8010ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	68fa      	ldr	r2, [r7, #12]
 8010aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	697a      	ldr	r2, [r7, #20]
 8010af8:	621a      	str	r2, [r3, #32]
}
 8010afa:	bf00      	nop
 8010afc:	371c      	adds	r7, #28
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	feff8fff 	.word	0xfeff8fff
 8010b0c:	40010000 	.word	0x40010000
 8010b10:	40010400 	.word	0x40010400

08010b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b087      	sub	sp, #28
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6a1b      	ldr	r3, [r3, #32]
 8010b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6a1b      	ldr	r3, [r3, #32]
 8010b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	69db      	ldr	r3, [r3, #28]
 8010b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010b3c:	68fa      	ldr	r2, [r7, #12]
 8010b3e:	4b2d      	ldr	r3, [pc, #180]	; (8010bf4 <TIM_OC3_SetConfig+0xe0>)
 8010b40:	4013      	ands	r3, r2
 8010b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	f023 0303 	bic.w	r3, r3, #3
 8010b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	4313      	orrs	r3, r2
 8010b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	021b      	lsls	r3, r3, #8
 8010b64:	697a      	ldr	r2, [r7, #20]
 8010b66:	4313      	orrs	r3, r2
 8010b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4a22      	ldr	r2, [pc, #136]	; (8010bf8 <TIM_OC3_SetConfig+0xe4>)
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	d003      	beq.n	8010b7a <TIM_OC3_SetConfig+0x66>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	4a21      	ldr	r2, [pc, #132]	; (8010bfc <TIM_OC3_SetConfig+0xe8>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d10d      	bne.n	8010b96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	021b      	lsls	r3, r3, #8
 8010b88:	697a      	ldr	r2, [r7, #20]
 8010b8a:	4313      	orrs	r3, r2
 8010b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4a17      	ldr	r2, [pc, #92]	; (8010bf8 <TIM_OC3_SetConfig+0xe4>)
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	d003      	beq.n	8010ba6 <TIM_OC3_SetConfig+0x92>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	4a16      	ldr	r2, [pc, #88]	; (8010bfc <TIM_OC3_SetConfig+0xe8>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d113      	bne.n	8010bce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	695b      	ldr	r3, [r3, #20]
 8010bba:	011b      	lsls	r3, r3, #4
 8010bbc:	693a      	ldr	r2, [r7, #16]
 8010bbe:	4313      	orrs	r3, r2
 8010bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	011b      	lsls	r3, r3, #4
 8010bc8:	693a      	ldr	r2, [r7, #16]
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	693a      	ldr	r2, [r7, #16]
 8010bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	68fa      	ldr	r2, [r7, #12]
 8010bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	685a      	ldr	r2, [r3, #4]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	697a      	ldr	r2, [r7, #20]
 8010be6:	621a      	str	r2, [r3, #32]
}
 8010be8:	bf00      	nop
 8010bea:	371c      	adds	r7, #28
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr
 8010bf4:	fffeff8f 	.word	0xfffeff8f
 8010bf8:	40010000 	.word	0x40010000
 8010bfc:	40010400 	.word	0x40010400

08010c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b087      	sub	sp, #28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6a1b      	ldr	r3, [r3, #32]
 8010c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6a1b      	ldr	r3, [r3, #32]
 8010c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	69db      	ldr	r3, [r3, #28]
 8010c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	4b1e      	ldr	r3, [pc, #120]	; (8010ca4 <TIM_OC4_SetConfig+0xa4>)
 8010c2c:	4013      	ands	r3, r2
 8010c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	021b      	lsls	r3, r3, #8
 8010c3e:	68fa      	ldr	r2, [r7, #12]
 8010c40:	4313      	orrs	r3, r2
 8010c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	689b      	ldr	r3, [r3, #8]
 8010c50:	031b      	lsls	r3, r3, #12
 8010c52:	693a      	ldr	r2, [r7, #16]
 8010c54:	4313      	orrs	r3, r2
 8010c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	4a13      	ldr	r2, [pc, #76]	; (8010ca8 <TIM_OC4_SetConfig+0xa8>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d003      	beq.n	8010c68 <TIM_OC4_SetConfig+0x68>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	4a12      	ldr	r2, [pc, #72]	; (8010cac <TIM_OC4_SetConfig+0xac>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d109      	bne.n	8010c7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	695b      	ldr	r3, [r3, #20]
 8010c74:	019b      	lsls	r3, r3, #6
 8010c76:	697a      	ldr	r2, [r7, #20]
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	697a      	ldr	r2, [r7, #20]
 8010c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	68fa      	ldr	r2, [r7, #12]
 8010c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	685a      	ldr	r2, [r3, #4]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	693a      	ldr	r2, [r7, #16]
 8010c94:	621a      	str	r2, [r3, #32]
}
 8010c96:	bf00      	nop
 8010c98:	371c      	adds	r7, #28
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop
 8010ca4:	feff8fff 	.word	0xfeff8fff
 8010ca8:	40010000 	.word	0x40010000
 8010cac:	40010400 	.word	0x40010400

08010cb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b087      	sub	sp, #28
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6a1b      	ldr	r3, [r3, #32]
 8010cbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6a1b      	ldr	r3, [r3, #32]
 8010cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010cd8:	68fa      	ldr	r2, [r7, #12]
 8010cda:	4b1b      	ldr	r3, [pc, #108]	; (8010d48 <TIM_OC5_SetConfig+0x98>)
 8010cdc:	4013      	ands	r3, r2
 8010cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	68fa      	ldr	r2, [r7, #12]
 8010ce6:	4313      	orrs	r3, r2
 8010ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010cf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	689b      	ldr	r3, [r3, #8]
 8010cf6:	041b      	lsls	r3, r3, #16
 8010cf8:	693a      	ldr	r2, [r7, #16]
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	4a12      	ldr	r2, [pc, #72]	; (8010d4c <TIM_OC5_SetConfig+0x9c>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d003      	beq.n	8010d0e <TIM_OC5_SetConfig+0x5e>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4a11      	ldr	r2, [pc, #68]	; (8010d50 <TIM_OC5_SetConfig+0xa0>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d109      	bne.n	8010d22 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010d14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	695b      	ldr	r3, [r3, #20]
 8010d1a:	021b      	lsls	r3, r3, #8
 8010d1c:	697a      	ldr	r2, [r7, #20]
 8010d1e:	4313      	orrs	r3, r2
 8010d20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	697a      	ldr	r2, [r7, #20]
 8010d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	68fa      	ldr	r2, [r7, #12]
 8010d2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	685a      	ldr	r2, [r3, #4]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	693a      	ldr	r2, [r7, #16]
 8010d3a:	621a      	str	r2, [r3, #32]
}
 8010d3c:	bf00      	nop
 8010d3e:	371c      	adds	r7, #28
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr
 8010d48:	fffeff8f 	.word	0xfffeff8f
 8010d4c:	40010000 	.word	0x40010000
 8010d50:	40010400 	.word	0x40010400

08010d54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b087      	sub	sp, #28
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6a1b      	ldr	r3, [r3, #32]
 8010d62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6a1b      	ldr	r3, [r3, #32]
 8010d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	4b1c      	ldr	r3, [pc, #112]	; (8010df0 <TIM_OC6_SetConfig+0x9c>)
 8010d80:	4013      	ands	r3, r2
 8010d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	021b      	lsls	r3, r3, #8
 8010d8a:	68fa      	ldr	r2, [r7, #12]
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	689b      	ldr	r3, [r3, #8]
 8010d9c:	051b      	lsls	r3, r3, #20
 8010d9e:	693a      	ldr	r2, [r7, #16]
 8010da0:	4313      	orrs	r3, r2
 8010da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	4a13      	ldr	r2, [pc, #76]	; (8010df4 <TIM_OC6_SetConfig+0xa0>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d003      	beq.n	8010db4 <TIM_OC6_SetConfig+0x60>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	4a12      	ldr	r2, [pc, #72]	; (8010df8 <TIM_OC6_SetConfig+0xa4>)
 8010db0:	4293      	cmp	r3, r2
 8010db2:	d109      	bne.n	8010dc8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010dba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	695b      	ldr	r3, [r3, #20]
 8010dc0:	029b      	lsls	r3, r3, #10
 8010dc2:	697a      	ldr	r2, [r7, #20]
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	697a      	ldr	r2, [r7, #20]
 8010dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	68fa      	ldr	r2, [r7, #12]
 8010dd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	685a      	ldr	r2, [r3, #4]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	693a      	ldr	r2, [r7, #16]
 8010de0:	621a      	str	r2, [r3, #32]
}
 8010de2:	bf00      	nop
 8010de4:	371c      	adds	r7, #28
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	feff8fff 	.word	0xfeff8fff
 8010df4:	40010000 	.word	0x40010000
 8010df8:	40010400 	.word	0x40010400

08010dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b087      	sub	sp, #28
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	6a1b      	ldr	r3, [r3, #32]
 8010e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6a1b      	ldr	r3, [r3, #32]
 8010e12:	f023 0201 	bic.w	r2, r3, #1
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	699b      	ldr	r3, [r3, #24]
 8010e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	011b      	lsls	r3, r3, #4
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	f023 030a 	bic.w	r3, r3, #10
 8010e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010e3a:	697a      	ldr	r2, [r7, #20]
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	693a      	ldr	r2, [r7, #16]
 8010e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	697a      	ldr	r2, [r7, #20]
 8010e4c:	621a      	str	r2, [r3, #32]
}
 8010e4e:	bf00      	nop
 8010e50:	371c      	adds	r7, #28
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010e5a:	b480      	push	{r7}
 8010e5c:	b087      	sub	sp, #28
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	60f8      	str	r0, [r7, #12]
 8010e62:	60b9      	str	r1, [r7, #8]
 8010e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	6a1b      	ldr	r3, [r3, #32]
 8010e6a:	f023 0210 	bic.w	r2, r3, #16
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	699b      	ldr	r3, [r3, #24]
 8010e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	6a1b      	ldr	r3, [r3, #32]
 8010e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	031b      	lsls	r3, r3, #12
 8010e8a:	697a      	ldr	r2, [r7, #20]
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	011b      	lsls	r3, r3, #4
 8010e9c:	693a      	ldr	r2, [r7, #16]
 8010e9e:	4313      	orrs	r3, r2
 8010ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	697a      	ldr	r2, [r7, #20]
 8010ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	693a      	ldr	r2, [r7, #16]
 8010eac:	621a      	str	r2, [r3, #32]
}
 8010eae:	bf00      	nop
 8010eb0:	371c      	adds	r7, #28
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr

08010eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010eba:	b480      	push	{r7}
 8010ebc:	b085      	sub	sp, #20
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
 8010ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	689b      	ldr	r3, [r3, #8]
 8010ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010ed2:	683a      	ldr	r2, [r7, #0]
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	f043 0307 	orr.w	r3, r3, #7
 8010edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	609a      	str	r2, [r3, #8]
}
 8010ee4:	bf00      	nop
 8010ee6:	3714      	adds	r7, #20
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b087      	sub	sp, #28
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	607a      	str	r2, [r7, #4]
 8010efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	689b      	ldr	r3, [r3, #8]
 8010f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	021a      	lsls	r2, r3, #8
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	431a      	orrs	r2, r3
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	697a      	ldr	r2, [r7, #20]
 8010f1a:	4313      	orrs	r3, r2
 8010f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	697a      	ldr	r2, [r7, #20]
 8010f22:	609a      	str	r2, [r3, #8]
}
 8010f24:	bf00      	nop
 8010f26:	371c      	adds	r7, #28
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr

08010f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b087      	sub	sp, #28
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	f003 031f 	and.w	r3, r3, #31
 8010f42:	2201      	movs	r2, #1
 8010f44:	fa02 f303 	lsl.w	r3, r2, r3
 8010f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	6a1a      	ldr	r2, [r3, #32]
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	43db      	mvns	r3, r3
 8010f52:	401a      	ands	r2, r3
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	6a1a      	ldr	r2, [r3, #32]
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	f003 031f 	and.w	r3, r3, #31
 8010f62:	6879      	ldr	r1, [r7, #4]
 8010f64:	fa01 f303 	lsl.w	r3, r1, r3
 8010f68:	431a      	orrs	r2, r3
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	621a      	str	r2, [r3, #32]
}
 8010f6e:	bf00      	nop
 8010f70:	371c      	adds	r7, #28
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr
	...

08010f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b085      	sub	sp, #20
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d101      	bne.n	8010f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010f90:	2302      	movs	r3, #2
 8010f92:	e06d      	b.n	8011070 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2201      	movs	r2, #1
 8010f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2202      	movs	r2, #2
 8010fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	689b      	ldr	r3, [r3, #8]
 8010fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	4a30      	ldr	r2, [pc, #192]	; (801107c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	d004      	beq.n	8010fc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	4a2f      	ldr	r2, [pc, #188]	; (8011080 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d108      	bne.n	8010fda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010fce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	68fa      	ldr	r2, [r7, #12]
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fe0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	4313      	orrs	r3, r2
 8010fea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4a20      	ldr	r2, [pc, #128]	; (801107c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d022      	beq.n	8011044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011006:	d01d      	beq.n	8011044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4a1d      	ldr	r2, [pc, #116]	; (8011084 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d018      	beq.n	8011044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	4a1c      	ldr	r2, [pc, #112]	; (8011088 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d013      	beq.n	8011044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4a1a      	ldr	r2, [pc, #104]	; (801108c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d00e      	beq.n	8011044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4a15      	ldr	r2, [pc, #84]	; (8011080 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d009      	beq.n	8011044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4a16      	ldr	r2, [pc, #88]	; (8011090 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d004      	beq.n	8011044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	4a15      	ldr	r2, [pc, #84]	; (8011094 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011040:	4293      	cmp	r3, r2
 8011042:	d10c      	bne.n	801105e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801104a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	689b      	ldr	r3, [r3, #8]
 8011050:	68ba      	ldr	r2, [r7, #8]
 8011052:	4313      	orrs	r3, r2
 8011054:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2201      	movs	r2, #1
 8011062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2200      	movs	r2, #0
 801106a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801106e:	2300      	movs	r3, #0
}
 8011070:	4618      	mov	r0, r3
 8011072:	3714      	adds	r7, #20
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr
 801107c:	40010000 	.word	0x40010000
 8011080:	40010400 	.word	0x40010400
 8011084:	40000400 	.word	0x40000400
 8011088:	40000800 	.word	0x40000800
 801108c:	40000c00 	.word	0x40000c00
 8011090:	40014000 	.word	0x40014000
 8011094:	40001800 	.word	0x40001800

08011098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80110a0:	bf00      	nop
 80110a2:	370c      	adds	r7, #12
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr

080110ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b083      	sub	sp, #12
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b085      	sub	sp, #20
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80110de:	2300      	movs	r3, #0
 80110e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80110e2:	2300      	movs	r3, #0
 80110e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d027      	beq.n	801113e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	4b2f      	ldr	r3, [pc, #188]	; (80111b4 <FMC_SDRAM_Init+0xe0>)
 80110f8:	4013      	ands	r3, r2
 80110fa:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011104:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 801110a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8011110:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8011116:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 801111c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8011122:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8011128:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801112e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	4313      	orrs	r3, r2
 8011134:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	601a      	str	r2, [r3, #0]
 801113c:	e032      	b.n	80111a4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801114a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011154:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801115a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801115c:	68fa      	ldr	r2, [r7, #12]
 801115e:	4313      	orrs	r3, r2
 8011160:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011168:	68ba      	ldr	r2, [r7, #8]
 801116a:	4b12      	ldr	r3, [pc, #72]	; (80111b4 <FMC_SDRAM_Init+0xe0>)
 801116c:	4013      	ands	r3, r2
 801116e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011178:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 801117e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8011184:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 801118a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8011190:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011192:	68ba      	ldr	r2, [r7, #8]
 8011194:	4313      	orrs	r3, r2
 8011196:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	68fa      	ldr	r2, [r7, #12]
 801119c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	68ba      	ldr	r2, [r7, #8]
 80111a2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3714      	adds	r7, #20
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop
 80111b4:	ffff8000 	.word	0xffff8000

080111b8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b087      	sub	sp, #28
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80111c4:	2300      	movs	r3, #0
 80111c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80111c8:	2300      	movs	r3, #0
 80111ca:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d02e      	beq.n	8011230 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	689b      	ldr	r3, [r3, #8]
 80111d6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80111de:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	3b01      	subs	r3, #1
 80111ec:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80111ee:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	689b      	ldr	r3, [r3, #8]
 80111f4:	3b01      	subs	r3, #1
 80111f6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80111f8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	3b01      	subs	r3, #1
 8011200:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011202:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	691b      	ldr	r3, [r3, #16]
 8011208:	3b01      	subs	r3, #1
 801120a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 801120c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	695b      	ldr	r3, [r3, #20]
 8011212:	3b01      	subs	r3, #1
 8011214:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011216:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	699b      	ldr	r3, [r3, #24]
 801121c:	3b01      	subs	r3, #1
 801121e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011220:	4313      	orrs	r3, r2
 8011222:	697a      	ldr	r2, [r7, #20]
 8011224:	4313      	orrs	r3, r2
 8011226:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	697a      	ldr	r2, [r7, #20]
 801122c:	609a      	str	r2, [r3, #8]
 801122e:	e039      	b.n	80112a4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	689b      	ldr	r3, [r3, #8]
 8011234:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8011236:	697a      	ldr	r2, [r7, #20]
 8011238:	4b1e      	ldr	r3, [pc, #120]	; (80112b4 <FMC_SDRAM_Timing_Init+0xfc>)
 801123a:	4013      	ands	r3, r2
 801123c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	3b01      	subs	r3, #1
 8011244:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	695b      	ldr	r3, [r3, #20]
 801124a:	3b01      	subs	r3, #1
 801124c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801124e:	4313      	orrs	r3, r2
 8011250:	697a      	ldr	r2, [r7, #20]
 8011252:	4313      	orrs	r3, r2
 8011254:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011262:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	3b01      	subs	r3, #1
 8011270:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011272:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	689b      	ldr	r3, [r3, #8]
 8011278:	3b01      	subs	r3, #1
 801127a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801127c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	691b      	ldr	r3, [r3, #16]
 8011282:	3b01      	subs	r3, #1
 8011284:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011286:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	699b      	ldr	r3, [r3, #24]
 801128c:	3b01      	subs	r3, #1
 801128e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011290:	4313      	orrs	r3, r2
 8011292:	693a      	ldr	r2, [r7, #16]
 8011294:	4313      	orrs	r3, r2
 8011296:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	697a      	ldr	r2, [r7, #20]
 801129c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	693a      	ldr	r2, [r7, #16]
 80112a2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80112a4:	2300      	movs	r3, #0
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	371c      	adds	r7, #28
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr
 80112b2:	bf00      	nop
 80112b4:	ff0f0fff 	.word	0xff0f0fff

080112b8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80112b8:	b480      	push	{r7}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	691a      	ldr	r2, [r3, #16]
 80112c8:	4b0c      	ldr	r3, [pc, #48]	; (80112fc <FMC_SDRAM_SendCommand+0x44>)
 80112ca:	4013      	ands	r3, r2
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	6811      	ldr	r1, [r2, #0]
 80112d0:	68ba      	ldr	r2, [r7, #8]
 80112d2:	6852      	ldr	r2, [r2, #4]
 80112d4:	4311      	orrs	r1, r2
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	6892      	ldr	r2, [r2, #8]
 80112da:	3a01      	subs	r2, #1
 80112dc:	0152      	lsls	r2, r2, #5
 80112de:	4311      	orrs	r1, r2
 80112e0:	68ba      	ldr	r2, [r7, #8]
 80112e2:	68d2      	ldr	r2, [r2, #12]
 80112e4:	0252      	lsls	r2, r2, #9
 80112e6:	430a      	orrs	r2, r1
 80112e8:	431a      	orrs	r2, r3
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 80112ee:	2300      	movs	r3, #0
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3714      	adds	r7, #20
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr
 80112fc:	ffc00000 	.word	0xffc00000

08011300 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011300:	b480      	push	{r7}
 8011302:	b083      	sub	sp, #12
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	695a      	ldr	r2, [r3, #20]
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	005b      	lsls	r3, r3, #1
 8011312:	431a      	orrs	r2, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	370c      	adds	r7, #12
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr

08011326 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011326:	b480      	push	{r7}
 8011328:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801132a:	bf00      	nop
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr

08011334 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011334:	b480      	push	{r7}
 8011336:	b085      	sub	sp, #20
 8011338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801133a:	f3ef 8305 	mrs	r3, IPSR
 801133e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011340:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011342:	2b00      	cmp	r3, #0
 8011344:	d10f      	bne.n	8011366 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011346:	f3ef 8310 	mrs	r3, PRIMASK
 801134a:	607b      	str	r3, [r7, #4]
  return(result);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d105      	bne.n	801135e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011352:	f3ef 8311 	mrs	r3, BASEPRI
 8011356:	603b      	str	r3, [r7, #0]
  return(result);
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d007      	beq.n	801136e <osKernelInitialize+0x3a>
 801135e:	4b0e      	ldr	r3, [pc, #56]	; (8011398 <osKernelInitialize+0x64>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b02      	cmp	r3, #2
 8011364:	d103      	bne.n	801136e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011366:	f06f 0305 	mvn.w	r3, #5
 801136a:	60fb      	str	r3, [r7, #12]
 801136c:	e00c      	b.n	8011388 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801136e:	4b0a      	ldr	r3, [pc, #40]	; (8011398 <osKernelInitialize+0x64>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d105      	bne.n	8011382 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011376:	4b08      	ldr	r3, [pc, #32]	; (8011398 <osKernelInitialize+0x64>)
 8011378:	2201      	movs	r2, #1
 801137a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801137c:	2300      	movs	r3, #0
 801137e:	60fb      	str	r3, [r7, #12]
 8011380:	e002      	b.n	8011388 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011382:	f04f 33ff 	mov.w	r3, #4294967295
 8011386:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011388:	68fb      	ldr	r3, [r7, #12]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3714      	adds	r7, #20
 801138e:	46bd      	mov	sp, r7
 8011390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011394:	4770      	bx	lr
 8011396:	bf00      	nop
 8011398:	200239e4 	.word	0x200239e4

0801139c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113a2:	f3ef 8305 	mrs	r3, IPSR
 80113a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80113a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d10f      	bne.n	80113ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113ae:	f3ef 8310 	mrs	r3, PRIMASK
 80113b2:	607b      	str	r3, [r7, #4]
  return(result);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d105      	bne.n	80113c6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80113ba:	f3ef 8311 	mrs	r3, BASEPRI
 80113be:	603b      	str	r3, [r7, #0]
  return(result);
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d007      	beq.n	80113d6 <osKernelStart+0x3a>
 80113c6:	4b0f      	ldr	r3, [pc, #60]	; (8011404 <osKernelStart+0x68>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2b02      	cmp	r3, #2
 80113cc:	d103      	bne.n	80113d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80113ce:	f06f 0305 	mvn.w	r3, #5
 80113d2:	60fb      	str	r3, [r7, #12]
 80113d4:	e010      	b.n	80113f8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80113d6:	4b0b      	ldr	r3, [pc, #44]	; (8011404 <osKernelStart+0x68>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d109      	bne.n	80113f2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80113de:	f7ff ffa2 	bl	8011326 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80113e2:	4b08      	ldr	r3, [pc, #32]	; (8011404 <osKernelStart+0x68>)
 80113e4:	2202      	movs	r2, #2
 80113e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80113e8:	f002 fb12 	bl	8013a10 <vTaskStartScheduler>
      stat = osOK;
 80113ec:	2300      	movs	r3, #0
 80113ee:	60fb      	str	r3, [r7, #12]
 80113f0:	e002      	b.n	80113f8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80113f2:	f04f 33ff 	mov.w	r3, #4294967295
 80113f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80113f8:	68fb      	ldr	r3, [r7, #12]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	200239e4 	.word	0x200239e4

08011408 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011408:	b580      	push	{r7, lr}
 801140a:	b090      	sub	sp, #64	; 0x40
 801140c:	af04      	add	r7, sp, #16
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011414:	2300      	movs	r3, #0
 8011416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011418:	f3ef 8305 	mrs	r3, IPSR
 801141c:	61fb      	str	r3, [r7, #28]
  return(result);
 801141e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011420:	2b00      	cmp	r3, #0
 8011422:	f040 808f 	bne.w	8011544 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011426:	f3ef 8310 	mrs	r3, PRIMASK
 801142a:	61bb      	str	r3, [r7, #24]
  return(result);
 801142c:	69bb      	ldr	r3, [r7, #24]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d105      	bne.n	801143e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011432:	f3ef 8311 	mrs	r3, BASEPRI
 8011436:	617b      	str	r3, [r7, #20]
  return(result);
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d003      	beq.n	8011446 <osThreadNew+0x3e>
 801143e:	4b44      	ldr	r3, [pc, #272]	; (8011550 <osThreadNew+0x148>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b02      	cmp	r3, #2
 8011444:	d07e      	beq.n	8011544 <osThreadNew+0x13c>
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d07b      	beq.n	8011544 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 801144c:	2380      	movs	r3, #128	; 0x80
 801144e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011450:	2318      	movs	r3, #24
 8011452:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011454:	2300      	movs	r3, #0
 8011456:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011458:	f04f 33ff 	mov.w	r3, #4294967295
 801145c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d045      	beq.n	80114f0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d002      	beq.n	8011472 <osThreadNew+0x6a>
        name = attr->name;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	699b      	ldr	r3, [r3, #24]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d002      	beq.n	8011480 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	699b      	ldr	r3, [r3, #24]
 801147e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011482:	2b00      	cmp	r3, #0
 8011484:	d008      	beq.n	8011498 <osThreadNew+0x90>
 8011486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011488:	2b38      	cmp	r3, #56	; 0x38
 801148a:	d805      	bhi.n	8011498 <osThreadNew+0x90>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	f003 0301 	and.w	r3, r3, #1
 8011494:	2b00      	cmp	r3, #0
 8011496:	d001      	beq.n	801149c <osThreadNew+0x94>
        return (NULL);
 8011498:	2300      	movs	r3, #0
 801149a:	e054      	b.n	8011546 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	695b      	ldr	r3, [r3, #20]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d003      	beq.n	80114ac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	695b      	ldr	r3, [r3, #20]
 80114a8:	089b      	lsrs	r3, r3, #2
 80114aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	689b      	ldr	r3, [r3, #8]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d00e      	beq.n	80114d2 <osThreadNew+0xca>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	2b5b      	cmp	r3, #91	; 0x5b
 80114ba:	d90a      	bls.n	80114d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d006      	beq.n	80114d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	695b      	ldr	r3, [r3, #20]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d002      	beq.n	80114d2 <osThreadNew+0xca>
        mem = 1;
 80114cc:	2301      	movs	r3, #1
 80114ce:	623b      	str	r3, [r7, #32]
 80114d0:	e010      	b.n	80114f4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	689b      	ldr	r3, [r3, #8]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d10c      	bne.n	80114f4 <osThreadNew+0xec>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d108      	bne.n	80114f4 <osThreadNew+0xec>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	691b      	ldr	r3, [r3, #16]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d104      	bne.n	80114f4 <osThreadNew+0xec>
          mem = 0;
 80114ea:	2300      	movs	r3, #0
 80114ec:	623b      	str	r3, [r7, #32]
 80114ee:	e001      	b.n	80114f4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80114f0:	2300      	movs	r3, #0
 80114f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80114f4:	6a3b      	ldr	r3, [r7, #32]
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d110      	bne.n	801151c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011502:	9202      	str	r2, [sp, #8]
 8011504:	9301      	str	r3, [sp, #4]
 8011506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801150e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f002 f89d 	bl	8013650 <xTaskCreateStatic>
 8011516:	4603      	mov	r3, r0
 8011518:	613b      	str	r3, [r7, #16]
 801151a:	e013      	b.n	8011544 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 801151c:	6a3b      	ldr	r3, [r7, #32]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d110      	bne.n	8011544 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011524:	b29a      	uxth	r2, r3
 8011526:	f107 0310 	add.w	r3, r7, #16
 801152a:	9301      	str	r3, [sp, #4]
 801152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f002 f8ee 	bl	8013716 <xTaskCreate>
 801153a:	4603      	mov	r3, r0
 801153c:	2b01      	cmp	r3, #1
 801153e:	d001      	beq.n	8011544 <osThreadNew+0x13c>
          hTask = NULL;
 8011540:	2300      	movs	r3, #0
 8011542:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011544:	693b      	ldr	r3, [r7, #16]
}
 8011546:	4618      	mov	r0, r3
 8011548:	3730      	adds	r7, #48	; 0x30
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	200239e4 	.word	0x200239e4

08011554 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011554:	b480      	push	{r7}
 8011556:	b085      	sub	sp, #20
 8011558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801155a:	f3ef 8305 	mrs	r3, IPSR
 801155e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011560:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011562:	2b00      	cmp	r3, #0
 8011564:	d10f      	bne.n	8011586 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011566:	f3ef 8310 	mrs	r3, PRIMASK
 801156a:	607b      	str	r3, [r7, #4]
  return(result);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d105      	bne.n	801157e <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011572:	f3ef 8311 	mrs	r3, BASEPRI
 8011576:	603b      	str	r3, [r7, #0]
  return(result);
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d007      	beq.n	801158e <osThreadYield+0x3a>
 801157e:	4b0c      	ldr	r3, [pc, #48]	; (80115b0 <osThreadYield+0x5c>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b02      	cmp	r3, #2
 8011584:	d103      	bne.n	801158e <osThreadYield+0x3a>
    stat = osErrorISR;
 8011586:	f06f 0305 	mvn.w	r3, #5
 801158a:	60fb      	str	r3, [r7, #12]
 801158c:	e009      	b.n	80115a2 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 801158e:	2300      	movs	r3, #0
 8011590:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8011592:	4b08      	ldr	r3, [pc, #32]	; (80115b4 <osThreadYield+0x60>)
 8011594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011598:	601a      	str	r2, [r3, #0]
 801159a:	f3bf 8f4f 	dsb	sy
 801159e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80115a2:	68fb      	ldr	r3, [r7, #12]
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3714      	adds	r7, #20
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr
 80115b0:	200239e4 	.word	0x200239e4
 80115b4:	e000ed04 	.word	0xe000ed04

080115b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b086      	sub	sp, #24
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115c0:	f3ef 8305 	mrs	r3, IPSR
 80115c4:	613b      	str	r3, [r7, #16]
  return(result);
 80115c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d10f      	bne.n	80115ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115cc:	f3ef 8310 	mrs	r3, PRIMASK
 80115d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d105      	bne.n	80115e4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80115d8:	f3ef 8311 	mrs	r3, BASEPRI
 80115dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d007      	beq.n	80115f4 <osDelay+0x3c>
 80115e4:	4b0a      	ldr	r3, [pc, #40]	; (8011610 <osDelay+0x58>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b02      	cmp	r3, #2
 80115ea:	d103      	bne.n	80115f4 <osDelay+0x3c>
    stat = osErrorISR;
 80115ec:	f06f 0305 	mvn.w	r3, #5
 80115f0:	617b      	str	r3, [r7, #20]
 80115f2:	e007      	b.n	8011604 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80115f4:	2300      	movs	r3, #0
 80115f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d002      	beq.n	8011604 <osDelay+0x4c>
      vTaskDelay(ticks);
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f002 f9d0 	bl	80139a4 <vTaskDelay>
    }
  }

  return (stat);
 8011604:	697b      	ldr	r3, [r7, #20]
}
 8011606:	4618      	mov	r0, r3
 8011608:	3718      	adds	r7, #24
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	200239e4 	.word	0x200239e4

08011614 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011614:	b580      	push	{r7, lr}
 8011616:	b08c      	sub	sp, #48	; 0x30
 8011618:	af02      	add	r7, sp, #8
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011620:	2300      	movs	r3, #0
 8011622:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011624:	f3ef 8305 	mrs	r3, IPSR
 8011628:	61bb      	str	r3, [r7, #24]
  return(result);
 801162a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801162c:	2b00      	cmp	r3, #0
 801162e:	f040 8086 	bne.w	801173e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011632:	f3ef 8310 	mrs	r3, PRIMASK
 8011636:	617b      	str	r3, [r7, #20]
  return(result);
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d105      	bne.n	801164a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801163e:	f3ef 8311 	mrs	r3, BASEPRI
 8011642:	613b      	str	r3, [r7, #16]
  return(result);
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d003      	beq.n	8011652 <osSemaphoreNew+0x3e>
 801164a:	4b3f      	ldr	r3, [pc, #252]	; (8011748 <osSemaphoreNew+0x134>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2b02      	cmp	r3, #2
 8011650:	d075      	beq.n	801173e <osSemaphoreNew+0x12a>
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d072      	beq.n	801173e <osSemaphoreNew+0x12a>
 8011658:	68ba      	ldr	r2, [r7, #8]
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	429a      	cmp	r2, r3
 801165e:	d86e      	bhi.n	801173e <osSemaphoreNew+0x12a>
    mem = -1;
 8011660:	f04f 33ff 	mov.w	r3, #4294967295
 8011664:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d015      	beq.n	8011698 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d006      	beq.n	8011682 <osSemaphoreNew+0x6e>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	2b4f      	cmp	r3, #79	; 0x4f
 801167a:	d902      	bls.n	8011682 <osSemaphoreNew+0x6e>
        mem = 1;
 801167c:	2301      	movs	r3, #1
 801167e:	623b      	str	r3, [r7, #32]
 8011680:	e00c      	b.n	801169c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	689b      	ldr	r3, [r3, #8]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d108      	bne.n	801169c <osSemaphoreNew+0x88>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d104      	bne.n	801169c <osSemaphoreNew+0x88>
          mem = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	623b      	str	r3, [r7, #32]
 8011696:	e001      	b.n	801169c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8011698:	2300      	movs	r3, #0
 801169a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801169c:	6a3b      	ldr	r3, [r7, #32]
 801169e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116a2:	d04c      	beq.n	801173e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2b01      	cmp	r3, #1
 80116a8:	d128      	bne.n	80116fc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80116aa:	6a3b      	ldr	r3, [r7, #32]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d10a      	bne.n	80116c6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	689b      	ldr	r3, [r3, #8]
 80116b4:	2203      	movs	r2, #3
 80116b6:	9200      	str	r2, [sp, #0]
 80116b8:	2200      	movs	r2, #0
 80116ba:	2100      	movs	r1, #0
 80116bc:	2001      	movs	r0, #1
 80116be:	f000 ffdb 	bl	8012678 <xQueueGenericCreateStatic>
 80116c2:	6278      	str	r0, [r7, #36]	; 0x24
 80116c4:	e005      	b.n	80116d2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80116c6:	2203      	movs	r2, #3
 80116c8:	2100      	movs	r1, #0
 80116ca:	2001      	movs	r0, #1
 80116cc:	f001 f856 	bl	801277c <xQueueGenericCreate>
 80116d0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d022      	beq.n	801171e <osSemaphoreNew+0x10a>
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d01f      	beq.n	801171e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80116de:	2300      	movs	r3, #0
 80116e0:	2200      	movs	r2, #0
 80116e2:	2100      	movs	r1, #0
 80116e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116e6:	f001 f921 	bl	801292c <xQueueGenericSend>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d016      	beq.n	801171e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80116f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116f2:	f001 fdd7 	bl	80132a4 <vQueueDelete>
            hSemaphore = NULL;
 80116f6:	2300      	movs	r3, #0
 80116f8:	627b      	str	r3, [r7, #36]	; 0x24
 80116fa:	e010      	b.n	801171e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80116fc:	6a3b      	ldr	r3, [r7, #32]
 80116fe:	2b01      	cmp	r3, #1
 8011700:	d108      	bne.n	8011714 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	689b      	ldr	r3, [r3, #8]
 8011706:	461a      	mov	r2, r3
 8011708:	68b9      	ldr	r1, [r7, #8]
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	f001 f89b 	bl	8012846 <xQueueCreateCountingSemaphoreStatic>
 8011710:	6278      	str	r0, [r7, #36]	; 0x24
 8011712:	e004      	b.n	801171e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011714:	68b9      	ldr	r1, [r7, #8]
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	f001 f8d0 	bl	80128bc <xQueueCreateCountingSemaphore>
 801171c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011720:	2b00      	cmp	r3, #0
 8011722:	d00c      	beq.n	801173e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d003      	beq.n	8011732 <osSemaphoreNew+0x11e>
          name = attr->name;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	61fb      	str	r3, [r7, #28]
 8011730:	e001      	b.n	8011736 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8011732:	2300      	movs	r3, #0
 8011734:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011736:	69f9      	ldr	r1, [r7, #28]
 8011738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801173a:	f001 ff01 	bl	8013540 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011740:	4618      	mov	r0, r3
 8011742:	3728      	adds	r7, #40	; 0x28
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}
 8011748:	200239e4 	.word	0x200239e4

0801174c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801174c:	b580      	push	{r7, lr}
 801174e:	b088      	sub	sp, #32
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801175a:	2300      	movs	r3, #0
 801175c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d103      	bne.n	801176c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011764:	f06f 0303 	mvn.w	r3, #3
 8011768:	61fb      	str	r3, [r7, #28]
 801176a:	e04b      	b.n	8011804 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801176c:	f3ef 8305 	mrs	r3, IPSR
 8011770:	617b      	str	r3, [r7, #20]
  return(result);
 8011772:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011774:	2b00      	cmp	r3, #0
 8011776:	d10f      	bne.n	8011798 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011778:	f3ef 8310 	mrs	r3, PRIMASK
 801177c:	613b      	str	r3, [r7, #16]
  return(result);
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d105      	bne.n	8011790 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011784:	f3ef 8311 	mrs	r3, BASEPRI
 8011788:	60fb      	str	r3, [r7, #12]
  return(result);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d026      	beq.n	80117de <osSemaphoreAcquire+0x92>
 8011790:	4b1f      	ldr	r3, [pc, #124]	; (8011810 <osSemaphoreAcquire+0xc4>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	2b02      	cmp	r3, #2
 8011796:	d122      	bne.n	80117de <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d003      	beq.n	80117a6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801179e:	f06f 0303 	mvn.w	r3, #3
 80117a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80117a4:	e02d      	b.n	8011802 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80117a6:	2300      	movs	r3, #0
 80117a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80117aa:	f107 0308 	add.w	r3, r7, #8
 80117ae:	461a      	mov	r2, r3
 80117b0:	2100      	movs	r1, #0
 80117b2:	69b8      	ldr	r0, [r7, #24]
 80117b4:	f001 fcf0 	bl	8013198 <xQueueReceiveFromISR>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	d003      	beq.n	80117c6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80117be:	f06f 0302 	mvn.w	r3, #2
 80117c2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80117c4:	e01d      	b.n	8011802 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d01a      	beq.n	8011802 <osSemaphoreAcquire+0xb6>
 80117cc:	4b11      	ldr	r3, [pc, #68]	; (8011814 <osSemaphoreAcquire+0xc8>)
 80117ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117d2:	601a      	str	r2, [r3, #0]
 80117d4:	f3bf 8f4f 	dsb	sy
 80117d8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80117dc:	e011      	b.n	8011802 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80117de:	6839      	ldr	r1, [r7, #0]
 80117e0:	69b8      	ldr	r0, [r7, #24]
 80117e2:	f001 fbc5 	bl	8012f70 <xQueueSemaphoreTake>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	d00b      	beq.n	8011804 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d003      	beq.n	80117fa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80117f2:	f06f 0301 	mvn.w	r3, #1
 80117f6:	61fb      	str	r3, [r7, #28]
 80117f8:	e004      	b.n	8011804 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80117fa:	f06f 0302 	mvn.w	r3, #2
 80117fe:	61fb      	str	r3, [r7, #28]
 8011800:	e000      	b.n	8011804 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011802:	bf00      	nop
      }
    }
  }

  return (stat);
 8011804:	69fb      	ldr	r3, [r7, #28]
}
 8011806:	4618      	mov	r0, r3
 8011808:	3720      	adds	r7, #32
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	200239e4 	.word	0x200239e4
 8011814:	e000ed04 	.word	0xe000ed04

08011818 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011818:	b580      	push	{r7, lr}
 801181a:	b088      	sub	sp, #32
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011824:	2300      	movs	r3, #0
 8011826:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011828:	69bb      	ldr	r3, [r7, #24]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d103      	bne.n	8011836 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801182e:	f06f 0303 	mvn.w	r3, #3
 8011832:	61fb      	str	r3, [r7, #28]
 8011834:	e03e      	b.n	80118b4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011836:	f3ef 8305 	mrs	r3, IPSR
 801183a:	617b      	str	r3, [r7, #20]
  return(result);
 801183c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801183e:	2b00      	cmp	r3, #0
 8011840:	d10f      	bne.n	8011862 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011842:	f3ef 8310 	mrs	r3, PRIMASK
 8011846:	613b      	str	r3, [r7, #16]
  return(result);
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d105      	bne.n	801185a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801184e:	f3ef 8311 	mrs	r3, BASEPRI
 8011852:	60fb      	str	r3, [r7, #12]
  return(result);
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d01e      	beq.n	8011898 <osSemaphoreRelease+0x80>
 801185a:	4b19      	ldr	r3, [pc, #100]	; (80118c0 <osSemaphoreRelease+0xa8>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	2b02      	cmp	r3, #2
 8011860:	d11a      	bne.n	8011898 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011862:	2300      	movs	r3, #0
 8011864:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011866:	f107 0308 	add.w	r3, r7, #8
 801186a:	4619      	mov	r1, r3
 801186c:	69b8      	ldr	r0, [r7, #24]
 801186e:	f001 fa03 	bl	8012c78 <xQueueGiveFromISR>
 8011872:	4603      	mov	r3, r0
 8011874:	2b01      	cmp	r3, #1
 8011876:	d003      	beq.n	8011880 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8011878:	f06f 0302 	mvn.w	r3, #2
 801187c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801187e:	e018      	b.n	80118b2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d015      	beq.n	80118b2 <osSemaphoreRelease+0x9a>
 8011886:	4b0f      	ldr	r3, [pc, #60]	; (80118c4 <osSemaphoreRelease+0xac>)
 8011888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801188c:	601a      	str	r2, [r3, #0]
 801188e:	f3bf 8f4f 	dsb	sy
 8011892:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011896:	e00c      	b.n	80118b2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011898:	2300      	movs	r3, #0
 801189a:	2200      	movs	r2, #0
 801189c:	2100      	movs	r1, #0
 801189e:	69b8      	ldr	r0, [r7, #24]
 80118a0:	f001 f844 	bl	801292c <xQueueGenericSend>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d004      	beq.n	80118b4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80118aa:	f06f 0302 	mvn.w	r3, #2
 80118ae:	61fb      	str	r3, [r7, #28]
 80118b0:	e000      	b.n	80118b4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80118b2:	bf00      	nop
    }
  }

  return (stat);
 80118b4:	69fb      	ldr	r3, [r7, #28]
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3720      	adds	r7, #32
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	200239e4 	.word	0x200239e4
 80118c4:	e000ed04 	.word	0xe000ed04

080118c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b08c      	sub	sp, #48	; 0x30
 80118cc:	af02      	add	r7, sp, #8
 80118ce:	60f8      	str	r0, [r7, #12]
 80118d0:	60b9      	str	r1, [r7, #8]
 80118d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80118d4:	2300      	movs	r3, #0
 80118d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80118d8:	f3ef 8305 	mrs	r3, IPSR
 80118dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80118de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d16f      	bne.n	80119c4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118e4:	f3ef 8310 	mrs	r3, PRIMASK
 80118e8:	617b      	str	r3, [r7, #20]
  return(result);
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d105      	bne.n	80118fc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80118f0:	f3ef 8311 	mrs	r3, BASEPRI
 80118f4:	613b      	str	r3, [r7, #16]
  return(result);
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d003      	beq.n	8011904 <osMessageQueueNew+0x3c>
 80118fc:	4b34      	ldr	r3, [pc, #208]	; (80119d0 <osMessageQueueNew+0x108>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	2b02      	cmp	r3, #2
 8011902:	d05f      	beq.n	80119c4 <osMessageQueueNew+0xfc>
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d05c      	beq.n	80119c4 <osMessageQueueNew+0xfc>
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d059      	beq.n	80119c4 <osMessageQueueNew+0xfc>
    mem = -1;
 8011910:	f04f 33ff 	mov.w	r3, #4294967295
 8011914:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d029      	beq.n	8011970 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	689b      	ldr	r3, [r3, #8]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d012      	beq.n	801194a <osMessageQueueNew+0x82>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	2b4f      	cmp	r3, #79	; 0x4f
 801192a:	d90e      	bls.n	801194a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011930:	2b00      	cmp	r3, #0
 8011932:	d00a      	beq.n	801194a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	695a      	ldr	r2, [r3, #20]
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	68b9      	ldr	r1, [r7, #8]
 801193c:	fb01 f303 	mul.w	r3, r1, r3
 8011940:	429a      	cmp	r2, r3
 8011942:	d302      	bcc.n	801194a <osMessageQueueNew+0x82>
        mem = 1;
 8011944:	2301      	movs	r3, #1
 8011946:	623b      	str	r3, [r7, #32]
 8011948:	e014      	b.n	8011974 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	689b      	ldr	r3, [r3, #8]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d110      	bne.n	8011974 <osMessageQueueNew+0xac>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d10c      	bne.n	8011974 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801195e:	2b00      	cmp	r3, #0
 8011960:	d108      	bne.n	8011974 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	695b      	ldr	r3, [r3, #20]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d104      	bne.n	8011974 <osMessageQueueNew+0xac>
          mem = 0;
 801196a:	2300      	movs	r3, #0
 801196c:	623b      	str	r3, [r7, #32]
 801196e:	e001      	b.n	8011974 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8011970:	2300      	movs	r3, #0
 8011972:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	2b01      	cmp	r3, #1
 8011978:	d10b      	bne.n	8011992 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	691a      	ldr	r2, [r3, #16]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	689b      	ldr	r3, [r3, #8]
 8011982:	2100      	movs	r1, #0
 8011984:	9100      	str	r1, [sp, #0]
 8011986:	68b9      	ldr	r1, [r7, #8]
 8011988:	68f8      	ldr	r0, [r7, #12]
 801198a:	f000 fe75 	bl	8012678 <xQueueGenericCreateStatic>
 801198e:	6278      	str	r0, [r7, #36]	; 0x24
 8011990:	e008      	b.n	80119a4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8011992:	6a3b      	ldr	r3, [r7, #32]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d105      	bne.n	80119a4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8011998:	2200      	movs	r2, #0
 801199a:	68b9      	ldr	r1, [r7, #8]
 801199c:	68f8      	ldr	r0, [r7, #12]
 801199e:	f000 feed 	bl	801277c <xQueueGenericCreate>
 80119a2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80119a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d00c      	beq.n	80119c4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d003      	beq.n	80119b8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	61fb      	str	r3, [r7, #28]
 80119b6:	e001      	b.n	80119bc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80119b8:	2300      	movs	r3, #0
 80119ba:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80119bc:	69f9      	ldr	r1, [r7, #28]
 80119be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119c0:	f001 fdbe 	bl	8013540 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80119c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3728      	adds	r7, #40	; 0x28
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	200239e4 	.word	0x200239e4

080119d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b08a      	sub	sp, #40	; 0x28
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	603b      	str	r3, [r7, #0]
 80119e0:	4613      	mov	r3, r2
 80119e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80119e8:	2300      	movs	r3, #0
 80119ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119ec:	f3ef 8305 	mrs	r3, IPSR
 80119f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80119f2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d10f      	bne.n	8011a18 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80119f8:	f3ef 8310 	mrs	r3, PRIMASK
 80119fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d105      	bne.n	8011a10 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a04:	f3ef 8311 	mrs	r3, BASEPRI
 8011a08:	617b      	str	r3, [r7, #20]
  return(result);
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d02c      	beq.n	8011a6a <osMessageQueuePut+0x96>
 8011a10:	4b28      	ldr	r3, [pc, #160]	; (8011ab4 <osMessageQueuePut+0xe0>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d128      	bne.n	8011a6a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011a18:	6a3b      	ldr	r3, [r7, #32]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d005      	beq.n	8011a2a <osMessageQueuePut+0x56>
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d002      	beq.n	8011a2a <osMessageQueuePut+0x56>
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d003      	beq.n	8011a32 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8011a2a:	f06f 0303 	mvn.w	r3, #3
 8011a2e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011a30:	e039      	b.n	8011aa6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8011a32:	2300      	movs	r3, #0
 8011a34:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011a36:	f107 0210 	add.w	r2, r7, #16
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	68b9      	ldr	r1, [r7, #8]
 8011a3e:	6a38      	ldr	r0, [r7, #32]
 8011a40:	f001 f87a 	bl	8012b38 <xQueueGenericSendFromISR>
 8011a44:	4603      	mov	r3, r0
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d003      	beq.n	8011a52 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8011a4a:	f06f 0302 	mvn.w	r3, #2
 8011a4e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011a50:	e029      	b.n	8011aa6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d026      	beq.n	8011aa6 <osMessageQueuePut+0xd2>
 8011a58:	4b17      	ldr	r3, [pc, #92]	; (8011ab8 <osMessageQueuePut+0xe4>)
 8011a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a5e:	601a      	str	r2, [r3, #0]
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011a68:	e01d      	b.n	8011aa6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d002      	beq.n	8011a76 <osMessageQueuePut+0xa2>
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d103      	bne.n	8011a7e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8011a76:	f06f 0303 	mvn.w	r3, #3
 8011a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8011a7c:	e014      	b.n	8011aa8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011a7e:	2300      	movs	r3, #0
 8011a80:	683a      	ldr	r2, [r7, #0]
 8011a82:	68b9      	ldr	r1, [r7, #8]
 8011a84:	6a38      	ldr	r0, [r7, #32]
 8011a86:	f000 ff51 	bl	801292c <xQueueGenericSend>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d00b      	beq.n	8011aa8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d003      	beq.n	8011a9e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8011a96:	f06f 0301 	mvn.w	r3, #1
 8011a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8011a9c:	e004      	b.n	8011aa8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8011a9e:	f06f 0302 	mvn.w	r3, #2
 8011aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8011aa4:	e000      	b.n	8011aa8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011aa6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3728      	adds	r7, #40	; 0x28
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	200239e4 	.word	0x200239e4
 8011ab8:	e000ed04 	.word	0xe000ed04

08011abc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b08a      	sub	sp, #40	; 0x28
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	60f8      	str	r0, [r7, #12]
 8011ac4:	60b9      	str	r1, [r7, #8]
 8011ac6:	607a      	str	r2, [r7, #4]
 8011ac8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ad2:	f3ef 8305 	mrs	r3, IPSR
 8011ad6:	61fb      	str	r3, [r7, #28]
  return(result);
 8011ad8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d10f      	bne.n	8011afe <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ade:	f3ef 8310 	mrs	r3, PRIMASK
 8011ae2:	61bb      	str	r3, [r7, #24]
  return(result);
 8011ae4:	69bb      	ldr	r3, [r7, #24]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d105      	bne.n	8011af6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011aea:	f3ef 8311 	mrs	r3, BASEPRI
 8011aee:	617b      	str	r3, [r7, #20]
  return(result);
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d02c      	beq.n	8011b50 <osMessageQueueGet+0x94>
 8011af6:	4b28      	ldr	r3, [pc, #160]	; (8011b98 <osMessageQueueGet+0xdc>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2b02      	cmp	r3, #2
 8011afc:	d128      	bne.n	8011b50 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011afe:	6a3b      	ldr	r3, [r7, #32]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d005      	beq.n	8011b10 <osMessageQueueGet+0x54>
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d002      	beq.n	8011b10 <osMessageQueueGet+0x54>
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d003      	beq.n	8011b18 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8011b10:	f06f 0303 	mvn.w	r3, #3
 8011b14:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011b16:	e038      	b.n	8011b8a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011b1c:	f107 0310 	add.w	r3, r7, #16
 8011b20:	461a      	mov	r2, r3
 8011b22:	68b9      	ldr	r1, [r7, #8]
 8011b24:	6a38      	ldr	r0, [r7, #32]
 8011b26:	f001 fb37 	bl	8013198 <xQueueReceiveFromISR>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d003      	beq.n	8011b38 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8011b30:	f06f 0302 	mvn.w	r3, #2
 8011b34:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011b36:	e028      	b.n	8011b8a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d025      	beq.n	8011b8a <osMessageQueueGet+0xce>
 8011b3e:	4b17      	ldr	r3, [pc, #92]	; (8011b9c <osMessageQueueGet+0xe0>)
 8011b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b44:	601a      	str	r2, [r3, #0]
 8011b46:	f3bf 8f4f 	dsb	sy
 8011b4a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011b4e:	e01c      	b.n	8011b8a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011b50:	6a3b      	ldr	r3, [r7, #32]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d002      	beq.n	8011b5c <osMessageQueueGet+0xa0>
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d103      	bne.n	8011b64 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8011b5c:	f06f 0303 	mvn.w	r3, #3
 8011b60:	627b      	str	r3, [r7, #36]	; 0x24
 8011b62:	e013      	b.n	8011b8c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011b64:	683a      	ldr	r2, [r7, #0]
 8011b66:	68b9      	ldr	r1, [r7, #8]
 8011b68:	6a38      	ldr	r0, [r7, #32]
 8011b6a:	f001 f91b 	bl	8012da4 <xQueueReceive>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d00b      	beq.n	8011b8c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d003      	beq.n	8011b82 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8011b7a:	f06f 0301 	mvn.w	r3, #1
 8011b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8011b80:	e004      	b.n	8011b8c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8011b82:	f06f 0302 	mvn.w	r3, #2
 8011b86:	627b      	str	r3, [r7, #36]	; 0x24
 8011b88:	e000      	b.n	8011b8c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011b8a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3728      	adds	r7, #40	; 0x28
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}
 8011b96:	bf00      	nop
 8011b98:	200239e4 	.word	0x200239e4
 8011b9c:	e000ed04 	.word	0xe000ed04

08011ba0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011ba0:	b480      	push	{r7}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	4a07      	ldr	r2, [pc, #28]	; (8011bcc <vApplicationGetIdleTaskMemory+0x2c>)
 8011bb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	4a06      	ldr	r2, [pc, #24]	; (8011bd0 <vApplicationGetIdleTaskMemory+0x30>)
 8011bb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2280      	movs	r2, #128	; 0x80
 8011bbc:	601a      	str	r2, [r3, #0]
}
 8011bbe:	bf00      	nop
 8011bc0:	3714      	adds	r7, #20
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc8:	4770      	bx	lr
 8011bca:	bf00      	nop
 8011bcc:	200239e8 	.word	0x200239e8
 8011bd0:	20023a44 	.word	0x20023a44

08011bd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011bd4:	b480      	push	{r7}
 8011bd6:	b085      	sub	sp, #20
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	4a07      	ldr	r2, [pc, #28]	; (8011c00 <vApplicationGetTimerTaskMemory+0x2c>)
 8011be4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	4a06      	ldr	r2, [pc, #24]	; (8011c04 <vApplicationGetTimerTaskMemory+0x30>)
 8011bea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011bf2:	601a      	str	r2, [r3, #0]
}
 8011bf4:	bf00      	nop
 8011bf6:	3714      	adds	r7, #20
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr
 8011c00:	20023c44 	.word	0x20023c44
 8011c04:	20023ca0 	.word	0x20023ca0

08011c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b08a      	sub	sp, #40	; 0x28
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c10:	2300      	movs	r3, #0
 8011c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c14:	f001 ff66 	bl	8013ae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c18:	4b5b      	ldr	r3, [pc, #364]	; (8011d88 <pvPortMalloc+0x180>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d101      	bne.n	8011c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c20:	f000 f91a 	bl	8011e58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c24:	4b59      	ldr	r3, [pc, #356]	; (8011d8c <pvPortMalloc+0x184>)
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	4013      	ands	r3, r2
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	f040 8092 	bne.w	8011d56 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d01f      	beq.n	8011c78 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8011c38:	2208      	movs	r2, #8
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4413      	add	r3, r2
 8011c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f003 0307 	and.w	r3, r3, #7
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d016      	beq.n	8011c78 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f023 0307 	bic.w	r3, r3, #7
 8011c50:	3308      	adds	r3, #8
 8011c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f003 0307 	and.w	r3, r3, #7
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d00c      	beq.n	8011c78 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011c5e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c62:	b672      	cpsid	i
 8011c64:	f383 8811 	msr	BASEPRI, r3
 8011c68:	f3bf 8f6f 	isb	sy
 8011c6c:	f3bf 8f4f 	dsb	sy
 8011c70:	b662      	cpsie	i
 8011c72:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011c74:	bf00      	nop
 8011c76:	e7fe      	b.n	8011c76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d06b      	beq.n	8011d56 <pvPortMalloc+0x14e>
 8011c7e:	4b44      	ldr	r3, [pc, #272]	; (8011d90 <pvPortMalloc+0x188>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d866      	bhi.n	8011d56 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011c88:	4b42      	ldr	r3, [pc, #264]	; (8011d94 <pvPortMalloc+0x18c>)
 8011c8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011c8c:	4b41      	ldr	r3, [pc, #260]	; (8011d94 <pvPortMalloc+0x18c>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c92:	e004      	b.n	8011c9e <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d903      	bls.n	8011cb0 <pvPortMalloc+0xa8>
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d1f1      	bne.n	8011c94 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011cb0:	4b35      	ldr	r3, [pc, #212]	; (8011d88 <pvPortMalloc+0x180>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d04d      	beq.n	8011d56 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011cba:	6a3b      	ldr	r3, [r7, #32]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	2208      	movs	r2, #8
 8011cc0:	4413      	add	r3, r2
 8011cc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	6a3b      	ldr	r3, [r7, #32]
 8011cca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	685a      	ldr	r2, [r3, #4]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	1ad2      	subs	r2, r2, r3
 8011cd4:	2308      	movs	r3, #8
 8011cd6:	005b      	lsls	r3, r3, #1
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d921      	bls.n	8011d20 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ce4:	69bb      	ldr	r3, [r7, #24]
 8011ce6:	f003 0307 	and.w	r3, r3, #7
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d00c      	beq.n	8011d08 <pvPortMalloc+0x100>
	__asm volatile
 8011cee:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011cf2:	b672      	cpsid	i
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	b662      	cpsie	i
 8011d02:	613b      	str	r3, [r7, #16]
}
 8011d04:	bf00      	nop
 8011d06:	e7fe      	b.n	8011d06 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0a:	685a      	ldr	r2, [r3, #4]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	1ad2      	subs	r2, r2, r3
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d16:	687a      	ldr	r2, [r7, #4]
 8011d18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d1a:	69b8      	ldr	r0, [r7, #24]
 8011d1c:	f000 f8fe 	bl	8011f1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d20:	4b1b      	ldr	r3, [pc, #108]	; (8011d90 <pvPortMalloc+0x188>)
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	1ad3      	subs	r3, r2, r3
 8011d2a:	4a19      	ldr	r2, [pc, #100]	; (8011d90 <pvPortMalloc+0x188>)
 8011d2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d2e:	4b18      	ldr	r3, [pc, #96]	; (8011d90 <pvPortMalloc+0x188>)
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	4b19      	ldr	r3, [pc, #100]	; (8011d98 <pvPortMalloc+0x190>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d203      	bcs.n	8011d42 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d3a:	4b15      	ldr	r3, [pc, #84]	; (8011d90 <pvPortMalloc+0x188>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	4a16      	ldr	r2, [pc, #88]	; (8011d98 <pvPortMalloc+0x190>)
 8011d40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d44:	685a      	ldr	r2, [r3, #4]
 8011d46:	4b11      	ldr	r3, [pc, #68]	; (8011d8c <pvPortMalloc+0x184>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	431a      	orrs	r2, r3
 8011d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d52:	2200      	movs	r2, #0
 8011d54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d56:	f001 fed3 	bl	8013b00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	f003 0307 	and.w	r3, r3, #7
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d00c      	beq.n	8011d7e <pvPortMalloc+0x176>
	__asm volatile
 8011d64:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011d68:	b672      	cpsid	i
 8011d6a:	f383 8811 	msr	BASEPRI, r3
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	b662      	cpsie	i
 8011d78:	60fb      	str	r3, [r7, #12]
}
 8011d7a:	bf00      	nop
 8011d7c:	e7fe      	b.n	8011d7c <pvPortMalloc+0x174>
	return pvReturn;
 8011d7e:	69fb      	ldr	r3, [r7, #28]
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3728      	adds	r7, #40	; 0x28
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	200560a8 	.word	0x200560a8
 8011d8c:	200560b4 	.word	0x200560b4
 8011d90:	200560ac 	.word	0x200560ac
 8011d94:	200560a0 	.word	0x200560a0
 8011d98:	200560b0 	.word	0x200560b0

08011d9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b086      	sub	sp, #24
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d04c      	beq.n	8011e48 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011dae:	2308      	movs	r3, #8
 8011db0:	425b      	negs	r3, r3
 8011db2:	697a      	ldr	r2, [r7, #20]
 8011db4:	4413      	add	r3, r2
 8011db6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	685a      	ldr	r2, [r3, #4]
 8011dc0:	4b23      	ldr	r3, [pc, #140]	; (8011e50 <vPortFree+0xb4>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	4013      	ands	r3, r2
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d10c      	bne.n	8011de4 <vPortFree+0x48>
	__asm volatile
 8011dca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011dce:	b672      	cpsid	i
 8011dd0:	f383 8811 	msr	BASEPRI, r3
 8011dd4:	f3bf 8f6f 	isb	sy
 8011dd8:	f3bf 8f4f 	dsb	sy
 8011ddc:	b662      	cpsie	i
 8011dde:	60fb      	str	r3, [r7, #12]
}
 8011de0:	bf00      	nop
 8011de2:	e7fe      	b.n	8011de2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00c      	beq.n	8011e06 <vPortFree+0x6a>
	__asm volatile
 8011dec:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011df0:	b672      	cpsid	i
 8011df2:	f383 8811 	msr	BASEPRI, r3
 8011df6:	f3bf 8f6f 	isb	sy
 8011dfa:	f3bf 8f4f 	dsb	sy
 8011dfe:	b662      	cpsie	i
 8011e00:	60bb      	str	r3, [r7, #8]
}
 8011e02:	bf00      	nop
 8011e04:	e7fe      	b.n	8011e04 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	685a      	ldr	r2, [r3, #4]
 8011e0a:	4b11      	ldr	r3, [pc, #68]	; (8011e50 <vPortFree+0xb4>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	4013      	ands	r3, r2
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d019      	beq.n	8011e48 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d115      	bne.n	8011e48 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	685a      	ldr	r2, [r3, #4]
 8011e20:	4b0b      	ldr	r3, [pc, #44]	; (8011e50 <vPortFree+0xb4>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	43db      	mvns	r3, r3
 8011e26:	401a      	ands	r2, r3
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e2c:	f001 fe5a 	bl	8013ae4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	685a      	ldr	r2, [r3, #4]
 8011e34:	4b07      	ldr	r3, [pc, #28]	; (8011e54 <vPortFree+0xb8>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	4413      	add	r3, r2
 8011e3a:	4a06      	ldr	r2, [pc, #24]	; (8011e54 <vPortFree+0xb8>)
 8011e3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e3e:	6938      	ldr	r0, [r7, #16]
 8011e40:	f000 f86c 	bl	8011f1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011e44:	f001 fe5c 	bl	8013b00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011e48:	bf00      	nop
 8011e4a:	3718      	adds	r7, #24
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	200560b4 	.word	0x200560b4
 8011e54:	200560ac 	.word	0x200560ac

08011e58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b085      	sub	sp, #20
 8011e5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011e5e:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 8011e62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011e64:	4b27      	ldr	r3, [pc, #156]	; (8011f04 <prvHeapInit+0xac>)
 8011e66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f003 0307 	and.w	r3, r3, #7
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d00c      	beq.n	8011e8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	3307      	adds	r3, #7
 8011e76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f023 0307 	bic.w	r3, r3, #7
 8011e7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011e80:	68ba      	ldr	r2, [r7, #8]
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	1ad3      	subs	r3, r2, r3
 8011e86:	4a1f      	ldr	r2, [pc, #124]	; (8011f04 <prvHeapInit+0xac>)
 8011e88:	4413      	add	r3, r2
 8011e8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011e90:	4a1d      	ldr	r2, [pc, #116]	; (8011f08 <prvHeapInit+0xb0>)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011e96:	4b1c      	ldr	r3, [pc, #112]	; (8011f08 <prvHeapInit+0xb0>)
 8011e98:	2200      	movs	r2, #0
 8011e9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	68ba      	ldr	r2, [r7, #8]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011ea4:	2208      	movs	r2, #8
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	1a9b      	subs	r3, r3, r2
 8011eaa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f023 0307 	bic.w	r3, r3, #7
 8011eb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	4a15      	ldr	r2, [pc, #84]	; (8011f0c <prvHeapInit+0xb4>)
 8011eb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011eba:	4b14      	ldr	r3, [pc, #80]	; (8011f0c <prvHeapInit+0xb4>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011ec2:	4b12      	ldr	r3, [pc, #72]	; (8011f0c <prvHeapInit+0xb4>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	1ad2      	subs	r2, r2, r3
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011ed8:	4b0c      	ldr	r3, [pc, #48]	; (8011f0c <prvHeapInit+0xb4>)
 8011eda:	681a      	ldr	r2, [r3, #0]
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	4a0a      	ldr	r2, [pc, #40]	; (8011f10 <prvHeapInit+0xb8>)
 8011ee6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	4a09      	ldr	r2, [pc, #36]	; (8011f14 <prvHeapInit+0xbc>)
 8011eee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ef0:	4b09      	ldr	r3, [pc, #36]	; (8011f18 <prvHeapInit+0xc0>)
 8011ef2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011ef6:	601a      	str	r2, [r3, #0]
}
 8011ef8:	bf00      	nop
 8011efa:	3714      	adds	r7, #20
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr
 8011f04:	200240a0 	.word	0x200240a0
 8011f08:	200560a0 	.word	0x200560a0
 8011f0c:	200560a8 	.word	0x200560a8
 8011f10:	200560b0 	.word	0x200560b0
 8011f14:	200560ac 	.word	0x200560ac
 8011f18:	200560b4 	.word	0x200560b4

08011f1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b085      	sub	sp, #20
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f24:	4b28      	ldr	r3, [pc, #160]	; (8011fc8 <prvInsertBlockIntoFreeList+0xac>)
 8011f26:	60fb      	str	r3, [r7, #12]
 8011f28:	e002      	b.n	8011f30 <prvInsertBlockIntoFreeList+0x14>
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	60fb      	str	r3, [r7, #12]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d8f7      	bhi.n	8011f2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	68ba      	ldr	r2, [r7, #8]
 8011f44:	4413      	add	r3, r2
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d108      	bne.n	8011f5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	685a      	ldr	r2, [r3, #4]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	441a      	add	r2, r3
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	441a      	add	r2, r3
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d118      	bne.n	8011fa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	4b15      	ldr	r3, [pc, #84]	; (8011fcc <prvInsertBlockIntoFreeList+0xb0>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d00d      	beq.n	8011f9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	685a      	ldr	r2, [r3, #4]
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	441a      	add	r2, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	681a      	ldr	r2, [r3, #0]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	601a      	str	r2, [r3, #0]
 8011f98:	e008      	b.n	8011fac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011f9a:	4b0c      	ldr	r3, [pc, #48]	; (8011fcc <prvInsertBlockIntoFreeList+0xb0>)
 8011f9c:	681a      	ldr	r2, [r3, #0]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	601a      	str	r2, [r3, #0]
 8011fa2:	e003      	b.n	8011fac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011fac:	68fa      	ldr	r2, [r7, #12]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d002      	beq.n	8011fba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011fba:	bf00      	nop
 8011fbc:	3714      	adds	r7, #20
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop
 8011fc8:	200560a0 	.word	0x200560a0
 8011fcc:	200560a8 	.word	0x200560a8

08011fd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f103 0208 	add.w	r2, r3, #8
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8011fe8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f103 0208 	add.w	r2, r3, #8
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	f103 0208 	add.w	r2, r3, #8
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2200      	movs	r2, #0
 8012002:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012004:	bf00      	nop
 8012006:	370c      	adds	r7, #12
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr

08012010 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801201e:	bf00      	nop
 8012020:	370c      	adds	r7, #12
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr

0801202a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801202a:	b480      	push	{r7}
 801202c:	b085      	sub	sp, #20
 801202e:	af00      	add	r7, sp, #0
 8012030:	6078      	str	r0, [r7, #4]
 8012032:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	689a      	ldr	r2, [r3, #8]
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	689b      	ldr	r3, [r3, #8]
 801204c:	683a      	ldr	r2, [r7, #0]
 801204e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	683a      	ldr	r2, [r7, #0]
 8012054:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	687a      	ldr	r2, [r7, #4]
 801205a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	1c5a      	adds	r2, r3, #1
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	601a      	str	r2, [r3, #0]
}
 8012066:	bf00      	nop
 8012068:	3714      	adds	r7, #20
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr

08012072 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012072:	b480      	push	{r7}
 8012074:	b085      	sub	sp, #20
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
 801207a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012088:	d103      	bne.n	8012092 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	691b      	ldr	r3, [r3, #16]
 801208e:	60fb      	str	r3, [r7, #12]
 8012090:	e00c      	b.n	80120ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	3308      	adds	r3, #8
 8012096:	60fb      	str	r3, [r7, #12]
 8012098:	e002      	b.n	80120a0 <vListInsert+0x2e>
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	60fb      	str	r3, [r7, #12]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	68ba      	ldr	r2, [r7, #8]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d2f6      	bcs.n	801209a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	685a      	ldr	r2, [r3, #4]
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	683a      	ldr	r2, [r7, #0]
 80120ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	68fa      	ldr	r2, [r7, #12]
 80120c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	683a      	ldr	r2, [r7, #0]
 80120c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	1c5a      	adds	r2, r3, #1
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	601a      	str	r2, [r3, #0]
}
 80120d8:	bf00      	nop
 80120da:	3714      	adds	r7, #20
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80120e4:	b480      	push	{r7}
 80120e6:	b085      	sub	sp, #20
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	691b      	ldr	r3, [r3, #16]
 80120f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	687a      	ldr	r2, [r7, #4]
 80120f8:	6892      	ldr	r2, [r2, #8]
 80120fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	689b      	ldr	r3, [r3, #8]
 8012100:	687a      	ldr	r2, [r7, #4]
 8012102:	6852      	ldr	r2, [r2, #4]
 8012104:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	687a      	ldr	r2, [r7, #4]
 801210c:	429a      	cmp	r2, r3
 801210e:	d103      	bne.n	8012118 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	689a      	ldr	r2, [r3, #8]
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	1e5a      	subs	r2, r3, #1
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
}
 801212c:	4618      	mov	r0, r3
 801212e:	3714      	adds	r7, #20
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr

08012138 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012138:	b480      	push	{r7}
 801213a:	b085      	sub	sp, #20
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	3b04      	subs	r3, #4
 8012148:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	3b04      	subs	r3, #4
 8012156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	f023 0201 	bic.w	r2, r3, #1
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	3b04      	subs	r3, #4
 8012166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012168:	4a0c      	ldr	r2, [pc, #48]	; (801219c <pxPortInitialiseStack+0x64>)
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	3b14      	subs	r3, #20
 8012172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	3b04      	subs	r3, #4
 801217e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	f06f 0202 	mvn.w	r2, #2
 8012186:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	3b20      	subs	r3, #32
 801218c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801218e:	68fb      	ldr	r3, [r7, #12]
}
 8012190:	4618      	mov	r0, r3
 8012192:	3714      	adds	r7, #20
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr
 801219c:	080121a1 	.word	0x080121a1

080121a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80121a0:	b480      	push	{r7}
 80121a2:	b085      	sub	sp, #20
 80121a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80121a6:	2300      	movs	r3, #0
 80121a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80121aa:	4b14      	ldr	r3, [pc, #80]	; (80121fc <prvTaskExitError+0x5c>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121b2:	d00c      	beq.n	80121ce <prvTaskExitError+0x2e>
	__asm volatile
 80121b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80121b8:	b672      	cpsid	i
 80121ba:	f383 8811 	msr	BASEPRI, r3
 80121be:	f3bf 8f6f 	isb	sy
 80121c2:	f3bf 8f4f 	dsb	sy
 80121c6:	b662      	cpsie	i
 80121c8:	60fb      	str	r3, [r7, #12]
}
 80121ca:	bf00      	nop
 80121cc:	e7fe      	b.n	80121cc <prvTaskExitError+0x2c>
	__asm volatile
 80121ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80121d2:	b672      	cpsid	i
 80121d4:	f383 8811 	msr	BASEPRI, r3
 80121d8:	f3bf 8f6f 	isb	sy
 80121dc:	f3bf 8f4f 	dsb	sy
 80121e0:	b662      	cpsie	i
 80121e2:	60bb      	str	r3, [r7, #8]
}
 80121e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80121e6:	bf00      	nop
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d0fc      	beq.n	80121e8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80121ee:	bf00      	nop
 80121f0:	bf00      	nop
 80121f2:	3714      	adds	r7, #20
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr
 80121fc:	20000020 	.word	0x20000020

08012200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012200:	4b07      	ldr	r3, [pc, #28]	; (8012220 <pxCurrentTCBConst2>)
 8012202:	6819      	ldr	r1, [r3, #0]
 8012204:	6808      	ldr	r0, [r1, #0]
 8012206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801220a:	f380 8809 	msr	PSP, r0
 801220e:	f3bf 8f6f 	isb	sy
 8012212:	f04f 0000 	mov.w	r0, #0
 8012216:	f380 8811 	msr	BASEPRI, r0
 801221a:	4770      	bx	lr
 801221c:	f3af 8000 	nop.w

08012220 <pxCurrentTCBConst2>:
 8012220:	200560c0 	.word	0x200560c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012224:	bf00      	nop
 8012226:	bf00      	nop

08012228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012228:	4808      	ldr	r0, [pc, #32]	; (801224c <prvPortStartFirstTask+0x24>)
 801222a:	6800      	ldr	r0, [r0, #0]
 801222c:	6800      	ldr	r0, [r0, #0]
 801222e:	f380 8808 	msr	MSP, r0
 8012232:	f04f 0000 	mov.w	r0, #0
 8012236:	f380 8814 	msr	CONTROL, r0
 801223a:	b662      	cpsie	i
 801223c:	b661      	cpsie	f
 801223e:	f3bf 8f4f 	dsb	sy
 8012242:	f3bf 8f6f 	isb	sy
 8012246:	df00      	svc	0
 8012248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801224a:	bf00      	nop
 801224c:	e000ed08 	.word	0xe000ed08

08012250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b084      	sub	sp, #16
 8012254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012256:	4b37      	ldr	r3, [pc, #220]	; (8012334 <xPortStartScheduler+0xe4>)
 8012258:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	b2db      	uxtb	r3, r3
 8012260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	22ff      	movs	r2, #255	; 0xff
 8012266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	b2db      	uxtb	r3, r3
 801226e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012270:	78fb      	ldrb	r3, [r7, #3]
 8012272:	b2db      	uxtb	r3, r3
 8012274:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012278:	b2da      	uxtb	r2, r3
 801227a:	4b2f      	ldr	r3, [pc, #188]	; (8012338 <xPortStartScheduler+0xe8>)
 801227c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801227e:	4b2f      	ldr	r3, [pc, #188]	; (801233c <xPortStartScheduler+0xec>)
 8012280:	2207      	movs	r2, #7
 8012282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012284:	e009      	b.n	801229a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012286:	4b2d      	ldr	r3, [pc, #180]	; (801233c <xPortStartScheduler+0xec>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	3b01      	subs	r3, #1
 801228c:	4a2b      	ldr	r2, [pc, #172]	; (801233c <xPortStartScheduler+0xec>)
 801228e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012290:	78fb      	ldrb	r3, [r7, #3]
 8012292:	b2db      	uxtb	r3, r3
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	b2db      	uxtb	r3, r3
 8012298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801229a:	78fb      	ldrb	r3, [r7, #3]
 801229c:	b2db      	uxtb	r3, r3
 801229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122a2:	2b80      	cmp	r3, #128	; 0x80
 80122a4:	d0ef      	beq.n	8012286 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80122a6:	4b25      	ldr	r3, [pc, #148]	; (801233c <xPortStartScheduler+0xec>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	f1c3 0307 	rsb	r3, r3, #7
 80122ae:	2b04      	cmp	r3, #4
 80122b0:	d00c      	beq.n	80122cc <xPortStartScheduler+0x7c>
	__asm volatile
 80122b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122b6:	b672      	cpsid	i
 80122b8:	f383 8811 	msr	BASEPRI, r3
 80122bc:	f3bf 8f6f 	isb	sy
 80122c0:	f3bf 8f4f 	dsb	sy
 80122c4:	b662      	cpsie	i
 80122c6:	60bb      	str	r3, [r7, #8]
}
 80122c8:	bf00      	nop
 80122ca:	e7fe      	b.n	80122ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80122cc:	4b1b      	ldr	r3, [pc, #108]	; (801233c <xPortStartScheduler+0xec>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	021b      	lsls	r3, r3, #8
 80122d2:	4a1a      	ldr	r2, [pc, #104]	; (801233c <xPortStartScheduler+0xec>)
 80122d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80122d6:	4b19      	ldr	r3, [pc, #100]	; (801233c <xPortStartScheduler+0xec>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80122de:	4a17      	ldr	r2, [pc, #92]	; (801233c <xPortStartScheduler+0xec>)
 80122e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	b2da      	uxtb	r2, r3
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80122ea:	4b15      	ldr	r3, [pc, #84]	; (8012340 <xPortStartScheduler+0xf0>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	4a14      	ldr	r2, [pc, #80]	; (8012340 <xPortStartScheduler+0xf0>)
 80122f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80122f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80122f6:	4b12      	ldr	r3, [pc, #72]	; (8012340 <xPortStartScheduler+0xf0>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	4a11      	ldr	r2, [pc, #68]	; (8012340 <xPortStartScheduler+0xf0>)
 80122fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012300:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012302:	f000 f8dd 	bl	80124c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012306:	4b0f      	ldr	r3, [pc, #60]	; (8012344 <xPortStartScheduler+0xf4>)
 8012308:	2200      	movs	r2, #0
 801230a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801230c:	f000 f8fc 	bl	8012508 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012310:	4b0d      	ldr	r3, [pc, #52]	; (8012348 <xPortStartScheduler+0xf8>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	4a0c      	ldr	r2, [pc, #48]	; (8012348 <xPortStartScheduler+0xf8>)
 8012316:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801231a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801231c:	f7ff ff84 	bl	8012228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012320:	f001 fd5a 	bl	8013dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8012324:	f7ff ff3c 	bl	80121a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012328:	2300      	movs	r3, #0
}
 801232a:	4618      	mov	r0, r3
 801232c:	3710      	adds	r7, #16
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}
 8012332:	bf00      	nop
 8012334:	e000e400 	.word	0xe000e400
 8012338:	200560b8 	.word	0x200560b8
 801233c:	200560bc 	.word	0x200560bc
 8012340:	e000ed20 	.word	0xe000ed20
 8012344:	20000020 	.word	0x20000020
 8012348:	e000ef34 	.word	0xe000ef34

0801234c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
	__asm volatile
 8012352:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012356:	b672      	cpsid	i
 8012358:	f383 8811 	msr	BASEPRI, r3
 801235c:	f3bf 8f6f 	isb	sy
 8012360:	f3bf 8f4f 	dsb	sy
 8012364:	b662      	cpsie	i
 8012366:	607b      	str	r3, [r7, #4]
}
 8012368:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801236a:	4b10      	ldr	r3, [pc, #64]	; (80123ac <vPortEnterCritical+0x60>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	3301      	adds	r3, #1
 8012370:	4a0e      	ldr	r2, [pc, #56]	; (80123ac <vPortEnterCritical+0x60>)
 8012372:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012374:	4b0d      	ldr	r3, [pc, #52]	; (80123ac <vPortEnterCritical+0x60>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2b01      	cmp	r3, #1
 801237a:	d111      	bne.n	80123a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801237c:	4b0c      	ldr	r3, [pc, #48]	; (80123b0 <vPortEnterCritical+0x64>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	b2db      	uxtb	r3, r3
 8012382:	2b00      	cmp	r3, #0
 8012384:	d00c      	beq.n	80123a0 <vPortEnterCritical+0x54>
	__asm volatile
 8012386:	f04f 0330 	mov.w	r3, #48	; 0x30
 801238a:	b672      	cpsid	i
 801238c:	f383 8811 	msr	BASEPRI, r3
 8012390:	f3bf 8f6f 	isb	sy
 8012394:	f3bf 8f4f 	dsb	sy
 8012398:	b662      	cpsie	i
 801239a:	603b      	str	r3, [r7, #0]
}
 801239c:	bf00      	nop
 801239e:	e7fe      	b.n	801239e <vPortEnterCritical+0x52>
	}
}
 80123a0:	bf00      	nop
 80123a2:	370c      	adds	r7, #12
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr
 80123ac:	20000020 	.word	0x20000020
 80123b0:	e000ed04 	.word	0xe000ed04

080123b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80123b4:	b480      	push	{r7}
 80123b6:	b083      	sub	sp, #12
 80123b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80123ba:	4b13      	ldr	r3, [pc, #76]	; (8012408 <vPortExitCritical+0x54>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d10c      	bne.n	80123dc <vPortExitCritical+0x28>
	__asm volatile
 80123c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80123c6:	b672      	cpsid	i
 80123c8:	f383 8811 	msr	BASEPRI, r3
 80123cc:	f3bf 8f6f 	isb	sy
 80123d0:	f3bf 8f4f 	dsb	sy
 80123d4:	b662      	cpsie	i
 80123d6:	607b      	str	r3, [r7, #4]
}
 80123d8:	bf00      	nop
 80123da:	e7fe      	b.n	80123da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80123dc:	4b0a      	ldr	r3, [pc, #40]	; (8012408 <vPortExitCritical+0x54>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	3b01      	subs	r3, #1
 80123e2:	4a09      	ldr	r2, [pc, #36]	; (8012408 <vPortExitCritical+0x54>)
 80123e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80123e6:	4b08      	ldr	r3, [pc, #32]	; (8012408 <vPortExitCritical+0x54>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d105      	bne.n	80123fa <vPortExitCritical+0x46>
 80123ee:	2300      	movs	r3, #0
 80123f0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80123f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80123fa:	bf00      	nop
 80123fc:	370c      	adds	r7, #12
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr
 8012406:	bf00      	nop
 8012408:	20000020 	.word	0x20000020
 801240c:	00000000 	.word	0x00000000

08012410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012410:	f3ef 8009 	mrs	r0, PSP
 8012414:	f3bf 8f6f 	isb	sy
 8012418:	4b15      	ldr	r3, [pc, #84]	; (8012470 <pxCurrentTCBConst>)
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	f01e 0f10 	tst.w	lr, #16
 8012420:	bf08      	it	eq
 8012422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801242a:	6010      	str	r0, [r2, #0]
 801242c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012430:	f04f 0030 	mov.w	r0, #48	; 0x30
 8012434:	b672      	cpsid	i
 8012436:	f380 8811 	msr	BASEPRI, r0
 801243a:	f3bf 8f4f 	dsb	sy
 801243e:	f3bf 8f6f 	isb	sy
 8012442:	b662      	cpsie	i
 8012444:	f001 fcc8 	bl	8013dd8 <vTaskSwitchContext>
 8012448:	f04f 0000 	mov.w	r0, #0
 801244c:	f380 8811 	msr	BASEPRI, r0
 8012450:	bc09      	pop	{r0, r3}
 8012452:	6819      	ldr	r1, [r3, #0]
 8012454:	6808      	ldr	r0, [r1, #0]
 8012456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801245a:	f01e 0f10 	tst.w	lr, #16
 801245e:	bf08      	it	eq
 8012460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012464:	f380 8809 	msr	PSP, r0
 8012468:	f3bf 8f6f 	isb	sy
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop

08012470 <pxCurrentTCBConst>:
 8012470:	200560c0 	.word	0x200560c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012474:	bf00      	nop
 8012476:	bf00      	nop

08012478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
	__asm volatile
 801247e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012482:	b672      	cpsid	i
 8012484:	f383 8811 	msr	BASEPRI, r3
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	b662      	cpsie	i
 8012492:	607b      	str	r3, [r7, #4]
}
 8012494:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012496:	f001 fbe3 	bl	8013c60 <xTaskIncrementTick>
 801249a:	4603      	mov	r3, r0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d003      	beq.n	80124a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80124a0:	4b06      	ldr	r3, [pc, #24]	; (80124bc <SysTick_Handler+0x44>)
 80124a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124a6:	601a      	str	r2, [r3, #0]
 80124a8:	2300      	movs	r3, #0
 80124aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	f383 8811 	msr	BASEPRI, r3
}
 80124b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80124b4:	bf00      	nop
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	e000ed04 	.word	0xe000ed04

080124c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80124c0:	b480      	push	{r7}
 80124c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80124c4:	4b0b      	ldr	r3, [pc, #44]	; (80124f4 <vPortSetupTimerInterrupt+0x34>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80124ca:	4b0b      	ldr	r3, [pc, #44]	; (80124f8 <vPortSetupTimerInterrupt+0x38>)
 80124cc:	2200      	movs	r2, #0
 80124ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80124d0:	4b0a      	ldr	r3, [pc, #40]	; (80124fc <vPortSetupTimerInterrupt+0x3c>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	4a0a      	ldr	r2, [pc, #40]	; (8012500 <vPortSetupTimerInterrupt+0x40>)
 80124d6:	fba2 2303 	umull	r2, r3, r2, r3
 80124da:	099b      	lsrs	r3, r3, #6
 80124dc:	4a09      	ldr	r2, [pc, #36]	; (8012504 <vPortSetupTimerInterrupt+0x44>)
 80124de:	3b01      	subs	r3, #1
 80124e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80124e2:	4b04      	ldr	r3, [pc, #16]	; (80124f4 <vPortSetupTimerInterrupt+0x34>)
 80124e4:	2207      	movs	r2, #7
 80124e6:	601a      	str	r2, [r3, #0]
}
 80124e8:	bf00      	nop
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr
 80124f2:	bf00      	nop
 80124f4:	e000e010 	.word	0xe000e010
 80124f8:	e000e018 	.word	0xe000e018
 80124fc:	20000014 	.word	0x20000014
 8012500:	10624dd3 	.word	0x10624dd3
 8012504:	e000e014 	.word	0xe000e014

08012508 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012508:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012518 <vPortEnableVFP+0x10>
 801250c:	6801      	ldr	r1, [r0, #0]
 801250e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012512:	6001      	str	r1, [r0, #0]
 8012514:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012516:	bf00      	nop
 8012518:	e000ed88 	.word	0xe000ed88

0801251c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801251c:	b480      	push	{r7}
 801251e:	b085      	sub	sp, #20
 8012520:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012522:	f3ef 8305 	mrs	r3, IPSR
 8012526:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	2b0f      	cmp	r3, #15
 801252c:	d916      	bls.n	801255c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801252e:	4a19      	ldr	r2, [pc, #100]	; (8012594 <vPortValidateInterruptPriority+0x78>)
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	4413      	add	r3, r2
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012538:	4b17      	ldr	r3, [pc, #92]	; (8012598 <vPortValidateInterruptPriority+0x7c>)
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	7afa      	ldrb	r2, [r7, #11]
 801253e:	429a      	cmp	r2, r3
 8012540:	d20c      	bcs.n	801255c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012542:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012546:	b672      	cpsid	i
 8012548:	f383 8811 	msr	BASEPRI, r3
 801254c:	f3bf 8f6f 	isb	sy
 8012550:	f3bf 8f4f 	dsb	sy
 8012554:	b662      	cpsie	i
 8012556:	607b      	str	r3, [r7, #4]
}
 8012558:	bf00      	nop
 801255a:	e7fe      	b.n	801255a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801255c:	4b0f      	ldr	r3, [pc, #60]	; (801259c <vPortValidateInterruptPriority+0x80>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012564:	4b0e      	ldr	r3, [pc, #56]	; (80125a0 <vPortValidateInterruptPriority+0x84>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	429a      	cmp	r2, r3
 801256a:	d90c      	bls.n	8012586 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801256c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012570:	b672      	cpsid	i
 8012572:	f383 8811 	msr	BASEPRI, r3
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	f3bf 8f4f 	dsb	sy
 801257e:	b662      	cpsie	i
 8012580:	603b      	str	r3, [r7, #0]
}
 8012582:	bf00      	nop
 8012584:	e7fe      	b.n	8012584 <vPortValidateInterruptPriority+0x68>
	}
 8012586:	bf00      	nop
 8012588:	3714      	adds	r7, #20
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop
 8012594:	e000e3f0 	.word	0xe000e3f0
 8012598:	200560b8 	.word	0x200560b8
 801259c:	e000ed0c 	.word	0xe000ed0c
 80125a0:	200560bc 	.word	0x200560bc

080125a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b084      	sub	sp, #16
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d10c      	bne.n	80125d2 <xQueueGenericReset+0x2e>
	__asm volatile
 80125b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80125bc:	b672      	cpsid	i
 80125be:	f383 8811 	msr	BASEPRI, r3
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	f3bf 8f4f 	dsb	sy
 80125ca:	b662      	cpsie	i
 80125cc:	60bb      	str	r3, [r7, #8]
}
 80125ce:	bf00      	nop
 80125d0:	e7fe      	b.n	80125d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80125d2:	f7ff febb 	bl	801234c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	681a      	ldr	r2, [r3, #0]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125de:	68f9      	ldr	r1, [r7, #12]
 80125e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80125e2:	fb01 f303 	mul.w	r3, r1, r3
 80125e6:	441a      	add	r2, r3
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2200      	movs	r2, #0
 80125f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012602:	3b01      	subs	r3, #1
 8012604:	68f9      	ldr	r1, [r7, #12]
 8012606:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012608:	fb01 f303 	mul.w	r3, r1, r3
 801260c:	441a      	add	r2, r3
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	22ff      	movs	r2, #255	; 0xff
 8012616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	22ff      	movs	r2, #255	; 0xff
 801261e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d114      	bne.n	8012652 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	691b      	ldr	r3, [r3, #16]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d01a      	beq.n	8012666 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	3310      	adds	r3, #16
 8012634:	4618      	mov	r0, r3
 8012636:	f001 fc83 	bl	8013f40 <xTaskRemoveFromEventList>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d012      	beq.n	8012666 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012640:	4b0c      	ldr	r3, [pc, #48]	; (8012674 <xQueueGenericReset+0xd0>)
 8012642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012646:	601a      	str	r2, [r3, #0]
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	e009      	b.n	8012666 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	3310      	adds	r3, #16
 8012656:	4618      	mov	r0, r3
 8012658:	f7ff fcba 	bl	8011fd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	3324      	adds	r3, #36	; 0x24
 8012660:	4618      	mov	r0, r3
 8012662:	f7ff fcb5 	bl	8011fd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012666:	f7ff fea5 	bl	80123b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801266a:	2301      	movs	r3, #1
}
 801266c:	4618      	mov	r0, r3
 801266e:	3710      	adds	r7, #16
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	e000ed04 	.word	0xe000ed04

08012678 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012678:	b580      	push	{r7, lr}
 801267a:	b08e      	sub	sp, #56	; 0x38
 801267c:	af02      	add	r7, sp, #8
 801267e:	60f8      	str	r0, [r7, #12]
 8012680:	60b9      	str	r1, [r7, #8]
 8012682:	607a      	str	r2, [r7, #4]
 8012684:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d10c      	bne.n	80126a6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 801268c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012690:	b672      	cpsid	i
 8012692:	f383 8811 	msr	BASEPRI, r3
 8012696:	f3bf 8f6f 	isb	sy
 801269a:	f3bf 8f4f 	dsb	sy
 801269e:	b662      	cpsie	i
 80126a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80126a2:	bf00      	nop
 80126a4:	e7fe      	b.n	80126a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d10c      	bne.n	80126c6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80126ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80126b0:	b672      	cpsid	i
 80126b2:	f383 8811 	msr	BASEPRI, r3
 80126b6:	f3bf 8f6f 	isb	sy
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	b662      	cpsie	i
 80126c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80126c2:	bf00      	nop
 80126c4:	e7fe      	b.n	80126c4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d002      	beq.n	80126d2 <xQueueGenericCreateStatic+0x5a>
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d001      	beq.n	80126d6 <xQueueGenericCreateStatic+0x5e>
 80126d2:	2301      	movs	r3, #1
 80126d4:	e000      	b.n	80126d8 <xQueueGenericCreateStatic+0x60>
 80126d6:	2300      	movs	r3, #0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d10c      	bne.n	80126f6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80126dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80126e0:	b672      	cpsid	i
 80126e2:	f383 8811 	msr	BASEPRI, r3
 80126e6:	f3bf 8f6f 	isb	sy
 80126ea:	f3bf 8f4f 	dsb	sy
 80126ee:	b662      	cpsie	i
 80126f0:	623b      	str	r3, [r7, #32]
}
 80126f2:	bf00      	nop
 80126f4:	e7fe      	b.n	80126f4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d102      	bne.n	8012702 <xQueueGenericCreateStatic+0x8a>
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d101      	bne.n	8012706 <xQueueGenericCreateStatic+0x8e>
 8012702:	2301      	movs	r3, #1
 8012704:	e000      	b.n	8012708 <xQueueGenericCreateStatic+0x90>
 8012706:	2300      	movs	r3, #0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d10c      	bne.n	8012726 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801270c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012710:	b672      	cpsid	i
 8012712:	f383 8811 	msr	BASEPRI, r3
 8012716:	f3bf 8f6f 	isb	sy
 801271a:	f3bf 8f4f 	dsb	sy
 801271e:	b662      	cpsie	i
 8012720:	61fb      	str	r3, [r7, #28]
}
 8012722:	bf00      	nop
 8012724:	e7fe      	b.n	8012724 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012726:	2350      	movs	r3, #80	; 0x50
 8012728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	2b50      	cmp	r3, #80	; 0x50
 801272e:	d00c      	beq.n	801274a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8012730:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012734:	b672      	cpsid	i
 8012736:	f383 8811 	msr	BASEPRI, r3
 801273a:	f3bf 8f6f 	isb	sy
 801273e:	f3bf 8f4f 	dsb	sy
 8012742:	b662      	cpsie	i
 8012744:	61bb      	str	r3, [r7, #24]
}
 8012746:	bf00      	nop
 8012748:	e7fe      	b.n	8012748 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801274a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012752:	2b00      	cmp	r3, #0
 8012754:	d00d      	beq.n	8012772 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012758:	2201      	movs	r2, #1
 801275a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801275e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012764:	9300      	str	r3, [sp, #0]
 8012766:	4613      	mov	r3, r2
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	68b9      	ldr	r1, [r7, #8]
 801276c:	68f8      	ldr	r0, [r7, #12]
 801276e:	f000 f847 	bl	8012800 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012774:	4618      	mov	r0, r3
 8012776:	3730      	adds	r7, #48	; 0x30
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801277c:	b580      	push	{r7, lr}
 801277e:	b08a      	sub	sp, #40	; 0x28
 8012780:	af02      	add	r7, sp, #8
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	4613      	mov	r3, r2
 8012788:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d10c      	bne.n	80127aa <xQueueGenericCreate+0x2e>
	__asm volatile
 8012790:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012794:	b672      	cpsid	i
 8012796:	f383 8811 	msr	BASEPRI, r3
 801279a:	f3bf 8f6f 	isb	sy
 801279e:	f3bf 8f4f 	dsb	sy
 80127a2:	b662      	cpsie	i
 80127a4:	613b      	str	r3, [r7, #16]
}
 80127a6:	bf00      	nop
 80127a8:	e7fe      	b.n	80127a8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d102      	bne.n	80127b6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80127b0:	2300      	movs	r3, #0
 80127b2:	61fb      	str	r3, [r7, #28]
 80127b4:	e004      	b.n	80127c0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	68ba      	ldr	r2, [r7, #8]
 80127ba:	fb02 f303 	mul.w	r3, r2, r3
 80127be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	3350      	adds	r3, #80	; 0x50
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7ff fa1f 	bl	8011c08 <pvPortMalloc>
 80127ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d011      	beq.n	80127f6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	3350      	adds	r3, #80	; 0x50
 80127da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80127dc:	69bb      	ldr	r3, [r7, #24]
 80127de:	2200      	movs	r2, #0
 80127e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80127e4:	79fa      	ldrb	r2, [r7, #7]
 80127e6:	69bb      	ldr	r3, [r7, #24]
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	4613      	mov	r3, r2
 80127ec:	697a      	ldr	r2, [r7, #20]
 80127ee:	68b9      	ldr	r1, [r7, #8]
 80127f0:	68f8      	ldr	r0, [r7, #12]
 80127f2:	f000 f805 	bl	8012800 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80127f6:	69bb      	ldr	r3, [r7, #24]
	}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3720      	adds	r7, #32
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b084      	sub	sp, #16
 8012804:	af00      	add	r7, sp, #0
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	607a      	str	r2, [r7, #4]
 801280c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d103      	bne.n	801281c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	69ba      	ldr	r2, [r7, #24]
 8012818:	601a      	str	r2, [r3, #0]
 801281a:	e002      	b.n	8012822 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801281c:	69bb      	ldr	r3, [r7, #24]
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801282e:	2101      	movs	r1, #1
 8012830:	69b8      	ldr	r0, [r7, #24]
 8012832:	f7ff feb7 	bl	80125a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	78fa      	ldrb	r2, [r7, #3]
 801283a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801283e:	bf00      	nop
 8012840:	3710      	adds	r7, #16
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012846:	b580      	push	{r7, lr}
 8012848:	b08a      	sub	sp, #40	; 0x28
 801284a:	af02      	add	r7, sp, #8
 801284c:	60f8      	str	r0, [r7, #12]
 801284e:	60b9      	str	r1, [r7, #8]
 8012850:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d10c      	bne.n	8012872 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8012858:	f04f 0330 	mov.w	r3, #48	; 0x30
 801285c:	b672      	cpsid	i
 801285e:	f383 8811 	msr	BASEPRI, r3
 8012862:	f3bf 8f6f 	isb	sy
 8012866:	f3bf 8f4f 	dsb	sy
 801286a:	b662      	cpsie	i
 801286c:	61bb      	str	r3, [r7, #24]
}
 801286e:	bf00      	nop
 8012870:	e7fe      	b.n	8012870 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012872:	68ba      	ldr	r2, [r7, #8]
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	429a      	cmp	r2, r3
 8012878:	d90c      	bls.n	8012894 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 801287a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801287e:	b672      	cpsid	i
 8012880:	f383 8811 	msr	BASEPRI, r3
 8012884:	f3bf 8f6f 	isb	sy
 8012888:	f3bf 8f4f 	dsb	sy
 801288c:	b662      	cpsie	i
 801288e:	617b      	str	r3, [r7, #20]
}
 8012890:	bf00      	nop
 8012892:	e7fe      	b.n	8012892 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012894:	2302      	movs	r3, #2
 8012896:	9300      	str	r3, [sp, #0]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2200      	movs	r2, #0
 801289c:	2100      	movs	r1, #0
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f7ff feea 	bl	8012678 <xQueueGenericCreateStatic>
 80128a4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d002      	beq.n	80128b2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	68ba      	ldr	r2, [r7, #8]
 80128b0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80128b2:	69fb      	ldr	r3, [r7, #28]
	}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3720      	adds	r7, #32
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b086      	sub	sp, #24
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d10c      	bne.n	80128e6 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80128cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128d0:	b672      	cpsid	i
 80128d2:	f383 8811 	msr	BASEPRI, r3
 80128d6:	f3bf 8f6f 	isb	sy
 80128da:	f3bf 8f4f 	dsb	sy
 80128de:	b662      	cpsie	i
 80128e0:	613b      	str	r3, [r7, #16]
}
 80128e2:	bf00      	nop
 80128e4:	e7fe      	b.n	80128e4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80128e6:	683a      	ldr	r2, [r7, #0]
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d90c      	bls.n	8012908 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80128ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128f2:	b672      	cpsid	i
 80128f4:	f383 8811 	msr	BASEPRI, r3
 80128f8:	f3bf 8f6f 	isb	sy
 80128fc:	f3bf 8f4f 	dsb	sy
 8012900:	b662      	cpsie	i
 8012902:	60fb      	str	r3, [r7, #12]
}
 8012904:	bf00      	nop
 8012906:	e7fe      	b.n	8012906 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012908:	2202      	movs	r2, #2
 801290a:	2100      	movs	r1, #0
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7ff ff35 	bl	801277c <xQueueGenericCreate>
 8012912:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d002      	beq.n	8012920 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	683a      	ldr	r2, [r7, #0]
 801291e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012920:	697b      	ldr	r3, [r7, #20]
	}
 8012922:	4618      	mov	r0, r3
 8012924:	3718      	adds	r7, #24
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
	...

0801292c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b08e      	sub	sp, #56	; 0x38
 8012930:	af00      	add	r7, sp, #0
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	607a      	str	r2, [r7, #4]
 8012938:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801293a:	2300      	movs	r3, #0
 801293c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012944:	2b00      	cmp	r3, #0
 8012946:	d10c      	bne.n	8012962 <xQueueGenericSend+0x36>
	__asm volatile
 8012948:	f04f 0330 	mov.w	r3, #48	; 0x30
 801294c:	b672      	cpsid	i
 801294e:	f383 8811 	msr	BASEPRI, r3
 8012952:	f3bf 8f6f 	isb	sy
 8012956:	f3bf 8f4f 	dsb	sy
 801295a:	b662      	cpsie	i
 801295c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801295e:	bf00      	nop
 8012960:	e7fe      	b.n	8012960 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d103      	bne.n	8012970 <xQueueGenericSend+0x44>
 8012968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801296c:	2b00      	cmp	r3, #0
 801296e:	d101      	bne.n	8012974 <xQueueGenericSend+0x48>
 8012970:	2301      	movs	r3, #1
 8012972:	e000      	b.n	8012976 <xQueueGenericSend+0x4a>
 8012974:	2300      	movs	r3, #0
 8012976:	2b00      	cmp	r3, #0
 8012978:	d10c      	bne.n	8012994 <xQueueGenericSend+0x68>
	__asm volatile
 801297a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801297e:	b672      	cpsid	i
 8012980:	f383 8811 	msr	BASEPRI, r3
 8012984:	f3bf 8f6f 	isb	sy
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	b662      	cpsie	i
 801298e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012990:	bf00      	nop
 8012992:	e7fe      	b.n	8012992 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	2b02      	cmp	r3, #2
 8012998:	d103      	bne.n	80129a2 <xQueueGenericSend+0x76>
 801299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d101      	bne.n	80129a6 <xQueueGenericSend+0x7a>
 80129a2:	2301      	movs	r3, #1
 80129a4:	e000      	b.n	80129a8 <xQueueGenericSend+0x7c>
 80129a6:	2300      	movs	r3, #0
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d10c      	bne.n	80129c6 <xQueueGenericSend+0x9a>
	__asm volatile
 80129ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80129b0:	b672      	cpsid	i
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	b662      	cpsie	i
 80129c0:	623b      	str	r3, [r7, #32]
}
 80129c2:	bf00      	nop
 80129c4:	e7fe      	b.n	80129c4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80129c6:	f001 fc81 	bl	80142cc <xTaskGetSchedulerState>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d102      	bne.n	80129d6 <xQueueGenericSend+0xaa>
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d101      	bne.n	80129da <xQueueGenericSend+0xae>
 80129d6:	2301      	movs	r3, #1
 80129d8:	e000      	b.n	80129dc <xQueueGenericSend+0xb0>
 80129da:	2300      	movs	r3, #0
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d10c      	bne.n	80129fa <xQueueGenericSend+0xce>
	__asm volatile
 80129e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80129e4:	b672      	cpsid	i
 80129e6:	f383 8811 	msr	BASEPRI, r3
 80129ea:	f3bf 8f6f 	isb	sy
 80129ee:	f3bf 8f4f 	dsb	sy
 80129f2:	b662      	cpsie	i
 80129f4:	61fb      	str	r3, [r7, #28]
}
 80129f6:	bf00      	nop
 80129f8:	e7fe      	b.n	80129f8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80129fa:	f7ff fca7 	bl	801234c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80129fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d302      	bcc.n	8012a10 <xQueueGenericSend+0xe4>
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	d129      	bne.n	8012a64 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a10:	683a      	ldr	r2, [r7, #0]
 8012a12:	68b9      	ldr	r1, [r7, #8]
 8012a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a16:	f000 fc82 	bl	801331e <prvCopyDataToQueue>
 8012a1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d010      	beq.n	8012a46 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a26:	3324      	adds	r3, #36	; 0x24
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f001 fa89 	bl	8013f40 <xTaskRemoveFromEventList>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d013      	beq.n	8012a5c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012a34:	4b3f      	ldr	r3, [pc, #252]	; (8012b34 <xQueueGenericSend+0x208>)
 8012a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a3a:	601a      	str	r2, [r3, #0]
 8012a3c:	f3bf 8f4f 	dsb	sy
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	e00a      	b.n	8012a5c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d007      	beq.n	8012a5c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012a4c:	4b39      	ldr	r3, [pc, #228]	; (8012b34 <xQueueGenericSend+0x208>)
 8012a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	f3bf 8f4f 	dsb	sy
 8012a58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012a5c:	f7ff fcaa 	bl	80123b4 <vPortExitCritical>
				return pdPASS;
 8012a60:	2301      	movs	r3, #1
 8012a62:	e063      	b.n	8012b2c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d103      	bne.n	8012a72 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012a6a:	f7ff fca3 	bl	80123b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	e05c      	b.n	8012b2c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d106      	bne.n	8012a86 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a78:	f107 0314 	add.w	r3, r7, #20
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f001 fac5 	bl	801400c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a82:	2301      	movs	r3, #1
 8012a84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a86:	f7ff fc95 	bl	80123b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a8a:	f001 f82b 	bl	8013ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a8e:	f7ff fc5d 	bl	801234c <vPortEnterCritical>
 8012a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a98:	b25b      	sxtb	r3, r3
 8012a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9e:	d103      	bne.n	8012aa8 <xQueueGenericSend+0x17c>
 8012aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012aae:	b25b      	sxtb	r3, r3
 8012ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ab4:	d103      	bne.n	8012abe <xQueueGenericSend+0x192>
 8012ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab8:	2200      	movs	r2, #0
 8012aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012abe:	f7ff fc79 	bl	80123b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ac2:	1d3a      	adds	r2, r7, #4
 8012ac4:	f107 0314 	add.w	r3, r7, #20
 8012ac8:	4611      	mov	r1, r2
 8012aca:	4618      	mov	r0, r3
 8012acc:	f001 fab4 	bl	8014038 <xTaskCheckForTimeOut>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d124      	bne.n	8012b20 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ad8:	f000 fd19 	bl	801350e <prvIsQueueFull>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d018      	beq.n	8012b14 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae4:	3310      	adds	r3, #16
 8012ae6:	687a      	ldr	r2, [r7, #4]
 8012ae8:	4611      	mov	r1, r2
 8012aea:	4618      	mov	r0, r3
 8012aec:	f001 f9d4 	bl	8013e98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012af2:	f000 fca4 	bl	801343e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012af6:	f001 f803 	bl	8013b00 <xTaskResumeAll>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f47f af7c 	bne.w	80129fa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8012b02:	4b0c      	ldr	r3, [pc, #48]	; (8012b34 <xQueueGenericSend+0x208>)
 8012b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b08:	601a      	str	r2, [r3, #0]
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	f3bf 8f6f 	isb	sy
 8012b12:	e772      	b.n	80129fa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b16:	f000 fc92 	bl	801343e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012b1a:	f000 fff1 	bl	8013b00 <xTaskResumeAll>
 8012b1e:	e76c      	b.n	80129fa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b22:	f000 fc8c 	bl	801343e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012b26:	f000 ffeb 	bl	8013b00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012b2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3738      	adds	r7, #56	; 0x38
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	e000ed04 	.word	0xe000ed04

08012b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b08e      	sub	sp, #56	; 0x38
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	607a      	str	r2, [r7, #4]
 8012b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d10c      	bne.n	8012b6a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8012b50:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b54:	b672      	cpsid	i
 8012b56:	f383 8811 	msr	BASEPRI, r3
 8012b5a:	f3bf 8f6f 	isb	sy
 8012b5e:	f3bf 8f4f 	dsb	sy
 8012b62:	b662      	cpsie	i
 8012b64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012b66:	bf00      	nop
 8012b68:	e7fe      	b.n	8012b68 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d103      	bne.n	8012b78 <xQueueGenericSendFromISR+0x40>
 8012b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d101      	bne.n	8012b7c <xQueueGenericSendFromISR+0x44>
 8012b78:	2301      	movs	r3, #1
 8012b7a:	e000      	b.n	8012b7e <xQueueGenericSendFromISR+0x46>
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d10c      	bne.n	8012b9c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8012b82:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b86:	b672      	cpsid	i
 8012b88:	f383 8811 	msr	BASEPRI, r3
 8012b8c:	f3bf 8f6f 	isb	sy
 8012b90:	f3bf 8f4f 	dsb	sy
 8012b94:	b662      	cpsie	i
 8012b96:	623b      	str	r3, [r7, #32]
}
 8012b98:	bf00      	nop
 8012b9a:	e7fe      	b.n	8012b9a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	2b02      	cmp	r3, #2
 8012ba0:	d103      	bne.n	8012baa <xQueueGenericSendFromISR+0x72>
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ba6:	2b01      	cmp	r3, #1
 8012ba8:	d101      	bne.n	8012bae <xQueueGenericSendFromISR+0x76>
 8012baa:	2301      	movs	r3, #1
 8012bac:	e000      	b.n	8012bb0 <xQueueGenericSendFromISR+0x78>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d10c      	bne.n	8012bce <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8012bb4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012bb8:	b672      	cpsid	i
 8012bba:	f383 8811 	msr	BASEPRI, r3
 8012bbe:	f3bf 8f6f 	isb	sy
 8012bc2:	f3bf 8f4f 	dsb	sy
 8012bc6:	b662      	cpsie	i
 8012bc8:	61fb      	str	r3, [r7, #28]
}
 8012bca:	bf00      	nop
 8012bcc:	e7fe      	b.n	8012bcc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012bce:	f7ff fca5 	bl	801251c <vPortValidateInterruptPriority>
	__asm volatile
 8012bd2:	f3ef 8211 	mrs	r2, BASEPRI
 8012bd6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012bda:	b672      	cpsid	i
 8012bdc:	f383 8811 	msr	BASEPRI, r3
 8012be0:	f3bf 8f6f 	isb	sy
 8012be4:	f3bf 8f4f 	dsb	sy
 8012be8:	b662      	cpsie	i
 8012bea:	61ba      	str	r2, [r7, #24]
 8012bec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012bee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d302      	bcc.n	8012c04 <xQueueGenericSendFromISR+0xcc>
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	2b02      	cmp	r3, #2
 8012c02:	d12c      	bne.n	8012c5e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012c0e:	683a      	ldr	r2, [r7, #0]
 8012c10:	68b9      	ldr	r1, [r7, #8]
 8012c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c14:	f000 fb83 	bl	801331e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012c18:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c20:	d112      	bne.n	8012c48 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d016      	beq.n	8012c58 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2c:	3324      	adds	r3, #36	; 0x24
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f001 f986 	bl	8013f40 <xTaskRemoveFromEventList>
 8012c34:	4603      	mov	r3, r0
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d00e      	beq.n	8012c58 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d00b      	beq.n	8012c58 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2201      	movs	r2, #1
 8012c44:	601a      	str	r2, [r3, #0]
 8012c46:	e007      	b.n	8012c58 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012c48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012c4c:	3301      	adds	r3, #1
 8012c4e:	b2db      	uxtb	r3, r3
 8012c50:	b25a      	sxtb	r2, r3
 8012c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012c5c:	e001      	b.n	8012c62 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	637b      	str	r3, [r7, #52]	; 0x34
 8012c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	f383 8811 	msr	BASEPRI, r3
}
 8012c6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	3738      	adds	r7, #56	; 0x38
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}

08012c78 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b08e      	sub	sp, #56	; 0x38
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d10c      	bne.n	8012ca6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8012c8c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012c90:	b672      	cpsid	i
 8012c92:	f383 8811 	msr	BASEPRI, r3
 8012c96:	f3bf 8f6f 	isb	sy
 8012c9a:	f3bf 8f4f 	dsb	sy
 8012c9e:	b662      	cpsie	i
 8012ca0:	623b      	str	r3, [r7, #32]
}
 8012ca2:	bf00      	nop
 8012ca4:	e7fe      	b.n	8012ca4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d00c      	beq.n	8012cc8 <xQueueGiveFromISR+0x50>
	__asm volatile
 8012cae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012cb2:	b672      	cpsid	i
 8012cb4:	f383 8811 	msr	BASEPRI, r3
 8012cb8:	f3bf 8f6f 	isb	sy
 8012cbc:	f3bf 8f4f 	dsb	sy
 8012cc0:	b662      	cpsie	i
 8012cc2:	61fb      	str	r3, [r7, #28]
}
 8012cc4:	bf00      	nop
 8012cc6:	e7fe      	b.n	8012cc6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d103      	bne.n	8012cd8 <xQueueGiveFromISR+0x60>
 8012cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd2:	689b      	ldr	r3, [r3, #8]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d101      	bne.n	8012cdc <xQueueGiveFromISR+0x64>
 8012cd8:	2301      	movs	r3, #1
 8012cda:	e000      	b.n	8012cde <xQueueGiveFromISR+0x66>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d10c      	bne.n	8012cfc <xQueueGiveFromISR+0x84>
	__asm volatile
 8012ce2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ce6:	b672      	cpsid	i
 8012ce8:	f383 8811 	msr	BASEPRI, r3
 8012cec:	f3bf 8f6f 	isb	sy
 8012cf0:	f3bf 8f4f 	dsb	sy
 8012cf4:	b662      	cpsie	i
 8012cf6:	61bb      	str	r3, [r7, #24]
}
 8012cf8:	bf00      	nop
 8012cfa:	e7fe      	b.n	8012cfa <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012cfc:	f7ff fc0e 	bl	801251c <vPortValidateInterruptPriority>
	__asm volatile
 8012d00:	f3ef 8211 	mrs	r2, BASEPRI
 8012d04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d08:	b672      	cpsid	i
 8012d0a:	f383 8811 	msr	BASEPRI, r3
 8012d0e:	f3bf 8f6f 	isb	sy
 8012d12:	f3bf 8f4f 	dsb	sy
 8012d16:	b662      	cpsie	i
 8012d18:	617a      	str	r2, [r7, #20]
 8012d1a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012d1c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d24:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d22b      	bcs.n	8012d88 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3c:	1c5a      	adds	r2, r3, #1
 8012d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d40:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012d42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d4a:	d112      	bne.n	8012d72 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d016      	beq.n	8012d82 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d56:	3324      	adds	r3, #36	; 0x24
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f001 f8f1 	bl	8013f40 <xTaskRemoveFromEventList>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d00e      	beq.n	8012d82 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d00b      	beq.n	8012d82 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	e007      	b.n	8012d82 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d76:	3301      	adds	r3, #1
 8012d78:	b2db      	uxtb	r3, r3
 8012d7a:	b25a      	sxtb	r2, r3
 8012d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012d82:	2301      	movs	r3, #1
 8012d84:	637b      	str	r3, [r7, #52]	; 0x34
 8012d86:	e001      	b.n	8012d8c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8012d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f383 8811 	msr	BASEPRI, r3
}
 8012d96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3738      	adds	r7, #56	; 0x38
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
	...

08012da4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b08c      	sub	sp, #48	; 0x30
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012db0:	2300      	movs	r3, #0
 8012db2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d10c      	bne.n	8012dd8 <xQueueReceive+0x34>
	__asm volatile
 8012dbe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012dc2:	b672      	cpsid	i
 8012dc4:	f383 8811 	msr	BASEPRI, r3
 8012dc8:	f3bf 8f6f 	isb	sy
 8012dcc:	f3bf 8f4f 	dsb	sy
 8012dd0:	b662      	cpsie	i
 8012dd2:	623b      	str	r3, [r7, #32]
}
 8012dd4:	bf00      	nop
 8012dd6:	e7fe      	b.n	8012dd6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d103      	bne.n	8012de6 <xQueueReceive+0x42>
 8012dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d101      	bne.n	8012dea <xQueueReceive+0x46>
 8012de6:	2301      	movs	r3, #1
 8012de8:	e000      	b.n	8012dec <xQueueReceive+0x48>
 8012dea:	2300      	movs	r3, #0
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d10c      	bne.n	8012e0a <xQueueReceive+0x66>
	__asm volatile
 8012df0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012df4:	b672      	cpsid	i
 8012df6:	f383 8811 	msr	BASEPRI, r3
 8012dfa:	f3bf 8f6f 	isb	sy
 8012dfe:	f3bf 8f4f 	dsb	sy
 8012e02:	b662      	cpsie	i
 8012e04:	61fb      	str	r3, [r7, #28]
}
 8012e06:	bf00      	nop
 8012e08:	e7fe      	b.n	8012e08 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012e0a:	f001 fa5f 	bl	80142cc <xTaskGetSchedulerState>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d102      	bne.n	8012e1a <xQueueReceive+0x76>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d101      	bne.n	8012e1e <xQueueReceive+0x7a>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	e000      	b.n	8012e20 <xQueueReceive+0x7c>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d10c      	bne.n	8012e3e <xQueueReceive+0x9a>
	__asm volatile
 8012e24:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e28:	b672      	cpsid	i
 8012e2a:	f383 8811 	msr	BASEPRI, r3
 8012e2e:	f3bf 8f6f 	isb	sy
 8012e32:	f3bf 8f4f 	dsb	sy
 8012e36:	b662      	cpsie	i
 8012e38:	61bb      	str	r3, [r7, #24]
}
 8012e3a:	bf00      	nop
 8012e3c:	e7fe      	b.n	8012e3c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012e3e:	f7ff fa85 	bl	801234c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d01f      	beq.n	8012e8e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012e4e:	68b9      	ldr	r1, [r7, #8]
 8012e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e52:	f000 face 	bl	80133f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e58:	1e5a      	subs	r2, r3, #1
 8012e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d00f      	beq.n	8012e86 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e68:	3310      	adds	r3, #16
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f001 f868 	bl	8013f40 <xTaskRemoveFromEventList>
 8012e70:	4603      	mov	r3, r0
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d007      	beq.n	8012e86 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012e76:	4b3d      	ldr	r3, [pc, #244]	; (8012f6c <xQueueReceive+0x1c8>)
 8012e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	f3bf 8f4f 	dsb	sy
 8012e82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012e86:	f7ff fa95 	bl	80123b4 <vPortExitCritical>
				return pdPASS;
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	e069      	b.n	8012f62 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d103      	bne.n	8012e9c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012e94:	f7ff fa8e 	bl	80123b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	e062      	b.n	8012f62 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d106      	bne.n	8012eb0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012ea2:	f107 0310 	add.w	r3, r7, #16
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f001 f8b0 	bl	801400c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012eac:	2301      	movs	r3, #1
 8012eae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012eb0:	f7ff fa80 	bl	80123b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012eb4:	f000 fe16 	bl	8013ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012eb8:	f7ff fa48 	bl	801234c <vPortEnterCritical>
 8012ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ec2:	b25b      	sxtb	r3, r3
 8012ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec8:	d103      	bne.n	8012ed2 <xQueueReceive+0x12e>
 8012eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ecc:	2200      	movs	r2, #0
 8012ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ed8:	b25b      	sxtb	r3, r3
 8012eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ede:	d103      	bne.n	8012ee8 <xQueueReceive+0x144>
 8012ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ee8:	f7ff fa64 	bl	80123b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012eec:	1d3a      	adds	r2, r7, #4
 8012eee:	f107 0310 	add.w	r3, r7, #16
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f001 f89f 	bl	8014038 <xTaskCheckForTimeOut>
 8012efa:	4603      	mov	r3, r0
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d123      	bne.n	8012f48 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f02:	f000 faee 	bl	80134e2 <prvIsQueueEmpty>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d017      	beq.n	8012f3c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f0e:	3324      	adds	r3, #36	; 0x24
 8012f10:	687a      	ldr	r2, [r7, #4]
 8012f12:	4611      	mov	r1, r2
 8012f14:	4618      	mov	r0, r3
 8012f16:	f000 ffbf 	bl	8013e98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f1c:	f000 fa8f 	bl	801343e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012f20:	f000 fdee 	bl	8013b00 <xTaskResumeAll>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d189      	bne.n	8012e3e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8012f2a:	4b10      	ldr	r3, [pc, #64]	; (8012f6c <xQueueReceive+0x1c8>)
 8012f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f30:	601a      	str	r2, [r3, #0]
 8012f32:	f3bf 8f4f 	dsb	sy
 8012f36:	f3bf 8f6f 	isb	sy
 8012f3a:	e780      	b.n	8012e3e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f3e:	f000 fa7e 	bl	801343e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f42:	f000 fddd 	bl	8013b00 <xTaskResumeAll>
 8012f46:	e77a      	b.n	8012e3e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f4a:	f000 fa78 	bl	801343e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f4e:	f000 fdd7 	bl	8013b00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f54:	f000 fac5 	bl	80134e2 <prvIsQueueEmpty>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	f43f af6f 	beq.w	8012e3e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012f60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3730      	adds	r7, #48	; 0x30
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	e000ed04 	.word	0xe000ed04

08012f70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b08e      	sub	sp, #56	; 0x38
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012f82:	2300      	movs	r3, #0
 8012f84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d10c      	bne.n	8012fa6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8012f8c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f90:	b672      	cpsid	i
 8012f92:	f383 8811 	msr	BASEPRI, r3
 8012f96:	f3bf 8f6f 	isb	sy
 8012f9a:	f3bf 8f4f 	dsb	sy
 8012f9e:	b662      	cpsie	i
 8012fa0:	623b      	str	r3, [r7, #32]
}
 8012fa2:	bf00      	nop
 8012fa4:	e7fe      	b.n	8012fa4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d00c      	beq.n	8012fc8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8012fae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fb2:	b672      	cpsid	i
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	b662      	cpsie	i
 8012fc2:	61fb      	str	r3, [r7, #28]
}
 8012fc4:	bf00      	nop
 8012fc6:	e7fe      	b.n	8012fc6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fc8:	f001 f980 	bl	80142cc <xTaskGetSchedulerState>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d102      	bne.n	8012fd8 <xQueueSemaphoreTake+0x68>
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d101      	bne.n	8012fdc <xQueueSemaphoreTake+0x6c>
 8012fd8:	2301      	movs	r3, #1
 8012fda:	e000      	b.n	8012fde <xQueueSemaphoreTake+0x6e>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d10c      	bne.n	8012ffc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8012fe2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fe6:	b672      	cpsid	i
 8012fe8:	f383 8811 	msr	BASEPRI, r3
 8012fec:	f3bf 8f6f 	isb	sy
 8012ff0:	f3bf 8f4f 	dsb	sy
 8012ff4:	b662      	cpsie	i
 8012ff6:	61bb      	str	r3, [r7, #24]
}
 8012ff8:	bf00      	nop
 8012ffa:	e7fe      	b.n	8012ffa <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ffc:	f7ff f9a6 	bl	801234c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013004:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013008:	2b00      	cmp	r3, #0
 801300a:	d024      	beq.n	8013056 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801300e:	1e5a      	subs	r2, r3, #1
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d104      	bne.n	8013026 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801301c:	f001 fad4 	bl	80145c8 <pvTaskIncrementMutexHeldCount>
 8013020:	4602      	mov	r2, r0
 8013022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013024:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013028:	691b      	ldr	r3, [r3, #16]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d00f      	beq.n	801304e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013030:	3310      	adds	r3, #16
 8013032:	4618      	mov	r0, r3
 8013034:	f000 ff84 	bl	8013f40 <xTaskRemoveFromEventList>
 8013038:	4603      	mov	r3, r0
 801303a:	2b00      	cmp	r3, #0
 801303c:	d007      	beq.n	801304e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801303e:	4b55      	ldr	r3, [pc, #340]	; (8013194 <xQueueSemaphoreTake+0x224>)
 8013040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013044:	601a      	str	r2, [r3, #0]
 8013046:	f3bf 8f4f 	dsb	sy
 801304a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801304e:	f7ff f9b1 	bl	80123b4 <vPortExitCritical>
				return pdPASS;
 8013052:	2301      	movs	r3, #1
 8013054:	e099      	b.n	801318a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d113      	bne.n	8013084 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801305e:	2b00      	cmp	r3, #0
 8013060:	d00c      	beq.n	801307c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8013062:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013066:	b672      	cpsid	i
 8013068:	f383 8811 	msr	BASEPRI, r3
 801306c:	f3bf 8f6f 	isb	sy
 8013070:	f3bf 8f4f 	dsb	sy
 8013074:	b662      	cpsie	i
 8013076:	617b      	str	r3, [r7, #20]
}
 8013078:	bf00      	nop
 801307a:	e7fe      	b.n	801307a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801307c:	f7ff f99a 	bl	80123b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013080:	2300      	movs	r3, #0
 8013082:	e082      	b.n	801318a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013086:	2b00      	cmp	r3, #0
 8013088:	d106      	bne.n	8013098 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801308a:	f107 030c 	add.w	r3, r7, #12
 801308e:	4618      	mov	r0, r3
 8013090:	f000 ffbc 	bl	801400c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013094:	2301      	movs	r3, #1
 8013096:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013098:	f7ff f98c 	bl	80123b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801309c:	f000 fd22 	bl	8013ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80130a0:	f7ff f954 	bl	801234c <vPortEnterCritical>
 80130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80130aa:	b25b      	sxtb	r3, r3
 80130ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130b0:	d103      	bne.n	80130ba <xQueueSemaphoreTake+0x14a>
 80130b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b4:	2200      	movs	r2, #0
 80130b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130c0:	b25b      	sxtb	r3, r3
 80130c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130c6:	d103      	bne.n	80130d0 <xQueueSemaphoreTake+0x160>
 80130c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ca:	2200      	movs	r2, #0
 80130cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130d0:	f7ff f970 	bl	80123b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130d4:	463a      	mov	r2, r7
 80130d6:	f107 030c 	add.w	r3, r7, #12
 80130da:	4611      	mov	r1, r2
 80130dc:	4618      	mov	r0, r3
 80130de:	f000 ffab 	bl	8014038 <xTaskCheckForTimeOut>
 80130e2:	4603      	mov	r3, r0
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d132      	bne.n	801314e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130ea:	f000 f9fa 	bl	80134e2 <prvIsQueueEmpty>
 80130ee:	4603      	mov	r3, r0
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d026      	beq.n	8013142 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80130f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d109      	bne.n	8013110 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80130fc:	f7ff f926 	bl	801234c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013102:	689b      	ldr	r3, [r3, #8]
 8013104:	4618      	mov	r0, r3
 8013106:	f001 f8ff 	bl	8014308 <xTaskPriorityInherit>
 801310a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801310c:	f7ff f952 	bl	80123b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013112:	3324      	adds	r3, #36	; 0x24
 8013114:	683a      	ldr	r2, [r7, #0]
 8013116:	4611      	mov	r1, r2
 8013118:	4618      	mov	r0, r3
 801311a:	f000 febd 	bl	8013e98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801311e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013120:	f000 f98d 	bl	801343e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013124:	f000 fcec 	bl	8013b00 <xTaskResumeAll>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	f47f af66 	bne.w	8012ffc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8013130:	4b18      	ldr	r3, [pc, #96]	; (8013194 <xQueueSemaphoreTake+0x224>)
 8013132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013136:	601a      	str	r2, [r3, #0]
 8013138:	f3bf 8f4f 	dsb	sy
 801313c:	f3bf 8f6f 	isb	sy
 8013140:	e75c      	b.n	8012ffc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013144:	f000 f97b 	bl	801343e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013148:	f000 fcda 	bl	8013b00 <xTaskResumeAll>
 801314c:	e756      	b.n	8012ffc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801314e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013150:	f000 f975 	bl	801343e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013154:	f000 fcd4 	bl	8013b00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801315a:	f000 f9c2 	bl	80134e2 <prvIsQueueEmpty>
 801315e:	4603      	mov	r3, r0
 8013160:	2b00      	cmp	r3, #0
 8013162:	f43f af4b 	beq.w	8012ffc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013168:	2b00      	cmp	r3, #0
 801316a:	d00d      	beq.n	8013188 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801316c:	f7ff f8ee 	bl	801234c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013172:	f000 f8bc 	bl	80132ee <prvGetDisinheritPriorityAfterTimeout>
 8013176:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317a:	689b      	ldr	r3, [r3, #8]
 801317c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801317e:	4618      	mov	r0, r3
 8013180:	f001 f99c 	bl	80144bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013184:	f7ff f916 	bl	80123b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801318a:	4618      	mov	r0, r3
 801318c:	3738      	adds	r7, #56	; 0x38
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
 8013192:	bf00      	nop
 8013194:	e000ed04 	.word	0xe000ed04

08013198 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b08e      	sub	sp, #56	; 0x38
 801319c:	af00      	add	r7, sp, #0
 801319e:	60f8      	str	r0, [r7, #12]
 80131a0:	60b9      	str	r1, [r7, #8]
 80131a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80131a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d10c      	bne.n	80131c8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80131ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131b2:	b672      	cpsid	i
 80131b4:	f383 8811 	msr	BASEPRI, r3
 80131b8:	f3bf 8f6f 	isb	sy
 80131bc:	f3bf 8f4f 	dsb	sy
 80131c0:	b662      	cpsie	i
 80131c2:	623b      	str	r3, [r7, #32]
}
 80131c4:	bf00      	nop
 80131c6:	e7fe      	b.n	80131c6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d103      	bne.n	80131d6 <xQueueReceiveFromISR+0x3e>
 80131ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d101      	bne.n	80131da <xQueueReceiveFromISR+0x42>
 80131d6:	2301      	movs	r3, #1
 80131d8:	e000      	b.n	80131dc <xQueueReceiveFromISR+0x44>
 80131da:	2300      	movs	r3, #0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d10c      	bne.n	80131fa <xQueueReceiveFromISR+0x62>
	__asm volatile
 80131e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131e4:	b672      	cpsid	i
 80131e6:	f383 8811 	msr	BASEPRI, r3
 80131ea:	f3bf 8f6f 	isb	sy
 80131ee:	f3bf 8f4f 	dsb	sy
 80131f2:	b662      	cpsie	i
 80131f4:	61fb      	str	r3, [r7, #28]
}
 80131f6:	bf00      	nop
 80131f8:	e7fe      	b.n	80131f8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80131fa:	f7ff f98f 	bl	801251c <vPortValidateInterruptPriority>
	__asm volatile
 80131fe:	f3ef 8211 	mrs	r2, BASEPRI
 8013202:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013206:	b672      	cpsid	i
 8013208:	f383 8811 	msr	BASEPRI, r3
 801320c:	f3bf 8f6f 	isb	sy
 8013210:	f3bf 8f4f 	dsb	sy
 8013214:	b662      	cpsie	i
 8013216:	61ba      	str	r2, [r7, #24]
 8013218:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801321a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801321c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013222:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013226:	2b00      	cmp	r3, #0
 8013228:	d02f      	beq.n	801328a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801322c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013234:	68b9      	ldr	r1, [r7, #8]
 8013236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013238:	f000 f8db 	bl	80133f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801323e:	1e5a      	subs	r2, r3, #1
 8013240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013242:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013244:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801324c:	d112      	bne.n	8013274 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013250:	691b      	ldr	r3, [r3, #16]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d016      	beq.n	8013284 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013258:	3310      	adds	r3, #16
 801325a:	4618      	mov	r0, r3
 801325c:	f000 fe70 	bl	8013f40 <xTaskRemoveFromEventList>
 8013260:	4603      	mov	r3, r0
 8013262:	2b00      	cmp	r3, #0
 8013264:	d00e      	beq.n	8013284 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d00b      	beq.n	8013284 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2201      	movs	r2, #1
 8013270:	601a      	str	r2, [r3, #0]
 8013272:	e007      	b.n	8013284 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013278:	3301      	adds	r3, #1
 801327a:	b2db      	uxtb	r3, r3
 801327c:	b25a      	sxtb	r2, r3
 801327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013284:	2301      	movs	r3, #1
 8013286:	637b      	str	r3, [r7, #52]	; 0x34
 8013288:	e001      	b.n	801328e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801328a:	2300      	movs	r3, #0
 801328c:	637b      	str	r3, [r7, #52]	; 0x34
 801328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013290:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	f383 8811 	msr	BASEPRI, r3
}
 8013298:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801329c:	4618      	mov	r0, r3
 801329e:	3738      	adds	r7, #56	; 0x38
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b084      	sub	sp, #16
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d10c      	bne.n	80132d0 <vQueueDelete+0x2c>
	__asm volatile
 80132b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80132ba:	b672      	cpsid	i
 80132bc:	f383 8811 	msr	BASEPRI, r3
 80132c0:	f3bf 8f6f 	isb	sy
 80132c4:	f3bf 8f4f 	dsb	sy
 80132c8:	b662      	cpsie	i
 80132ca:	60bb      	str	r3, [r7, #8]
}
 80132cc:	bf00      	nop
 80132ce:	e7fe      	b.n	80132ce <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80132d0:	68f8      	ldr	r0, [r7, #12]
 80132d2:	f000 f95f 	bl	8013594 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d102      	bne.n	80132e6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80132e0:	68f8      	ldr	r0, [r7, #12]
 80132e2:	f7fe fd5b 	bl	8011d9c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80132e6:	bf00      	nop
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}

080132ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80132ee:	b480      	push	{r7}
 80132f0:	b085      	sub	sp, #20
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d006      	beq.n	801330c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013308:	60fb      	str	r3, [r7, #12]
 801330a:	e001      	b.n	8013310 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801330c:	2300      	movs	r3, #0
 801330e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013310:	68fb      	ldr	r3, [r7, #12]
	}
 8013312:	4618      	mov	r0, r3
 8013314:	3714      	adds	r7, #20
 8013316:	46bd      	mov	sp, r7
 8013318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331c:	4770      	bx	lr

0801331e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801331e:	b580      	push	{r7, lr}
 8013320:	b086      	sub	sp, #24
 8013322:	af00      	add	r7, sp, #0
 8013324:	60f8      	str	r0, [r7, #12]
 8013326:	60b9      	str	r1, [r7, #8]
 8013328:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801332a:	2300      	movs	r3, #0
 801332c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013332:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013338:	2b00      	cmp	r3, #0
 801333a:	d10d      	bne.n	8013358 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d14d      	bne.n	80133e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	689b      	ldr	r3, [r3, #8]
 8013348:	4618      	mov	r0, r3
 801334a:	f001 f845 	bl	80143d8 <xTaskPriorityDisinherit>
 801334e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	2200      	movs	r2, #0
 8013354:	609a      	str	r2, [r3, #8]
 8013356:	e043      	b.n	80133e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d119      	bne.n	8013392 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	6858      	ldr	r0, [r3, #4]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013366:	461a      	mov	r2, r3
 8013368:	68b9      	ldr	r1, [r7, #8]
 801336a:	f012 fe27 	bl	8025fbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	685a      	ldr	r2, [r3, #4]
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013376:	441a      	add	r2, r3
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	685a      	ldr	r2, [r3, #4]
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	689b      	ldr	r3, [r3, #8]
 8013384:	429a      	cmp	r2, r3
 8013386:	d32b      	bcc.n	80133e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	605a      	str	r2, [r3, #4]
 8013390:	e026      	b.n	80133e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	68d8      	ldr	r0, [r3, #12]
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801339a:	461a      	mov	r2, r3
 801339c:	68b9      	ldr	r1, [r7, #8]
 801339e:	f012 fe0d 	bl	8025fbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	68da      	ldr	r2, [r3, #12]
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133aa:	425b      	negs	r3, r3
 80133ac:	441a      	add	r2, r3
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	68da      	ldr	r2, [r3, #12]
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d207      	bcs.n	80133ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	689a      	ldr	r2, [r3, #8]
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133c6:	425b      	negs	r3, r3
 80133c8:	441a      	add	r2, r3
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2b02      	cmp	r3, #2
 80133d2:	d105      	bne.n	80133e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d002      	beq.n	80133e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	3b01      	subs	r3, #1
 80133de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	1c5a      	adds	r2, r3, #1
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80133e8:	697b      	ldr	r3, [r7, #20]
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3718      	adds	r7, #24
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}

080133f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80133f2:	b580      	push	{r7, lr}
 80133f4:	b082      	sub	sp, #8
 80133f6:	af00      	add	r7, sp, #0
 80133f8:	6078      	str	r0, [r7, #4]
 80133fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013400:	2b00      	cmp	r3, #0
 8013402:	d018      	beq.n	8013436 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	68da      	ldr	r2, [r3, #12]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801340c:	441a      	add	r2, r3
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	68da      	ldr	r2, [r3, #12]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	689b      	ldr	r3, [r3, #8]
 801341a:	429a      	cmp	r2, r3
 801341c:	d303      	bcc.n	8013426 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	68d9      	ldr	r1, [r3, #12]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801342e:	461a      	mov	r2, r3
 8013430:	6838      	ldr	r0, [r7, #0]
 8013432:	f012 fdc3 	bl	8025fbc <memcpy>
	}
}
 8013436:	bf00      	nop
 8013438:	3708      	adds	r7, #8
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}

0801343e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801343e:	b580      	push	{r7, lr}
 8013440:	b084      	sub	sp, #16
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013446:	f7fe ff81 	bl	801234c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013450:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013452:	e011      	b.n	8013478 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013458:	2b00      	cmp	r3, #0
 801345a:	d012      	beq.n	8013482 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	3324      	adds	r3, #36	; 0x24
 8013460:	4618      	mov	r0, r3
 8013462:	f000 fd6d 	bl	8013f40 <xTaskRemoveFromEventList>
 8013466:	4603      	mov	r3, r0
 8013468:	2b00      	cmp	r3, #0
 801346a:	d001      	beq.n	8013470 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801346c:	f000 fe4a 	bl	8014104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013470:	7bfb      	ldrb	r3, [r7, #15]
 8013472:	3b01      	subs	r3, #1
 8013474:	b2db      	uxtb	r3, r3
 8013476:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801347c:	2b00      	cmp	r3, #0
 801347e:	dce9      	bgt.n	8013454 <prvUnlockQueue+0x16>
 8013480:	e000      	b.n	8013484 <prvUnlockQueue+0x46>
					break;
 8013482:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	22ff      	movs	r2, #255	; 0xff
 8013488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801348c:	f7fe ff92 	bl	80123b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013490:	f7fe ff5c 	bl	801234c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801349a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801349c:	e011      	b.n	80134c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	691b      	ldr	r3, [r3, #16]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d012      	beq.n	80134cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	3310      	adds	r3, #16
 80134aa:	4618      	mov	r0, r3
 80134ac:	f000 fd48 	bl	8013f40 <xTaskRemoveFromEventList>
 80134b0:	4603      	mov	r3, r0
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d001      	beq.n	80134ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80134b6:	f000 fe25 	bl	8014104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80134ba:	7bbb      	ldrb	r3, [r7, #14]
 80134bc:	3b01      	subs	r3, #1
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80134c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	dce9      	bgt.n	801349e <prvUnlockQueue+0x60>
 80134ca:	e000      	b.n	80134ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80134cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	22ff      	movs	r2, #255	; 0xff
 80134d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80134d6:	f7fe ff6d 	bl	80123b4 <vPortExitCritical>
}
 80134da:	bf00      	nop
 80134dc:	3710      	adds	r7, #16
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}

080134e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80134e2:	b580      	push	{r7, lr}
 80134e4:	b084      	sub	sp, #16
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80134ea:	f7fe ff2f 	bl	801234c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d102      	bne.n	80134fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80134f6:	2301      	movs	r3, #1
 80134f8:	60fb      	str	r3, [r7, #12]
 80134fa:	e001      	b.n	8013500 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80134fc:	2300      	movs	r3, #0
 80134fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013500:	f7fe ff58 	bl	80123b4 <vPortExitCritical>

	return xReturn;
 8013504:	68fb      	ldr	r3, [r7, #12]
}
 8013506:	4618      	mov	r0, r3
 8013508:	3710      	adds	r7, #16
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}

0801350e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801350e:	b580      	push	{r7, lr}
 8013510:	b084      	sub	sp, #16
 8013512:	af00      	add	r7, sp, #0
 8013514:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013516:	f7fe ff19 	bl	801234c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013522:	429a      	cmp	r2, r3
 8013524:	d102      	bne.n	801352c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013526:	2301      	movs	r3, #1
 8013528:	60fb      	str	r3, [r7, #12]
 801352a:	e001      	b.n	8013530 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801352c:	2300      	movs	r3, #0
 801352e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013530:	f7fe ff40 	bl	80123b4 <vPortExitCritical>

	return xReturn;
 8013534:	68fb      	ldr	r3, [r7, #12]
}
 8013536:	4618      	mov	r0, r3
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
	...

08013540 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013540:	b480      	push	{r7}
 8013542:	b085      	sub	sp, #20
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801354a:	2300      	movs	r3, #0
 801354c:	60fb      	str	r3, [r7, #12]
 801354e:	e014      	b.n	801357a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013550:	4a0f      	ldr	r2, [pc, #60]	; (8013590 <vQueueAddToRegistry+0x50>)
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d10b      	bne.n	8013574 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801355c:	490c      	ldr	r1, [pc, #48]	; (8013590 <vQueueAddToRegistry+0x50>)
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	683a      	ldr	r2, [r7, #0]
 8013562:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013566:	4a0a      	ldr	r2, [pc, #40]	; (8013590 <vQueueAddToRegistry+0x50>)
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	00db      	lsls	r3, r3, #3
 801356c:	4413      	add	r3, r2
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013572:	e006      	b.n	8013582 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	3301      	adds	r3, #1
 8013578:	60fb      	str	r3, [r7, #12]
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2b07      	cmp	r3, #7
 801357e:	d9e7      	bls.n	8013550 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013580:	bf00      	nop
 8013582:	bf00      	nop
 8013584:	3714      	adds	r7, #20
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr
 801358e:	bf00      	nop
 8013590:	200570b4 	.word	0x200570b4

08013594 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013594:	b480      	push	{r7}
 8013596:	b085      	sub	sp, #20
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801359c:	2300      	movs	r3, #0
 801359e:	60fb      	str	r3, [r7, #12]
 80135a0:	e016      	b.n	80135d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80135a2:	4a10      	ldr	r2, [pc, #64]	; (80135e4 <vQueueUnregisterQueue+0x50>)
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	00db      	lsls	r3, r3, #3
 80135a8:	4413      	add	r3, r2
 80135aa:	685b      	ldr	r3, [r3, #4]
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d10b      	bne.n	80135ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80135b2:	4a0c      	ldr	r2, [pc, #48]	; (80135e4 <vQueueUnregisterQueue+0x50>)
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2100      	movs	r1, #0
 80135b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80135bc:	4a09      	ldr	r2, [pc, #36]	; (80135e4 <vQueueUnregisterQueue+0x50>)
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	00db      	lsls	r3, r3, #3
 80135c2:	4413      	add	r3, r2
 80135c4:	2200      	movs	r2, #0
 80135c6:	605a      	str	r2, [r3, #4]
				break;
 80135c8:	e006      	b.n	80135d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	3301      	adds	r3, #1
 80135ce:	60fb      	str	r3, [r7, #12]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	2b07      	cmp	r3, #7
 80135d4:	d9e5      	bls.n	80135a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80135d6:	bf00      	nop
 80135d8:	bf00      	nop
 80135da:	3714      	adds	r7, #20
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr
 80135e4:	200570b4 	.word	0x200570b4

080135e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b086      	sub	sp, #24
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	60b9      	str	r1, [r7, #8]
 80135f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80135f8:	f7fe fea8 	bl	801234c <vPortEnterCritical>
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013602:	b25b      	sxtb	r3, r3
 8013604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013608:	d103      	bne.n	8013612 <vQueueWaitForMessageRestricted+0x2a>
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	2200      	movs	r2, #0
 801360e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013618:	b25b      	sxtb	r3, r3
 801361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801361e:	d103      	bne.n	8013628 <vQueueWaitForMessageRestricted+0x40>
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	2200      	movs	r2, #0
 8013624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013628:	f7fe fec4 	bl	80123b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013630:	2b00      	cmp	r3, #0
 8013632:	d106      	bne.n	8013642 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013634:	697b      	ldr	r3, [r7, #20]
 8013636:	3324      	adds	r3, #36	; 0x24
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	68b9      	ldr	r1, [r7, #8]
 801363c:	4618      	mov	r0, r3
 801363e:	f000 fc51 	bl	8013ee4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013642:	6978      	ldr	r0, [r7, #20]
 8013644:	f7ff fefb 	bl	801343e <prvUnlockQueue>
	}
 8013648:	bf00      	nop
 801364a:	3718      	adds	r7, #24
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}

08013650 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013650:	b580      	push	{r7, lr}
 8013652:	b08e      	sub	sp, #56	; 0x38
 8013654:	af04      	add	r7, sp, #16
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	607a      	str	r2, [r7, #4]
 801365c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013660:	2b00      	cmp	r3, #0
 8013662:	d10c      	bne.n	801367e <xTaskCreateStatic+0x2e>
	__asm volatile
 8013664:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013668:	b672      	cpsid	i
 801366a:	f383 8811 	msr	BASEPRI, r3
 801366e:	f3bf 8f6f 	isb	sy
 8013672:	f3bf 8f4f 	dsb	sy
 8013676:	b662      	cpsie	i
 8013678:	623b      	str	r3, [r7, #32]
}
 801367a:	bf00      	nop
 801367c:	e7fe      	b.n	801367c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013680:	2b00      	cmp	r3, #0
 8013682:	d10c      	bne.n	801369e <xTaskCreateStatic+0x4e>
	__asm volatile
 8013684:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013688:	b672      	cpsid	i
 801368a:	f383 8811 	msr	BASEPRI, r3
 801368e:	f3bf 8f6f 	isb	sy
 8013692:	f3bf 8f4f 	dsb	sy
 8013696:	b662      	cpsie	i
 8013698:	61fb      	str	r3, [r7, #28]
}
 801369a:	bf00      	nop
 801369c:	e7fe      	b.n	801369c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801369e:	235c      	movs	r3, #92	; 0x5c
 80136a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	2b5c      	cmp	r3, #92	; 0x5c
 80136a6:	d00c      	beq.n	80136c2 <xTaskCreateStatic+0x72>
	__asm volatile
 80136a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80136ac:	b672      	cpsid	i
 80136ae:	f383 8811 	msr	BASEPRI, r3
 80136b2:	f3bf 8f6f 	isb	sy
 80136b6:	f3bf 8f4f 	dsb	sy
 80136ba:	b662      	cpsie	i
 80136bc:	61bb      	str	r3, [r7, #24]
}
 80136be:	bf00      	nop
 80136c0:	e7fe      	b.n	80136c0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80136c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80136c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d01e      	beq.n	8013708 <xTaskCreateStatic+0xb8>
 80136ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d01b      	beq.n	8013708 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80136d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80136d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80136da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136dc:	2202      	movs	r2, #2
 80136de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80136e2:	2300      	movs	r3, #0
 80136e4:	9303      	str	r3, [sp, #12]
 80136e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e8:	9302      	str	r3, [sp, #8]
 80136ea:	f107 0314 	add.w	r3, r7, #20
 80136ee:	9301      	str	r3, [sp, #4]
 80136f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	687a      	ldr	r2, [r7, #4]
 80136f8:	68b9      	ldr	r1, [r7, #8]
 80136fa:	68f8      	ldr	r0, [r7, #12]
 80136fc:	f000 f850 	bl	80137a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013702:	f000 f8df 	bl	80138c4 <prvAddNewTaskToReadyList>
 8013706:	e001      	b.n	801370c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8013708:	2300      	movs	r3, #0
 801370a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801370c:	697b      	ldr	r3, [r7, #20]
	}
 801370e:	4618      	mov	r0, r3
 8013710:	3728      	adds	r7, #40	; 0x28
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}

08013716 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013716:	b580      	push	{r7, lr}
 8013718:	b08c      	sub	sp, #48	; 0x30
 801371a:	af04      	add	r7, sp, #16
 801371c:	60f8      	str	r0, [r7, #12]
 801371e:	60b9      	str	r1, [r7, #8]
 8013720:	603b      	str	r3, [r7, #0]
 8013722:	4613      	mov	r3, r2
 8013724:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013726:	88fb      	ldrh	r3, [r7, #6]
 8013728:	009b      	lsls	r3, r3, #2
 801372a:	4618      	mov	r0, r3
 801372c:	f7fe fa6c 	bl	8011c08 <pvPortMalloc>
 8013730:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013732:	697b      	ldr	r3, [r7, #20]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d00e      	beq.n	8013756 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013738:	205c      	movs	r0, #92	; 0x5c
 801373a:	f7fe fa65 	bl	8011c08 <pvPortMalloc>
 801373e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d003      	beq.n	801374e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013746:	69fb      	ldr	r3, [r7, #28]
 8013748:	697a      	ldr	r2, [r7, #20]
 801374a:	631a      	str	r2, [r3, #48]	; 0x30
 801374c:	e005      	b.n	801375a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801374e:	6978      	ldr	r0, [r7, #20]
 8013750:	f7fe fb24 	bl	8011d9c <vPortFree>
 8013754:	e001      	b.n	801375a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013756:	2300      	movs	r3, #0
 8013758:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801375a:	69fb      	ldr	r3, [r7, #28]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d017      	beq.n	8013790 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013760:	69fb      	ldr	r3, [r7, #28]
 8013762:	2200      	movs	r2, #0
 8013764:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013768:	88fa      	ldrh	r2, [r7, #6]
 801376a:	2300      	movs	r3, #0
 801376c:	9303      	str	r3, [sp, #12]
 801376e:	69fb      	ldr	r3, [r7, #28]
 8013770:	9302      	str	r3, [sp, #8]
 8013772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013774:	9301      	str	r3, [sp, #4]
 8013776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013778:	9300      	str	r3, [sp, #0]
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	68b9      	ldr	r1, [r7, #8]
 801377e:	68f8      	ldr	r0, [r7, #12]
 8013780:	f000 f80e 	bl	80137a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013784:	69f8      	ldr	r0, [r7, #28]
 8013786:	f000 f89d 	bl	80138c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801378a:	2301      	movs	r3, #1
 801378c:	61bb      	str	r3, [r7, #24]
 801378e:	e002      	b.n	8013796 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013790:	f04f 33ff 	mov.w	r3, #4294967295
 8013794:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013796:	69bb      	ldr	r3, [r7, #24]
	}
 8013798:	4618      	mov	r0, r3
 801379a:	3720      	adds	r7, #32
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b088      	sub	sp, #32
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	60f8      	str	r0, [r7, #12]
 80137a8:	60b9      	str	r1, [r7, #8]
 80137aa:	607a      	str	r2, [r7, #4]
 80137ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80137ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	009b      	lsls	r3, r3, #2
 80137b6:	461a      	mov	r2, r3
 80137b8:	21a5      	movs	r1, #165	; 0xa5
 80137ba:	f012 fc0d 	bl	8025fd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80137be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137c2:	6879      	ldr	r1, [r7, #4]
 80137c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80137c8:	440b      	add	r3, r1
 80137ca:	009b      	lsls	r3, r3, #2
 80137cc:	4413      	add	r3, r2
 80137ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	f023 0307 	bic.w	r3, r3, #7
 80137d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	f003 0307 	and.w	r3, r3, #7
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d00c      	beq.n	80137fc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80137e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137e6:	b672      	cpsid	i
 80137e8:	f383 8811 	msr	BASEPRI, r3
 80137ec:	f3bf 8f6f 	isb	sy
 80137f0:	f3bf 8f4f 	dsb	sy
 80137f4:	b662      	cpsie	i
 80137f6:	617b      	str	r3, [r7, #20]
}
 80137f8:	bf00      	nop
 80137fa:	e7fe      	b.n	80137fa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d01f      	beq.n	8013842 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013802:	2300      	movs	r3, #0
 8013804:	61fb      	str	r3, [r7, #28]
 8013806:	e012      	b.n	801382e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013808:	68ba      	ldr	r2, [r7, #8]
 801380a:	69fb      	ldr	r3, [r7, #28]
 801380c:	4413      	add	r3, r2
 801380e:	7819      	ldrb	r1, [r3, #0]
 8013810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013812:	69fb      	ldr	r3, [r7, #28]
 8013814:	4413      	add	r3, r2
 8013816:	3334      	adds	r3, #52	; 0x34
 8013818:	460a      	mov	r2, r1
 801381a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801381c:	68ba      	ldr	r2, [r7, #8]
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	4413      	add	r3, r2
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d006      	beq.n	8013836 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	3301      	adds	r3, #1
 801382c:	61fb      	str	r3, [r7, #28]
 801382e:	69fb      	ldr	r3, [r7, #28]
 8013830:	2b0f      	cmp	r3, #15
 8013832:	d9e9      	bls.n	8013808 <prvInitialiseNewTask+0x68>
 8013834:	e000      	b.n	8013838 <prvInitialiseNewTask+0x98>
			{
				break;
 8013836:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383a:	2200      	movs	r2, #0
 801383c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013840:	e003      	b.n	801384a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013844:	2200      	movs	r2, #0
 8013846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384c:	2b37      	cmp	r3, #55	; 0x37
 801384e:	d901      	bls.n	8013854 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013850:	2337      	movs	r3, #55	; 0x37
 8013852:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013858:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801385e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013862:	2200      	movs	r2, #0
 8013864:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013868:	3304      	adds	r3, #4
 801386a:	4618      	mov	r0, r3
 801386c:	f7fe fbd0 	bl	8012010 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013872:	3318      	adds	r3, #24
 8013874:	4618      	mov	r0, r3
 8013876:	f7fe fbcb 	bl	8012010 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801387e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013882:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013888:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801388e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013892:	2200      	movs	r2, #0
 8013894:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013898:	2200      	movs	r2, #0
 801389a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801389e:	683a      	ldr	r2, [r7, #0]
 80138a0:	68f9      	ldr	r1, [r7, #12]
 80138a2:	69b8      	ldr	r0, [r7, #24]
 80138a4:	f7fe fc48 	bl	8012138 <pxPortInitialiseStack>
 80138a8:	4602      	mov	r2, r0
 80138aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80138ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d002      	beq.n	80138ba <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80138b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80138ba:	bf00      	nop
 80138bc:	3720      	adds	r7, #32
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
	...

080138c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80138cc:	f7fe fd3e 	bl	801234c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80138d0:	4b2d      	ldr	r3, [pc, #180]	; (8013988 <prvAddNewTaskToReadyList+0xc4>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	3301      	adds	r3, #1
 80138d6:	4a2c      	ldr	r2, [pc, #176]	; (8013988 <prvAddNewTaskToReadyList+0xc4>)
 80138d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80138da:	4b2c      	ldr	r3, [pc, #176]	; (801398c <prvAddNewTaskToReadyList+0xc8>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d109      	bne.n	80138f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80138e2:	4a2a      	ldr	r2, [pc, #168]	; (801398c <prvAddNewTaskToReadyList+0xc8>)
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80138e8:	4b27      	ldr	r3, [pc, #156]	; (8013988 <prvAddNewTaskToReadyList+0xc4>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2b01      	cmp	r3, #1
 80138ee:	d110      	bne.n	8013912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80138f0:	f000 fc2c 	bl	801414c <prvInitialiseTaskLists>
 80138f4:	e00d      	b.n	8013912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80138f6:	4b26      	ldr	r3, [pc, #152]	; (8013990 <prvAddNewTaskToReadyList+0xcc>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d109      	bne.n	8013912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80138fe:	4b23      	ldr	r3, [pc, #140]	; (801398c <prvAddNewTaskToReadyList+0xc8>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013908:	429a      	cmp	r2, r3
 801390a:	d802      	bhi.n	8013912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801390c:	4a1f      	ldr	r2, [pc, #124]	; (801398c <prvAddNewTaskToReadyList+0xc8>)
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013912:	4b20      	ldr	r3, [pc, #128]	; (8013994 <prvAddNewTaskToReadyList+0xd0>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	3301      	adds	r3, #1
 8013918:	4a1e      	ldr	r2, [pc, #120]	; (8013994 <prvAddNewTaskToReadyList+0xd0>)
 801391a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801391c:	4b1d      	ldr	r3, [pc, #116]	; (8013994 <prvAddNewTaskToReadyList+0xd0>)
 801391e:	681a      	ldr	r2, [r3, #0]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013928:	4b1b      	ldr	r3, [pc, #108]	; (8013998 <prvAddNewTaskToReadyList+0xd4>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	429a      	cmp	r2, r3
 801392e:	d903      	bls.n	8013938 <prvAddNewTaskToReadyList+0x74>
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013934:	4a18      	ldr	r2, [pc, #96]	; (8013998 <prvAddNewTaskToReadyList+0xd4>)
 8013936:	6013      	str	r3, [r2, #0]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801393c:	4613      	mov	r3, r2
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	4413      	add	r3, r2
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	4a15      	ldr	r2, [pc, #84]	; (801399c <prvAddNewTaskToReadyList+0xd8>)
 8013946:	441a      	add	r2, r3
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	3304      	adds	r3, #4
 801394c:	4619      	mov	r1, r3
 801394e:	4610      	mov	r0, r2
 8013950:	f7fe fb6b 	bl	801202a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013954:	f7fe fd2e 	bl	80123b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013958:	4b0d      	ldr	r3, [pc, #52]	; (8013990 <prvAddNewTaskToReadyList+0xcc>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d00e      	beq.n	801397e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013960:	4b0a      	ldr	r3, [pc, #40]	; (801398c <prvAddNewTaskToReadyList+0xc8>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801396a:	429a      	cmp	r2, r3
 801396c:	d207      	bcs.n	801397e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801396e:	4b0c      	ldr	r3, [pc, #48]	; (80139a0 <prvAddNewTaskToReadyList+0xdc>)
 8013970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013974:	601a      	str	r2, [r3, #0]
 8013976:	f3bf 8f4f 	dsb	sy
 801397a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801397e:	bf00      	nop
 8013980:	3708      	adds	r7, #8
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	20056594 	.word	0x20056594
 801398c:	200560c0 	.word	0x200560c0
 8013990:	200565a0 	.word	0x200565a0
 8013994:	200565b0 	.word	0x200565b0
 8013998:	2005659c 	.word	0x2005659c
 801399c:	200560c4 	.word	0x200560c4
 80139a0:	e000ed04 	.word	0xe000ed04

080139a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b084      	sub	sp, #16
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80139ac:	2300      	movs	r3, #0
 80139ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d019      	beq.n	80139ea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80139b6:	4b14      	ldr	r3, [pc, #80]	; (8013a08 <vTaskDelay+0x64>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d00c      	beq.n	80139d8 <vTaskDelay+0x34>
	__asm volatile
 80139be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80139c2:	b672      	cpsid	i
 80139c4:	f383 8811 	msr	BASEPRI, r3
 80139c8:	f3bf 8f6f 	isb	sy
 80139cc:	f3bf 8f4f 	dsb	sy
 80139d0:	b662      	cpsie	i
 80139d2:	60bb      	str	r3, [r7, #8]
}
 80139d4:	bf00      	nop
 80139d6:	e7fe      	b.n	80139d6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80139d8:	f000 f884 	bl	8013ae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80139dc:	2100      	movs	r1, #0
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f000 fe06 	bl	80145f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80139e4:	f000 f88c 	bl	8013b00 <xTaskResumeAll>
 80139e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d107      	bne.n	8013a00 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80139f0:	4b06      	ldr	r3, [pc, #24]	; (8013a0c <vTaskDelay+0x68>)
 80139f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139f6:	601a      	str	r2, [r3, #0]
 80139f8:	f3bf 8f4f 	dsb	sy
 80139fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a00:	bf00      	nop
 8013a02:	3710      	adds	r7, #16
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	200565bc 	.word	0x200565bc
 8013a0c:	e000ed04 	.word	0xe000ed04

08013a10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b08a      	sub	sp, #40	; 0x28
 8013a14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013a16:	2300      	movs	r3, #0
 8013a18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013a1e:	463a      	mov	r2, r7
 8013a20:	1d39      	adds	r1, r7, #4
 8013a22:	f107 0308 	add.w	r3, r7, #8
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7fe f8ba 	bl	8011ba0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013a2c:	6839      	ldr	r1, [r7, #0]
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	68ba      	ldr	r2, [r7, #8]
 8013a32:	9202      	str	r2, [sp, #8]
 8013a34:	9301      	str	r3, [sp, #4]
 8013a36:	2300      	movs	r3, #0
 8013a38:	9300      	str	r3, [sp, #0]
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	460a      	mov	r2, r1
 8013a3e:	4923      	ldr	r1, [pc, #140]	; (8013acc <vTaskStartScheduler+0xbc>)
 8013a40:	4823      	ldr	r0, [pc, #140]	; (8013ad0 <vTaskStartScheduler+0xc0>)
 8013a42:	f7ff fe05 	bl	8013650 <xTaskCreateStatic>
 8013a46:	4603      	mov	r3, r0
 8013a48:	4a22      	ldr	r2, [pc, #136]	; (8013ad4 <vTaskStartScheduler+0xc4>)
 8013a4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013a4c:	4b21      	ldr	r3, [pc, #132]	; (8013ad4 <vTaskStartScheduler+0xc4>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d002      	beq.n	8013a5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013a54:	2301      	movs	r3, #1
 8013a56:	617b      	str	r3, [r7, #20]
 8013a58:	e001      	b.n	8013a5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	2b01      	cmp	r3, #1
 8013a62:	d102      	bne.n	8013a6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013a64:	f000 fe18 	bl	8014698 <xTimerCreateTimerTask>
 8013a68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	2b01      	cmp	r3, #1
 8013a6e:	d118      	bne.n	8013aa2 <vTaskStartScheduler+0x92>
	__asm volatile
 8013a70:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013a74:	b672      	cpsid	i
 8013a76:	f383 8811 	msr	BASEPRI, r3
 8013a7a:	f3bf 8f6f 	isb	sy
 8013a7e:	f3bf 8f4f 	dsb	sy
 8013a82:	b662      	cpsie	i
 8013a84:	613b      	str	r3, [r7, #16]
}
 8013a86:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013a88:	4b13      	ldr	r3, [pc, #76]	; (8013ad8 <vTaskStartScheduler+0xc8>)
 8013a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013a90:	4b12      	ldr	r3, [pc, #72]	; (8013adc <vTaskStartScheduler+0xcc>)
 8013a92:	2201      	movs	r2, #1
 8013a94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013a96:	4b12      	ldr	r3, [pc, #72]	; (8013ae0 <vTaskStartScheduler+0xd0>)
 8013a98:	2200      	movs	r2, #0
 8013a9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013a9c:	f7fe fbd8 	bl	8012250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013aa0:	e010      	b.n	8013ac4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aa8:	d10c      	bne.n	8013ac4 <vTaskStartScheduler+0xb4>
	__asm volatile
 8013aaa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013aae:	b672      	cpsid	i
 8013ab0:	f383 8811 	msr	BASEPRI, r3
 8013ab4:	f3bf 8f6f 	isb	sy
 8013ab8:	f3bf 8f4f 	dsb	sy
 8013abc:	b662      	cpsie	i
 8013abe:	60fb      	str	r3, [r7, #12]
}
 8013ac0:	bf00      	nop
 8013ac2:	e7fe      	b.n	8013ac2 <vTaskStartScheduler+0xb2>
}
 8013ac4:	bf00      	nop
 8013ac6:	3718      	adds	r7, #24
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	0802b2bc 	.word	0x0802b2bc
 8013ad0:	0801411d 	.word	0x0801411d
 8013ad4:	200565b8 	.word	0x200565b8
 8013ad8:	200565b4 	.word	0x200565b4
 8013adc:	200565a0 	.word	0x200565a0
 8013ae0:	20056598 	.word	0x20056598

08013ae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013ae8:	4b04      	ldr	r3, [pc, #16]	; (8013afc <vTaskSuspendAll+0x18>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	3301      	adds	r3, #1
 8013aee:	4a03      	ldr	r2, [pc, #12]	; (8013afc <vTaskSuspendAll+0x18>)
 8013af0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013af2:	bf00      	nop
 8013af4:	46bd      	mov	sp, r7
 8013af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afa:	4770      	bx	lr
 8013afc:	200565bc 	.word	0x200565bc

08013b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b084      	sub	sp, #16
 8013b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b06:	2300      	movs	r3, #0
 8013b08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b0e:	4b43      	ldr	r3, [pc, #268]	; (8013c1c <xTaskResumeAll+0x11c>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d10c      	bne.n	8013b30 <xTaskResumeAll+0x30>
	__asm volatile
 8013b16:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b1a:	b672      	cpsid	i
 8013b1c:	f383 8811 	msr	BASEPRI, r3
 8013b20:	f3bf 8f6f 	isb	sy
 8013b24:	f3bf 8f4f 	dsb	sy
 8013b28:	b662      	cpsie	i
 8013b2a:	603b      	str	r3, [r7, #0]
}
 8013b2c:	bf00      	nop
 8013b2e:	e7fe      	b.n	8013b2e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013b30:	f7fe fc0c 	bl	801234c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013b34:	4b39      	ldr	r3, [pc, #228]	; (8013c1c <xTaskResumeAll+0x11c>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	4a38      	ldr	r2, [pc, #224]	; (8013c1c <xTaskResumeAll+0x11c>)
 8013b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b3e:	4b37      	ldr	r3, [pc, #220]	; (8013c1c <xTaskResumeAll+0x11c>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d162      	bne.n	8013c0c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013b46:	4b36      	ldr	r3, [pc, #216]	; (8013c20 <xTaskResumeAll+0x120>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d05e      	beq.n	8013c0c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b4e:	e02f      	b.n	8013bb0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b50:	4b34      	ldr	r3, [pc, #208]	; (8013c24 <xTaskResumeAll+0x124>)
 8013b52:	68db      	ldr	r3, [r3, #12]
 8013b54:	68db      	ldr	r3, [r3, #12]
 8013b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	3318      	adds	r3, #24
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7fe fac1 	bl	80120e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	3304      	adds	r3, #4
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7fe fabc 	bl	80120e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b70:	4b2d      	ldr	r3, [pc, #180]	; (8013c28 <xTaskResumeAll+0x128>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d903      	bls.n	8013b80 <xTaskResumeAll+0x80>
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b7c:	4a2a      	ldr	r2, [pc, #168]	; (8013c28 <xTaskResumeAll+0x128>)
 8013b7e:	6013      	str	r3, [r2, #0]
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b84:	4613      	mov	r3, r2
 8013b86:	009b      	lsls	r3, r3, #2
 8013b88:	4413      	add	r3, r2
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	4a27      	ldr	r2, [pc, #156]	; (8013c2c <xTaskResumeAll+0x12c>)
 8013b8e:	441a      	add	r2, r3
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	3304      	adds	r3, #4
 8013b94:	4619      	mov	r1, r3
 8013b96:	4610      	mov	r0, r2
 8013b98:	f7fe fa47 	bl	801202a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ba0:	4b23      	ldr	r3, [pc, #140]	; (8013c30 <xTaskResumeAll+0x130>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d302      	bcc.n	8013bb0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8013baa:	4b22      	ldr	r3, [pc, #136]	; (8013c34 <xTaskResumeAll+0x134>)
 8013bac:	2201      	movs	r2, #1
 8013bae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bb0:	4b1c      	ldr	r3, [pc, #112]	; (8013c24 <xTaskResumeAll+0x124>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d1cb      	bne.n	8013b50 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d001      	beq.n	8013bc2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013bbe:	f000 fb65 	bl	801428c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013bc2:	4b1d      	ldr	r3, [pc, #116]	; (8013c38 <xTaskResumeAll+0x138>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d010      	beq.n	8013bf0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013bce:	f000 f847 	bl	8013c60 <xTaskIncrementTick>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d002      	beq.n	8013bde <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8013bd8:	4b16      	ldr	r3, [pc, #88]	; (8013c34 <xTaskResumeAll+0x134>)
 8013bda:	2201      	movs	r2, #1
 8013bdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	3b01      	subs	r3, #1
 8013be2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d1f1      	bne.n	8013bce <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8013bea:	4b13      	ldr	r3, [pc, #76]	; (8013c38 <xTaskResumeAll+0x138>)
 8013bec:	2200      	movs	r2, #0
 8013bee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013bf0:	4b10      	ldr	r3, [pc, #64]	; (8013c34 <xTaskResumeAll+0x134>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d009      	beq.n	8013c0c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013bfc:	4b0f      	ldr	r3, [pc, #60]	; (8013c3c <xTaskResumeAll+0x13c>)
 8013bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c02:	601a      	str	r2, [r3, #0]
 8013c04:	f3bf 8f4f 	dsb	sy
 8013c08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c0c:	f7fe fbd2 	bl	80123b4 <vPortExitCritical>

	return xAlreadyYielded;
 8013c10:	68bb      	ldr	r3, [r7, #8]
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3710      	adds	r7, #16
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}
 8013c1a:	bf00      	nop
 8013c1c:	200565bc 	.word	0x200565bc
 8013c20:	20056594 	.word	0x20056594
 8013c24:	20056554 	.word	0x20056554
 8013c28:	2005659c 	.word	0x2005659c
 8013c2c:	200560c4 	.word	0x200560c4
 8013c30:	200560c0 	.word	0x200560c0
 8013c34:	200565a8 	.word	0x200565a8
 8013c38:	200565a4 	.word	0x200565a4
 8013c3c:	e000ed04 	.word	0xe000ed04

08013c40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013c40:	b480      	push	{r7}
 8013c42:	b083      	sub	sp, #12
 8013c44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013c46:	4b05      	ldr	r3, [pc, #20]	; (8013c5c <xTaskGetTickCount+0x1c>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013c4c:	687b      	ldr	r3, [r7, #4]
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	370c      	adds	r7, #12
 8013c52:	46bd      	mov	sp, r7
 8013c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c58:	4770      	bx	lr
 8013c5a:	bf00      	nop
 8013c5c:	20056598 	.word	0x20056598

08013c60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b086      	sub	sp, #24
 8013c64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013c66:	2300      	movs	r3, #0
 8013c68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c6a:	4b50      	ldr	r3, [pc, #320]	; (8013dac <xTaskIncrementTick+0x14c>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	f040 808b 	bne.w	8013d8a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013c74:	4b4e      	ldr	r3, [pc, #312]	; (8013db0 <xTaskIncrementTick+0x150>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013c7c:	4a4c      	ldr	r2, [pc, #304]	; (8013db0 <xTaskIncrementTick+0x150>)
 8013c7e:	693b      	ldr	r3, [r7, #16]
 8013c80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013c82:	693b      	ldr	r3, [r7, #16]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d122      	bne.n	8013cce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8013c88:	4b4a      	ldr	r3, [pc, #296]	; (8013db4 <xTaskIncrementTick+0x154>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d00c      	beq.n	8013cac <xTaskIncrementTick+0x4c>
	__asm volatile
 8013c92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c96:	b672      	cpsid	i
 8013c98:	f383 8811 	msr	BASEPRI, r3
 8013c9c:	f3bf 8f6f 	isb	sy
 8013ca0:	f3bf 8f4f 	dsb	sy
 8013ca4:	b662      	cpsie	i
 8013ca6:	603b      	str	r3, [r7, #0]
}
 8013ca8:	bf00      	nop
 8013caa:	e7fe      	b.n	8013caa <xTaskIncrementTick+0x4a>
 8013cac:	4b41      	ldr	r3, [pc, #260]	; (8013db4 <xTaskIncrementTick+0x154>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	60fb      	str	r3, [r7, #12]
 8013cb2:	4b41      	ldr	r3, [pc, #260]	; (8013db8 <xTaskIncrementTick+0x158>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	4a3f      	ldr	r2, [pc, #252]	; (8013db4 <xTaskIncrementTick+0x154>)
 8013cb8:	6013      	str	r3, [r2, #0]
 8013cba:	4a3f      	ldr	r2, [pc, #252]	; (8013db8 <xTaskIncrementTick+0x158>)
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6013      	str	r3, [r2, #0]
 8013cc0:	4b3e      	ldr	r3, [pc, #248]	; (8013dbc <xTaskIncrementTick+0x15c>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	4a3d      	ldr	r2, [pc, #244]	; (8013dbc <xTaskIncrementTick+0x15c>)
 8013cc8:	6013      	str	r3, [r2, #0]
 8013cca:	f000 fadf 	bl	801428c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013cce:	4b3c      	ldr	r3, [pc, #240]	; (8013dc0 <xTaskIncrementTick+0x160>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	693a      	ldr	r2, [r7, #16]
 8013cd4:	429a      	cmp	r2, r3
 8013cd6:	d349      	bcc.n	8013d6c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013cd8:	4b36      	ldr	r3, [pc, #216]	; (8013db4 <xTaskIncrementTick+0x154>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d104      	bne.n	8013cec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ce2:	4b37      	ldr	r3, [pc, #220]	; (8013dc0 <xTaskIncrementTick+0x160>)
 8013ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ce8:	601a      	str	r2, [r3, #0]
					break;
 8013cea:	e03f      	b.n	8013d6c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cec:	4b31      	ldr	r3, [pc, #196]	; (8013db4 <xTaskIncrementTick+0x154>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	68db      	ldr	r3, [r3, #12]
 8013cf2:	68db      	ldr	r3, [r3, #12]
 8013cf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	685b      	ldr	r3, [r3, #4]
 8013cfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013cfc:	693a      	ldr	r2, [r7, #16]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d203      	bcs.n	8013d0c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d04:	4a2e      	ldr	r2, [pc, #184]	; (8013dc0 <xTaskIncrementTick+0x160>)
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d0a:	e02f      	b.n	8013d6c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	3304      	adds	r3, #4
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7fe f9e7 	bl	80120e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d004      	beq.n	8013d28 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	3318      	adds	r3, #24
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7fe f9de 	bl	80120e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d2c:	4b25      	ldr	r3, [pc, #148]	; (8013dc4 <xTaskIncrementTick+0x164>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d903      	bls.n	8013d3c <xTaskIncrementTick+0xdc>
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d38:	4a22      	ldr	r2, [pc, #136]	; (8013dc4 <xTaskIncrementTick+0x164>)
 8013d3a:	6013      	str	r3, [r2, #0]
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d40:	4613      	mov	r3, r2
 8013d42:	009b      	lsls	r3, r3, #2
 8013d44:	4413      	add	r3, r2
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	4a1f      	ldr	r2, [pc, #124]	; (8013dc8 <xTaskIncrementTick+0x168>)
 8013d4a:	441a      	add	r2, r3
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	3304      	adds	r3, #4
 8013d50:	4619      	mov	r1, r3
 8013d52:	4610      	mov	r0, r2
 8013d54:	f7fe f969 	bl	801202a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d5c:	4b1b      	ldr	r3, [pc, #108]	; (8013dcc <xTaskIncrementTick+0x16c>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d3b8      	bcc.n	8013cd8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8013d66:	2301      	movs	r3, #1
 8013d68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d6a:	e7b5      	b.n	8013cd8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013d6c:	4b17      	ldr	r3, [pc, #92]	; (8013dcc <xTaskIncrementTick+0x16c>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d72:	4915      	ldr	r1, [pc, #84]	; (8013dc8 <xTaskIncrementTick+0x168>)
 8013d74:	4613      	mov	r3, r2
 8013d76:	009b      	lsls	r3, r3, #2
 8013d78:	4413      	add	r3, r2
 8013d7a:	009b      	lsls	r3, r3, #2
 8013d7c:	440b      	add	r3, r1
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	2b01      	cmp	r3, #1
 8013d82:	d907      	bls.n	8013d94 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8013d84:	2301      	movs	r3, #1
 8013d86:	617b      	str	r3, [r7, #20]
 8013d88:	e004      	b.n	8013d94 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013d8a:	4b11      	ldr	r3, [pc, #68]	; (8013dd0 <xTaskIncrementTick+0x170>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	3301      	adds	r3, #1
 8013d90:	4a0f      	ldr	r2, [pc, #60]	; (8013dd0 <xTaskIncrementTick+0x170>)
 8013d92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013d94:	4b0f      	ldr	r3, [pc, #60]	; (8013dd4 <xTaskIncrementTick+0x174>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d001      	beq.n	8013da0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013da0:	697b      	ldr	r3, [r7, #20]
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3718      	adds	r7, #24
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	200565bc 	.word	0x200565bc
 8013db0:	20056598 	.word	0x20056598
 8013db4:	2005654c 	.word	0x2005654c
 8013db8:	20056550 	.word	0x20056550
 8013dbc:	200565ac 	.word	0x200565ac
 8013dc0:	200565b4 	.word	0x200565b4
 8013dc4:	2005659c 	.word	0x2005659c
 8013dc8:	200560c4 	.word	0x200560c4
 8013dcc:	200560c0 	.word	0x200560c0
 8013dd0:	200565a4 	.word	0x200565a4
 8013dd4:	200565a8 	.word	0x200565a8

08013dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b085      	sub	sp, #20
 8013ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013dde:	4b29      	ldr	r3, [pc, #164]	; (8013e84 <vTaskSwitchContext+0xac>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d003      	beq.n	8013dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013de6:	4b28      	ldr	r3, [pc, #160]	; (8013e88 <vTaskSwitchContext+0xb0>)
 8013de8:	2201      	movs	r2, #1
 8013dea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013dec:	e043      	b.n	8013e76 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8013dee:	4b26      	ldr	r3, [pc, #152]	; (8013e88 <vTaskSwitchContext+0xb0>)
 8013df0:	2200      	movs	r2, #0
 8013df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013df4:	4b25      	ldr	r3, [pc, #148]	; (8013e8c <vTaskSwitchContext+0xb4>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	60fb      	str	r3, [r7, #12]
 8013dfa:	e012      	b.n	8013e22 <vTaskSwitchContext+0x4a>
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d10c      	bne.n	8013e1c <vTaskSwitchContext+0x44>
	__asm volatile
 8013e02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013e06:	b672      	cpsid	i
 8013e08:	f383 8811 	msr	BASEPRI, r3
 8013e0c:	f3bf 8f6f 	isb	sy
 8013e10:	f3bf 8f4f 	dsb	sy
 8013e14:	b662      	cpsie	i
 8013e16:	607b      	str	r3, [r7, #4]
}
 8013e18:	bf00      	nop
 8013e1a:	e7fe      	b.n	8013e1a <vTaskSwitchContext+0x42>
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	3b01      	subs	r3, #1
 8013e20:	60fb      	str	r3, [r7, #12]
 8013e22:	491b      	ldr	r1, [pc, #108]	; (8013e90 <vTaskSwitchContext+0xb8>)
 8013e24:	68fa      	ldr	r2, [r7, #12]
 8013e26:	4613      	mov	r3, r2
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	4413      	add	r3, r2
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	440b      	add	r3, r1
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d0e2      	beq.n	8013dfc <vTaskSwitchContext+0x24>
 8013e36:	68fa      	ldr	r2, [r7, #12]
 8013e38:	4613      	mov	r3, r2
 8013e3a:	009b      	lsls	r3, r3, #2
 8013e3c:	4413      	add	r3, r2
 8013e3e:	009b      	lsls	r3, r3, #2
 8013e40:	4a13      	ldr	r2, [pc, #76]	; (8013e90 <vTaskSwitchContext+0xb8>)
 8013e42:	4413      	add	r3, r2
 8013e44:	60bb      	str	r3, [r7, #8]
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	685a      	ldr	r2, [r3, #4]
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	605a      	str	r2, [r3, #4]
 8013e50:	68bb      	ldr	r3, [r7, #8]
 8013e52:	685a      	ldr	r2, [r3, #4]
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	3308      	adds	r3, #8
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d104      	bne.n	8013e66 <vTaskSwitchContext+0x8e>
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	685b      	ldr	r3, [r3, #4]
 8013e60:	685a      	ldr	r2, [r3, #4]
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	605a      	str	r2, [r3, #4]
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	68db      	ldr	r3, [r3, #12]
 8013e6c:	4a09      	ldr	r2, [pc, #36]	; (8013e94 <vTaskSwitchContext+0xbc>)
 8013e6e:	6013      	str	r3, [r2, #0]
 8013e70:	4a06      	ldr	r2, [pc, #24]	; (8013e8c <vTaskSwitchContext+0xb4>)
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	6013      	str	r3, [r2, #0]
}
 8013e76:	bf00      	nop
 8013e78:	3714      	adds	r7, #20
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr
 8013e82:	bf00      	nop
 8013e84:	200565bc 	.word	0x200565bc
 8013e88:	200565a8 	.word	0x200565a8
 8013e8c:	2005659c 	.word	0x2005659c
 8013e90:	200560c4 	.word	0x200560c4
 8013e94:	200560c0 	.word	0x200560c0

08013e98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b084      	sub	sp, #16
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
 8013ea0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d10c      	bne.n	8013ec2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8013ea8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013eac:	b672      	cpsid	i
 8013eae:	f383 8811 	msr	BASEPRI, r3
 8013eb2:	f3bf 8f6f 	isb	sy
 8013eb6:	f3bf 8f4f 	dsb	sy
 8013eba:	b662      	cpsie	i
 8013ebc:	60fb      	str	r3, [r7, #12]
}
 8013ebe:	bf00      	nop
 8013ec0:	e7fe      	b.n	8013ec0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013ec2:	4b07      	ldr	r3, [pc, #28]	; (8013ee0 <vTaskPlaceOnEventList+0x48>)
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	3318      	adds	r3, #24
 8013ec8:	4619      	mov	r1, r3
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f7fe f8d1 	bl	8012072 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013ed0:	2101      	movs	r1, #1
 8013ed2:	6838      	ldr	r0, [r7, #0]
 8013ed4:	f000 fb8c 	bl	80145f0 <prvAddCurrentTaskToDelayedList>
}
 8013ed8:	bf00      	nop
 8013eda:	3710      	adds	r7, #16
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	200560c0 	.word	0x200560c0

08013ee4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b086      	sub	sp, #24
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d10c      	bne.n	8013f10 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8013ef6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013efa:	b672      	cpsid	i
 8013efc:	f383 8811 	msr	BASEPRI, r3
 8013f00:	f3bf 8f6f 	isb	sy
 8013f04:	f3bf 8f4f 	dsb	sy
 8013f08:	b662      	cpsie	i
 8013f0a:	617b      	str	r3, [r7, #20]
}
 8013f0c:	bf00      	nop
 8013f0e:	e7fe      	b.n	8013f0e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f10:	4b0a      	ldr	r3, [pc, #40]	; (8013f3c <vTaskPlaceOnEventListRestricted+0x58>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	3318      	adds	r3, #24
 8013f16:	4619      	mov	r1, r3
 8013f18:	68f8      	ldr	r0, [r7, #12]
 8013f1a:	f7fe f886 	bl	801202a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d002      	beq.n	8013f2a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8013f24:	f04f 33ff 	mov.w	r3, #4294967295
 8013f28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013f2a:	6879      	ldr	r1, [r7, #4]
 8013f2c:	68b8      	ldr	r0, [r7, #8]
 8013f2e:	f000 fb5f 	bl	80145f0 <prvAddCurrentTaskToDelayedList>
	}
 8013f32:	bf00      	nop
 8013f34:	3718      	adds	r7, #24
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd80      	pop	{r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	200560c0 	.word	0x200560c0

08013f40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b086      	sub	sp, #24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	68db      	ldr	r3, [r3, #12]
 8013f4c:	68db      	ldr	r3, [r3, #12]
 8013f4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013f50:	693b      	ldr	r3, [r7, #16]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d10c      	bne.n	8013f70 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8013f56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f5a:	b672      	cpsid	i
 8013f5c:	f383 8811 	msr	BASEPRI, r3
 8013f60:	f3bf 8f6f 	isb	sy
 8013f64:	f3bf 8f4f 	dsb	sy
 8013f68:	b662      	cpsie	i
 8013f6a:	60fb      	str	r3, [r7, #12]
}
 8013f6c:	bf00      	nop
 8013f6e:	e7fe      	b.n	8013f6e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	3318      	adds	r3, #24
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7fe f8b5 	bl	80120e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f7a:	4b1e      	ldr	r3, [pc, #120]	; (8013ff4 <xTaskRemoveFromEventList+0xb4>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d11d      	bne.n	8013fbe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	3304      	adds	r3, #4
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7fe f8ac 	bl	80120e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013f8c:	693b      	ldr	r3, [r7, #16]
 8013f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f90:	4b19      	ldr	r3, [pc, #100]	; (8013ff8 <xTaskRemoveFromEventList+0xb8>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d903      	bls.n	8013fa0 <xTaskRemoveFromEventList+0x60>
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f9c:	4a16      	ldr	r2, [pc, #88]	; (8013ff8 <xTaskRemoveFromEventList+0xb8>)
 8013f9e:	6013      	str	r3, [r2, #0]
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fa4:	4613      	mov	r3, r2
 8013fa6:	009b      	lsls	r3, r3, #2
 8013fa8:	4413      	add	r3, r2
 8013faa:	009b      	lsls	r3, r3, #2
 8013fac:	4a13      	ldr	r2, [pc, #76]	; (8013ffc <xTaskRemoveFromEventList+0xbc>)
 8013fae:	441a      	add	r2, r3
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	3304      	adds	r3, #4
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	4610      	mov	r0, r2
 8013fb8:	f7fe f837 	bl	801202a <vListInsertEnd>
 8013fbc:	e005      	b.n	8013fca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	3318      	adds	r3, #24
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	480e      	ldr	r0, [pc, #56]	; (8014000 <xTaskRemoveFromEventList+0xc0>)
 8013fc6:	f7fe f830 	bl	801202a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fce:	4b0d      	ldr	r3, [pc, #52]	; (8014004 <xTaskRemoveFromEventList+0xc4>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d905      	bls.n	8013fe4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013fd8:	2301      	movs	r3, #1
 8013fda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013fdc:	4b0a      	ldr	r3, [pc, #40]	; (8014008 <xTaskRemoveFromEventList+0xc8>)
 8013fde:	2201      	movs	r2, #1
 8013fe0:	601a      	str	r2, [r3, #0]
 8013fe2:	e001      	b.n	8013fe8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013fe8:	697b      	ldr	r3, [r7, #20]
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	3718      	adds	r7, #24
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	200565bc 	.word	0x200565bc
 8013ff8:	2005659c 	.word	0x2005659c
 8013ffc:	200560c4 	.word	0x200560c4
 8014000:	20056554 	.word	0x20056554
 8014004:	200560c0 	.word	0x200560c0
 8014008:	200565a8 	.word	0x200565a8

0801400c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801400c:	b480      	push	{r7}
 801400e:	b083      	sub	sp, #12
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014014:	4b06      	ldr	r3, [pc, #24]	; (8014030 <vTaskInternalSetTimeOutState+0x24>)
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801401c:	4b05      	ldr	r3, [pc, #20]	; (8014034 <vTaskInternalSetTimeOutState+0x28>)
 801401e:	681a      	ldr	r2, [r3, #0]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	605a      	str	r2, [r3, #4]
}
 8014024:	bf00      	nop
 8014026:	370c      	adds	r7, #12
 8014028:	46bd      	mov	sp, r7
 801402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402e:	4770      	bx	lr
 8014030:	200565ac 	.word	0x200565ac
 8014034:	20056598 	.word	0x20056598

08014038 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b088      	sub	sp, #32
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d10c      	bne.n	8014062 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8014048:	f04f 0330 	mov.w	r3, #48	; 0x30
 801404c:	b672      	cpsid	i
 801404e:	f383 8811 	msr	BASEPRI, r3
 8014052:	f3bf 8f6f 	isb	sy
 8014056:	f3bf 8f4f 	dsb	sy
 801405a:	b662      	cpsie	i
 801405c:	613b      	str	r3, [r7, #16]
}
 801405e:	bf00      	nop
 8014060:	e7fe      	b.n	8014060 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d10c      	bne.n	8014082 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8014068:	f04f 0330 	mov.w	r3, #48	; 0x30
 801406c:	b672      	cpsid	i
 801406e:	f383 8811 	msr	BASEPRI, r3
 8014072:	f3bf 8f6f 	isb	sy
 8014076:	f3bf 8f4f 	dsb	sy
 801407a:	b662      	cpsie	i
 801407c:	60fb      	str	r3, [r7, #12]
}
 801407e:	bf00      	nop
 8014080:	e7fe      	b.n	8014080 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8014082:	f7fe f963 	bl	801234c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014086:	4b1d      	ldr	r3, [pc, #116]	; (80140fc <xTaskCheckForTimeOut+0xc4>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	69ba      	ldr	r2, [r7, #24]
 8014092:	1ad3      	subs	r3, r2, r3
 8014094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801409e:	d102      	bne.n	80140a6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80140a0:	2300      	movs	r3, #0
 80140a2:	61fb      	str	r3, [r7, #28]
 80140a4:	e023      	b.n	80140ee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	681a      	ldr	r2, [r3, #0]
 80140aa:	4b15      	ldr	r3, [pc, #84]	; (8014100 <xTaskCheckForTimeOut+0xc8>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d007      	beq.n	80140c2 <xTaskCheckForTimeOut+0x8a>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	685b      	ldr	r3, [r3, #4]
 80140b6:	69ba      	ldr	r2, [r7, #24]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d302      	bcc.n	80140c2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80140bc:	2301      	movs	r3, #1
 80140be:	61fb      	str	r3, [r7, #28]
 80140c0:	e015      	b.n	80140ee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	697a      	ldr	r2, [r7, #20]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d20b      	bcs.n	80140e4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	1ad2      	subs	r2, r2, r3
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f7ff ff97 	bl	801400c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140de:	2300      	movs	r3, #0
 80140e0:	61fb      	str	r3, [r7, #28]
 80140e2:	e004      	b.n	80140ee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	2200      	movs	r2, #0
 80140e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80140ea:	2301      	movs	r3, #1
 80140ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80140ee:	f7fe f961 	bl	80123b4 <vPortExitCritical>

	return xReturn;
 80140f2:	69fb      	ldr	r3, [r7, #28]
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3720      	adds	r7, #32
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	20056598 	.word	0x20056598
 8014100:	200565ac 	.word	0x200565ac

08014104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014104:	b480      	push	{r7}
 8014106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014108:	4b03      	ldr	r3, [pc, #12]	; (8014118 <vTaskMissedYield+0x14>)
 801410a:	2201      	movs	r2, #1
 801410c:	601a      	str	r2, [r3, #0]
}
 801410e:	bf00      	nop
 8014110:	46bd      	mov	sp, r7
 8014112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014116:	4770      	bx	lr
 8014118:	200565a8 	.word	0x200565a8

0801411c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014124:	f000 f852 	bl	80141cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014128:	4b06      	ldr	r3, [pc, #24]	; (8014144 <prvIdleTask+0x28>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2b01      	cmp	r3, #1
 801412e:	d9f9      	bls.n	8014124 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014130:	4b05      	ldr	r3, [pc, #20]	; (8014148 <prvIdleTask+0x2c>)
 8014132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014136:	601a      	str	r2, [r3, #0]
 8014138:	f3bf 8f4f 	dsb	sy
 801413c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014140:	e7f0      	b.n	8014124 <prvIdleTask+0x8>
 8014142:	bf00      	nop
 8014144:	200560c4 	.word	0x200560c4
 8014148:	e000ed04 	.word	0xe000ed04

0801414c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014152:	2300      	movs	r3, #0
 8014154:	607b      	str	r3, [r7, #4]
 8014156:	e00c      	b.n	8014172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	4613      	mov	r3, r2
 801415c:	009b      	lsls	r3, r3, #2
 801415e:	4413      	add	r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	4a12      	ldr	r2, [pc, #72]	; (80141ac <prvInitialiseTaskLists+0x60>)
 8014164:	4413      	add	r3, r2
 8014166:	4618      	mov	r0, r3
 8014168:	f7fd ff32 	bl	8011fd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	3301      	adds	r3, #1
 8014170:	607b      	str	r3, [r7, #4]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2b37      	cmp	r3, #55	; 0x37
 8014176:	d9ef      	bls.n	8014158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014178:	480d      	ldr	r0, [pc, #52]	; (80141b0 <prvInitialiseTaskLists+0x64>)
 801417a:	f7fd ff29 	bl	8011fd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801417e:	480d      	ldr	r0, [pc, #52]	; (80141b4 <prvInitialiseTaskLists+0x68>)
 8014180:	f7fd ff26 	bl	8011fd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014184:	480c      	ldr	r0, [pc, #48]	; (80141b8 <prvInitialiseTaskLists+0x6c>)
 8014186:	f7fd ff23 	bl	8011fd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801418a:	480c      	ldr	r0, [pc, #48]	; (80141bc <prvInitialiseTaskLists+0x70>)
 801418c:	f7fd ff20 	bl	8011fd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014190:	480b      	ldr	r0, [pc, #44]	; (80141c0 <prvInitialiseTaskLists+0x74>)
 8014192:	f7fd ff1d 	bl	8011fd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014196:	4b0b      	ldr	r3, [pc, #44]	; (80141c4 <prvInitialiseTaskLists+0x78>)
 8014198:	4a05      	ldr	r2, [pc, #20]	; (80141b0 <prvInitialiseTaskLists+0x64>)
 801419a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801419c:	4b0a      	ldr	r3, [pc, #40]	; (80141c8 <prvInitialiseTaskLists+0x7c>)
 801419e:	4a05      	ldr	r2, [pc, #20]	; (80141b4 <prvInitialiseTaskLists+0x68>)
 80141a0:	601a      	str	r2, [r3, #0]
}
 80141a2:	bf00      	nop
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop
 80141ac:	200560c4 	.word	0x200560c4
 80141b0:	20056524 	.word	0x20056524
 80141b4:	20056538 	.word	0x20056538
 80141b8:	20056554 	.word	0x20056554
 80141bc:	20056568 	.word	0x20056568
 80141c0:	20056580 	.word	0x20056580
 80141c4:	2005654c 	.word	0x2005654c
 80141c8:	20056550 	.word	0x20056550

080141cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b082      	sub	sp, #8
 80141d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141d2:	e019      	b.n	8014208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80141d4:	f7fe f8ba 	bl	801234c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141d8:	4b10      	ldr	r3, [pc, #64]	; (801421c <prvCheckTasksWaitingTermination+0x50>)
 80141da:	68db      	ldr	r3, [r3, #12]
 80141dc:	68db      	ldr	r3, [r3, #12]
 80141de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	3304      	adds	r3, #4
 80141e4:	4618      	mov	r0, r3
 80141e6:	f7fd ff7d 	bl	80120e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80141ea:	4b0d      	ldr	r3, [pc, #52]	; (8014220 <prvCheckTasksWaitingTermination+0x54>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	3b01      	subs	r3, #1
 80141f0:	4a0b      	ldr	r2, [pc, #44]	; (8014220 <prvCheckTasksWaitingTermination+0x54>)
 80141f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80141f4:	4b0b      	ldr	r3, [pc, #44]	; (8014224 <prvCheckTasksWaitingTermination+0x58>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	3b01      	subs	r3, #1
 80141fa:	4a0a      	ldr	r2, [pc, #40]	; (8014224 <prvCheckTasksWaitingTermination+0x58>)
 80141fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80141fe:	f7fe f8d9 	bl	80123b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014202:	6878      	ldr	r0, [r7, #4]
 8014204:	f000 f810 	bl	8014228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014208:	4b06      	ldr	r3, [pc, #24]	; (8014224 <prvCheckTasksWaitingTermination+0x58>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d1e1      	bne.n	80141d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014210:	bf00      	nop
 8014212:	bf00      	nop
 8014214:	3708      	adds	r7, #8
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	20056568 	.word	0x20056568
 8014220:	20056594 	.word	0x20056594
 8014224:	2005657c 	.word	0x2005657c

08014228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014228:	b580      	push	{r7, lr}
 801422a:	b084      	sub	sp, #16
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014236:	2b00      	cmp	r3, #0
 8014238:	d108      	bne.n	801424c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801423e:	4618      	mov	r0, r3
 8014240:	f7fd fdac 	bl	8011d9c <vPortFree>
				vPortFree( pxTCB );
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f7fd fda9 	bl	8011d9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801424a:	e01a      	b.n	8014282 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014252:	2b01      	cmp	r3, #1
 8014254:	d103      	bne.n	801425e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f7fd fda0 	bl	8011d9c <vPortFree>
	}
 801425c:	e011      	b.n	8014282 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014264:	2b02      	cmp	r3, #2
 8014266:	d00c      	beq.n	8014282 <prvDeleteTCB+0x5a>
	__asm volatile
 8014268:	f04f 0330 	mov.w	r3, #48	; 0x30
 801426c:	b672      	cpsid	i
 801426e:	f383 8811 	msr	BASEPRI, r3
 8014272:	f3bf 8f6f 	isb	sy
 8014276:	f3bf 8f4f 	dsb	sy
 801427a:	b662      	cpsie	i
 801427c:	60fb      	str	r3, [r7, #12]
}
 801427e:	bf00      	nop
 8014280:	e7fe      	b.n	8014280 <prvDeleteTCB+0x58>
	}
 8014282:	bf00      	nop
 8014284:	3710      	adds	r7, #16
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
	...

0801428c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801428c:	b480      	push	{r7}
 801428e:	b083      	sub	sp, #12
 8014290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014292:	4b0c      	ldr	r3, [pc, #48]	; (80142c4 <prvResetNextTaskUnblockTime+0x38>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d104      	bne.n	80142a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801429c:	4b0a      	ldr	r3, [pc, #40]	; (80142c8 <prvResetNextTaskUnblockTime+0x3c>)
 801429e:	f04f 32ff 	mov.w	r2, #4294967295
 80142a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80142a4:	e008      	b.n	80142b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142a6:	4b07      	ldr	r3, [pc, #28]	; (80142c4 <prvResetNextTaskUnblockTime+0x38>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	68db      	ldr	r3, [r3, #12]
 80142ac:	68db      	ldr	r3, [r3, #12]
 80142ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	685b      	ldr	r3, [r3, #4]
 80142b4:	4a04      	ldr	r2, [pc, #16]	; (80142c8 <prvResetNextTaskUnblockTime+0x3c>)
 80142b6:	6013      	str	r3, [r2, #0]
}
 80142b8:	bf00      	nop
 80142ba:	370c      	adds	r7, #12
 80142bc:	46bd      	mov	sp, r7
 80142be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c2:	4770      	bx	lr
 80142c4:	2005654c 	.word	0x2005654c
 80142c8:	200565b4 	.word	0x200565b4

080142cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80142cc:	b480      	push	{r7}
 80142ce:	b083      	sub	sp, #12
 80142d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80142d2:	4b0b      	ldr	r3, [pc, #44]	; (8014300 <xTaskGetSchedulerState+0x34>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d102      	bne.n	80142e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80142da:	2301      	movs	r3, #1
 80142dc:	607b      	str	r3, [r7, #4]
 80142de:	e008      	b.n	80142f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142e0:	4b08      	ldr	r3, [pc, #32]	; (8014304 <xTaskGetSchedulerState+0x38>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d102      	bne.n	80142ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80142e8:	2302      	movs	r3, #2
 80142ea:	607b      	str	r3, [r7, #4]
 80142ec:	e001      	b.n	80142f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80142ee:	2300      	movs	r3, #0
 80142f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80142f2:	687b      	ldr	r3, [r7, #4]
	}
 80142f4:	4618      	mov	r0, r3
 80142f6:	370c      	adds	r7, #12
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr
 8014300:	200565a0 	.word	0x200565a0
 8014304:	200565bc 	.word	0x200565bc

08014308 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014308:	b580      	push	{r7, lr}
 801430a:	b084      	sub	sp, #16
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014314:	2300      	movs	r3, #0
 8014316:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d051      	beq.n	80143c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014322:	4b2a      	ldr	r3, [pc, #168]	; (80143cc <xTaskPriorityInherit+0xc4>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014328:	429a      	cmp	r2, r3
 801432a:	d241      	bcs.n	80143b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	699b      	ldr	r3, [r3, #24]
 8014330:	2b00      	cmp	r3, #0
 8014332:	db06      	blt.n	8014342 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014334:	4b25      	ldr	r3, [pc, #148]	; (80143cc <xTaskPriorityInherit+0xc4>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801433a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	6959      	ldr	r1, [r3, #20]
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801434a:	4613      	mov	r3, r2
 801434c:	009b      	lsls	r3, r3, #2
 801434e:	4413      	add	r3, r2
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	4a1f      	ldr	r2, [pc, #124]	; (80143d0 <xTaskPriorityInherit+0xc8>)
 8014354:	4413      	add	r3, r2
 8014356:	4299      	cmp	r1, r3
 8014358:	d122      	bne.n	80143a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	3304      	adds	r3, #4
 801435e:	4618      	mov	r0, r3
 8014360:	f7fd fec0 	bl	80120e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014364:	4b19      	ldr	r3, [pc, #100]	; (80143cc <xTaskPriorityInherit+0xc4>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014372:	4b18      	ldr	r3, [pc, #96]	; (80143d4 <xTaskPriorityInherit+0xcc>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	429a      	cmp	r2, r3
 8014378:	d903      	bls.n	8014382 <xTaskPriorityInherit+0x7a>
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801437e:	4a15      	ldr	r2, [pc, #84]	; (80143d4 <xTaskPriorityInherit+0xcc>)
 8014380:	6013      	str	r3, [r2, #0]
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014386:	4613      	mov	r3, r2
 8014388:	009b      	lsls	r3, r3, #2
 801438a:	4413      	add	r3, r2
 801438c:	009b      	lsls	r3, r3, #2
 801438e:	4a10      	ldr	r2, [pc, #64]	; (80143d0 <xTaskPriorityInherit+0xc8>)
 8014390:	441a      	add	r2, r3
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	3304      	adds	r3, #4
 8014396:	4619      	mov	r1, r3
 8014398:	4610      	mov	r0, r2
 801439a:	f7fd fe46 	bl	801202a <vListInsertEnd>
 801439e:	e004      	b.n	80143aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80143a0:	4b0a      	ldr	r3, [pc, #40]	; (80143cc <xTaskPriorityInherit+0xc4>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80143aa:	2301      	movs	r3, #1
 80143ac:	60fb      	str	r3, [r7, #12]
 80143ae:	e008      	b.n	80143c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143b4:	4b05      	ldr	r3, [pc, #20]	; (80143cc <xTaskPriorityInherit+0xc4>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143ba:	429a      	cmp	r2, r3
 80143bc:	d201      	bcs.n	80143c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80143be:	2301      	movs	r3, #1
 80143c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80143c2:	68fb      	ldr	r3, [r7, #12]
	}
 80143c4:	4618      	mov	r0, r3
 80143c6:	3710      	adds	r7, #16
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	200560c0 	.word	0x200560c0
 80143d0:	200560c4 	.word	0x200560c4
 80143d4:	2005659c 	.word	0x2005659c

080143d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b086      	sub	sp, #24
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80143e4:	2300      	movs	r3, #0
 80143e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d05a      	beq.n	80144a4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80143ee:	4b30      	ldr	r3, [pc, #192]	; (80144b0 <xTaskPriorityDisinherit+0xd8>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	693a      	ldr	r2, [r7, #16]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d00c      	beq.n	8014412 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80143f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80143fc:	b672      	cpsid	i
 80143fe:	f383 8811 	msr	BASEPRI, r3
 8014402:	f3bf 8f6f 	isb	sy
 8014406:	f3bf 8f4f 	dsb	sy
 801440a:	b662      	cpsie	i
 801440c:	60fb      	str	r3, [r7, #12]
}
 801440e:	bf00      	nop
 8014410:	e7fe      	b.n	8014410 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014416:	2b00      	cmp	r3, #0
 8014418:	d10c      	bne.n	8014434 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801441a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801441e:	b672      	cpsid	i
 8014420:	f383 8811 	msr	BASEPRI, r3
 8014424:	f3bf 8f6f 	isb	sy
 8014428:	f3bf 8f4f 	dsb	sy
 801442c:	b662      	cpsie	i
 801442e:	60bb      	str	r3, [r7, #8]
}
 8014430:	bf00      	nop
 8014432:	e7fe      	b.n	8014432 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8014434:	693b      	ldr	r3, [r7, #16]
 8014436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014438:	1e5a      	subs	r2, r3, #1
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014446:	429a      	cmp	r2, r3
 8014448:	d02c      	beq.n	80144a4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801444e:	2b00      	cmp	r3, #0
 8014450:	d128      	bne.n	80144a4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	3304      	adds	r3, #4
 8014456:	4618      	mov	r0, r3
 8014458:	f7fd fe44 	bl	80120e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014468:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014470:	693b      	ldr	r3, [r7, #16]
 8014472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014474:	4b0f      	ldr	r3, [pc, #60]	; (80144b4 <xTaskPriorityDisinherit+0xdc>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	429a      	cmp	r2, r3
 801447a:	d903      	bls.n	8014484 <xTaskPriorityDisinherit+0xac>
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014480:	4a0c      	ldr	r2, [pc, #48]	; (80144b4 <xTaskPriorityDisinherit+0xdc>)
 8014482:	6013      	str	r3, [r2, #0]
 8014484:	693b      	ldr	r3, [r7, #16]
 8014486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014488:	4613      	mov	r3, r2
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	4413      	add	r3, r2
 801448e:	009b      	lsls	r3, r3, #2
 8014490:	4a09      	ldr	r2, [pc, #36]	; (80144b8 <xTaskPriorityDisinherit+0xe0>)
 8014492:	441a      	add	r2, r3
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	3304      	adds	r3, #4
 8014498:	4619      	mov	r1, r3
 801449a:	4610      	mov	r0, r2
 801449c:	f7fd fdc5 	bl	801202a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80144a0:	2301      	movs	r3, #1
 80144a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80144a4:	697b      	ldr	r3, [r7, #20]
	}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3718      	adds	r7, #24
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
 80144ae:	bf00      	nop
 80144b0:	200560c0 	.word	0x200560c0
 80144b4:	2005659c 	.word	0x2005659c
 80144b8:	200560c4 	.word	0x200560c4

080144bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b088      	sub	sp, #32
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
 80144c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80144ca:	2301      	movs	r3, #1
 80144cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d06e      	beq.n	80145b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80144d4:	69bb      	ldr	r3, [r7, #24]
 80144d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d10c      	bne.n	80144f6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80144dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80144e0:	b672      	cpsid	i
 80144e2:	f383 8811 	msr	BASEPRI, r3
 80144e6:	f3bf 8f6f 	isb	sy
 80144ea:	f3bf 8f4f 	dsb	sy
 80144ee:	b662      	cpsie	i
 80144f0:	60fb      	str	r3, [r7, #12]
}
 80144f2:	bf00      	nop
 80144f4:	e7fe      	b.n	80144f4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144fa:	683a      	ldr	r2, [r7, #0]
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d902      	bls.n	8014506 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014500:	683b      	ldr	r3, [r7, #0]
 8014502:	61fb      	str	r3, [r7, #28]
 8014504:	e002      	b.n	801450c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014506:	69bb      	ldr	r3, [r7, #24]
 8014508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801450a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801450c:	69bb      	ldr	r3, [r7, #24]
 801450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014510:	69fa      	ldr	r2, [r7, #28]
 8014512:	429a      	cmp	r2, r3
 8014514:	d04d      	beq.n	80145b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014516:	69bb      	ldr	r3, [r7, #24]
 8014518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801451a:	697a      	ldr	r2, [r7, #20]
 801451c:	429a      	cmp	r2, r3
 801451e:	d148      	bne.n	80145b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014520:	4b26      	ldr	r3, [pc, #152]	; (80145bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	69ba      	ldr	r2, [r7, #24]
 8014526:	429a      	cmp	r2, r3
 8014528:	d10c      	bne.n	8014544 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 801452a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801452e:	b672      	cpsid	i
 8014530:	f383 8811 	msr	BASEPRI, r3
 8014534:	f3bf 8f6f 	isb	sy
 8014538:	f3bf 8f4f 	dsb	sy
 801453c:	b662      	cpsie	i
 801453e:	60bb      	str	r3, [r7, #8]
}
 8014540:	bf00      	nop
 8014542:	e7fe      	b.n	8014542 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014544:	69bb      	ldr	r3, [r7, #24]
 8014546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014548:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801454a:	69bb      	ldr	r3, [r7, #24]
 801454c:	69fa      	ldr	r2, [r7, #28]
 801454e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014550:	69bb      	ldr	r3, [r7, #24]
 8014552:	699b      	ldr	r3, [r3, #24]
 8014554:	2b00      	cmp	r3, #0
 8014556:	db04      	blt.n	8014562 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014558:	69fb      	ldr	r3, [r7, #28]
 801455a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801455e:	69bb      	ldr	r3, [r7, #24]
 8014560:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014562:	69bb      	ldr	r3, [r7, #24]
 8014564:	6959      	ldr	r1, [r3, #20]
 8014566:	693a      	ldr	r2, [r7, #16]
 8014568:	4613      	mov	r3, r2
 801456a:	009b      	lsls	r3, r3, #2
 801456c:	4413      	add	r3, r2
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	4a13      	ldr	r2, [pc, #76]	; (80145c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014572:	4413      	add	r3, r2
 8014574:	4299      	cmp	r1, r3
 8014576:	d11c      	bne.n	80145b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014578:	69bb      	ldr	r3, [r7, #24]
 801457a:	3304      	adds	r3, #4
 801457c:	4618      	mov	r0, r3
 801457e:	f7fd fdb1 	bl	80120e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014586:	4b0f      	ldr	r3, [pc, #60]	; (80145c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	429a      	cmp	r2, r3
 801458c:	d903      	bls.n	8014596 <vTaskPriorityDisinheritAfterTimeout+0xda>
 801458e:	69bb      	ldr	r3, [r7, #24]
 8014590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014592:	4a0c      	ldr	r2, [pc, #48]	; (80145c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8014594:	6013      	str	r3, [r2, #0]
 8014596:	69bb      	ldr	r3, [r7, #24]
 8014598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801459a:	4613      	mov	r3, r2
 801459c:	009b      	lsls	r3, r3, #2
 801459e:	4413      	add	r3, r2
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	4a07      	ldr	r2, [pc, #28]	; (80145c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80145a4:	441a      	add	r2, r3
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	3304      	adds	r3, #4
 80145aa:	4619      	mov	r1, r3
 80145ac:	4610      	mov	r0, r2
 80145ae:	f7fd fd3c 	bl	801202a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80145b2:	bf00      	nop
 80145b4:	3720      	adds	r7, #32
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}
 80145ba:	bf00      	nop
 80145bc:	200560c0 	.word	0x200560c0
 80145c0:	200560c4 	.word	0x200560c4
 80145c4:	2005659c 	.word	0x2005659c

080145c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80145c8:	b480      	push	{r7}
 80145ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80145cc:	4b07      	ldr	r3, [pc, #28]	; (80145ec <pvTaskIncrementMutexHeldCount+0x24>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d004      	beq.n	80145de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80145d4:	4b05      	ldr	r3, [pc, #20]	; (80145ec <pvTaskIncrementMutexHeldCount+0x24>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80145da:	3201      	adds	r2, #1
 80145dc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80145de:	4b03      	ldr	r3, [pc, #12]	; (80145ec <pvTaskIncrementMutexHeldCount+0x24>)
 80145e0:	681b      	ldr	r3, [r3, #0]
	}
 80145e2:	4618      	mov	r0, r3
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr
 80145ec:	200560c0 	.word	0x200560c0

080145f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b084      	sub	sp, #16
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80145fa:	4b21      	ldr	r3, [pc, #132]	; (8014680 <prvAddCurrentTaskToDelayedList+0x90>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014600:	4b20      	ldr	r3, [pc, #128]	; (8014684 <prvAddCurrentTaskToDelayedList+0x94>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	3304      	adds	r3, #4
 8014606:	4618      	mov	r0, r3
 8014608:	f7fd fd6c 	bl	80120e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014612:	d10a      	bne.n	801462a <prvAddCurrentTaskToDelayedList+0x3a>
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d007      	beq.n	801462a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801461a:	4b1a      	ldr	r3, [pc, #104]	; (8014684 <prvAddCurrentTaskToDelayedList+0x94>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	3304      	adds	r3, #4
 8014620:	4619      	mov	r1, r3
 8014622:	4819      	ldr	r0, [pc, #100]	; (8014688 <prvAddCurrentTaskToDelayedList+0x98>)
 8014624:	f7fd fd01 	bl	801202a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014628:	e026      	b.n	8014678 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801462a:	68fa      	ldr	r2, [r7, #12]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	4413      	add	r3, r2
 8014630:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014632:	4b14      	ldr	r3, [pc, #80]	; (8014684 <prvAddCurrentTaskToDelayedList+0x94>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	68ba      	ldr	r2, [r7, #8]
 8014638:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801463a:	68ba      	ldr	r2, [r7, #8]
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	429a      	cmp	r2, r3
 8014640:	d209      	bcs.n	8014656 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014642:	4b12      	ldr	r3, [pc, #72]	; (801468c <prvAddCurrentTaskToDelayedList+0x9c>)
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	4b0f      	ldr	r3, [pc, #60]	; (8014684 <prvAddCurrentTaskToDelayedList+0x94>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	3304      	adds	r3, #4
 801464c:	4619      	mov	r1, r3
 801464e:	4610      	mov	r0, r2
 8014650:	f7fd fd0f 	bl	8012072 <vListInsert>
}
 8014654:	e010      	b.n	8014678 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014656:	4b0e      	ldr	r3, [pc, #56]	; (8014690 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	4b0a      	ldr	r3, [pc, #40]	; (8014684 <prvAddCurrentTaskToDelayedList+0x94>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	3304      	adds	r3, #4
 8014660:	4619      	mov	r1, r3
 8014662:	4610      	mov	r0, r2
 8014664:	f7fd fd05 	bl	8012072 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014668:	4b0a      	ldr	r3, [pc, #40]	; (8014694 <prvAddCurrentTaskToDelayedList+0xa4>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	68ba      	ldr	r2, [r7, #8]
 801466e:	429a      	cmp	r2, r3
 8014670:	d202      	bcs.n	8014678 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014672:	4a08      	ldr	r2, [pc, #32]	; (8014694 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	6013      	str	r3, [r2, #0]
}
 8014678:	bf00      	nop
 801467a:	3710      	adds	r7, #16
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}
 8014680:	20056598 	.word	0x20056598
 8014684:	200560c0 	.word	0x200560c0
 8014688:	20056580 	.word	0x20056580
 801468c:	20056550 	.word	0x20056550
 8014690:	2005654c 	.word	0x2005654c
 8014694:	200565b4 	.word	0x200565b4

08014698 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b08a      	sub	sp, #40	; 0x28
 801469c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801469e:	2300      	movs	r3, #0
 80146a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80146a2:	f000 fb15 	bl	8014cd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80146a6:	4b1d      	ldr	r3, [pc, #116]	; (801471c <xTimerCreateTimerTask+0x84>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d021      	beq.n	80146f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80146ae:	2300      	movs	r3, #0
 80146b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80146b2:	2300      	movs	r3, #0
 80146b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80146b6:	1d3a      	adds	r2, r7, #4
 80146b8:	f107 0108 	add.w	r1, r7, #8
 80146bc:	f107 030c 	add.w	r3, r7, #12
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7fd fa87 	bl	8011bd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80146c6:	6879      	ldr	r1, [r7, #4]
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	68fa      	ldr	r2, [r7, #12]
 80146cc:	9202      	str	r2, [sp, #8]
 80146ce:	9301      	str	r3, [sp, #4]
 80146d0:	2302      	movs	r3, #2
 80146d2:	9300      	str	r3, [sp, #0]
 80146d4:	2300      	movs	r3, #0
 80146d6:	460a      	mov	r2, r1
 80146d8:	4911      	ldr	r1, [pc, #68]	; (8014720 <xTimerCreateTimerTask+0x88>)
 80146da:	4812      	ldr	r0, [pc, #72]	; (8014724 <xTimerCreateTimerTask+0x8c>)
 80146dc:	f7fe ffb8 	bl	8013650 <xTaskCreateStatic>
 80146e0:	4603      	mov	r3, r0
 80146e2:	4a11      	ldr	r2, [pc, #68]	; (8014728 <xTimerCreateTimerTask+0x90>)
 80146e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80146e6:	4b10      	ldr	r3, [pc, #64]	; (8014728 <xTimerCreateTimerTask+0x90>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d001      	beq.n	80146f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80146ee:	2301      	movs	r3, #1
 80146f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d10c      	bne.n	8014712 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80146f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80146fc:	b672      	cpsid	i
 80146fe:	f383 8811 	msr	BASEPRI, r3
 8014702:	f3bf 8f6f 	isb	sy
 8014706:	f3bf 8f4f 	dsb	sy
 801470a:	b662      	cpsie	i
 801470c:	613b      	str	r3, [r7, #16]
}
 801470e:	bf00      	nop
 8014710:	e7fe      	b.n	8014710 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8014712:	697b      	ldr	r3, [r7, #20]
}
 8014714:	4618      	mov	r0, r3
 8014716:	3718      	adds	r7, #24
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}
 801471c:	200565f0 	.word	0x200565f0
 8014720:	0802b2c4 	.word	0x0802b2c4
 8014724:	08014869 	.word	0x08014869
 8014728:	200565f4 	.word	0x200565f4

0801472c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b08a      	sub	sp, #40	; 0x28
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	607a      	str	r2, [r7, #4]
 8014738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801473a:	2300      	movs	r3, #0
 801473c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d10c      	bne.n	801475e <xTimerGenericCommand+0x32>
	__asm volatile
 8014744:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014748:	b672      	cpsid	i
 801474a:	f383 8811 	msr	BASEPRI, r3
 801474e:	f3bf 8f6f 	isb	sy
 8014752:	f3bf 8f4f 	dsb	sy
 8014756:	b662      	cpsie	i
 8014758:	623b      	str	r3, [r7, #32]
}
 801475a:	bf00      	nop
 801475c:	e7fe      	b.n	801475c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801475e:	4b1a      	ldr	r3, [pc, #104]	; (80147c8 <xTimerGenericCommand+0x9c>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d02a      	beq.n	80147bc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	2b05      	cmp	r3, #5
 8014776:	dc18      	bgt.n	80147aa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014778:	f7ff fda8 	bl	80142cc <xTaskGetSchedulerState>
 801477c:	4603      	mov	r3, r0
 801477e:	2b02      	cmp	r3, #2
 8014780:	d109      	bne.n	8014796 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014782:	4b11      	ldr	r3, [pc, #68]	; (80147c8 <xTimerGenericCommand+0x9c>)
 8014784:	6818      	ldr	r0, [r3, #0]
 8014786:	f107 0110 	add.w	r1, r7, #16
 801478a:	2300      	movs	r3, #0
 801478c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801478e:	f7fe f8cd 	bl	801292c <xQueueGenericSend>
 8014792:	6278      	str	r0, [r7, #36]	; 0x24
 8014794:	e012      	b.n	80147bc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014796:	4b0c      	ldr	r3, [pc, #48]	; (80147c8 <xTimerGenericCommand+0x9c>)
 8014798:	6818      	ldr	r0, [r3, #0]
 801479a:	f107 0110 	add.w	r1, r7, #16
 801479e:	2300      	movs	r3, #0
 80147a0:	2200      	movs	r2, #0
 80147a2:	f7fe f8c3 	bl	801292c <xQueueGenericSend>
 80147a6:	6278      	str	r0, [r7, #36]	; 0x24
 80147a8:	e008      	b.n	80147bc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80147aa:	4b07      	ldr	r3, [pc, #28]	; (80147c8 <xTimerGenericCommand+0x9c>)
 80147ac:	6818      	ldr	r0, [r3, #0]
 80147ae:	f107 0110 	add.w	r1, r7, #16
 80147b2:	2300      	movs	r3, #0
 80147b4:	683a      	ldr	r2, [r7, #0]
 80147b6:	f7fe f9bf 	bl	8012b38 <xQueueGenericSendFromISR>
 80147ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80147bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3728      	adds	r7, #40	; 0x28
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	200565f0 	.word	0x200565f0

080147cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b088      	sub	sp, #32
 80147d0:	af02      	add	r7, sp, #8
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147d6:	4b23      	ldr	r3, [pc, #140]	; (8014864 <prvProcessExpiredTimer+0x98>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	68db      	ldr	r3, [r3, #12]
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	3304      	adds	r3, #4
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7fd fc7d 	bl	80120e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147f0:	f003 0304 	and.w	r3, r3, #4
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d024      	beq.n	8014842 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	699a      	ldr	r2, [r3, #24]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	18d1      	adds	r1, r2, r3
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	683a      	ldr	r2, [r7, #0]
 8014804:	6978      	ldr	r0, [r7, #20]
 8014806:	f000 f8d3 	bl	80149b0 <prvInsertTimerInActiveList>
 801480a:	4603      	mov	r3, r0
 801480c:	2b00      	cmp	r3, #0
 801480e:	d021      	beq.n	8014854 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014810:	2300      	movs	r3, #0
 8014812:	9300      	str	r3, [sp, #0]
 8014814:	2300      	movs	r3, #0
 8014816:	687a      	ldr	r2, [r7, #4]
 8014818:	2100      	movs	r1, #0
 801481a:	6978      	ldr	r0, [r7, #20]
 801481c:	f7ff ff86 	bl	801472c <xTimerGenericCommand>
 8014820:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d115      	bne.n	8014854 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8014828:	f04f 0330 	mov.w	r3, #48	; 0x30
 801482c:	b672      	cpsid	i
 801482e:	f383 8811 	msr	BASEPRI, r3
 8014832:	f3bf 8f6f 	isb	sy
 8014836:	f3bf 8f4f 	dsb	sy
 801483a:	b662      	cpsie	i
 801483c:	60fb      	str	r3, [r7, #12]
}
 801483e:	bf00      	nop
 8014840:	e7fe      	b.n	8014840 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014842:	697b      	ldr	r3, [r7, #20]
 8014844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014848:	f023 0301 	bic.w	r3, r3, #1
 801484c:	b2da      	uxtb	r2, r3
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014854:	697b      	ldr	r3, [r7, #20]
 8014856:	6a1b      	ldr	r3, [r3, #32]
 8014858:	6978      	ldr	r0, [r7, #20]
 801485a:	4798      	blx	r3
}
 801485c:	bf00      	nop
 801485e:	3718      	adds	r7, #24
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}
 8014864:	200565e8 	.word	0x200565e8

08014868 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b084      	sub	sp, #16
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014870:	f107 0308 	add.w	r3, r7, #8
 8014874:	4618      	mov	r0, r3
 8014876:	f000 f857 	bl	8014928 <prvGetNextExpireTime>
 801487a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	4619      	mov	r1, r3
 8014880:	68f8      	ldr	r0, [r7, #12]
 8014882:	f000 f803 	bl	801488c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014886:	f000 f8d5 	bl	8014a34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801488a:	e7f1      	b.n	8014870 <prvTimerTask+0x8>

0801488c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014896:	f7ff f925 	bl	8013ae4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801489a:	f107 0308 	add.w	r3, r7, #8
 801489e:	4618      	mov	r0, r3
 80148a0:	f000 f866 	bl	8014970 <prvSampleTimeNow>
 80148a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d130      	bne.n	801490e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d10a      	bne.n	80148c8 <prvProcessTimerOrBlockTask+0x3c>
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d806      	bhi.n	80148c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80148ba:	f7ff f921 	bl	8013b00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80148be:	68f9      	ldr	r1, [r7, #12]
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7ff ff83 	bl	80147cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80148c6:	e024      	b.n	8014912 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d008      	beq.n	80148e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80148ce:	4b13      	ldr	r3, [pc, #76]	; (801491c <prvProcessTimerOrBlockTask+0x90>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d101      	bne.n	80148dc <prvProcessTimerOrBlockTask+0x50>
 80148d8:	2301      	movs	r3, #1
 80148da:	e000      	b.n	80148de <prvProcessTimerOrBlockTask+0x52>
 80148dc:	2300      	movs	r3, #0
 80148de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80148e0:	4b0f      	ldr	r3, [pc, #60]	; (8014920 <prvProcessTimerOrBlockTask+0x94>)
 80148e2:	6818      	ldr	r0, [r3, #0]
 80148e4:	687a      	ldr	r2, [r7, #4]
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	1ad3      	subs	r3, r2, r3
 80148ea:	683a      	ldr	r2, [r7, #0]
 80148ec:	4619      	mov	r1, r3
 80148ee:	f7fe fe7b 	bl	80135e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80148f2:	f7ff f905 	bl	8013b00 <xTaskResumeAll>
 80148f6:	4603      	mov	r3, r0
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d10a      	bne.n	8014912 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80148fc:	4b09      	ldr	r3, [pc, #36]	; (8014924 <prvProcessTimerOrBlockTask+0x98>)
 80148fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014902:	601a      	str	r2, [r3, #0]
 8014904:	f3bf 8f4f 	dsb	sy
 8014908:	f3bf 8f6f 	isb	sy
}
 801490c:	e001      	b.n	8014912 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801490e:	f7ff f8f7 	bl	8013b00 <xTaskResumeAll>
}
 8014912:	bf00      	nop
 8014914:	3710      	adds	r7, #16
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	200565ec 	.word	0x200565ec
 8014920:	200565f0 	.word	0x200565f0
 8014924:	e000ed04 	.word	0xe000ed04

08014928 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014928:	b480      	push	{r7}
 801492a:	b085      	sub	sp, #20
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014930:	4b0e      	ldr	r3, [pc, #56]	; (801496c <prvGetNextExpireTime+0x44>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d101      	bne.n	801493e <prvGetNextExpireTime+0x16>
 801493a:	2201      	movs	r2, #1
 801493c:	e000      	b.n	8014940 <prvGetNextExpireTime+0x18>
 801493e:	2200      	movs	r2, #0
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d105      	bne.n	8014958 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801494c:	4b07      	ldr	r3, [pc, #28]	; (801496c <prvGetNextExpireTime+0x44>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	60fb      	str	r3, [r7, #12]
 8014956:	e001      	b.n	801495c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014958:	2300      	movs	r3, #0
 801495a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801495c:	68fb      	ldr	r3, [r7, #12]
}
 801495e:	4618      	mov	r0, r3
 8014960:	3714      	adds	r7, #20
 8014962:	46bd      	mov	sp, r7
 8014964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014968:	4770      	bx	lr
 801496a:	bf00      	nop
 801496c:	200565e8 	.word	0x200565e8

08014970 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b084      	sub	sp, #16
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014978:	f7ff f962 	bl	8013c40 <xTaskGetTickCount>
 801497c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801497e:	4b0b      	ldr	r3, [pc, #44]	; (80149ac <prvSampleTimeNow+0x3c>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	429a      	cmp	r2, r3
 8014986:	d205      	bcs.n	8014994 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014988:	f000 f93c 	bl	8014c04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2201      	movs	r2, #1
 8014990:	601a      	str	r2, [r3, #0]
 8014992:	e002      	b.n	801499a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2200      	movs	r2, #0
 8014998:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801499a:	4a04      	ldr	r2, [pc, #16]	; (80149ac <prvSampleTimeNow+0x3c>)
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80149a0:	68fb      	ldr	r3, [r7, #12]
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3710      	adds	r7, #16
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}
 80149aa:	bf00      	nop
 80149ac:	200565f8 	.word	0x200565f8

080149b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
 80149bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80149be:	2300      	movs	r3, #0
 80149c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	68fa      	ldr	r2, [r7, #12]
 80149cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80149ce:	68ba      	ldr	r2, [r7, #8]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d812      	bhi.n	80149fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	1ad2      	subs	r2, r2, r3
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	699b      	ldr	r3, [r3, #24]
 80149e0:	429a      	cmp	r2, r3
 80149e2:	d302      	bcc.n	80149ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80149e4:	2301      	movs	r3, #1
 80149e6:	617b      	str	r3, [r7, #20]
 80149e8:	e01b      	b.n	8014a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80149ea:	4b10      	ldr	r3, [pc, #64]	; (8014a2c <prvInsertTimerInActiveList+0x7c>)
 80149ec:	681a      	ldr	r2, [r3, #0]
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	3304      	adds	r3, #4
 80149f2:	4619      	mov	r1, r3
 80149f4:	4610      	mov	r0, r2
 80149f6:	f7fd fb3c 	bl	8012072 <vListInsert>
 80149fa:	e012      	b.n	8014a22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80149fc:	687a      	ldr	r2, [r7, #4]
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d206      	bcs.n	8014a12 <prvInsertTimerInActiveList+0x62>
 8014a04:	68ba      	ldr	r2, [r7, #8]
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d302      	bcc.n	8014a12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	617b      	str	r3, [r7, #20]
 8014a10:	e007      	b.n	8014a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014a12:	4b07      	ldr	r3, [pc, #28]	; (8014a30 <prvInsertTimerInActiveList+0x80>)
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	3304      	adds	r3, #4
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	4610      	mov	r0, r2
 8014a1e:	f7fd fb28 	bl	8012072 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014a22:	697b      	ldr	r3, [r7, #20]
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3718      	adds	r7, #24
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	200565ec 	.word	0x200565ec
 8014a30:	200565e8 	.word	0x200565e8

08014a34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b08e      	sub	sp, #56	; 0x38
 8014a38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014a3a:	e0d0      	b.n	8014bde <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	da1a      	bge.n	8014a78 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014a42:	1d3b      	adds	r3, r7, #4
 8014a44:	3304      	adds	r3, #4
 8014a46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d10c      	bne.n	8014a68 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8014a4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a52:	b672      	cpsid	i
 8014a54:	f383 8811 	msr	BASEPRI, r3
 8014a58:	f3bf 8f6f 	isb	sy
 8014a5c:	f3bf 8f4f 	dsb	sy
 8014a60:	b662      	cpsie	i
 8014a62:	61fb      	str	r3, [r7, #28]
}
 8014a64:	bf00      	nop
 8014a66:	e7fe      	b.n	8014a66 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a6e:	6850      	ldr	r0, [r2, #4]
 8014a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a72:	6892      	ldr	r2, [r2, #8]
 8014a74:	4611      	mov	r1, r2
 8014a76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	f2c0 80ae 	blt.w	8014bdc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a86:	695b      	ldr	r3, [r3, #20]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d004      	beq.n	8014a96 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8e:	3304      	adds	r3, #4
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7fd fb27 	bl	80120e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014a96:	463b      	mov	r3, r7
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7ff ff69 	bl	8014970 <prvSampleTimeNow>
 8014a9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2b09      	cmp	r3, #9
 8014aa4:	f200 809b 	bhi.w	8014bde <prvProcessReceivedCommands+0x1aa>
 8014aa8:	a201      	add	r2, pc, #4	; (adr r2, 8014ab0 <prvProcessReceivedCommands+0x7c>)
 8014aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aae:	bf00      	nop
 8014ab0:	08014ad9 	.word	0x08014ad9
 8014ab4:	08014ad9 	.word	0x08014ad9
 8014ab8:	08014ad9 	.word	0x08014ad9
 8014abc:	08014b51 	.word	0x08014b51
 8014ac0:	08014b65 	.word	0x08014b65
 8014ac4:	08014bb3 	.word	0x08014bb3
 8014ac8:	08014ad9 	.word	0x08014ad9
 8014acc:	08014ad9 	.word	0x08014ad9
 8014ad0:	08014b51 	.word	0x08014b51
 8014ad4:	08014b65 	.word	0x08014b65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ade:	f043 0301 	orr.w	r3, r3, #1
 8014ae2:	b2da      	uxtb	r2, r3
 8014ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014aea:	68ba      	ldr	r2, [r7, #8]
 8014aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aee:	699b      	ldr	r3, [r3, #24]
 8014af0:	18d1      	adds	r1, r2, r3
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014af8:	f7ff ff5a 	bl	80149b0 <prvInsertTimerInActiveList>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d06d      	beq.n	8014bde <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b04:	6a1b      	ldr	r3, [r3, #32]
 8014b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b10:	f003 0304 	and.w	r3, r3, #4
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d062      	beq.n	8014bde <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014b18:	68ba      	ldr	r2, [r7, #8]
 8014b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b1c:	699b      	ldr	r3, [r3, #24]
 8014b1e:	441a      	add	r2, r3
 8014b20:	2300      	movs	r3, #0
 8014b22:	9300      	str	r3, [sp, #0]
 8014b24:	2300      	movs	r3, #0
 8014b26:	2100      	movs	r1, #0
 8014b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b2a:	f7ff fdff 	bl	801472c <xTimerGenericCommand>
 8014b2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014b30:	6a3b      	ldr	r3, [r7, #32]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d153      	bne.n	8014bde <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8014b36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b3a:	b672      	cpsid	i
 8014b3c:	f383 8811 	msr	BASEPRI, r3
 8014b40:	f3bf 8f6f 	isb	sy
 8014b44:	f3bf 8f4f 	dsb	sy
 8014b48:	b662      	cpsie	i
 8014b4a:	61bb      	str	r3, [r7, #24]
}
 8014b4c:	bf00      	nop
 8014b4e:	e7fe      	b.n	8014b4e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b56:	f023 0301 	bic.w	r3, r3, #1
 8014b5a:	b2da      	uxtb	r2, r3
 8014b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014b62:	e03c      	b.n	8014bde <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b6a:	f043 0301 	orr.w	r3, r3, #1
 8014b6e:	b2da      	uxtb	r2, r3
 8014b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014b76:	68ba      	ldr	r2, [r7, #8]
 8014b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b7e:	699b      	ldr	r3, [r3, #24]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d10c      	bne.n	8014b9e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8014b84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b88:	b672      	cpsid	i
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	b662      	cpsie	i
 8014b98:	617b      	str	r3, [r7, #20]
}
 8014b9a:	bf00      	nop
 8014b9c:	e7fe      	b.n	8014b9c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba0:	699a      	ldr	r2, [r3, #24]
 8014ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba4:	18d1      	adds	r1, r2, r3
 8014ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bac:	f7ff ff00 	bl	80149b0 <prvInsertTimerInActiveList>
					break;
 8014bb0:	e015      	b.n	8014bde <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bb8:	f003 0302 	and.w	r3, r3, #2
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d103      	bne.n	8014bc8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8014bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bc2:	f7fd f8eb 	bl	8011d9c <vPortFree>
 8014bc6:	e00a      	b.n	8014bde <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bce:	f023 0301 	bic.w	r3, r3, #1
 8014bd2:	b2da      	uxtb	r2, r3
 8014bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014bda:	e000      	b.n	8014bde <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014bdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014bde:	4b08      	ldr	r3, [pc, #32]	; (8014c00 <prvProcessReceivedCommands+0x1cc>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	1d39      	adds	r1, r7, #4
 8014be4:	2200      	movs	r2, #0
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fe f8dc 	bl	8012da4 <xQueueReceive>
 8014bec:	4603      	mov	r3, r0
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	f47f af24 	bne.w	8014a3c <prvProcessReceivedCommands+0x8>
	}
}
 8014bf4:	bf00      	nop
 8014bf6:	bf00      	nop
 8014bf8:	3730      	adds	r7, #48	; 0x30
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}
 8014bfe:	bf00      	nop
 8014c00:	200565f0 	.word	0x200565f0

08014c04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b088      	sub	sp, #32
 8014c08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014c0a:	e04a      	b.n	8014ca2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014c0c:	4b2e      	ldr	r3, [pc, #184]	; (8014cc8 <prvSwitchTimerLists+0xc4>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c16:	4b2c      	ldr	r3, [pc, #176]	; (8014cc8 <prvSwitchTimerLists+0xc4>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	68db      	ldr	r3, [r3, #12]
 8014c1c:	68db      	ldr	r3, [r3, #12]
 8014c1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	3304      	adds	r3, #4
 8014c24:	4618      	mov	r0, r3
 8014c26:	f7fd fa5d 	bl	80120e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	6a1b      	ldr	r3, [r3, #32]
 8014c2e:	68f8      	ldr	r0, [r7, #12]
 8014c30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c38:	f003 0304 	and.w	r3, r3, #4
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d030      	beq.n	8014ca2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	699b      	ldr	r3, [r3, #24]
 8014c44:	693a      	ldr	r2, [r7, #16]
 8014c46:	4413      	add	r3, r2
 8014c48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014c4a:	68ba      	ldr	r2, [r7, #8]
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d90e      	bls.n	8014c70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	68ba      	ldr	r2, [r7, #8]
 8014c56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	68fa      	ldr	r2, [r7, #12]
 8014c5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014c5e:	4b1a      	ldr	r3, [pc, #104]	; (8014cc8 <prvSwitchTimerLists+0xc4>)
 8014c60:	681a      	ldr	r2, [r3, #0]
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	3304      	adds	r3, #4
 8014c66:	4619      	mov	r1, r3
 8014c68:	4610      	mov	r0, r2
 8014c6a:	f7fd fa02 	bl	8012072 <vListInsert>
 8014c6e:	e018      	b.n	8014ca2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014c70:	2300      	movs	r3, #0
 8014c72:	9300      	str	r3, [sp, #0]
 8014c74:	2300      	movs	r3, #0
 8014c76:	693a      	ldr	r2, [r7, #16]
 8014c78:	2100      	movs	r1, #0
 8014c7a:	68f8      	ldr	r0, [r7, #12]
 8014c7c:	f7ff fd56 	bl	801472c <xTimerGenericCommand>
 8014c80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d10c      	bne.n	8014ca2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8014c88:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014c8c:	b672      	cpsid	i
 8014c8e:	f383 8811 	msr	BASEPRI, r3
 8014c92:	f3bf 8f6f 	isb	sy
 8014c96:	f3bf 8f4f 	dsb	sy
 8014c9a:	b662      	cpsie	i
 8014c9c:	603b      	str	r3, [r7, #0]
}
 8014c9e:	bf00      	nop
 8014ca0:	e7fe      	b.n	8014ca0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014ca2:	4b09      	ldr	r3, [pc, #36]	; (8014cc8 <prvSwitchTimerLists+0xc4>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d1af      	bne.n	8014c0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014cac:	4b06      	ldr	r3, [pc, #24]	; (8014cc8 <prvSwitchTimerLists+0xc4>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014cb2:	4b06      	ldr	r3, [pc, #24]	; (8014ccc <prvSwitchTimerLists+0xc8>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	4a04      	ldr	r2, [pc, #16]	; (8014cc8 <prvSwitchTimerLists+0xc4>)
 8014cb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014cba:	4a04      	ldr	r2, [pc, #16]	; (8014ccc <prvSwitchTimerLists+0xc8>)
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	6013      	str	r3, [r2, #0]
}
 8014cc0:	bf00      	nop
 8014cc2:	3718      	adds	r7, #24
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	200565e8 	.word	0x200565e8
 8014ccc:	200565ec 	.word	0x200565ec

08014cd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014cd6:	f7fd fb39 	bl	801234c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014cda:	4b15      	ldr	r3, [pc, #84]	; (8014d30 <prvCheckForValidListAndQueue+0x60>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d120      	bne.n	8014d24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014ce2:	4814      	ldr	r0, [pc, #80]	; (8014d34 <prvCheckForValidListAndQueue+0x64>)
 8014ce4:	f7fd f974 	bl	8011fd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014ce8:	4813      	ldr	r0, [pc, #76]	; (8014d38 <prvCheckForValidListAndQueue+0x68>)
 8014cea:	f7fd f971 	bl	8011fd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014cee:	4b13      	ldr	r3, [pc, #76]	; (8014d3c <prvCheckForValidListAndQueue+0x6c>)
 8014cf0:	4a10      	ldr	r2, [pc, #64]	; (8014d34 <prvCheckForValidListAndQueue+0x64>)
 8014cf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014cf4:	4b12      	ldr	r3, [pc, #72]	; (8014d40 <prvCheckForValidListAndQueue+0x70>)
 8014cf6:	4a10      	ldr	r2, [pc, #64]	; (8014d38 <prvCheckForValidListAndQueue+0x68>)
 8014cf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	9300      	str	r3, [sp, #0]
 8014cfe:	4b11      	ldr	r3, [pc, #68]	; (8014d44 <prvCheckForValidListAndQueue+0x74>)
 8014d00:	4a11      	ldr	r2, [pc, #68]	; (8014d48 <prvCheckForValidListAndQueue+0x78>)
 8014d02:	2110      	movs	r1, #16
 8014d04:	200a      	movs	r0, #10
 8014d06:	f7fd fcb7 	bl	8012678 <xQueueGenericCreateStatic>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	4a08      	ldr	r2, [pc, #32]	; (8014d30 <prvCheckForValidListAndQueue+0x60>)
 8014d0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014d10:	4b07      	ldr	r3, [pc, #28]	; (8014d30 <prvCheckForValidListAndQueue+0x60>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d005      	beq.n	8014d24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014d18:	4b05      	ldr	r3, [pc, #20]	; (8014d30 <prvCheckForValidListAndQueue+0x60>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	490b      	ldr	r1, [pc, #44]	; (8014d4c <prvCheckForValidListAndQueue+0x7c>)
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7fe fc0e 	bl	8013540 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014d24:	f7fd fb46 	bl	80123b4 <vPortExitCritical>
}
 8014d28:	bf00      	nop
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	200565f0 	.word	0x200565f0
 8014d34:	200565c0 	.word	0x200565c0
 8014d38:	200565d4 	.word	0x200565d4
 8014d3c:	200565e8 	.word	0x200565e8
 8014d40:	200565ec 	.word	0x200565ec
 8014d44:	2005669c 	.word	0x2005669c
 8014d48:	200565fc 	.word	0x200565fc
 8014d4c:	0802b2cc 	.word	0x0802b2cc

08014d50 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014d50:	8880      	ldrh	r0, [r0, #4]
 8014d52:	4770      	bx	lr

08014d54 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014d54:	2300      	movs	r3, #0
 8014d56:	8083      	strh	r3, [r0, #4]
 8014d58:	4770      	bx	lr
	...

08014d5c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d5e:	6803      	ldr	r3, [r0, #0]
 8014d60:	460e      	mov	r6, r1
 8014d62:	2100      	movs	r1, #0
 8014d64:	4605      	mov	r5, r0
 8014d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d68:	4798      	blx	r3
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	682b      	ldr	r3, [r5, #0]
 8014d6e:	4628      	mov	r0, r5
 8014d70:	1b34      	subs	r4, r6, r4
 8014d72:	6a1b      	ldr	r3, [r3, #32]
 8014d74:	b2a4      	uxth	r4, r4
 8014d76:	4798      	blx	r3
 8014d78:	88ab      	ldrh	r3, [r5, #4]
 8014d7a:	fbb4 f4f0 	udiv	r4, r4, r0
 8014d7e:	42a3      	cmp	r3, r4
 8014d80:	d805      	bhi.n	8014d8e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8014d82:	4b0e      	ldr	r3, [pc, #56]	; (8014dbc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014d84:	211e      	movs	r1, #30
 8014d86:	4a0e      	ldr	r2, [pc, #56]	; (8014dc0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014d88:	480e      	ldr	r0, [pc, #56]	; (8014dc4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8014d8a:	f011 f899 	bl	8025ec0 <__assert_func>
 8014d8e:	682b      	ldr	r3, [r5, #0]
 8014d90:	2100      	movs	r1, #0
 8014d92:	4628      	mov	r0, r5
 8014d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d96:	4798      	blx	r3
 8014d98:	682b      	ldr	r3, [r5, #0]
 8014d9a:	4607      	mov	r7, r0
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	6a1b      	ldr	r3, [r3, #32]
 8014da0:	4798      	blx	r3
 8014da2:	1bf3      	subs	r3, r6, r7
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	fbb3 f2f0 	udiv	r2, r3, r0
 8014daa:	fb02 3010 	mls	r0, r2, r0, r3
 8014dae:	b118      	cbz	r0, 8014db8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8014db0:	4b05      	ldr	r3, [pc, #20]	; (8014dc8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8014db2:	211f      	movs	r1, #31
 8014db4:	4a02      	ldr	r2, [pc, #8]	; (8014dc0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014db6:	e7e7      	b.n	8014d88 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014db8:	4620      	mov	r0, r4
 8014dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dbc:	0802bd14 	.word	0x0802bd14
 8014dc0:	0802be82 	.word	0x0802be82
 8014dc4:	0802bd29 	.word	0x0802bd29
 8014dc8:	0802bd57 	.word	0x0802bd57

08014dcc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014dcc:	b538      	push	{r3, r4, r5, lr}
 8014dce:	6803      	ldr	r3, [r0, #0]
 8014dd0:	460d      	mov	r5, r1
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	6a1b      	ldr	r3, [r3, #32]
 8014dd6:	4798      	blx	r3
 8014dd8:	4285      	cmp	r5, r0
 8014dda:	d905      	bls.n	8014de8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014ddc:	4b0c      	ldr	r3, [pc, #48]	; (8014e10 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8014dde:	2130      	movs	r1, #48	; 0x30
 8014de0:	4a0c      	ldr	r2, [pc, #48]	; (8014e14 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014de2:	480d      	ldr	r0, [pc, #52]	; (8014e18 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014de4:	f011 f86c 	bl	8025ec0 <__assert_func>
 8014de8:	6823      	ldr	r3, [r4, #0]
 8014dea:	4620      	mov	r0, r4
 8014dec:	88a5      	ldrh	r5, [r4, #4]
 8014dee:	69db      	ldr	r3, [r3, #28]
 8014df0:	4798      	blx	r3
 8014df2:	4285      	cmp	r5, r0
 8014df4:	d303      	bcc.n	8014dfe <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8014df6:	4b09      	ldr	r3, [pc, #36]	; (8014e1c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014df8:	2131      	movs	r1, #49	; 0x31
 8014dfa:	4a06      	ldr	r2, [pc, #24]	; (8014e14 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014dfc:	e7f1      	b.n	8014de2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8014dfe:	6823      	ldr	r3, [r4, #0]
 8014e00:	4620      	mov	r0, r4
 8014e02:	88a1      	ldrh	r1, [r4, #4]
 8014e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e06:	4798      	blx	r3
 8014e08:	88a3      	ldrh	r3, [r4, #4]
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	80a3      	strh	r3, [r4, #4]
 8014e0e:	bd38      	pop	{r3, r4, r5, pc}
 8014e10:	0802bdd1 	.word	0x0802bdd1
 8014e14:	0802bec5 	.word	0x0802bec5
 8014e18:	0802bd29 	.word	0x0802bd29
 8014e1c:	0802bde8 	.word	0x0802bde8

08014e20 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014e20:	b570      	push	{r4, r5, r6, lr}
 8014e22:	6803      	ldr	r3, [r0, #0]
 8014e24:	4616      	mov	r6, r2
 8014e26:	4604      	mov	r4, r0
 8014e28:	460d      	mov	r5, r1
 8014e2a:	6a1b      	ldr	r3, [r3, #32]
 8014e2c:	4798      	blx	r3
 8014e2e:	4286      	cmp	r6, r0
 8014e30:	d905      	bls.n	8014e3e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8014e32:	4b06      	ldr	r3, [pc, #24]	; (8014e4c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014e34:	213a      	movs	r1, #58	; 0x3a
 8014e36:	4a06      	ldr	r2, [pc, #24]	; (8014e50 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014e38:	4806      	ldr	r0, [pc, #24]	; (8014e54 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014e3a:	f011 f841 	bl	8025ec0 <__assert_func>
 8014e3e:	6823      	ldr	r3, [r4, #0]
 8014e40:	4629      	mov	r1, r5
 8014e42:	4620      	mov	r0, r4
 8014e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e4a:	4718      	bx	r3
 8014e4c:	0802bdd1 	.word	0x0802bdd1
 8014e50:	0802be38 	.word	0x0802be38
 8014e54:	0802bd29 	.word	0x0802bd29

08014e58 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014e58:	4770      	bx	lr
	...

08014e5c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014e5c:	4a02      	ldr	r2, [pc, #8]	; (8014e68 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014e5e:	6002      	str	r2, [r0, #0]
 8014e60:	2200      	movs	r2, #0
 8014e62:	8082      	strh	r2, [r0, #4]
 8014e64:	4770      	bx	lr
 8014e66:	bf00      	nop
 8014e68:	0802be0c 	.word	0x0802be0c

08014e6c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014e6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014e6e:	2000      	movs	r0, #0
 8014e70:	b12b      	cbz	r3, 8014e7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014e72:	b920      	cbnz	r0, 8014e7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014e74:	1a5a      	subs	r2, r3, r1
 8014e76:	699b      	ldr	r3, [r3, #24]
 8014e78:	4250      	negs	r0, r2
 8014e7a:	4150      	adcs	r0, r2
 8014e7c:	e7f8      	b.n	8014e70 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014e7e:	4770      	bx	lr

08014e80 <_ZN8touchgfx9Container9removeAllEv>:
 8014e80:	2200      	movs	r2, #0
 8014e82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014e84:	b123      	cbz	r3, 8014e90 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014e86:	6999      	ldr	r1, [r3, #24]
 8014e88:	6281      	str	r1, [r0, #40]	; 0x28
 8014e8a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014e8e:	e7f8      	b.n	8014e82 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014e90:	4770      	bx	lr

08014e92 <_ZN8touchgfx9Container6unlinkEv>:
 8014e92:	2300      	movs	r3, #0
 8014e94:	6283      	str	r3, [r0, #40]	; 0x28
 8014e96:	4770      	bx	lr

08014e98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e9c:	461f      	mov	r7, r3
 8014e9e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014ea2:	460d      	mov	r5, r1
 8014ea4:	4616      	mov	r6, r2
 8014ea6:	b103      	cbz	r3, 8014eaa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014ea8:	6038      	str	r0, [r7, #0]
 8014eaa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014eac:	b314      	cbz	r4, 8014ef4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014eae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014eb2:	b1eb      	cbz	r3, 8014ef0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014eb4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014eb8:	428d      	cmp	r5, r1
 8014eba:	db19      	blt.n	8014ef0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014ebc:	b289      	uxth	r1, r1
 8014ebe:	8923      	ldrh	r3, [r4, #8]
 8014ec0:	440b      	add	r3, r1
 8014ec2:	b21b      	sxth	r3, r3
 8014ec4:	429d      	cmp	r5, r3
 8014ec6:	da13      	bge.n	8014ef0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014ec8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014ecc:	4296      	cmp	r6, r2
 8014ece:	db0f      	blt.n	8014ef0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014ed0:	b292      	uxth	r2, r2
 8014ed2:	8963      	ldrh	r3, [r4, #10]
 8014ed4:	4413      	add	r3, r2
 8014ed6:	b21b      	sxth	r3, r3
 8014ed8:	429e      	cmp	r6, r3
 8014eda:	da09      	bge.n	8014ef0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014edc:	6823      	ldr	r3, [r4, #0]
 8014ede:	1ab2      	subs	r2, r6, r2
 8014ee0:	1a69      	subs	r1, r5, r1
 8014ee2:	4620      	mov	r0, r4
 8014ee4:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8014ee8:	b212      	sxth	r2, r2
 8014eea:	463b      	mov	r3, r7
 8014eec:	b209      	sxth	r1, r1
 8014eee:	47c0      	blx	r8
 8014ef0:	69a4      	ldr	r4, [r4, #24]
 8014ef2:	e7db      	b.n	8014eac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ef8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014ef8:	2200      	movs	r2, #0
 8014efa:	8002      	strh	r2, [r0, #0]
 8014efc:	8042      	strh	r2, [r0, #2]
 8014efe:	8082      	strh	r2, [r0, #4]
 8014f00:	80c2      	strh	r2, [r0, #6]
 8014f02:	4770      	bx	lr

08014f04 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014f04:	b570      	push	{r4, r5, r6, lr}
 8014f06:	460d      	mov	r5, r1
 8014f08:	4616      	mov	r6, r2
 8014f0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014f0c:	b13c      	cbz	r4, 8014f1e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014f0e:	6823      	ldr	r3, [r4, #0]
 8014f10:	4620      	mov	r0, r4
 8014f12:	4632      	mov	r2, r6
 8014f14:	4629      	mov	r1, r5
 8014f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f18:	4798      	blx	r3
 8014f1a:	69a4      	ldr	r4, [r4, #24]
 8014f1c:	e7f6      	b.n	8014f0c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014f1e:	bd70      	pop	{r4, r5, r6, pc}

08014f20 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014f20:	b538      	push	{r3, r4, r5, lr}
 8014f22:	460d      	mov	r5, r1
 8014f24:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014f26:	b134      	cbz	r4, 8014f36 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014f28:	682b      	ldr	r3, [r5, #0]
 8014f2a:	4621      	mov	r1, r4
 8014f2c:	4628      	mov	r0, r5
 8014f2e:	689b      	ldr	r3, [r3, #8]
 8014f30:	4798      	blx	r3
 8014f32:	69a4      	ldr	r4, [r4, #24]
 8014f34:	e7f7      	b.n	8014f26 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014f36:	bd38      	pop	{r3, r4, r5, pc}

08014f38 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014f38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014f3a:	b19b      	cbz	r3, 8014f64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014f3c:	428b      	cmp	r3, r1
 8014f3e:	d109      	bne.n	8014f54 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014f40:	699a      	ldr	r2, [r3, #24]
 8014f42:	2100      	movs	r1, #0
 8014f44:	6159      	str	r1, [r3, #20]
 8014f46:	6282      	str	r2, [r0, #40]	; 0x28
 8014f48:	b902      	cbnz	r2, 8014f4c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014f4a:	4770      	bx	lr
 8014f4c:	6199      	str	r1, [r3, #24]
 8014f4e:	4770      	bx	lr
 8014f50:	4613      	mov	r3, r2
 8014f52:	b13a      	cbz	r2, 8014f64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014f54:	699a      	ldr	r2, [r3, #24]
 8014f56:	428a      	cmp	r2, r1
 8014f58:	d1fa      	bne.n	8014f50 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014f5a:	698a      	ldr	r2, [r1, #24]
 8014f5c:	619a      	str	r2, [r3, #24]
 8014f5e:	2300      	movs	r3, #0
 8014f60:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014f64:	4770      	bx	lr

08014f66 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014f66:	b410      	push	{r4}
 8014f68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	b92b      	cbnz	r3, 8014f7a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014f6e:	6803      	ldr	r3, [r0, #0]
 8014f70:	4611      	mov	r1, r2
 8014f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014f78:	4718      	bx	r3
 8014f7a:	b941      	cbnz	r1, 8014f8e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014f7c:	6193      	str	r3, [r2, #24]
 8014f7e:	6282      	str	r2, [r0, #40]	; 0x28
 8014f80:	6154      	str	r4, [r2, #20]
 8014f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f86:	4770      	bx	lr
 8014f88:	4603      	mov	r3, r0
 8014f8a:	2800      	cmp	r0, #0
 8014f8c:	d0f9      	beq.n	8014f82 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014f8e:	4299      	cmp	r1, r3
 8014f90:	6998      	ldr	r0, [r3, #24]
 8014f92:	d1f9      	bne.n	8014f88 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014f94:	6190      	str	r0, [r2, #24]
 8014f96:	618a      	str	r2, [r1, #24]
 8014f98:	e7f2      	b.n	8014f80 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08014f9c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014f9c:	4288      	cmp	r0, r1
 8014f9e:	b508      	push	{r3, lr}
 8014fa0:	d105      	bne.n	8014fae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8014fa2:	4b11      	ldr	r3, [pc, #68]	; (8014fe8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8014fa4:	2121      	movs	r1, #33	; 0x21
 8014fa6:	4a11      	ldr	r2, [pc, #68]	; (8014fec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014fa8:	4811      	ldr	r0, [pc, #68]	; (8014ff0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8014faa:	f010 ff89 	bl	8025ec0 <__assert_func>
 8014fae:	694b      	ldr	r3, [r1, #20]
 8014fb0:	b11b      	cbz	r3, 8014fba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8014fb2:	4b10      	ldr	r3, [pc, #64]	; (8014ff4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8014fb4:	2122      	movs	r1, #34	; 0x22
 8014fb6:	4a0d      	ldr	r2, [pc, #52]	; (8014fec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014fb8:	e7f6      	b.n	8014fa8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014fba:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8014fbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014fc0:	b913      	cbnz	r3, 8014fc8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8014fc2:	6281      	str	r1, [r0, #40]	; 0x28
 8014fc4:	bd08      	pop	{r3, pc}
 8014fc6:	4613      	mov	r3, r2
 8014fc8:	699a      	ldr	r2, [r3, #24]
 8014fca:	b12a      	cbz	r2, 8014fd8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8014fcc:	428b      	cmp	r3, r1
 8014fce:	d1fa      	bne.n	8014fc6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8014fd0:	4b09      	ldr	r3, [pc, #36]	; (8014ff8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014fd2:	2133      	movs	r1, #51	; 0x33
 8014fd4:	4a05      	ldr	r2, [pc, #20]	; (8014fec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014fd6:	e7e7      	b.n	8014fa8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014fd8:	428b      	cmp	r3, r1
 8014fda:	d103      	bne.n	8014fe4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8014fdc:	4b06      	ldr	r3, [pc, #24]	; (8014ff8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014fde:	2136      	movs	r1, #54	; 0x36
 8014fe0:	4a02      	ldr	r2, [pc, #8]	; (8014fec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014fe2:	e7e1      	b.n	8014fa8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014fe4:	6199      	str	r1, [r3, #24]
 8014fe6:	e7ed      	b.n	8014fc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8014fe8:	0802bf03 	.word	0x0802bf03
 8014fec:	0802c054 	.word	0x0802c054
 8014ff0:	0802bf2f 	.word	0x0802bf2f
 8014ff4:	0802bf62 	.word	0x0802bf62
 8014ff8:	0802bf98 	.word	0x0802bf98

08014ffc <_ZN8touchgfx4RectaNERKS0_>:
 8014ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015000:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015004:	888c      	ldrh	r4, [r1, #4]
 8015006:	f9b0 9000 	ldrsh.w	r9, [r0]
 801500a:	443c      	add	r4, r7
 801500c:	b2a4      	uxth	r4, r4
 801500e:	fa0f f884 	sxth.w	r8, r4
 8015012:	45c1      	cmp	r9, r8
 8015014:	da2f      	bge.n	8015076 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015016:	8882      	ldrh	r2, [r0, #4]
 8015018:	444a      	add	r2, r9
 801501a:	b292      	uxth	r2, r2
 801501c:	fa0f fe82 	sxth.w	lr, r2
 8015020:	4577      	cmp	r7, lr
 8015022:	da28      	bge.n	8015076 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015024:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015028:	88cb      	ldrh	r3, [r1, #6]
 801502a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801502e:	442b      	add	r3, r5
 8015030:	b21b      	sxth	r3, r3
 8015032:	429e      	cmp	r6, r3
 8015034:	da1f      	bge.n	8015076 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015036:	88c3      	ldrh	r3, [r0, #6]
 8015038:	4433      	add	r3, r6
 801503a:	b29b      	uxth	r3, r3
 801503c:	fa0f fc83 	sxth.w	ip, r3
 8015040:	4565      	cmp	r5, ip
 8015042:	da18      	bge.n	8015076 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015044:	454f      	cmp	r7, r9
 8015046:	bfb8      	it	lt
 8015048:	464f      	movlt	r7, r9
 801504a:	42b5      	cmp	r5, r6
 801504c:	bfb8      	it	lt
 801504e:	4635      	movlt	r5, r6
 8015050:	45f0      	cmp	r8, lr
 8015052:	bfd8      	it	le
 8015054:	4622      	movle	r2, r4
 8015056:	1bd2      	subs	r2, r2, r7
 8015058:	8082      	strh	r2, [r0, #4]
 801505a:	884a      	ldrh	r2, [r1, #2]
 801505c:	88c9      	ldrh	r1, [r1, #6]
 801505e:	8007      	strh	r7, [r0, #0]
 8015060:	440a      	add	r2, r1
 8015062:	8045      	strh	r5, [r0, #2]
 8015064:	b292      	uxth	r2, r2
 8015066:	b211      	sxth	r1, r2
 8015068:	458c      	cmp	ip, r1
 801506a:	bfa8      	it	ge
 801506c:	4613      	movge	r3, r2
 801506e:	1b5b      	subs	r3, r3, r5
 8015070:	80c3      	strh	r3, [r0, #6]
 8015072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015076:	2300      	movs	r3, #0
 8015078:	8003      	strh	r3, [r0, #0]
 801507a:	8043      	strh	r3, [r0, #2]
 801507c:	8083      	strh	r3, [r0, #4]
 801507e:	80c3      	strh	r3, [r0, #6]
 8015080:	e7f7      	b.n	8015072 <_ZN8touchgfx4RectaNERKS0_+0x76>

08015082 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015082:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015086:	2b00      	cmp	r3, #0
 8015088:	dd06      	ble.n	8015098 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801508a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801508e:	2800      	cmp	r0, #0
 8015090:	bfcc      	ite	gt
 8015092:	2000      	movgt	r0, #0
 8015094:	2001      	movle	r0, #1
 8015096:	4770      	bx	lr
 8015098:	2001      	movs	r0, #1
 801509a:	4770      	bx	lr

0801509c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150a0:	2300      	movs	r3, #0
 80150a2:	4604      	mov	r4, r0
 80150a4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80150a6:	8003      	strh	r3, [r0, #0]
 80150a8:	8043      	strh	r3, [r0, #2]
 80150aa:	8083      	strh	r3, [r0, #4]
 80150ac:	80c3      	strh	r3, [r0, #6]
 80150ae:	2d00      	cmp	r5, #0
 80150b0:	d040      	beq.n	8015134 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80150b2:	1d28      	adds	r0, r5, #4
 80150b4:	f7ff ffe5 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 80150b8:	b988      	cbnz	r0, 80150de <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80150ba:	4620      	mov	r0, r4
 80150bc:	f7ff ffe1 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 80150c0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80150c4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80150c8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80150cc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80150d0:	b138      	cbz	r0, 80150e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80150d2:	8022      	strh	r2, [r4, #0]
 80150d4:	8063      	strh	r3, [r4, #2]
 80150d6:	f8a4 e004 	strh.w	lr, [r4, #4]
 80150da:	f8a4 c006 	strh.w	ip, [r4, #6]
 80150de:	69ad      	ldr	r5, [r5, #24]
 80150e0:	e7e5      	b.n	80150ae <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80150e2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80150e6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80150ea:	4290      	cmp	r0, r2
 80150ec:	4607      	mov	r7, r0
 80150ee:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80150f2:	460e      	mov	r6, r1
 80150f4:	bfa8      	it	ge
 80150f6:	4617      	movge	r7, r2
 80150f8:	4299      	cmp	r1, r3
 80150fa:	4472      	add	r2, lr
 80150fc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015100:	bfa8      	it	ge
 8015102:	461e      	movge	r6, r3
 8015104:	4440      	add	r0, r8
 8015106:	4471      	add	r1, lr
 8015108:	4463      	add	r3, ip
 801510a:	b200      	sxth	r0, r0
 801510c:	8027      	strh	r7, [r4, #0]
 801510e:	b212      	sxth	r2, r2
 8015110:	8066      	strh	r6, [r4, #2]
 8015112:	b209      	sxth	r1, r1
 8015114:	b21b      	sxth	r3, r3
 8015116:	4290      	cmp	r0, r2
 8015118:	bfac      	ite	ge
 801511a:	ebc7 0200 	rsbge	r2, r7, r0
 801511e:	ebc7 0202 	rsblt	r2, r7, r2
 8015122:	4299      	cmp	r1, r3
 8015124:	bfac      	ite	ge
 8015126:	ebc6 0301 	rsbge	r3, r6, r1
 801512a:	ebc6 0303 	rsblt	r3, r6, r3
 801512e:	80a2      	strh	r2, [r4, #4]
 8015130:	80e3      	strh	r3, [r4, #6]
 8015132:	e7d4      	b.n	80150de <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015134:	4620      	mov	r0, r4
 8015136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801513a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801513a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801513e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015142:	b383      	cbz	r3, 80151a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015144:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015146:	b374      	cbz	r4, 80151a6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015148:	f9b1 5000 	ldrsh.w	r5, [r1]
 801514c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015150:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015154:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015158:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801515c:	b303      	cbz	r3, 80151a0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801515e:	4668      	mov	r0, sp
 8015160:	1d21      	adds	r1, r4, #4
 8015162:	f8ad 5000 	strh.w	r5, [sp]
 8015166:	f8ad 6002 	strh.w	r6, [sp, #2]
 801516a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801516e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015172:	f7ff ff43 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 8015176:	4668      	mov	r0, sp
 8015178:	f7ff ff83 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 801517c:	b980      	cbnz	r0, 80151a0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801517e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015182:	4669      	mov	r1, sp
 8015184:	88a2      	ldrh	r2, [r4, #4]
 8015186:	4620      	mov	r0, r4
 8015188:	1a9b      	subs	r3, r3, r2
 801518a:	88e2      	ldrh	r2, [r4, #6]
 801518c:	f8ad 3000 	strh.w	r3, [sp]
 8015190:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015194:	1a9b      	subs	r3, r3, r2
 8015196:	f8ad 3002 	strh.w	r3, [sp, #2]
 801519a:	6823      	ldr	r3, [r4, #0]
 801519c:	689b      	ldr	r3, [r3, #8]
 801519e:	4798      	blx	r3
 80151a0:	69a4      	ldr	r4, [r4, #24]
 80151a2:	2c00      	cmp	r4, #0
 80151a4:	d1d8      	bne.n	8015158 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80151a6:	b002      	add	sp, #8
 80151a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080151ac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80151ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80151ae:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80151b2:	460d      	mov	r5, r1
 80151b4:	4616      	mov	r6, r2
 80151b6:	b323      	cbz	r3, 8015202 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80151b8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80151ba:	b314      	cbz	r4, 8015202 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80151bc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80151c0:	b1eb      	cbz	r3, 80151fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80151c2:	6828      	ldr	r0, [r5, #0]
 80151c4:	466b      	mov	r3, sp
 80151c6:	6869      	ldr	r1, [r5, #4]
 80151c8:	c303      	stmia	r3!, {r0, r1}
 80151ca:	4668      	mov	r0, sp
 80151cc:	1d21      	adds	r1, r4, #4
 80151ce:	f7ff ff15 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 80151d2:	4668      	mov	r0, sp
 80151d4:	f7ff ff55 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 80151d8:	b988      	cbnz	r0, 80151fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80151da:	f8bd 3000 	ldrh.w	r3, [sp]
 80151de:	4669      	mov	r1, sp
 80151e0:	88a2      	ldrh	r2, [r4, #4]
 80151e2:	4620      	mov	r0, r4
 80151e4:	1a9b      	subs	r3, r3, r2
 80151e6:	88e2      	ldrh	r2, [r4, #6]
 80151e8:	f8ad 3000 	strh.w	r3, [sp]
 80151ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80151f0:	1a9b      	subs	r3, r3, r2
 80151f2:	4632      	mov	r2, r6
 80151f4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80151f8:	6823      	ldr	r3, [r4, #0]
 80151fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80151fc:	4798      	blx	r3
 80151fe:	69a4      	ldr	r4, [r4, #24]
 8015200:	e7db      	b.n	80151ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015202:	b002      	add	sp, #8
 8015204:	bd70      	pop	{r4, r5, r6, pc}

08015206 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015206:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801520a:	4770      	bx	lr

0801520c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801520c:	4770      	bx	lr

0801520e <_ZN8touchgfx3HAL10FlushCacheEv>:
 801520e:	4770      	bx	lr

08015210 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015210:	6803      	ldr	r3, [r0, #0]
 8015212:	b513      	push	{r0, r1, r4, lr}
 8015214:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8015218:	2300      	movs	r3, #0
 801521a:	e9cd 3300 	strd	r3, r3, [sp]
 801521e:	466b      	mov	r3, sp
 8015220:	47a0      	blx	r4
 8015222:	b002      	add	sp, #8
 8015224:	bd10      	pop	{r4, pc}

08015226 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015226:	2301      	movs	r3, #1
 8015228:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801522c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015230:	4770      	bx	lr

08015232 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015232:	2301      	movs	r3, #1
 8015234:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015238:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801523c:	4770      	bx	lr

0801523e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801523e:	6843      	ldr	r3, [r0, #4]
 8015240:	2201      	movs	r2, #1
 8015242:	725a      	strb	r2, [r3, #9]
 8015244:	6840      	ldr	r0, [r0, #4]
 8015246:	6803      	ldr	r3, [r0, #0]
 8015248:	691b      	ldr	r3, [r3, #16]
 801524a:	4718      	bx	r3

0801524c <_ZN8touchgfx3HAL8flushDMAEv>:
 801524c:	6840      	ldr	r0, [r0, #4]
 801524e:	6803      	ldr	r3, [r0, #0]
 8015250:	689b      	ldr	r3, [r3, #8]
 8015252:	4718      	bx	r3

08015254 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015254:	b530      	push	{r4, r5, lr}
 8015256:	b08b      	sub	sp, #44	; 0x2c
 8015258:	6804      	ldr	r4, [r0, #0]
 801525a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801525e:	9508      	str	r5, [sp, #32]
 8015260:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015264:	9507      	str	r5, [sp, #28]
 8015266:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801526a:	9506      	str	r5, [sp, #24]
 801526c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015270:	9505      	str	r5, [sp, #20]
 8015272:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015276:	9504      	str	r5, [sp, #16]
 8015278:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801527c:	9503      	str	r5, [sp, #12]
 801527e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015282:	9502      	str	r5, [sp, #8]
 8015284:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015288:	e9cd 3500 	strd	r3, r5, [sp]
 801528c:	4613      	mov	r3, r2
 801528e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015290:	2200      	movs	r2, #0
 8015292:	47a0      	blx	r4
 8015294:	b00b      	add	sp, #44	; 0x2c
 8015296:	bd30      	pop	{r4, r5, pc}

08015298 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015298:	4b04      	ldr	r3, [pc, #16]	; (80152ac <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	b123      	cbz	r3, 80152a8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801529e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80152a2:	f080 0001 	eor.w	r0, r0, #1
 80152a6:	4770      	bx	lr
 80152a8:	2001      	movs	r0, #1
 80152aa:	4770      	bx	lr
 80152ac:	200566f6 	.word	0x200566f6

080152b0 <_ZN8touchgfx3HAL8endFrameEv>:
 80152b0:	b510      	push	{r4, lr}
 80152b2:	4604      	mov	r4, r0
 80152b4:	6840      	ldr	r0, [r0, #4]
 80152b6:	6803      	ldr	r3, [r0, #0]
 80152b8:	689b      	ldr	r3, [r3, #8]
 80152ba:	4798      	blx	r3
 80152bc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80152c0:	b113      	cbz	r3, 80152c8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80152c2:	2301      	movs	r3, #1
 80152c4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80152c8:	bd10      	pop	{r4, pc}

080152ca <_ZN8touchgfx3HAL10initializeEv>:
 80152ca:	b510      	push	{r4, lr}
 80152cc:	4604      	mov	r4, r0
 80152ce:	f7ee f9a9 	bl	8003624 <_ZN8touchgfx10OSWrappers10initializeEv>
 80152d2:	6860      	ldr	r0, [r4, #4]
 80152d4:	6803      	ldr	r3, [r0, #0]
 80152d6:	68db      	ldr	r3, [r3, #12]
 80152d8:	4798      	blx	r3
 80152da:	68e0      	ldr	r0, [r4, #12]
 80152dc:	6803      	ldr	r3, [r0, #0]
 80152de:	689b      	ldr	r3, [r3, #8]
 80152e0:	4798      	blx	r3
 80152e2:	6823      	ldr	r3, [r4, #0]
 80152e4:	4620      	mov	r0, r4
 80152e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152ec:	4718      	bx	r3

080152ee <_ZN8touchgfx3HAL9taskEntryEv>:
 80152ee:	b508      	push	{r3, lr}
 80152f0:	6803      	ldr	r3, [r0, #0]
 80152f2:	4604      	mov	r4, r0
 80152f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80152f6:	4798      	blx	r3
 80152f8:	6823      	ldr	r3, [r4, #0]
 80152fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152fc:	4620      	mov	r0, r4
 80152fe:	4798      	blx	r3
 8015300:	f7ee fa06 	bl	8003710 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015304:	6823      	ldr	r3, [r4, #0]
 8015306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015308:	e7f8      	b.n	80152fc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801530c <_ZN8touchgfx3HAL4tickEv>:
 801530c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801530e:	6803      	ldr	r3, [r0, #0]
 8015310:	4604      	mov	r4, r0
 8015312:	4d5c      	ldr	r5, [pc, #368]	; (8015484 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015314:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015318:	4798      	blx	r3
 801531a:	2800      	cmp	r0, #0
 801531c:	f000 8097 	beq.w	801544e <_ZN8touchgfx3HAL4tickEv+0x142>
 8015320:	2001      	movs	r0, #1
 8015322:	2600      	movs	r6, #0
 8015324:	f7ed ff50 	bl	80031c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015328:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801532c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015330:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015334:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015338:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801533c:	b133      	cbz	r3, 801534c <_ZN8touchgfx3HAL4tickEv+0x40>
 801533e:	6823      	ldr	r3, [r4, #0]
 8015340:	4620      	mov	r0, r4
 8015342:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015346:	4798      	blx	r3
 8015348:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801534c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015350:	2601      	movs	r6, #1
 8015352:	6862      	ldr	r2, [r4, #4]
 8015354:	f083 0301 	eor.w	r3, r3, #1
 8015358:	702e      	strb	r6, [r5, #0]
 801535a:	7253      	strb	r3, [r2, #9]
 801535c:	f003 fcac 	bl	8018cb8 <_ZN8touchgfx11Application11getInstanceEv>
 8015360:	6803      	ldr	r3, [r0, #0]
 8015362:	4631      	mov	r1, r6
 8015364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015366:	4798      	blx	r3
 8015368:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801536c:	b90b      	cbnz	r3, 8015372 <_ZN8touchgfx3HAL4tickEv+0x66>
 801536e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015372:	f003 fca1 	bl	8018cb8 <_ZN8touchgfx11Application11getInstanceEv>
 8015376:	6803      	ldr	r3, [r0, #0]
 8015378:	695b      	ldr	r3, [r3, #20]
 801537a:	4798      	blx	r3
 801537c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801537e:	6803      	ldr	r3, [r0, #0]
 8015380:	691b      	ldr	r3, [r3, #16]
 8015382:	4798      	blx	r3
 8015384:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015388:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801538c:	3b01      	subs	r3, #1
 801538e:	b2db      	uxtb	r3, r3
 8015390:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015394:	b10a      	cbz	r2, 801539a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015396:	2b00      	cmp	r3, #0
 8015398:	d1eb      	bne.n	8015372 <_ZN8touchgfx3HAL4tickEv+0x66>
 801539a:	4a3b      	ldr	r2, [pc, #236]	; (8015488 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801539c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80153a0:	7813      	ldrb	r3, [r2, #0]
 80153a2:	3301      	adds	r3, #1
 80153a4:	b25b      	sxtb	r3, r3
 80153a6:	4299      	cmp	r1, r3
 80153a8:	7013      	strb	r3, [r2, #0]
 80153aa:	dc10      	bgt.n	80153ce <_ZN8touchgfx3HAL4tickEv+0xc2>
 80153ac:	2300      	movs	r3, #0
 80153ae:	68e0      	ldr	r0, [r4, #12]
 80153b0:	a902      	add	r1, sp, #8
 80153b2:	7013      	strb	r3, [r2, #0]
 80153b4:	aa03      	add	r2, sp, #12
 80153b6:	6803      	ldr	r3, [r0, #0]
 80153b8:	68db      	ldr	r3, [r3, #12]
 80153ba:	4798      	blx	r3
 80153bc:	6823      	ldr	r3, [r4, #0]
 80153be:	2800      	cmp	r0, #0
 80153c0:	d051      	beq.n	8015466 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80153c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80153c6:	4620      	mov	r0, r4
 80153c8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80153cc:	4798      	blx	r3
 80153ce:	2300      	movs	r3, #0
 80153d0:	6960      	ldr	r0, [r4, #20]
 80153d2:	f88d 3007 	strb.w	r3, [sp, #7]
 80153d6:	b158      	cbz	r0, 80153f0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80153d8:	6803      	ldr	r3, [r0, #0]
 80153da:	f10d 0107 	add.w	r1, sp, #7
 80153de:	68db      	ldr	r3, [r3, #12]
 80153e0:	4798      	blx	r3
 80153e2:	b128      	cbz	r0, 80153f0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80153e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80153ea:	6803      	ldr	r3, [r0, #0]
 80153ec:	68db      	ldr	r3, [r3, #12]
 80153ee:	4798      	blx	r3
 80153f0:	f104 001c 	add.w	r0, r4, #28
 80153f4:	f00e ff5e 	bl	80242b4 <_ZN8touchgfx8Gestures4tickEv>
 80153f8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80153fc:	b30b      	cbz	r3, 8015442 <_ZN8touchgfx3HAL4tickEv+0x136>
 80153fe:	6920      	ldr	r0, [r4, #16]
 8015400:	6803      	ldr	r3, [r0, #0]
 8015402:	691b      	ldr	r3, [r3, #16]
 8015404:	4798      	blx	r3
 8015406:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015408:	4606      	mov	r6, r0
 801540a:	b903      	cbnz	r3, 801540e <_ZN8touchgfx3HAL4tickEv+0x102>
 801540c:	6720      	str	r0, [r4, #112]	; 0x70
 801540e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015410:	4a1e      	ldr	r2, [pc, #120]	; (801548c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015412:	1af3      	subs	r3, r6, r3
 8015414:	4293      	cmp	r3, r2
 8015416:	d914      	bls.n	8015442 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015418:	6920      	ldr	r0, [r4, #16]
 801541a:	6803      	ldr	r3, [r0, #0]
 801541c:	699b      	ldr	r3, [r3, #24]
 801541e:	4798      	blx	r3
 8015420:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015422:	2264      	movs	r2, #100	; 0x64
 8015424:	1af3      	subs	r3, r6, r3
 8015426:	fbb3 f3f2 	udiv	r3, r3, r2
 801542a:	fbb0 f0f3 	udiv	r0, r0, r3
 801542e:	2800      	cmp	r0, #0
 8015430:	dc1e      	bgt.n	8015470 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015432:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015436:	6920      	ldr	r0, [r4, #16]
 8015438:	2100      	movs	r1, #0
 801543a:	6803      	ldr	r3, [r0, #0]
 801543c:	69db      	ldr	r3, [r3, #28]
 801543e:	4798      	blx	r3
 8015440:	6726      	str	r6, [r4, #112]	; 0x70
 8015442:	f003 fc39 	bl	8018cb8 <_ZN8touchgfx11Application11getInstanceEv>
 8015446:	6803      	ldr	r3, [r0, #0]
 8015448:	2100      	movs	r1, #0
 801544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801544c:	4798      	blx	r3
 801544e:	6823      	ldr	r3, [r4, #0]
 8015450:	4620      	mov	r0, r4
 8015452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015456:	4798      	blx	r3
 8015458:	2001      	movs	r0, #1
 801545a:	f7ed fec0 	bl	80031de <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801545e:	2300      	movs	r3, #0
 8015460:	702b      	strb	r3, [r5, #0]
 8015462:	b004      	add	sp, #16
 8015464:	bd70      	pop	{r4, r5, r6, pc}
 8015466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801546a:	4620      	mov	r0, r4
 801546c:	4798      	blx	r3
 801546e:	e7ae      	b.n	80153ce <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015470:	2863      	cmp	r0, #99	; 0x63
 8015472:	bfcb      	itete	gt
 8015474:	2300      	movgt	r3, #0
 8015476:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801547a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801547e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015482:	e7d8      	b.n	8015436 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015484:	200566fc 	.word	0x200566fc
 8015488:	200566fd 	.word	0x200566fd
 801548c:	05f5e100 	.word	0x05f5e100

08015490 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015490:	f7ee b90a 	b.w	80036a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015494 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015494:	6581      	str	r1, [r0, #88]	; 0x58
 8015496:	301c      	adds	r0, #28
 8015498:	f00e bf0a 	b.w	80242b0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801549c <_ZN8touchgfx3HAL5touchEll>:
 801549c:	b530      	push	{r4, r5, lr}
 801549e:	b087      	sub	sp, #28
 80154a0:	4604      	mov	r4, r0
 80154a2:	a804      	add	r0, sp, #16
 80154a4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80154a8:	f003 f9f2 	bl	8018890 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80154ac:	9b04      	ldr	r3, [sp, #16]
 80154ae:	a906      	add	r1, sp, #24
 80154b0:	a803      	add	r0, sp, #12
 80154b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80154b6:	9b05      	ldr	r3, [sp, #20]
 80154b8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80154bc:	f003 fa26 	bl	801890c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80154c0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80154c4:	f104 001c 	add.w	r0, r4, #28
 80154c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80154cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80154d0:	b189      	cbz	r1, 80154f6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80154d2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80154d6:	9300      	str	r3, [sp, #0]
 80154d8:	4613      	mov	r3, r2
 80154da:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80154de:	462a      	mov	r2, r5
 80154e0:	f00e fef6 	bl	80242d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80154e4:	b128      	cbz	r0, 80154f2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80154e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80154ea:	65e3      	str	r3, [r4, #92]	; 0x5c
 80154ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80154f0:	6623      	str	r3, [r4, #96]	; 0x60
 80154f2:	b007      	add	sp, #28
 80154f4:	bd30      	pop	{r4, r5, pc}
 80154f6:	f00e ff2f 	bl	8024358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80154fa:	2301      	movs	r3, #1
 80154fc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015500:	e7f1      	b.n	80154e6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015502 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015502:	b570      	push	{r4, r5, r6, lr}
 8015504:	2b00      	cmp	r3, #0
 8015506:	d050      	beq.n	80155aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015508:	ea81 0002 	eor.w	r0, r1, r2
 801550c:	07c6      	lsls	r6, r0, #31
 801550e:	d508      	bpl.n	8015522 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015510:	3a01      	subs	r2, #1
 8015512:	18cc      	adds	r4, r1, r3
 8015514:	42a1      	cmp	r1, r4
 8015516:	d048      	beq.n	80155aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015518:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801551c:	f801 0b01 	strb.w	r0, [r1], #1
 8015520:	e7f8      	b.n	8015514 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015522:	07d5      	lsls	r5, r2, #31
 8015524:	bf42      	ittt	mi
 8015526:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801552a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801552e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015532:	2b01      	cmp	r3, #1
 8015534:	d915      	bls.n	8015562 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015536:	ea82 0001 	eor.w	r0, r2, r1
 801553a:	0784      	lsls	r4, r0, #30
 801553c:	d02d      	beq.n	801559a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801553e:	1e94      	subs	r4, r2, #2
 8015540:	4608      	mov	r0, r1
 8015542:	18ce      	adds	r6, r1, r3
 8015544:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015548:	f820 5b02 	strh.w	r5, [r0], #2
 801554c:	1a35      	subs	r5, r6, r0
 801554e:	2d01      	cmp	r5, #1
 8015550:	d8f8      	bhi.n	8015544 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015552:	1e98      	subs	r0, r3, #2
 8015554:	f003 0301 	and.w	r3, r3, #1
 8015558:	f020 0001 	bic.w	r0, r0, #1
 801555c:	3002      	adds	r0, #2
 801555e:	4401      	add	r1, r0
 8015560:	4402      	add	r2, r0
 8015562:	1f14      	subs	r4, r2, #4
 8015564:	4608      	mov	r0, r1
 8015566:	18ce      	adds	r6, r1, r3
 8015568:	1a35      	subs	r5, r6, r0
 801556a:	2d03      	cmp	r5, #3
 801556c:	d810      	bhi.n	8015590 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801556e:	089c      	lsrs	r4, r3, #2
 8015570:	00a0      	lsls	r0, r4, #2
 8015572:	4401      	add	r1, r0
 8015574:	3801      	subs	r0, #1
 8015576:	4402      	add	r2, r0
 8015578:	f06f 0003 	mvn.w	r0, #3
 801557c:	fb00 3404 	mla	r4, r0, r4, r3
 8015580:	440c      	add	r4, r1
 8015582:	42a1      	cmp	r1, r4
 8015584:	d011      	beq.n	80155aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015586:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801558a:	f801 3b01 	strb.w	r3, [r1], #1
 801558e:	e7f8      	b.n	8015582 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015590:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015594:	f840 5b04 	str.w	r5, [r0], #4
 8015598:	e7e6      	b.n	8015568 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801559a:	0790      	lsls	r0, r2, #30
 801559c:	d0e1      	beq.n	8015562 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801559e:	f832 0b02 	ldrh.w	r0, [r2], #2
 80155a2:	3b02      	subs	r3, #2
 80155a4:	f821 0b02 	strh.w	r0, [r1], #2
 80155a8:	e7db      	b.n	8015562 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80155aa:	2001      	movs	r0, #1
 80155ac:	bd70      	pop	{r4, r5, r6, pc}

080155ae <_ZN8touchgfx3HAL7noTouchEv>:
 80155ae:	b510      	push	{r4, lr}
 80155b0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80155b4:	4604      	mov	r4, r0
 80155b6:	b153      	cbz	r3, 80155ce <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80155b8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80155bc:	2101      	movs	r1, #1
 80155be:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80155c2:	301c      	adds	r0, #28
 80155c4:	f00e fec8 	bl	8024358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80155c8:	2300      	movs	r3, #0
 80155ca:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80155ce:	bd10      	pop	{r4, pc}

080155d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80155d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155d4:	4604      	mov	r4, r0
 80155d6:	6980      	ldr	r0, [r0, #24]
 80155d8:	b085      	sub	sp, #20
 80155da:	460f      	mov	r7, r1
 80155dc:	4690      	mov	r8, r2
 80155de:	4699      	mov	r9, r3
 80155e0:	b930      	cbnz	r0, 80155f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80155e2:	4b1c      	ldr	r3, [pc, #112]	; (8015654 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80155e4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80155e8:	4a1b      	ldr	r2, [pc, #108]	; (8015658 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80155ea:	481c      	ldr	r0, [pc, #112]	; (801565c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 80155ec:	f010 fc68 	bl	8025ec0 <__assert_func>
 80155f0:	ad04      	add	r5, sp, #16
 80155f2:	2600      	movs	r6, #0
 80155f4:	f845 6d04 	str.w	r6, [r5, #-4]!
 80155f8:	6806      	ldr	r6, [r0, #0]
 80155fa:	9501      	str	r5, [sp, #4]
 80155fc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015600:	9500      	str	r5, [sp, #0]
 8015602:	6835      	ldr	r5, [r6, #0]
 8015604:	47a8      	blx	r5
 8015606:	4d16      	ldr	r5, [pc, #88]	; (8015660 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015608:	4606      	mov	r6, r0
 801560a:	f8a5 9000 	strh.w	r9, [r5]
 801560e:	f7f0 fb3f 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8015612:	6803      	ldr	r3, [r0, #0]
 8015614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015616:	4798      	blx	r3
 8015618:	2801      	cmp	r0, #1
 801561a:	d012      	beq.n	8015642 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 801561c:	d306      	bcc.n	801562c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801561e:	280d      	cmp	r0, #13
 8015620:	d80b      	bhi.n	801563a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8015622:	4b10      	ldr	r3, [pc, #64]	; (8015664 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015624:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8015628:	4a0b      	ldr	r2, [pc, #44]	; (8015658 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801562a:	e7de      	b.n	80155ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801562c:	882b      	ldrh	r3, [r5, #0]
 801562e:	fb08 7203 	mla	r2, r8, r3, r7
 8015632:	9b03      	ldr	r3, [sp, #12]
 8015634:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015638:	63e3      	str	r3, [r4, #60]	; 0x3c
 801563a:	4630      	mov	r0, r6
 801563c:	b005      	add	sp, #20
 801563e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015642:	882a      	ldrh	r2, [r5, #0]
 8015644:	9b03      	ldr	r3, [sp, #12]
 8015646:	fb08 7202 	mla	r2, r8, r2, r7
 801564a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801564e:	1a9a      	subs	r2, r3, r2
 8015650:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015652:	e7f2      	b.n	801563a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8015654:	0802c1fc 	.word	0x0802c1fc
 8015658:	0802c581 	.word	0x0802c581
 801565c:	0802c241 	.word	0x0802c241
 8015660:	200566f2 	.word	0x200566f2
 8015664:	0802c267 	.word	0x0802c267

08015668 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801566a:	b08b      	sub	sp, #44	; 0x2c
 801566c:	4617      	mov	r7, r2
 801566e:	4604      	mov	r4, r0
 8015670:	460e      	mov	r6, r1
 8015672:	461d      	mov	r5, r3
 8015674:	f7f0 fb0c 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8015678:	6803      	ldr	r3, [r0, #0]
 801567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801567c:	4798      	blx	r3
 801567e:	4b0f      	ldr	r3, [pc, #60]	; (80156bc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 8015680:	6822      	ldr	r2, [r4, #0]
 8015682:	4631      	mov	r1, r6
 8015684:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015688:	881b      	ldrh	r3, [r3, #0]
 801568a:	4620      	mov	r0, r4
 801568c:	9306      	str	r3, [sp, #24]
 801568e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015692:	9305      	str	r3, [sp, #20]
 8015694:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015698:	9304      	str	r3, [sp, #16]
 801569a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801569e:	9303      	str	r3, [sp, #12]
 80156a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80156a4:	9302      	str	r3, [sp, #8]
 80156a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80156aa:	e9cd 5300 	strd	r5, r3, [sp]
 80156ae:	463b      	mov	r3, r7
 80156b0:	6b95      	ldr	r5, [r2, #56]	; 0x38
 80156b2:	2200      	movs	r2, #0
 80156b4:	47a8      	blx	r5
 80156b6:	b00b      	add	sp, #44	; 0x2c
 80156b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156ba:	bf00      	nop
 80156bc:	200566f2 	.word	0x200566f2

080156c0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80156c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156c4:	4698      	mov	r8, r3
 80156c6:	6803      	ldr	r3, [r0, #0]
 80156c8:	b08b      	sub	sp, #44	; 0x2c
 80156ca:	4617      	mov	r7, r2
 80156cc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80156ce:	460e      	mov	r6, r1
 80156d0:	4b11      	ldr	r3, [pc, #68]	; (8015718 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80156d2:	4604      	mov	r4, r0
 80156d4:	f8b3 9000 	ldrh.w	r9, [r3]
 80156d8:	f7f0 fada 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 80156dc:	6803      	ldr	r3, [r0, #0]
 80156de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156e0:	4798      	blx	r3
 80156e2:	2302      	movs	r3, #2
 80156e4:	9008      	str	r0, [sp, #32]
 80156e6:	2200      	movs	r2, #0
 80156e8:	4631      	mov	r1, r6
 80156ea:	4620      	mov	r0, r4
 80156ec:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80156f0:	2301      	movs	r3, #1
 80156f2:	9305      	str	r3, [sp, #20]
 80156f4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80156f8:	9304      	str	r3, [sp, #16]
 80156fa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80156fe:	9303      	str	r3, [sp, #12]
 8015700:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015704:	9302      	str	r3, [sp, #8]
 8015706:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801570a:	e9cd 8300 	strd	r8, r3, [sp]
 801570e:	463b      	mov	r3, r7
 8015710:	47a8      	blx	r5
 8015712:	b00b      	add	sp, #44	; 0x2c
 8015714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015718:	200566f2 	.word	0x200566f2

0801571c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801571c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015720:	4698      	mov	r8, r3
 8015722:	6803      	ldr	r3, [r0, #0]
 8015724:	b087      	sub	sp, #28
 8015726:	460e      	mov	r6, r1
 8015728:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801572a:	4617      	mov	r7, r2
 801572c:	4b0d      	ldr	r3, [pc, #52]	; (8015764 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801572e:	4604      	mov	r4, r0
 8015730:	f8b3 9000 	ldrh.w	r9, [r3]
 8015734:	f7f0 faac 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8015738:	6803      	ldr	r3, [r0, #0]
 801573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801573c:	4798      	blx	r3
 801573e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015742:	463a      	mov	r2, r7
 8015744:	4631      	mov	r1, r6
 8015746:	9302      	str	r3, [sp, #8]
 8015748:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801574c:	9301      	str	r3, [sp, #4]
 801574e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015752:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015756:	9300      	str	r3, [sp, #0]
 8015758:	4620      	mov	r0, r4
 801575a:	4643      	mov	r3, r8
 801575c:	47a8      	blx	r5
 801575e:	b007      	add	sp, #28
 8015760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015764:	200566f2 	.word	0x200566f2

08015768 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801576c:	4604      	mov	r4, r0
 801576e:	b08f      	sub	sp, #60	; 0x3c
 8015770:	4610      	mov	r0, r2
 8015772:	460d      	mov	r5, r1
 8015774:	4691      	mov	r9, r2
 8015776:	461e      	mov	r6, r3
 8015778:	f006 fabc 	bl	801bcf4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801577c:	2800      	cmp	r0, #0
 801577e:	f000 80b3 	beq.w	80158e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 8015782:	6823      	ldr	r3, [r4, #0]
 8015784:	4620      	mov	r0, r4
 8015786:	f8df b190 	ldr.w	fp, [pc, #400]	; 8015918 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 801578a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015790:	4798      	blx	r3
 8015792:	6823      	ldr	r3, [r4, #0]
 8015794:	4620      	mov	r0, r4
 8015796:	f8df a184 	ldr.w	sl, [pc, #388]	; 801591c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 801579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801579c:	4798      	blx	r3
 801579e:	f8bb 3000 	ldrh.w	r3, [fp]
 80157a2:	4f5a      	ldr	r7, [pc, #360]	; (801590c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80157a4:	9300      	str	r3, [sp, #0]
 80157a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80157aa:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80157ae:	4640      	mov	r0, r8
 80157b0:	9301      	str	r3, [sp, #4]
 80157b2:	883b      	ldrh	r3, [r7, #0]
 80157b4:	9302      	str	r3, [sp, #8]
 80157b6:	4b56      	ldr	r3, [pc, #344]	; (8015910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80157b8:	881a      	ldrh	r2, [r3, #0]
 80157ba:	9304      	str	r3, [sp, #16]
 80157bc:	9203      	str	r2, [sp, #12]
 80157be:	f006 fb53 	bl	801be68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80157c2:	8038      	strh	r0, [r7, #0]
 80157c4:	4640      	mov	r0, r8
 80157c6:	f006 fb89 	bl	801bedc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80157ca:	9b04      	ldr	r3, [sp, #16]
 80157cc:	8018      	strh	r0, [r3, #0]
 80157ce:	4b51      	ldr	r3, [pc, #324]	; (8015914 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	f040 808b 	bne.w	80158ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 80157d8:	883b      	ldrh	r3, [r7, #0]
 80157da:	f8aa 0000 	strh.w	r0, [sl]
 80157de:	f8ab 3000 	strh.w	r3, [fp]
 80157e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80157e4:	4648      	mov	r0, r9
 80157e6:	6c27      	ldr	r7, [r4, #64]	; 0x40
 80157e8:	9304      	str	r3, [sp, #16]
 80157ea:	f006 fa83 	bl	801bcf4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80157ee:	2200      	movs	r2, #0
 80157f0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80157f4:	4611      	mov	r1, r2
 80157f6:	4628      	mov	r0, r5
 80157f8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80157fc:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015800:	f7f1 f828 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>
 8015804:	2301      	movs	r3, #1
 8015806:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801580a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801580e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015812:	2b00      	cmp	r3, #0
 8015814:	dd71      	ble.n	80158fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8015816:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801581a:	2b00      	cmp	r3, #0
 801581c:	dd6d      	ble.n	80158fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 801581e:	462a      	mov	r2, r5
 8015820:	ab0a      	add	r3, sp, #40	; 0x28
 8015822:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015826:	6851      	ldr	r1, [r2, #4]
 8015828:	c303      	stmia	r3!, {r0, r1}
 801582a:	4631      	mov	r1, r6
 801582c:	a80a      	add	r0, sp, #40	; 0x28
 801582e:	f7ff fbe5 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 8015832:	4b36      	ldr	r3, [pc, #216]	; (801590c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8015834:	2600      	movs	r6, #0
 8015836:	f9b3 2000 	ldrsh.w	r2, [r3]
 801583a:	4b35      	ldr	r3, [pc, #212]	; (8015910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801583c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015840:	aa0a      	add	r2, sp, #40	; 0x28
 8015842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015846:	960c      	str	r6, [sp, #48]	; 0x30
 8015848:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801584c:	ab08      	add	r3, sp, #32
 801584e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015852:	e883 0003 	stmia.w	r3, {r0, r1}
 8015856:	4618      	mov	r0, r3
 8015858:	a90c      	add	r1, sp, #48	; 0x30
 801585a:	f7ff fbcf 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 801585e:	a807      	add	r0, sp, #28
 8015860:	f006 fc00 	bl	801c064 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015864:	4680      	mov	r8, r0
 8015866:	f7f0 fa13 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 801586a:	6802      	ldr	r2, [r0, #0]
 801586c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801586e:	4790      	blx	r2
 8015870:	4580      	cmp	r8, r0
 8015872:	d049      	beq.n	8015908 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 8015874:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015876:	b150      	cbz	r0, 801588e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8015878:	a807      	add	r0, sp, #28
 801587a:	f006 fbf3 	bl	801c064 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801587e:	4606      	mov	r6, r0
 8015880:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015882:	6803      	ldr	r3, [r0, #0]
 8015884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015886:	4798      	blx	r3
 8015888:	1a33      	subs	r3, r6, r0
 801588a:	4258      	negs	r0, r3
 801588c:	4158      	adcs	r0, r3
 801588e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8015892:	2600      	movs	r6, #0
 8015894:	696b      	ldr	r3, [r5, #20]
 8015896:	a908      	add	r1, sp, #32
 8015898:	682a      	ldr	r2, [r5, #0]
 801589a:	4628      	mov	r0, r5
 801589c:	9305      	str	r3, [sp, #20]
 801589e:	616e      	str	r6, [r5, #20]
 80158a0:	6892      	ldr	r2, [r2, #8]
 80158a2:	4790      	blx	r2
 80158a4:	9b05      	ldr	r3, [sp, #20]
 80158a6:	4652      	mov	r2, sl
 80158a8:	4649      	mov	r1, r9
 80158aa:	616b      	str	r3, [r5, #20]
 80158ac:	4628      	mov	r0, r5
 80158ae:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80158b2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80158b6:	f7f0 ffcd 	bl	8006854 <_ZN8touchgfx8Drawable5setXYEss>
 80158ba:	9b04      	ldr	r3, [sp, #16]
 80158bc:	9a00      	ldr	r2, [sp, #0]
 80158be:	4620      	mov	r0, r4
 80158c0:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 80158c4:	4b14      	ldr	r3, [pc, #80]	; (8015918 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80158c6:	801a      	strh	r2, [r3, #0]
 80158c8:	9a01      	ldr	r2, [sp, #4]
 80158ca:	4b14      	ldr	r3, [pc, #80]	; (801591c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80158cc:	801a      	strh	r2, [r3, #0]
 80158ce:	9a02      	ldr	r2, [sp, #8]
 80158d0:	4b0e      	ldr	r3, [pc, #56]	; (801590c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80158d2:	801a      	strh	r2, [r3, #0]
 80158d4:	4b0e      	ldr	r3, [pc, #56]	; (8015910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80158d6:	9a03      	ldr	r2, [sp, #12]
 80158d8:	801a      	strh	r2, [r3, #0]
 80158da:	6823      	ldr	r3, [r4, #0]
 80158dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158de:	4798      	blx	r3
 80158e0:	6823      	ldr	r3, [r4, #0]
 80158e2:	4620      	mov	r0, r4
 80158e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158e6:	4798      	blx	r3
 80158e8:	b00f      	add	sp, #60	; 0x3c
 80158ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ee:	883b      	ldrh	r3, [r7, #0]
 80158f0:	f8ab 0000 	strh.w	r0, [fp]
 80158f4:	f8aa 3000 	strh.w	r3, [sl]
 80158f8:	e773      	b.n	80157e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80158fa:	462a      	mov	r2, r5
 80158fc:	ab0a      	add	r3, sp, #40	; 0x28
 80158fe:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015902:	6851      	ldr	r1, [r2, #4]
 8015904:	c303      	stmia	r3!, {r0, r1}
 8015906:	e794      	b.n	8015832 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 8015908:	4630      	mov	r0, r6
 801590a:	e7c0      	b.n	801588e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 801590c:	200566ec 	.word	0x200566ec
 8015910:	200566ee 	.word	0x200566ee
 8015914:	200566f0 	.word	0x200566f0
 8015918:	200566f2 	.word	0x200566f2
 801591c:	200566f4 	.word	0x200566f4

08015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015920:	4b07      	ldr	r3, [pc, #28]	; (8015940 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015922:	b510      	push	{r4, lr}
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	4604      	mov	r4, r0
 8015928:	b13b      	cbz	r3, 801593a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801592a:	6803      	ldr	r3, [r0, #0]
 801592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801592e:	4798      	blx	r3
 8015930:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015932:	4283      	cmp	r3, r0
 8015934:	d101      	bne.n	801593a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015936:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015938:	bd10      	pop	{r4, pc}
 801593a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801593c:	e7fc      	b.n	8015938 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801593e:	bf00      	nop
 8015940:	200566f6 	.word	0x200566f6

08015944 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015948:	b088      	sub	sp, #32
 801594a:	4692      	mov	sl, r2
 801594c:	461c      	mov	r4, r3
 801594e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015952:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8015956:	2500      	movs	r5, #0
 8015958:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 801595c:	4606      	mov	r6, r0
 801595e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8015962:	fb09 a404 	mla	r4, r9, r4, sl
 8015966:	9503      	str	r5, [sp, #12]
 8015968:	f8ad 8014 	strh.w	r8, [sp, #20]
 801596c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8015970:	f88d 501c 	strb.w	r5, [sp, #28]
 8015974:	e9cd 3100 	strd	r3, r1, [sp]
 8015978:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801597c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015980:	f7ff ffce 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015984:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8015988:	f8ad 901a 	strh.w	r9, [sp, #26]
 801598c:	f88d 501e 	strb.w	r5, [sp, #30]
 8015990:	9404      	str	r4, [sp, #16]
 8015992:	f88d 501d 	strb.w	r5, [sp, #29]
 8015996:	f1b8 0f00 	cmp.w	r8, #0
 801599a:	d000      	beq.n	801599e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 801599c:	b937      	cbnz	r7, 80159ac <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 801599e:	4b0d      	ldr	r3, [pc, #52]	; (80159d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 80159a0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80159a4:	4a0c      	ldr	r2, [pc, #48]	; (80159d8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80159a6:	480d      	ldr	r0, [pc, #52]	; (80159dc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80159a8:	f010 fa8a 	bl	8025ec0 <__assert_func>
 80159ac:	6833      	ldr	r3, [r6, #0]
 80159ae:	4630      	mov	r0, r6
 80159b0:	9c00      	ldr	r4, [sp, #0]
 80159b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159b4:	4798      	blx	r3
 80159b6:	4220      	tst	r0, r4
 80159b8:	d104      	bne.n	80159c4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 80159ba:	4b09      	ldr	r3, [pc, #36]	; (80159e0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80159bc:	f240 2105 	movw	r1, #517	; 0x205
 80159c0:	4a05      	ldr	r2, [pc, #20]	; (80159d8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80159c2:	e7f0      	b.n	80159a6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 80159c4:	6870      	ldr	r0, [r6, #4]
 80159c6:	4669      	mov	r1, sp
 80159c8:	6803      	ldr	r3, [r0, #0]
 80159ca:	685b      	ldr	r3, [r3, #4]
 80159cc:	4798      	blx	r3
 80159ce:	b008      	add	sp, #32
 80159d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159d4:	0802c08f 	.word	0x0802c08f
 80159d8:	0802c3bc 	.word	0x0802c3bc
 80159dc:	0802c241 	.word	0x0802c241
 80159e0:	0802c0c7 	.word	0x0802c0c7

080159e4 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80159e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159e8:	b089      	sub	sp, #36	; 0x24
 80159ea:	4693      	mov	fp, r2
 80159ec:	461d      	mov	r5, r3
 80159ee:	2400      	movs	r4, #0
 80159f0:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 80159f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80159f8:	468a      	mov	sl, r1
 80159fa:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 80159fe:	fb09 b505 	mla	r5, r9, r5, fp
 8015a02:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8015a06:	4606      	mov	r6, r0
 8015a08:	9403      	str	r4, [sp, #12]
 8015a0a:	e9cd 3400 	strd	r3, r4, [sp]
 8015a0e:	f7ff ff87 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015a12:	f8ad 8014 	strh.w	r8, [sp, #20]
 8015a16:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015a1a:	f8ad 7016 	strh.w	r7, [sp, #22]
 8015a1e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8015a22:	9504      	str	r5, [sp, #16]
 8015a24:	f8ad 901a 	strh.w	r9, [sp, #26]
 8015a28:	f8cd a00c 	str.w	sl, [sp, #12]
 8015a2c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015a30:	f88d 401e 	strb.w	r4, [sp, #30]
 8015a34:	f1b8 0f00 	cmp.w	r8, #0
 8015a38:	d000      	beq.n	8015a3c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 8015a3a:	b937      	cbnz	r7, 8015a4a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 8015a3c:	4b0d      	ldr	r3, [pc, #52]	; (8015a74 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 8015a3e:	f240 2119 	movw	r1, #537	; 0x219
 8015a42:	4a0d      	ldr	r2, [pc, #52]	; (8015a78 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8015a44:	480d      	ldr	r0, [pc, #52]	; (8015a7c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8015a46:	f010 fa3b 	bl	8025ec0 <__assert_func>
 8015a4a:	6833      	ldr	r3, [r6, #0]
 8015a4c:	4630      	mov	r0, r6
 8015a4e:	9c00      	ldr	r4, [sp, #0]
 8015a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a52:	4798      	blx	r3
 8015a54:	4220      	tst	r0, r4
 8015a56:	d104      	bne.n	8015a62 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 8015a58:	4b09      	ldr	r3, [pc, #36]	; (8015a80 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8015a5a:	f240 211a 	movw	r1, #538	; 0x21a
 8015a5e:	4a06      	ldr	r2, [pc, #24]	; (8015a78 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8015a60:	e7f0      	b.n	8015a44 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8015a62:	6870      	ldr	r0, [r6, #4]
 8015a64:	4669      	mov	r1, sp
 8015a66:	6803      	ldr	r3, [r0, #0]
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	4798      	blx	r3
 8015a6c:	b009      	add	sp, #36	; 0x24
 8015a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a72:	bf00      	nop
 8015a74:	0802c10c 	.word	0x0802c10c
 8015a78:	0802c432 	.word	0x0802c432
 8015a7c:	0802c241 	.word	0x0802c241
 8015a80:	0802c144 	.word	0x0802c144

08015a84 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015a84:	b508      	push	{r3, lr}
 8015a86:	290d      	cmp	r1, #13
 8015a88:	d817      	bhi.n	8015aba <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015a8a:	e8df f001 	tbb	[pc, r1]
 8015a8e:	090b      	.short	0x090b
 8015a90:	0d0d0d07 	.word	0x0d0d0d07
 8015a94:	1414140d 	.word	0x1414140d
 8015a98:	0d0d1414 	.word	0x0d0d1414
 8015a9c:	2020      	movs	r0, #32
 8015a9e:	bd08      	pop	{r3, pc}
 8015aa0:	2018      	movs	r0, #24
 8015aa2:	e7fc      	b.n	8015a9e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015aa4:	2010      	movs	r0, #16
 8015aa6:	e7fa      	b.n	8015a9e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015aa8:	4b05      	ldr	r3, [pc, #20]	; (8015ac0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015aaa:	f240 2177 	movw	r1, #631	; 0x277
 8015aae:	4a05      	ldr	r2, [pc, #20]	; (8015ac4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015ab0:	4805      	ldr	r0, [pc, #20]	; (8015ac8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015ab2:	f010 fa05 	bl	8025ec0 <__assert_func>
 8015ab6:	2008      	movs	r0, #8
 8015ab8:	e7f1      	b.n	8015a9e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015aba:	2000      	movs	r0, #0
 8015abc:	e7ef      	b.n	8015a9e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015abe:	bf00      	nop
 8015ac0:	0802c2bd 	.word	0x0802c2bd
 8015ac4:	0802c74b 	.word	0x0802c74b
 8015ac8:	0802c241 	.word	0x0802c241

08015acc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015acc:	b570      	push	{r4, r5, r6, lr}
 8015ace:	460d      	mov	r5, r1
 8015ad0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015ad4:	4616      	mov	r6, r2
 8015ad6:	461c      	mov	r4, r3
 8015ad8:	f7ff ffd4 	bl	8015a84 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015adc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015ae0:	10c0      	asrs	r0, r0, #3
 8015ae2:	fb06 5101 	mla	r1, r6, r1, r5
 8015ae6:	fb00 4001 	mla	r0, r0, r1, r4
 8015aea:	bd70      	pop	{r4, r5, r6, pc}

08015aec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015af0:	b08a      	sub	sp, #40	; 0x28
 8015af2:	f04f 0c00 	mov.w	ip, #0
 8015af6:	4604      	mov	r4, r0
 8015af8:	469a      	mov	sl, r3
 8015afa:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8015afe:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8015b02:	2d0b      	cmp	r5, #11
 8015b04:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8015b08:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015b0c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015b10:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015b14:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8015b18:	f8cd c014 	str.w	ip, [sp, #20]
 8015b1c:	d129      	bne.n	8015b72 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 8015b1e:	2080      	movs	r0, #128	; 0x80
 8015b20:	9204      	str	r2, [sp, #16]
 8015b22:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015b26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015b2a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015b2e:	f8ad 701c 	strh.w	r7, [sp, #28]
 8015b32:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015b36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b3a:	4620      	mov	r0, r4
 8015b3c:	f7ff fef0 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015b40:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015b44:	4603      	mov	r3, r0
 8015b46:	4651      	mov	r1, sl
 8015b48:	4620      	mov	r0, r4
 8015b4a:	e9cd 9800 	strd	r9, r8, [sp]
 8015b4e:	f7ff ffbd 	bl	8015acc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015b52:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8015b56:	9006      	str	r0, [sp, #24]
 8015b58:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015b5c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8015b60:	b107      	cbz	r7, 8015b64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8015b62:	b9d6      	cbnz	r6, 8015b9a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8015b64:	4b17      	ldr	r3, [pc, #92]	; (8015bc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015b66:	f240 11cf 	movw	r1, #463	; 0x1cf
 8015b6a:	4a17      	ldr	r2, [pc, #92]	; (8015bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015b6c:	4817      	ldr	r0, [pc, #92]	; (8015bcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8015b6e:	f010 f9a7 	bl	8025ec0 <__assert_func>
 8015b72:	2d02      	cmp	r5, #2
 8015b74:	d108      	bne.n	8015b88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 8015b76:	2bff      	cmp	r3, #255	; 0xff
 8015b78:	d104      	bne.n	8015b84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 8015b7a:	2800      	cmp	r0, #0
 8015b7c:	bf14      	ite	ne
 8015b7e:	2040      	movne	r0, #64	; 0x40
 8015b80:	2020      	moveq	r0, #32
 8015b82:	e7cd      	b.n	8015b20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015b84:	2040      	movs	r0, #64	; 0x40
 8015b86:	e7cb      	b.n	8015b20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015b88:	2bff      	cmp	r3, #255	; 0xff
 8015b8a:	d104      	bne.n	8015b96 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 8015b8c:	2800      	cmp	r0, #0
 8015b8e:	bf14      	ite	ne
 8015b90:	2004      	movne	r0, #4
 8015b92:	2001      	moveq	r0, #1
 8015b94:	e7c4      	b.n	8015b20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015b96:	2004      	movs	r0, #4
 8015b98:	e7c2      	b.n	8015b20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8015b9a:	6823      	ldr	r3, [r4, #0]
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	9d02      	ldr	r5, [sp, #8]
 8015ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ba2:	4798      	blx	r3
 8015ba4:	4228      	tst	r0, r5
 8015ba6:	d104      	bne.n	8015bb2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 8015ba8:	4b09      	ldr	r3, [pc, #36]	; (8015bd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 8015baa:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8015bae:	4a06      	ldr	r2, [pc, #24]	; (8015bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015bb0:	e7dc      	b.n	8015b6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 8015bb2:	6860      	ldr	r0, [r4, #4]
 8015bb4:	a902      	add	r1, sp, #8
 8015bb6:	6803      	ldr	r3, [r0, #0]
 8015bb8:	685b      	ldr	r3, [r3, #4]
 8015bba:	4798      	blx	r3
 8015bbc:	b00a      	add	sp, #40	; 0x28
 8015bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bc2:	bf00      	nop
 8015bc4:	0802c08f 	.word	0x0802c08f
 8015bc8:	0802c5e5 	.word	0x0802c5e5
 8015bcc:	0802c241 	.word	0x0802c241
 8015bd0:	0802c0c7 	.word	0x0802c0c7

08015bd4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8015bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd8:	b08b      	sub	sp, #44	; 0x2c
 8015bda:	469b      	mov	fp, r3
 8015bdc:	4604      	mov	r4, r0
 8015bde:	4692      	mov	sl, r2
 8015be0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015be4:	2600      	movs	r6, #0
 8015be6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8015bea:	4689      	mov	r9, r1
 8015bec:	2fff      	cmp	r7, #255	; 0xff
 8015bee:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015bf2:	9605      	str	r6, [sp, #20]
 8015bf4:	bf14      	ite	ne
 8015bf6:	2308      	movne	r3, #8
 8015bf8:	2302      	moveq	r3, #2
 8015bfa:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8015bfe:	f7ff fe8f 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015c02:	465a      	mov	r2, fp
 8015c04:	4603      	mov	r3, r0
 8015c06:	4651      	mov	r1, sl
 8015c08:	4620      	mov	r0, r4
 8015c0a:	e9cd 8500 	strd	r8, r5, [sp]
 8015c0e:	f7ff ff5d 	bl	8015acc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015c12:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015c16:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015c1a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015c1e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015c22:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8015c26:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015c2a:	6823      	ldr	r3, [r4, #0]
 8015c2c:	9d02      	ldr	r5, [sp, #8]
 8015c2e:	9006      	str	r0, [sp, #24]
 8015c30:	4620      	mov	r0, r4
 8015c32:	f8ad 6020 	strh.w	r6, [sp, #32]
 8015c36:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8015c3a:	f8cd 9014 	str.w	r9, [sp, #20]
 8015c3e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c44:	4798      	blx	r3
 8015c46:	4228      	tst	r0, r5
 8015c48:	d106      	bne.n	8015c58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8015c4a:	4b07      	ldr	r3, [pc, #28]	; (8015c68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015c4c:	f240 212e 	movw	r1, #558	; 0x22e
 8015c50:	4a06      	ldr	r2, [pc, #24]	; (8015c6c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015c52:	4807      	ldr	r0, [pc, #28]	; (8015c70 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015c54:	f010 f934 	bl	8025ec0 <__assert_func>
 8015c58:	6860      	ldr	r0, [r4, #4]
 8015c5a:	a902      	add	r1, sp, #8
 8015c5c:	6803      	ldr	r3, [r0, #0]
 8015c5e:	685b      	ldr	r3, [r3, #4]
 8015c60:	4798      	blx	r3
 8015c62:	b00b      	add	sp, #44	; 0x2c
 8015c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c68:	0802c0c7 	.word	0x0802c0c7
 8015c6c:	0802c6b6 	.word	0x0802c6b6
 8015c70:	0802c241 	.word	0x0802c241

08015c74 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015c74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015c78:	461f      	mov	r7, r3
 8015c7a:	4b0b      	ldr	r3, [pc, #44]	; (8015ca8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015c7c:	460d      	mov	r5, r1
 8015c7e:	4616      	mov	r6, r2
 8015c80:	f8b3 8000 	ldrh.w	r8, [r3]
 8015c84:	4604      	mov	r4, r0
 8015c86:	f7f0 f803 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8015c8a:	6803      	ldr	r3, [r0, #0]
 8015c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c8e:	4798      	blx	r3
 8015c90:	463b      	mov	r3, r7
 8015c92:	4632      	mov	r2, r6
 8015c94:	4629      	mov	r1, r5
 8015c96:	e9cd 8000 	strd	r8, r0, [sp]
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	f7ff ff16 	bl	8015acc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015ca0:	b002      	add	sp, #8
 8015ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ca6:	bf00      	nop
 8015ca8:	200566f2 	.word	0x200566f2

08015cac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8015cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb0:	4698      	mov	r8, r3
 8015cb2:	b088      	sub	sp, #32
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	4617      	mov	r7, r2
 8015cb8:	4604      	mov	r4, r0
 8015cba:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015cbe:	9303      	str	r3, [sp, #12]
 8015cc0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015cc4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015cc8:	f8ad 6014 	strh.w	r6, [sp, #20]
 8015ccc:	f8ad 5016 	strh.w	r5, [sp, #22]
 8015cd0:	e9cd 3100 	strd	r3, r1, [sp]
 8015cd4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015cd8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015cdc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015ce0:	f88d 301c 	strb.w	r3, [sp, #28]
 8015ce4:	f7ff fe1c 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015ce8:	4642      	mov	r2, r8
 8015cea:	4603      	mov	r3, r0
 8015cec:	4639      	mov	r1, r7
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f7ff ffc0 	bl	8015c74 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015cf4:	4b16      	ldr	r3, [pc, #88]	; (8015d50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8015cf6:	9004      	str	r0, [sp, #16]
 8015cf8:	881b      	ldrh	r3, [r3, #0]
 8015cfa:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015cfe:	f7ef ffc7 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8015d02:	6803      	ldr	r3, [r0, #0]
 8015d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d06:	4798      	blx	r3
 8015d08:	f88d 001e 	strb.w	r0, [sp, #30]
 8015d0c:	f88d 001d 	strb.w	r0, [sp, #29]
 8015d10:	b106      	cbz	r6, 8015d14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015d12:	b935      	cbnz	r5, 8015d22 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015d14:	4b0f      	ldr	r3, [pc, #60]	; (8015d54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8015d16:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8015d1a:	4a0f      	ldr	r2, [pc, #60]	; (8015d58 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015d1c:	480f      	ldr	r0, [pc, #60]	; (8015d5c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8015d1e:	f010 f8cf 	bl	8025ec0 <__assert_func>
 8015d22:	6823      	ldr	r3, [r4, #0]
 8015d24:	4620      	mov	r0, r4
 8015d26:	9d00      	ldr	r5, [sp, #0]
 8015d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d2a:	4798      	blx	r3
 8015d2c:	4228      	tst	r0, r5
 8015d2e:	d104      	bne.n	8015d3a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015d30:	4b0b      	ldr	r3, [pc, #44]	; (8015d60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015d32:	f240 11ed 	movw	r1, #493	; 0x1ed
 8015d36:	4a08      	ldr	r2, [pc, #32]	; (8015d58 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015d38:	e7f0      	b.n	8015d1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8015d3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d3c:	4669      	mov	r1, sp
 8015d3e:	6860      	ldr	r0, [r4, #4]
 8015d40:	9303      	str	r3, [sp, #12]
 8015d42:	6803      	ldr	r3, [r0, #0]
 8015d44:	685b      	ldr	r3, [r3, #4]
 8015d46:	4798      	blx	r3
 8015d48:	b008      	add	sp, #32
 8015d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d4e:	bf00      	nop
 8015d50:	200566f2 	.word	0x200566f2
 8015d54:	0802c08f 	.word	0x0802c08f
 8015d58:	0802c497 	.word	0x0802c497
 8015d5c:	0802c241 	.word	0x0802c241
 8015d60:	0802c0c7 	.word	0x0802c0c7

08015d64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015d64:	b570      	push	{r4, r5, r6, lr}
 8015d66:	b08a      	sub	sp, #40	; 0x28
 8015d68:	4604      	mov	r4, r0
 8015d6a:	466b      	mov	r3, sp
 8015d6c:	e883 0006 	stmia.w	r3, {r1, r2}
 8015d70:	4b1f      	ldr	r3, [pc, #124]	; (8015df0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015d72:	781b      	ldrb	r3, [r3, #0]
 8015d74:	b933      	cbnz	r3, 8015d84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8015d76:	4b1f      	ldr	r3, [pc, #124]	; (8015df4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015d78:	f240 213f 	movw	r1, #575	; 0x23f
 8015d7c:	4a1e      	ldr	r2, [pc, #120]	; (8015df8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8015d7e:	481f      	ldr	r0, [pc, #124]	; (8015dfc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015d80:	f010 f89e 	bl	8025ec0 <__assert_func>
 8015d84:	2300      	movs	r3, #0
 8015d86:	f8bd 5000 	ldrh.w	r5, [sp]
 8015d8a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015d8e:	9305      	str	r3, [sp, #20]
 8015d90:	2301      	movs	r3, #1
 8015d92:	9302      	str	r3, [sp, #8]
 8015d94:	6803      	ldr	r3, [r0, #0]
 8015d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d98:	4798      	blx	r3
 8015d9a:	4632      	mov	r2, r6
 8015d9c:	4629      	mov	r1, r5
 8015d9e:	4603      	mov	r3, r0
 8015da0:	4620      	mov	r0, r4
 8015da2:	f7ff ff67 	bl	8015c74 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015da6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015da8:	9003      	str	r0, [sp, #12]
 8015daa:	9306      	str	r3, [sp, #24]
 8015dac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015db0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015db4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015db8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015dbc:	4b10      	ldr	r3, [pc, #64]	; (8015e00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015dbe:	881b      	ldrh	r3, [r3, #0]
 8015dc0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015dc4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015dc8:	f7ef ff62 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8015dcc:	6803      	ldr	r3, [r0, #0]
 8015dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd0:	4798      	blx	r3
 8015dd2:	23ff      	movs	r3, #255	; 0xff
 8015dd4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015dd8:	a902      	add	r1, sp, #8
 8015dda:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015dde:	6860      	ldr	r0, [r4, #4]
 8015de0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015de4:	6803      	ldr	r3, [r0, #0]
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	4798      	blx	r3
 8015dea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015dec:	b00a      	add	sp, #40	; 0x28
 8015dee:	bd70      	pop	{r4, r5, r6, pc}
 8015df0:	200566f7 	.word	0x200566f7
 8015df4:	0802c18e 	.word	0x0802c18e
 8015df8:	0802c53b 	.word	0x0802c53b
 8015dfc:	0802c241 	.word	0x0802c241
 8015e00:	200566f2 	.word	0x200566f2

08015e04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e06:	b08b      	sub	sp, #44	; 0x2c
 8015e08:	4604      	mov	r4, r0
 8015e0a:	466d      	mov	r5, sp
 8015e0c:	e885 0006 	stmia.w	r5, {r1, r2}
 8015e10:	461d      	mov	r5, r3
 8015e12:	2300      	movs	r3, #0
 8015e14:	f8bd 6000 	ldrh.w	r6, [sp]
 8015e18:	9305      	str	r3, [sp, #20]
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015e20:	9302      	str	r3, [sp, #8]
 8015e22:	6803      	ldr	r3, [r0, #0]
 8015e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e26:	4798      	blx	r3
 8015e28:	463a      	mov	r2, r7
 8015e2a:	4631      	mov	r1, r6
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	4620      	mov	r0, r4
 8015e30:	f7ff ff20 	bl	8015c74 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015e34:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015e38:	9003      	str	r0, [sp, #12]
 8015e3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015e3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015e42:	9506      	str	r5, [sp, #24]
 8015e44:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015e48:	4b0d      	ldr	r3, [pc, #52]	; (8015e80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8015e4a:	881b      	ldrh	r3, [r3, #0]
 8015e4c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015e50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e52:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015e56:	f7ef ff1b 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8015e5a:	6803      	ldr	r3, [r0, #0]
 8015e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e5e:	4798      	blx	r3
 8015e60:	23ff      	movs	r3, #255	; 0xff
 8015e62:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015e66:	a902      	add	r1, sp, #8
 8015e68:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015e6c:	6860      	ldr	r0, [r4, #4]
 8015e6e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015e72:	6803      	ldr	r3, [r0, #0]
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	4798      	blx	r3
 8015e78:	4628      	mov	r0, r5
 8015e7a:	b00b      	add	sp, #44	; 0x2c
 8015e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	200566f2 	.word	0x200566f2

08015e84 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8015e8a:	4604      	mov	r4, r0
 8015e8c:	b19b      	cbz	r3, 8015eb6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015e8e:	2002      	movs	r0, #2
 8015e90:	f7ed f9b0 	bl	80031f4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015e94:	2300      	movs	r3, #0
 8015e96:	4620      	mov	r0, r4
 8015e98:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015e9c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015ea0:	6823      	ldr	r3, [r4, #0]
 8015ea2:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8015ea6:	f7ff fd3b 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015eaa:	4601      	mov	r1, r0
 8015eac:	4620      	mov	r0, r4
 8015eae:	462b      	mov	r3, r5
 8015eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015eb4:	4718      	bx	r3
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}

08015eb8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015eb8:	b538      	push	{r3, r4, r5, lr}
 8015eba:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8015ebe:	4604      	mov	r4, r0
 8015ec0:	460d      	mov	r5, r1
 8015ec2:	428a      	cmp	r2, r1
 8015ec4:	d008      	beq.n	8015ed8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8015ec6:	2a01      	cmp	r2, #1
 8015ec8:	6803      	ldr	r3, [r0, #0]
 8015eca:	d106      	bne.n	8015eda <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8015ecc:	b929      	cbnz	r1, 8015eda <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8015ece:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015ed2:	4798      	blx	r3
 8015ed4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8015ed8:	bd38      	pop	{r3, r4, r5, pc}
 8015eda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015ede:	4620      	mov	r0, r4
 8015ee0:	e7f7      	b.n	8015ed2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08015ee4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015ee4:	4b0d      	ldr	r3, [pc, #52]	; (8015f1c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8015ee6:	b510      	push	{r4, lr}
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	4604      	mov	r4, r0
 8015eec:	b95b      	cbnz	r3, 8015f06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015eee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015ef2:	2b02      	cmp	r3, #2
 8015ef4:	d007      	beq.n	8015f06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015ef6:	6840      	ldr	r0, [r0, #4]
 8015ef8:	f000 f93a 	bl	8016170 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015efc:	b118      	cbz	r0, 8015f06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015efe:	6862      	ldr	r2, [r4, #4]
 8015f00:	7a53      	ldrb	r3, [r2, #9]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d0fc      	beq.n	8015f00 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015f06:	f7ed fbc1 	bl	800368c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015f0a:	4620      	mov	r0, r4
 8015f0c:	2100      	movs	r1, #0
 8015f0e:	f7ff ffd3 	bl	8015eb8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015f12:	4620      	mov	r0, r4
 8015f14:	f7ff fd04 	bl	8015920 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015f18:	bd10      	pop	{r4, pc}
 8015f1a:	bf00      	nop
 8015f1c:	200566f6 	.word	0x200566f6

08015f20 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015f20:	4770      	bx	lr

08015f22 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015f22:	2000      	movs	r0, #0
 8015f24:	4770      	bx	lr

08015f26 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015f26:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015f2a:	1a13      	subs	r3, r2, r0
 8015f2c:	4258      	negs	r0, r3
 8015f2e:	4158      	adcs	r0, r3
 8015f30:	4770      	bx	lr

08015f32 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015f32:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015f36:	1a9b      	subs	r3, r3, r2
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	bfdc      	itt	le
 8015f3c:	6882      	ldrle	r2, [r0, #8]
 8015f3e:	189b      	addle	r3, r3, r2
 8015f40:	2b01      	cmp	r3, #1
 8015f42:	bfcc      	ite	gt
 8015f44:	2000      	movgt	r0, #0
 8015f46:	2001      	movle	r0, #1
 8015f48:	4770      	bx	lr

08015f4a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015f4a:	6902      	ldr	r2, [r0, #16]
 8015f4c:	6840      	ldr	r0, [r0, #4]
 8015f4e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8015f52:	4770      	bx	lr

08015f54 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015f54:	6803      	ldr	r3, [r0, #0]
 8015f56:	691b      	ldr	r3, [r3, #16]
 8015f58:	4718      	bx	r3

08015f5a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015f5a:	4770      	bx	lr

08015f5c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015f5c:	4770      	bx	lr
	...

08015f60 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015f60:	2301      	movs	r3, #1
 8015f62:	b570      	push	{r4, r5, r6, lr}
 8015f64:	7203      	strb	r3, [r0, #8]
 8015f66:	4604      	mov	r4, r0
 8015f68:	6840      	ldr	r0, [r0, #4]
 8015f6a:	6803      	ldr	r3, [r0, #0]
 8015f6c:	699b      	ldr	r3, [r3, #24]
 8015f6e:	4798      	blx	r3
 8015f70:	6803      	ldr	r3, [r0, #0]
 8015f72:	4605      	mov	r5, r0
 8015f74:	2b40      	cmp	r3, #64	; 0x40
 8015f76:	d039      	beq.n	8015fec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015f78:	d815      	bhi.n	8015fa6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8015f7a:	2b04      	cmp	r3, #4
 8015f7c:	d022      	beq.n	8015fc4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015f7e:	d808      	bhi.n	8015f92 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015f80:	2b01      	cmp	r3, #1
 8015f82:	d033      	beq.n	8015fec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015f84:	2b02      	cmp	r3, #2
 8015f86:	d108      	bne.n	8015f9a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8015f88:	6823      	ldr	r3, [r4, #0]
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f8e:	4798      	blx	r3
 8015f90:	e025      	b.n	8015fde <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8015f92:	2b08      	cmp	r3, #8
 8015f94:	d01e      	beq.n	8015fd4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8015f96:	2b20      	cmp	r3, #32
 8015f98:	d028      	beq.n	8015fec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015f9a:	4b17      	ldr	r3, [pc, #92]	; (8015ff8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8015f9c:	218b      	movs	r1, #139	; 0x8b
 8015f9e:	4a17      	ldr	r2, [pc, #92]	; (8015ffc <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8015fa0:	4817      	ldr	r0, [pc, #92]	; (8016000 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8015fa2:	f00f ff8d 	bl	8025ec0 <__assert_func>
 8015fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015faa:	d01f      	beq.n	8015fec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015fac:	d804      	bhi.n	8015fb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8015fae:	2b80      	cmp	r3, #128	; 0x80
 8015fb0:	d01c      	beq.n	8015fec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015fb6:	e7ef      	b.n	8015f98 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8015fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015fbc:	d016      	beq.n	8015fec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015fc2:	e7e0      	b.n	8015f86 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015fc4:	6823      	ldr	r3, [r4, #0]
 8015fc6:	7f01      	ldrb	r1, [r0, #28]
 8015fc8:	4620      	mov	r0, r4
 8015fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fcc:	4798      	blx	r3
 8015fce:	6823      	ldr	r3, [r4, #0]
 8015fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fd2:	e006      	b.n	8015fe2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	7f01      	ldrb	r1, [r0, #28]
 8015fd8:	4620      	mov	r0, r4
 8015fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fdc:	4798      	blx	r3
 8015fde:	6823      	ldr	r3, [r4, #0]
 8015fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fe2:	4629      	mov	r1, r5
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fea:	4718      	bx	r3
 8015fec:	6823      	ldr	r3, [r4, #0]
 8015fee:	4620      	mov	r0, r4
 8015ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ff2:	4798      	blx	r3
 8015ff4:	e7eb      	b.n	8015fce <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8015ff6:	bf00      	nop
 8015ff8:	0802c794 	.word	0x0802c794
 8015ffc:	0802c8a4 	.word	0x0802c8a4
 8016000:	0802c7b9 	.word	0x0802c7b9

08016004 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016004:	b570      	push	{r4, r5, r6, lr}
 8016006:	4604      	mov	r4, r0
 8016008:	460e      	mov	r6, r1
 801600a:	6860      	ldr	r0, [r4, #4]
 801600c:	6803      	ldr	r3, [r0, #0]
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	4798      	blx	r3
 8016012:	2800      	cmp	r0, #0
 8016014:	d1f9      	bne.n	801600a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016016:	4d0d      	ldr	r5, [pc, #52]	; (801604c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016018:	6828      	ldr	r0, [r5, #0]
 801601a:	6803      	ldr	r3, [r0, #0]
 801601c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801601e:	4798      	blx	r3
 8016020:	f7ed fb4e 	bl	80036c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016024:	6828      	ldr	r0, [r5, #0]
 8016026:	2101      	movs	r1, #1
 8016028:	f7ff ff46 	bl	8015eb8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801602c:	6860      	ldr	r0, [r4, #4]
 801602e:	4631      	mov	r1, r6
 8016030:	6803      	ldr	r3, [r0, #0]
 8016032:	689b      	ldr	r3, [r3, #8]
 8016034:	4798      	blx	r3
 8016036:	6823      	ldr	r3, [r4, #0]
 8016038:	4620      	mov	r0, r4
 801603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801603c:	4798      	blx	r3
 801603e:	6828      	ldr	r0, [r5, #0]
 8016040:	6803      	ldr	r3, [r0, #0]
 8016042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016048:	4718      	bx	r3
 801604a:	bf00      	nop
 801604c:	200566f8 	.word	0x200566f8

08016050 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016050:	b508      	push	{r3, lr}
 8016052:	f7ed fb1b 	bl	800368c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801605a:	f7ed bb25 	b.w	80036a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801605e <_ZN8touchgfx13DMA_Interface5startEv>:
 801605e:	b510      	push	{r4, lr}
 8016060:	4604      	mov	r4, r0
 8016062:	6840      	ldr	r0, [r0, #4]
 8016064:	6803      	ldr	r3, [r0, #0]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4798      	blx	r3
 801606a:	b948      	cbnz	r0, 8016080 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801606c:	7a63      	ldrb	r3, [r4, #9]
 801606e:	b13b      	cbz	r3, 8016080 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016070:	7a23      	ldrb	r3, [r4, #8]
 8016072:	b92b      	cbnz	r3, 8016080 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016074:	6823      	ldr	r3, [r4, #0]
 8016076:	4620      	mov	r0, r4
 8016078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801607a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801607e:	4718      	bx	r3
 8016080:	bd10      	pop	{r4, pc}
	...

08016084 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016084:	b510      	push	{r4, lr}
 8016086:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801608a:	1b12      	subs	r2, r2, r4
 801608c:	2a00      	cmp	r2, #0
 801608e:	bfdc      	itt	le
 8016090:	6883      	ldrle	r3, [r0, #8]
 8016092:	18d2      	addle	r2, r2, r3
 8016094:	2a01      	cmp	r2, #1
 8016096:	dd18      	ble.n	80160ca <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016098:	6843      	ldr	r3, [r0, #4]
 801609a:	f101 021c 	add.w	r2, r1, #28
 801609e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80160a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80160a6:	4291      	cmp	r1, r2
 80160a8:	f843 4b04 	str.w	r4, [r3], #4
 80160ac:	d1f9      	bne.n	80160a2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80160ae:	880a      	ldrh	r2, [r1, #0]
 80160b0:	801a      	strh	r2, [r3, #0]
 80160b2:	788a      	ldrb	r2, [r1, #2]
 80160b4:	709a      	strb	r2, [r3, #2]
 80160b6:	68c3      	ldr	r3, [r0, #12]
 80160b8:	6882      	ldr	r2, [r0, #8]
 80160ba:	f3bf 8f5b 	dmb	ish
 80160be:	3301      	adds	r3, #1
 80160c0:	429a      	cmp	r2, r3
 80160c2:	bfd8      	it	le
 80160c4:	1a9b      	suble	r3, r3, r2
 80160c6:	60c3      	str	r3, [r0, #12]
 80160c8:	bd10      	pop	{r4, pc}
 80160ca:	4b03      	ldr	r3, [pc, #12]	; (80160d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80160cc:	2139      	movs	r1, #57	; 0x39
 80160ce:	4a03      	ldr	r2, [pc, #12]	; (80160dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80160d0:	4803      	ldr	r0, [pc, #12]	; (80160e0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80160d2:	f00f fef5 	bl	8025ec0 <__assert_func>
 80160d6:	bf00      	nop
 80160d8:	0802c7df 	.word	0x0802c7df
 80160dc:	0802c8d4 	.word	0x0802c8d4
 80160e0:	0802c7b9 	.word	0x0802c7b9

080160e4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80160e4:	b510      	push	{r4, lr}
 80160e6:	6803      	ldr	r3, [r0, #0]
 80160e8:	4604      	mov	r4, r0
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	4798      	blx	r3
 80160ee:	b128      	cbz	r0, 80160fc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80160f0:	4b07      	ldr	r3, [pc, #28]	; (8016110 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80160f2:	213f      	movs	r1, #63	; 0x3f
 80160f4:	4a07      	ldr	r2, [pc, #28]	; (8016114 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80160f6:	4808      	ldr	r0, [pc, #32]	; (8016118 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80160f8:	f00f fee2 	bl	8025ec0 <__assert_func>
 80160fc:	6923      	ldr	r3, [r4, #16]
 80160fe:	68a2      	ldr	r2, [r4, #8]
 8016100:	f3bf 8f5b 	dmb	ish
 8016104:	3301      	adds	r3, #1
 8016106:	429a      	cmp	r2, r3
 8016108:	bfd8      	it	le
 801610a:	1a9b      	suble	r3, r3, r2
 801610c:	6123      	str	r3, [r4, #16]
 801610e:	bd10      	pop	{r4, pc}
 8016110:	0802c802 	.word	0x0802c802
 8016114:	0802c922 	.word	0x0802c922
 8016118:	0802c7b9 	.word	0x0802c7b9

0801611c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801611c:	b570      	push	{r4, r5, r6, lr}
 801611e:	4604      	mov	r4, r0
 8016120:	6840      	ldr	r0, [r0, #4]
 8016122:	6803      	ldr	r3, [r0, #0]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	4798      	blx	r3
 8016128:	4605      	mov	r5, r0
 801612a:	b930      	cbnz	r0, 801613a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801612c:	7a23      	ldrb	r3, [r4, #8]
 801612e:	b123      	cbz	r3, 801613a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016130:	6860      	ldr	r0, [r4, #4]
 8016132:	6803      	ldr	r3, [r0, #0]
 8016134:	695b      	ldr	r3, [r3, #20]
 8016136:	4798      	blx	r3
 8016138:	7225      	strb	r5, [r4, #8]
 801613a:	6860      	ldr	r0, [r4, #4]
 801613c:	6803      	ldr	r3, [r0, #0]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	4798      	blx	r3
 8016142:	b928      	cbnz	r0, 8016150 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016144:	6823      	ldr	r3, [r4, #0]
 8016146:	4620      	mov	r0, r4
 8016148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801614a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801614e:	4718      	bx	r3
 8016150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016154:	f7ed bac0 	b.w	80036d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016158 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016158:	b510      	push	{r4, lr}
 801615a:	6082      	str	r2, [r0, #8]
 801615c:	2200      	movs	r2, #0
 801615e:	4c03      	ldr	r4, [pc, #12]	; (801616c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016160:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016164:	e9c0 4100 	strd	r4, r1, [r0]
 8016168:	bd10      	pop	{r4, pc}
 801616a:	bf00      	nop
 801616c:	0802c888 	.word	0x0802c888

08016170 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016170:	6840      	ldr	r0, [r0, #4]
 8016172:	6803      	ldr	r3, [r0, #0]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	4718      	bx	r3

08016178 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016178:	2001      	movs	r0, #1
 801617a:	4770      	bx	lr

0801617c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801617c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016180:	460d      	mov	r5, r1
 8016182:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016186:	b085      	sub	sp, #20
 8016188:	4690      	mov	r8, r2
 801618a:	4411      	add	r1, r2
 801618c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016190:	4699      	mov	r9, r3
 8016192:	6803      	ldr	r3, [r0, #0]
 8016194:	60c1      	str	r1, [r0, #12]
 8016196:	4604      	mov	r4, r0
 8016198:	990c      	ldr	r1, [sp, #48]	; 0x30
 801619a:	440a      	add	r2, r1
 801619c:	6102      	str	r2, [r0, #16]
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80161a4:	4798      	blx	r3
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d03a      	beq.n	8016220 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 80161aa:	44c8      	add	r8, r9
 80161ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80161b0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80161b4:	4445      	add	r5, r8
 80161b6:	442e      	add	r6, r5
 80161b8:	6823      	ldr	r3, [r4, #0]
 80161ba:	f10d 020f 	add.w	r2, sp, #15
 80161be:	a903      	add	r1, sp, #12
 80161c0:	4620      	mov	r0, r4
 80161c2:	9200      	str	r2, [sp, #0]
 80161c4:	f10d 020d 	add.w	r2, sp, #13
 80161c8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80161cc:	f10d 030e 	add.w	r3, sp, #14
 80161d0:	47c0      	blx	r8
 80161d2:	b1f0      	cbz	r0, 8016212 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 80161d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80161d8:	7a20      	ldrb	r0, [r4, #8]
 80161da:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80161de:	4358      	muls	r0, r3
 80161e0:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80161e4:	1c43      	adds	r3, r0, #1
 80161e6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80161ea:	7838      	ldrb	r0, [r7, #0]
 80161ec:	121b      	asrs	r3, r3, #8
 80161ee:	fb10 f003 	smulbb	r0, r0, r3
 80161f2:	b283      	uxth	r3, r0
 80161f4:	1c58      	adds	r0, r3, #1
 80161f6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80161fa:	6823      	ldr	r3, [r4, #0]
 80161fc:	1200      	asrs	r0, r0, #8
 80161fe:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8016202:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016206:	28ff      	cmp	r0, #255	; 0xff
 8016208:	d10d      	bne.n	8016226 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 801620a:	9100      	str	r1, [sp, #0]
 801620c:	4629      	mov	r1, r5
 801620e:	4620      	mov	r0, r4
 8016210:	47c0      	blx	r8
 8016212:	68e3      	ldr	r3, [r4, #12]
 8016214:	3503      	adds	r5, #3
 8016216:	3701      	adds	r7, #1
 8016218:	3301      	adds	r3, #1
 801621a:	42ae      	cmp	r6, r5
 801621c:	60e3      	str	r3, [r4, #12]
 801621e:	d8cb      	bhi.n	80161b8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 8016220:	b005      	add	sp, #20
 8016222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016226:	fa1f fc80 	uxth.w	ip, r0
 801622a:	43c0      	mvns	r0, r0
 801622c:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016230:	fb12 f20c 	smulbb	r2, r2, ip
 8016234:	b2c0      	uxtb	r0, r0
 8016236:	fb13 f30c 	smulbb	r3, r3, ip
 801623a:	fb0e 2200 	mla	r2, lr, r0, r2
 801623e:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016242:	fb11 f10c 	smulbb	r1, r1, ip
 8016246:	fb0e 3300 	mla	r3, lr, r0, r3
 801624a:	f895 e000 	ldrb.w	lr, [r5]
 801624e:	b292      	uxth	r2, r2
 8016250:	b29b      	uxth	r3, r3
 8016252:	fb0e 1000 	mla	r0, lr, r0, r1
 8016256:	1c59      	adds	r1, r3, #1
 8016258:	b280      	uxth	r0, r0
 801625a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801625e:	1c51      	adds	r1, r2, #1
 8016260:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016264:	1c41      	adds	r1, r0, #1
 8016266:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801626a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801626e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016272:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016276:	9000      	str	r0, [sp, #0]
 8016278:	e7c8      	b.n	801620c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0801627a <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801627a:	f89d 0000 	ldrb.w	r0, [sp]
 801627e:	704b      	strb	r3, [r1, #1]
 8016280:	7008      	strb	r0, [r1, #0]
 8016282:	708a      	strb	r2, [r1, #2]
 8016284:	4770      	bx	lr

08016286 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016286:	4413      	add	r3, r2
 8016288:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801628c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801628e:	4419      	add	r1, r3
 8016290:	7a03      	ldrb	r3, [r0, #8]
 8016292:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 8016296:	2bff      	cmp	r3, #255	; 0xff
 8016298:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801629c:	440e      	add	r6, r1
 801629e:	d13d      	bne.n	801631c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 80162a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80162a4:	3103      	adds	r1, #3
 80162a6:	7d87      	ldrb	r7, [r0, #22]
 80162a8:	2bff      	cmp	r3, #255	; 0xff
 80162aa:	d10a      	bne.n	80162c2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 80162ac:	f801 7c03 	strb.w	r7, [r1, #-3]
 80162b0:	7d43      	ldrb	r3, [r0, #21]
 80162b2:	f801 3c02 	strb.w	r3, [r1, #-2]
 80162b6:	7d03      	ldrb	r3, [r0, #20]
 80162b8:	f801 3c01 	strb.w	r3, [r1, #-1]
 80162bc:	428e      	cmp	r6, r1
 80162be:	d8ef      	bhi.n	80162a0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 80162c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162c2:	b29a      	uxth	r2, r3
 80162c4:	43db      	mvns	r3, r3
 80162c6:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80162ca:	fb17 f702 	smulbb	r7, r7, r2
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	fb05 7503 	mla	r5, r5, r3, r7
 80162d4:	b2ad      	uxth	r5, r5
 80162d6:	1c6f      	adds	r7, r5, #1
 80162d8:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80162dc:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 80162e0:	fb17 f703 	smulbb	r7, r7, r3
 80162e4:	122d      	asrs	r5, r5, #8
 80162e6:	f801 5c03 	strb.w	r5, [r1, #-3]
 80162ea:	7d45      	ldrb	r5, [r0, #21]
 80162ec:	fb05 7502 	mla	r5, r5, r2, r7
 80162f0:	b2ad      	uxth	r5, r5
 80162f2:	1c6f      	adds	r7, r5, #1
 80162f4:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80162f8:	122d      	asrs	r5, r5, #8
 80162fa:	f801 5c02 	strb.w	r5, [r1, #-2]
 80162fe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016302:	7d07      	ldrb	r7, [r0, #20]
 8016304:	fb15 f303 	smulbb	r3, r5, r3
 8016308:	fb07 3202 	mla	r2, r7, r2, r3
 801630c:	b292      	uxth	r2, r2
 801630e:	1c53      	adds	r3, r2, #1
 8016310:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016314:	1212      	asrs	r2, r2, #8
 8016316:	f801 2c01 	strb.w	r2, [r1, #-1]
 801631a:	e7cf      	b.n	80162bc <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 801631c:	3103      	adds	r1, #3
 801631e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016322:	428e      	cmp	r6, r1
 8016324:	7a03      	ldrb	r3, [r0, #8]
 8016326:	f101 0103 	add.w	r1, r1, #3
 801632a:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801632e:	fb02 f303 	mul.w	r3, r2, r3
 8016332:	f103 0201 	add.w	r2, r3, #1
 8016336:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801633a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801633e:	b295      	uxth	r5, r2
 8016340:	ea6f 0202 	mvn.w	r2, r2
 8016344:	b2d3      	uxtb	r3, r2
 8016346:	7d82      	ldrb	r2, [r0, #22]
 8016348:	fb1c fc03 	smulbb	ip, ip, r3
 801634c:	fb02 c205 	mla	r2, r2, r5, ip
 8016350:	b292      	uxth	r2, r2
 8016352:	f102 0c01 	add.w	ip, r2, #1
 8016356:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801635a:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801635e:	fb1c fc03 	smulbb	ip, ip, r3
 8016362:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016366:	f801 2c06 	strb.w	r2, [r1, #-6]
 801636a:	7d42      	ldrb	r2, [r0, #21]
 801636c:	fb02 c205 	mla	r2, r2, r5, ip
 8016370:	b292      	uxth	r2, r2
 8016372:	f102 0c01 	add.w	ip, r2, #1
 8016376:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801637a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801637e:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016382:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016386:	f890 c014 	ldrb.w	ip, [r0, #20]
 801638a:	fb12 f303 	smulbb	r3, r2, r3
 801638e:	fb0c 3305 	mla	r3, ip, r5, r3
 8016392:	b29b      	uxth	r3, r3
 8016394:	f103 0201 	add.w	r2, r3, #1
 8016398:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801639c:	ea4f 2323 	mov.w	r3, r3, asr #8
 80163a0:	f801 3c04 	strb.w	r3, [r1, #-4]
 80163a4:	d8bb      	bhi.n	801631e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 80163a6:	e78b      	b.n	80162c0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

080163a8 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 80163a8:	b510      	push	{r4, lr}
 80163aa:	7d04      	ldrb	r4, [r0, #20]
 80163ac:	700c      	strb	r4, [r1, #0]
 80163ae:	7d41      	ldrb	r1, [r0, #21]
 80163b0:	7011      	strb	r1, [r2, #0]
 80163b2:	7d82      	ldrb	r2, [r0, #22]
 80163b4:	2001      	movs	r0, #1
 80163b6:	701a      	strb	r2, [r3, #0]
 80163b8:	22ff      	movs	r2, #255	; 0xff
 80163ba:	9b02      	ldr	r3, [sp, #8]
 80163bc:	701a      	strb	r2, [r3, #0]
 80163be:	bd10      	pop	{r4, pc}

080163c0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80163c0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80163c4:	4770      	bx	lr

080163c6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80163c6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80163ca:	4770      	bx	lr

080163cc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80163cc:	6281      	str	r1, [r0, #40]	; 0x28
 80163ce:	4770      	bx	lr

080163d0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80163d0:	b510      	push	{r4, lr}
 80163d2:	2200      	movs	r2, #0
 80163d4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80163d8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80163dc:	8002      	strh	r2, [r0, #0]
 80163de:	8042      	strh	r2, [r0, #2]
 80163e0:	8084      	strh	r4, [r0, #4]
 80163e2:	80c1      	strh	r1, [r0, #6]
 80163e4:	bd10      	pop	{r4, pc}

080163e6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80163e6:	2200      	movs	r2, #0
 80163e8:	8002      	strh	r2, [r0, #0]
 80163ea:	8042      	strh	r2, [r0, #2]
 80163ec:	8082      	strh	r2, [r0, #4]
 80163ee:	80c2      	strh	r2, [r0, #6]
 80163f0:	4770      	bx	lr
	...

080163f4 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80163f4:	b508      	push	{r3, lr}
 80163f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80163f8:	b928      	cbnz	r0, 8016406 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80163fa:	4b03      	ldr	r3, [pc, #12]	; (8016408 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80163fc:	2126      	movs	r1, #38	; 0x26
 80163fe:	4a03      	ldr	r2, [pc, #12]	; (801640c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016400:	4803      	ldr	r0, [pc, #12]	; (8016410 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016402:	f00f fd5d 	bl	8025ec0 <__assert_func>
 8016406:	bd08      	pop	{r3, pc}
 8016408:	0802c994 	.word	0x0802c994
 801640c:	0802ca74 	.word	0x0802ca74
 8016410:	0802c9bb 	.word	0x0802c9bb

08016414 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016414:	b510      	push	{r4, lr}
 8016416:	f9b1 4000 	ldrsh.w	r4, [r1]
 801641a:	888a      	ldrh	r2, [r1, #4]
 801641c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016420:	4422      	add	r2, r4
 8016422:	b212      	sxth	r2, r2
 8016424:	4293      	cmp	r3, r2
 8016426:	da15      	bge.n	8016454 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016428:	8882      	ldrh	r2, [r0, #4]
 801642a:	4413      	add	r3, r2
 801642c:	b21b      	sxth	r3, r3
 801642e:	429c      	cmp	r4, r3
 8016430:	da10      	bge.n	8016454 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016432:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016436:	88c9      	ldrh	r1, [r1, #6]
 8016438:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801643c:	4419      	add	r1, r3
 801643e:	b209      	sxth	r1, r1
 8016440:	428a      	cmp	r2, r1
 8016442:	da07      	bge.n	8016454 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016444:	88c0      	ldrh	r0, [r0, #6]
 8016446:	4410      	add	r0, r2
 8016448:	b200      	sxth	r0, r0
 801644a:	4283      	cmp	r3, r0
 801644c:	bfac      	ite	ge
 801644e:	2000      	movge	r0, #0
 8016450:	2001      	movlt	r0, #1
 8016452:	bd10      	pop	{r4, pc}
 8016454:	2000      	movs	r0, #0
 8016456:	e7fc      	b.n	8016452 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016458 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801645c:	b08b      	sub	sp, #44	; 0x2c
 801645e:	4604      	mov	r4, r0
 8016460:	6808      	ldr	r0, [r1, #0]
 8016462:	f04f 0a00 	mov.w	sl, #0
 8016466:	6849      	ldr	r1, [r1, #4]
 8016468:	ab04      	add	r3, sp, #16
 801646a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 801646e:	c303      	stmia	r3!, {r0, r1}
 8016470:	4b35      	ldr	r3, [pc, #212]	; (8016548 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8016472:	4621      	mov	r1, r4
 8016474:	a806      	add	r0, sp, #24
 8016476:	781b      	ldrb	r3, [r3, #0]
 8016478:	2b01      	cmp	r3, #1
 801647a:	6823      	ldr	r3, [r4, #0]
 801647c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801647e:	bf1f      	itttt	ne
 8016480:	f10d 090e 	addne.w	r9, sp, #14
 8016484:	ae05      	addne	r6, sp, #20
 8016486:	f10d 0516 	addne.w	r5, sp, #22
 801648a:	f10d 0812 	addne.w	r8, sp, #18
 801648e:	bf01      	itttt	eq
 8016490:	f10d 0916 	addeq.w	r9, sp, #22
 8016494:	f10d 060e 	addeq.w	r6, sp, #14
 8016498:	ad05      	addeq	r5, sp, #20
 801649a:	f10d 0810 	addeq.w	r8, sp, #16
 801649e:	4798      	blx	r3
 80164a0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80164a4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d042      	beq.n	8016532 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 80164ac:	4293      	cmp	r3, r2
 80164ae:	bfa8      	it	ge
 80164b0:	4613      	movge	r3, r2
 80164b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80164b6:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80164ba:	2f00      	cmp	r7, #0
 80164bc:	dd21      	ble.n	8016502 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 80164be:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80164c2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80164c6:	f9b6 2000 	ldrsh.w	r2, [r6]
 80164ca:	f9b9 3000 	ldrsh.w	r3, [r9]
 80164ce:	f8ad 0020 	strh.w	r0, [sp, #32]
 80164d2:	a808      	add	r0, sp, #32
 80164d4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80164d8:	a906      	add	r1, sp, #24
 80164da:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80164de:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80164e2:	f7ff ff97 	bl	8016414 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80164e6:	9001      	str	r0, [sp, #4]
 80164e8:	b1d0      	cbz	r0, 8016520 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80164ea:	6822      	ldr	r2, [r4, #0]
 80164ec:	a908      	add	r1, sp, #32
 80164ee:	4620      	mov	r0, r4
 80164f0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80164f2:	4790      	blx	r2
 80164f4:	b9a0      	cbnz	r0, 8016520 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80164f6:	107f      	asrs	r7, r7, #1
 80164f8:	9b01      	ldr	r3, [sp, #4]
 80164fa:	f8ad 700e 	strh.w	r7, [sp, #14]
 80164fe:	469a      	mov	sl, r3
 8016500:	e7d9      	b.n	80164b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016502:	d10d      	bne.n	8016520 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8016504:	2301      	movs	r3, #1
 8016506:	f8ad 300e 	strh.w	r3, [sp, #14]
 801650a:	f8b8 2000 	ldrh.w	r2, [r8]
 801650e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8016512:	440a      	add	r2, r1
 8016514:	f8a8 2000 	strh.w	r2, [r8]
 8016518:	882b      	ldrh	r3, [r5, #0]
 801651a:	1a5b      	subs	r3, r3, r1
 801651c:	802b      	strh	r3, [r5, #0]
 801651e:	e7bf      	b.n	80164a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016520:	f1ba 0f00 	cmp.w	sl, #0
 8016524:	d0f1      	beq.n	801650a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8016526:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 801652a:	455b      	cmp	r3, fp
 801652c:	bf08      	it	eq
 801652e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016530:	e7eb      	b.n	801650a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8016532:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016536:	429a      	cmp	r2, r3
 8016538:	bf04      	itt	eq
 801653a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801653e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016540:	b00b      	add	sp, #44	; 0x2c
 8016542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016546:	bf00      	nop
 8016548:	200566f0 	.word	0x200566f0

0801654c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801654c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801654e:	b085      	sub	sp, #20
 8016550:	6803      	ldr	r3, [r0, #0]
 8016552:	4604      	mov	r4, r0
 8016554:	4601      	mov	r1, r0
 8016556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016558:	4668      	mov	r0, sp
 801655a:	4798      	blx	r3
 801655c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8016560:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8016564:	2300      	movs	r3, #0
 8016566:	a902      	add	r1, sp, #8
 8016568:	4668      	mov	r0, sp
 801656a:	9302      	str	r3, [sp, #8]
 801656c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8016570:	f8ad 500e 	strh.w	r5, [sp, #14]
 8016574:	f7ff ff4e 	bl	8016414 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016578:	b340      	cbz	r0, 80165cc <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 801657a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801657e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8016582:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8016586:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801658a:	443a      	add	r2, r7
 801658c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8016590:	f8ad 0000 	strh.w	r0, [sp]
 8016594:	b292      	uxth	r2, r2
 8016596:	f8ad 1002 	strh.w	r1, [sp, #2]
 801659a:	b217      	sxth	r7, r2
 801659c:	42be      	cmp	r6, r7
 801659e:	bfd8      	it	le
 80165a0:	b2b2      	uxthle	r2, r6
 80165a2:	1a12      	subs	r2, r2, r0
 80165a4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80165a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80165ac:	4413      	add	r3, r2
 80165ae:	b29b      	uxth	r3, r3
 80165b0:	b21a      	sxth	r2, r3
 80165b2:	4295      	cmp	r5, r2
 80165b4:	bfd8      	it	le
 80165b6:	b2ab      	uxthle	r3, r5
 80165b8:	1a5b      	subs	r3, r3, r1
 80165ba:	f8ad 3006 	strh.w	r3, [sp, #6]
 80165be:	6823      	ldr	r3, [r4, #0]
 80165c0:	4669      	mov	r1, sp
 80165c2:	4620      	mov	r0, r4
 80165c4:	691b      	ldr	r3, [r3, #16]
 80165c6:	4798      	blx	r3
 80165c8:	b005      	add	sp, #20
 80165ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165cc:	e9cd 0000 	strd	r0, r0, [sp]
 80165d0:	e7f5      	b.n	80165be <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

080165d4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80165d4:	2200      	movs	r2, #0
 80165d6:	2101      	movs	r1, #1
 80165d8:	8082      	strh	r2, [r0, #4]
 80165da:	80c2      	strh	r2, [r0, #6]
 80165dc:	8102      	strh	r2, [r0, #8]
 80165de:	8142      	strh	r2, [r0, #10]
 80165e0:	8182      	strh	r2, [r0, #12]
 80165e2:	81c2      	strh	r2, [r0, #14]
 80165e4:	8202      	strh	r2, [r0, #16]
 80165e6:	8242      	strh	r2, [r0, #18]
 80165e8:	61c2      	str	r2, [r0, #28]
 80165ea:	8402      	strh	r2, [r0, #32]
 80165ec:	8442      	strh	r2, [r0, #34]	; 0x22
 80165ee:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80165f2:	6282      	str	r2, [r0, #40]	; 0x28
 80165f4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80165f8:	4905      	ldr	r1, [pc, #20]	; (8016610 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 80165fa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80165fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016602:	6001      	str	r1, [r0, #0]
 8016604:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016606:	22ff      	movs	r2, #255	; 0xff
 8016608:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801660c:	4770      	bx	lr
 801660e:	bf00      	nop
 8016610:	0802ca00 	.word	0x0802ca00

08016614 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016614:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8016618:	4602      	mov	r2, r0
 801661a:	cb03      	ldmia	r3!, {r0, r1}
 801661c:	6010      	str	r0, [r2, #0]
 801661e:	4610      	mov	r0, r2
 8016620:	6051      	str	r1, [r2, #4]
 8016622:	4770      	bx	lr

08016624 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016624:	b507      	push	{r0, r1, r2, lr}
 8016626:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801662a:	ab01      	add	r3, sp, #4
 801662c:	6809      	ldr	r1, [r1, #0]
 801662e:	6800      	ldr	r0, [r0, #0]
 8016630:	f003 fc74 	bl	8019f1c <_ZN8touchgfx6muldivElllRl>
 8016634:	b003      	add	sp, #12
 8016636:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801663c <_ZN8touchgfx7CWRUtil4sineEi>:
 801663c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016640:	fb90 f3f2 	sdiv	r3, r0, r2
 8016644:	fb03 0312 	mls	r3, r3, r2, r0
 8016648:	4413      	add	r3, r2
 801664a:	fb93 f0f2 	sdiv	r0, r3, r2
 801664e:	fb02 3010 	mls	r0, r2, r0, r3
 8016652:	4b0a      	ldr	r3, [pc, #40]	; (801667c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016654:	285a      	cmp	r0, #90	; 0x5a
 8016656:	dc02      	bgt.n	801665e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016658:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801665c:	4770      	bx	lr
 801665e:	28b4      	cmp	r0, #180	; 0xb4
 8016660:	dc02      	bgt.n	8016668 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016662:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016666:	e7f7      	b.n	8016658 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016668:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801666c:	bfd4      	ite	le
 801666e:	38b4      	suble	r0, #180	; 0xb4
 8016670:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016674:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016678:	4240      	negs	r0, r0
 801667a:	4770      	bx	lr
 801667c:	0802cb1e 	.word	0x0802cb1e

08016680 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8016680:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016684:	f04f 0300 	mov.w	r3, #0
 8016688:	bf2c      	ite	cs
 801668a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801668e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8016692:	1899      	adds	r1, r3, r2
 8016694:	4288      	cmp	r0, r1
 8016696:	bf24      	itt	cs
 8016698:	1853      	addcs	r3, r2, r1
 801669a:	1a40      	subcs	r0, r0, r1
 801669c:	0892      	lsrs	r2, r2, #2
 801669e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80166a2:	d1f6      	bne.n	8016692 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80166a4:	4618      	mov	r0, r3
 80166a6:	4770      	bx	lr

080166a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80166a8:	b510      	push	{r4, lr}
 80166aa:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80166ae:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80166b2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80166b6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80166ba:	139b      	asrs	r3, r3, #14
 80166bc:	13a4      	asrs	r4, r4, #14
 80166be:	429c      	cmp	r4, r3
 80166c0:	bfb8      	it	lt
 80166c2:	461c      	movlt	r4, r3
 80166c4:	2c01      	cmp	r4, #1
 80166c6:	dd07      	ble.n	80166d8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80166c8:	fb91 f1f4 	sdiv	r1, r1, r4
 80166cc:	fb90 f0f4 	sdiv	r0, r0, r4
 80166d0:	f7ff ffea 	bl	80166a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80166d4:	4360      	muls	r0, r4
 80166d6:	bd10      	pop	{r4, pc}
 80166d8:	4340      	muls	r0, r0
 80166da:	fb01 0001 	mla	r0, r1, r1, r0
 80166de:	f7ff ffcf 	bl	8016680 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80166e2:	e7f8      	b.n	80166d6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080166e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80166e4:	2800      	cmp	r0, #0
 80166e6:	b508      	push	{r3, lr}
 80166e8:	da05      	bge.n	80166f6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80166ea:	4240      	negs	r0, r0
 80166ec:	f7ff fffa 	bl	80166e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80166f0:	4240      	negs	r0, r0
 80166f2:	b240      	sxtb	r0, r0
 80166f4:	bd08      	pop	{r3, pc}
 80166f6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80166fa:	dc11      	bgt.n	8016720 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80166fc:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016700:	dd09      	ble.n	8016716 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016702:	4340      	muls	r0, r0
 8016704:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016708:	f7ff ffba 	bl	8016680 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801670c:	f7ff ffea 	bl	80166e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016710:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016714:	e7ed      	b.n	80166f2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016716:	3003      	adds	r0, #3
 8016718:	4b02      	ldr	r3, [pc, #8]	; (8016724 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801671a:	10c0      	asrs	r0, r0, #3
 801671c:	5618      	ldrsb	r0, [r3, r0]
 801671e:	e7e9      	b.n	80166f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016720:	2000      	movs	r0, #0
 8016722:	e7e7      	b.n	80166f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016724:	0802cac2 	.word	0x0802cac2

08016728 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016728:	1e03      	subs	r3, r0, #0
 801672a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801672c:	460c      	mov	r4, r1
 801672e:	4615      	mov	r5, r2
 8016730:	db01      	blt.n	8016736 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016732:	2900      	cmp	r1, #0
 8016734:	da06      	bge.n	8016744 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8016736:	4b10      	ldr	r3, [pc, #64]	; (8016778 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x50>)
 8016738:	f44f 714b 	mov.w	r1, #812	; 0x32c
 801673c:	4a0f      	ldr	r2, [pc, #60]	; (801677c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801673e:	4810      	ldr	r0, [pc, #64]	; (8016780 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8016740:	f00f fbbe 	bl	8025ec0 <__assert_func>
 8016744:	4299      	cmp	r1, r3
 8016746:	dd07      	ble.n	8016758 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x30>
 8016748:	4619      	mov	r1, r3
 801674a:	4620      	mov	r0, r4
 801674c:	f7ff ffec 	bl	8016728 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016750:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016754:	b003      	add	sp, #12
 8016756:	bd30      	pop	{r4, r5, pc}
 8016758:	f7ff ffa6 	bl	80166a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801675c:	6028      	str	r0, [r5, #0]
 801675e:	2800      	cmp	r0, #0
 8016760:	d0f8      	beq.n	8016754 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8016762:	4602      	mov	r2, r0
 8016764:	ab01      	add	r3, sp, #4
 8016766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801676a:	4620      	mov	r0, r4
 801676c:	f003 fbd6 	bl	8019f1c <_ZN8touchgfx6muldivElllRl>
 8016770:	f7ff ffb8 	bl	80166e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016774:	e7ee      	b.n	8016754 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8016776:	bf00      	nop
 8016778:	0802cbd4 	.word	0x0802cbd4
 801677c:	0802cc98 	.word	0x0802cc98
 8016780:	0802cbe5 	.word	0x0802cbe5

08016784 <_ZN8touchgfx4LineC1Ev>:
 8016784:	b510      	push	{r4, lr}
 8016786:	4604      	mov	r4, r0
 8016788:	f7ff ff24 	bl	80165d4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801678c:	4b0c      	ldr	r3, [pc, #48]	; (80167c0 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801678e:	2220      	movs	r2, #32
 8016790:	4620      	mov	r0, r4
 8016792:	6023      	str	r3, [r4, #0]
 8016794:	2300      	movs	r3, #0
 8016796:	6422      	str	r2, [r4, #64]	; 0x40
 8016798:	2212      	movs	r2, #18
 801679a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801679e:	6722      	str	r2, [r4, #112]	; 0x70
 80167a0:	60a3      	str	r3, [r4, #8]
 80167a2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80167a6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80167aa:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80167ae:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80167b2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80167b6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80167ba:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80167be:	bd10      	pop	{r4, pc}
 80167c0:	0802cc24 	.word	0x0802cc24

080167c4 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80167c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80167ca:	4604      	mov	r4, r0
 80167cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80167ce:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80167d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80167d2:	1af6      	subs	r6, r6, r3
 80167d4:	eba5 0502 	sub.w	r5, r5, r2
 80167d8:	f040 808e 	bne.w	80168f8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x134>
 80167dc:	b955      	cbnz	r5, 80167f4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x30>
 80167de:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80167e2:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80167e6:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80167ea:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80167ee:	b003      	add	sp, #12
 80167f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f4:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80167f8:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80167fc:	f04f 0802 	mov.w	r8, #2
 8016800:	463a      	mov	r2, r7
 8016802:	4629      	mov	r1, r5
 8016804:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016806:	f003 fba8 	bl	8019f5a <_ZN8touchgfx6muldivElll>
 801680a:	4631      	mov	r1, r6
 801680c:	463a      	mov	r2, r7
 801680e:	fb90 f5f8 	sdiv	r5, r0, r8
 8016812:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016814:	f003 fba1 	bl	8019f5a <_ZN8touchgfx6muldivElll>
 8016818:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801681c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 801681e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8016820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016822:	fb90 f0f8 	sdiv	r0, r0, r8
 8016826:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801682a:	eba8 0305 	sub.w	r3, r8, r5
 801682e:	f1ba 0f00 	cmp.w	sl, #0
 8016832:	f040 80b8 	bne.w	80169a6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e2>
 8016836:	64a3      	str	r3, [r4, #72]	; 0x48
 8016838:	1843      	adds	r3, r0, r1
 801683a:	65a3      	str	r3, [r4, #88]	; 0x58
 801683c:	1b7b      	subs	r3, r7, r5
 801683e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016840:	1983      	adds	r3, r0, r6
 8016842:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016844:	19eb      	adds	r3, r5, r7
 8016846:	6523      	str	r3, [r4, #80]	; 0x50
 8016848:	1a33      	subs	r3, r6, r0
 801684a:	6623      	str	r3, [r4, #96]	; 0x60
 801684c:	eb05 0308 	add.w	r3, r5, r8
 8016850:	6563      	str	r3, [r4, #84]	; 0x54
 8016852:	1a0b      	subs	r3, r1, r0
 8016854:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 8016858:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801685c:	6663      	str	r3, [r4, #100]	; 0x64
 801685e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8016862:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
 8016866:	4672      	mov	r2, lr
 8016868:	9301      	str	r3, [sp, #4]
 801686a:	f8cd c000 	str.w	ip, [sp]
 801686e:	f859 bb04 	ldr.w	fp, [r9], #4
 8016872:	9b00      	ldr	r3, [sp, #0]
 8016874:	45de      	cmp	lr, fp
 8016876:	bfa8      	it	ge
 8016878:	46de      	movge	lr, fp
 801687a:	455a      	cmp	r2, fp
 801687c:	bfb8      	it	lt
 801687e:	465a      	movlt	r2, fp
 8016880:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8016884:	45dc      	cmp	ip, fp
 8016886:	bfa8      	it	ge
 8016888:	46dc      	movge	ip, fp
 801688a:	455b      	cmp	r3, fp
 801688c:	bfb8      	it	lt
 801688e:	465b      	movlt	r3, fp
 8016890:	9300      	str	r3, [sp, #0]
 8016892:	9b01      	ldr	r3, [sp, #4]
 8016894:	454b      	cmp	r3, r9
 8016896:	d1ea      	bne.n	801686e <_ZN8touchgfx4Line17updateCachedShapeEv+0xaa>
 8016898:	f04f 0920 	mov.w	r9, #32
 801689c:	9b00      	ldr	r3, [sp, #0]
 801689e:	f1ba 0f01 	cmp.w	sl, #1
 80168a2:	fb92 f2f9 	sdiv	r2, r2, r9
 80168a6:	fb93 f3f9 	sdiv	r3, r3, r9
 80168aa:	fb9e fef9 	sdiv	lr, lr, r9
 80168ae:	fb9c fcf9 	sdiv	ip, ip, r9
 80168b2:	f102 0201 	add.w	r2, r2, #1
 80168b6:	f103 0301 	add.w	r3, r3, #1
 80168ba:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
 80168be:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
 80168c2:	eba2 0e0e 	sub.w	lr, r2, lr
 80168c6:	eba3 0c0c 	sub.w	ip, r3, ip
 80168ca:	f8a4 e06c 	strh.w	lr, [r4, #108]	; 0x6c
 80168ce:	f8a4 c06e 	strh.w	ip, [r4, #110]	; 0x6e
 80168d2:	d18c      	bne.n	80167ee <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 80168d4:	eba8 0305 	sub.w	r3, r8, r5
 80168d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80168da:	1843      	adds	r3, r0, r1
 80168dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80168de:	1b7b      	subs	r3, r7, r5
 80168e0:	442f      	add	r7, r5
 80168e2:	4445      	add	r5, r8
 80168e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80168e6:	1983      	adds	r3, r0, r6
 80168e8:	1a36      	subs	r6, r6, r0
 80168ea:	1a08      	subs	r0, r1, r0
 80168ec:	65e3      	str	r3, [r4, #92]	; 0x5c
 80168ee:	6527      	str	r7, [r4, #80]	; 0x50
 80168f0:	6626      	str	r6, [r4, #96]	; 0x60
 80168f2:	6565      	str	r5, [r4, #84]	; 0x54
 80168f4:	6660      	str	r0, [r4, #100]	; 0x64
 80168f6:	e77a      	b.n	80167ee <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 80168f8:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 80168fc:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016900:	2d00      	cmp	r5, #0
 8016902:	f43f af7b 	beq.w	80167fc <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8016906:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801690a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801690e:	fb93 f2f7 	sdiv	r2, r3, r7
 8016912:	fb07 3312 	mls	r3, r7, r2, r3
 8016916:	b34b      	cbz	r3, 801696c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a8>
 8016918:	fb97 f2f3 	sdiv	r2, r7, r3
 801691c:	fb03 7712 	mls	r7, r3, r2, r7
 8016920:	2f00      	cmp	r7, #0
 8016922:	d1f4      	bne.n	801690e <_ZN8touchgfx4Line17updateCachedShapeEv+0x14a>
 8016924:	2b01      	cmp	r3, #1
 8016926:	f24b 5204 	movw	r2, #46340	; 0xb504
 801692a:	bf18      	it	ne
 801692c:	fb96 f6f3 	sdivne	r6, r6, r3
 8016930:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8016934:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8016938:	bf18      	it	ne
 801693a:	fb95 f5f3 	sdivne	r5, r5, r3
 801693e:	4291      	cmp	r1, r2
 8016940:	dd16      	ble.n	8016970 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ac>
 8016942:	2d00      	cmp	r5, #0
 8016944:	da47      	bge.n	80169d6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x212>
 8016946:	4b26      	ldr	r3, [pc, #152]	; (80169e0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x21c>)
 8016948:	429d      	cmp	r5, r3
 801694a:	da25      	bge.n	8016998 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d4>
 801694c:	426a      	negs	r2, r5
 801694e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016952:	fb91 f1f3 	sdiv	r1, r1, r3
 8016956:	fb92 f3f3 	sdiv	r3, r2, r3
 801695a:	4299      	cmp	r1, r3
 801695c:	bfcc      	ite	gt
 801695e:	1c4b      	addgt	r3, r1, #1
 8016960:	3301      	addle	r3, #1
 8016962:	fb96 f6f3 	sdiv	r6, r6, r3
 8016966:	fb95 f5f3 	sdiv	r5, r5, r3
 801696a:	e00f      	b.n	801698c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801696c:	463b      	mov	r3, r7
 801696e:	e7d9      	b.n	8016924 <_ZN8touchgfx4Line17updateCachedShapeEv+0x160>
 8016970:	2d00      	cmp	r5, #0
 8016972:	fb92 f2f1 	sdiv	r2, r2, r1
 8016976:	da11      	bge.n	801699c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d8>
 8016978:	4269      	negs	r1, r5
 801697a:	f24b 5304 	movw	r3, #46340	; 0xb504
 801697e:	fb93 f3f1 	sdiv	r3, r3, r1
 8016982:	429a      	cmp	r2, r3
 8016984:	bfa8      	it	ge
 8016986:	461a      	movge	r2, r3
 8016988:	4356      	muls	r6, r2
 801698a:	4355      	muls	r5, r2
 801698c:	4629      	mov	r1, r5
 801698e:	4630      	mov	r0, r6
 8016990:	f7ff fe8a 	bl	80166a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016994:	4607      	mov	r7, r0
 8016996:	e731      	b.n	80167fc <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8016998:	2200      	movs	r2, #0
 801699a:	e7ed      	b.n	8016978 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b4>
 801699c:	4629      	mov	r1, r5
 801699e:	e7ec      	b.n	801697a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 80169a0:	4629      	mov	r1, r5
 80169a2:	2200      	movs	r2, #0
 80169a4:	e7e9      	b.n	801697a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 80169a6:	1a1b      	subs	r3, r3, r0
 80169a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80169aa:	1843      	adds	r3, r0, r1
 80169ac:	1b5b      	subs	r3, r3, r5
 80169ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80169b0:	1b7b      	subs	r3, r7, r5
 80169b2:	4403      	add	r3, r0
 80169b4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80169b6:	1983      	adds	r3, r0, r6
 80169b8:	442b      	add	r3, r5
 80169ba:	65e3      	str	r3, [r4, #92]	; 0x5c
 80169bc:	19eb      	adds	r3, r5, r7
 80169be:	4403      	add	r3, r0
 80169c0:	6523      	str	r3, [r4, #80]	; 0x50
 80169c2:	1a33      	subs	r3, r6, r0
 80169c4:	442b      	add	r3, r5
 80169c6:	6623      	str	r3, [r4, #96]	; 0x60
 80169c8:	eb05 0308 	add.w	r3, r5, r8
 80169cc:	1a1b      	subs	r3, r3, r0
 80169ce:	6563      	str	r3, [r4, #84]	; 0x54
 80169d0:	1a0b      	subs	r3, r1, r0
 80169d2:	1b5b      	subs	r3, r3, r5
 80169d4:	e73e      	b.n	8016854 <_ZN8touchgfx4Line17updateCachedShapeEv+0x90>
 80169d6:	4295      	cmp	r5, r2
 80169d8:	dde2      	ble.n	80169a0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1dc>
 80169da:	462a      	mov	r2, r5
 80169dc:	e7b7      	b.n	801694e <_ZN8touchgfx4Line17updateCachedShapeEv+0x18a>
 80169de:	bf00      	nop
 80169e0:	ffff4afc 	.word	0xffff4afc

080169e4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 80169e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80169e6:	428b      	cmp	r3, r1
 80169e8:	d102      	bne.n	80169f0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 80169ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80169ec:	4293      	cmp	r3, r2
 80169ee:	d003      	beq.n	80169f8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 80169f0:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 80169f4:	f7ff bee6 	b.w	80167c4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80169f8:	4770      	bx	lr

080169fa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 80169fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80169fc:	428b      	cmp	r3, r1
 80169fe:	d102      	bne.n	8016a06 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8016a00:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016a02:	4293      	cmp	r3, r2
 8016a04:	d003      	beq.n	8016a0e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016a06:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016a0a:	f7ff bedb 	b.w	80167c4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016a0e:	4770      	bx	lr

08016a10 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8016a10:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8016a14:	f7ff bed6 	b.w	80167c4 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016a18 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a1c:	b0b3      	sub	sp, #204	; 0xcc
 8016a1e:	4604      	mov	r4, r0
 8016a20:	460a      	mov	r2, r1
 8016a22:	4601      	mov	r1, r0
 8016a24:	a803      	add	r0, sp, #12
 8016a26:	ad32      	add	r5, sp, #200	; 0xc8
 8016a28:	f00d fd48 	bl	80244bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8016a30:	f845 3dc8 	str.w	r3, [r5, #-200]!
 8016a34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016a36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016a38:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016a3a:	1ac0      	subs	r0, r0, r3
 8016a3c:	eba1 0102 	sub.w	r1, r1, r2
 8016a40:	d43c      	bmi.n	8016abc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8016a42:	2900      	cmp	r1, #0
 8016a44:	462a      	mov	r2, r5
 8016a46:	db33      	blt.n	8016ab0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8016a48:	f7ff fe6e 	bl	8016728 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016a4c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8016a50:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016a52:	a803      	add	r0, sp, #12
 8016a54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016a56:	f00d fefc 	bl	8024852 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016a5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016a5c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016a5e:	a803      	add	r0, sp, #12
 8016a60:	f00d fe86 	bl	8024770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016a64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	d137      	bne.n	8016adc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016a6c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016a6e:	2eb3      	cmp	r6, #179	; 0xb3
 8016a70:	dc34      	bgt.n	8016adc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016a72:	eba7 0906 	sub.w	r9, r7, r6
 8016a76:	4648      	mov	r0, r9
 8016a78:	f7ff fde0 	bl	801663c <_ZN8touchgfx7CWRUtil4sineEi>
 8016a7c:	a901      	add	r1, sp, #4
 8016a7e:	9001      	str	r0, [sp, #4]
 8016a80:	4628      	mov	r0, r5
 8016a82:	f7ff fdcf 	bl	8016624 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016a86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016a88:	eb00 0801 	add.w	r8, r0, r1
 8016a8c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016a90:	f7ff fdd4 	bl	801663c <_ZN8touchgfx7CWRUtil4sineEi>
 8016a94:	a902      	add	r1, sp, #8
 8016a96:	9002      	str	r0, [sp, #8]
 8016a98:	4628      	mov	r0, r5
 8016a9a:	f7ff fdc3 	bl	8016624 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016a9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016aa0:	4641      	mov	r1, r8
 8016aa2:	1a12      	subs	r2, r2, r0
 8016aa4:	a803      	add	r0, sp, #12
 8016aa6:	f00d fe63 	bl	8024770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016aaa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016aac:	441e      	add	r6, r3
 8016aae:	e7de      	b.n	8016a6e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8016ab0:	4249      	negs	r1, r1
 8016ab2:	f7ff fe39 	bl	8016728 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016ab6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8016aba:	e7c9      	b.n	8016a50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016abc:	2900      	cmp	r1, #0
 8016abe:	f1c0 0000 	rsb	r0, r0, #0
 8016ac2:	462a      	mov	r2, r5
 8016ac4:	db04      	blt.n	8016ad0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8016ac6:	f7ff fe2f 	bl	8016728 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016aca:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8016ace:	e7bf      	b.n	8016a50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016ad0:	4249      	negs	r1, r1
 8016ad2:	f7ff fe29 	bl	8016728 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016ad6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8016ada:	e7b9      	b.n	8016a50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016adc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8016ade:	a803      	add	r0, sp, #12
 8016ae0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016ae2:	f00d fe45 	bl	8024770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016ae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016ae8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8016aea:	a803      	add	r0, sp, #12
 8016aec:	f00d fe40 	bl	8024770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016af0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	d123      	bne.n	8016b40 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016af8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016afa:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8016afe:	2e00      	cmp	r6, #0
 8016b00:	dd1e      	ble.n	8016b40 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016b02:	eb06 0907 	add.w	r9, r6, r7
 8016b06:	4648      	mov	r0, r9
 8016b08:	f7ff fd98 	bl	801663c <_ZN8touchgfx7CWRUtil4sineEi>
 8016b0c:	a901      	add	r1, sp, #4
 8016b0e:	9001      	str	r0, [sp, #4]
 8016b10:	4628      	mov	r0, r5
 8016b12:	f7ff fd87 	bl	8016624 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016b16:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016b18:	eb00 0801 	add.w	r8, r0, r1
 8016b1c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016b20:	f7ff fd8c 	bl	801663c <_ZN8touchgfx7CWRUtil4sineEi>
 8016b24:	a902      	add	r1, sp, #8
 8016b26:	9002      	str	r0, [sp, #8]
 8016b28:	4628      	mov	r0, r5
 8016b2a:	f7ff fd7b 	bl	8016624 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016b2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016b30:	4641      	mov	r1, r8
 8016b32:	1a12      	subs	r2, r2, r0
 8016b34:	a803      	add	r0, sp, #12
 8016b36:	f00d fe1b 	bl	8024770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016b3a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016b3c:	1af6      	subs	r6, r6, r3
 8016b3e:	e7de      	b.n	8016afe <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8016b40:	21ff      	movs	r1, #255	; 0xff
 8016b42:	a803      	add	r0, sp, #12
 8016b44:	f00d ff89 	bl	8024a5a <_ZN8touchgfx6Canvas6renderEh>
 8016b48:	4604      	mov	r4, r0
 8016b4a:	a803      	add	r0, sp, #12
 8016b4c:	f00d ffc4 	bl	8024ad8 <_ZN8touchgfx6CanvasD1Ev>
 8016b50:	4620      	mov	r0, r4
 8016b52:	b033      	add	sp, #204	; 0xcc
 8016b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016b58 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8016b58:	2200      	movs	r2, #0
 8016b5a:	8002      	strh	r2, [r0, #0]
 8016b5c:	8042      	strh	r2, [r0, #2]
 8016b5e:	8082      	strh	r2, [r0, #4]
 8016b60:	80c2      	strh	r2, [r0, #6]
 8016b62:	4770      	bx	lr

08016b64 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8016b64:	b570      	push	{r4, r5, r6, lr}
 8016b66:	6803      	ldr	r3, [r0, #0]
 8016b68:	4604      	mov	r4, r0
 8016b6a:	4615      	mov	r5, r2
 8016b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b6e:	4798      	blx	r3
 8016b70:	6823      	ldr	r3, [r4, #0]
 8016b72:	4629      	mov	r1, r5
 8016b74:	4620      	mov	r0, r4
 8016b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b7c:	4718      	bx	r3
	...

08016b80 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016b80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b86:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016b88:	4299      	cmp	r1, r3
 8016b8a:	d029      	beq.n	8016be0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8016b8c:	4b15      	ldr	r3, [pc, #84]	; (8016be4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	b92b      	cbnz	r3, 8016b9e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8016b92:	4b15      	ldr	r3, [pc, #84]	; (8016be8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016b94:	21ae      	movs	r1, #174	; 0xae
 8016b96:	4a15      	ldr	r2, [pc, #84]	; (8016bec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016b98:	4815      	ldr	r0, [pc, #84]	; (8016bf0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8016b9a:	f00f f991 	bl	8025ec0 <__assert_func>
 8016b9e:	4a15      	ldr	r2, [pc, #84]	; (8016bf4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8016ba0:	8812      	ldrh	r2, [r2, #0]
 8016ba2:	428a      	cmp	r2, r1
 8016ba4:	d803      	bhi.n	8016bae <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8016ba6:	4b14      	ldr	r3, [pc, #80]	; (8016bf8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8016ba8:	21af      	movs	r1, #175	; 0xaf
 8016baa:	4a10      	ldr	r2, [pc, #64]	; (8016bec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016bac:	e7f4      	b.n	8016b98 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8016bae:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016bb2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016bb6:	4b11      	ldr	r3, [pc, #68]	; (8016bfc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8016bb8:	7854      	ldrb	r4, [r2, #1]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8016bc0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8016bc4:	682b      	ldr	r3, [r5, #0]
 8016bc6:	69de      	ldr	r6, [r3, #28]
 8016bc8:	4b0d      	ldr	r3, [pc, #52]	; (8016c00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8016bca:	6818      	ldr	r0, [r3, #0]
 8016bcc:	f7f1 fea0 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	4602      	mov	r2, r0
 8016bd4:	4621      	mov	r1, r4
 8016bd6:	9300      	str	r3, [sp, #0]
 8016bd8:	4628      	mov	r0, r5
 8016bda:	47b0      	blx	r6
 8016bdc:	b002      	add	sp, #8
 8016bde:	bd70      	pop	{r4, r5, r6, pc}
 8016be0:	2000      	movs	r0, #0
 8016be2:	e7fb      	b.n	8016bdc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8016be4:	20056768 	.word	0x20056768
 8016be8:	0802cd03 	.word	0x0802cd03
 8016bec:	0802ce38 	.word	0x0802ce38
 8016bf0:	0802cd45 	.word	0x0802cd45
 8016bf4:	2005676c 	.word	0x2005676c
 8016bf8:	0802cd6e 	.word	0x0802cd6e
 8016bfc:	20056770 	.word	0x20056770
 8016c00:	20056774 	.word	0x20056774

08016c04 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8016c04:	b570      	push	{r4, r5, r6, lr}
 8016c06:	6803      	ldr	r3, [r0, #0]
 8016c08:	4604      	mov	r4, r0
 8016c0a:	b28d      	uxth	r5, r1
 8016c0c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016c0e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8016c10:	4b10      	ldr	r3, [pc, #64]	; (8016c54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	b92b      	cbnz	r3, 8016c22 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8016c16:	4b10      	ldr	r3, [pc, #64]	; (8016c58 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8016c18:	21ae      	movs	r1, #174	; 0xae
 8016c1a:	4a10      	ldr	r2, [pc, #64]	; (8016c5c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8016c1c:	4810      	ldr	r0, [pc, #64]	; (8016c60 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8016c1e:	f00f f94f 	bl	8025ec0 <__assert_func>
 8016c22:	4910      	ldr	r1, [pc, #64]	; (8016c64 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8016c24:	8809      	ldrh	r1, [r1, #0]
 8016c26:	4291      	cmp	r1, r2
 8016c28:	d803      	bhi.n	8016c32 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8016c2a:	4b0f      	ldr	r3, [pc, #60]	; (8016c68 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8016c2c:	21af      	movs	r1, #175	; 0xaf
 8016c2e:	4a0b      	ldr	r2, [pc, #44]	; (8016c5c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8016c30:	e7f4      	b.n	8016c1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8016c32:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016c36:	4b0d      	ldr	r3, [pc, #52]	; (8016c6c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016c3e:	6803      	ldr	r3, [r0, #0]
 8016c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c42:	4798      	blx	r3
 8016c44:	1a29      	subs	r1, r5, r0
 8016c46:	4633      	mov	r3, r6
 8016c48:	4620      	mov	r0, r4
 8016c4a:	b209      	sxth	r1, r1
 8016c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c50:	4718      	bx	r3
 8016c52:	bf00      	nop
 8016c54:	20056768 	.word	0x20056768
 8016c58:	0802cd03 	.word	0x0802cd03
 8016c5c:	0802ce38 	.word	0x0802ce38
 8016c60:	0802cd45 	.word	0x0802cd45
 8016c64:	2005676c 	.word	0x2005676c
 8016c68:	0802cd6e 	.word	0x0802cd6e
 8016c6c:	20056770 	.word	0x20056770

08016c70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c78:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016c7a:	b08c      	sub	sp, #48	; 0x30
 8016c7c:	4604      	mov	r4, r0
 8016c7e:	4293      	cmp	r3, r2
 8016c80:	4688      	mov	r8, r1
 8016c82:	d05f      	beq.n	8016d44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016c84:	4e31      	ldr	r6, [pc, #196]	; (8016d4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8016c86:	6832      	ldr	r2, [r6, #0]
 8016c88:	b92a      	cbnz	r2, 8016c96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8016c8a:	4b31      	ldr	r3, [pc, #196]	; (8016d50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8016c8c:	21ae      	movs	r1, #174	; 0xae
 8016c8e:	4a31      	ldr	r2, [pc, #196]	; (8016d54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016c90:	4831      	ldr	r0, [pc, #196]	; (8016d58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8016c92:	f00f f915 	bl	8025ec0 <__assert_func>
 8016c96:	4d31      	ldr	r5, [pc, #196]	; (8016d5c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8016c98:	8829      	ldrh	r1, [r5, #0]
 8016c9a:	4299      	cmp	r1, r3
 8016c9c:	d803      	bhi.n	8016ca6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8016c9e:	4b30      	ldr	r3, [pc, #192]	; (8016d60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8016ca0:	21af      	movs	r1, #175	; 0xaf
 8016ca2:	4a2c      	ldr	r2, [pc, #176]	; (8016d54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016ca4:	e7f4      	b.n	8016c90 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8016ca6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8016caa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016cae:	4b2d      	ldr	r3, [pc, #180]	; (8016d64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016cb6:	2a00      	cmp	r2, #0
 8016cb8:	d044      	beq.n	8016d44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016cba:	784b      	ldrb	r3, [r1, #1]
 8016cbc:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8016cc0:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8016cc4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016cc8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8016ccc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8016cd0:	4b25      	ldr	r3, [pc, #148]	; (8016d68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8016cd2:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8016cdc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8016ce0:	9207      	str	r2, [sp, #28]
 8016ce2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016ce4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016ce8:	f88d a020 	strb.w	sl, [sp, #32]
 8016cec:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8016cf0:	9009      	str	r0, [sp, #36]	; 0x24
 8016cf2:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8016cf6:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8016cfa:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8016cfe:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8016d02:	b10a      	cbz	r2, 8016d08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8016d04:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8016d06:	b907      	cbnz	r7, 8016d0a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8016d08:	689f      	ldr	r7, [r3, #8]
 8016d0a:	f10d 0914 	add.w	r9, sp, #20
 8016d0e:	4621      	mov	r1, r4
 8016d10:	4648      	mov	r0, r9
 8016d12:	f002 fff5 	bl	8019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016d16:	6833      	ldr	r3, [r6, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d0b6      	beq.n	8016c8a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8016d1c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016d1e:	882b      	ldrh	r3, [r5, #0]
 8016d20:	428b      	cmp	r3, r1
 8016d22:	d9bc      	bls.n	8016c9e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8016d24:	4b11      	ldr	r3, [pc, #68]	; (8016d6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8016d26:	6818      	ldr	r0, [r3, #0]
 8016d28:	f7f1 fdf2 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	9001      	str	r0, [sp, #4]
 8016d30:	4638      	mov	r0, r7
 8016d32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016d36:	ab07      	add	r3, sp, #28
 8016d38:	9300      	str	r3, [sp, #0]
 8016d3a:	4643      	mov	r3, r8
 8016d3c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8016d40:	f7f1 fd77 	bl	8008832 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016d44:	b00c      	add	sp, #48	; 0x30
 8016d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d4a:	bf00      	nop
 8016d4c:	20056768 	.word	0x20056768
 8016d50:	0802cd03 	.word	0x0802cd03
 8016d54:	0802ce38 	.word	0x0802ce38
 8016d58:	0802cd45 	.word	0x0802cd45
 8016d5c:	2005676c 	.word	0x2005676c
 8016d60:	0802cd6e 	.word	0x0802cd6e
 8016d64:	20056770 	.word	0x20056770
 8016d68:	200566f8 	.word	0x200566f8
 8016d6c:	20056774 	.word	0x20056774

08016d70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016d70:	b40e      	push	{r1, r2, r3}
 8016d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d7a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016d7c:	b09a      	sub	sp, #104	; 0x68
 8016d7e:	4605      	mov	r5, r0
 8016d80:	4293      	cmp	r3, r2
 8016d82:	d067      	beq.n	8016e54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 8016d84:	aa24      	add	r2, sp, #144	; 0x90
 8016d86:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8016e68 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 8016d8a:	9202      	str	r2, [sp, #8]
 8016d8c:	f8da 2000 	ldr.w	r2, [sl]
 8016d90:	b92a      	cbnz	r2, 8016d9e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8016d92:	4b31      	ldr	r3, [pc, #196]	; (8016e58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8016d94:	21ae      	movs	r1, #174	; 0xae
 8016d96:	4a31      	ldr	r2, [pc, #196]	; (8016e5c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8016d98:	4831      	ldr	r0, [pc, #196]	; (8016e60 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8016d9a:	f00f f891 	bl	8025ec0 <__assert_func>
 8016d9e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8016e6c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 8016da2:	f8b8 1000 	ldrh.w	r1, [r8]
 8016da6:	4299      	cmp	r1, r3
 8016da8:	d803      	bhi.n	8016db2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8016daa:	4b2e      	ldr	r3, [pc, #184]	; (8016e64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8016dac:	21af      	movs	r1, #175	; 0xaf
 8016dae:	4a2b      	ldr	r2, [pc, #172]	; (8016e5c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8016db0:	e7f2      	b.n	8016d98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8016db2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8016e70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8016db6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016dba:	f8d9 3000 	ldr.w	r3, [r9]
 8016dbe:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8016dc2:	6823      	ldr	r3, [r4, #0]
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dc8:	4798      	blx	r3
 8016dca:	4607      	mov	r7, r0
 8016dcc:	b206      	sxth	r6, r0
 8016dce:	a803      	add	r0, sp, #12
 8016dd0:	f003 fc55 	bl	801a67e <_ZN8touchgfx12TextProviderC1Ev>
 8016dd4:	6823      	ldr	r3, [r4, #0]
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016dda:	4798      	blx	r3
 8016ddc:	6823      	ldr	r3, [r4, #0]
 8016dde:	4683      	mov	fp, r0
 8016de0:	4620      	mov	r0, r4
 8016de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016de4:	4798      	blx	r3
 8016de6:	465b      	mov	r3, fp
 8016de8:	9000      	str	r0, [sp, #0]
 8016dea:	a803      	add	r0, sp, #12
 8016dec:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8016dee:	9a02      	ldr	r2, [sp, #8]
 8016df0:	f003 fc92 	bl	801a718 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016df4:	f8da 3000 	ldr.w	r3, [sl]
 8016df8:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d0c8      	beq.n	8016d92 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8016e00:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8016e02:	f8b8 0000 	ldrh.w	r0, [r8]
 8016e06:	4290      	cmp	r0, r2
 8016e08:	d9cf      	bls.n	8016daa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8016e0a:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 8016e0e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016e12:	f8d9 3000 	ldr.w	r3, [r9]
 8016e16:	7862      	ldrb	r2, [r4, #1]
 8016e18:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8016e1c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016e20:	9400      	str	r4, [sp, #0]
 8016e22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016e26:	a803      	add	r0, sp, #12
 8016e28:	f001 fad1 	bl	80183ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016e2c:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8016e30:	b203      	sxth	r3, r0
 8016e32:	18b1      	adds	r1, r6, r2
 8016e34:	2900      	cmp	r1, #0
 8016e36:	dd0b      	ble.n	8016e50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8016e38:	3b01      	subs	r3, #1
 8016e3a:	fb13 f302 	smulbb	r3, r3, r2
 8016e3e:	fb17 3300 	smlabb	r3, r7, r0, r3
 8016e42:	b21e      	sxth	r6, r3
 8016e44:	4630      	mov	r0, r6
 8016e46:	b01a      	add	sp, #104	; 0x68
 8016e48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e4c:	b003      	add	sp, #12
 8016e4e:	4770      	bx	lr
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	dcf7      	bgt.n	8016e44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8016e54:	2600      	movs	r6, #0
 8016e56:	e7f5      	b.n	8016e44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8016e58:	0802cd03 	.word	0x0802cd03
 8016e5c:	0802ce38 	.word	0x0802ce38
 8016e60:	0802cd45 	.word	0x0802cd45
 8016e64:	0802cd6e 	.word	0x0802cd6e
 8016e68:	20056768 	.word	0x20056768
 8016e6c:	2005676c 	.word	0x2005676c
 8016e70:	20056770 	.word	0x20056770

08016e74 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8016e74:	b570      	push	{r4, r5, r6, lr}
 8016e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e7a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016e7c:	4604      	mov	r4, r0
 8016e7e:	4299      	cmp	r1, r3
 8016e80:	d01e      	beq.n	8016ec0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8016e82:	6803      	ldr	r3, [r0, #0]
 8016e84:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8016e86:	4b0f      	ldr	r3, [pc, #60]	; (8016ec4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	b92b      	cbnz	r3, 8016e98 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8016e8c:	4b0e      	ldr	r3, [pc, #56]	; (8016ec8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8016e8e:	21ae      	movs	r1, #174	; 0xae
 8016e90:	4a0e      	ldr	r2, [pc, #56]	; (8016ecc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016e92:	480f      	ldr	r0, [pc, #60]	; (8016ed0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8016e94:	f00f f814 	bl	8025ec0 <__assert_func>
 8016e98:	4b0e      	ldr	r3, [pc, #56]	; (8016ed4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8016e9a:	881b      	ldrh	r3, [r3, #0]
 8016e9c:	428b      	cmp	r3, r1
 8016e9e:	d803      	bhi.n	8016ea8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8016ea0:	4b0d      	ldr	r3, [pc, #52]	; (8016ed8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8016ea2:	21af      	movs	r1, #175	; 0xaf
 8016ea4:	4a09      	ldr	r2, [pc, #36]	; (8016ecc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016ea6:	e7f4      	b.n	8016e92 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8016ea8:	4b0c      	ldr	r3, [pc, #48]	; (8016edc <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8016eaa:	6818      	ldr	r0, [r3, #0]
 8016eac:	f7f1 fd30 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	4601      	mov	r1, r0
 8016eb4:	46ac      	mov	ip, r5
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	461a      	mov	r2, r3
 8016eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ebe:	4760      	bx	ip
 8016ec0:	2000      	movs	r0, #0
 8016ec2:	bd70      	pop	{r4, r5, r6, pc}
 8016ec4:	20056768 	.word	0x20056768
 8016ec8:	0802cd03 	.word	0x0802cd03
 8016ecc:	0802ce38 	.word	0x0802ce38
 8016ed0:	0802cd45 	.word	0x0802cd45
 8016ed4:	2005676c 	.word	0x2005676c
 8016ed8:	0802cd6e 	.word	0x0802cd6e
 8016edc:	20056774 	.word	0x20056774

08016ee0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016ee0:	b538      	push	{r3, r4, r5, lr}
 8016ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ee6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016ee8:	4604      	mov	r4, r0
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d014      	beq.n	8016f18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8016eee:	6803      	ldr	r3, [r0, #0]
 8016ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016ef2:	4798      	blx	r3
 8016ef4:	6823      	ldr	r3, [r4, #0]
 8016ef6:	4605      	mov	r5, r0
 8016ef8:	4620      	mov	r0, r4
 8016efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016efc:	4798      	blx	r3
 8016efe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016f02:	b22d      	sxth	r5, r5
 8016f04:	4601      	mov	r1, r0
 8016f06:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016f0a:	bf06      	itte	eq
 8016f0c:	4602      	moveq	r2, r0
 8016f0e:	4629      	moveq	r1, r5
 8016f10:	462a      	movne	r2, r5
 8016f12:	4620      	mov	r0, r4
 8016f14:	f7ef fcbc 	bl	8006890 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016f18:	bd38      	pop	{r3, r4, r5, pc}

08016f1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8016f1a:	888a      	ldrh	r2, [r1, #4]
 8016f1c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016f1e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016f22:	b922      	cbnz	r2, 8016f2e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8016f24:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016f28:	b90b      	cbnz	r3, 8016f2e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8016f2a:	f7ff bfd9 	b.w	8016ee0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016f2e:	4770      	bx	lr

08016f30 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016f30:	2300      	movs	r3, #0
 8016f32:	8083      	strh	r3, [r0, #4]
 8016f34:	80c3      	strh	r3, [r0, #6]
 8016f36:	8003      	strh	r3, [r0, #0]
 8016f38:	8043      	strh	r3, [r0, #2]
 8016f3a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8016f3e:	2bff      	cmp	r3, #255	; 0xff
 8016f40:	bf01      	itttt	eq
 8016f42:	890b      	ldrheq	r3, [r1, #8]
 8016f44:	8083      	strheq	r3, [r0, #4]
 8016f46:	894b      	ldrheq	r3, [r1, #10]
 8016f48:	80c3      	strheq	r3, [r0, #6]
 8016f4a:	4770      	bx	lr

08016f4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f4e:	4604      	mov	r4, r0
 8016f50:	466b      	mov	r3, sp
 8016f52:	6808      	ldr	r0, [r1, #0]
 8016f54:	6849      	ldr	r1, [r1, #4]
 8016f56:	c303      	stmia	r3!, {r0, r1}
 8016f58:	6823      	ldr	r3, [r4, #0]
 8016f5a:	4669      	mov	r1, sp
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f60:	4798      	blx	r3
 8016f62:	4b08      	ldr	r3, [pc, #32]	; (8016f84 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016f6a:	b10a      	cbz	r2, 8016f70 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016f6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016f6e:	b900      	cbnz	r0, 8016f72 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016f70:	6898      	ldr	r0, [r3, #8]
 8016f72:	6803      	ldr	r3, [r0, #0]
 8016f74:	4669      	mov	r1, sp
 8016f76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016f78:	699d      	ldr	r5, [r3, #24]
 8016f7a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016f7e:	47a8      	blx	r5
 8016f80:	b003      	add	sp, #12
 8016f82:	bd30      	pop	{r4, r5, pc}
 8016f84:	200566f8 	.word	0x200566f8

08016f88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8016f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f8e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016f90:	4606      	mov	r6, r0
 8016f92:	4299      	cmp	r1, r3
 8016f94:	d02a      	beq.n	8016fec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8016f96:	4b16      	ldr	r3, [pc, #88]	; (8016ff0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	b92b      	cbnz	r3, 8016fa8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8016f9c:	4b15      	ldr	r3, [pc, #84]	; (8016ff4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8016f9e:	21ae      	movs	r1, #174	; 0xae
 8016fa0:	4a15      	ldr	r2, [pc, #84]	; (8016ff8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8016fa2:	4816      	ldr	r0, [pc, #88]	; (8016ffc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8016fa4:	f00e ff8c 	bl	8025ec0 <__assert_func>
 8016fa8:	4a15      	ldr	r2, [pc, #84]	; (8017000 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8016faa:	8812      	ldrh	r2, [r2, #0]
 8016fac:	428a      	cmp	r2, r1
 8016fae:	d803      	bhi.n	8016fb8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8016fb0:	4b14      	ldr	r3, [pc, #80]	; (8017004 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8016fb2:	21af      	movs	r1, #175	; 0xaf
 8016fb4:	4a10      	ldr	r2, [pc, #64]	; (8016ff8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8016fb6:	e7f4      	b.n	8016fa2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8016fb8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016fbc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016fc0:	4b11      	ldr	r3, [pc, #68]	; (8017008 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8016fc2:	7854      	ldrb	r4, [r2, #1]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8016fca:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8016fce:	682b      	ldr	r3, [r5, #0]
 8016fd0:	69df      	ldr	r7, [r3, #28]
 8016fd2:	4b0e      	ldr	r3, [pc, #56]	; (801700c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8016fd4:	6818      	ldr	r0, [r3, #0]
 8016fd6:	f7f1 fc9b 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 8016fda:	2300      	movs	r3, #0
 8016fdc:	4602      	mov	r2, r0
 8016fde:	4621      	mov	r1, r4
 8016fe0:	9300      	str	r3, [sp, #0]
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8016fe6:	47b8      	blx	r7
 8016fe8:	b003      	add	sp, #12
 8016fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fec:	2000      	movs	r0, #0
 8016fee:	e7fb      	b.n	8016fe8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8016ff0:	20056768 	.word	0x20056768
 8016ff4:	0802cd03 	.word	0x0802cd03
 8016ff8:	0802cf44 	.word	0x0802cf44
 8016ffc:	0802cd45 	.word	0x0802cd45
 8017000:	2005676c 	.word	0x2005676c
 8017004:	0802cd6e 	.word	0x0802cd6e
 8017008:	20056770 	.word	0x20056770
 801700c:	20056774 	.word	0x20056774

08017010 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017010:	b570      	push	{r4, r5, r6, lr}
 8017012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017016:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017018:	4604      	mov	r4, r0
 801701a:	4299      	cmp	r1, r3
 801701c:	d01e      	beq.n	801705c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801701e:	6803      	ldr	r3, [r0, #0]
 8017020:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017022:	4b0f      	ldr	r3, [pc, #60]	; (8017060 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	b92b      	cbnz	r3, 8017034 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8017028:	4b0e      	ldr	r3, [pc, #56]	; (8017064 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801702a:	21ae      	movs	r1, #174	; 0xae
 801702c:	4a0e      	ldr	r2, [pc, #56]	; (8017068 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801702e:	480f      	ldr	r0, [pc, #60]	; (801706c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8017030:	f00e ff46 	bl	8025ec0 <__assert_func>
 8017034:	4b0e      	ldr	r3, [pc, #56]	; (8017070 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8017036:	881b      	ldrh	r3, [r3, #0]
 8017038:	428b      	cmp	r3, r1
 801703a:	d803      	bhi.n	8017044 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801703c:	4b0d      	ldr	r3, [pc, #52]	; (8017074 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801703e:	21af      	movs	r1, #175	; 0xaf
 8017040:	4a09      	ldr	r2, [pc, #36]	; (8017068 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017042:	e7f4      	b.n	801702e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8017044:	4b0c      	ldr	r3, [pc, #48]	; (8017078 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8017046:	6818      	ldr	r0, [r3, #0]
 8017048:	f7f1 fc62 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 801704c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801704e:	4601      	mov	r1, r0
 8017050:	46ac      	mov	ip, r5
 8017052:	4620      	mov	r0, r4
 8017054:	2300      	movs	r3, #0
 8017056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801705a:	4760      	bx	ip
 801705c:	2000      	movs	r0, #0
 801705e:	bd70      	pop	{r4, r5, r6, pc}
 8017060:	20056768 	.word	0x20056768
 8017064:	0802cd03 	.word	0x0802cd03
 8017068:	0802cf44 	.word	0x0802cf44
 801706c:	0802cd45 	.word	0x0802cd45
 8017070:	2005676c 	.word	0x2005676c
 8017074:	0802cd6e 	.word	0x0802cd6e
 8017078:	20056774 	.word	0x20056774

0801707c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801707c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017084:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017086:	b08c      	sub	sp, #48	; 0x30
 8017088:	4604      	mov	r4, r0
 801708a:	4293      	cmp	r3, r2
 801708c:	460e      	mov	r6, r1
 801708e:	d05d      	beq.n	801714c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017090:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017170 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8017094:	f8d8 2000 	ldr.w	r2, [r8]
 8017098:	b92a      	cbnz	r2, 80170a6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801709a:	4b2e      	ldr	r3, [pc, #184]	; (8017154 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801709c:	21ae      	movs	r1, #174	; 0xae
 801709e:	4a2e      	ldr	r2, [pc, #184]	; (8017158 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80170a0:	482e      	ldr	r0, [pc, #184]	; (801715c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 80170a2:	f00e ff0d 	bl	8025ec0 <__assert_func>
 80170a6:	4f2e      	ldr	r7, [pc, #184]	; (8017160 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 80170a8:	8839      	ldrh	r1, [r7, #0]
 80170aa:	4299      	cmp	r1, r3
 80170ac:	d803      	bhi.n	80170b6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 80170ae:	4b2d      	ldr	r3, [pc, #180]	; (8017164 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 80170b0:	21af      	movs	r1, #175	; 0xaf
 80170b2:	4a29      	ldr	r2, [pc, #164]	; (8017158 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80170b4:	e7f4      	b.n	80170a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 80170b6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80170ba:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80170be:	4b2a      	ldr	r3, [pc, #168]	; (8017168 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80170c6:	2a00      	cmp	r2, #0
 80170c8:	d040      	beq.n	801714c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80170ca:	784b      	ldrb	r3, [r1, #1]
 80170cc:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 80170d0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80170d4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80170d8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80170dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80170e0:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80170e4:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80170e8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80170ec:	ad05      	add	r5, sp, #20
 80170ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80170f0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80170f4:	9207      	str	r2, [sp, #28]
 80170f6:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80170fa:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80170fe:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8017102:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017106:	f88d a020 	strb.w	sl, [sp, #32]
 801710a:	9009      	str	r0, [sp, #36]	; 0x24
 801710c:	f7ee fdc0 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8017110:	4621      	mov	r1, r4
 8017112:	4681      	mov	r9, r0
 8017114:	4628      	mov	r0, r5
 8017116:	f002 fdf3 	bl	8019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801711a:	f8d8 3000 	ldr.w	r3, [r8]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d0bb      	beq.n	801709a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8017122:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017124:	883b      	ldrh	r3, [r7, #0]
 8017126:	428b      	cmp	r3, r1
 8017128:	d9c1      	bls.n	80170ae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801712a:	4b10      	ldr	r3, [pc, #64]	; (801716c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801712c:	6818      	ldr	r0, [r3, #0]
 801712e:	f7f1 fbef 	bl	8008910 <_ZNK8touchgfx5Texts7getTextEt>
 8017132:	2300      	movs	r3, #0
 8017134:	9303      	str	r3, [sp, #12]
 8017136:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017138:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801713c:	ab07      	add	r3, sp, #28
 801713e:	4648      	mov	r0, r9
 8017140:	9300      	str	r3, [sp, #0]
 8017142:	4633      	mov	r3, r6
 8017144:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017148:	f7f1 fb73 	bl	8008832 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801714c:	b00c      	add	sp, #48	; 0x30
 801714e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017152:	bf00      	nop
 8017154:	0802cd03 	.word	0x0802cd03
 8017158:	0802cf44 	.word	0x0802cf44
 801715c:	0802cd45 	.word	0x0802cd45
 8017160:	2005676c 	.word	0x2005676c
 8017164:	0802cd6e 	.word	0x0802cd6e
 8017168:	20056770 	.word	0x20056770
 801716c:	20056774 	.word	0x20056774
 8017170:	20056768 	.word	0x20056768

08017174 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8017174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017178:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801717a:	4604      	mov	r4, r0
 801717c:	460e      	mov	r6, r1
 801717e:	b08e      	sub	sp, #56	; 0x38
 8017180:	b218      	sxth	r0, r3
 8017182:	8921      	ldrh	r1, [r4, #8]
 8017184:	005b      	lsls	r3, r3, #1
 8017186:	8962      	ldrh	r2, [r4, #10]
 8017188:	f8ad 0000 	strh.w	r0, [sp]
 801718c:	b29b      	uxth	r3, r3
 801718e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8017192:	1ac9      	subs	r1, r1, r3
 8017194:	1ad3      	subs	r3, r2, r3
 8017196:	b209      	sxth	r1, r1
 8017198:	b21b      	sxth	r3, r3
 801719a:	2900      	cmp	r1, #0
 801719c:	f8ad 1004 	strh.w	r1, [sp, #4]
 80171a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80171a4:	dd5e      	ble.n	8017264 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	dd5c      	ble.n	8017264 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80171aa:	6830      	ldr	r0, [r6, #0]
 80171ac:	ab02      	add	r3, sp, #8
 80171ae:	6871      	ldr	r1, [r6, #4]
 80171b0:	c303      	stmia	r3!, {r0, r1}
 80171b2:	4669      	mov	r1, sp
 80171b4:	a802      	add	r0, sp, #8
 80171b6:	f7fd ff21 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 80171ba:	4620      	mov	r0, r4
 80171bc:	a902      	add	r1, sp, #8
 80171be:	f7ff fec5 	bl	8016f4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80171c2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80171c4:	2800      	cmp	r0, #0
 80171c6:	d05f      	beq.n	8017288 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80171c8:	8963      	ldrh	r3, [r4, #10]
 80171ca:	b202      	sxth	r2, r0
 80171cc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80171d0:	2500      	movs	r5, #0
 80171d2:	1a1f      	subs	r7, r3, r0
 80171d4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80171d8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80171dc:	b21b      	sxth	r3, r3
 80171de:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80171e2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80171e6:	af04      	add	r7, sp, #16
 80171e8:	1a09      	subs	r1, r1, r0
 80171ea:	9506      	str	r5, [sp, #24]
 80171ec:	f8ad 201e 	strh.w	r2, [sp, #30]
 80171f0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80171f4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80171f8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80171fc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017200:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017204:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017208:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 801720c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017210:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017214:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017218:	ab06      	add	r3, sp, #24
 801721a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801721e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017222:	e887 0003 	stmia.w	r7, {r0, r1}
 8017226:	4631      	mov	r1, r6
 8017228:	4638      	mov	r0, r7
 801722a:	f7fd fee7 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 801722e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017232:	2b00      	cmp	r3, #0
 8017234:	dd12      	ble.n	801725c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017236:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801723a:	2b00      	cmp	r3, #0
 801723c:	dd0e      	ble.n	801725c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801723e:	6823      	ldr	r3, [r4, #0]
 8017240:	4639      	mov	r1, r7
 8017242:	4620      	mov	r0, r4
 8017244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017246:	4798      	blx	r3
 8017248:	f7ee fd22 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 801724c:	6803      	ldr	r3, [r0, #0]
 801724e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017250:	4639      	mov	r1, r7
 8017252:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017256:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801725a:	47c0      	blx	r8
 801725c:	3501      	adds	r5, #1
 801725e:	2d04      	cmp	r5, #4
 8017260:	d1da      	bne.n	8017218 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8017262:	e011      	b.n	8017288 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017264:	6830      	ldr	r0, [r6, #0]
 8017266:	ab06      	add	r3, sp, #24
 8017268:	6871      	ldr	r1, [r6, #4]
 801726a:	c303      	stmia	r3!, {r0, r1}
 801726c:	6823      	ldr	r3, [r4, #0]
 801726e:	a906      	add	r1, sp, #24
 8017270:	4620      	mov	r0, r4
 8017272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017274:	4798      	blx	r3
 8017276:	f7ee fd0b 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 801727a:	6803      	ldr	r3, [r0, #0]
 801727c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801727e:	a906      	add	r1, sp, #24
 8017280:	699d      	ldr	r5, [r3, #24]
 8017282:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017286:	47a8      	blx	r5
 8017288:	b00e      	add	sp, #56	; 0x38
 801728a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017290 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017290:	4b02      	ldr	r3, [pc, #8]	; (801729c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017292:	6018      	str	r0, [r3, #0]
 8017294:	4b02      	ldr	r3, [pc, #8]	; (80172a0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017296:	6019      	str	r1, [r3, #0]
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop
 801729c:	20056700 	.word	0x20056700
 80172a0:	20056714 	.word	0x20056714

080172a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80172a4:	b538      	push	{r3, r4, r5, lr}
 80172a6:	4c2b      	ldr	r4, [pc, #172]	; (8017354 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80172a8:	4b2b      	ldr	r3, [pc, #172]	; (8017358 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80172aa:	6821      	ldr	r1, [r4, #0]
 80172ac:	681a      	ldr	r2, [r3, #0]
 80172ae:	4281      	cmp	r1, r0
 80172b0:	4d2a      	ldr	r5, [pc, #168]	; (801735c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80172b2:	492b      	ldr	r1, [pc, #172]	; (8017360 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80172b4:	d108      	bne.n	80172c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80172b6:	682b      	ldr	r3, [r5, #0]
 80172b8:	4293      	cmp	r3, r2
 80172ba:	d105      	bne.n	80172c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80172bc:	6808      	ldr	r0, [r1, #0]
 80172be:	280f      	cmp	r0, #15
 80172c0:	bf94      	ite	ls
 80172c2:	2000      	movls	r0, #0
 80172c4:	2001      	movhi	r0, #1
 80172c6:	bd38      	pop	{r3, r4, r5, pc}
 80172c8:	4b26      	ldr	r3, [pc, #152]	; (8017364 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80172ca:	6020      	str	r0, [r4, #0]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	602a      	str	r2, [r5, #0]
 80172d0:	4298      	cmp	r0, r3
 80172d2:	d905      	bls.n	80172e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80172d4:	4b24      	ldr	r3, [pc, #144]	; (8017368 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80172d6:	2137      	movs	r1, #55	; 0x37
 80172d8:	4a24      	ldr	r2, [pc, #144]	; (801736c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80172da:	4825      	ldr	r0, [pc, #148]	; (8017370 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80172dc:	f00e fdf0 	bl	8025ec0 <__assert_func>
 80172e0:	f010 0403 	ands.w	r4, r0, #3
 80172e4:	bf1f      	itttt	ne
 80172e6:	f1c4 0504 	rsbne	r5, r4, #4
 80172ea:	3b04      	subne	r3, #4
 80172ec:	1952      	addne	r2, r2, r5
 80172ee:	191b      	addne	r3, r3, r4
 80172f0:	4d20      	ldr	r5, [pc, #128]	; (8017374 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80172f2:	4402      	add	r2, r0
 80172f4:	1a1b      	subs	r3, r3, r0
 80172f6:	3001      	adds	r0, #1
 80172f8:	602a      	str	r2, [r5, #0]
 80172fa:	f020 0401 	bic.w	r4, r0, #1
 80172fe:	42a3      	cmp	r3, r4
 8017300:	d203      	bcs.n	801730a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017302:	4b19      	ldr	r3, [pc, #100]	; (8017368 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017304:	214a      	movs	r1, #74	; 0x4a
 8017306:	4a19      	ldr	r2, [pc, #100]	; (801736c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017308:	e7e7      	b.n	80172da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801730a:	f010 0002 	ands.w	r0, r0, #2
 801730e:	bf1f      	itttt	ne
 8017310:	f1c0 0504 	rsbne	r5, r0, #4
 8017314:	1952      	addne	r2, r2, r5
 8017316:	1f05      	subne	r5, r0, #4
 8017318:	195b      	addne	r3, r3, r5
 801731a:	4422      	add	r2, r4
 801731c:	4d16      	ldr	r5, [pc, #88]	; (8017378 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801731e:	1b1b      	subs	r3, r3, r4
 8017320:	602a      	str	r2, [r5, #0]
 8017322:	429c      	cmp	r4, r3
 8017324:	d903      	bls.n	801732e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017326:	4b10      	ldr	r3, [pc, #64]	; (8017368 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017328:	215d      	movs	r1, #93	; 0x5d
 801732a:	4a10      	ldr	r2, [pc, #64]	; (801736c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801732c:	e7d5      	b.n	80172da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801732e:	b120      	cbz	r0, 801733a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017330:	f1c0 0504 	rsb	r5, r0, #4
 8017334:	3804      	subs	r0, #4
 8017336:	442a      	add	r2, r5
 8017338:	4403      	add	r3, r0
 801733a:	1b1b      	subs	r3, r3, r4
 801733c:	4422      	add	r2, r4
 801733e:	480f      	ldr	r0, [pc, #60]	; (801737c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017340:	2b0f      	cmp	r3, #15
 8017342:	600b      	str	r3, [r1, #0]
 8017344:	6002      	str	r2, [r0, #0]
 8017346:	d803      	bhi.n	8017350 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017348:	4b0d      	ldr	r3, [pc, #52]	; (8017380 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801734a:	2170      	movs	r1, #112	; 0x70
 801734c:	4a07      	ldr	r2, [pc, #28]	; (801736c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801734e:	e7c4      	b.n	80172da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017350:	2001      	movs	r0, #1
 8017352:	e7b8      	b.n	80172c6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017354:	20056708 	.word	0x20056708
 8017358:	20056700 	.word	0x20056700
 801735c:	20056710 	.word	0x20056710
 8017360:	20056718 	.word	0x20056718
 8017364:	20056714 	.word	0x20056714
 8017368:	0802cfd8 	.word	0x0802cfd8
 801736c:	0802d0a0 	.word	0x0802d0a0
 8017370:	0802d011 	.word	0x0802d011
 8017374:	2005671c 	.word	0x2005671c
 8017378:	2005670c 	.word	0x2005670c
 801737c:	20056704 	.word	0x20056704
 8017380:	0802d05b 	.word	0x0802d05b

08017384 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017384:	4b04      	ldr	r3, [pc, #16]	; (8017398 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017386:	6818      	ldr	r0, [r3, #0]
 8017388:	b120      	cbz	r0, 8017394 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801738a:	4b04      	ldr	r3, [pc, #16]	; (801739c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801738c:	6818      	ldr	r0, [r3, #0]
 801738e:	3000      	adds	r0, #0
 8017390:	bf18      	it	ne
 8017392:	2001      	movne	r0, #1
 8017394:	4770      	bx	lr
 8017396:	bf00      	nop
 8017398:	20056700 	.word	0x20056700
 801739c:	20056714 	.word	0x20056714

080173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80173a0:	4b01      	ldr	r3, [pc, #4]	; (80173a8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80173a2:	6818      	ldr	r0, [r3, #0]
 80173a4:	4770      	bx	lr
 80173a6:	bf00      	nop
 80173a8:	20056708 	.word	0x20056708

080173ac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80173ac:	4b01      	ldr	r3, [pc, #4]	; (80173b4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80173ae:	6818      	ldr	r0, [r3, #0]
 80173b0:	4770      	bx	lr
 80173b2:	bf00      	nop
 80173b4:	20056710 	.word	0x20056710

080173b8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80173b8:	4b01      	ldr	r3, [pc, #4]	; (80173c0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80173ba:	6818      	ldr	r0, [r3, #0]
 80173bc:	4770      	bx	lr
 80173be:	bf00      	nop
 80173c0:	2005671c 	.word	0x2005671c

080173c4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80173c4:	4b01      	ldr	r3, [pc, #4]	; (80173cc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80173c6:	6818      	ldr	r0, [r3, #0]
 80173c8:	4770      	bx	lr
 80173ca:	bf00      	nop
 80173cc:	2005670c 	.word	0x2005670c

080173d0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80173d0:	4b01      	ldr	r3, [pc, #4]	; (80173d8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80173d2:	6818      	ldr	r0, [r3, #0]
 80173d4:	4770      	bx	lr
 80173d6:	bf00      	nop
 80173d8:	20056704 	.word	0x20056704

080173dc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80173dc:	4b01      	ldr	r3, [pc, #4]	; (80173e4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80173de:	6818      	ldr	r0, [r3, #0]
 80173e0:	4770      	bx	lr
 80173e2:	bf00      	nop
 80173e4:	20056718 	.word	0x20056718

080173e8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80173e8:	4b01      	ldr	r3, [pc, #4]	; (80173f0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80173ea:	6019      	str	r1, [r3, #0]
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop
 80173f0:	20056720 	.word	0x20056720

080173f4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80173f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f8:	4696      	mov	lr, r2
 80173fa:	b097      	sub	sp, #92	; 0x5c
 80173fc:	4605      	mov	r5, r0
 80173fe:	4614      	mov	r4, r2
 8017400:	460e      	mov	r6, r1
 8017402:	461f      	mov	r7, r3
 8017404:	f10d 0c1c 	add.w	ip, sp, #28
 8017408:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801740c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017410:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017414:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017418:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801741c:	f8de 3000 	ldr.w	r3, [lr]
 8017420:	f104 0e14 	add.w	lr, r4, #20
 8017424:	f8cc 3000 	str.w	r3, [ip]
 8017428:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801742c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017430:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017434:	f8de 3000 	ldr.w	r3, [lr]
 8017438:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801743c:	f8cc 3000 	str.w	r3, [ip]
 8017440:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017444:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801744c:	f8de 3000 	ldr.w	r3, [lr]
 8017450:	4631      	mov	r1, r6
 8017452:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017454:	4628      	mov	r0, r5
 8017456:	f8cc 3000 	str.w	r3, [ip]
 801745a:	682b      	ldr	r3, [r5, #0]
 801745c:	9201      	str	r2, [sp, #4]
 801745e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017460:	f8cd 8008 	str.w	r8, [sp, #8]
 8017464:	9200      	str	r2, [sp, #0]
 8017466:	aa07      	add	r2, sp, #28
 8017468:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801746c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8017470:	463b      	mov	r3, r7
 8017472:	47d8      	blx	fp
 8017474:	46a6      	mov	lr, r4
 8017476:	f10d 0c1c 	add.w	ip, sp, #28
 801747a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801747e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017482:	f8de 3000 	ldr.w	r3, [lr]
 8017486:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801748a:	343c      	adds	r4, #60	; 0x3c
 801748c:	f8cc 3000 	str.w	r3, [ip]
 8017490:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017494:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017498:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801749c:	f8de 3000 	ldr.w	r3, [lr]
 80174a0:	f8cc 3000 	str.w	r3, [ip]
 80174a4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80174a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174ae:	6823      	ldr	r3, [r4, #0]
 80174b0:	4631      	mov	r1, r6
 80174b2:	4628      	mov	r0, r5
 80174b4:	f8cc 3000 	str.w	r3, [ip]
 80174b8:	682b      	ldr	r3, [r5, #0]
 80174ba:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80174be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174c0:	f8cd 8008 	str.w	r8, [sp, #8]
 80174c4:	9201      	str	r2, [sp, #4]
 80174c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80174c8:	9200      	str	r2, [sp, #0]
 80174ca:	aa07      	add	r2, sp, #28
 80174cc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80174ce:	463b      	mov	r3, r7
 80174d0:	47a0      	blx	r4
 80174d2:	b017      	add	sp, #92	; 0x5c
 80174d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080174d8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80174d8:	2000      	movs	r0, #0
 80174da:	4770      	bx	lr

080174dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80174dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e0:	b08d      	sub	sp, #52	; 0x34
 80174e2:	4688      	mov	r8, r1
 80174e4:	f8d3 c000 	ldr.w	ip, [r3]
 80174e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80174ea:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80174ee:	680f      	ldr	r7, [r1, #0]
 80174f0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80174f4:	eba7 070c 	sub.w	r7, r7, ip
 80174f8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80174fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8017500:	42bc      	cmp	r4, r7
 8017502:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017504:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017508:	bfa8      	it	ge
 801750a:	463c      	movge	r4, r7
 801750c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017510:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017514:	ee07 4a90 	vmov	s15, r4
 8017518:	eb09 0e0c 	add.w	lr, r9, ip
 801751c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017520:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017524:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8017528:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801752c:	4571      	cmp	r1, lr
 801752e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017532:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017536:	ee25 5a27 	vmul.f32	s10, s10, s15
 801753a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801753e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017542:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017546:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801754a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801754e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017552:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017556:	f340 808c 	ble.w	8017672 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801755a:	eba1 060e 	sub.w	r6, r1, lr
 801755e:	fb96 f5f4 	sdiv	r5, r6, r4
 8017562:	ee07 5a10 	vmov	s14, r5
 8017566:	2d00      	cmp	r5, #0
 8017568:	fb04 6615 	mls	r6, r4, r5, r6
 801756c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017570:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017574:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017578:	eea7 1a05 	vfma.f32	s2, s14, s10
 801757c:	dd12      	ble.n	80175a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801757e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017582:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017586:	ee31 2a45 	vsub.f32	s4, s2, s10
 801758a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801758e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017592:	bf14      	ite	ne
 8017594:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017598:	eeb0 7a67 	vmoveq.f32	s14, s15
 801759c:	ee61 1a87 	vmul.f32	s3, s3, s14
 80175a0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80175a4:	fb05 f204 	mul.w	r2, r5, r4
 80175a8:	1abf      	subs	r7, r7, r2
 80175aa:	4494      	add	ip, r2
 80175ac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80175b0:	4411      	add	r1, r2
 80175b2:	eb09 020c 	add.w	r2, r9, ip
 80175b6:	b209      	sxth	r1, r1
 80175b8:	443a      	add	r2, r7
 80175ba:	428a      	cmp	r2, r1
 80175bc:	bfc4      	itt	gt
 80175be:	eba1 0209 	subgt.w	r2, r1, r9
 80175c2:	eba2 070c 	subgt.w	r7, r2, ip
 80175c6:	2f00      	cmp	r7, #0
 80175c8:	dd50      	ble.n	801766c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80175ca:	fb97 f1f4 	sdiv	r1, r7, r4
 80175ce:	fb04 7211 	mls	r2, r4, r1, r7
 80175d2:	b90a      	cbnz	r2, 80175d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80175d4:	3901      	subs	r1, #1
 80175d6:	4622      	mov	r2, r4
 80175d8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80175dc:	6840      	ldr	r0, [r0, #4]
 80175de:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80175e2:	44b6      	add	lr, r6
 80175e4:	f8d0 a000 	ldr.w	sl, [r0]
 80175e8:	2900      	cmp	r1, #0
 80175ea:	bfcc      	ite	gt
 80175ec:	46a1      	movgt	r9, r4
 80175ee:	4691      	movle	r9, r2
 80175f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80175f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80175f4:	fb04 e505 	mla	r5, r4, r5, lr
 80175f8:	eef0 6a42 	vmov.f32	s13, s4
 80175fc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017600:	9008      	str	r0, [sp, #32]
 8017602:	eeb0 7a61 	vmov.f32	s14, s3
 8017606:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017608:	695b      	ldr	r3, [r3, #20]
 801760a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801760e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017612:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017616:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017618:	445b      	add	r3, fp
 801761a:	9307      	str	r3, [sp, #28]
 801761c:	ee16 3a90 	vmov	r3, s13
 8017620:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017624:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017628:	ee21 3a23 	vmul.f32	s6, s2, s7
 801762c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017630:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017634:	ee17 7a90 	vmov	r7, s15
 8017638:	ee73 7a42 	vsub.f32	s15, s6, s4
 801763c:	fb97 f7f4 	sdiv	r7, r7, r4
 8017640:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017644:	ee17 ca90 	vmov	ip, s15
 8017648:	fb9c fcf4 	sdiv	ip, ip, r4
 801764c:	fb0c 3306 	mla	r3, ip, r6, r3
 8017650:	9302      	str	r3, [sp, #8]
 8017652:	ee17 3a10 	vmov	r3, s14
 8017656:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801765a:	fb07 3706 	mla	r7, r7, r6, r3
 801765e:	eba9 0306 	sub.w	r3, r9, r6
 8017662:	e9cd 4700 	strd	r4, r7, [sp]
 8017666:	f8da 4008 	ldr.w	r4, [sl, #8]
 801766a:	47a0      	blx	r4
 801766c:	b00d      	add	sp, #52	; 0x34
 801766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017672:	2500      	movs	r5, #0
 8017674:	462e      	mov	r6, r5
 8017676:	e799      	b.n	80175ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017678 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801767c:	b0db      	sub	sp, #364	; 0x16c
 801767e:	461d      	mov	r5, r3
 8017680:	4614      	mov	r4, r2
 8017682:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8017686:	910f      	str	r1, [sp, #60]	; 0x3c
 8017688:	4629      	mov	r1, r5
 801768a:	930a      	str	r3, [sp, #40]	; 0x28
 801768c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8017690:	9009      	str	r0, [sp, #36]	; 0x24
 8017692:	930b      	str	r3, [sp, #44]	; 0x2c
 8017694:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017698:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801769c:	9310      	str	r3, [sp, #64]	; 0x40
 801769e:	6803      	ldr	r3, [r0, #0]
 80176a0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80176a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80176a6:	47b8      	blx	r7
 80176a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176aa:	6058      	str	r0, [r3, #4]
 80176ac:	2800      	cmp	r0, #0
 80176ae:	f000 83a1 	beq.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80176b2:	682b      	ldr	r3, [r5, #0]
 80176b4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80176b8:	ed94 7a02 	vldr	s14, [r4, #8]
 80176bc:	9314      	str	r3, [sp, #80]	; 0x50
 80176be:	686b      	ldr	r3, [r5, #4]
 80176c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80176c4:	9315      	str	r3, [sp, #84]	; 0x54
 80176c6:	4bc1      	ldr	r3, [pc, #772]	; (80179cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80176c8:	7819      	ldrb	r1, [r3, #0]
 80176ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80176ce:	2900      	cmp	r1, #0
 80176d0:	bf16      	itet	ne
 80176d2:	4619      	movne	r1, r3
 80176d4:	4611      	moveq	r1, r2
 80176d6:	4613      	movne	r3, r2
 80176d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176dc:	9116      	str	r1, [sp, #88]	; 0x58
 80176de:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80176e2:	f240 8387 	bls.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80176e6:	ed94 7a07 	vldr	s14, [r4, #28]
 80176ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80176ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f2:	f240 837f 	bls.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80176f6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80176fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80176fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017702:	f240 8377 	bls.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017706:	6822      	ldr	r2, [r4, #0]
 8017708:	4bb1      	ldr	r3, [pc, #708]	; (80179d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801770a:	429a      	cmp	r2, r3
 801770c:	f2c0 8372 	blt.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017710:	49b0      	ldr	r1, [pc, #704]	; (80179d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017712:	6963      	ldr	r3, [r4, #20]
 8017714:	428a      	cmp	r2, r1
 8017716:	f300 836d 	bgt.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801771a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801771e:	48ae      	ldr	r0, [pc, #696]	; (80179d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017720:	33ff      	adds	r3, #255	; 0xff
 8017722:	4283      	cmp	r3, r0
 8017724:	f200 8366 	bhi.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801772a:	4dac      	ldr	r5, [pc, #688]	; (80179dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801772c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017730:	33ff      	adds	r3, #255	; 0xff
 8017732:	42ab      	cmp	r3, r5
 8017734:	f200 835e 	bhi.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017738:	6862      	ldr	r2, [r4, #4]
 801773a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801773e:	33ff      	adds	r3, #255	; 0xff
 8017740:	4283      	cmp	r3, r0
 8017742:	f200 8357 	bhi.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017746:	69a1      	ldr	r1, [r4, #24]
 8017748:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801774c:	33ff      	adds	r3, #255	; 0xff
 801774e:	4283      	cmp	r3, r0
 8017750:	f200 8350 	bhi.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017754:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017756:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801775a:	30ff      	adds	r0, #255	; 0xff
 801775c:	42a8      	cmp	r0, r5
 801775e:	f200 8349 	bhi.w	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017762:	428a      	cmp	r2, r1
 8017764:	f280 8110 	bge.w	8017988 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017768:	429a      	cmp	r2, r3
 801776a:	f300 8119 	bgt.w	80179a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801776e:	4299      	cmp	r1, r3
 8017770:	f280 811d 	bge.w	80179ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017774:	2502      	movs	r5, #2
 8017776:	2701      	movs	r7, #1
 8017778:	46a9      	mov	r9, r5
 801777a:	46b8      	mov	r8, r7
 801777c:	f04f 0a00 	mov.w	sl, #0
 8017780:	4621      	mov	r1, r4
 8017782:	a849      	add	r0, sp, #292	; 0x124
 8017784:	f003 fd3e 	bl	801b204 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017788:	4622      	mov	r2, r4
 801778a:	4653      	mov	r3, sl
 801778c:	a949      	add	r1, sp, #292	; 0x124
 801778e:	f8cd 9000 	str.w	r9, [sp]
 8017792:	a819      	add	r0, sp, #100	; 0x64
 8017794:	f003 fe66 	bl	801b464 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017798:	4622      	mov	r2, r4
 801779a:	4653      	mov	r3, sl
 801779c:	a949      	add	r1, sp, #292	; 0x124
 801779e:	f8cd 8000 	str.w	r8, [sp]
 80177a2:	a829      	add	r0, sp, #164	; 0xa4
 80177a4:	f003 fe5e 	bl	801b464 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80177a8:	4643      	mov	r3, r8
 80177aa:	4622      	mov	r2, r4
 80177ac:	a949      	add	r1, sp, #292	; 0x124
 80177ae:	f8cd 9000 	str.w	r9, [sp]
 80177b2:	a839      	add	r0, sp, #228	; 0xe4
 80177b4:	f003 fe56 	bl	801b464 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80177b8:	42af      	cmp	r7, r5
 80177ba:	af12      	add	r7, sp, #72	; 0x48
 80177bc:	bfb7      	itett	lt
 80177be:	2300      	movlt	r3, #0
 80177c0:	2301      	movge	r3, #1
 80177c2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80177c4:	ac19      	addlt	r4, sp, #100	; 0x64
 80177c6:	bfb1      	iteee	lt
 80177c8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80177ca:	ad19      	addge	r5, sp, #100	; 0x64
 80177cc:	930e      	strge	r3, [sp, #56]	; 0x38
 80177ce:	ac29      	addge	r4, sp, #164	; 0xa4
 80177d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80177d6:	e887 0003 	stmia.w	r7, {r0, r1}
 80177da:	b928      	cbnz	r0, 80177e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80177dc:	4b80      	ldr	r3, [pc, #512]	; (80179e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80177de:	6818      	ldr	r0, [r3, #0]
 80177e0:	6803      	ldr	r3, [r0, #0]
 80177e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177e4:	4798      	blx	r3
 80177e6:	6038      	str	r0, [r7, #0]
 80177e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80177ea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80177ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80177f2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80177f4:	930c      	str	r3, [sp, #48]	; 0x30
 80177f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80177f8:	6963      	ldr	r3, [r4, #20]
 80177fa:	440b      	add	r3, r1
 80177fc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017800:	4408      	add	r0, r1
 8017802:	b200      	sxth	r0, r0
 8017804:	4283      	cmp	r3, r0
 8017806:	900d      	str	r0, [sp, #52]	; 0x34
 8017808:	f280 80dd 	bge.w	80179c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801780c:	428b      	cmp	r3, r1
 801780e:	da08      	bge.n	8017822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017810:	2a00      	cmp	r2, #0
 8017812:	dd06      	ble.n	8017822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017814:	1acb      	subs	r3, r1, r3
 8017816:	429a      	cmp	r2, r3
 8017818:	f2c0 80e4 	blt.w	80179e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801781c:	2b00      	cmp	r3, #0
 801781e:	f300 80e2 	bgt.w	80179e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017822:	6967      	ldr	r7, [r4, #20]
 8017824:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801782a:	443b      	add	r3, r7
 801782c:	461f      	mov	r7, r3
 801782e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017830:	1bdf      	subs	r7, r3, r7
 8017832:	4297      	cmp	r7, r2
 8017834:	bfa8      	it	ge
 8017836:	4617      	movge	r7, r2
 8017838:	2f00      	cmp	r7, #0
 801783a:	f340 8166 	ble.w	8017b0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801783e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017840:	6829      	ldr	r1, [r5, #0]
 8017842:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017846:	f9bb 3000 	ldrsh.w	r3, [fp]
 801784a:	4411      	add	r1, r2
 801784c:	6820      	ldr	r0, [r4, #0]
 801784e:	4299      	cmp	r1, r3
 8017850:	dd1a      	ble.n	8017888 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017852:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017856:	4402      	add	r2, r0
 8017858:	440b      	add	r3, r1
 801785a:	b21b      	sxth	r3, r3
 801785c:	429a      	cmp	r2, r3
 801785e:	dc13      	bgt.n	8017888 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017860:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017862:	a912      	add	r1, sp, #72	; 0x48
 8017864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017866:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	9206      	str	r2, [sp, #24]
 801786c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801786e:	9500      	str	r5, [sp, #0]
 8017870:	9205      	str	r2, [sp, #20]
 8017872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017874:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017878:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801787a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801787e:	aa49      	add	r2, sp, #292	; 0x124
 8017880:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8017884:	4623      	mov	r3, r4
 8017886:	47c8      	blx	r9
 8017888:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801788c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017890:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017898:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801789c:	68a1      	ldr	r1, [r4, #8]
 801789e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80178a2:	ed94 6a08 	vldr	s12, [r4, #32]
 80178a6:	edd4 6a07 	vldr	s13, [r4, #28]
 80178aa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80178ae:	ee76 6a86 	vadd.f32	s13, s13, s12
 80178b2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80178b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80178ba:	edc4 6a07 	vstr	s13, [r4, #28]
 80178be:	441a      	add	r2, r3
 80178c0:	6963      	ldr	r3, [r4, #20]
 80178c2:	3301      	adds	r3, #1
 80178c4:	6022      	str	r2, [r4, #0]
 80178c6:	6163      	str	r3, [r4, #20]
 80178c8:	69a3      	ldr	r3, [r4, #24]
 80178ca:	3b01      	subs	r3, #1
 80178cc:	61a3      	str	r3, [r4, #24]
 80178ce:	6923      	ldr	r3, [r4, #16]
 80178d0:	440b      	add	r3, r1
 80178d2:	68e1      	ldr	r1, [r4, #12]
 80178d4:	428b      	cmp	r3, r1
 80178d6:	6123      	str	r3, [r4, #16]
 80178d8:	db15      	blt.n	8017906 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80178da:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80178de:	3201      	adds	r2, #1
 80178e0:	1a5b      	subs	r3, r3, r1
 80178e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80178e6:	6022      	str	r2, [r4, #0]
 80178e8:	6123      	str	r3, [r4, #16]
 80178ea:	edc4 6a07 	vstr	s13, [r4, #28]
 80178ee:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80178f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80178f6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80178fa:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80178fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017902:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017906:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801790a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801790e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017916:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801791a:	68a9      	ldr	r1, [r5, #8]
 801791c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017920:	ed95 6a08 	vldr	s12, [r5, #32]
 8017924:	edd5 6a07 	vldr	s13, [r5, #28]
 8017928:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801792c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017930:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017934:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017938:	edc5 6a07 	vstr	s13, [r5, #28]
 801793c:	441a      	add	r2, r3
 801793e:	696b      	ldr	r3, [r5, #20]
 8017940:	3301      	adds	r3, #1
 8017942:	602a      	str	r2, [r5, #0]
 8017944:	616b      	str	r3, [r5, #20]
 8017946:	69ab      	ldr	r3, [r5, #24]
 8017948:	3b01      	subs	r3, #1
 801794a:	61ab      	str	r3, [r5, #24]
 801794c:	692b      	ldr	r3, [r5, #16]
 801794e:	440b      	add	r3, r1
 8017950:	68e9      	ldr	r1, [r5, #12]
 8017952:	428b      	cmp	r3, r1
 8017954:	612b      	str	r3, [r5, #16]
 8017956:	db15      	blt.n	8017984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017958:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801795c:	3201      	adds	r2, #1
 801795e:	1a5b      	subs	r3, r3, r1
 8017960:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017964:	602a      	str	r2, [r5, #0]
 8017966:	612b      	str	r3, [r5, #16]
 8017968:	edc5 6a07 	vstr	s13, [r5, #28]
 801796c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017970:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017974:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017978:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801797c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017980:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017984:	3f01      	subs	r7, #1
 8017986:	e757      	b.n	8017838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017988:	4299      	cmp	r1, r3
 801798a:	dc13      	bgt.n	80179b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801798c:	429a      	cmp	r2, r3
 801798e:	da14      	bge.n	80179ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017990:	2502      	movs	r5, #2
 8017992:	2703      	movs	r7, #3
 8017994:	f04f 0800 	mov.w	r8, #0
 8017998:	46a9      	mov	r9, r5
 801799a:	f04f 0a01 	mov.w	sl, #1
 801799e:	e6ef      	b.n	8017780 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80179a0:	2501      	movs	r5, #1
 80179a2:	2700      	movs	r7, #0
 80179a4:	46a9      	mov	r9, r5
 80179a6:	46b8      	mov	r8, r7
 80179a8:	f04f 0a02 	mov.w	sl, #2
 80179ac:	e6e8      	b.n	8017780 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80179ae:	2501      	movs	r5, #1
 80179b0:	2702      	movs	r7, #2
 80179b2:	e6e1      	b.n	8017778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80179b4:	2500      	movs	r5, #0
 80179b6:	2701      	movs	r7, #1
 80179b8:	e7f4      	b.n	80179a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80179ba:	2702      	movs	r7, #2
 80179bc:	2503      	movs	r5, #3
 80179be:	f04f 0900 	mov.w	r9, #0
 80179c2:	46b8      	mov	r8, r7
 80179c4:	e7e9      	b.n	801799a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80179c6:	4613      	mov	r3, r2
 80179c8:	e728      	b.n	801781c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80179ca:	bf00      	nop
 80179cc:	200566f0 	.word	0x200566f0
 80179d0:	fffd8f01 	.word	0xfffd8f01
 80179d4:	00027100 	.word	0x00027100
 80179d8:	0004e1ff 	.word	0x0004e1ff
 80179dc:	0004e1fe 	.word	0x0004e1fe
 80179e0:	200566f8 	.word	0x200566f8
 80179e4:	4613      	mov	r3, r2
 80179e6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80179e8:	469e      	mov	lr, r3
 80179ea:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80179ec:	469c      	mov	ip, r3
 80179ee:	9111      	str	r1, [sp, #68]	; 0x44
 80179f0:	f04f 0900 	mov.w	r9, #0
 80179f4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80179f8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80179fc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017a00:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8017a04:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8017a08:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017a0c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8017a10:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8017a14:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8017a18:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8017a1c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8017a20:	f1bc 0f00 	cmp.w	ip, #0
 8017a24:	d147      	bne.n	8017ab6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017a26:	eb03 0c07 	add.w	ip, r3, r7
 8017a2a:	1ad7      	subs	r7, r2, r3
 8017a2c:	f1b9 0f00 	cmp.w	r9, #0
 8017a30:	d009      	beq.n	8017a46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017a32:	9029      	str	r0, [sp, #164]	; 0xa4
 8017a34:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8017a38:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8017a3c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8017a40:	912d      	str	r1, [sp, #180]	; 0xb4
 8017a42:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8017a46:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017a48:	f04f 0800 	mov.w	r8, #0
 8017a4c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017a50:	9111      	str	r1, [sp, #68]	; 0x44
 8017a52:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017a56:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017a5a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017a5e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017a62:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017a66:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017a6a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017a6e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017a72:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017a76:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017a7a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017a7e:	f1be 0f00 	cmp.w	lr, #0
 8017a82:	d031      	beq.n	8017ae8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017a84:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017a86:	4450      	add	r0, sl
 8017a88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017a8c:	4431      	add	r1, r6
 8017a8e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017a92:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017a96:	4549      	cmp	r1, r9
 8017a98:	db08      	blt.n	8017aac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8017a9a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017a9e:	3001      	adds	r0, #1
 8017aa0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017aa4:	eba1 0109 	sub.w	r1, r1, r9
 8017aa8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017aac:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017ab0:	f04f 0801 	mov.w	r8, #1
 8017ab4:	e7e3      	b.n	8017a7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8017ab6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017ab8:	4450      	add	r0, sl
 8017aba:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017abe:	4431      	add	r1, r6
 8017ac0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017ac4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017ac8:	4541      	cmp	r1, r8
 8017aca:	db08      	blt.n	8017ade <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017acc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017ad0:	3001      	adds	r0, #1
 8017ad2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017ad6:	eba1 0108 	sub.w	r1, r1, r8
 8017ada:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017ade:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017ae2:	f04f 0901 	mov.w	r9, #1
 8017ae6:	e79b      	b.n	8017a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017ae8:	449c      	add	ip, r3
 8017aea:	1aff      	subs	r7, r7, r3
 8017aec:	f1b8 0f00 	cmp.w	r8, #0
 8017af0:	d009      	beq.n	8017b06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017af2:	9019      	str	r0, [sp, #100]	; 0x64
 8017af4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017af8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017afc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017b00:	911d      	str	r1, [sp, #116]	; 0x74
 8017b02:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017b06:	1ad2      	subs	r2, r2, r3
 8017b08:	e68b      	b.n	8017822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b0c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	f000 80d1 	beq.w	8017cb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017b14:	ad19      	add	r5, sp, #100	; 0x64
 8017b16:	ac39      	add	r4, sp, #228	; 0xe4
 8017b18:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017b1a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017b1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017b22:	930c      	str	r3, [sp, #48]	; 0x30
 8017b24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017b26:	6963      	ldr	r3, [r4, #20]
 8017b28:	440b      	add	r3, r1
 8017b2a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017b2e:	4408      	add	r0, r1
 8017b30:	b200      	sxth	r0, r0
 8017b32:	4283      	cmp	r3, r0
 8017b34:	900d      	str	r0, [sp, #52]	; 0x34
 8017b36:	f280 80c1 	bge.w	8017cbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8017b3a:	428b      	cmp	r3, r1
 8017b3c:	da08      	bge.n	8017b50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017b3e:	2a00      	cmp	r2, #0
 8017b40:	dd06      	ble.n	8017b50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017b42:	1acb      	subs	r3, r1, r3
 8017b44:	429a      	cmp	r2, r3
 8017b46:	f2c0 80bb 	blt.w	8017cc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f300 80b9 	bgt.w	8017cc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017b50:	6967      	ldr	r7, [r4, #20]
 8017b52:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b58:	443b      	add	r3, r7
 8017b5a:	461f      	mov	r7, r3
 8017b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b5e:	1bdf      	subs	r7, r3, r7
 8017b60:	4297      	cmp	r7, r2
 8017b62:	bfa8      	it	ge
 8017b64:	4617      	movge	r7, r2
 8017b66:	2f00      	cmp	r7, #0
 8017b68:	f340 813c 	ble.w	8017de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017b6c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017b6e:	6829      	ldr	r1, [r5, #0]
 8017b70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017b74:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017b78:	4411      	add	r1, r2
 8017b7a:	6820      	ldr	r0, [r4, #0]
 8017b7c:	4299      	cmp	r1, r3
 8017b7e:	dd1a      	ble.n	8017bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017b80:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017b84:	4402      	add	r2, r0
 8017b86:	440b      	add	r3, r1
 8017b88:	b21b      	sxth	r3, r3
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	dc13      	bgt.n	8017bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017b8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017b90:	a912      	add	r1, sp, #72	; 0x48
 8017b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	9206      	str	r2, [sp, #24]
 8017b9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b9c:	9500      	str	r5, [sp, #0]
 8017b9e:	9205      	str	r2, [sp, #20]
 8017ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ba2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017ba6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017ba8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017bac:	aa49      	add	r2, sp, #292	; 0x124
 8017bae:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8017bb2:	4623      	mov	r3, r4
 8017bb4:	47c8      	blx	r9
 8017bb6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017bba:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017bbe:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017bc6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017bca:	68a1      	ldr	r1, [r4, #8]
 8017bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017bd0:	ed94 6a08 	vldr	s12, [r4, #32]
 8017bd4:	edd4 6a07 	vldr	s13, [r4, #28]
 8017bd8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017bdc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017be0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017be4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017be8:	edc4 6a07 	vstr	s13, [r4, #28]
 8017bec:	441a      	add	r2, r3
 8017bee:	6963      	ldr	r3, [r4, #20]
 8017bf0:	3301      	adds	r3, #1
 8017bf2:	6022      	str	r2, [r4, #0]
 8017bf4:	6163      	str	r3, [r4, #20]
 8017bf6:	69a3      	ldr	r3, [r4, #24]
 8017bf8:	3b01      	subs	r3, #1
 8017bfa:	61a3      	str	r3, [r4, #24]
 8017bfc:	6923      	ldr	r3, [r4, #16]
 8017bfe:	440b      	add	r3, r1
 8017c00:	68e1      	ldr	r1, [r4, #12]
 8017c02:	428b      	cmp	r3, r1
 8017c04:	6123      	str	r3, [r4, #16]
 8017c06:	db15      	blt.n	8017c34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017c08:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017c0c:	3201      	adds	r2, #1
 8017c0e:	1a5b      	subs	r3, r3, r1
 8017c10:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017c14:	6022      	str	r2, [r4, #0]
 8017c16:	6123      	str	r3, [r4, #16]
 8017c18:	edc4 6a07 	vstr	s13, [r4, #28]
 8017c1c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017c20:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017c24:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017c28:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017c30:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017c34:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017c38:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017c3c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017c44:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017c48:	68a9      	ldr	r1, [r5, #8]
 8017c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017c4e:	ed95 6a08 	vldr	s12, [r5, #32]
 8017c52:	edd5 6a07 	vldr	s13, [r5, #28]
 8017c56:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017c5a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017c5e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017c62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017c66:	edc5 6a07 	vstr	s13, [r5, #28]
 8017c6a:	441a      	add	r2, r3
 8017c6c:	696b      	ldr	r3, [r5, #20]
 8017c6e:	3301      	adds	r3, #1
 8017c70:	602a      	str	r2, [r5, #0]
 8017c72:	616b      	str	r3, [r5, #20]
 8017c74:	69ab      	ldr	r3, [r5, #24]
 8017c76:	3b01      	subs	r3, #1
 8017c78:	61ab      	str	r3, [r5, #24]
 8017c7a:	692b      	ldr	r3, [r5, #16]
 8017c7c:	440b      	add	r3, r1
 8017c7e:	68e9      	ldr	r1, [r5, #12]
 8017c80:	428b      	cmp	r3, r1
 8017c82:	612b      	str	r3, [r5, #16]
 8017c84:	db15      	blt.n	8017cb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017c86:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017c8a:	3201      	adds	r2, #1
 8017c8c:	1a5b      	subs	r3, r3, r1
 8017c8e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017c92:	602a      	str	r2, [r5, #0]
 8017c94:	612b      	str	r3, [r5, #16]
 8017c96:	edc5 6a07 	vstr	s13, [r5, #28]
 8017c9a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017c9e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017ca2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017ca6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017cae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017cb2:	3f01      	subs	r7, #1
 8017cb4:	e757      	b.n	8017b66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8017cb6:	ad39      	add	r5, sp, #228	; 0xe4
 8017cb8:	ac19      	add	r4, sp, #100	; 0x64
 8017cba:	e72d      	b.n	8017b18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017cbc:	4613      	mov	r3, r2
 8017cbe:	e744      	b.n	8017b4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017cc0:	4613      	mov	r3, r2
 8017cc2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017cc4:	469e      	mov	lr, r3
 8017cc6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017cca:	461f      	mov	r7, r3
 8017ccc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017cd0:	f04f 0900 	mov.w	r9, #0
 8017cd4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017cd8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017cdc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017ce0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017ce4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8017ce8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8017cea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8017cee:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017cf2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8017cf6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8017cfa:	960e      	str	r6, [sp, #56]	; 0x38
 8017cfc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017d00:	2f00      	cmp	r7, #0
 8017d02:	d146      	bne.n	8017d92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017d04:	449c      	add	ip, r3
 8017d06:	1ad7      	subs	r7, r2, r3
 8017d08:	f1b9 0f00 	cmp.w	r9, #0
 8017d0c:	d009      	beq.n	8017d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017d0e:	9039      	str	r0, [sp, #228]	; 0xe4
 8017d10:	913d      	str	r1, [sp, #244]	; 0xf4
 8017d12:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017d16:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8017d1a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8017d1e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017d22:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017d24:	f04f 0800 	mov.w	r8, #0
 8017d28:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017d2c:	910e      	str	r1, [sp, #56]	; 0x38
 8017d2e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017d32:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017d36:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017d3a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017d3e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017d42:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017d46:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017d4a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017d4e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017d52:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017d56:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017d5a:	f1be 0f00 	cmp.w	lr, #0
 8017d5e:	d030      	beq.n	8017dc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017d60:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017d62:	4450      	add	r0, sl
 8017d64:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017d68:	4431      	add	r1, r6
 8017d6a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017d6e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017d72:	4549      	cmp	r1, r9
 8017d74:	db08      	blt.n	8017d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017d76:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017d7a:	3001      	adds	r0, #1
 8017d7c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017d80:	eba1 0109 	sub.w	r1, r1, r9
 8017d84:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017d88:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017d8c:	f04f 0801 	mov.w	r8, #1
 8017d90:	e7e3      	b.n	8017d5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017d92:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017d94:	4450      	add	r0, sl
 8017d96:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017d9a:	4431      	add	r1, r6
 8017d9c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017da0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017da4:	4541      	cmp	r1, r8
 8017da6:	db08      	blt.n	8017dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8017da8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017dac:	3001      	adds	r0, #1
 8017dae:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017db2:	eba1 0108 	sub.w	r1, r1, r8
 8017db6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017dba:	3f01      	subs	r7, #1
 8017dbc:	f04f 0901 	mov.w	r9, #1
 8017dc0:	e79e      	b.n	8017d00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017dc2:	449c      	add	ip, r3
 8017dc4:	1aff      	subs	r7, r7, r3
 8017dc6:	f1b8 0f00 	cmp.w	r8, #0
 8017dca:	d009      	beq.n	8017de0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017dcc:	9019      	str	r0, [sp, #100]	; 0x64
 8017dce:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017dd2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017dd6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017dda:	911d      	str	r1, [sp, #116]	; 0x74
 8017ddc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017de0:	1ad2      	subs	r2, r2, r3
 8017de2:	e6b5      	b.n	8017b50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	b923      	cbnz	r3, 8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017dea:	4b04      	ldr	r3, [pc, #16]	; (8017dfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017dec:	6818      	ldr	r0, [r3, #0]
 8017dee:	6803      	ldr	r3, [r0, #0]
 8017df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017df2:	4798      	blx	r3
 8017df4:	b05b      	add	sp, #364	; 0x16c
 8017df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dfa:	bf00      	nop
 8017dfc:	200566f8 	.word	0x200566f8

08017e00 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017e00:	b570      	push	{r4, r5, r6, lr}
 8017e02:	4604      	mov	r4, r0
 8017e04:	2500      	movs	r5, #0
 8017e06:	9804      	ldr	r0, [sp, #16]
 8017e08:	7223      	strb	r3, [r4, #8]
 8017e0a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017e0e:	8025      	strh	r5, [r4, #0]
 8017e10:	6061      	str	r1, [r4, #4]
 8017e12:	7263      	strb	r3, [r4, #9]
 8017e14:	60e0      	str	r0, [r4, #12]
 8017e16:	8222      	strh	r2, [r4, #16]
 8017e18:	8265      	strh	r5, [r4, #18]
 8017e1a:	82a5      	strh	r5, [r4, #20]
 8017e1c:	82e5      	strh	r5, [r4, #22]
 8017e1e:	8325      	strh	r5, [r4, #24]
 8017e20:	8365      	strh	r5, [r4, #26]
 8017e22:	83a5      	strh	r5, [r4, #28]
 8017e24:	77a5      	strb	r5, [r4, #30]
 8017e26:	6803      	ldr	r3, [r0, #0]
 8017e28:	695b      	ldr	r3, [r3, #20]
 8017e2a:	4798      	blx	r3
 8017e2c:	4606      	mov	r6, r0
 8017e2e:	b1f8      	cbz	r0, 8017e70 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017e30:	68e0      	ldr	r0, [r4, #12]
 8017e32:	4631      	mov	r1, r6
 8017e34:	6803      	ldr	r3, [r0, #0]
 8017e36:	68db      	ldr	r3, [r3, #12]
 8017e38:	4798      	blx	r3
 8017e3a:	7b43      	ldrb	r3, [r0, #13]
 8017e3c:	7a82      	ldrb	r2, [r0, #10]
 8017e3e:	4605      	mov	r5, r0
 8017e40:	005b      	lsls	r3, r3, #1
 8017e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e46:	4313      	orrs	r3, r2
 8017e48:	83a3      	strh	r3, [r4, #28]
 8017e4a:	7a63      	ldrb	r3, [r4, #9]
 8017e4c:	2b04      	cmp	r3, #4
 8017e4e:	d10f      	bne.n	8017e70 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017e50:	68e0      	ldr	r0, [r4, #12]
 8017e52:	462a      	mov	r2, r5
 8017e54:	4631      	mov	r1, r6
 8017e56:	6803      	ldr	r3, [r0, #0]
 8017e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e5a:	4798      	blx	r3
 8017e5c:	7b6b      	ldrb	r3, [r5, #13]
 8017e5e:	005b      	lsls	r3, r3, #1
 8017e60:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017e64:	7aab      	ldrb	r3, [r5, #10]
 8017e66:	4313      	orrs	r3, r2
 8017e68:	4418      	add	r0, r3
 8017e6a:	8ba3      	ldrh	r3, [r4, #28]
 8017e6c:	4418      	add	r0, r3
 8017e6e:	83a0      	strh	r0, [r4, #28]
 8017e70:	4620      	mov	r0, r4
 8017e72:	bd70      	pop	{r4, r5, r6, pc}

08017e74 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e78:	2400      	movs	r4, #0
 8017e7a:	b085      	sub	sp, #20
 8017e7c:	4681      	mov	r9, r0
 8017e7e:	4688      	mov	r8, r1
 8017e80:	4692      	mov	sl, r2
 8017e82:	469b      	mov	fp, r3
 8017e84:	4627      	mov	r7, r4
 8017e86:	4625      	mov	r5, r4
 8017e88:	4626      	mov	r6, r4
 8017e8a:	4554      	cmp	r4, sl
 8017e8c:	da2a      	bge.n	8017ee4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	9303      	str	r3, [sp, #12]
 8017e92:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017e96:	429d      	cmp	r5, r3
 8017e98:	d004      	beq.n	8017ea4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8017e9a:	f242 030b 	movw	r3, #8203	; 0x200b
 8017e9e:	429d      	cmp	r5, r3
 8017ea0:	bf18      	it	ne
 8017ea2:	462f      	movne	r7, r5
 8017ea4:	ab03      	add	r3, sp, #12
 8017ea6:	4642      	mov	r2, r8
 8017ea8:	4659      	mov	r1, fp
 8017eaa:	4648      	mov	r0, r9
 8017eac:	f002 ff30 	bl	801ad10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017eb0:	4605      	mov	r5, r0
 8017eb2:	b1b8      	cbz	r0, 8017ee4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017eb4:	280a      	cmp	r0, #10
 8017eb6:	d015      	beq.n	8017ee4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017eb8:	9a03      	ldr	r2, [sp, #12]
 8017eba:	b18a      	cbz	r2, 8017ee0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017ebc:	7b50      	ldrb	r0, [r2, #13]
 8017ebe:	4639      	mov	r1, r7
 8017ec0:	7a93      	ldrb	r3, [r2, #10]
 8017ec2:	0040      	lsls	r0, r0, #1
 8017ec4:	8895      	ldrh	r5, [r2, #4]
 8017ec6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017eca:	4303      	orrs	r3, r0
 8017ecc:	4640      	mov	r0, r8
 8017ece:	9301      	str	r3, [sp, #4]
 8017ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8017ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ed6:	4798      	blx	r3
 8017ed8:	9b01      	ldr	r3, [sp, #4]
 8017eda:	4418      	add	r0, r3
 8017edc:	4406      	add	r6, r0
 8017ede:	b2b6      	uxth	r6, r6
 8017ee0:	3401      	adds	r4, #1
 8017ee2:	e7d2      	b.n	8017e8a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	b005      	add	sp, #20
 8017ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017eec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017eec:	2a02      	cmp	r2, #2
 8017eee:	b530      	push	{r4, r5, lr}
 8017ef0:	d011      	beq.n	8017f16 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017ef2:	2a03      	cmp	r2, #3
 8017ef4:	d01c      	beq.n	8017f30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017ef6:	2a01      	cmp	r2, #1
 8017ef8:	d10c      	bne.n	8017f14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017efa:	888b      	ldrh	r3, [r1, #4]
 8017efc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017f00:	8801      	ldrh	r1, [r0, #0]
 8017f02:	1a9b      	subs	r3, r3, r2
 8017f04:	8844      	ldrh	r4, [r0, #2]
 8017f06:	1a5b      	subs	r3, r3, r1
 8017f08:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017f0c:	8004      	strh	r4, [r0, #0]
 8017f0e:	8043      	strh	r3, [r0, #2]
 8017f10:	8081      	strh	r1, [r0, #4]
 8017f12:	80c2      	strh	r2, [r0, #6]
 8017f14:	bd30      	pop	{r4, r5, pc}
 8017f16:	88cb      	ldrh	r3, [r1, #6]
 8017f18:	88c2      	ldrh	r2, [r0, #6]
 8017f1a:	1a9b      	subs	r3, r3, r2
 8017f1c:	8842      	ldrh	r2, [r0, #2]
 8017f1e:	1a9b      	subs	r3, r3, r2
 8017f20:	888a      	ldrh	r2, [r1, #4]
 8017f22:	8881      	ldrh	r1, [r0, #4]
 8017f24:	8043      	strh	r3, [r0, #2]
 8017f26:	1a52      	subs	r2, r2, r1
 8017f28:	8801      	ldrh	r1, [r0, #0]
 8017f2a:	1a52      	subs	r2, r2, r1
 8017f2c:	8002      	strh	r2, [r0, #0]
 8017f2e:	e7f1      	b.n	8017f14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017f30:	88cb      	ldrh	r3, [r1, #6]
 8017f32:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017f36:	8841      	ldrh	r1, [r0, #2]
 8017f38:	1a9b      	subs	r3, r3, r2
 8017f3a:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017f3e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017f42:	1a5b      	subs	r3, r3, r1
 8017f44:	8045      	strh	r5, [r0, #2]
 8017f46:	8082      	strh	r2, [r0, #4]
 8017f48:	8003      	strh	r3, [r0, #0]
 8017f4a:	80c4      	strh	r4, [r0, #6]
 8017f4c:	e7e2      	b.n	8017f14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017f4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017f4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f52:	b09f      	sub	sp, #124	; 0x7c
 8017f54:	9116      	str	r1, [sp, #88]	; 0x58
 8017f56:	9317      	str	r3, [sp, #92]	; 0x5c
 8017f58:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017f5a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017f5c:	8809      	ldrh	r1, [r1, #0]
 8017f5e:	889b      	ldrh	r3, [r3, #4]
 8017f60:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8017f64:	440b      	add	r3, r1
 8017f66:	9212      	str	r2, [sp, #72]	; 0x48
 8017f68:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8017f6c:	b21b      	sxth	r3, r3
 8017f6e:	9011      	str	r0, [sp, #68]	; 0x44
 8017f70:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8017f74:	9310      	str	r3, [sp, #64]	; 0x40
 8017f76:	f8d8 3000 	ldr.w	r3, [r8]
 8017f7a:	7a59      	ldrb	r1, [r3, #9]
 8017f7c:	7a1b      	ldrb	r3, [r3, #8]
 8017f7e:	9114      	str	r1, [sp, #80]	; 0x50
 8017f80:	9315      	str	r3, [sp, #84]	; 0x54
 8017f82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017f84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017f88:	2a00      	cmp	r2, #0
 8017f8a:	d067      	beq.n	801805c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8017f8c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017f90:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017f92:	2b04      	cmp	r3, #4
 8017f94:	bf14      	ite	ne
 8017f96:	2301      	movne	r3, #1
 8017f98:	2302      	moveq	r3, #2
 8017f9a:	4413      	add	r3, r2
 8017f9c:	f04f 0900 	mov.w	r9, #0
 8017fa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8017fa2:	464c      	mov	r4, r9
 8017fa4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017fa8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8017fac:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8017fb0:	4293      	cmp	r3, r2
 8017fb2:	f280 808c 	bge.w	80180ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	931c      	str	r3, [sp, #112]	; 0x70
 8017fba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017fbe:	429c      	cmp	r4, r3
 8017fc0:	d006      	beq.n	8017fd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8017fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fc4:	f242 020b 	movw	r2, #8203	; 0x200b
 8017fc8:	4294      	cmp	r4, r2
 8017fca:	bf18      	it	ne
 8017fcc:	4623      	movne	r3, r4
 8017fce:	930d      	str	r3, [sp, #52]	; 0x34
 8017fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fd2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017fd4:	f8d8 2000 	ldr.w	r2, [r8]
 8017fd8:	428b      	cmp	r3, r1
 8017fda:	db41      	blt.n	8018060 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8017fdc:	6813      	ldr	r3, [r2, #0]
 8017fde:	4610      	mov	r0, r2
 8017fe0:	695b      	ldr	r3, [r3, #20]
 8017fe2:	4798      	blx	r3
 8017fe4:	4604      	mov	r4, r0
 8017fe6:	f8d8 0000 	ldr.w	r0, [r8]
 8017fea:	aa1d      	add	r2, sp, #116	; 0x74
 8017fec:	4621      	mov	r1, r4
 8017fee:	6803      	ldr	r3, [r0, #0]
 8017ff0:	689e      	ldr	r6, [r3, #8]
 8017ff2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017ff6:	47b0      	blx	r6
 8017ff8:	901c      	str	r0, [sp, #112]	; 0x70
 8017ffa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017ffe:	429c      	cmp	r4, r3
 8018000:	f000 80ea 	beq.w	80181d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018004:	f242 030b 	movw	r3, #8203	; 0x200b
 8018008:	429c      	cmp	r4, r3
 801800a:	f000 80e5 	beq.w	80181d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801800e:	2c00      	cmp	r4, #0
 8018010:	f000 80f7 	beq.w	8018202 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018014:	2c0a      	cmp	r4, #10
 8018016:	d060      	beq.n	80180da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018018:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801801a:	b36a      	cbz	r2, 8018078 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801801c:	8894      	ldrh	r4, [r2, #4]
 801801e:	f1bb 0f00 	cmp.w	fp, #0
 8018022:	d03b      	beq.n	801809c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8018024:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018028:	f1bb 0f01 	cmp.w	fp, #1
 801802c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018030:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018034:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018038:	ea49 0903 	orr.w	r9, r9, r3
 801803c:	d134      	bne.n	80180a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801803e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018040:	eba5 0509 	sub.w	r5, r5, r9
 8018044:	2b00      	cmp	r3, #0
 8018046:	d14f      	bne.n	80180e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801804a:	eb09 0305 	add.w	r3, r9, r5
 801804e:	4413      	add	r3, r2
 8018050:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018052:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018056:	4293      	cmp	r3, r2
 8018058:	da51      	bge.n	80180fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801805a:	e038      	b.n	80180ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801805c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801805e:	e79d      	b.n	8017f9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8018060:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018064:	4659      	mov	r1, fp
 8018066:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018068:	9301      	str	r3, [sp, #4]
 801806a:	ab1d      	add	r3, sp, #116	; 0x74
 801806c:	9300      	str	r3, [sp, #0]
 801806e:	ab1c      	add	r3, sp, #112	; 0x70
 8018070:	f002 fea6 	bl	801adc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018074:	4604      	mov	r4, r0
 8018076:	e7c0      	b.n	8017ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018078:	f8d8 0000 	ldr.w	r0, [r8]
 801807c:	6803      	ldr	r3, [r0, #0]
 801807e:	691b      	ldr	r3, [r3, #16]
 8018080:	4798      	blx	r3
 8018082:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018086:	4298      	cmp	r0, r3
 8018088:	f000 80a6 	beq.w	80181d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801808c:	f242 030b 	movw	r3, #8203	; 0x200b
 8018090:	4298      	cmp	r0, r3
 8018092:	f000 80a1 	beq.w	80181d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018096:	f1bb 0f00 	cmp.w	fp, #0
 801809a:	d100      	bne.n	801809e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801809c:	444d      	add	r5, r9
 801809e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80180a0:	2a00      	cmp	r2, #0
 80180a2:	d1bf      	bne.n	8018024 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80180a4:	4691      	mov	r9, r2
 80180a6:	e097      	b.n	80181d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80180a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	f000 80ab 	beq.w	8018206 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80180b0:	f1bb 0f00 	cmp.w	fp, #0
 80180b4:	d118      	bne.n	80180e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80180b6:	f8d8 0000 	ldr.w	r0, [r8]
 80180ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80180bc:	6803      	ldr	r3, [r0, #0]
 80180be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180c0:	4798      	blx	r3
 80180c2:	4405      	add	r5, r0
 80180c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80180c8:	1aeb      	subs	r3, r5, r3
 80180ca:	4293      	cmp	r3, r2
 80180cc:	dd17      	ble.n	80180fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80180ce:	2c00      	cmp	r4, #0
 80180d0:	f000 8097 	beq.w	8018202 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80180d4:	2c0a      	cmp	r4, #10
 80180d6:	f040 8085 	bne.w	80181e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80180da:	240a      	movs	r4, #10
 80180dc:	fab4 f084 	clz	r0, r4
 80180e0:	0940      	lsrs	r0, r0, #5
 80180e2:	b01f      	add	sp, #124	; 0x7c
 80180e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180e8:	f8d8 0000 	ldr.w	r0, [r8]
 80180ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80180ee:	6803      	ldr	r3, [r0, #0]
 80180f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180f2:	4798      	blx	r3
 80180f4:	f1bb 0f01 	cmp.w	fp, #1
 80180f8:	eba5 0500 	sub.w	r5, r5, r0
 80180fc:	d0a4      	beq.n	8018048 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80180fe:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018100:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018102:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018106:	f9b3 6000 	ldrsh.w	r6, [r3]
 801810a:	7b43      	ldrb	r3, [r0, #13]
 801810c:	4429      	add	r1, r5
 801810e:	015b      	lsls	r3, r3, #5
 8018110:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018114:	7983      	ldrb	r3, [r0, #6]
 8018116:	4313      	orrs	r3, r2
 8018118:	440b      	add	r3, r1
 801811a:	42b3      	cmp	r3, r6
 801811c:	db5c      	blt.n	80181d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801811e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018120:	4299      	cmp	r1, r3
 8018122:	da59      	bge.n	80181d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018124:	f8d8 0000 	ldr.w	r0, [r8]
 8018128:	42ae      	cmp	r6, r5
 801812a:	6803      	ldr	r3, [r0, #0]
 801812c:	bfcc      	ite	gt
 801812e:	1b76      	subgt	r6, r6, r5
 8018130:	2600      	movle	r6, #0
 8018132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018134:	bfc8      	it	gt
 8018136:	b2b6      	uxthgt	r6, r6
 8018138:	4798      	blx	r3
 801813a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801813c:	7b5a      	ldrb	r2, [r3, #13]
 801813e:	00d1      	lsls	r1, r2, #3
 8018140:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018144:	7a19      	ldrb	r1, [r3, #8]
 8018146:	4339      	orrs	r1, r7
 8018148:	0657      	lsls	r7, r2, #25
 801814a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801814c:	bf48      	it	mi
 801814e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018152:	4407      	add	r7, r0
 8018154:	bf48      	it	mi
 8018156:	b209      	sxthmi	r1, r1
 8018158:	1a7f      	subs	r7, r7, r1
 801815a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801815c:	b2bf      	uxth	r7, r7
 801815e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018162:	fa0f fa87 	sxth.w	sl, r7
 8018166:	4551      	cmp	r1, sl
 8018168:	dd3a      	ble.n	80181e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801816a:	0112      	lsls	r2, r2, #4
 801816c:	79d8      	ldrb	r0, [r3, #7]
 801816e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018172:	4302      	orrs	r2, r0
 8018174:	4492      	add	sl, r2
 8018176:	4551      	cmp	r1, sl
 8018178:	dc2e      	bgt.n	80181d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801817a:	1bcf      	subs	r7, r1, r7
 801817c:	468a      	mov	sl, r1
 801817e:	b2bf      	uxth	r7, r7
 8018180:	9319      	str	r3, [sp, #100]	; 0x64
 8018182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018184:	f8d8 0000 	ldr.w	r0, [r8]
 8018188:	681a      	ldr	r2, [r3, #0]
 801818a:	6801      	ldr	r1, [r0, #0]
 801818c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801818e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018190:	9313      	str	r3, [sp, #76]	; 0x4c
 8018192:	9218      	str	r2, [sp, #96]	; 0x60
 8018194:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018196:	4788      	blx	r1
 8018198:	f898 1006 	ldrb.w	r1, [r8, #6]
 801819c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801819e:	910b      	str	r1, [sp, #44]	; 0x2c
 80181a0:	f898 100e 	ldrb.w	r1, [r8, #14]
 80181a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80181a6:	910a      	str	r1, [sp, #40]	; 0x28
 80181a8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80181ac:	9109      	str	r1, [sp, #36]	; 0x24
 80181ae:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80181b2:	9305      	str	r3, [sp, #20]
 80181b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80181b6:	9206      	str	r2, [sp, #24]
 80181b8:	e9cd a601 	strd	sl, r6, [sp, #4]
 80181bc:	442e      	add	r6, r5
 80181be:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80181c2:	b236      	sxth	r6, r6
 80181c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80181c6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80181ca:	9600      	str	r6, [sp, #0]
 80181cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80181ce:	681a      	ldr	r2, [r3, #0]
 80181d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80181d2:	685b      	ldr	r3, [r3, #4]
 80181d4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80181d6:	47b0      	blx	r6
 80181d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181da:	3301      	adds	r3, #1
 80181dc:	930e      	str	r3, [sp, #56]	; 0x38
 80181de:	e6e5      	b.n	8017fac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80181e0:	2700      	movs	r7, #0
 80181e2:	e7cd      	b.n	8018180 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80181e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80181e6:	3501      	adds	r5, #1
 80181e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80181ea:	429d      	cmp	r5, r3
 80181ec:	f6bf af76 	bge.w	80180dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80181f0:	4659      	mov	r1, fp
 80181f2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80181f4:	f7f0 fa6c 	bl	80086d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80181f8:	4604      	mov	r4, r0
 80181fa:	b110      	cbz	r0, 8018202 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80181fc:	280a      	cmp	r0, #10
 80181fe:	d1f2      	bne.n	80181e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018200:	e76b      	b.n	80180da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018202:	2400      	movs	r4, #0
 8018204:	e76a      	b.n	80180dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018206:	f1bb 0f00 	cmp.w	fp, #0
 801820a:	f43f af5b 	beq.w	80180c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801820e:	e776      	b.n	80180fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018210 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018210:	b530      	push	{r4, r5, lr}
 8018212:	8a44      	ldrh	r4, [r0, #18]
 8018214:	8ac5      	ldrh	r5, [r0, #22]
 8018216:	82c3      	strh	r3, [r0, #22]
 8018218:	442c      	add	r4, r5
 801821a:	1ae4      	subs	r4, r4, r3
 801821c:	8b03      	ldrh	r3, [r0, #24]
 801821e:	8244      	strh	r4, [r0, #18]
 8018220:	8a84      	ldrh	r4, [r0, #20]
 8018222:	4422      	add	r2, r4
 8018224:	440c      	add	r4, r1
 8018226:	1a59      	subs	r1, r3, r1
 8018228:	8342      	strh	r2, [r0, #26]
 801822a:	8284      	strh	r4, [r0, #20]
 801822c:	8301      	strh	r1, [r0, #24]
 801822e:	bd30      	pop	{r4, r5, pc}

08018230 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018234:	7a43      	ldrb	r3, [r0, #9]
 8018236:	b087      	sub	sp, #28
 8018238:	4604      	mov	r4, r0
 801823a:	460f      	mov	r7, r1
 801823c:	1eda      	subs	r2, r3, #3
 801823e:	b2d2      	uxtb	r2, r2
 8018240:	2900      	cmp	r1, #0
 8018242:	d036      	beq.n	80182b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018244:	2a01      	cmp	r2, #1
 8018246:	d932      	bls.n	80182ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8018248:	1e58      	subs	r0, r3, #1
 801824a:	f1d0 0b00 	rsbs	fp, r0, #0
 801824e:	eb4b 0b00 	adc.w	fp, fp, r0
 8018252:	1e99      	subs	r1, r3, #2
 8018254:	424b      	negs	r3, r1
 8018256:	414b      	adcs	r3, r1
 8018258:	9303      	str	r3, [sp, #12]
 801825a:	2300      	movs	r3, #0
 801825c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018260:	2500      	movs	r5, #0
 8018262:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8018266:	46a9      	mov	r9, r5
 8018268:	8265      	strh	r5, [r4, #18]
 801826a:	82a5      	strh	r5, [r4, #20]
 801826c:	2300      	movs	r3, #0
 801826e:	9305      	str	r3, [sp, #20]
 8018270:	8823      	ldrh	r3, [r4, #0]
 8018272:	2b20      	cmp	r3, #32
 8018274:	d02b      	beq.n	80182ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8018276:	eba3 020a 	sub.w	r2, r3, sl
 801827a:	4256      	negs	r6, r2
 801827c:	4156      	adcs	r6, r2
 801827e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018282:	4293      	cmp	r3, r2
 8018284:	d004      	beq.n	8018290 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018286:	4553      	cmp	r3, sl
 8018288:	bf16      	itet	ne
 801828a:	4699      	movne	r9, r3
 801828c:	2601      	moveq	r6, #1
 801828e:	2600      	movne	r6, #0
 8018290:	ab05      	add	r3, sp, #20
 8018292:	68e2      	ldr	r2, [r4, #12]
 8018294:	7a21      	ldrb	r1, [r4, #8]
 8018296:	6860      	ldr	r0, [r4, #4]
 8018298:	f002 fd3a 	bl	801ad10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801829c:	8020      	strh	r0, [r4, #0]
 801829e:	b9c8      	cbnz	r0, 80182d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80182a0:	8b22      	ldrh	r2, [r4, #24]
 80182a2:	2300      	movs	r3, #0
 80182a4:	4611      	mov	r1, r2
 80182a6:	4620      	mov	r0, r4
 80182a8:	f7ff ffb2 	bl	8018210 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80182ac:	e066      	b.n	801837c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80182ae:	468b      	mov	fp, r1
 80182b0:	e7cf      	b.n	8018252 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80182b2:	3b01      	subs	r3, #1
 80182b4:	2a01      	cmp	r2, #1
 80182b6:	9103      	str	r1, [sp, #12]
 80182b8:	468b      	mov	fp, r1
 80182ba:	bf8c      	ite	hi
 80182bc:	2200      	movhi	r2, #0
 80182be:	2201      	movls	r2, #1
 80182c0:	2b01      	cmp	r3, #1
 80182c2:	9202      	str	r2, [sp, #8]
 80182c4:	bf8c      	ite	hi
 80182c6:	2300      	movhi	r3, #0
 80182c8:	2301      	movls	r3, #1
 80182ca:	9301      	str	r3, [sp, #4]
 80182cc:	e7c8      	b.n	8018260 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80182ce:	4699      	mov	r9, r3
 80182d0:	2601      	movs	r6, #1
 80182d2:	e7dd      	b.n	8018290 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80182d4:	8ae3      	ldrh	r3, [r4, #22]
 80182d6:	280a      	cmp	r0, #10
 80182d8:	f103 0301 	add.w	r3, r3, #1
 80182dc:	82e3      	strh	r3, [r4, #22]
 80182de:	d0df      	beq.n	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80182e0:	9a05      	ldr	r2, [sp, #20]
 80182e2:	bb42      	cbnz	r2, 8018336 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80182e4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80182e8:	4298      	cmp	r0, r3
 80182ea:	d001      	beq.n	80182f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80182ec:	4550      	cmp	r0, sl
 80182ee:	d1bd      	bne.n	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80182f0:	8823      	ldrh	r3, [r4, #0]
 80182f2:	8b21      	ldrh	r1, [r4, #24]
 80182f4:	2b20      	cmp	r3, #32
 80182f6:	d001      	beq.n	80182fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80182f8:	4553      	cmp	r3, sl
 80182fa:	d131      	bne.n	8018360 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80182fc:	2e00      	cmp	r6, #0
 80182fe:	bf0a      	itet	eq
 8018300:	460d      	moveq	r5, r1
 8018302:	4630      	movne	r0, r6
 8018304:	2001      	moveq	r0, #1
 8018306:	440a      	add	r2, r1
 8018308:	8aa3      	ldrh	r3, [r4, #20]
 801830a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801830e:	b292      	uxth	r2, r2
 8018310:	8322      	strh	r2, [r4, #24]
 8018312:	4413      	add	r3, r2
 8018314:	2f00      	cmp	r7, #0
 8018316:	d03a      	beq.n	801838e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018318:	f1bb 0f00 	cmp.w	fp, #0
 801831c:	d102      	bne.n	8018324 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801831e:	9903      	ldr	r1, [sp, #12]
 8018320:	b301      	cbz	r1, 8018364 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018322:	b1f8      	cbz	r0, 8018364 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018324:	8ba1      	ldrh	r1, [r4, #28]
 8018326:	4419      	add	r1, r3
 8018328:	458c      	cmp	ip, r1
 801832a:	da2a      	bge.n	8018382 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801832c:	8a61      	ldrh	r1, [r4, #18]
 801832e:	b341      	cbz	r1, 8018382 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018330:	4563      	cmp	r3, ip
 8018332:	dd9b      	ble.n	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018334:	e01c      	b.n	8018370 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018336:	8893      	ldrh	r3, [r2, #4]
 8018338:	4649      	mov	r1, r9
 801833a:	8023      	strh	r3, [r4, #0]
 801833c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018340:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018344:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8018348:	f892 800a 	ldrb.w	r8, [r2, #10]
 801834c:	ea48 0800 	orr.w	r8, r8, r0
 8018350:	68e0      	ldr	r0, [r4, #12]
 8018352:	6803      	ldr	r3, [r0, #0]
 8018354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018356:	4798      	blx	r3
 8018358:	eb08 0200 	add.w	r2, r8, r0
 801835c:	b292      	uxth	r2, r2
 801835e:	e7c7      	b.n	80182f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018360:	2000      	movs	r0, #0
 8018362:	e7d0      	b.n	8018306 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018364:	4563      	cmp	r3, ip
 8018366:	dd81      	ble.n	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018368:	8a63      	ldrh	r3, [r4, #18]
 801836a:	2b00      	cmp	r3, #0
 801836c:	f43f af7e 	beq.w	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018370:	2301      	movs	r3, #1
 8018372:	8ba2      	ldrh	r2, [r4, #28]
 8018374:	77a3      	strb	r3, [r4, #30]
 8018376:	8b63      	ldrh	r3, [r4, #26]
 8018378:	4413      	add	r3, r2
 801837a:	8363      	strh	r3, [r4, #26]
 801837c:	b007      	add	sp, #28
 801837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018382:	2300      	movs	r3, #0
 8018384:	4611      	mov	r1, r2
 8018386:	4620      	mov	r0, r4
 8018388:	f7ff ff42 	bl	8018210 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801838c:	e76e      	b.n	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801838e:	4563      	cmp	r3, ip
 8018390:	dd14      	ble.n	80183bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8018392:	9b02      	ldr	r3, [sp, #8]
 8018394:	b113      	cbz	r3, 801839c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8018396:	2301      	movs	r3, #1
 8018398:	460a      	mov	r2, r1
 801839a:	e783      	b.n	80182a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801839c:	9b01      	ldr	r3, [sp, #4]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	f43f af64 	beq.w	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	f47f af61 	bne.w	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183aa:	b116      	cbz	r6, 80183b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80183ac:	2301      	movs	r3, #1
 80183ae:	462a      	mov	r2, r5
 80183b0:	e779      	b.n	80182a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80183b2:	8a63      	ldrh	r3, [r4, #18]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	f43f af59 	beq.w	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183ba:	e7df      	b.n	801837c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80183bc:	2800      	cmp	r0, #0
 80183be:	f47f af55 	bne.w	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183c2:	2e00      	cmp	r6, #0
 80183c4:	f43f af52 	beq.w	801826c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183c8:	2301      	movs	r3, #1
 80183ca:	462a      	mov	r2, r5
 80183cc:	e7db      	b.n	8018386 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080183ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80183ce:	b530      	push	{r4, r5, lr}
 80183d0:	4605      	mov	r5, r0
 80183d2:	b08b      	sub	sp, #44	; 0x2c
 80183d4:	b191      	cbz	r1, 80183fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80183d6:	2401      	movs	r4, #1
 80183d8:	e9cd 3100 	strd	r3, r1, [sp]
 80183dc:	4613      	mov	r3, r2
 80183de:	4601      	mov	r1, r0
 80183e0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80183e4:	a802      	add	r0, sp, #8
 80183e6:	f7ff fd0b 	bl	8017e00 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80183ea:	2100      	movs	r1, #0
 80183ec:	a802      	add	r0, sp, #8
 80183ee:	f7ff ff1f 	bl	8018230 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80183f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80183f6:	b163      	cbz	r3, 8018412 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80183f8:	3401      	adds	r4, #1
 80183fa:	e7f6      	b.n	80183ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80183fc:	2401      	movs	r4, #1
 80183fe:	f002 fd7f 	bl	801af00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018402:	280a      	cmp	r0, #10
 8018404:	4628      	mov	r0, r5
 8018406:	bf08      	it	eq
 8018408:	3401      	addeq	r4, #1
 801840a:	f002 fd79 	bl	801af00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801840e:	2800      	cmp	r0, #0
 8018410:	d1f7      	bne.n	8018402 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018412:	b2a0      	uxth	r0, r4
 8018414:	b00b      	add	sp, #44	; 0x2c
 8018416:	bd30      	pop	{r4, r5, pc}

08018418 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801841c:	b0df      	sub	sp, #380	; 0x17c
 801841e:	4689      	mov	r9, r1
 8018420:	461c      	mov	r4, r3
 8018422:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 8018426:	900a      	str	r0, [sp, #40]	; 0x28
 8018428:	f1ba 0f00 	cmp.w	sl, #0
 801842c:	f000 80b1 	beq.w	8018592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	2b00      	cmp	r3, #0
 8018434:	f000 80ad 	beq.w	8018592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018438:	7ba3      	ldrb	r3, [r4, #14]
 801843a:	2b00      	cmp	r3, #0
 801843c:	f000 80a9 	beq.w	8018592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018440:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8018444:	6810      	ldr	r0, [r2, #0]
 8018446:	6851      	ldr	r1, [r2, #4]
 8018448:	2500      	movs	r5, #0
 801844a:	4643      	mov	r3, r8
 801844c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018450:	950f      	str	r5, [sp, #60]	; 0x3c
 8018452:	af19      	add	r7, sp, #100	; 0x64
 8018454:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018458:	79a2      	ldrb	r2, [r4, #6]
 801845a:	c303      	stmia	r3!, {r0, r1}
 801845c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018460:	a90f      	add	r1, sp, #60	; 0x3c
 8018462:	4640      	mov	r0, r8
 8018464:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018468:	f7ff fd40 	bl	8017eec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801846c:	a90f      	add	r1, sp, #60	; 0x3c
 801846e:	79a2      	ldrb	r2, [r4, #6]
 8018470:	4608      	mov	r0, r1
 8018472:	f7ff fd3b 	bl	8017eec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018476:	4638      	mov	r0, r7
 8018478:	f002 f901 	bl	801a67e <_ZN8touchgfx12TextProviderC1Ev>
 801847c:	6820      	ldr	r0, [r4, #0]
 801847e:	6803      	ldr	r3, [r0, #0]
 8018480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018482:	4798      	blx	r3
 8018484:	4606      	mov	r6, r0
 8018486:	6820      	ldr	r0, [r4, #0]
 8018488:	6803      	ldr	r3, [r0, #0]
 801848a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801848c:	4798      	blx	r3
 801848e:	4633      	mov	r3, r6
 8018490:	9000      	str	r0, [sp, #0]
 8018492:	4651      	mov	r1, sl
 8018494:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8018496:	4638      	mov	r0, r7
 8018498:	f002 f93e 	bl	801a718 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801849c:	7923      	ldrb	r3, [r4, #4]
 801849e:	6820      	ldr	r0, [r4, #0]
 80184a0:	9308      	str	r3, [sp, #32]
 80184a2:	6803      	ldr	r3, [r0, #0]
 80184a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184a6:	4798      	blx	r3
 80184a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184ac:	181e      	adds	r6, r3, r0
 80184ae:	42ae      	cmp	r6, r5
 80184b0:	dd06      	ble.n	80184c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80184b2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80184b6:	4282      	cmp	r2, r0
 80184b8:	bfa4      	itt	ge
 80184ba:	189d      	addge	r5, r3, r2
 80184bc:	fb95 f5f6 	sdivge	r5, r5, r6
 80184c0:	a830      	add	r0, sp, #192	; 0xc0
 80184c2:	f002 f8dc 	bl	801a67e <_ZN8touchgfx12TextProviderC1Ev>
 80184c6:	7c23      	ldrb	r3, [r4, #16]
 80184c8:	b17b      	cbz	r3, 80184ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80184ca:	6820      	ldr	r0, [r4, #0]
 80184cc:	6803      	ldr	r3, [r0, #0]
 80184ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184d0:	4798      	blx	r3
 80184d2:	4683      	mov	fp, r0
 80184d4:	6820      	ldr	r0, [r4, #0]
 80184d6:	6803      	ldr	r3, [r0, #0]
 80184d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184da:	4798      	blx	r3
 80184dc:	465b      	mov	r3, fp
 80184de:	9000      	str	r0, [sp, #0]
 80184e0:	4651      	mov	r1, sl
 80184e2:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80184e4:	a830      	add	r0, sp, #192	; 0xc0
 80184e6:	f002 f917 	bl	801a718 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80184ea:	7c21      	ldrb	r1, [r4, #16]
 80184ec:	a811      	add	r0, sp, #68	; 0x44
 80184ee:	7963      	ldrb	r3, [r4, #5]
 80184f0:	9101      	str	r1, [sp, #4]
 80184f2:	6821      	ldr	r1, [r4, #0]
 80184f4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80184f8:	9100      	str	r1, [sp, #0]
 80184fa:	a930      	add	r1, sp, #192	; 0xc0
 80184fc:	f7ff fc80 	bl	8017e00 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018500:	7c23      	ldrb	r3, [r4, #16]
 8018502:	b9bb      	cbnz	r3, 8018534 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 8018504:	fa1f fa86 	uxth.w	sl, r6
 8018508:	2d00      	cmp	r5, #0
 801850a:	dd45      	ble.n	8018598 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801850c:	4638      	mov	r0, r7
 801850e:	f002 fcf7 	bl	801af00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018512:	2800      	cmp	r0, #0
 8018514:	d03d      	beq.n	8018592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018516:	280a      	cmp	r0, #10
 8018518:	d1f6      	bne.n	8018508 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 801851a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801851e:	3d01      	subs	r5, #1
 8018520:	4453      	add	r3, sl
 8018522:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018526:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801852a:	eba3 030a 	sub.w	r3, r3, sl
 801852e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018532:	e7e9      	b.n	8018508 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 8018534:	0073      	lsls	r3, r6, #1
 8018536:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801853a:	fa1f fa86 	uxth.w	sl, r6
 801853e:	9309      	str	r3, [sp, #36]	; 0x24
 8018540:	2d00      	cmp	r5, #0
 8018542:	dd29      	ble.n	8018598 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8018544:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8018548:	a811      	add	r0, sp, #68	; 0x44
 801854a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801854c:	428b      	cmp	r3, r1
 801854e:	bfd4      	ite	le
 8018550:	2100      	movle	r1, #0
 8018552:	2101      	movgt	r1, #1
 8018554:	f7ff fe6c 	bl	8018230 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018558:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801855c:	3b01      	subs	r3, #1
 801855e:	b29b      	uxth	r3, r3
 8018560:	455b      	cmp	r3, fp
 8018562:	930b      	str	r3, [sp, #44]	; 0x2c
 8018564:	d005      	beq.n	8018572 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8018566:	7961      	ldrb	r1, [r4, #5]
 8018568:	4638      	mov	r0, r7
 801856a:	f7f0 f8b1 	bl	80086d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801856e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018570:	e7f4      	b.n	801855c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8018572:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018576:	3d01      	subs	r5, #1
 8018578:	4453      	add	r3, sl
 801857a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801857e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8018582:	eba3 030a 	sub.w	r3, r3, sl
 8018586:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801858a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801858e:	2b00      	cmp	r3, #0
 8018590:	d1d6      	bne.n	8018540 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 8018592:	b05f      	add	sp, #380	; 0x17c
 8018594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018598:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801859c:	ad47      	add	r5, sp, #284	; 0x11c
 801859e:	f04f 0b00 	mov.w	fp, #0
 80185a2:	7c23      	ldrb	r3, [r4, #16]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d067      	beq.n	8018678 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80185a8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80185ac:	a811      	add	r0, sp, #68	; 0x44
 80185ae:	458a      	cmp	sl, r1
 80185b0:	bfd4      	ite	le
 80185b2:	2100      	movle	r1, #0
 80185b4:	2101      	movgt	r1, #1
 80185b6:	f7ff fe3b 	bl	8018230 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80185ba:	9b08      	ldr	r3, [sp, #32]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d056      	beq.n	801866e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80185c0:	7c23      	ldrb	r3, [r4, #16]
 80185c2:	225c      	movs	r2, #92	; 0x5c
 80185c4:	4639      	mov	r1, r7
 80185c6:	4628      	mov	r0, r5
 80185c8:	9309      	str	r3, [sp, #36]	; 0x24
 80185ca:	f00d fcf7 	bl	8025fbc <memcpy>
 80185ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d059      	beq.n	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80185d4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80185d8:	7922      	ldrb	r2, [r4, #4]
 80185da:	2a01      	cmp	r2, #1
 80185dc:	d13d      	bne.n	801865a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80185de:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80185e2:	1ac0      	subs	r0, r0, r3
 80185e4:	2302      	movs	r3, #2
 80185e6:	fb90 f0f3 	sdiv	r0, r0, r3
 80185ea:	b200      	sxth	r0, r0
 80185ec:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80185f0:	4418      	add	r0, r3
 80185f2:	7c23      	ldrb	r3, [r4, #16]
 80185f4:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d03a      	beq.n	8018672 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 80185fc:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8018600:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8018604:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8018608:	9500      	str	r5, [sp, #0]
 801860a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801860c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018610:	e9cd b703 	strd	fp, r7, [sp, #12]
 8018614:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8018618:	464a      	mov	r2, r9
 801861a:	2100      	movs	r1, #0
 801861c:	f7ff fc97 	bl	8017f4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018620:	2800      	cmp	r0, #0
 8018622:	d1b6      	bne.n	8018592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018624:	b2b2      	uxth	r2, r6
 8018626:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801862a:	4611      	mov	r1, r2
 801862c:	4413      	add	r3, r2
 801862e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018632:	b21b      	sxth	r3, r3
 8018634:	1a52      	subs	r2, r2, r1
 8018636:	7c21      	ldrb	r1, [r4, #16]
 8018638:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801863c:	b212      	sxth	r2, r2
 801863e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018642:	b109      	cbz	r1, 8018648 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8018644:	42b2      	cmp	r2, r6
 8018646:	dba4      	blt.n	8018592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018648:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801864c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8018650:	440a      	add	r2, r1
 8018652:	b212      	sxth	r2, r2
 8018654:	4293      	cmp	r3, r2
 8018656:	dda4      	ble.n	80185a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 8018658:	e79b      	b.n	8018592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801865a:	2a02      	cmp	r2, #2
 801865c:	d105      	bne.n	801866a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801865e:	7be2      	ldrb	r2, [r4, #15]
 8018660:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8018664:	1a80      	subs	r0, r0, r2
 8018666:	1ac0      	subs	r0, r0, r3
 8018668:	e7bf      	b.n	80185ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 801866a:	2000      	movs	r0, #0
 801866c:	e7be      	b.n	80185ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801866e:	7be0      	ldrb	r0, [r4, #15]
 8018670:	e7bc      	b.n	80185ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8018672:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018676:	e7c3      	b.n	8018600 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8018678:	9b08      	ldr	r3, [sp, #32]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d0f7      	beq.n	801866e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801867e:	225c      	movs	r2, #92	; 0x5c
 8018680:	4639      	mov	r1, r7
 8018682:	4628      	mov	r0, r5
 8018684:	f00d fc9a 	bl	8025fbc <memcpy>
 8018688:	2300      	movs	r3, #0
 801868a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801868e:	6821      	ldr	r1, [r4, #0]
 8018690:	4628      	mov	r0, r5
 8018692:	f7ff fbef 	bl	8017e74 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018696:	b203      	sxth	r3, r0
 8018698:	e79e      	b.n	80185d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

0801869a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801869a:	2b02      	cmp	r3, #2
 801869c:	b510      	push	{r4, lr}
 801869e:	f9b0 4000 	ldrsh.w	r4, [r0]
 80186a2:	d00b      	beq.n	80186bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80186a4:	2b03      	cmp	r3, #3
 80186a6:	d00e      	beq.n	80186c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80186a8:	2b01      	cmp	r3, #1
 80186aa:	d001      	beq.n	80186b0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80186ac:	1860      	adds	r0, r4, r1
 80186ae:	bd10      	pop	{r4, pc}
 80186b0:	8880      	ldrh	r0, [r0, #4]
 80186b2:	4420      	add	r0, r4
 80186b4:	b200      	sxth	r0, r0
 80186b6:	1a80      	subs	r0, r0, r2
 80186b8:	3801      	subs	r0, #1
 80186ba:	e7f8      	b.n	80186ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80186bc:	8880      	ldrh	r0, [r0, #4]
 80186be:	4420      	add	r0, r4
 80186c0:	b200      	sxth	r0, r0
 80186c2:	1a40      	subs	r0, r0, r1
 80186c4:	e7f8      	b.n	80186b8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80186c6:	18a0      	adds	r0, r4, r2
 80186c8:	e7f1      	b.n	80186ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080186ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80186ca:	2b02      	cmp	r3, #2
 80186cc:	b510      	push	{r4, lr}
 80186ce:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80186d2:	d006      	beq.n	80186e2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80186d4:	2b03      	cmp	r3, #3
 80186d6:	d00a      	beq.n	80186ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80186d8:	2b01      	cmp	r3, #1
 80186da:	bf14      	ite	ne
 80186dc:	18a0      	addne	r0, r4, r2
 80186de:	1860      	addeq	r0, r4, r1
 80186e0:	bd10      	pop	{r4, pc}
 80186e2:	88c0      	ldrh	r0, [r0, #6]
 80186e4:	4420      	add	r0, r4
 80186e6:	b200      	sxth	r0, r0
 80186e8:	1a80      	subs	r0, r0, r2
 80186ea:	3801      	subs	r0, #1
 80186ec:	e7f8      	b.n	80186e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80186ee:	88c0      	ldrh	r0, [r0, #6]
 80186f0:	4420      	add	r0, r4
 80186f2:	b200      	sxth	r0, r0
 80186f4:	1a40      	subs	r0, r0, r1
 80186f6:	e7f8      	b.n	80186ea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

080186f8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80186f8:	4b01      	ldr	r3, [pc, #4]	; (8018700 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80186fa:	2200      	movs	r2, #0
 80186fc:	601a      	str	r2, [r3, #0]
 80186fe:	4770      	bx	lr
 8018700:	20056720 	.word	0x20056720

08018704 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018704:	4603      	mov	r3, r0
 8018706:	b1c8      	cbz	r0, 801873c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8018708:	0c02      	lsrs	r2, r0, #16
 801870a:	0412      	lsls	r2, r2, #16
 801870c:	b9a2      	cbnz	r2, 8018738 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801870e:	0403      	lsls	r3, r0, #16
 8018710:	2010      	movs	r0, #16
 8018712:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018716:	bf04      	itt	eq
 8018718:	021b      	lsleq	r3, r3, #8
 801871a:	3008      	addeq	r0, #8
 801871c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018720:	bf04      	itt	eq
 8018722:	011b      	lsleq	r3, r3, #4
 8018724:	3004      	addeq	r0, #4
 8018726:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801872a:	bf04      	itt	eq
 801872c:	009b      	lsleq	r3, r3, #2
 801872e:	3002      	addeq	r0, #2
 8018730:	2b00      	cmp	r3, #0
 8018732:	db04      	blt.n	801873e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018734:	3001      	adds	r0, #1
 8018736:	4770      	bx	lr
 8018738:	2000      	movs	r0, #0
 801873a:	e7ea      	b.n	8018712 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801873c:	2020      	movs	r0, #32
 801873e:	4770      	bx	lr

08018740 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8018740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018744:	b087      	sub	sp, #28
 8018746:	4681      	mov	r9, r0
 8018748:	4698      	mov	r8, r3
 801874a:	4610      	mov	r0, r2
 801874c:	460d      	mov	r5, r1
 801874e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8018752:	b981      	cbnz	r1, 8018776 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8018754:	b14b      	cbz	r3, 801876a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8018756:	460b      	mov	r3, r1
 8018758:	464a      	mov	r2, r9
 801875a:	4641      	mov	r1, r8
 801875c:	e9cd 4700 	strd	r4, r7, [sp]
 8018760:	f7ff ffee 	bl	8018740 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018764:	b007      	add	sp, #28
 8018766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801876a:	f04f 33ff 	mov.w	r3, #4294967295
 801876e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018772:	603b      	str	r3, [r7, #0]
 8018774:	e7f6      	b.n	8018764 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018776:	fa32 fa01 	lsrs.w	sl, r2, r1
 801877a:	d107      	bne.n	801878c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801877c:	fb09 f602 	mul.w	r6, r9, r2
 8018780:	fbb6 f0f4 	udiv	r0, r6, r4
 8018784:	fb04 6610 	mls	r6, r4, r0, r6
 8018788:	603e      	str	r6, [r7, #0]
 801878a:	e7eb      	b.n	8018764 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801878c:	2601      	movs	r6, #1
 801878e:	fa09 fb01 	lsl.w	fp, r9, r1
 8018792:	408e      	lsls	r6, r1
 8018794:	fbbb f3f4 	udiv	r3, fp, r4
 8018798:	3e01      	subs	r6, #1
 801879a:	9302      	str	r3, [sp, #8]
 801879c:	fb0a f303 	mul.w	r3, sl, r3
 80187a0:	4016      	ands	r6, r2
 80187a2:	9303      	str	r3, [sp, #12]
 80187a4:	4630      	mov	r0, r6
 80187a6:	f7ff ffad 	bl	8018704 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80187aa:	464a      	mov	r2, r9
 80187ac:	460b      	mov	r3, r1
 80187ae:	4601      	mov	r1, r0
 80187b0:	4630      	mov	r0, r6
 80187b2:	e9cd 4700 	strd	r4, r7, [sp]
 80187b6:	f7ff ffc3 	bl	8018740 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80187ba:	9b02      	ldr	r3, [sp, #8]
 80187bc:	4606      	mov	r6, r0
 80187be:	eb05 0108 	add.w	r1, r5, r8
 80187c2:	fb04 bb13 	mls	fp, r4, r3, fp
 80187c6:	4658      	mov	r0, fp
 80187c8:	f7ff ff9c 	bl	8018704 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80187cc:	ab05      	add	r3, sp, #20
 80187ce:	465a      	mov	r2, fp
 80187d0:	e9cd 4300 	strd	r4, r3, [sp]
 80187d4:	4603      	mov	r3, r0
 80187d6:	4650      	mov	r0, sl
 80187d8:	f7ff ffb2 	bl	8018740 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80187dc:	6839      	ldr	r1, [r7, #0]
 80187de:	9a05      	ldr	r2, [sp, #20]
 80187e0:	9b03      	ldr	r3, [sp, #12]
 80187e2:	4411      	add	r1, r2
 80187e4:	fbb1 f2f4 	udiv	r2, r1, r4
 80187e8:	18d3      	adds	r3, r2, r3
 80187ea:	fb04 1412 	mls	r4, r4, r2, r1
 80187ee:	441e      	add	r6, r3
 80187f0:	603c      	str	r4, [r7, #0]
 80187f2:	4430      	add	r0, r6
 80187f4:	e7b6      	b.n	8018764 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080187f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80187f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187fa:	b085      	sub	sp, #20
 80187fc:	f1b0 0900 	subs.w	r9, r0, #0
 8018800:	461d      	mov	r5, r3
 8018802:	4617      	mov	r7, r2
 8018804:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018806:	bfbb      	ittet	lt
 8018808:	f1c9 0900 	rsblt	r9, r9, #0
 801880c:	f04f 36ff 	movlt.w	r6, #4294967295
 8018810:	2601      	movge	r6, #1
 8018812:	6823      	ldrlt	r3, [r4, #0]
 8018814:	bfbc      	itt	lt
 8018816:	425b      	neglt	r3, r3
 8018818:	6023      	strlt	r3, [r4, #0]
 801881a:	2a00      	cmp	r2, #0
 801881c:	da04      	bge.n	8018828 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801881e:	6823      	ldr	r3, [r4, #0]
 8018820:	4257      	negs	r7, r2
 8018822:	4276      	negs	r6, r6
 8018824:	425b      	negs	r3, r3
 8018826:	6023      	str	r3, [r4, #0]
 8018828:	2d00      	cmp	r5, #0
 801882a:	4638      	mov	r0, r7
 801882c:	bfba      	itte	lt
 801882e:	426d      	neglt	r5, r5
 8018830:	f04f 38ff 	movlt.w	r8, #4294967295
 8018834:	f04f 0801 	movge.w	r8, #1
 8018838:	f7ff ff64 	bl	8018704 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801883c:	ab03      	add	r3, sp, #12
 801883e:	463a      	mov	r2, r7
 8018840:	e9cd 5300 	strd	r5, r3, [sp]
 8018844:	4603      	mov	r3, r0
 8018846:	4648      	mov	r0, r9
 8018848:	f7ff ff7a 	bl	8018740 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801884c:	6823      	ldr	r3, [r4, #0]
 801884e:	9a03      	ldr	r2, [sp, #12]
 8018850:	4546      	cmp	r6, r8
 8018852:	441a      	add	r2, r3
 8018854:	fb92 f3f5 	sdiv	r3, r2, r5
 8018858:	4418      	add	r0, r3
 801885a:	fb05 2313 	mls	r3, r5, r3, r2
 801885e:	bf18      	it	ne
 8018860:	4240      	negne	r0, r0
 8018862:	1c72      	adds	r2, r6, #1
 8018864:	6023      	str	r3, [r4, #0]
 8018866:	d105      	bne.n	8018874 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018868:	2b00      	cmp	r3, #0
 801886a:	f1c3 0200 	rsb	r2, r3, #0
 801886e:	db0b      	blt.n	8018888 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8018870:	6022      	str	r2, [r4, #0]
 8018872:	e006      	b.n	8018882 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018874:	2e01      	cmp	r6, #1
 8018876:	d104      	bne.n	8018882 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018878:	2b00      	cmp	r3, #0
 801887a:	da02      	bge.n	8018882 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801887c:	442b      	add	r3, r5
 801887e:	3801      	subs	r0, #1
 8018880:	6023      	str	r3, [r4, #0]
 8018882:	b005      	add	sp, #20
 8018884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018888:	3801      	subs	r0, #1
 801888a:	1b52      	subs	r2, r2, r5
 801888c:	e7f0      	b.n	8018870 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08018890 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018890:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018894:	4c1c      	ldr	r4, [pc, #112]	; (8018908 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8018896:	4605      	mov	r5, r0
 8018898:	6807      	ldr	r7, [r0, #0]
 801889a:	69a3      	ldr	r3, [r4, #24]
 801889c:	b92b      	cbnz	r3, 80188aa <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801889e:	6840      	ldr	r0, [r0, #4]
 80188a0:	e9c5 7000 	strd	r7, r0, [r5]
 80188a4:	b004      	add	sp, #16
 80188a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188aa:	f04f 0802 	mov.w	r8, #2
 80188ae:	68a2      	ldr	r2, [r4, #8]
 80188b0:	ae04      	add	r6, sp, #16
 80188b2:	6820      	ldr	r0, [r4, #0]
 80188b4:	fb93 f1f8 	sdiv	r1, r3, r8
 80188b8:	440a      	add	r2, r1
 80188ba:	69e1      	ldr	r1, [r4, #28]
 80188bc:	f846 2d04 	str.w	r2, [r6, #-4]!
 80188c0:	463a      	mov	r2, r7
 80188c2:	9600      	str	r6, [sp, #0]
 80188c4:	f7ff ff97 	bl	80187f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80188c8:	69a3      	ldr	r3, [r4, #24]
 80188ca:	4607      	mov	r7, r0
 80188cc:	686a      	ldr	r2, [r5, #4]
 80188ce:	6a21      	ldr	r1, [r4, #32]
 80188d0:	9600      	str	r6, [sp, #0]
 80188d2:	6860      	ldr	r0, [r4, #4]
 80188d4:	f7ff ff8f 	bl	80187f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80188d8:	69a3      	ldr	r3, [r4, #24]
 80188da:	6962      	ldr	r2, [r4, #20]
 80188dc:	4407      	add	r7, r0
 80188de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80188e0:	9600      	str	r6, [sp, #0]
 80188e2:	68e0      	ldr	r0, [r4, #12]
 80188e4:	fb93 f8f8 	sdiv	r8, r3, r8
 80188e8:	4442      	add	r2, r8
 80188ea:	9203      	str	r2, [sp, #12]
 80188ec:	682a      	ldr	r2, [r5, #0]
 80188ee:	f7ff ff82 	bl	80187f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80188f2:	4680      	mov	r8, r0
 80188f4:	9600      	str	r6, [sp, #0]
 80188f6:	69a3      	ldr	r3, [r4, #24]
 80188f8:	686a      	ldr	r2, [r5, #4]
 80188fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80188fc:	6920      	ldr	r0, [r4, #16]
 80188fe:	f7ff ff7a 	bl	80187f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018902:	4440      	add	r0, r8
 8018904:	e7cc      	b.n	80188a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018906:	bf00      	nop
 8018908:	20056724 	.word	0x20056724

0801890c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801890c:	4b07      	ldr	r3, [pc, #28]	; (801892c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801890e:	b510      	push	{r4, lr}
 8018910:	781b      	ldrb	r3, [r3, #0]
 8018912:	2b01      	cmp	r3, #1
 8018914:	d108      	bne.n	8018928 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018916:	4b06      	ldr	r3, [pc, #24]	; (8018930 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018918:	880c      	ldrh	r4, [r1, #0]
 801891a:	881b      	ldrh	r3, [r3, #0]
 801891c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018920:	3b01      	subs	r3, #1
 8018922:	1b1b      	subs	r3, r3, r4
 8018924:	8003      	strh	r3, [r0, #0]
 8018926:	800a      	strh	r2, [r1, #0]
 8018928:	bd10      	pop	{r4, pc}
 801892a:	bf00      	nop
 801892c:	200566f0 	.word	0x200566f0
 8018930:	200566f4 	.word	0x200566f4

08018934 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018934:	4b0a      	ldr	r3, [pc, #40]	; (8018960 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018936:	b510      	push	{r4, lr}
 8018938:	781b      	ldrb	r3, [r3, #0]
 801893a:	2b01      	cmp	r3, #1
 801893c:	d10e      	bne.n	801895c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801893e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018942:	8843      	ldrh	r3, [r0, #2]
 8018944:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018948:	18ca      	adds	r2, r1, r3
 801894a:	4b06      	ldr	r3, [pc, #24]	; (8018964 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801894c:	8044      	strh	r4, [r0, #2]
 801894e:	881b      	ldrh	r3, [r3, #0]
 8018950:	1a9b      	subs	r3, r3, r2
 8018952:	8003      	strh	r3, [r0, #0]
 8018954:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018958:	8081      	strh	r1, [r0, #4]
 801895a:	80c3      	strh	r3, [r0, #6]
 801895c:	bd10      	pop	{r4, pc}
 801895e:	bf00      	nop
 8018960:	200566f0 	.word	0x200566f0
 8018964:	200566ec 	.word	0x200566ec

08018968 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018968:	4b07      	ldr	r3, [pc, #28]	; (8018988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801896a:	b510      	push	{r4, lr}
 801896c:	781b      	ldrb	r3, [r3, #0]
 801896e:	2b01      	cmp	r3, #1
 8018970:	d108      	bne.n	8018984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018972:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018976:	f9b0 4000 	ldrsh.w	r4, [r0]
 801897a:	8003      	strh	r3, [r0, #0]
 801897c:	8893      	ldrh	r3, [r2, #4]
 801897e:	3b01      	subs	r3, #1
 8018980:	1b1b      	subs	r3, r3, r4
 8018982:	800b      	strh	r3, [r1, #0]
 8018984:	bd10      	pop	{r4, pc}
 8018986:	bf00      	nop
 8018988:	200566f0 	.word	0x200566f0

0801898c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801898c:	4b08      	ldr	r3, [pc, #32]	; (80189b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801898e:	b513      	push	{r0, r1, r4, lr}
 8018990:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018994:	2400      	movs	r4, #0
 8018996:	4b07      	ldr	r3, [pc, #28]	; (80189b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018998:	f8ad 2004 	strh.w	r2, [sp, #4]
 801899c:	466a      	mov	r2, sp
 801899e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80189a2:	9400      	str	r4, [sp, #0]
 80189a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80189a8:	f7ff ffde 	bl	8018968 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80189ac:	b002      	add	sp, #8
 80189ae:	bd10      	pop	{r4, pc}
 80189b0:	200566ec 	.word	0x200566ec
 80189b4:	200566ee 	.word	0x200566ee

080189b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80189b8:	4b0a      	ldr	r3, [pc, #40]	; (80189e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80189ba:	460a      	mov	r2, r1
 80189bc:	b510      	push	{r4, lr}
 80189be:	781b      	ldrb	r3, [r3, #0]
 80189c0:	2b01      	cmp	r3, #1
 80189c2:	d10d      	bne.n	80189e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80189c4:	8881      	ldrh	r1, [r0, #4]
 80189c6:	8803      	ldrh	r3, [r0, #0]
 80189c8:	440b      	add	r3, r1
 80189ca:	4601      	mov	r1, r0
 80189cc:	3b01      	subs	r3, #1
 80189ce:	f821 3b02 	strh.w	r3, [r1], #2
 80189d2:	f7ff ffc9 	bl	8018968 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80189d6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80189da:	88c2      	ldrh	r2, [r0, #6]
 80189dc:	80c3      	strh	r3, [r0, #6]
 80189de:	8082      	strh	r2, [r0, #4]
 80189e0:	bd10      	pop	{r4, pc}
 80189e2:	bf00      	nop
 80189e4:	200566f0 	.word	0x200566f0

080189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80189e8:	4b09      	ldr	r3, [pc, #36]	; (8018a10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80189ea:	b507      	push	{r0, r1, r2, lr}
 80189ec:	2100      	movs	r1, #0
 80189ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80189f2:	4b08      	ldr	r3, [pc, #32]	; (8018a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80189f4:	9100      	str	r1, [sp, #0]
 80189f6:	4669      	mov	r1, sp
 80189f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80189fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018a00:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018a04:	f7ff ffd8 	bl	80189b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018a08:	b003      	add	sp, #12
 8018a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a0e:	bf00      	nop
 8018a10:	200566ec 	.word	0x200566ec
 8018a14:	200566ee 	.word	0x200566ee

08018a18 <_ZN8touchgfx11Application13requestRedrawEv>:
 8018a18:	4b06      	ldr	r3, [pc, #24]	; (8018a34 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8018a1a:	2100      	movs	r1, #0
 8018a1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a20:	4b05      	ldr	r3, [pc, #20]	; (8018a38 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018a22:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8018a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a2a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8018a2e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8018a32:	4770      	bx	lr
 8018a34:	200566ec 	.word	0x200566ec
 8018a38:	200566ee 	.word	0x200566ee

08018a3c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018a3c:	4b03      	ldr	r3, [pc, #12]	; (8018a4c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018a3e:	6818      	ldr	r0, [r3, #0]
 8018a40:	b110      	cbz	r0, 8018a48 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018a42:	6803      	ldr	r3, [r0, #0]
 8018a44:	699b      	ldr	r3, [r3, #24]
 8018a46:	4718      	bx	r3
 8018a48:	4770      	bx	lr
 8018a4a:	bf00      	nop
 8018a4c:	20056754 	.word	0x20056754

08018a50 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018a50:	4770      	bx	lr
	...

08018a54 <_ZN8touchgfx11Application4drawEv>:
 8018a54:	4b09      	ldr	r3, [pc, #36]	; (8018a7c <_ZN8touchgfx11Application4drawEv+0x28>)
 8018a56:	b507      	push	{r0, r1, r2, lr}
 8018a58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a5c:	2100      	movs	r1, #0
 8018a5e:	4b08      	ldr	r3, [pc, #32]	; (8018a80 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018a60:	9100      	str	r1, [sp, #0]
 8018a62:	4669      	mov	r1, sp
 8018a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a68:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018a6c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018a70:	6803      	ldr	r3, [r0, #0]
 8018a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a74:	4798      	blx	r3
 8018a76:	b003      	add	sp, #12
 8018a78:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a7c:	200566ec 	.word	0x200566ec
 8018a80:	200566ee 	.word	0x200566ee

08018a84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018a84:	4b03      	ldr	r3, [pc, #12]	; (8018a94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018a86:	6818      	ldr	r0, [r3, #0]
 8018a88:	b110      	cbz	r0, 8018a90 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018a8a:	6803      	ldr	r3, [r0, #0]
 8018a8c:	69db      	ldr	r3, [r3, #28]
 8018a8e:	4718      	bx	r3
 8018a90:	4770      	bx	lr
 8018a92:	bf00      	nop
 8018a94:	20056754 	.word	0x20056754

08018a98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018a98:	4b03      	ldr	r3, [pc, #12]	; (8018aa8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018a9a:	6818      	ldr	r0, [r3, #0]
 8018a9c:	b110      	cbz	r0, 8018aa4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018a9e:	6803      	ldr	r3, [r0, #0]
 8018aa0:	6a1b      	ldr	r3, [r3, #32]
 8018aa2:	4718      	bx	r3
 8018aa4:	4770      	bx	lr
 8018aa6:	bf00      	nop
 8018aa8:	20056754 	.word	0x20056754

08018aac <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018aac:	4b03      	ldr	r3, [pc, #12]	; (8018abc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018aae:	6818      	ldr	r0, [r3, #0]
 8018ab0:	b110      	cbz	r0, 8018ab8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018ab2:	6803      	ldr	r3, [r0, #0]
 8018ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ab6:	4718      	bx	r3
 8018ab8:	4770      	bx	lr
 8018aba:	bf00      	nop
 8018abc:	20056754 	.word	0x20056754

08018ac0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018ac0:	b570      	push	{r4, r5, r6, lr}
 8018ac2:	4d34      	ldr	r5, [pc, #208]	; (8018b94 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8018ac4:	4604      	mov	r4, r0
 8018ac6:	6828      	ldr	r0, [r5, #0]
 8018ac8:	b140      	cbz	r0, 8018adc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018aca:	7a03      	ldrb	r3, [r0, #8]
 8018acc:	b933      	cbnz	r3, 8018adc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018ace:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018ad2:	6803      	ldr	r3, [r0, #0]
 8018ad4:	689b      	ldr	r3, [r3, #8]
 8018ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ada:	4718      	bx	r3
 8018adc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8018ae0:	b97b      	cbnz	r3, 8018b02 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018ae2:	b170      	cbz	r0, 8018b02 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018ae4:	7a03      	ldrb	r3, [r0, #8]
 8018ae6:	b163      	cbz	r3, 8018b02 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018ae8:	4b2b      	ldr	r3, [pc, #172]	; (8018b98 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8018aea:	6818      	ldr	r0, [r3, #0]
 8018aec:	b110      	cbz	r0, 8018af4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018aee:	6803      	ldr	r3, [r0, #0]
 8018af0:	691b      	ldr	r3, [r3, #16]
 8018af2:	4798      	blx	r3
 8018af4:	6828      	ldr	r0, [r5, #0]
 8018af6:	6803      	ldr	r3, [r0, #0]
 8018af8:	68db      	ldr	r3, [r3, #12]
 8018afa:	4798      	blx	r3
 8018afc:	2301      	movs	r3, #1
 8018afe:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018b02:	2500      	movs	r5, #0
 8018b04:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018b08:	42a8      	cmp	r0, r5
 8018b0a:	dd0c      	ble.n	8018b26 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8018b0c:	1963      	adds	r3, r4, r5
 8018b0e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018b12:	b132      	cbz	r2, 8018b22 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8018b14:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018b18:	4413      	add	r3, r2
 8018b1a:	6858      	ldr	r0, [r3, #4]
 8018b1c:	6803      	ldr	r3, [r0, #0]
 8018b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b20:	4798      	blx	r3
 8018b22:	3501      	adds	r5, #1
 8018b24:	e7ee      	b.n	8018b04 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018b26:	2300      	movs	r3, #0
 8018b28:	461a      	mov	r2, r3
 8018b2a:	4298      	cmp	r0, r3
 8018b2c:	d114      	bne.n	8018b58 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8018b2e:	1d25      	adds	r5, r4, #4
 8018b30:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8018b34:	1e48      	subs	r0, r1, #1
 8018b36:	b280      	uxth	r0, r0
 8018b38:	4291      	cmp	r1, r2
 8018b3a:	dd24      	ble.n	8018b86 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8018b3c:	4288      	cmp	r0, r1
 8018b3e:	d2fb      	bcs.n	8018b38 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8018b40:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8018b44:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8018b48:	3304      	adds	r3, #4
 8018b4a:	428b      	cmp	r3, r1
 8018b4c:	d018      	beq.n	8018b80 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8018b4e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8018b52:	f843 6c04 	str.w	r6, [r3, #-4]
 8018b56:	e7f8      	b.n	8018b4a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8018b58:	18e1      	adds	r1, r4, r3
 8018b5a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8018b5e:	b16d      	cbz	r5, 8018b7c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8018b60:	429a      	cmp	r2, r3
 8018b62:	d00a      	beq.n	8018b7a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8018b64:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8018b68:	4431      	add	r1, r6
 8018b6a:	684e      	ldr	r6, [r1, #4]
 8018b6c:	b291      	uxth	r1, r2
 8018b6e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8018b72:	604e      	str	r6, [r1, #4]
 8018b74:	18a1      	adds	r1, r4, r2
 8018b76:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8018b7a:	3201      	adds	r2, #1
 8018b7c:	3301      	adds	r3, #1
 8018b7e:	e7d4      	b.n	8018b2a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8018b80:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8018b84:	e7d4      	b.n	8018b30 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8018b86:	4b04      	ldr	r3, [pc, #16]	; (8018b98 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8018b88:	6818      	ldr	r0, [r3, #0]
 8018b8a:	b110      	cbz	r0, 8018b92 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8018b8c:	6803      	ldr	r3, [r0, #0]
 8018b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b90:	e7a1      	b.n	8018ad6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018b92:	bd70      	pop	{r4, r5, r6, pc}
 8018b94:	20056758 	.word	0x20056758
 8018b98:	20056754 	.word	0x20056754

08018b9c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018b9c:	b570      	push	{r4, r5, r6, lr}
 8018b9e:	4606      	mov	r6, r0
 8018ba0:	460c      	mov	r4, r1
 8018ba2:	b929      	cbnz	r1, 8018bb0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018ba4:	4b0c      	ldr	r3, [pc, #48]	; (8018bd8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018ba6:	2167      	movs	r1, #103	; 0x67
 8018ba8:	4a0c      	ldr	r2, [pc, #48]	; (8018bdc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018baa:	480d      	ldr	r0, [pc, #52]	; (8018be0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018bac:	f00d f988 	bl	8025ec0 <__assert_func>
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	4d0c      	ldr	r5, [pc, #48]	; (8018be4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018bb4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018bb8:	6828      	ldr	r0, [r5, #0]
 8018bba:	b110      	cbz	r0, 8018bc2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018bbc:	6803      	ldr	r3, [r0, #0]
 8018bbe:	695b      	ldr	r3, [r3, #20]
 8018bc0:	4798      	blx	r3
 8018bc2:	602c      	str	r4, [r5, #0]
 8018bc4:	4620      	mov	r0, r4
 8018bc6:	6823      	ldr	r3, [r4, #0]
 8018bc8:	68db      	ldr	r3, [r3, #12]
 8018bca:	4798      	blx	r3
 8018bcc:	6833      	ldr	r3, [r6, #0]
 8018bce:	4630      	mov	r0, r6
 8018bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bd6:	4718      	bx	r3
 8018bd8:	0802d138 	.word	0x0802d138
 8018bdc:	0802d208 	.word	0x0802d208
 8018be0:	0802d142 	.word	0x0802d142
 8018be4:	20056754 	.word	0x20056754

08018be8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018be8:	b570      	push	{r4, r5, r6, lr}
 8018bea:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018bee:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018bf2:	42ac      	cmp	r4, r5
 8018bf4:	db18      	blt.n	8018c28 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018bf6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018bfa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018bfe:	429a      	cmp	r2, r3
 8018c00:	db12      	blt.n	8018c28 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018c02:	8886      	ldrh	r6, [r0, #4]
 8018c04:	4435      	add	r5, r6
 8018c06:	888e      	ldrh	r6, [r1, #4]
 8018c08:	4434      	add	r4, r6
 8018c0a:	b22d      	sxth	r5, r5
 8018c0c:	b224      	sxth	r4, r4
 8018c0e:	42a5      	cmp	r5, r4
 8018c10:	db0a      	blt.n	8018c28 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018c12:	88c0      	ldrh	r0, [r0, #6]
 8018c14:	4418      	add	r0, r3
 8018c16:	88cb      	ldrh	r3, [r1, #6]
 8018c18:	441a      	add	r2, r3
 8018c1a:	b200      	sxth	r0, r0
 8018c1c:	b212      	sxth	r2, r2
 8018c1e:	4290      	cmp	r0, r2
 8018c20:	bfb4      	ite	lt
 8018c22:	2000      	movlt	r0, #0
 8018c24:	2001      	movge	r0, #1
 8018c26:	bd70      	pop	{r4, r5, r6, pc}
 8018c28:	2000      	movs	r0, #0
 8018c2a:	e7fc      	b.n	8018c26 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018c2c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8018c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c2e:	4604      	mov	r4, r0
 8018c30:	4608      	mov	r0, r1
 8018c32:	460d      	mov	r5, r1
 8018c34:	f7fc fa25 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018c38:	b978      	cbnz	r0, 8018c5a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f7fc fa21 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018c40:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018c44:	b150      	cbz	r0, 8018c5c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018c46:	8026      	strh	r6, [r4, #0]
 8018c48:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018c4c:	8063      	strh	r3, [r4, #2]
 8018c4e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018c52:	80a3      	strh	r3, [r4, #4]
 8018c54:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018c58:	80e3      	strh	r3, [r4, #6]
 8018c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c5c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018c60:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018c64:	42b1      	cmp	r1, r6
 8018c66:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8018c6a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8018c6e:	460f      	mov	r7, r1
 8018c70:	88ed      	ldrh	r5, [r5, #6]
 8018c72:	bfa8      	it	ge
 8018c74:	4637      	movge	r7, r6
 8018c76:	4293      	cmp	r3, r2
 8018c78:	4618      	mov	r0, r3
 8018c7a:	4466      	add	r6, ip
 8018c7c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018c80:	bfa8      	it	ge
 8018c82:	4610      	movge	r0, r2
 8018c84:	442a      	add	r2, r5
 8018c86:	88e5      	ldrh	r5, [r4, #6]
 8018c88:	4461      	add	r1, ip
 8018c8a:	b236      	sxth	r6, r6
 8018c8c:	8027      	strh	r7, [r4, #0]
 8018c8e:	442b      	add	r3, r5
 8018c90:	b209      	sxth	r1, r1
 8018c92:	b212      	sxth	r2, r2
 8018c94:	8060      	strh	r0, [r4, #2]
 8018c96:	b21b      	sxth	r3, r3
 8018c98:	428e      	cmp	r6, r1
 8018c9a:	bfac      	ite	ge
 8018c9c:	ebc7 0106 	rsbge	r1, r7, r6
 8018ca0:	ebc7 0101 	rsblt	r1, r7, r1
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	bfac      	ite	ge
 8018ca8:	ebc0 0202 	rsbge	r2, r0, r2
 8018cac:	ebc0 0203 	rsblt	r2, r0, r3
 8018cb0:	80a1      	strh	r1, [r4, #4]
 8018cb2:	80e2      	strh	r2, [r4, #6]
 8018cb4:	e7d1      	b.n	8018c5a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018cb8 <_ZN8touchgfx11Application11getInstanceEv>:
 8018cb8:	4b01      	ldr	r3, [pc, #4]	; (8018cc0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018cba:	6818      	ldr	r0, [r3, #0]
 8018cbc:	4770      	bx	lr
 8018cbe:	bf00      	nop
 8018cc0:	20056764 	.word	0x20056764

08018cc4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018cca:	30a8      	adds	r0, #168	; 0xa8
 8018ccc:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018cd0:	f802 3b01 	strb.w	r3, [r2], #1
 8018cd4:	4282      	cmp	r2, r0
 8018cd6:	d1fb      	bne.n	8018cd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018cd8:	4770      	bx	lr

08018cda <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018cda:	4603      	mov	r3, r0
 8018cdc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018ce0:	2200      	movs	r2, #0
 8018ce2:	801a      	strh	r2, [r3, #0]
 8018ce4:	3308      	adds	r3, #8
 8018ce6:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018cea:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018cee:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018cf2:	428b      	cmp	r3, r1
 8018cf4:	d1f5      	bne.n	8018ce2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018cf6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018cfa:	4770      	bx	lr

08018cfc <_ZN8touchgfx11ApplicationC1Ev>:
 8018cfc:	b570      	push	{r4, r5, r6, lr}
 8018cfe:	4b1a      	ldr	r3, [pc, #104]	; (8018d68 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018d00:	2500      	movs	r5, #0
 8018d02:	4604      	mov	r4, r0
 8018d04:	30a8      	adds	r0, #168	; 0xa8
 8018d06:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018d0a:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018d0e:	f7ff ffe4 	bl	8018cda <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018d12:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018d16:	f7ff ffe0 	bl	8018cda <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018d1a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8018d1e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8018d22:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018d26:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018d2a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8018d2e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8018d32:	490e      	ldr	r1, [pc, #56]	; (8018d6c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018d34:	480e      	ldr	r0, [pc, #56]	; (8018d70 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018d36:	f00b fa69 	bl	802420c <CRC_Lock>
 8018d3a:	4e0e      	ldr	r6, [pc, #56]	; (8018d74 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018d3c:	4b0e      	ldr	r3, [pc, #56]	; (8018d78 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018d3e:	b158      	cbz	r0, 8018d58 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8018d40:	801d      	strh	r5, [r3, #0]
 8018d42:	2300      	movs	r3, #0
 8018d44:	4a0d      	ldr	r2, [pc, #52]	; (8018d7c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018d46:	4620      	mov	r0, r4
 8018d48:	6013      	str	r3, [r2, #0]
 8018d4a:	4a0d      	ldr	r2, [pc, #52]	; (8018d80 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018d4c:	6033      	str	r3, [r6, #0]
 8018d4e:	6013      	str	r3, [r2, #0]
 8018d50:	f7ff ffb8 	bl	8018cc4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018d54:	4620      	mov	r0, r4
 8018d56:	bd70      	pop	{r4, r5, r6, pc}
 8018d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018d5c:	2002      	movs	r0, #2
 8018d5e:	801a      	strh	r2, [r3, #0]
 8018d60:	6030      	str	r0, [r6, #0]
 8018d62:	f001 fb41 	bl	801a3e8 <_ZN8touchgfx6Screen4drawEv>
 8018d66:	e7ec      	b.n	8018d42 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8018d68:	0802d1cc 	.word	0x0802d1cc
 8018d6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018d70:	f407a5c2 	.word	0xf407a5c2
 8018d74:	20056754 	.word	0x20056754
 8018d78:	20000024 	.word	0x20000024
 8018d7c:	20056764 	.word	0x20056764
 8018d80:	20056758 	.word	0x20056758

08018d84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018d84:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018d88:	428b      	cmp	r3, r1
 8018d8a:	b510      	push	{r4, lr}
 8018d8c:	d90e      	bls.n	8018dac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8018d8e:	3b01      	subs	r3, #1
 8018d90:	b29b      	uxth	r3, r3
 8018d92:	428b      	cmp	r3, r1
 8018d94:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018d98:	d908      	bls.n	8018dac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8018d9a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018d9e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018da2:	681a      	ldr	r2, [r3, #0]
 8018da4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018da8:	685a      	ldr	r2, [r3, #4]
 8018daa:	6062      	str	r2, [r4, #4]
 8018dac:	bd10      	pop	{r4, pc}
	...

08018db0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018db2:	466b      	mov	r3, sp
 8018db4:	4604      	mov	r4, r0
 8018db6:	e883 0006 	stmia.w	r3, {r1, r2}
 8018dba:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018dbe:	2a07      	cmp	r2, #7
 8018dc0:	d906      	bls.n	8018dd0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018dc2:	4b09      	ldr	r3, [pc, #36]	; (8018de8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018dc4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8018dc8:	4a08      	ldr	r2, [pc, #32]	; (8018dec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018dca:	4809      	ldr	r0, [pc, #36]	; (8018df0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018dcc:	f00d f878 	bl	8025ec0 <__assert_func>
 8018dd0:	1c51      	adds	r1, r2, #1
 8018dd2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018dd6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018dda:	cb03      	ldmia	r3!, {r0, r1}
 8018ddc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018de0:	6069      	str	r1, [r5, #4]
 8018de2:	b003      	add	sp, #12
 8018de4:	bd30      	pop	{r4, r5, pc}
 8018de6:	bf00      	nop
 8018de8:	0802d16c 	.word	0x0802d16c
 8018dec:	0802d24c 	.word	0x0802d24c
 8018df0:	0802d19b 	.word	0x0802d19b

08018df4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df8:	b08d      	sub	sp, #52	; 0x34
 8018dfa:	4683      	mov	fp, r0
 8018dfc:	ac08      	add	r4, sp, #32
 8018dfe:	4620      	mov	r0, r4
 8018e00:	e884 0006 	stmia.w	r4, {r1, r2}
 8018e04:	f7fc f93d 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018e08:	2800      	cmp	r0, #0
 8018e0a:	d16a      	bne.n	8018ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018e0c:	9402      	str	r4, [sp, #8]
 8018e0e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8018e12:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8018e16:	2400      	movs	r4, #0
 8018e18:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8018e1c:	9301      	str	r3, [sp, #4]
 8018e1e:	36a0      	adds	r6, #160	; 0xa0
 8018e20:	42a5      	cmp	r5, r4
 8018e22:	d00d      	beq.n	8018e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8018e24:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8018e28:	9802      	ldr	r0, [sp, #8]
 8018e2a:	f7ff fedd 	bl	8018be8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018e2e:	b128      	cbz	r0, 8018e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8018e30:	1e69      	subs	r1, r5, #1
 8018e32:	9801      	ldr	r0, [sp, #4]
 8018e34:	1b09      	subs	r1, r1, r4
 8018e36:	b289      	uxth	r1, r1
 8018e38:	f7ff ffa4 	bl	8018d84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018e3c:	3401      	adds	r4, #1
 8018e3e:	e7ef      	b.n	8018e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018e40:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8018e44:	1e7b      	subs	r3, r7, #1
 8018e46:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8018e4a:	9703      	str	r7, [sp, #12]
 8018e4c:	9300      	str	r3, [sp, #0]
 8018e4e:	2400      	movs	r4, #0
 8018e50:	4655      	mov	r5, sl
 8018e52:	9704      	str	r7, [sp, #16]
 8018e54:	4626      	mov	r6, r4
 8018e56:	9b04      	ldr	r3, [sp, #16]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d078      	beq.n	8018f4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8018e5c:	9902      	ldr	r1, [sp, #8]
 8018e5e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018e62:	f7fd fad7 	bl	8016414 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018e66:	b360      	cbz	r0, 8018ec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018e68:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8018e6c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8018e70:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8018e74:	45e6      	cmp	lr, ip
 8018e76:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8018e7a:	db35      	blt.n	8018ee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018e7c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018e80:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018e84:	4472      	add	r2, lr
 8018e86:	4463      	add	r3, ip
 8018e88:	b212      	sxth	r2, r2
 8018e8a:	b21b      	sxth	r3, r3
 8018e8c:	429a      	cmp	r2, r3
 8018e8e:	dc2b      	bgt.n	8018ee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018e90:	fa1f f288 	uxth.w	r2, r8
 8018e94:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018e98:	45c1      	cmp	r9, r8
 8018e9a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018e9e:	4413      	add	r3, r2
 8018ea0:	fa1f fc89 	uxth.w	ip, r9
 8018ea4:	b29b      	uxth	r3, r3
 8018ea6:	fa0f fe83 	sxth.w	lr, r3
 8018eaa:	db0f      	blt.n	8018ecc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8018eac:	eba3 030c 	sub.w	r3, r3, ip
 8018eb0:	1ac9      	subs	r1, r1, r3
 8018eb2:	b209      	sxth	r1, r1
 8018eb4:	2900      	cmp	r1, #0
 8018eb6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8018eba:	dd12      	ble.n	8018ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018ebc:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8018ec0:	4604      	mov	r4, r0
 8018ec2:	9b04      	ldr	r3, [sp, #16]
 8018ec4:	3d08      	subs	r5, #8
 8018ec6:	3b01      	subs	r3, #1
 8018ec8:	9304      	str	r3, [sp, #16]
 8018eca:	e7c4      	b.n	8018e56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8018ecc:	4461      	add	r1, ip
 8018ece:	b209      	sxth	r1, r1
 8018ed0:	4571      	cmp	r1, lr
 8018ed2:	dc3a      	bgt.n	8018f4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018ed4:	eba2 020c 	sub.w	r2, r2, ip
 8018ed8:	b212      	sxth	r2, r2
 8018eda:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018ede:	2a00      	cmp	r2, #0
 8018ee0:	dcee      	bgt.n	8018ec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018ee2:	b00d      	add	sp, #52	; 0x34
 8018ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ee8:	45c1      	cmp	r9, r8
 8018eea:	db2e      	blt.n	8018f4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018eec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018ef0:	4499      	add	r9, r3
 8018ef2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018ef6:	4498      	add	r8, r3
 8018ef8:	fa0f f989 	sxth.w	r9, r9
 8018efc:	fa0f f888 	sxth.w	r8, r8
 8018f00:	45c1      	cmp	r9, r8
 8018f02:	dc22      	bgt.n	8018f4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018f04:	fa1f f28c 	uxth.w	r2, ip
 8018f08:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018f0c:	45e6      	cmp	lr, ip
 8018f0e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8018f12:	4413      	add	r3, r2
 8018f14:	fa1f f88e 	uxth.w	r8, lr
 8018f18:	b29b      	uxth	r3, r3
 8018f1a:	fa0f f983 	sxth.w	r9, r3
 8018f1e:	db0a      	blt.n	8018f36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8018f20:	eba3 0308 	sub.w	r3, r3, r8
 8018f24:	1ac9      	subs	r1, r1, r3
 8018f26:	b209      	sxth	r1, r1
 8018f28:	2900      	cmp	r1, #0
 8018f2a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8018f2e:	ddd8      	ble.n	8018ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018f30:	f8ad 9020 	strh.w	r9, [sp, #32]
 8018f34:	e7c4      	b.n	8018ec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018f36:	4441      	add	r1, r8
 8018f38:	b209      	sxth	r1, r1
 8018f3a:	4549      	cmp	r1, r9
 8018f3c:	dc05      	bgt.n	8018f4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018f3e:	eba2 0208 	sub.w	r2, r2, r8
 8018f42:	b212      	sxth	r2, r2
 8018f44:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018f48:	e7c9      	b.n	8018ede <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018f4a:	4606      	mov	r6, r0
 8018f4c:	e7b9      	b.n	8018ec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018f4e:	2c00      	cmp	r4, #0
 8018f50:	f47f af7d 	bne.w	8018e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8018f54:	2e00      	cmp	r6, #0
 8018f56:	f000 81dc 	beq.w	8019312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018f5a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8018f5e:	4655      	mov	r5, sl
 8018f60:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8018f64:	b2b9      	uxth	r1, r7
 8018f66:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018f6a:	b2b3      	uxth	r3, r6
 8018f6c:	9104      	str	r1, [sp, #16]
 8018f6e:	9804      	ldr	r0, [sp, #16]
 8018f70:	441a      	add	r2, r3
 8018f72:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018f76:	b292      	uxth	r2, r2
 8018f78:	4401      	add	r1, r0
 8018f7a:	fa0f f882 	sxth.w	r8, r2
 8018f7e:	b289      	uxth	r1, r1
 8018f80:	9105      	str	r1, [sp, #20]
 8018f82:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8018f86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018f8a:	9b03      	ldr	r3, [sp, #12]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d054      	beq.n	801903a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8018f90:	9902      	ldr	r1, [sp, #8]
 8018f92:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018f96:	f7fd fa3d 	bl	8016414 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018f9e:	b1d8      	cbz	r0, 8018fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018fa0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8018fa4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8018fa8:	4576      	cmp	r6, lr
 8018faa:	dc26      	bgt.n	8018ffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018fac:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8018fb0:	44f4      	add	ip, lr
 8018fb2:	fa0f fc8c 	sxth.w	ip, ip
 8018fb6:	45e0      	cmp	r8, ip
 8018fb8:	db1f      	blt.n	8018ffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018fba:	428f      	cmp	r7, r1
 8018fbc:	fa1f fc81 	uxth.w	ip, r1
 8018fc0:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8018fc4:	dc0f      	bgt.n	8018fe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018fc6:	9805      	ldr	r0, [sp, #20]
 8018fc8:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8018fcc:	eba0 0c0c 	sub.w	ip, r0, ip
 8018fd0:	eba1 010c 	sub.w	r1, r1, ip
 8018fd4:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8018fd8:	4620      	mov	r0, r4
 8018fda:	9903      	ldr	r1, [sp, #12]
 8018fdc:	3d08      	subs	r5, #8
 8018fde:	4604      	mov	r4, r0
 8018fe0:	3901      	subs	r1, #1
 8018fe2:	9103      	str	r1, [sp, #12]
 8018fe4:	e7cf      	b.n	8018f86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8018fe6:	4461      	add	r1, ip
 8018fe8:	b209      	sxth	r1, r1
 8018fea:	4549      	cmp	r1, r9
 8018fec:	dcf5      	bgt.n	8018fda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018fee:	9904      	ldr	r1, [sp, #16]
 8018ff0:	eba1 0c0c 	sub.w	ip, r1, ip
 8018ff4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8018ff8:	e7ee      	b.n	8018fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018ffa:	428f      	cmp	r7, r1
 8018ffc:	dced      	bgt.n	8018fda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018ffe:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8019002:	4461      	add	r1, ip
 8019004:	b209      	sxth	r1, r1
 8019006:	4589      	cmp	r9, r1
 8019008:	dbe7      	blt.n	8018fda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801900a:	4576      	cmp	r6, lr
 801900c:	fa1f fc8e 	uxth.w	ip, lr
 8019010:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8019014:	dc08      	bgt.n	8019028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8019016:	eba2 0c0c 	sub.w	ip, r2, ip
 801901a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801901e:	eba1 010c 	sub.w	r1, r1, ip
 8019022:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8019026:	e7d7      	b.n	8018fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019028:	4461      	add	r1, ip
 801902a:	b209      	sxth	r1, r1
 801902c:	4588      	cmp	r8, r1
 801902e:	dbd4      	blt.n	8018fda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019030:	eba3 0c0c 	sub.w	ip, r3, ip
 8019034:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8019038:	e7ce      	b.n	8018fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801903a:	2c00      	cmp	r4, #0
 801903c:	f000 8169 	beq.w	8019312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019040:	9b00      	ldr	r3, [sp, #0]
 8019042:	3301      	adds	r3, #1
 8019044:	f000 8165 	beq.w	8019312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019048:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801904c:	9802      	ldr	r0, [sp, #8]
 801904e:	4621      	mov	r1, r4
 8019050:	f7ff fdca 	bl	8018be8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019054:	b120      	cbz	r0, 8019060 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8019056:	f8bd 1000 	ldrh.w	r1, [sp]
 801905a:	9801      	ldr	r0, [sp, #4]
 801905c:	f7ff fe92 	bl	8018d84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019060:	9902      	ldr	r1, [sp, #8]
 8019062:	4620      	mov	r0, r4
 8019064:	f7fd f9d6 	bl	8016414 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019068:	2800      	cmp	r0, #0
 801906a:	f000 809b 	beq.w	80191a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801906e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8019072:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8019076:	fa1f f288 	uxth.w	r2, r8
 801907a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801907e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8019082:	19d5      	adds	r5, r2, r7
 8019084:	b2a1      	uxth	r1, r4
 8019086:	45a0      	cmp	r8, r4
 8019088:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801908c:	fa1f f985 	uxth.w	r9, r5
 8019090:	440b      	add	r3, r1
 8019092:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8019096:	fa0f f589 	sxth.w	r5, r9
 801909a:	b29b      	uxth	r3, r3
 801909c:	9503      	str	r5, [sp, #12]
 801909e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80190a2:	9507      	str	r5, [sp, #28]
 80190a4:	f340 809d 	ble.w	80191e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80190a8:	1a52      	subs	r2, r2, r1
 80190aa:	4584      	cmp	ip, r0
 80190ac:	fa0f fe83 	sxth.w	lr, r3
 80190b0:	b292      	uxth	r2, r2
 80190b2:	b215      	sxth	r5, r2
 80190b4:	dd2f      	ble.n	8019116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80190b6:	9e00      	ldr	r6, [sp, #0]
 80190b8:	fa1f fc8c 	uxth.w	ip, ip
 80190bc:	b280      	uxth	r0, r0
 80190be:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80190c2:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 80190c6:	9e03      	ldr	r6, [sp, #12]
 80190c8:	ebac 0300 	sub.w	r3, ip, r0
 80190cc:	448c      	add	ip, r1
 80190ce:	eba6 060e 	sub.w	r6, r6, lr
 80190d2:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80190d6:	b29b      	uxth	r3, r3
 80190d8:	4470      	add	r0, lr
 80190da:	fa0f fc8c 	sxth.w	ip, ip
 80190de:	b21c      	sxth	r4, r3
 80190e0:	b200      	sxth	r0, r0
 80190e2:	4366      	muls	r6, r4
 80190e4:	ebac 0000 	sub.w	r0, ip, r0
 80190e8:	4368      	muls	r0, r5
 80190ea:	4286      	cmp	r6, r0
 80190ec:	db09      	blt.n	8019102 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 80190ee:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80190f2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80190f6:	4417      	add	r7, r2
 80190f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80190fc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019100:	e685      	b.n	8018e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019102:	440b      	add	r3, r1
 8019104:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8019108:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801910c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8019110:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019114:	e67b      	b.n	8018e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019116:	9e03      	ldr	r6, [sp, #12]
 8019118:	45b6      	cmp	lr, r6
 801911a:	da28      	bge.n	801916e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801911c:	9b00      	ldr	r3, [sp, #0]
 801911e:	eba6 060e 	sub.w	r6, r6, lr
 8019122:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8019126:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801912a:	eb04 030c 	add.w	r3, r4, ip
 801912e:	fa1f f883 	uxth.w	r8, r3
 8019132:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8019136:	4403      	add	r3, r0
 8019138:	fa0f f988 	sxth.w	r9, r8
 801913c:	eba0 000c 	sub.w	r0, r0, ip
 8019140:	eba3 0308 	sub.w	r3, r3, r8
 8019144:	4368      	muls	r0, r5
 8019146:	b29b      	uxth	r3, r3
 8019148:	fa0f f883 	sxth.w	r8, r3
 801914c:	fb08 f606 	mul.w	r6, r8, r6
 8019150:	42b0      	cmp	r0, r6
 8019152:	dc06      	bgt.n	8019162 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8019154:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8019158:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801915c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8019160:	e7c9      	b.n	80190f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8019162:	4423      	add	r3, r4
 8019164:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8019168:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801916c:	e64f      	b.n	8018e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801916e:	eba3 0309 	sub.w	r3, r3, r9
 8019172:	9807      	ldr	r0, [sp, #28]
 8019174:	b29b      	uxth	r3, r3
 8019176:	2806      	cmp	r0, #6
 8019178:	fa0f fc83 	sxth.w	ip, r3
 801917c:	d818      	bhi.n	80191b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801917e:	4652      	mov	r2, sl
 8019180:	ab0a      	add	r3, sp, #40	; 0x28
 8019182:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8019186:	6851      	ldr	r1, [r2, #4]
 8019188:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801918c:	c303      	stmia	r3!, {r0, r1}
 801918e:	9b03      	ldr	r3, [sp, #12]
 8019190:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8019194:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8019198:	ab0a      	add	r3, sp, #40	; 0x28
 801919a:	9801      	ldr	r0, [sp, #4]
 801919c:	e893 0006 	ldmia.w	r3, {r1, r2}
 80191a0:	f7ff fe06 	bl	8018db0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80191a4:	9b00      	ldr	r3, [sp, #0]
 80191a6:	f1aa 0a08 	sub.w	sl, sl, #8
 80191aa:	3b01      	subs	r3, #1
 80191ac:	9300      	str	r3, [sp, #0]
 80191ae:	e747      	b.n	8019040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80191b0:	9800      	ldr	r0, [sp, #0]
 80191b2:	45ac      	cmp	ip, r5
 80191b4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80191b8:	db0c      	blt.n	80191d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 80191ba:	4417      	add	r7, r2
 80191bc:	4458      	add	r0, fp
 80191be:	f8ad 4020 	strh.w	r4, [sp, #32]
 80191c2:	b2bf      	uxth	r7, r7
 80191c4:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 80191c8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80191cc:	440f      	add	r7, r1
 80191ce:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80191d2:	e61c      	b.n	8018e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80191d4:	4458      	add	r0, fp
 80191d6:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 80191da:	443b      	add	r3, r7
 80191dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80191e0:	e615      	b.n	8018e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80191e2:	fa1f f18c 	uxth.w	r1, ip
 80191e6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80191ea:	b282      	uxth	r2, r0
 80191ec:	4584      	cmp	ip, r0
 80191ee:	eb01 0e05 	add.w	lr, r1, r5
 80191f2:	9204      	str	r2, [sp, #16]
 80191f4:	fa1f fe8e 	uxth.w	lr, lr
 80191f8:	9e04      	ldr	r6, [sp, #16]
 80191fa:	fa0f f28e 	sxth.w	r2, lr
 80191fe:	9205      	str	r2, [sp, #20]
 8019200:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8019204:	4432      	add	r2, r6
 8019206:	b292      	uxth	r2, r2
 8019208:	9206      	str	r2, [sp, #24]
 801920a:	da26      	bge.n	801925a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801920c:	eba3 0309 	sub.w	r3, r3, r9
 8019210:	eba2 020e 	sub.w	r2, r2, lr
 8019214:	eba0 000c 	sub.w	r0, r0, ip
 8019218:	eba4 0408 	sub.w	r4, r4, r8
 801921c:	b29b      	uxth	r3, r3
 801921e:	b292      	uxth	r2, r2
 8019220:	fa0f fa83 	sxth.w	sl, r3
 8019224:	b211      	sxth	r1, r2
 8019226:	fb0a f000 	mul.w	r0, sl, r0
 801922a:	434c      	muls	r4, r1
 801922c:	42a0      	cmp	r0, r4
 801922e:	9800      	ldr	r0, [sp, #0]
 8019230:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019234:	dc06      	bgt.n	8019244 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8019236:	4458      	add	r0, fp
 8019238:	9a05      	ldr	r2, [sp, #20]
 801923a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801923e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8019242:	e7ca      	b.n	80191da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019244:	eb0b 0300 	add.w	r3, fp, r0
 8019248:	9903      	ldr	r1, [sp, #12]
 801924a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801924e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8019252:	442a      	add	r2, r5
 8019254:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019258:	e5d9      	b.n	8018e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801925a:	9e04      	ldr	r6, [sp, #16]
 801925c:	9a03      	ldr	r2, [sp, #12]
 801925e:	1b89      	subs	r1, r1, r6
 8019260:	b21e      	sxth	r6, r3
 8019262:	b289      	uxth	r1, r1
 8019264:	4296      	cmp	r6, r2
 8019266:	fa0f fc81 	sxth.w	ip, r1
 801926a:	dd25      	ble.n	80192b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801926c:	eba3 0309 	sub.w	r3, r3, r9
 8019270:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8019274:	9e05      	ldr	r6, [sp, #20]
 8019276:	eba4 0408 	sub.w	r4, r4, r8
 801927a:	b29b      	uxth	r3, r3
 801927c:	eba6 0902 	sub.w	r9, r6, r2
 8019280:	fb0c f404 	mul.w	r4, ip, r4
 8019284:	b218      	sxth	r0, r3
 8019286:	9a00      	ldr	r2, [sp, #0]
 8019288:	fb00 f909 	mul.w	r9, r0, r9
 801928c:	00d2      	lsls	r2, r2, #3
 801928e:	454c      	cmp	r4, r9
 8019290:	db03      	blt.n	801929a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8019292:	445a      	add	r2, fp
 8019294:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8019298:	e79f      	b.n	80191da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801929a:	eb0b 0302 	add.w	r3, fp, r2
 801929e:	9a03      	ldr	r2, [sp, #12]
 80192a0:	4429      	add	r1, r5
 80192a2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80192a6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80192aa:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80192ae:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80192b2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80192b6:	e5aa      	b.n	8018e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80192b8:	9b06      	ldr	r3, [sp, #24]
 80192ba:	9c07      	ldr	r4, [sp, #28]
 80192bc:	eba3 020e 	sub.w	r2, r3, lr
 80192c0:	2c06      	cmp	r4, #6
 80192c2:	b292      	uxth	r2, r2
 80192c4:	b213      	sxth	r3, r2
 80192c6:	d80d      	bhi.n	80192e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 80192c8:	4651      	mov	r1, sl
 80192ca:	aa0a      	add	r2, sp, #40	; 0x28
 80192cc:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 80192d0:	6849      	ldr	r1, [r1, #4]
 80192d2:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 80192d6:	9b05      	ldr	r3, [sp, #20]
 80192d8:	c203      	stmia	r2!, {r0, r1}
 80192da:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80192de:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 80192e2:	e759      	b.n	8019198 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 80192e4:	9c00      	ldr	r4, [sp, #0]
 80192e6:	4563      	cmp	r3, ip
 80192e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80192ec:	db0d      	blt.n	801930a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 80192ee:	4429      	add	r1, r5
 80192f0:	9a04      	ldr	r2, [sp, #16]
 80192f2:	445c      	add	r4, fp
 80192f4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80192f8:	b289      	uxth	r1, r1
 80192fa:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80192fe:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8019302:	4411      	add	r1, r2
 8019304:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8019308:	e581      	b.n	8018e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801930a:	445c      	add	r4, fp
 801930c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8019310:	e79f      	b.n	8019252 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8019312:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019316:	2f07      	cmp	r7, #7
 8019318:	d806      	bhi.n	8019328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801931a:	ab08      	add	r3, sp, #32
 801931c:	9801      	ldr	r0, [sp, #4]
 801931e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019322:	f7ff fd45 	bl	8018db0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019326:	e5dc      	b.n	8018ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019328:	f107 39ff 	add.w	r9, r7, #4294967295
 801932c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019330:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8019334:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019338:	f04f 35ff 	mov.w	r5, #4294967295
 801933c:	2400      	movs	r4, #0
 801933e:	9304      	str	r3, [sp, #16]
 8019340:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8019344:	f109 32ff 	add.w	r2, r9, #4294967295
 8019348:	9300      	str	r3, [sp, #0]
 801934a:	4690      	mov	r8, r2
 801934c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8019350:	9303      	str	r3, [sp, #12]
 8019352:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019356:	f1b8 3fff 	cmp.w	r8, #4294967295
 801935a:	6818      	ldr	r0, [r3, #0]
 801935c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8019360:	9206      	str	r2, [sp, #24]
 8019362:	bf16      	itet	ne
 8019364:	9904      	ldrne	r1, [sp, #16]
 8019366:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801936a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801936e:	9305      	str	r3, [sp, #20]
 8019370:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019374:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8019378:	fb16 f601 	smulbb	r6, r6, r1
 801937c:	6859      	ldr	r1, [r3, #4]
 801937e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019382:	4671      	mov	r1, lr
 8019384:	a80a      	add	r0, sp, #40	; 0x28
 8019386:	f7ff fc51 	bl	8018c2c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801938a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801938e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019392:	9b03      	ldr	r3, [sp, #12]
 8019394:	9a00      	ldr	r2, [sp, #0]
 8019396:	fb11 f100 	smulbb	r1, r1, r0
 801939a:	2008      	movs	r0, #8
 801939c:	fb02 6603 	mla	r6, r2, r3, r6
 80193a0:	1b8e      	subs	r6, r1, r6
 80193a2:	fb91 f1f0 	sdiv	r1, r1, r0
 80193a6:	42b1      	cmp	r1, r6
 80193a8:	dc21      	bgt.n	80193ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80193aa:	4556      	cmp	r6, sl
 80193ac:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80193b0:	da03      	bge.n	80193ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 80193b2:	b1e6      	cbz	r6, 80193ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80193b4:	46b2      	mov	sl, r6
 80193b6:	4645      	mov	r5, r8
 80193b8:	464c      	mov	r4, r9
 80193ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80193be:	f118 0f02 	cmn.w	r8, #2
 80193c2:	d1c8      	bne.n	8019356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 80193c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80193c8:	f1a7 0708 	sub.w	r7, r7, #8
 80193cc:	4691      	mov	r9, r2
 80193ce:	d1b7      	bne.n	8019340 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80193d0:	9b01      	ldr	r3, [sp, #4]
 80193d2:	b2a6      	uxth	r6, r4
 80193d4:	00e4      	lsls	r4, r4, #3
 80193d6:	1918      	adds	r0, r3, r4
 80193d8:	1c6b      	adds	r3, r5, #1
 80193da:	d10b      	bne.n	80193f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 80193dc:	4601      	mov	r1, r0
 80193de:	9802      	ldr	r0, [sp, #8]
 80193e0:	f7ff fc24 	bl	8018c2c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80193e4:	4631      	mov	r1, r6
 80193e6:	9801      	ldr	r0, [sp, #4]
 80193e8:	f7ff fccc 	bl	8018d84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80193ec:	e50f      	b.n	8018e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80193ee:	4645      	mov	r5, r8
 80193f0:	464c      	mov	r4, r9
 80193f2:	e7ed      	b.n	80193d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 80193f4:	9b01      	ldr	r3, [sp, #4]
 80193f6:	00ed      	lsls	r5, r5, #3
 80193f8:	445c      	add	r4, fp
 80193fa:	1959      	adds	r1, r3, r5
 80193fc:	445d      	add	r5, fp
 80193fe:	f7ff fc15 	bl	8018c2c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019402:	9b02      	ldr	r3, [sp, #8]
 8019404:	cb03      	ldmia	r3!, {r0, r1}
 8019406:	9b02      	ldr	r3, [sp, #8]
 8019408:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801940c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8019410:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8019414:	6861      	ldr	r1, [r4, #4]
 8019416:	c303      	stmia	r3!, {r0, r1}
 8019418:	e7e4      	b.n	80193e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801941c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801941c:	4b1d      	ldr	r3, [pc, #116]	; (8019494 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801941e:	b530      	push	{r4, r5, lr}
 8019420:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019424:	b085      	sub	sp, #20
 8019426:	4b1c      	ldr	r3, [pc, #112]	; (8019498 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019428:	460c      	mov	r4, r1
 801942a:	2100      	movs	r1, #0
 801942c:	4605      	mov	r5, r0
 801942e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019432:	6820      	ldr	r0, [r4, #0]
 8019434:	9100      	str	r1, [sp, #0]
 8019436:	f8ad 3006 	strh.w	r3, [sp, #6]
 801943a:	ab02      	add	r3, sp, #8
 801943c:	6861      	ldr	r1, [r4, #4]
 801943e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019442:	c303      	stmia	r3!, {r0, r1}
 8019444:	4669      	mov	r1, sp
 8019446:	a802      	add	r0, sp, #8
 8019448:	f7fb fdd8 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 801944c:	ab02      	add	r3, sp, #8
 801944e:	cb03      	ldmia	r3!, {r0, r1}
 8019450:	4b12      	ldr	r3, [pc, #72]	; (801949c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019452:	6020      	str	r0, [r4, #0]
 8019454:	6818      	ldr	r0, [r3, #0]
 8019456:	6061      	str	r1, [r4, #4]
 8019458:	b138      	cbz	r0, 801946a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801945a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801945e:	b133      	cbz	r3, 801946e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019460:	6821      	ldr	r1, [r4, #0]
 8019462:	4628      	mov	r0, r5
 8019464:	6862      	ldr	r2, [r4, #4]
 8019466:	f7ff fcc5 	bl	8018df4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801946a:	b005      	add	sp, #20
 801946c:	bd30      	pop	{r4, r5, pc}
 801946e:	6803      	ldr	r3, [r0, #0]
 8019470:	4621      	mov	r1, r4
 8019472:	689b      	ldr	r3, [r3, #8]
 8019474:	4798      	blx	r3
 8019476:	4b0a      	ldr	r3, [pc, #40]	; (80194a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019478:	6818      	ldr	r0, [r3, #0]
 801947a:	b118      	cbz	r0, 8019484 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801947c:	6803      	ldr	r3, [r0, #0]
 801947e:	4621      	mov	r1, r4
 8019480:	689b      	ldr	r3, [r3, #8]
 8019482:	4798      	blx	r3
 8019484:	4b07      	ldr	r3, [pc, #28]	; (80194a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8019486:	4621      	mov	r1, r4
 8019488:	6818      	ldr	r0, [r3, #0]
 801948a:	6803      	ldr	r3, [r0, #0]
 801948c:	699b      	ldr	r3, [r3, #24]
 801948e:	4798      	blx	r3
 8019490:	e7eb      	b.n	801946a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019492:	bf00      	nop
 8019494:	200566ec 	.word	0x200566ec
 8019498:	200566ee 	.word	0x200566ee
 801949c:	20056754 	.word	0x20056754
 80194a0:	20056750 	.word	0x20056750
 80194a4:	200566f8 	.word	0x200566f8

080194a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80194a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ac:	4604      	mov	r4, r0
 80194ae:	b09b      	sub	sp, #108	; 0x6c
 80194b0:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80194b4:	b129      	cbz	r1, 80194c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80194b6:	2300      	movs	r3, #0
 80194b8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80194bc:	b01b      	add	sp, #108	; 0x6c
 80194be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194c2:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80194c6:	4630      	mov	r0, r6
 80194c8:	f7fb fddb 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 80194cc:	4605      	mov	r5, r0
 80194ce:	b940      	cbnz	r0, 80194e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 80194d0:	4620      	mov	r0, r4
 80194d2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80194d6:	f7ff fc8d 	bl	8018df4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80194da:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80194de:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80194e2:	4ba6      	ldr	r3, [pc, #664]	; (801977c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	b33b      	cbz	r3, 8019538 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80194e8:	4da5      	ldr	r5, [pc, #660]	; (8019780 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80194ea:	4628      	mov	r0, r5
 80194ec:	f7fb fdc9 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 80194f0:	4606      	mov	r6, r0
 80194f2:	bb08      	cbnz	r0, 8019538 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80194f4:	4628      	mov	r0, r5
 80194f6:	f7ff fa1d 	bl	8018934 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80194fa:	6829      	ldr	r1, [r5, #0]
 80194fc:	686a      	ldr	r2, [r5, #4]
 80194fe:	4620      	mov	r0, r4
 8019500:	f7ff fc78 	bl	8018df4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019504:	802e      	strh	r6, [r5, #0]
 8019506:	806e      	strh	r6, [r5, #2]
 8019508:	80ae      	strh	r6, [r5, #4]
 801950a:	80ee      	strh	r6, [r5, #6]
 801950c:	4f9d      	ldr	r7, [pc, #628]	; (8019784 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801950e:	a809      	add	r0, sp, #36	; 0x24
 8019510:	f7ff fbe3 	bl	8018cda <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019514:	883d      	ldrh	r5, [r7, #0]
 8019516:	462e      	mov	r6, r5
 8019518:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801951c:	42b3      	cmp	r3, r6
 801951e:	d910      	bls.n	8019542 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8019520:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019524:	3601      	adds	r6, #1
 8019526:	a809      	add	r0, sp, #36	; 0x24
 8019528:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801952c:	b2b6      	uxth	r6, r6
 801952e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019532:	f7ff fc3d 	bl	8018db0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019536:	e7ef      	b.n	8019518 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019538:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801953c:	2b00      	cmp	r3, #0
 801953e:	d1e5      	bne.n	801950c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8019540:	e7bc      	b.n	80194bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019542:	462e      	mov	r6, r5
 8019544:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019548:	42b3      	cmp	r3, r6
 801954a:	d90b      	bls.n	8019564 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801954c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019550:	3601      	adds	r6, #1
 8019552:	4620      	mov	r0, r4
 8019554:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019558:	b2b6      	uxth	r6, r6
 801955a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801955e:	f7ff fc49 	bl	8018df4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019562:	e7ef      	b.n	8019544 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019564:	4a88      	ldr	r2, [pc, #544]	; (8019788 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8019566:	6813      	ldr	r3, [r2, #0]
 8019568:	4690      	mov	r8, r2
 801956a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801956e:	2b01      	cmp	r3, #1
 8019570:	f040 8094 	bne.w	801969c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8019574:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019578:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801957c:	f04f 0900 	mov.w	r9, #0
 8019580:	33aa      	adds	r3, #170	; 0xaa
 8019582:	42a8      	cmp	r0, r5
 8019584:	f103 0308 	add.w	r3, r3, #8
 8019588:	dd0a      	ble.n	80195a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801958a:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801958e:	3501      	adds	r5, #1
 8019590:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8019594:	440a      	add	r2, r1
 8019596:	b212      	sxth	r2, r2
 8019598:	4591      	cmp	r9, r2
 801959a:	bfb8      	it	lt
 801959c:	4691      	movlt	r9, r2
 801959e:	e7f0      	b.n	8019582 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 80195a0:	4b7a      	ldr	r3, [pc, #488]	; (801978c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80195a2:	4e7b      	ldr	r6, [pc, #492]	; (8019790 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80195a4:	881d      	ldrh	r5, [r3, #0]
 80195a6:	2300      	movs	r3, #0
 80195a8:	2d0f      	cmp	r5, #15
 80195aa:	bf8c      	ite	hi
 80195ac:	08ed      	lsrhi	r5, r5, #3
 80195ae:	2501      	movls	r5, #1
 80195b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80195b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80195b8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80195bc:	f8d8 0000 	ldr.w	r0, [r8]
 80195c0:	440b      	add	r3, r1
 80195c2:	6802      	ldr	r2, [r0, #0]
 80195c4:	b21b      	sxth	r3, r3
 80195c6:	4599      	cmp	r9, r3
 80195c8:	dd4b      	ble.n	8019662 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 80195ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80195ce:	4798      	blx	r3
 80195d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80195d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80195d8:	4413      	add	r3, r2
 80195da:	b21b      	sxth	r3, r3
 80195dc:	195a      	adds	r2, r3, r5
 80195de:	4290      	cmp	r0, r2
 80195e0:	da07      	bge.n	80195f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80195e2:	4581      	cmp	r9, r0
 80195e4:	dd05      	ble.n	80195f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80195e6:	4298      	cmp	r0, r3
 80195e8:	da33      	bge.n	8019652 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	dd31      	ble.n	8019652 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80195ee:	4648      	mov	r0, r9
 80195f0:	e004      	b.n	80195fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 80195f2:	4298      	cmp	r0, r3
 80195f4:	dbfb      	blt.n	80195ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 80195f6:	4548      	cmp	r0, r9
 80195f8:	bfa8      	it	ge
 80195fa:	4648      	movge	r0, r9
 80195fc:	f9b6 2000 	ldrsh.w	r2, [r6]
 8019600:	2100      	movs	r1, #0
 8019602:	1ac0      	subs	r0, r0, r3
 8019604:	f8b7 a000 	ldrh.w	sl, [r7]
 8019608:	f8ad 1014 	strh.w	r1, [sp, #20]
 801960c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019610:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019614:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019618:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801961c:	4553      	cmp	r3, sl
 801961e:	d9c9      	bls.n	80195b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019620:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019624:	ab07      	add	r3, sp, #28
 8019626:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801962a:	6851      	ldr	r1, [r2, #4]
 801962c:	c303      	stmia	r3!, {r0, r1}
 801962e:	a807      	add	r0, sp, #28
 8019630:	a905      	add	r1, sp, #20
 8019632:	f7fb fce3 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 8019636:	a807      	add	r0, sp, #28
 8019638:	f7fb fd23 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 801963c:	b920      	cbnz	r0, 8019648 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801963e:	6823      	ldr	r3, [r4, #0]
 8019640:	a907      	add	r1, sp, #28
 8019642:	4620      	mov	r0, r4
 8019644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019646:	4798      	blx	r3
 8019648:	f10a 0a01 	add.w	sl, sl, #1
 801964c:	fa1f fa8a 	uxth.w	sl, sl
 8019650:	e7e2      	b.n	8019618 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8019652:	f8d8 0000 	ldr.w	r0, [r8]
 8019656:	2101      	movs	r1, #1
 8019658:	6803      	ldr	r3, [r0, #0]
 801965a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801965e:	4798      	blx	r3
 8019660:	e7a8      	b.n	80195b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019662:	6a13      	ldr	r3, [r2, #32]
 8019664:	4798      	blx	r3
 8019666:	4b4b      	ldr	r3, [pc, #300]	; (8019794 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8019668:	781b      	ldrb	r3, [r3, #0]
 801966a:	2b00      	cmp	r3, #0
 801966c:	f43f af26 	beq.w	80194bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019670:	2300      	movs	r3, #0
 8019672:	883d      	ldrh	r5, [r7, #0]
 8019674:	34ea      	adds	r4, #234	; 0xea
 8019676:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801967a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801967e:	42ab      	cmp	r3, r5
 8019680:	f67f af1c 	bls.w	80194bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019684:	ab1a      	add	r3, sp, #104	; 0x68
 8019686:	4620      	mov	r0, r4
 8019688:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801968c:	3501      	adds	r5, #1
 801968e:	3b44      	subs	r3, #68	; 0x44
 8019690:	b2ad      	uxth	r5, r5
 8019692:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019696:	f7ff fb8b 	bl	8018db0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801969a:	e7ee      	b.n	801967a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801969c:	2b02      	cmp	r3, #2
 801969e:	f040 813d 	bne.w	801991c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 80196a2:	4b3d      	ldr	r3, [pc, #244]	; (8019798 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 80196a4:	781b      	ldrb	r3, [r3, #0]
 80196a6:	2b01      	cmp	r3, #1
 80196a8:	d02c      	beq.n	8019704 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 80196aa:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 80196ae:	883a      	ldrh	r2, [r7, #0]
 80196b0:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80196b4:	3201      	adds	r2, #1
 80196b6:	b292      	uxth	r2, r2
 80196b8:	2900      	cmp	r1, #0
 80196ba:	d0d4      	beq.n	8019666 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80196bc:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80196c0:	4610      	mov	r0, r2
 80196c2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80196c6:	f04f 0a00 	mov.w	sl, #0
 80196ca:	441d      	add	r5, r3
 80196cc:	b22d      	sxth	r5, r5
 80196ce:	b283      	uxth	r3, r0
 80196d0:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 80196d4:	4299      	cmp	r1, r3
 80196d6:	f240 80c3 	bls.w	8019860 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 80196da:	4426      	add	r6, r4
 80196dc:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 80196e0:	4684      	mov	ip, r0
 80196e2:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 80196e6:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 80196ea:	4573      	cmp	r3, lr
 80196ec:	f340 80a5 	ble.w	801983a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 80196f0:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 80196f4:	4475      	add	r5, lr
 80196f6:	b22d      	sxth	r5, r5
 80196f8:	429d      	cmp	r5, r3
 80196fa:	bfa8      	it	ge
 80196fc:	461d      	movge	r5, r3
 80196fe:	3001      	adds	r0, #1
 8019700:	46e2      	mov	sl, ip
 8019702:	e7e4      	b.n	80196ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8019704:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8019708:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801970c:	f1bb 0f00 	cmp.w	fp, #0
 8019710:	d0a9      	beq.n	8019666 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019712:	883b      	ldrh	r3, [r7, #0]
 8019714:	2600      	movs	r6, #0
 8019716:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801971a:	3301      	adds	r3, #1
 801971c:	b29b      	uxth	r3, r3
 801971e:	b299      	uxth	r1, r3
 8019720:	00f5      	lsls	r5, r6, #3
 8019722:	458b      	cmp	fp, r1
 8019724:	d93a      	bls.n	801979c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8019726:	4425      	add	r5, r4
 8019728:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801972c:	469c      	mov	ip, r3
 801972e:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8019732:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8019736:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801973a:	4408      	add	r0, r1
 801973c:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8019740:	4471      	add	r1, lr
 8019742:	b200      	sxth	r0, r0
 8019744:	b209      	sxth	r1, r1
 8019746:	4288      	cmp	r0, r1
 8019748:	da06      	bge.n	8019758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801974a:	4586      	cmp	lr, r0
 801974c:	4672      	mov	r2, lr
 801974e:	bfb8      	it	lt
 8019750:	4602      	movlt	r2, r0
 8019752:	3301      	adds	r3, #1
 8019754:	4666      	mov	r6, ip
 8019756:	e7e2      	b.n	801971e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8019758:	d10b      	bne.n	8019772 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801975a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801975e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8019762:	458c      	cmp	ip, r1
 8019764:	bfb4      	ite	lt
 8019766:	469c      	movlt	ip, r3
 8019768:	46b4      	movge	ip, r6
 801976a:	4572      	cmp	r2, lr
 801976c:	bfb8      	it	lt
 801976e:	4672      	movlt	r2, lr
 8019770:	e7ef      	b.n	8019752 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8019772:	428a      	cmp	r2, r1
 8019774:	46b4      	mov	ip, r6
 8019776:	bfb8      	it	lt
 8019778:	460a      	movlt	r2, r1
 801977a:	e7ea      	b.n	8019752 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801977c:	20056750 	.word	0x20056750
 8019780:	2005675c 	.word	0x2005675c
 8019784:	20000024 	.word	0x20000024
 8019788:	200566f8 	.word	0x200566f8
 801978c:	200566ee 	.word	0x200566ee
 8019790:	200566ec 	.word	0x200566ec
 8019794:	200566f6 	.word	0x200566f6
 8019798:	200566f0 	.word	0x200566f0
 801979c:	1961      	adds	r1, r4, r5
 801979e:	ab07      	add	r3, sp, #28
 80197a0:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80197a4:	6849      	ldr	r1, [r1, #4]
 80197a6:	c303      	stmia	r3!, {r0, r1}
 80197a8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80197ac:	a807      	add	r0, sp, #28
 80197ae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80197b2:	2b13      	cmp	r3, #19
 80197b4:	440b      	add	r3, r1
 80197b6:	bfd8      	it	le
 80197b8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80197bc:	1a9b      	subs	r3, r3, r2
 80197be:	f8ad 201c 	strh.w	r2, [sp, #28]
 80197c2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80197c6:	f7ff f90f 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80197ca:	a807      	add	r0, sp, #28
 80197cc:	f7fb fc59 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 80197d0:	2800      	cmp	r0, #0
 80197d2:	d199      	bne.n	8019708 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80197d4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80197d8:	4425      	add	r5, r4
 80197da:	f8d8 0000 	ldr.w	r0, [r8]
 80197de:	f1bc 0f14 	cmp.w	ip, #20
 80197e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80197e6:	f8d0 e000 	ldr.w	lr, [r0]
 80197ea:	bfa8      	it	ge
 80197ec:	f04f 0c14 	movge.w	ip, #20
 80197f0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80197f4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80197f8:	fa1f fc8c 	uxth.w	ip, ip
 80197fc:	f8cd c000 	str.w	ip, [sp]
 8019800:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 8019804:	47d0      	blx	sl
 8019806:	4682      	mov	sl, r0
 8019808:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801980c:	a807      	add	r0, sp, #28
 801980e:	f7ff f891 	bl	8018934 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019812:	6823      	ldr	r3, [r4, #0]
 8019814:	4620      	mov	r0, r4
 8019816:	a907      	add	r1, sp, #28
 8019818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801981a:	4798      	blx	r3
 801981c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8019820:	eba0 000a 	sub.w	r0, r0, sl
 8019824:	b200      	sxth	r0, r0
 8019826:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801982a:	2800      	cmp	r0, #0
 801982c:	f47f af6c 	bne.w	8019708 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019830:	b2b1      	uxth	r1, r6
 8019832:	4648      	mov	r0, r9
 8019834:	f7ff faa6 	bl	8018d84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019838:	e766      	b.n	8019708 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801983a:	d10c      	bne.n	8019856 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801983c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8019840:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8019844:	45b4      	cmp	ip, r6
 8019846:	bfb4      	ite	lt
 8019848:	4684      	movlt	ip, r0
 801984a:	46d4      	movge	ip, sl
 801984c:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8019850:	4433      	add	r3, r6
 8019852:	b21b      	sxth	r3, r3
 8019854:	e750      	b.n	80196f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8019856:	4575      	cmp	r5, lr
 8019858:	46d4      	mov	ip, sl
 801985a:	bfa8      	it	ge
 801985c:	4675      	movge	r5, lr
 801985e:	e74e      	b.n	80196fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8019860:	eb0b 0006 	add.w	r0, fp, r6
 8019864:	4426      	add	r6, r4
 8019866:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801986a:	f1b9 0f13 	cmp.w	r9, #19
 801986e:	bfdc      	itt	le
 8019870:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8019874:	444d      	addle	r5, r9
 8019876:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801987a:	bfd8      	it	le
 801987c:	b22d      	sxthle	r5, r5
 801987e:	f7fb fc00 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019882:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019886:	2800      	cmp	r0, #0
 8019888:	f47f af16 	bne.w	80196b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801988c:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8019890:	fa1f f989 	uxth.w	r9, r9
 8019894:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019898:	eba5 050c 	sub.w	r5, r5, ip
 801989c:	fa1f f28c 	uxth.w	r2, ip
 80198a0:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 80198a4:	eb02 0009 	add.w	r0, r2, r9
 80198a8:	2d14      	cmp	r5, #20
 80198aa:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 80198ae:	bfa8      	it	ge
 80198b0:	2514      	movge	r5, #20
 80198b2:	b200      	sxth	r0, r0
 80198b4:	f8ad 101c 	strh.w	r1, [sp, #28]
 80198b8:	b289      	uxth	r1, r1
 80198ba:	fa1f fe85 	uxth.w	lr, r5
 80198be:	eba0 000c 	sub.w	r0, r0, ip
 80198c2:	f8ad c01e 	strh.w	ip, [sp, #30]
 80198c6:	4586      	cmp	lr, r0
 80198c8:	f8d8 0000 	ldr.w	r0, [r8]
 80198cc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80198d0:	b29b      	uxth	r3, r3
 80198d2:	bfb8      	it	lt
 80198d4:	46f1      	movlt	r9, lr
 80198d6:	6805      	ldr	r5, [r0, #0]
 80198d8:	f8cd 9000 	str.w	r9, [sp]
 80198dc:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 80198e0:	47a8      	blx	r5
 80198e2:	6823      	ldr	r3, [r4, #0]
 80198e4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80198e8:	a907      	add	r1, sp, #28
 80198ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198ec:	4620      	mov	r0, r4
 80198ee:	4798      	blx	r3
 80198f0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80198f4:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 80198f8:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 80198fc:	1a5b      	subs	r3, r3, r1
 80198fe:	440a      	add	r2, r1
 8019900:	b21b      	sxth	r3, r3
 8019902:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8019906:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801990a:	2b00      	cmp	r3, #0
 801990c:	f47f aecf 	bne.w	80196ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8019910:	fa1f f18a 	uxth.w	r1, sl
 8019914:	4658      	mov	r0, fp
 8019916:	f7ff fa35 	bl	8018d84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801991a:	e6c8      	b.n	80196ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801991c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019920:	42ab      	cmp	r3, r5
 8019922:	f67f aea0 	bls.w	8019666 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019926:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801992a:	ab07      	add	r3, sp, #28
 801992c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019930:	6851      	ldr	r1, [r2, #4]
 8019932:	c303      	stmia	r3!, {r0, r1}
 8019934:	a807      	add	r0, sp, #28
 8019936:	f7fb fba4 	bl	8015082 <_ZNK8touchgfx4Rect7isEmptyEv>
 801993a:	b920      	cbnz	r0, 8019946 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801993c:	6823      	ldr	r3, [r4, #0]
 801993e:	a907      	add	r1, sp, #28
 8019940:	4620      	mov	r0, r4
 8019942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019944:	4798      	blx	r3
 8019946:	3501      	adds	r5, #1
 8019948:	b2ad      	uxth	r5, r5
 801994a:	e7e7      	b.n	801991c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801994c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801994c:	4b03      	ldr	r3, [pc, #12]	; (801995c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801994e:	2200      	movs	r2, #0
 8019950:	801a      	strh	r2, [r3, #0]
 8019952:	805a      	strh	r2, [r3, #2]
 8019954:	809a      	strh	r2, [r3, #4]
 8019956:	80da      	strh	r2, [r3, #6]
 8019958:	4770      	bx	lr
 801995a:	bf00      	nop
 801995c:	2005675c 	.word	0x2005675c

08019960 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019964:	b09b      	sub	sp, #108	; 0x6c
 8019966:	4606      	mov	r6, r0
 8019968:	4614      	mov	r4, r2
 801996a:	468a      	mov	sl, r1
 801996c:	a803      	add	r0, sp, #12
 801996e:	461d      	mov	r5, r3
 8019970:	f000 fe85 	bl	801a67e <_ZN8touchgfx12TextProviderC1Ev>
 8019974:	6833      	ldr	r3, [r6, #0]
 8019976:	4630      	mov	r0, r6
 8019978:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801997c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801997e:	4798      	blx	r3
 8019980:	6833      	ldr	r3, [r6, #0]
 8019982:	4607      	mov	r7, r0
 8019984:	4630      	mov	r0, r6
 8019986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019988:	4798      	blx	r3
 801998a:	462a      	mov	r2, r5
 801998c:	2500      	movs	r5, #0
 801998e:	4621      	mov	r1, r4
 8019990:	9000      	str	r0, [sp, #0]
 8019992:	463b      	mov	r3, r7
 8019994:	462c      	mov	r4, r5
 8019996:	46a9      	mov	r9, r5
 8019998:	46a8      	mov	r8, r5
 801999a:	a803      	add	r0, sp, #12
 801999c:	f000 febc 	bl	801a718 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80199a0:	2300      	movs	r3, #0
 80199a2:	9302      	str	r3, [sp, #8]
 80199a4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80199a8:	429c      	cmp	r4, r3
 80199aa:	d002      	beq.n	80199b2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80199ac:	455c      	cmp	r4, fp
 80199ae:	bf18      	it	ne
 80199b0:	4625      	movne	r5, r4
 80199b2:	ab02      	add	r3, sp, #8
 80199b4:	4632      	mov	r2, r6
 80199b6:	4651      	mov	r1, sl
 80199b8:	a803      	add	r0, sp, #12
 80199ba:	f001 f9a9 	bl	801ad10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80199be:	4604      	mov	r4, r0
 80199c0:	b108      	cbz	r0, 80199c6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80199c2:	280a      	cmp	r0, #10
 80199c4:	d10a      	bne.n	80199dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80199c6:	45c1      	cmp	r9, r8
 80199c8:	bf38      	it	cc
 80199ca:	46c1      	movcc	r9, r8
 80199cc:	f04f 0800 	mov.w	r8, #0
 80199d0:	2c00      	cmp	r4, #0
 80199d2:	d1e5      	bne.n	80199a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80199d4:	4648      	mov	r0, r9
 80199d6:	b01b      	add	sp, #108	; 0x6c
 80199d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199dc:	9a02      	ldr	r2, [sp, #8]
 80199de:	2a00      	cmp	r2, #0
 80199e0:	d0de      	beq.n	80199a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80199e2:	7b57      	ldrb	r7, [r2, #13]
 80199e4:	4629      	mov	r1, r5
 80199e6:	6833      	ldr	r3, [r6, #0]
 80199e8:	007f      	lsls	r7, r7, #1
 80199ea:	8894      	ldrh	r4, [r2, #4]
 80199ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199ee:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80199f2:	7a97      	ldrb	r7, [r2, #10]
 80199f4:	4307      	orrs	r7, r0
 80199f6:	4630      	mov	r0, r6
 80199f8:	4798      	blx	r3
 80199fa:	4438      	add	r0, r7
 80199fc:	4480      	add	r8, r0
 80199fe:	fa1f f888 	uxth.w	r8, r8
 8019a02:	e7e5      	b.n	80199d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08019a04 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019a04:	b508      	push	{r3, lr}
 8019a06:	6803      	ldr	r3, [r0, #0]
 8019a08:	68db      	ldr	r3, [r3, #12]
 8019a0a:	4798      	blx	r3
 8019a0c:	b128      	cbz	r0, 8019a1a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019a0e:	7b43      	ldrb	r3, [r0, #13]
 8019a10:	7a80      	ldrb	r0, [r0, #10]
 8019a12:	005b      	lsls	r3, r3, #1
 8019a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a18:	4318      	orrs	r0, r3
 8019a1a:	bd08      	pop	{r3, pc}

08019a1c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019a1c:	b40e      	push	{r1, r2, r3}
 8019a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a20:	b09c      	sub	sp, #112	; 0x70
 8019a22:	4605      	mov	r5, r0
 8019a24:	ab21      	add	r3, sp, #132	; 0x84
 8019a26:	a805      	add	r0, sp, #20
 8019a28:	f853 4b04 	ldr.w	r4, [r3], #4
 8019a2c:	9303      	str	r3, [sp, #12]
 8019a2e:	f000 fe26 	bl	801a67e <_ZN8touchgfx12TextProviderC1Ev>
 8019a32:	682b      	ldr	r3, [r5, #0]
 8019a34:	4628      	mov	r0, r5
 8019a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a38:	4798      	blx	r3
 8019a3a:	682b      	ldr	r3, [r5, #0]
 8019a3c:	4606      	mov	r6, r0
 8019a3e:	4628      	mov	r0, r5
 8019a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019a42:	4798      	blx	r3
 8019a44:	4633      	mov	r3, r6
 8019a46:	4621      	mov	r1, r4
 8019a48:	ae1c      	add	r6, sp, #112	; 0x70
 8019a4a:	2400      	movs	r4, #0
 8019a4c:	9000      	str	r0, [sp, #0]
 8019a4e:	9a03      	ldr	r2, [sp, #12]
 8019a50:	a805      	add	r0, sp, #20
 8019a52:	f000 fe61 	bl	801a718 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a56:	f846 4d60 	str.w	r4, [r6, #-96]!
 8019a5a:	462a      	mov	r2, r5
 8019a5c:	4633      	mov	r3, r6
 8019a5e:	4621      	mov	r1, r4
 8019a60:	a805      	add	r0, sp, #20
 8019a62:	f001 f955 	bl	801ad10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a66:	b300      	cbz	r0, 8019aaa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8019a68:	280a      	cmp	r0, #10
 8019a6a:	d01a      	beq.n	8019aa2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019a6c:	9f04      	ldr	r7, [sp, #16]
 8019a6e:	b1c7      	cbz	r7, 8019aa2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019a70:	7b78      	ldrb	r0, [r7, #13]
 8019a72:	7a3b      	ldrb	r3, [r7, #8]
 8019a74:	00c1      	lsls	r1, r0, #3
 8019a76:	88aa      	ldrh	r2, [r5, #4]
 8019a78:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019a7c:	4319      	orrs	r1, r3
 8019a7e:	0643      	lsls	r3, r0, #25
 8019a80:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019a84:	bf48      	it	mi
 8019a86:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019a8a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019a8e:	bf48      	it	mi
 8019a90:	b219      	sxthmi	r1, r3
 8019a92:	79fb      	ldrb	r3, [r7, #7]
 8019a94:	4303      	orrs	r3, r0
 8019a96:	4413      	add	r3, r2
 8019a98:	1a5b      	subs	r3, r3, r1
 8019a9a:	b29b      	uxth	r3, r3
 8019a9c:	42a3      	cmp	r3, r4
 8019a9e:	bfc8      	it	gt
 8019aa0:	b21c      	sxthgt	r4, r3
 8019aa2:	4633      	mov	r3, r6
 8019aa4:	462a      	mov	r2, r5
 8019aa6:	2100      	movs	r1, #0
 8019aa8:	e7da      	b.n	8019a60 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019aaa:	b2a0      	uxth	r0, r4
 8019aac:	b01c      	add	sp, #112	; 0x70
 8019aae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019ab2:	b003      	add	sp, #12
 8019ab4:	4770      	bx	lr

08019ab6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019ab6:	b40e      	push	{r1, r2, r3}
 8019ab8:	b570      	push	{r4, r5, r6, lr}
 8019aba:	b09b      	sub	sp, #108	; 0x6c
 8019abc:	4604      	mov	r4, r0
 8019abe:	ab1f      	add	r3, sp, #124	; 0x7c
 8019ac0:	a803      	add	r0, sp, #12
 8019ac2:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ac6:	9302      	str	r3, [sp, #8]
 8019ac8:	f000 fdd9 	bl	801a67e <_ZN8touchgfx12TextProviderC1Ev>
 8019acc:	6823      	ldr	r3, [r4, #0]
 8019ace:	4620      	mov	r0, r4
 8019ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ad2:	4798      	blx	r3
 8019ad4:	6823      	ldr	r3, [r4, #0]
 8019ad6:	4606      	mov	r6, r0
 8019ad8:	4620      	mov	r0, r4
 8019ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019adc:	2401      	movs	r4, #1
 8019ade:	4798      	blx	r3
 8019ae0:	4633      	mov	r3, r6
 8019ae2:	9000      	str	r0, [sp, #0]
 8019ae4:	4629      	mov	r1, r5
 8019ae6:	9a02      	ldr	r2, [sp, #8]
 8019ae8:	a803      	add	r0, sp, #12
 8019aea:	f000 fe15 	bl	801a718 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019aee:	a803      	add	r0, sp, #12
 8019af0:	f001 fa06 	bl	801af00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019af4:	b2a3      	uxth	r3, r4
 8019af6:	b138      	cbz	r0, 8019b08 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019af8:	280a      	cmp	r0, #10
 8019afa:	a803      	add	r0, sp, #12
 8019afc:	bf04      	itt	eq
 8019afe:	3301      	addeq	r3, #1
 8019b00:	b21c      	sxtheq	r4, r3
 8019b02:	f001 f9fd 	bl	801af00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019b06:	e7f5      	b.n	8019af4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019b08:	4618      	mov	r0, r3
 8019b0a:	b01b      	add	sp, #108	; 0x6c
 8019b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b10:	b003      	add	sp, #12
 8019b12:	4770      	bx	lr

08019b14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019b14:	b40e      	push	{r1, r2, r3}
 8019b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b18:	b09c      	sub	sp, #112	; 0x70
 8019b1a:	4604      	mov	r4, r0
 8019b1c:	ab21      	add	r3, sp, #132	; 0x84
 8019b1e:	a805      	add	r0, sp, #20
 8019b20:	f853 5b04 	ldr.w	r5, [r3], #4
 8019b24:	9303      	str	r3, [sp, #12]
 8019b26:	f000 fdaa 	bl	801a67e <_ZN8touchgfx12TextProviderC1Ev>
 8019b2a:	6823      	ldr	r3, [r4, #0]
 8019b2c:	4620      	mov	r0, r4
 8019b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b30:	4798      	blx	r3
 8019b32:	6823      	ldr	r3, [r4, #0]
 8019b34:	4606      	mov	r6, r0
 8019b36:	4620      	mov	r0, r4
 8019b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b3a:	4798      	blx	r3
 8019b3c:	4633      	mov	r3, r6
 8019b3e:	4629      	mov	r1, r5
 8019b40:	9000      	str	r0, [sp, #0]
 8019b42:	9a03      	ldr	r2, [sp, #12]
 8019b44:	a805      	add	r0, sp, #20
 8019b46:	f000 fde7 	bl	801a718 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019b4a:	ad1c      	add	r5, sp, #112	; 0x70
 8019b4c:	2100      	movs	r1, #0
 8019b4e:	26ff      	movs	r6, #255	; 0xff
 8019b50:	4622      	mov	r2, r4
 8019b52:	a805      	add	r0, sp, #20
 8019b54:	f845 1d60 	str.w	r1, [r5, #-96]!
 8019b58:	462b      	mov	r3, r5
 8019b5a:	f001 f8d9 	bl	801ad10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b5e:	b1d8      	cbz	r0, 8019b98 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8019b60:	280a      	cmp	r0, #10
 8019b62:	d012      	beq.n	8019b8a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019b64:	9804      	ldr	r0, [sp, #16]
 8019b66:	b180      	cbz	r0, 8019b8a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019b68:	7b47      	ldrb	r7, [r0, #13]
 8019b6a:	7922      	ldrb	r2, [r4, #4]
 8019b6c:	00fb      	lsls	r3, r7, #3
 8019b6e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019b72:	7a03      	ldrb	r3, [r0, #8]
 8019b74:	430b      	orrs	r3, r1
 8019b76:	0679      	lsls	r1, r7, #25
 8019b78:	bf44      	itt	mi
 8019b7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019b7e:	b21b      	sxthmi	r3, r3
 8019b80:	1ad3      	subs	r3, r2, r3
 8019b82:	b2db      	uxtb	r3, r3
 8019b84:	429e      	cmp	r6, r3
 8019b86:	bf28      	it	cs
 8019b88:	461e      	movcs	r6, r3
 8019b8a:	462b      	mov	r3, r5
 8019b8c:	4622      	mov	r2, r4
 8019b8e:	2100      	movs	r1, #0
 8019b90:	a805      	add	r0, sp, #20
 8019b92:	f001 f8bd 	bl	801ad10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b96:	e7e2      	b.n	8019b5e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8019b98:	4630      	mov	r0, r6
 8019b9a:	b01c      	add	sp, #112	; 0x70
 8019b9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019ba0:	b003      	add	sp, #12
 8019ba2:	4770      	bx	lr

08019ba4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019ba4:	b513      	push	{r0, r1, r4, lr}
 8019ba6:	1d01      	adds	r1, r0, #4
 8019ba8:	4603      	mov	r3, r0
 8019baa:	466a      	mov	r2, sp
 8019bac:	c903      	ldmia	r1, {r0, r1}
 8019bae:	e882 0003 	stmia.w	r2, {r0, r1}
 8019bb2:	2100      	movs	r1, #0
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	9100      	str	r1, [sp, #0]
 8019bb8:	6819      	ldr	r1, [r3, #0]
 8019bba:	690c      	ldr	r4, [r1, #16]
 8019bbc:	4611      	mov	r1, r2
 8019bbe:	47a0      	blx	r4
 8019bc0:	b002      	add	sp, #8
 8019bc2:	bd10      	pop	{r4, pc}

08019bc4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019bc4:	b538      	push	{r3, r4, r5, lr}
 8019bc6:	680b      	ldr	r3, [r1, #0]
 8019bc8:	460c      	mov	r4, r1
 8019bca:	4605      	mov	r5, r0
 8019bcc:	68db      	ldr	r3, [r3, #12]
 8019bce:	4798      	blx	r3
 8019bd0:	6823      	ldr	r3, [r4, #0]
 8019bd2:	4620      	mov	r0, r4
 8019bd4:	4629      	mov	r1, r5
 8019bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bd8:	4798      	blx	r3
 8019bda:	4628      	mov	r0, r5
 8019bdc:	bd38      	pop	{r3, r4, r5, pc}

08019bde <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019bde:	b410      	push	{r4}
 8019be0:	880a      	ldrh	r2, [r1, #0]
 8019be2:	8884      	ldrh	r4, [r0, #4]
 8019be4:	4422      	add	r2, r4
 8019be6:	800a      	strh	r2, [r1, #0]
 8019be8:	884a      	ldrh	r2, [r1, #2]
 8019bea:	88c4      	ldrh	r4, [r0, #6]
 8019bec:	4422      	add	r2, r4
 8019bee:	804a      	strh	r2, [r1, #2]
 8019bf0:	6940      	ldr	r0, [r0, #20]
 8019bf2:	b120      	cbz	r0, 8019bfe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019bf4:	6803      	ldr	r3, [r0, #0]
 8019bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bfc:	4718      	bx	r3
 8019bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c02:	4770      	bx	lr

08019c04 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c06:	460b      	mov	r3, r1
 8019c08:	b085      	sub	sp, #20
 8019c0a:	4604      	mov	r4, r0
 8019c0c:	b901      	cbnz	r1, 8019c10 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019c0e:	b322      	cbz	r2, 8019c5a <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 8019c10:	1d27      	adds	r7, r4, #4
 8019c12:	466e      	mov	r6, sp
 8019c14:	88e5      	ldrh	r5, [r4, #6]
 8019c16:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019c1a:	442a      	add	r2, r5
 8019c1c:	e886 0003 	stmia.w	r6, {r0, r1}
 8019c20:	88a1      	ldrh	r1, [r4, #4]
 8019c22:	4620      	mov	r0, r4
 8019c24:	b215      	sxth	r5, r2
 8019c26:	4419      	add	r1, r3
 8019c28:	6823      	ldr	r3, [r4, #0]
 8019c2a:	b209      	sxth	r1, r1
 8019c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c2e:	4798      	blx	r3
 8019c30:	6823      	ldr	r3, [r4, #0]
 8019c32:	4629      	mov	r1, r5
 8019c34:	4620      	mov	r0, r4
 8019c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c38:	ad02      	add	r5, sp, #8
 8019c3a:	4798      	blx	r3
 8019c3c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019c40:	e885 0003 	stmia.w	r5, {r0, r1}
 8019c44:	6960      	ldr	r0, [r4, #20]
 8019c46:	b150      	cbz	r0, 8019c5e <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8019c48:	6803      	ldr	r3, [r0, #0]
 8019c4a:	4631      	mov	r1, r6
 8019c4c:	691b      	ldr	r3, [r3, #16]
 8019c4e:	4798      	blx	r3
 8019c50:	6960      	ldr	r0, [r4, #20]
 8019c52:	6803      	ldr	r3, [r0, #0]
 8019c54:	691b      	ldr	r3, [r3, #16]
 8019c56:	4629      	mov	r1, r5
 8019c58:	4798      	blx	r3
 8019c5a:	b005      	add	sp, #20
 8019c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c5e:	f7ff f82b 	bl	8018cb8 <_ZN8touchgfx11Application11getInstanceEv>
 8019c62:	6803      	ldr	r3, [r0, #0]
 8019c64:	4631      	mov	r1, r6
 8019c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c68:	4798      	blx	r3
 8019c6a:	f7ff f825 	bl	8018cb8 <_ZN8touchgfx11Application11getInstanceEv>
 8019c6e:	6803      	ldr	r3, [r0, #0]
 8019c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c72:	e7f0      	b.n	8019c56 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08019c74 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c76:	8882      	ldrh	r2, [r0, #4]
 8019c78:	4605      	mov	r5, r0
 8019c7a:	880b      	ldrh	r3, [r1, #0]
 8019c7c:	460c      	mov	r4, r1
 8019c7e:	4413      	add	r3, r2
 8019c80:	800b      	strh	r3, [r1, #0]
 8019c82:	884b      	ldrh	r3, [r1, #2]
 8019c84:	88c2      	ldrh	r2, [r0, #6]
 8019c86:	4413      	add	r3, r2
 8019c88:	4602      	mov	r2, r0
 8019c8a:	804b      	strh	r3, [r1, #2]
 8019c8c:	466b      	mov	r3, sp
 8019c8e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019c92:	6851      	ldr	r1, [r2, #4]
 8019c94:	c303      	stmia	r3!, {r0, r1}
 8019c96:	4621      	mov	r1, r4
 8019c98:	4668      	mov	r0, sp
 8019c9a:	f7fb f9af 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 8019c9e:	466b      	mov	r3, sp
 8019ca0:	cb03      	ldmia	r3!, {r0, r1}
 8019ca2:	6020      	str	r0, [r4, #0]
 8019ca4:	6061      	str	r1, [r4, #4]
 8019ca6:	6968      	ldr	r0, [r5, #20]
 8019ca8:	b128      	cbz	r0, 8019cb6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019caa:	6803      	ldr	r3, [r0, #0]
 8019cac:	691b      	ldr	r3, [r3, #16]
 8019cae:	4621      	mov	r1, r4
 8019cb0:	4798      	blx	r3
 8019cb2:	b003      	add	sp, #12
 8019cb4:	bd30      	pop	{r4, r5, pc}
 8019cb6:	f7fe ffff 	bl	8018cb8 <_ZN8touchgfx11Application11getInstanceEv>
 8019cba:	6803      	ldr	r3, [r0, #0]
 8019cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cbe:	e7f6      	b.n	8019cae <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019cc0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019cc0:	b570      	push	{r4, r5, r6, lr}
 8019cc2:	8882      	ldrh	r2, [r0, #4]
 8019cc4:	460c      	mov	r4, r1
 8019cc6:	880b      	ldrh	r3, [r1, #0]
 8019cc8:	4605      	mov	r5, r0
 8019cca:	4413      	add	r3, r2
 8019ccc:	800b      	strh	r3, [r1, #0]
 8019cce:	884b      	ldrh	r3, [r1, #2]
 8019cd0:	88c2      	ldrh	r2, [r0, #6]
 8019cd2:	4413      	add	r3, r2
 8019cd4:	804b      	strh	r3, [r1, #2]
 8019cd6:	1d01      	adds	r1, r0, #4
 8019cd8:	4620      	mov	r0, r4
 8019cda:	f7fb f98f 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 8019cde:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	dd0b      	ble.n	8019cfe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019ce6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	dd07      	ble.n	8019cfe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019cee:	6968      	ldr	r0, [r5, #20]
 8019cf0:	b128      	cbz	r0, 8019cfe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019cf2:	6803      	ldr	r3, [r0, #0]
 8019cf4:	4621      	mov	r1, r4
 8019cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cfc:	4718      	bx	r3
 8019cfe:	bd70      	pop	{r4, r5, r6, pc}

08019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019d00:	b510      	push	{r4, lr}
 8019d02:	2300      	movs	r3, #0
 8019d04:	4604      	mov	r4, r0
 8019d06:	4608      	mov	r0, r1
 8019d08:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019d0c:	8023      	strh	r3, [r4, #0]
 8019d0e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019d12:	8063      	strh	r3, [r4, #2]
 8019d14:	6803      	ldr	r3, [r0, #0]
 8019d16:	80a1      	strh	r1, [r4, #4]
 8019d18:	4621      	mov	r1, r4
 8019d1a:	80e2      	strh	r2, [r4, #6]
 8019d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d1e:	4798      	blx	r3
 8019d20:	4620      	mov	r0, r4
 8019d22:	bd10      	pop	{r4, pc}

08019d24 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019d24:	b530      	push	{r4, r5, lr}
 8019d26:	8083      	strh	r3, [r0, #4]
 8019d28:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019d2c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019d30:	7183      	strb	r3, [r0, #6]
 8019d32:	79c3      	ldrb	r3, [r0, #7]
 8019d34:	6101      	str	r1, [r0, #16]
 8019d36:	f365 0306 	bfi	r3, r5, #0, #7
 8019d3a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019d3e:	8282      	strh	r2, [r0, #20]
 8019d40:	f365 13c7 	bfi	r3, r5, #7, #1
 8019d44:	71c3      	strb	r3, [r0, #7]
 8019d46:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019d4a:	7203      	strb	r3, [r0, #8]
 8019d4c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019d50:	7243      	strb	r3, [r0, #9]
 8019d52:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019d56:	8143      	strh	r3, [r0, #10]
 8019d58:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019d5c:	8183      	strh	r3, [r0, #12]
 8019d5e:	4b01      	ldr	r3, [pc, #4]	; (8019d64 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019d60:	6003      	str	r3, [r0, #0]
 8019d62:	bd30      	pop	{r4, r5, pc}
 8019d64:	0802d320 	.word	0x0802d320

08019d68 <_ZNK8touchgfx9ConstFont4findEt>:
 8019d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d6a:	6904      	ldr	r4, [r0, #16]
 8019d6c:	b3bc      	cbz	r4, 8019dde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d6e:	88a3      	ldrh	r3, [r4, #4]
 8019d70:	8a82      	ldrh	r2, [r0, #20]
 8019d72:	1acb      	subs	r3, r1, r3
 8019d74:	f102 32ff 	add.w	r2, r2, #4294967295
 8019d78:	d431      	bmi.n	8019dde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d7a:	4293      	cmp	r3, r2
 8019d7c:	dd0c      	ble.n	8019d98 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019d7e:	230e      	movs	r3, #14
 8019d80:	fb03 4302 	mla	r3, r3, r2, r4
 8019d84:	889b      	ldrh	r3, [r3, #4]
 8019d86:	1a5b      	subs	r3, r3, r1
 8019d88:	1ad3      	subs	r3, r2, r3
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	db27      	blt.n	8019dde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	bfbc      	itt	lt
 8019d92:	2302      	movlt	r3, #2
 8019d94:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019d98:	2500      	movs	r5, #0
 8019d9a:	260e      	movs	r6, #14
 8019d9c:	4295      	cmp	r5, r2
 8019d9e:	dc1e      	bgt.n	8019dde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019da0:	fb06 4003 	mla	r0, r6, r3, r4
 8019da4:	8887      	ldrh	r7, [r0, #4]
 8019da6:	42b9      	cmp	r1, r7
 8019da8:	d01a      	beq.n	8019de0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019daa:	d20d      	bcs.n	8019dc8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019dac:	1e5a      	subs	r2, r3, #1
 8019dae:	4295      	cmp	r5, r2
 8019db0:	dc15      	bgt.n	8019dde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019db2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019db6:	1a5b      	subs	r3, r3, r1
 8019db8:	1ad3      	subs	r3, r2, r3
 8019dba:	429a      	cmp	r2, r3
 8019dbc:	db0f      	blt.n	8019dde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019dbe:	429d      	cmp	r5, r3
 8019dc0:	ddec      	ble.n	8019d9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019dc2:	1953      	adds	r3, r2, r5
 8019dc4:	105b      	asrs	r3, r3, #1
 8019dc6:	e7e9      	b.n	8019d9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019dc8:	1c5d      	adds	r5, r3, #1
 8019dca:	42aa      	cmp	r2, r5
 8019dcc:	db07      	blt.n	8019dde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019dce:	8a43      	ldrh	r3, [r0, #18]
 8019dd0:	1acb      	subs	r3, r1, r3
 8019dd2:	442b      	add	r3, r5
 8019dd4:	429d      	cmp	r5, r3
 8019dd6:	dc02      	bgt.n	8019dde <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019dd8:	429a      	cmp	r2, r3
 8019dda:	dadf      	bge.n	8019d9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019ddc:	e7f1      	b.n	8019dc2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019dde:	2000      	movs	r0, #0
 8019de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019de2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019de4:	4604      	mov	r4, r0
 8019de6:	4617      	mov	r7, r2
 8019de8:	461e      	mov	r6, r3
 8019dea:	b911      	cbnz	r1, 8019df2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019dec:	2500      	movs	r5, #0
 8019dee:	4628      	mov	r0, r5
 8019df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019df2:	290a      	cmp	r1, #10
 8019df4:	d0fa      	beq.n	8019dec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019df6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019dfa:	4291      	cmp	r1, r2
 8019dfc:	d0f6      	beq.n	8019dec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019dfe:	f242 020b 	movw	r2, #8203	; 0x200b
 8019e02:	4291      	cmp	r1, r2
 8019e04:	d0f2      	beq.n	8019dec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e06:	f7ff ffaf 	bl	8019d68 <_ZNK8touchgfx9ConstFont4findEt>
 8019e0a:	4605      	mov	r5, r0
 8019e0c:	b950      	cbnz	r0, 8019e24 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019e0e:	6823      	ldr	r3, [r4, #0]
 8019e10:	4620      	mov	r0, r4
 8019e12:	691b      	ldr	r3, [r3, #16]
 8019e14:	4798      	blx	r3
 8019e16:	4601      	mov	r1, r0
 8019e18:	4620      	mov	r0, r4
 8019e1a:	f7ff ffa5 	bl	8019d68 <_ZNK8touchgfx9ConstFont4findEt>
 8019e1e:	4605      	mov	r5, r0
 8019e20:	2800      	cmp	r0, #0
 8019e22:	d0e3      	beq.n	8019dec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e24:	6823      	ldr	r3, [r4, #0]
 8019e26:	4629      	mov	r1, r5
 8019e28:	4620      	mov	r0, r4
 8019e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019e2c:	4798      	blx	r3
 8019e2e:	6038      	str	r0, [r7, #0]
 8019e30:	6823      	ldr	r3, [r4, #0]
 8019e32:	4620      	mov	r0, r4
 8019e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e36:	4798      	blx	r3
 8019e38:	7030      	strb	r0, [r6, #0]
 8019e3a:	e7d8      	b.n	8019dee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019e3c <_ZN8touchgfx6memsetEPvhm>:
 8019e3c:	4402      	add	r2, r0
 8019e3e:	4290      	cmp	r0, r2
 8019e40:	d002      	beq.n	8019e48 <_ZN8touchgfx6memsetEPvhm+0xc>
 8019e42:	f800 1b01 	strb.w	r1, [r0], #1
 8019e46:	e7fa      	b.n	8019e3e <_ZN8touchgfx6memsetEPvhm+0x2>
 8019e48:	4770      	bx	lr

08019e4a <_ZN8touchgfx4clzuEm>:
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	b1c8      	cbz	r0, 8019e82 <_ZN8touchgfx4clzuEm+0x38>
 8019e4e:	0c02      	lsrs	r2, r0, #16
 8019e50:	0412      	lsls	r2, r2, #16
 8019e52:	b9a2      	cbnz	r2, 8019e7e <_ZN8touchgfx4clzuEm+0x34>
 8019e54:	0403      	lsls	r3, r0, #16
 8019e56:	2010      	movs	r0, #16
 8019e58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019e5c:	bf04      	itt	eq
 8019e5e:	021b      	lsleq	r3, r3, #8
 8019e60:	3008      	addeq	r0, #8
 8019e62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019e66:	bf04      	itt	eq
 8019e68:	011b      	lsleq	r3, r3, #4
 8019e6a:	3004      	addeq	r0, #4
 8019e6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019e70:	bf04      	itt	eq
 8019e72:	009b      	lsleq	r3, r3, #2
 8019e74:	3002      	addeq	r0, #2
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	db04      	blt.n	8019e84 <_ZN8touchgfx4clzuEm+0x3a>
 8019e7a:	3001      	adds	r0, #1
 8019e7c:	4770      	bx	lr
 8019e7e:	2000      	movs	r0, #0
 8019e80:	e7ea      	b.n	8019e58 <_ZN8touchgfx4clzuEm+0xe>
 8019e82:	2020      	movs	r0, #32
 8019e84:	4770      	bx	lr

08019e86 <_ZN8touchgfx7muldivuEmmmRm>:
 8019e86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e8a:	4680      	mov	r8, r0
 8019e8c:	460f      	mov	r7, r1
 8019e8e:	4615      	mov	r5, r2
 8019e90:	461e      	mov	r6, r3
 8019e92:	f7ff ffda 	bl	8019e4a <_ZN8touchgfx4clzuEm>
 8019e96:	b998      	cbnz	r0, 8019ec0 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8019e98:	4608      	mov	r0, r1
 8019e9a:	f7ff ffd6 	bl	8019e4a <_ZN8touchgfx4clzuEm>
 8019e9e:	2800      	cmp	r0, #0
 8019ea0:	dd08      	ble.n	8019eb4 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8019ea2:	4633      	mov	r3, r6
 8019ea4:	462a      	mov	r2, r5
 8019ea6:	4641      	mov	r1, r8
 8019ea8:	4638      	mov	r0, r7
 8019eaa:	f7ff ffec 	bl	8019e86 <_ZN8touchgfx7muldivuEmmmRm>
 8019eae:	b003      	add	sp, #12
 8019eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8019eb8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019ebc:	6033      	str	r3, [r6, #0]
 8019ebe:	e7f6      	b.n	8019eae <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8019ec0:	fa31 f900 	lsrs.w	r9, r1, r0
 8019ec4:	fb01 f308 	mul.w	r3, r1, r8
 8019ec8:	d105      	bne.n	8019ed6 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8019eca:	fbb3 f0f5 	udiv	r0, r3, r5
 8019ece:	fb05 3510 	mls	r5, r5, r0, r3
 8019ed2:	6035      	str	r5, [r6, #0]
 8019ed4:	e7eb      	b.n	8019eae <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8019ed6:	2301      	movs	r3, #1
 8019ed8:	fa08 fb00 	lsl.w	fp, r8, r0
 8019edc:	462a      	mov	r2, r5
 8019ede:	4641      	mov	r1, r8
 8019ee0:	fa03 f000 	lsl.w	r0, r3, r0
 8019ee4:	4633      	mov	r3, r6
 8019ee6:	fbbb faf5 	udiv	sl, fp, r5
 8019eea:	3801      	subs	r0, #1
 8019eec:	fb09 f40a 	mul.w	r4, r9, sl
 8019ef0:	4038      	ands	r0, r7
 8019ef2:	f7ff ffc8 	bl	8019e86 <_ZN8touchgfx7muldivuEmmmRm>
 8019ef6:	462a      	mov	r2, r5
 8019ef8:	4607      	mov	r7, r0
 8019efa:	ab01      	add	r3, sp, #4
 8019efc:	fb05 b11a 	mls	r1, r5, sl, fp
 8019f00:	4648      	mov	r0, r9
 8019f02:	f7ff ffc0 	bl	8019e86 <_ZN8touchgfx7muldivuEmmmRm>
 8019f06:	9b01      	ldr	r3, [sp, #4]
 8019f08:	6832      	ldr	r2, [r6, #0]
 8019f0a:	441a      	add	r2, r3
 8019f0c:	fbb2 f3f5 	udiv	r3, r2, r5
 8019f10:	441c      	add	r4, r3
 8019f12:	fb05 2513 	mls	r5, r5, r3, r2
 8019f16:	443c      	add	r4, r7
 8019f18:	4420      	add	r0, r4
 8019f1a:	e7da      	b.n	8019ed2 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08019f1c <_ZN8touchgfx6muldivElllRl>:
 8019f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019f1e:	2800      	cmp	r0, #0
 8019f20:	461e      	mov	r6, r3
 8019f22:	bfba      	itte	lt
 8019f24:	4240      	neglt	r0, r0
 8019f26:	f04f 34ff 	movlt.w	r4, #4294967295
 8019f2a:	2401      	movge	r4, #1
 8019f2c:	2900      	cmp	r1, #0
 8019f2e:	bfbc      	itt	lt
 8019f30:	4249      	neglt	r1, r1
 8019f32:	4264      	neglt	r4, r4
 8019f34:	2a00      	cmp	r2, #0
 8019f36:	bfb6      	itet	lt
 8019f38:	4265      	neglt	r5, r4
 8019f3a:	4625      	movge	r5, r4
 8019f3c:	4252      	neglt	r2, r2
 8019f3e:	4288      	cmp	r0, r1
 8019f40:	bfc2      	ittt	gt
 8019f42:	4603      	movgt	r3, r0
 8019f44:	4608      	movgt	r0, r1
 8019f46:	4619      	movgt	r1, r3
 8019f48:	ab01      	add	r3, sp, #4
 8019f4a:	f7ff ff9c 	bl	8019e86 <_ZN8touchgfx7muldivuEmmmRm>
 8019f4e:	9b01      	ldr	r3, [sp, #4]
 8019f50:	4368      	muls	r0, r5
 8019f52:	435c      	muls	r4, r3
 8019f54:	6034      	str	r4, [r6, #0]
 8019f56:	b002      	add	sp, #8
 8019f58:	bd70      	pop	{r4, r5, r6, pc}

08019f5a <_ZN8touchgfx6muldivElll>:
 8019f5a:	b513      	push	{r0, r1, r4, lr}
 8019f5c:	4614      	mov	r4, r2
 8019f5e:	ab01      	add	r3, sp, #4
 8019f60:	f7ff ffdc 	bl	8019f1c <_ZN8touchgfx6muldivElllRl>
 8019f64:	2800      	cmp	r0, #0
 8019f66:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 8019f6a:	9b01      	ldr	r3, [sp, #4]
 8019f6c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8019f70:	db0a      	blt.n	8019f88 <_ZN8touchgfx6muldivElll+0x2e>
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	f102 0201 	add.w	r2, r2, #1
 8019f78:	bfb8      	it	lt
 8019f7a:	425b      	neglt	r3, r3
 8019f7c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8019f80:	db00      	blt.n	8019f84 <_ZN8touchgfx6muldivElll+0x2a>
 8019f82:	3001      	adds	r0, #1
 8019f84:	b002      	add	sp, #8
 8019f86:	bd10      	pop	{r4, pc}
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	bfb8      	it	lt
 8019f8c:	425b      	neglt	r3, r3
 8019f8e:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8019f92:	bfc8      	it	gt
 8019f94:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8019f98:	e7f4      	b.n	8019f84 <_ZN8touchgfx6muldivElll+0x2a>

08019f9a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019f9a:	2000      	movs	r0, #0
 8019f9c:	4770      	bx	lr

08019f9e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019f9e:	2001      	movs	r0, #1
 8019fa0:	4770      	bx	lr

08019fa2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019fa2:	2002      	movs	r0, #2
 8019fa4:	4770      	bx	lr

08019fa6 <_ZN8touchgfx12GestureEventD1Ev>:
 8019fa6:	4770      	bx	lr

08019fa8 <_ZN8touchgfx9DragEventD1Ev>:
 8019fa8:	4770      	bx	lr

08019faa <_ZN8touchgfx10ClickEventD1Ev>:
 8019faa:	4770      	bx	lr

08019fac <_ZN8touchgfx10ClickEventD0Ev>:
 8019fac:	b510      	push	{r4, lr}
 8019fae:	4604      	mov	r4, r0
 8019fb0:	210c      	movs	r1, #12
 8019fb2:	f00b fe50 	bl	8025c56 <_ZdlPvj>
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	bd10      	pop	{r4, pc}

08019fba <_ZN8touchgfx9DragEventD0Ev>:
 8019fba:	b510      	push	{r4, lr}
 8019fbc:	4604      	mov	r4, r0
 8019fbe:	2110      	movs	r1, #16
 8019fc0:	f00b fe49 	bl	8025c56 <_ZdlPvj>
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	bd10      	pop	{r4, pc}

08019fc8 <_ZN8touchgfx12GestureEventD0Ev>:
 8019fc8:	b510      	push	{r4, lr}
 8019fca:	4604      	mov	r4, r0
 8019fcc:	210c      	movs	r1, #12
 8019fce:	f00b fe42 	bl	8025c56 <_ZdlPvj>
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	bd10      	pop	{r4, pc}
	...

08019fd8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019fd8:	b530      	push	{r4, r5, lr}
 8019fda:	460d      	mov	r5, r1
 8019fdc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019fde:	b087      	sub	sp, #28
 8019fe0:	4604      	mov	r4, r0
 8019fe2:	b301      	cbz	r1, 801a026 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019fe4:	a801      	add	r0, sp, #4
 8019fe6:	f7ff fe8b 	bl	8019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fea:	892a      	ldrh	r2, [r5, #8]
 8019fec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019ff0:	7928      	ldrb	r0, [r5, #4]
 8019ff2:	1ad2      	subs	r2, r2, r3
 8019ff4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019ff6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019ffa:	441a      	add	r2, r3
 8019ffc:	896b      	ldrh	r3, [r5, #10]
 8019ffe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a002:	f88d 0010 	strb.w	r0, [sp, #16]
 801a006:	1b5b      	subs	r3, r3, r5
 801a008:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a00a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a00c:	442b      	add	r3, r5
 801a00e:	4d07      	ldr	r5, [pc, #28]	; (801a02c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a010:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a014:	a903      	add	r1, sp, #12
 801a016:	9503      	str	r5, [sp, #12]
 801a018:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a01c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a020:	6803      	ldr	r3, [r0, #0]
 801a022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a024:	4798      	blx	r3
 801a026:	b007      	add	sp, #28
 801a028:	bd30      	pop	{r4, r5, pc}
 801a02a:	bf00      	nop
 801a02c:	0802d3a0 	.word	0x0802d3a0

0801a030 <_ZNK8touchgfx4Rect9intersectEss>:
 801a030:	b510      	push	{r4, lr}
 801a032:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a036:	428b      	cmp	r3, r1
 801a038:	dc10      	bgt.n	801a05c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a03a:	8884      	ldrh	r4, [r0, #4]
 801a03c:	4423      	add	r3, r4
 801a03e:	b21b      	sxth	r3, r3
 801a040:	4299      	cmp	r1, r3
 801a042:	da0b      	bge.n	801a05c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a044:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a048:	4293      	cmp	r3, r2
 801a04a:	dc07      	bgt.n	801a05c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a04c:	88c0      	ldrh	r0, [r0, #6]
 801a04e:	4418      	add	r0, r3
 801a050:	b200      	sxth	r0, r0
 801a052:	4282      	cmp	r2, r0
 801a054:	bfac      	ite	ge
 801a056:	2000      	movge	r0, #0
 801a058:	2001      	movlt	r0, #1
 801a05a:	bd10      	pop	{r4, pc}
 801a05c:	2000      	movs	r0, #0
 801a05e:	e7fc      	b.n	801a05a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801a060 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a060:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a062:	460c      	mov	r4, r1
 801a064:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a066:	b089      	sub	sp, #36	; 0x24
 801a068:	4605      	mov	r5, r0
 801a06a:	2900      	cmp	r1, #0
 801a06c:	d054      	beq.n	801a118 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801a06e:	4668      	mov	r0, sp
 801a070:	f7ff fe46 	bl	8019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a074:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801a076:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801a078:	4668      	mov	r0, sp
 801a07a:	8922      	ldrh	r2, [r4, #8]
 801a07c:	88e1      	ldrh	r1, [r4, #6]
 801a07e:	443a      	add	r2, r7
 801a080:	4431      	add	r1, r6
 801a082:	b212      	sxth	r2, r2
 801a084:	b209      	sxth	r1, r1
 801a086:	f7ff ffd3 	bl	801a030 <_ZNK8touchgfx4Rect9intersectEss>
 801a08a:	b1d0      	cbz	r0, 801a0c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a08c:	89a2      	ldrh	r2, [r4, #12]
 801a08e:	4668      	mov	r0, sp
 801a090:	8961      	ldrh	r1, [r4, #10]
 801a092:	443a      	add	r2, r7
 801a094:	4431      	add	r1, r6
 801a096:	b212      	sxth	r2, r2
 801a098:	b209      	sxth	r1, r1
 801a09a:	f7ff ffc9 	bl	801a030 <_ZNK8touchgfx4Rect9intersectEss>
 801a09e:	4603      	mov	r3, r0
 801a0a0:	b978      	cbnz	r0, 801a0c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a0a2:	4a1e      	ldr	r2, [pc, #120]	; (801a11c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a0a4:	a904      	add	r1, sp, #16
 801a0a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a0a8:	9204      	str	r2, [sp, #16]
 801a0aa:	2202      	movs	r2, #2
 801a0ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a0b0:	f88d 2014 	strb.w	r2, [sp, #20]
 801a0b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a0b8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a0bc:	6803      	ldr	r3, [r0, #0]
 801a0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0c0:	4798      	blx	r3
 801a0c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a0c4:	a802      	add	r0, sp, #8
 801a0c6:	f7ff fe1b 	bl	8019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0ca:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a0ce:	88e0      	ldrh	r0, [r4, #6]
 801a0d0:	8961      	ldrh	r1, [r4, #10]
 801a0d2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a0d6:	1a80      	subs	r0, r0, r2
 801a0d8:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801a0dc:	1a89      	subs	r1, r1, r2
 801a0de:	8923      	ldrh	r3, [r4, #8]
 801a0e0:	4460      	add	r0, ip
 801a0e2:	89a2      	ldrh	r2, [r4, #12]
 801a0e4:	4461      	add	r1, ip
 801a0e6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a0e8:	eba3 030e 	sub.w	r3, r3, lr
 801a0ec:	eba2 020e 	sub.w	r2, r2, lr
 801a0f0:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a0f4:	7927      	ldrb	r7, [r4, #4]
 801a0f6:	4433      	add	r3, r6
 801a0f8:	4432      	add	r2, r6
 801a0fa:	4c09      	ldr	r4, [pc, #36]	; (801a120 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a0fc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a0fe:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a102:	a904      	add	r1, sp, #16
 801a104:	9404      	str	r4, [sp, #16]
 801a106:	f88d 7014 	strb.w	r7, [sp, #20]
 801a10a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a10e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a112:	6803      	ldr	r3, [r0, #0]
 801a114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a116:	4798      	blx	r3
 801a118:	b009      	add	sp, #36	; 0x24
 801a11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a11c:	0802d378 	.word	0x0802d378
 801a120:	0802d38c 	.word	0x0802d38c

0801a124 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a128:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801a12c:	b0a1      	sub	sp, #132	; 0x84
 801a12e:	4604      	mov	r4, r0
 801a130:	460d      	mov	r5, r1
 801a132:	790b      	ldrb	r3, [r1, #4]
 801a134:	f1b9 0f00 	cmp.w	r9, #0
 801a138:	d00f      	beq.n	801a15a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	f040 80a2 	bne.w	801a284 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a140:	b021      	add	sp, #132	; 0x84
 801a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a146:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a14a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a14e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a152:	1d20      	adds	r0, r4, #4
 801a154:	f7fa fea0 	bl	8014e98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a158:	e094      	b.n	801a284 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d1f0      	bne.n	801a140 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a15e:	4b5f      	ldr	r3, [pc, #380]	; (801a2dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801a166:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801a16a:	f1ba 0f03 	cmp.w	sl, #3
 801a16e:	ddea      	ble.n	801a146 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801a170:	f1ba 0f0c 	cmp.w	sl, #12
 801a174:	f04f 0303 	mov.w	r3, #3
 801a178:	f04f 0600 	mov.w	r6, #0
 801a17c:	4958      	ldr	r1, [pc, #352]	; (801a2e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801a17e:	bfd8      	it	le
 801a180:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801a184:	960a      	str	r6, [sp, #40]	; 0x28
 801a186:	bfd8      	it	le
 801a188:	fb92 f3f3 	sdivle	r3, r2, r3
 801a18c:	9301      	str	r3, [sp, #4]
 801a18e:	4b55      	ldr	r3, [pc, #340]	; (801a2e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801a190:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a194:	4b54      	ldr	r3, [pc, #336]	; (801a2e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801a196:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a19a:	2248      	movs	r2, #72	; 0x48
 801a19c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a1a0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a1a4:	ab0e      	add	r3, sp, #56	; 0x38
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	f00b ff08 	bl	8025fbc <memcpy>
 801a1ac:	f04f 32ff 	mov.w	r2, #4294967295
 801a1b0:	f8cd a008 	str.w	sl, [sp, #8]
 801a1b4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801a1b8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a1bc:	46b3      	mov	fp, r6
 801a1be:	fb93 f3f2 	sdiv	r3, r3, r2
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	9303      	str	r3, [sp, #12]
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	9a03      	ldr	r2, [sp, #12]
 801a1ca:	88ef      	ldrh	r7, [r5, #6]
 801a1cc:	a80a      	add	r0, sp, #40	; 0x28
 801a1ce:	9309      	str	r3, [sp, #36]	; 0x24
 801a1d0:	9b07      	ldr	r3, [sp, #28]
 801a1d2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a1d6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a1da:	fb13 f302 	smulbb	r3, r3, r2
 801a1de:	b29b      	uxth	r3, r3
 801a1e0:	9304      	str	r3, [sp, #16]
 801a1e2:	9b07      	ldr	r3, [sp, #28]
 801a1e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a1e8:	685b      	ldr	r3, [r3, #4]
 801a1ea:	fb13 f302 	smulbb	r3, r3, r2
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	9305      	str	r3, [sp, #20]
 801a1f2:	9b04      	ldr	r3, [sp, #16]
 801a1f4:	441f      	add	r7, r3
 801a1f6:	9b05      	ldr	r3, [sp, #20]
 801a1f8:	4498      	add	r8, r3
 801a1fa:	b23f      	sxth	r7, r7
 801a1fc:	fa0f f888 	sxth.w	r8, r8
 801a200:	4639      	mov	r1, r7
 801a202:	4642      	mov	r2, r8
 801a204:	f7ff ff14 	bl	801a030 <_ZNK8touchgfx4Rect9intersectEss>
 801a208:	b380      	cbz	r0, 801a26c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a20a:	4639      	mov	r1, r7
 801a20c:	ab09      	add	r3, sp, #36	; 0x24
 801a20e:	4642      	mov	r2, r8
 801a210:	1d20      	adds	r0, r4, #4
 801a212:	f7fa fe41 	bl	8014e98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a216:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a218:	b341      	cbz	r1, 801a26c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a21a:	4549      	cmp	r1, r9
 801a21c:	d026      	beq.n	801a26c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a21e:	a80c      	add	r0, sp, #48	; 0x30
 801a220:	f7ff fd6e 	bl	8019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a224:	2002      	movs	r0, #2
 801a226:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a22a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a22e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a232:	fb92 f2f0 	sdiv	r2, r2, r0
 801a236:	440a      	add	r2, r1
 801a238:	1a99      	subs	r1, r3, r2
 801a23a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a23e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a242:	fb93 f3f0 	sdiv	r3, r3, r0
 801a246:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a24a:	4403      	add	r3, r0
 801a24c:	1ad3      	subs	r3, r2, r3
 801a24e:	9a06      	ldr	r2, [sp, #24]
 801a250:	435b      	muls	r3, r3
 801a252:	fb01 3301 	mla	r3, r1, r1, r3
 801a256:	4293      	cmp	r3, r2
 801a258:	d208      	bcs.n	801a26c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a25a:	9a04      	ldr	r2, [sp, #16]
 801a25c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a260:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a262:	9a05      	ldr	r2, [sp, #20]
 801a264:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a268:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a26a:	9306      	str	r3, [sp, #24]
 801a26c:	f10b 0b02 	add.w	fp, fp, #2
 801a270:	f1bb 0f08 	cmp.w	fp, #8
 801a274:	dda7      	ble.n	801a1c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a276:	9b02      	ldr	r3, [sp, #8]
 801a278:	3601      	adds	r6, #1
 801a27a:	4453      	add	r3, sl
 801a27c:	9302      	str	r3, [sp, #8]
 801a27e:	9b01      	ldr	r3, [sp, #4]
 801a280:	42b3      	cmp	r3, r6
 801a282:	d199      	bne.n	801a1b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a284:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a286:	2900      	cmp	r1, #0
 801a288:	f43f af5a 	beq.w	801a140 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a28c:	a80c      	add	r0, sp, #48	; 0x30
 801a28e:	2600      	movs	r6, #0
 801a290:	f7ff fd36 	bl	8019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a294:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a298:	88ea      	ldrh	r2, [r5, #6]
 801a29a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a29e:	1ad2      	subs	r2, r2, r3
 801a2a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a2a2:	7929      	ldrb	r1, [r5, #4]
 801a2a4:	441a      	add	r2, r3
 801a2a6:	892b      	ldrh	r3, [r5, #8]
 801a2a8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a2ac:	a90e      	add	r1, sp, #56	; 0x38
 801a2ae:	1a1b      	subs	r3, r3, r0
 801a2b0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a2b2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a2b6:	4403      	add	r3, r0
 801a2b8:	480c      	ldr	r0, [pc, #48]	; (801a2ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a2ba:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a2be:	900e      	str	r0, [sp, #56]	; 0x38
 801a2c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a2c2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a2c6:	6803      	ldr	r3, [r0, #0]
 801a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2ca:	4798      	blx	r3
 801a2cc:	792b      	ldrb	r3, [r5, #4]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	f43f af36 	beq.w	801a140 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a2d4:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a2d8:	e732      	b.n	801a140 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a2da:	bf00      	nop
 801a2dc:	200566f8 	.word	0x200566f8
 801a2e0:	0802b2d4 	.word	0x0802b2d4
 801a2e4:	200566ec 	.word	0x200566ec
 801a2e8:	200566ee 	.word	0x200566ee
 801a2ec:	0802d378 	.word	0x0802d378

0801a2f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a2f2:	4604      	mov	r4, r0
 801a2f4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a2f8:	3201      	adds	r2, #1
 801a2fa:	d112      	bne.n	801a322 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a2fc:	2500      	movs	r5, #0
 801a2fe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a302:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a306:	6803      	ldr	r3, [r0, #0]
 801a308:	9500      	str	r5, [sp, #0]
 801a30a:	466d      	mov	r5, sp
 801a30c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a310:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a314:	4629      	mov	r1, r5
 801a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a318:	4798      	blx	r3
 801a31a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a31e:	e884 0003 	stmia.w	r4, {r0, r1}
 801a322:	4620      	mov	r0, r4
 801a324:	b003      	add	sp, #12
 801a326:	bd30      	pop	{r4, r5, pc}

0801a328 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a328:	b513      	push	{r0, r1, r4, lr}
 801a32a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a32e:	4604      	mov	r4, r0
 801a330:	3301      	adds	r3, #1
 801a332:	d109      	bne.n	801a348 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a334:	4601      	mov	r1, r0
 801a336:	4668      	mov	r0, sp
 801a338:	f7ff fce2 	bl	8019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a33c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a340:	8423      	strh	r3, [r4, #32]
 801a342:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a346:	8463      	strh	r3, [r4, #34]	; 0x22
 801a348:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a34c:	b002      	add	sp, #8
 801a34e:	bd10      	pop	{r4, pc}

0801a350 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a350:	b513      	push	{r0, r1, r4, lr}
 801a352:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a356:	4604      	mov	r4, r0
 801a358:	3301      	adds	r3, #1
 801a35a:	d109      	bne.n	801a370 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a35c:	4601      	mov	r1, r0
 801a35e:	4668      	mov	r0, sp
 801a360:	f7ff fcce 	bl	8019d00 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a364:	f8bd 3000 	ldrh.w	r3, [sp]
 801a368:	8423      	strh	r3, [r4, #32]
 801a36a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a36e:	8463      	strh	r3, [r4, #34]	; 0x22
 801a370:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a374:	b002      	add	sp, #8
 801a376:	bd10      	pop	{r4, pc}

0801a378 <_ZN8touchgfx6ScreenC1Ev>:
 801a378:	b570      	push	{r4, r5, r6, lr}
 801a37a:	4b17      	ldr	r3, [pc, #92]	; (801a3d8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a37c:	4605      	mov	r5, r0
 801a37e:	4a17      	ldr	r2, [pc, #92]	; (801a3dc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a380:	2101      	movs	r1, #1
 801a382:	f845 3b04 	str.w	r3, [r5], #4
 801a386:	2300      	movs	r3, #0
 801a388:	6042      	str	r2, [r0, #4]
 801a38a:	4604      	mov	r4, r0
 801a38c:	8103      	strh	r3, [r0, #8]
 801a38e:	8143      	strh	r3, [r0, #10]
 801a390:	8183      	strh	r3, [r0, #12]
 801a392:	81c3      	strh	r3, [r0, #14]
 801a394:	8203      	strh	r3, [r0, #16]
 801a396:	8243      	strh	r3, [r0, #18]
 801a398:	8283      	strh	r3, [r0, #20]
 801a39a:	82c3      	strh	r3, [r0, #22]
 801a39c:	6203      	str	r3, [r0, #32]
 801a39e:	8483      	strh	r3, [r0, #36]	; 0x24
 801a3a0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a3a2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a3a6:	6343      	str	r3, [r0, #52]	; 0x34
 801a3a8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a3ac:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a3b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a3b4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a3b8:	4b09      	ldr	r3, [pc, #36]	; (801a3e0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a3ba:	4628      	mov	r0, r5
 801a3bc:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a3c0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801a3c2:	4a08      	ldr	r2, [pc, #32]	; (801a3e4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a3c4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a3c8:	4798      	blx	r3
 801a3ca:	6863      	ldr	r3, [r4, #4]
 801a3cc:	4628      	mov	r0, r5
 801a3ce:	4631      	mov	r1, r6
 801a3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3d2:	4798      	blx	r3
 801a3d4:	4620      	mov	r0, r4
 801a3d6:	bd70      	pop	{r4, r5, r6, pc}
 801a3d8:	0802d3b4 	.word	0x0802d3b4
 801a3dc:	0802bfd4 	.word	0x0802bfd4
 801a3e0:	200566ee 	.word	0x200566ee
 801a3e4:	200566ec 	.word	0x200566ec

0801a3e8 <_ZN8touchgfx6Screen4drawEv>:
 801a3e8:	4b09      	ldr	r3, [pc, #36]	; (801a410 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a3ea:	b507      	push	{r0, r1, r2, lr}
 801a3ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3f0:	2100      	movs	r1, #0
 801a3f2:	4b08      	ldr	r3, [pc, #32]	; (801a414 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a3f4:	9100      	str	r1, [sp, #0]
 801a3f6:	4669      	mov	r1, sp
 801a3f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a400:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a404:	6803      	ldr	r3, [r0, #0]
 801a406:	689b      	ldr	r3, [r3, #8]
 801a408:	4798      	blx	r3
 801a40a:	b003      	add	sp, #12
 801a40c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a410:	200566ec 	.word	0x200566ec
 801a414:	200566ee 	.word	0x200566ee

0801a418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a41c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a420:	b089      	sub	sp, #36	; 0x24
 801a422:	4680      	mov	r8, r0
 801a424:	460c      	mov	r4, r1
 801a426:	2b00      	cmp	r3, #0
 801a428:	4615      	mov	r5, r2
 801a42a:	dd0e      	ble.n	801a44a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a42c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a430:	2b00      	cmp	r3, #0
 801a432:	dd0a      	ble.n	801a44a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a434:	4628      	mov	r0, r5
 801a436:	f7ff ff5b 	bl	801a2f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a43a:	4621      	mov	r1, r4
 801a43c:	f7fb ffea 	bl	8016414 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a440:	69eb      	ldr	r3, [r5, #28]
 801a442:	b928      	cbnz	r0, 801a450 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a444:	461d      	mov	r5, r3
 801a446:	2b00      	cmp	r3, #0
 801a448:	d1f4      	bne.n	801a434 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a44a:	b009      	add	sp, #36	; 0x24
 801a44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a450:	ae04      	add	r6, sp, #16
 801a452:	2b00      	cmp	r3, #0
 801a454:	f000 80b5 	beq.w	801a5c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a458:	682b      	ldr	r3, [r5, #0]
 801a45a:	4629      	mov	r1, r5
 801a45c:	a802      	add	r0, sp, #8
 801a45e:	68db      	ldr	r3, [r3, #12]
 801a460:	4798      	blx	r3
 801a462:	4628      	mov	r0, r5
 801a464:	f7ff ff60 	bl	801a328 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a468:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a46c:	4407      	add	r7, r0
 801a46e:	4628      	mov	r0, r5
 801a470:	f7ff ff6e 	bl	801a350 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a474:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a478:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a47c:	b23f      	sxth	r7, r7
 801a47e:	4418      	add	r0, r3
 801a480:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a484:	4621      	mov	r1, r4
 801a486:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a48a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a48e:	4630      	mov	r0, r6
 801a490:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a494:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a498:	f7fa fdb0 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 801a49c:	4628      	mov	r0, r5
 801a49e:	f7ff ff27 	bl	801a2f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a4a2:	ab06      	add	r3, sp, #24
 801a4a4:	4602      	mov	r2, r0
 801a4a6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a4aa:	e883 0003 	stmia.w	r3, {r0, r1}
 801a4ae:	4611      	mov	r1, r2
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	f7fa fda3 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 801a4b6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a4ba:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a4be:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a4c2:	4299      	cmp	r1, r3
 801a4c4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a4c8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a4cc:	d10b      	bne.n	801a4e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a4ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a4d2:	4552      	cmp	r2, sl
 801a4d4:	d107      	bne.n	801a4e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a4d6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a4da:	455a      	cmp	r2, fp
 801a4dc:	d103      	bne.n	801a4e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a4de:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a4e2:	454a      	cmp	r2, r9
 801a4e4:	d06d      	beq.n	801a5c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a4e6:	f1bb 0f00 	cmp.w	fp, #0
 801a4ea:	dd65      	ble.n	801a5b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a4ec:	f1b9 0f00 	cmp.w	r9, #0
 801a4f0:	dd62      	ble.n	801a5b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a4f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a4f6:	fa1f f08a 	uxth.w	r0, sl
 801a4fa:	4552      	cmp	r2, sl
 801a4fc:	9000      	str	r0, [sp, #0]
 801a4fe:	da12      	bge.n	801a526 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a500:	9301      	str	r3, [sp, #4]
 801a502:	9b00      	ldr	r3, [sp, #0]
 801a504:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a508:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a50c:	1a9a      	subs	r2, r3, r2
 801a50e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a512:	4631      	mov	r1, r6
 801a514:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a518:	4640      	mov	r0, r8
 801a51a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a51e:	69ea      	ldr	r2, [r5, #28]
 801a520:	f7ff ff7a 	bl	801a418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a524:	9b01      	ldr	r3, [sp, #4]
 801a526:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a52a:	b29f      	uxth	r7, r3
 801a52c:	429a      	cmp	r2, r3
 801a52e:	da0d      	bge.n	801a54c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a530:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a534:	1aba      	subs	r2, r7, r2
 801a536:	f8ad a012 	strh.w	sl, [sp, #18]
 801a53a:	4631      	mov	r1, r6
 801a53c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a540:	4640      	mov	r0, r8
 801a542:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a546:	69ea      	ldr	r2, [r5, #28]
 801a548:	f7ff ff66 	bl	801a418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a54c:	8822      	ldrh	r2, [r4, #0]
 801a54e:	445f      	add	r7, fp
 801a550:	88a3      	ldrh	r3, [r4, #4]
 801a552:	b2bf      	uxth	r7, r7
 801a554:	4413      	add	r3, r2
 801a556:	b23a      	sxth	r2, r7
 801a558:	b29b      	uxth	r3, r3
 801a55a:	b219      	sxth	r1, r3
 801a55c:	4291      	cmp	r1, r2
 801a55e:	dd0d      	ble.n	801a57c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a560:	1bdb      	subs	r3, r3, r7
 801a562:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a566:	f8ad a012 	strh.w	sl, [sp, #18]
 801a56a:	4631      	mov	r1, r6
 801a56c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a570:	4640      	mov	r0, r8
 801a572:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a576:	69ea      	ldr	r2, [r5, #28]
 801a578:	f7ff ff4e 	bl	801a418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a57c:	88e2      	ldrh	r2, [r4, #6]
 801a57e:	8863      	ldrh	r3, [r4, #2]
 801a580:	4413      	add	r3, r2
 801a582:	9a00      	ldr	r2, [sp, #0]
 801a584:	444a      	add	r2, r9
 801a586:	b29b      	uxth	r3, r3
 801a588:	fa1f f982 	uxth.w	r9, r2
 801a58c:	b219      	sxth	r1, r3
 801a58e:	fa0f f289 	sxth.w	r2, r9
 801a592:	428a      	cmp	r2, r1
 801a594:	da15      	bge.n	801a5c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a596:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a59a:	eba3 0309 	sub.w	r3, r3, r9
 801a59e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a5a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a5a6:	4631      	mov	r1, r6
 801a5a8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a5ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a5b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5b4:	69ea      	ldr	r2, [r5, #28]
 801a5b6:	e001      	b.n	801a5bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a5b8:	69ea      	ldr	r2, [r5, #28]
 801a5ba:	4621      	mov	r1, r4
 801a5bc:	4640      	mov	r0, r8
 801a5be:	f7ff ff2b 	bl	801a418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a5c2:	4628      	mov	r0, r5
 801a5c4:	f7ff fe94 	bl	801a2f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a5c8:	6861      	ldr	r1, [r4, #4]
 801a5ca:	4602      	mov	r2, r0
 801a5cc:	4633      	mov	r3, r6
 801a5ce:	6820      	ldr	r0, [r4, #0]
 801a5d0:	c303      	stmia	r3!, {r0, r1}
 801a5d2:	4611      	mov	r1, r2
 801a5d4:	4630      	mov	r0, r6
 801a5d6:	f7fa fd11 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 801a5da:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	f77f af33 	ble.w	801a44a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a5e4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	f77f af2e 	ble.w	801a44a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a5ee:	4628      	mov	r0, r5
 801a5f0:	f7ff fe9a 	bl	801a328 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a5f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a5f8:	1a18      	subs	r0, r3, r0
 801a5fa:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a5fe:	4628      	mov	r0, r5
 801a600:	f7ff fea6 	bl	801a350 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a604:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a608:	4631      	mov	r1, r6
 801a60a:	1a18      	subs	r0, r3, r0
 801a60c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a610:	4628      	mov	r0, r5
 801a612:	682b      	ldr	r3, [r5, #0]
 801a614:	689b      	ldr	r3, [r3, #8]
 801a616:	4798      	blx	r3
 801a618:	e717      	b.n	801a44a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a61a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a61a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a61c:	2300      	movs	r3, #0
 801a61e:	aa02      	add	r2, sp, #8
 801a620:	4604      	mov	r4, r0
 801a622:	3004      	adds	r0, #4
 801a624:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a628:	460d      	mov	r5, r1
 801a62a:	f7fa fdbf 	bl	80151ac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a62e:	9a01      	ldr	r2, [sp, #4]
 801a630:	b11a      	cbz	r2, 801a63a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a632:	4629      	mov	r1, r5
 801a634:	4620      	mov	r0, r4
 801a636:	f7ff feef 	bl	801a418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a63a:	b003      	add	sp, #12
 801a63c:	bd30      	pop	{r4, r5, pc}

0801a63e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a63e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a640:	4602      	mov	r2, r0
 801a642:	4604      	mov	r4, r0
 801a644:	460d      	mov	r5, r1
 801a646:	466b      	mov	r3, sp
 801a648:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a64c:	6851      	ldr	r1, [r2, #4]
 801a64e:	c303      	stmia	r3!, {r0, r1}
 801a650:	4629      	mov	r1, r5
 801a652:	4668      	mov	r0, sp
 801a654:	f7fa fcd2 	bl	8014ffc <_ZN8touchgfx4RectaNERKS0_>
 801a658:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a65c:	4669      	mov	r1, sp
 801a65e:	b123      	cbz	r3, 801a66a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a660:	4620      	mov	r0, r4
 801a662:	f7ff ffda 	bl	801a61a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a666:	b003      	add	sp, #12
 801a668:	bd30      	pop	{r4, r5, pc}
 801a66a:	1d20      	adds	r0, r4, #4
 801a66c:	f7fa fd65 	bl	801513a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a670:	e7f9      	b.n	801a666 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a672 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a672:	460b      	mov	r3, r1
 801a674:	680a      	ldr	r2, [r1, #0]
 801a676:	1d01      	adds	r1, r0, #4
 801a678:	6992      	ldr	r2, [r2, #24]
 801a67a:	4618      	mov	r0, r3
 801a67c:	4710      	bx	r2

0801a67e <_ZN8touchgfx12TextProviderC1Ev>:
 801a67e:	b538      	push	{r3, r4, r5, lr}
 801a680:	2500      	movs	r5, #0
 801a682:	4604      	mov	r4, r0
 801a684:	220e      	movs	r2, #14
 801a686:	7405      	strb	r5, [r0, #16]
 801a688:	4629      	mov	r1, r5
 801a68a:	82c5      	strh	r5, [r0, #22]
 801a68c:	8305      	strh	r5, [r0, #24]
 801a68e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801a690:	8605      	strh	r5, [r0, #48]	; 0x30
 801a692:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a694:	8705      	strh	r5, [r0, #56]	; 0x38
 801a696:	e9c0 5500 	strd	r5, r5, [r0]
 801a69a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801a69e:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 801a6a2:	3044      	adds	r0, #68	; 0x44
 801a6a4:	f00b fc98 	bl	8025fd8 <memset>
 801a6a8:	2301      	movs	r3, #1
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801a6b0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801a6b4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801a6b8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801a6bc:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801a6c0:	f7ee f8ac 	bl	800881c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a6c4:	4620      	mov	r0, r4
 801a6c6:	bd38      	pop	{r3, r4, r5, pc}

0801a6c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a6c8:	b530      	push	{r4, r5, lr}
 801a6ca:	2500      	movs	r5, #0
 801a6cc:	2401      	movs	r4, #1
 801a6ce:	6843      	ldr	r3, [r0, #4]
 801a6d0:	b913      	cbnz	r3, 801a6d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a6d2:	6803      	ldr	r3, [r0, #0]
 801a6d4:	b1f3      	cbz	r3, 801a714 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a6d6:	6043      	str	r3, [r0, #4]
 801a6d8:	7c03      	ldrb	r3, [r0, #16]
 801a6da:	b143      	cbz	r3, 801a6ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a6dc:	68c3      	ldr	r3, [r0, #12]
 801a6de:	b12b      	cbz	r3, 801a6ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a6e0:	881a      	ldrh	r2, [r3, #0]
 801a6e2:	b11a      	cbz	r2, 801a6ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a6e4:	1c9a      	adds	r2, r3, #2
 801a6e6:	60c2      	str	r2, [r0, #12]
 801a6e8:	8818      	ldrh	r0, [r3, #0]
 801a6ea:	bd30      	pop	{r4, r5, pc}
 801a6ec:	7405      	strb	r5, [r0, #16]
 801a6ee:	6843      	ldr	r3, [r0, #4]
 801a6f0:	8819      	ldrh	r1, [r3, #0]
 801a6f2:	b179      	cbz	r1, 801a714 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a6f4:	1c9a      	adds	r2, r3, #2
 801a6f6:	2902      	cmp	r1, #2
 801a6f8:	6042      	str	r2, [r0, #4]
 801a6fa:	d1f5      	bne.n	801a6e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a6fc:	6883      	ldr	r3, [r0, #8]
 801a6fe:	1d1a      	adds	r2, r3, #4
 801a700:	6082      	str	r2, [r0, #8]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	60c3      	str	r3, [r0, #12]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d0e1      	beq.n	801a6ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a70a:	881b      	ldrh	r3, [r3, #0]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d0de      	beq.n	801a6ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a710:	7404      	strb	r4, [r0, #16]
 801a712:	e7dc      	b.n	801a6ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a714:	2000      	movs	r0, #0
 801a716:	e7e8      	b.n	801a6ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a718 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a718:	b410      	push	{r4}
 801a71a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a71c:	9b01      	ldr	r3, [sp, #4]
 801a71e:	6082      	str	r2, [r0, #8]
 801a720:	6403      	str	r3, [r0, #64]	; 0x40
 801a722:	2300      	movs	r3, #0
 801a724:	6001      	str	r1, [r0, #0]
 801a726:	6043      	str	r3, [r0, #4]
 801a728:	60c3      	str	r3, [r0, #12]
 801a72a:	7403      	strb	r3, [r0, #16]
 801a72c:	8603      	strh	r3, [r0, #48]	; 0x30
 801a72e:	8303      	strh	r3, [r0, #24]
 801a730:	8703      	strh	r3, [r0, #56]	; 0x38
 801a732:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a736:	f7ee b871 	b.w	800881c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a73a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a73a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a73c:	4605      	mov	r5, r0
 801a73e:	4608      	mov	r0, r1
 801a740:	b1f1      	cbz	r1, 801a780 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a742:	f105 0444 	add.w	r4, r5, #68	; 0x44
 801a746:	460b      	mov	r3, r1
 801a748:	f101 0708 	add.w	r7, r1, #8
 801a74c:	4622      	mov	r2, r4
 801a74e:	6818      	ldr	r0, [r3, #0]
 801a750:	3308      	adds	r3, #8
 801a752:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a756:	4626      	mov	r6, r4
 801a758:	42bb      	cmp	r3, r7
 801a75a:	c603      	stmia	r6!, {r0, r1}
 801a75c:	4634      	mov	r4, r6
 801a75e:	d1f6      	bne.n	801a74e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a760:	6818      	ldr	r0, [r3, #0]
 801a762:	6030      	str	r0, [r6, #0]
 801a764:	4610      	mov	r0, r2
 801a766:	889b      	ldrh	r3, [r3, #4]
 801a768:	80b3      	strh	r3, [r6, #4]
 801a76a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801a76e:	015b      	lsls	r3, r3, #5
 801a770:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a774:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 801a778:	430b      	orrs	r3, r1
 801a77a:	425b      	negs	r3, r3
 801a77c:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 801a780:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a782 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a782:	b538      	push	{r3, r4, r5, lr}
 801a784:	460c      	mov	r4, r1
 801a786:	6811      	ldr	r1, [r2, #0]
 801a788:	4610      	mov	r0, r2
 801a78a:	68cd      	ldr	r5, [r1, #12]
 801a78c:	4619      	mov	r1, r3
 801a78e:	47a8      	blx	r5
 801a790:	2800      	cmp	r0, #0
 801a792:	bf08      	it	eq
 801a794:	4620      	moveq	r0, r4
 801a796:	bd38      	pop	{r3, r4, r5, pc}

0801a798 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a79a:	4604      	mov	r4, r0
 801a79c:	4615      	mov	r5, r2
 801a79e:	4608      	mov	r0, r1
 801a7a0:	b93a      	cbnz	r2, 801a7b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a7a2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a7a6:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 801a7aa:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 801a7ae:	4628      	mov	r0, r5
 801a7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7b2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a7b6:	8893      	ldrh	r3, [r2, #4]
 801a7b8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a7bc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a7c0:	79ee      	ldrb	r6, [r5, #7]
 801a7c2:	4316      	orrs	r6, r2
 801a7c4:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801a7c8:	189a      	adds	r2, r3, r2
 801a7ca:	b2b7      	uxth	r7, r6
 801a7cc:	b291      	uxth	r1, r2
 801a7ce:	291d      	cmp	r1, #29
 801a7d0:	f200 8084 	bhi.w	801a8dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a7d4:	2201      	movs	r2, #1
 801a7d6:	10f6      	asrs	r6, r6, #3
 801a7d8:	408a      	lsls	r2, r1
 801a7da:	4978      	ldr	r1, [pc, #480]	; (801a9bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801a7dc:	420a      	tst	r2, r1
 801a7de:	d12e      	bne.n	801a83e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a7e0:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a7e4:	d07a      	beq.n	801a8dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a7e6:	f104 0244 	add.w	r2, r4, #68	; 0x44
 801a7ea:	462b      	mov	r3, r5
 801a7ec:	f105 0e08 	add.w	lr, r5, #8
 801a7f0:	4615      	mov	r5, r2
 801a7f2:	6818      	ldr	r0, [r3, #0]
 801a7f4:	3308      	adds	r3, #8
 801a7f6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a7fa:	4694      	mov	ip, r2
 801a7fc:	4573      	cmp	r3, lr
 801a7fe:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a802:	4662      	mov	r2, ip
 801a804:	d1f5      	bne.n	801a7f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801a806:	6818      	ldr	r0, [r3, #0]
 801a808:	f8cc 0000 	str.w	r0, [ip]
 801a80c:	889b      	ldrh	r3, [r3, #4]
 801a80e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a812:	b2b3      	uxth	r3, r6
 801a814:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 801a818:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 801a81c:	1aca      	subs	r2, r1, r3
 801a81e:	1bcf      	subs	r7, r1, r7
 801a820:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a824:	b292      	uxth	r2, r2
 801a826:	1afb      	subs	r3, r7, r3
 801a828:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 801a82c:	10d2      	asrs	r2, r2, #3
 801a82e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a832:	4302      	orrs	r2, r0
 801a834:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 801a838:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801a83c:	e7b7      	b.n	801a7ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a83e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a840:	b92b      	cbnz	r3, 801a84e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801a842:	4b5f      	ldr	r3, [pc, #380]	; (801a9c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801a844:	21bf      	movs	r1, #191	; 0xbf
 801a846:	4a5f      	ldr	r2, [pc, #380]	; (801a9c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801a848:	485f      	ldr	r0, [pc, #380]	; (801a9c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801a84a:	f00b fb39 	bl	8025ec0 <__assert_func>
 801a84e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a850:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a854:	8b59      	ldrh	r1, [r3, #26]
 801a856:	f640 6333 	movw	r3, #3635	; 0xe33
 801a85a:	4299      	cmp	r1, r3
 801a85c:	d110      	bne.n	801a880 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801a85e:	6803      	ldr	r3, [r0, #0]
 801a860:	68db      	ldr	r3, [r3, #12]
 801a862:	4798      	blx	r3
 801a864:	7b41      	ldrb	r1, [r0, #13]
 801a866:	00cb      	lsls	r3, r1, #3
 801a868:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a86c:	7a03      	ldrb	r3, [r0, #8]
 801a86e:	0648      	lsls	r0, r1, #25
 801a870:	ea43 0302 	orr.w	r3, r3, r2
 801a874:	bf44      	itt	mi
 801a876:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a87a:	b21b      	sxthmi	r3, r3
 801a87c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a880:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801a884:	462a      	mov	r2, r5
 801a886:	f105 0c08 	add.w	ip, r5, #8
 801a88a:	443b      	add	r3, r7
 801a88c:	4433      	add	r3, r6
 801a88e:	f104 0644 	add.w	r6, r4, #68	; 0x44
 801a892:	b29b      	uxth	r3, r3
 801a894:	4635      	mov	r5, r6
 801a896:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a89a:	6810      	ldr	r0, [r2, #0]
 801a89c:	3208      	adds	r2, #8
 801a89e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a8a2:	4637      	mov	r7, r6
 801a8a4:	4562      	cmp	r2, ip
 801a8a6:	c703      	stmia	r7!, {r0, r1}
 801a8a8:	463e      	mov	r6, r7
 801a8aa:	d1f6      	bne.n	801a89a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801a8ac:	6810      	ldr	r0, [r2, #0]
 801a8ae:	6038      	str	r0, [r7, #0]
 801a8b0:	8892      	ldrh	r2, [r2, #4]
 801a8b2:	80ba      	strh	r2, [r7, #4]
 801a8b4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801a8b8:	10db      	asrs	r3, r3, #3
 801a8ba:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801a8be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a8c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a8c6:	4313      	orrs	r3, r2
 801a8c8:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801a8cc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801a8d0:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 801a8d4:	1a9b      	subs	r3, r3, r2
 801a8d6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801a8da:	e768      	b.n	801a7ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a8dc:	f023 0204 	bic.w	r2, r3, #4
 801a8e0:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a8e4:	428a      	cmp	r2, r1
 801a8e6:	d003      	beq.n	801a8f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801a8e8:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a8ec:	4293      	cmp	r3, r2
 801a8ee:	d120      	bne.n	801a932 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a8f0:	3b01      	subs	r3, #1
 801a8f2:	4602      	mov	r2, r0
 801a8f4:	4629      	mov	r1, r5
 801a8f6:	4620      	mov	r0, r4
 801a8f8:	b29b      	uxth	r3, r3
 801a8fa:	f7ff ff42 	bl	801a782 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a8fe:	7b41      	ldrb	r1, [r0, #13]
 801a900:	00cb      	lsls	r3, r1, #3
 801a902:	0649      	lsls	r1, r1, #25
 801a904:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a908:	7a03      	ldrb	r3, [r0, #8]
 801a90a:	ea43 0302 	orr.w	r3, r3, r2
 801a90e:	bf44      	itt	mi
 801a910:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a914:	b21b      	sxthmi	r3, r3
 801a916:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a91a:	7b6b      	ldrb	r3, [r5, #13]
 801a91c:	7aaa      	ldrb	r2, [r5, #10]
 801a91e:	005b      	lsls	r3, r3, #1
 801a920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a924:	4313      	orrs	r3, r2
 801a926:	115a      	asrs	r2, r3, #5
 801a928:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a92c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801a930:	e035      	b.n	801a99e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801a932:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a936:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a93a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a93e:	7a2a      	ldrb	r2, [r5, #8]
 801a940:	ea42 0201 	orr.w	r2, r2, r1
 801a944:	f640 6109 	movw	r1, #3593	; 0xe09
 801a948:	bf1c      	itt	ne
 801a94a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a94e:	b212      	sxthne	r2, r2
 801a950:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a954:	f023 0210 	bic.w	r2, r3, #16
 801a958:	428a      	cmp	r2, r1
 801a95a:	d003      	beq.n	801a964 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801a95c:	f640 6213 	movw	r2, #3603	; 0xe13
 801a960:	4293      	cmp	r3, r2
 801a962:	d129      	bne.n	801a9b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801a964:	7b6e      	ldrb	r6, [r5, #13]
 801a966:	4629      	mov	r1, r5
 801a968:	0076      	lsls	r6, r6, #1
 801a96a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a96e:	7aae      	ldrb	r6, [r5, #10]
 801a970:	4316      	orrs	r6, r2
 801a972:	f640 6213 	movw	r2, #3603	; 0xe13
 801a976:	4293      	cmp	r3, r2
 801a978:	4602      	mov	r2, r0
 801a97a:	4620      	mov	r0, r4
 801a97c:	bf16      	itet	ne
 801a97e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a982:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a986:	b29b      	uxthne	r3, r3
 801a988:	f7ff fefb 	bl	801a782 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a98c:	7b43      	ldrb	r3, [r0, #13]
 801a98e:	7a82      	ldrb	r2, [r0, #10]
 801a990:	005b      	lsls	r3, r3, #1
 801a992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a996:	4313      	orrs	r3, r2
 801a998:	1af6      	subs	r6, r6, r3
 801a99a:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 801a99e:	7b69      	ldrb	r1, [r5, #13]
 801a9a0:	00cb      	lsls	r3, r1, #3
 801a9a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a9a6:	7a2b      	ldrb	r3, [r5, #8]
 801a9a8:	4313      	orrs	r3, r2
 801a9aa:	064a      	lsls	r2, r1, #25
 801a9ac:	bf44      	itt	mi
 801a9ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a9b2:	b21b      	sxthmi	r3, r3
 801a9b4:	1bdb      	subs	r3, r3, r7
 801a9b6:	e73f      	b.n	801a838 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	e7b7      	b.n	801a92c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801a9bc:	3fc00079 	.word	0x3fc00079
 801a9c0:	0802d3e0 	.word	0x0802d3e0
 801a9c4:	0802d652 	.word	0x0802d652
 801a9c8:	0802d3e9 	.word	0x0802d3e9

0801a9cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a9cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9d0:	4604      	mov	r4, r0
 801a9d2:	b942      	cbnz	r2, 801a9e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a9d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a9d8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a9dc:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 801a9e0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801a9e4:	e046      	b.n	801aa74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801a9e6:	7b51      	ldrb	r1, [r2, #13]
 801a9e8:	8893      	ldrh	r3, [r2, #4]
 801a9ea:	010f      	lsls	r7, r1, #4
 801a9ec:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a9f0:	79d7      	ldrb	r7, [r2, #7]
 801a9f2:	4307      	orrs	r7, r0
 801a9f4:	2f04      	cmp	r7, #4
 801a9f6:	b2bd      	uxth	r5, r7
 801a9f8:	bfcc      	ite	gt
 801a9fa:	08bf      	lsrgt	r7, r7, #2
 801a9fc:	2701      	movle	r7, #1
 801a9fe:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801aa02:	f200 80ab 	bhi.w	801ab5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801aa06:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801aa0a:	4283      	cmp	r3, r0
 801aa0c:	d216      	bcs.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa0e:	f240 605b 	movw	r0, #1627	; 0x65b
 801aa12:	4283      	cmp	r3, r0
 801aa14:	d859      	bhi.n	801aaca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801aa16:	f240 6057 	movw	r0, #1623	; 0x657
 801aa1a:	4283      	cmp	r3, r0
 801aa1c:	d20e      	bcs.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa1e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801aa22:	d24a      	bcs.n	801aaba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801aa24:	f240 604e 	movw	r0, #1614	; 0x64e
 801aa28:	4283      	cmp	r3, r0
 801aa2a:	d207      	bcs.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa2c:	f240 601a 	movw	r0, #1562	; 0x61a
 801aa30:	4283      	cmp	r3, r0
 801aa32:	d02a      	beq.n	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aa34:	d821      	bhi.n	801aa7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801aa36:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801aa3a:	d35b      	bcc.n	801aaf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aa3c:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 801aa40:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aa44:	f040 80d0 	bne.w	801abe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801aa48:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 801aa4c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aa50:	f040 80ca 	bne.w	801abe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801aa54:	00cb      	lsls	r3, r1, #3
 801aa56:	0649      	lsls	r1, r1, #25
 801aa58:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aa5c:	7a13      	ldrb	r3, [r2, #8]
 801aa5e:	ea43 0300 	orr.w	r3, r3, r0
 801aa62:	bf44      	itt	mi
 801aa64:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa68:	b21b      	sxthmi	r3, r3
 801aa6a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801aa6e:	1b5d      	subs	r5, r3, r5
 801aa70:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801aa74:	4610      	mov	r0, r2
 801aa76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa7a:	f240 604b 	movw	r0, #1611	; 0x64b
 801aa7e:	4283      	cmp	r3, r0
 801aa80:	d338      	bcc.n	801aaf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aa82:	f240 604c 	movw	r0, #1612	; 0x64c
 801aa86:	4283      	cmp	r3, r0
 801aa88:	d9d8      	bls.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa8a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801aa8e:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801aa92:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aa96:	f040 80f2 	bne.w	801ac7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801aa9a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aa9e:	f040 80ee 	bne.w	801ac7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801aaa2:	00cb      	lsls	r3, r1, #3
 801aaa4:	064e      	lsls	r6, r1, #25
 801aaa6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aaaa:	7a13      	ldrb	r3, [r2, #8]
 801aaac:	ea43 0300 	orr.w	r3, r3, r0
 801aab0:	bf44      	itt	mi
 801aab2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aab6:	b21b      	sxthmi	r3, r3
 801aab8:	e7d9      	b.n	801aa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801aaba:	f240 6054 	movw	r0, #1620	; 0x654
 801aabe:	4283      	cmp	r3, r0
 801aac0:	d8e3      	bhi.n	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aac2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801aac6:	d9e0      	bls.n	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aac8:	e7b8      	b.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aaca:	f240 6074 	movw	r0, #1652	; 0x674
 801aace:	4283      	cmp	r3, r0
 801aad0:	d0b4      	beq.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aad2:	d82d      	bhi.n	801ab30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801aad4:	f240 605e 	movw	r0, #1630	; 0x65e
 801aad8:	4283      	cmp	r3, r0
 801aada:	d804      	bhi.n	801aae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801aadc:	f240 605d 	movw	r0, #1629	; 0x65d
 801aae0:	4283      	cmp	r3, r0
 801aae2:	d3d2      	bcc.n	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aae4:	e7aa      	b.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aae6:	f240 605f 	movw	r0, #1631	; 0x65f
 801aaea:	4283      	cmp	r3, r0
 801aaec:	d0cd      	beq.n	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aaee:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801aaf2:	d0a3      	beq.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aaf4:	00cb      	lsls	r3, r1, #3
 801aaf6:	0649      	lsls	r1, r1, #25
 801aaf8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aafc:	7a13      	ldrb	r3, [r2, #8]
 801aafe:	ea43 0300 	orr.w	r3, r3, r0
 801ab02:	bf44      	itt	mi
 801ab04:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ab08:	b21b      	sxthmi	r3, r3
 801ab0a:	1b5d      	subs	r5, r3, r5
 801ab0c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801ab10:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801ab14:	7b53      	ldrb	r3, [r2, #13]
 801ab16:	015b      	lsls	r3, r3, #5
 801ab18:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ab1c:	7993      	ldrb	r3, [r2, #6]
 801ab1e:	430b      	orrs	r3, r1
 801ab20:	2105      	movs	r1, #5
 801ab22:	005b      	lsls	r3, r3, #1
 801ab24:	fb93 f3f1 	sdiv	r3, r3, r1
 801ab28:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ab2c:	440b      	add	r3, r1
 801ab2e:	e757      	b.n	801a9e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ab30:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ab34:	4283      	cmp	r3, r0
 801ab36:	d809      	bhi.n	801ab4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801ab38:	f240 60df 	movw	r0, #1759	; 0x6df
 801ab3c:	4283      	cmp	r3, r0
 801ab3e:	f4bf af7d 	bcs.w	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab42:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ab46:	2b05      	cmp	r3, #5
 801ab48:	d8d4      	bhi.n	801aaf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ab4a:	e777      	b.n	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab4c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ab50:	4283      	cmp	r3, r0
 801ab52:	d09a      	beq.n	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab54:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ab58:	4283      	cmp	r3, r0
 801ab5a:	e7ca      	b.n	801aaf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801ab5c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ab60:	d22b      	bcs.n	801abba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801ab62:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ab66:	4283      	cmp	r3, r0
 801ab68:	d28f      	bcs.n	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab6a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ab6e:	4283      	cmp	r3, r0
 801ab70:	d816      	bhi.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801ab72:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ab76:	4283      	cmp	r3, r0
 801ab78:	f4bf af60 	bcs.w	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab7c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ab80:	4283      	cmp	r3, r0
 801ab82:	d80a      	bhi.n	801ab9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801ab84:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ab88:	4283      	cmp	r3, r0
 801ab8a:	f4bf af57 	bcs.w	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab8e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ab92:	4283      	cmp	r3, r0
 801ab94:	f43f af79 	beq.w	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab98:	e7ac      	b.n	801aaf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ab9a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ab9e:	e7f8      	b.n	801ab92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801aba0:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801aba4:	4283      	cmp	r3, r0
 801aba6:	d802      	bhi.n	801abae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801aba8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801abac:	e798      	b.n	801aae0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801abae:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801abb2:	4283      	cmp	r3, r0
 801abb4:	f47f af42 	bne.w	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abb8:	e767      	b.n	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abba:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801abbe:	4283      	cmp	r3, r0
 801abc0:	f43f af63 	beq.w	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abc4:	d802      	bhi.n	801abcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801abc6:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801abca:	e7f2      	b.n	801abb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801abcc:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801abd0:	4283      	cmp	r3, r0
 801abd2:	d805      	bhi.n	801abe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801abd4:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801abd8:	4283      	cmp	r3, r0
 801abda:	f4ff af2f 	bcc.w	801aa3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abde:	e754      	b.n	801aa8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abe0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801abe4:	4283      	cmp	r3, r0
 801abe6:	e7af      	b.n	801ab48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801abe8:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 801abec:	4617      	mov	r7, r2
 801abee:	f102 0808 	add.w	r8, r2, #8
 801abf2:	4666      	mov	r6, ip
 801abf4:	6838      	ldr	r0, [r7, #0]
 801abf6:	3708      	adds	r7, #8
 801abf8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801abfc:	46e6      	mov	lr, ip
 801abfe:	4547      	cmp	r7, r8
 801ac00:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ac04:	46f4      	mov	ip, lr
 801ac06:	d1f5      	bne.n	801abf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801ac08:	6838      	ldr	r0, [r7, #0]
 801ac0a:	f8ce 0000 	str.w	r0, [lr]
 801ac0e:	88b9      	ldrh	r1, [r7, #4]
 801ac10:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ac14:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801ac18:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ac1c:	d009      	beq.n	801ac32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ac1e:	7b51      	ldrb	r1, [r2, #13]
 801ac20:	7992      	ldrb	r2, [r2, #6]
 801ac22:	0149      	lsls	r1, r1, #5
 801ac24:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ac28:	4311      	orrs	r1, r2
 801ac2a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ac2e:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801ac32:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ac36:	d00d      	beq.n	801ac54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801ac38:	442b      	add	r3, r5
 801ac3a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801ac3e:	b29b      	uxth	r3, r3
 801ac40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ac44:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801ac48:	10db      	asrs	r3, r3, #3
 801ac4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ac4e:	4313      	orrs	r3, r2
 801ac50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801ac54:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801ac58:	00cb      	lsls	r3, r1, #3
 801ac5a:	064f      	lsls	r7, r1, #25
 801ac5c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ac60:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801ac64:	ea43 0302 	orr.w	r3, r3, r2
 801ac68:	bf44      	itt	mi
 801ac6a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac6e:	b21b      	sxthmi	r3, r3
 801ac70:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801ac74:	1b5d      	subs	r5, r3, r5
 801ac76:	4632      	mov	r2, r6
 801ac78:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801ac7c:	e6fa      	b.n	801aa74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801ac7e:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 801ac82:	4694      	mov	ip, r2
 801ac84:	f102 0908 	add.w	r9, r2, #8
 801ac88:	4676      	mov	r6, lr
 801ac8a:	f8dc 0000 	ldr.w	r0, [ip]
 801ac8e:	f10c 0c08 	add.w	ip, ip, #8
 801ac92:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801ac96:	46f0      	mov	r8, lr
 801ac98:	45cc      	cmp	ip, r9
 801ac9a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ac9e:	46c6      	mov	lr, r8
 801aca0:	d1f3      	bne.n	801ac8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801aca2:	f8dc 0000 	ldr.w	r0, [ip]
 801aca6:	f8c8 0000 	str.w	r0, [r8]
 801acaa:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801acae:	f8a8 1004 	strh.w	r1, [r8, #4]
 801acb2:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801acb6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801acba:	d009      	beq.n	801acd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801acbc:	7b51      	ldrb	r1, [r2, #13]
 801acbe:	7992      	ldrb	r2, [r2, #6]
 801acc0:	0149      	lsls	r1, r1, #5
 801acc2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801acc6:	4311      	orrs	r1, r2
 801acc8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801accc:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801acd0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801acd4:	d00d      	beq.n	801acf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801acd6:	1bdb      	subs	r3, r3, r7
 801acd8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801acdc:	b29b      	uxth	r3, r3
 801acde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ace2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801ace6:	10db      	asrs	r3, r3, #3
 801ace8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801acec:	4313      	orrs	r3, r2
 801acee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801acf2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801acf6:	00cb      	lsls	r3, r1, #3
 801acf8:	0648      	lsls	r0, r1, #25
 801acfa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801acfe:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801ad02:	ea43 0302 	orr.w	r3, r3, r2
 801ad06:	bf44      	itt	mi
 801ad08:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ad0c:	b21b      	sxthmi	r3, r3
 801ad0e:	e7b1      	b.n	801ac74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801ad10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ad10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad14:	461e      	mov	r6, r3
 801ad16:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ad18:	4604      	mov	r4, r0
 801ad1a:	4617      	mov	r7, r2
 801ad1c:	b92b      	cbnz	r3, 801ad2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801ad1e:	4b25      	ldr	r3, [pc, #148]	; (801adb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801ad20:	21bf      	movs	r1, #191	; 0xbf
 801ad22:	4a25      	ldr	r2, [pc, #148]	; (801adb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801ad24:	4825      	ldr	r0, [pc, #148]	; (801adbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801ad26:	f00b f8cb 	bl	8025ec0 <__assert_func>
 801ad2a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ad2c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ad30:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ad34:	f7ed fccc 	bl	80086d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ad38:	4605      	mov	r5, r0
 801ad3a:	b918      	cbnz	r0, 801ad44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801ad3c:	6030      	str	r0, [r6, #0]
 801ad3e:	4628      	mov	r0, r5
 801ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad44:	683b      	ldr	r3, [r7, #0]
 801ad46:	4601      	mov	r1, r0
 801ad48:	4638      	mov	r0, r7
 801ad4a:	68db      	ldr	r3, [r3, #12]
 801ad4c:	4798      	blx	r3
 801ad4e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ad52:	4602      	mov	r2, r0
 801ad54:	6030      	str	r0, [r6, #0]
 801ad56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ad5a:	d213      	bcs.n	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801ad5c:	4643      	mov	r3, r8
 801ad5e:	4639      	mov	r1, r7
 801ad60:	4620      	mov	r0, r4
 801ad62:	f7ff fe33 	bl	801a9cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ad66:	6030      	str	r0, [r6, #0]
 801ad68:	6833      	ldr	r3, [r6, #0]
 801ad6a:	b143      	cbz	r3, 801ad7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801ad6c:	7b5a      	ldrb	r2, [r3, #13]
 801ad6e:	7a9b      	ldrb	r3, [r3, #10]
 801ad70:	0052      	lsls	r2, r2, #1
 801ad72:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ad76:	4313      	orrs	r3, r2
 801ad78:	bf0c      	ite	eq
 801ad7a:	2301      	moveq	r3, #1
 801ad7c:	2300      	movne	r3, #0
 801ad7e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ad82:	e7dc      	b.n	801ad3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801ad84:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ad88:	b29b      	uxth	r3, r3
 801ad8a:	2b7f      	cmp	r3, #127	; 0x7f
 801ad8c:	d804      	bhi.n	801ad98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801ad8e:	4639      	mov	r1, r7
 801ad90:	4620      	mov	r0, r4
 801ad92:	f7ff fd01 	bl	801a798 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ad96:	e7e6      	b.n	801ad66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ad98:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d0e3      	beq.n	801ad68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ada0:	f640 1302 	movw	r3, #2306	; 0x902
 801ada4:	429d      	cmp	r5, r3
 801ada6:	d1df      	bne.n	801ad68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ada8:	4601      	mov	r1, r0
 801adaa:	4620      	mov	r0, r4
 801adac:	f7ff fcc5 	bl	801a73a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801adb0:	e7d9      	b.n	801ad66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801adb2:	bf00      	nop
 801adb4:	0802d3e0 	.word	0x0802d3e0
 801adb8:	0802d652 	.word	0x0802d652
 801adbc:	0802d3e9 	.word	0x0802d3e9

0801adc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801adc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801adc4:	461e      	mov	r6, r3
 801adc6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801adc8:	4604      	mov	r4, r0
 801adca:	4617      	mov	r7, r2
 801adcc:	b92b      	cbnz	r3, 801adda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801adce:	4b26      	ldr	r3, [pc, #152]	; (801ae68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801add0:	21bf      	movs	r1, #191	; 0xbf
 801add2:	4a26      	ldr	r2, [pc, #152]	; (801ae6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801add4:	4826      	ldr	r0, [pc, #152]	; (801ae70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801add6:	f00b f873 	bl	8025ec0 <__assert_func>
 801adda:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801addc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ade0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ade4:	f7ed fc74 	bl	80086d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ade8:	4605      	mov	r5, r0
 801adea:	b918      	cbnz	r0, 801adf4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801adec:	6030      	str	r0, [r6, #0]
 801adee:	4628      	mov	r0, r5
 801adf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801adf4:	683b      	ldr	r3, [r7, #0]
 801adf6:	4601      	mov	r1, r0
 801adf8:	4638      	mov	r0, r7
 801adfa:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801adfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ae02:	47c8      	blx	r9
 801ae04:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ae08:	4602      	mov	r2, r0
 801ae0a:	6030      	str	r0, [r6, #0]
 801ae0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ae10:	d213      	bcs.n	801ae3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801ae12:	4643      	mov	r3, r8
 801ae14:	4639      	mov	r1, r7
 801ae16:	4620      	mov	r0, r4
 801ae18:	f7ff fdd8 	bl	801a9cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ae1c:	6030      	str	r0, [r6, #0]
 801ae1e:	6833      	ldr	r3, [r6, #0]
 801ae20:	b143      	cbz	r3, 801ae34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ae22:	7b5a      	ldrb	r2, [r3, #13]
 801ae24:	7a9b      	ldrb	r3, [r3, #10]
 801ae26:	0052      	lsls	r2, r2, #1
 801ae28:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ae2c:	4313      	orrs	r3, r2
 801ae2e:	bf0c      	ite	eq
 801ae30:	2301      	moveq	r3, #1
 801ae32:	2300      	movne	r3, #0
 801ae34:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ae38:	e7d9      	b.n	801adee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801ae3a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ae3e:	b29b      	uxth	r3, r3
 801ae40:	2b7f      	cmp	r3, #127	; 0x7f
 801ae42:	d804      	bhi.n	801ae4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801ae44:	4639      	mov	r1, r7
 801ae46:	4620      	mov	r0, r4
 801ae48:	f7ff fca6 	bl	801a798 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ae4c:	e7e6      	b.n	801ae1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ae4e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d0e3      	beq.n	801ae1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ae56:	f640 1302 	movw	r3, #2306	; 0x902
 801ae5a:	429d      	cmp	r5, r3
 801ae5c:	d1df      	bne.n	801ae1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ae5e:	4601      	mov	r1, r0
 801ae60:	4620      	mov	r0, r4
 801ae62:	f7ff fc6a 	bl	801a73a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ae66:	e7d9      	b.n	801ae1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ae68:	0802d3e0 	.word	0x0802d3e0
 801ae6c:	0802d652 	.word	0x0802d652
 801ae70:	0802d3e9 	.word	0x0802d3e9

0801ae74 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ae74:	b510      	push	{r4, lr}
 801ae76:	4604      	mov	r4, r0
 801ae78:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801ae7a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae7c:	b9d9      	cbnz	r1, 801aeb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801ae7e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae80:	2b0a      	cmp	r3, #10
 801ae82:	d036      	beq.n	801aef2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801ae84:	4620      	mov	r0, r4
 801ae86:	f7ff fc1f 	bl	801a6c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ae8a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ae8c:	2b09      	cmp	r3, #9
 801ae8e:	d906      	bls.n	801ae9e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801ae90:	4b18      	ldr	r3, [pc, #96]	; (801aef4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801ae92:	f240 1103 	movw	r1, #259	; 0x103
 801ae96:	4a18      	ldr	r2, [pc, #96]	; (801aef8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801ae98:	4818      	ldr	r0, [pc, #96]	; (801aefc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801ae9a:	f00b f811 	bl	8025ec0 <__assert_func>
 801ae9e:	1c5a      	adds	r2, r3, #1
 801aea0:	8622      	strh	r2, [r4, #48]	; 0x30
 801aea2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801aea4:	4413      	add	r3, r2
 801aea6:	b29b      	uxth	r3, r3
 801aea8:	2b09      	cmp	r3, #9
 801aeaa:	bf88      	it	hi
 801aeac:	3b0a      	subhi	r3, #10
 801aeae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aeb2:	8358      	strh	r0, [r3, #26]
 801aeb4:	e7e3      	b.n	801ae7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801aeb6:	2b0a      	cmp	r3, #10
 801aeb8:	d01b      	beq.n	801aef2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801aeba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aebc:	3901      	subs	r1, #1
 801aebe:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801aec2:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801aec4:	8721      	strh	r1, [r4, #56]	; 0x38
 801aec6:	1c51      	adds	r1, r2, #1
 801aec8:	b289      	uxth	r1, r1
 801aeca:	2901      	cmp	r1, #1
 801aecc:	bf8a      	itet	hi
 801aece:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aed2:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801aed4:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801aed6:	2b09      	cmp	r3, #9
 801aed8:	d8da      	bhi.n	801ae90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801aeda:	1c5a      	adds	r2, r3, #1
 801aedc:	8622      	strh	r2, [r4, #48]	; 0x30
 801aede:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801aee0:	4413      	add	r3, r2
 801aee2:	b29b      	uxth	r3, r3
 801aee4:	2b09      	cmp	r3, #9
 801aee6:	bf88      	it	hi
 801aee8:	3b0a      	subhi	r3, #10
 801aeea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aeee:	8358      	strh	r0, [r3, #26]
 801aef0:	e7c2      	b.n	801ae78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801aef2:	bd10      	pop	{r4, pc}
 801aef4:	0802d415 	.word	0x0802d415
 801aef8:	0802d7a8 	.word	0x0802d7a8
 801aefc:	0802d3e9 	.word	0x0802d3e9

0801af00 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801af00:	b538      	push	{r3, r4, r5, lr}
 801af02:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801af04:	4604      	mov	r4, r0
 801af06:	b92a      	cbnz	r2, 801af14 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801af08:	4b13      	ldr	r3, [pc, #76]	; (801af58 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801af0a:	21d4      	movs	r1, #212	; 0xd4
 801af0c:	4a13      	ldr	r2, [pc, #76]	; (801af5c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801af0e:	4814      	ldr	r0, [pc, #80]	; (801af60 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801af10:	f00a ffd6 	bl	8025ec0 <__assert_func>
 801af14:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801af16:	3a01      	subs	r2, #1
 801af18:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801af1c:	8b4d      	ldrh	r5, [r1, #26]
 801af1e:	8602      	strh	r2, [r0, #48]	; 0x30
 801af20:	1c5a      	adds	r2, r3, #1
 801af22:	b292      	uxth	r2, r2
 801af24:	2a09      	cmp	r2, #9
 801af26:	bf8a      	itet	hi
 801af28:	3b09      	subhi	r3, #9
 801af2a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801af2c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801af2e:	f7ff ffa1 	bl	801ae74 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801af32:	8b23      	ldrh	r3, [r4, #24]
 801af34:	2b01      	cmp	r3, #1
 801af36:	bf9c      	itt	ls
 801af38:	3301      	addls	r3, #1
 801af3a:	8323      	strhls	r3, [r4, #24]
 801af3c:	8ae3      	ldrh	r3, [r4, #22]
 801af3e:	b90b      	cbnz	r3, 801af44 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801af40:	2302      	movs	r3, #2
 801af42:	82e3      	strh	r3, [r4, #22]
 801af44:	8ae3      	ldrh	r3, [r4, #22]
 801af46:	4628      	mov	r0, r5
 801af48:	3b01      	subs	r3, #1
 801af4a:	b29b      	uxth	r3, r3
 801af4c:	82e3      	strh	r3, [r4, #22]
 801af4e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801af52:	8265      	strh	r5, [r4, #18]
 801af54:	bd38      	pop	{r3, r4, r5, pc}
 801af56:	bf00      	nop
 801af58:	0802d3e0 	.word	0x0802d3e0
 801af5c:	0802d6fd 	.word	0x0802d6fd
 801af60:	0802d3e9 	.word	0x0802d3e9

0801af64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801af64:	428a      	cmp	r2, r1
 801af66:	b538      	push	{r3, r4, r5, lr}
 801af68:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801af6a:	d90c      	bls.n	801af86 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801af6c:	b92c      	cbnz	r4, 801af7a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801af6e:	4b1c      	ldr	r3, [pc, #112]	; (801afe0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801af70:	21e0      	movs	r1, #224	; 0xe0
 801af72:	4a1c      	ldr	r2, [pc, #112]	; (801afe4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801af74:	481c      	ldr	r0, [pc, #112]	; (801afe8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801af76:	f00a ffa3 	bl	8025ec0 <__assert_func>
 801af7a:	3c01      	subs	r4, #1
 801af7c:	4b1b      	ldr	r3, [pc, #108]	; (801afec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801af7e:	4a1c      	ldr	r2, [pc, #112]	; (801aff0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801af80:	21c4      	movs	r1, #196	; 0xc4
 801af82:	8604      	strh	r4, [r0, #48]	; 0x30
 801af84:	e7f6      	b.n	801af74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801af86:	428c      	cmp	r4, r1
 801af88:	d203      	bcs.n	801af92 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801af8a:	4b1a      	ldr	r3, [pc, #104]	; (801aff4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801af8c:	21ca      	movs	r1, #202	; 0xca
 801af8e:	4a1a      	ldr	r2, [pc, #104]	; (801aff8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801af90:	e7f0      	b.n	801af74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801af92:	1a64      	subs	r4, r4, r1
 801af94:	250a      	movs	r5, #10
 801af96:	8604      	strh	r4, [r0, #48]	; 0x30
 801af98:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801af9a:	4421      	add	r1, r4
 801af9c:	b289      	uxth	r1, r1
 801af9e:	2909      	cmp	r1, #9
 801afa0:	bf88      	it	hi
 801afa2:	390a      	subhi	r1, #10
 801afa4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801afa6:	b1ba      	cbz	r2, 801afd8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801afa8:	3a01      	subs	r2, #1
 801afaa:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801afac:	b292      	uxth	r2, r2
 801afae:	2909      	cmp	r1, #9
 801afb0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801afb4:	d903      	bls.n	801afbe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801afb6:	4b11      	ldr	r3, [pc, #68]	; (801affc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801afb8:	21e5      	movs	r1, #229	; 0xe5
 801afba:	4a11      	ldr	r2, [pc, #68]	; (801b000 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801afbc:	e7da      	b.n	801af74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801afbe:	3101      	adds	r1, #1
 801afc0:	8601      	strh	r1, [r0, #48]	; 0x30
 801afc2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801afc4:	b901      	cbnz	r1, 801afc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801afc6:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801afc8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801afca:	3901      	subs	r1, #1
 801afcc:	b289      	uxth	r1, r1
 801afce:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801afd0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801afd4:	834c      	strh	r4, [r1, #26]
 801afd6:	e7e6      	b.n	801afa6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801afd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afdc:	f7ff bf4a 	b.w	801ae74 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801afe0:	0802d3e0 	.word	0x0802d3e0
 801afe4:	0802d4d6 	.word	0x0802d4d6
 801afe8:	0802d3e9 	.word	0x0802d3e9
 801afec:	0802d421 	.word	0x0802d421
 801aff0:	0802d580 	.word	0x0802d580
 801aff4:	0802d42f 	.word	0x0802d42f
 801aff8:	0802d857 	.word	0x0802d857
 801affc:	0802d43b 	.word	0x0802d43b
 801b000:	0802d44e 	.word	0x0802d44e

0801b004 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b004:	3a01      	subs	r2, #1
 801b006:	b570      	push	{r4, r5, r6, lr}
 801b008:	b292      	uxth	r2, r2
 801b00a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b00e:	42b2      	cmp	r2, r6
 801b010:	d019      	beq.n	801b046 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801b012:	8b04      	ldrh	r4, [r0, #24]
 801b014:	f831 5b02 	ldrh.w	r5, [r1], #2
 801b018:	4294      	cmp	r4, r2
 801b01a:	d805      	bhi.n	801b028 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801b01c:	4b19      	ldr	r3, [pc, #100]	; (801b084 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b01e:	4a1a      	ldr	r2, [pc, #104]	; (801b088 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801b020:	21c4      	movs	r1, #196	; 0xc4
 801b022:	481a      	ldr	r0, [pc, #104]	; (801b08c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801b024:	f00a ff4c 	bl	8025ec0 <__assert_func>
 801b028:	8ac4      	ldrh	r4, [r0, #22]
 801b02a:	4414      	add	r4, r2
 801b02c:	3a01      	subs	r2, #1
 801b02e:	b2a4      	uxth	r4, r4
 801b030:	b292      	uxth	r2, r2
 801b032:	2c01      	cmp	r4, #1
 801b034:	bf88      	it	hi
 801b036:	3c02      	subhi	r4, #2
 801b038:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b03c:	8a64      	ldrh	r4, [r4, #18]
 801b03e:	42ac      	cmp	r4, r5
 801b040:	d0e5      	beq.n	801b00e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801b042:	2000      	movs	r0, #0
 801b044:	bd70      	pop	{r4, r5, r6, pc}
 801b046:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b04a:	2400      	movs	r4, #0
 801b04c:	4413      	add	r3, r2
 801b04e:	b2a2      	uxth	r2, r4
 801b050:	429a      	cmp	r2, r3
 801b052:	da14      	bge.n	801b07e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801b054:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801b056:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b05a:	4296      	cmp	r6, r2
 801b05c:	d802      	bhi.n	801b064 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801b05e:	4b09      	ldr	r3, [pc, #36]	; (801b084 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b060:	4a0b      	ldr	r2, [pc, #44]	; (801b090 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801b062:	e7dd      	b.n	801b020 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801b064:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801b066:	3401      	adds	r4, #1
 801b068:	4432      	add	r2, r6
 801b06a:	b292      	uxth	r2, r2
 801b06c:	2a09      	cmp	r2, #9
 801b06e:	bf88      	it	hi
 801b070:	3a0a      	subhi	r2, #10
 801b072:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b076:	8b52      	ldrh	r2, [r2, #26]
 801b078:	42aa      	cmp	r2, r5
 801b07a:	d0e8      	beq.n	801b04e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801b07c:	e7e1      	b.n	801b042 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801b07e:	2001      	movs	r0, #1
 801b080:	e7e0      	b.n	801b044 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801b082:	bf00      	nop
 801b084:	0802d421 	.word	0x0802d421
 801b088:	0802d8db 	.word	0x0802d8db
 801b08c:	0802d3e9 	.word	0x0802d3e9
 801b090:	0802d580 	.word	0x0802d580

0801b094 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b098:	4605      	mov	r5, r0
 801b09a:	4616      	mov	r6, r2
 801b09c:	1c8c      	adds	r4, r1, #2
 801b09e:	8809      	ldrh	r1, [r1, #0]
 801b0a0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b0a4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b0a8:	42b3      	cmp	r3, r6
 801b0aa:	d124      	bne.n	801b0f6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b0ac:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b0b0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b0b4:	f001 070f 	and.w	r7, r1, #15
 801b0b8:	4652      	mov	r2, sl
 801b0ba:	f8cd 8000 	str.w	r8, [sp]
 801b0be:	464b      	mov	r3, r9
 801b0c0:	4621      	mov	r1, r4
 801b0c2:	4628      	mov	r0, r5
 801b0c4:	f7ff ff9e 	bl	801b004 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b0c8:	4683      	mov	fp, r0
 801b0ca:	b168      	cbz	r0, 801b0e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b0cc:	eb0a 0109 	add.w	r1, sl, r9
 801b0d0:	463a      	mov	r2, r7
 801b0d2:	4628      	mov	r0, r5
 801b0d4:	4441      	add	r1, r8
 801b0d6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b0da:	4649      	mov	r1, r9
 801b0dc:	f7ff ff42 	bl	801af64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b0e0:	4658      	mov	r0, fp
 801b0e2:	b003      	add	sp, #12
 801b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0e8:	eb07 010a 	add.w	r1, r7, sl
 801b0ec:	4449      	add	r1, r9
 801b0ee:	4441      	add	r1, r8
 801b0f0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b0f4:	e7d2      	b.n	801b09c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b0f6:	f04f 0b00 	mov.w	fp, #0
 801b0fa:	e7f1      	b.n	801b0e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b0fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b0fc:	b570      	push	{r4, r5, r6, lr}
 801b0fe:	8810      	ldrh	r0, [r2, #0]
 801b100:	4298      	cmp	r0, r3
 801b102:	d817      	bhi.n	801b134 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b104:	1e48      	subs	r0, r1, #1
 801b106:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b10a:	4298      	cmp	r0, r3
 801b10c:	d312      	bcc.n	801b134 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b10e:	2400      	movs	r4, #0
 801b110:	428c      	cmp	r4, r1
 801b112:	d20f      	bcs.n	801b134 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b114:	1860      	adds	r0, r4, r1
 801b116:	1040      	asrs	r0, r0, #1
 801b118:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b11c:	0085      	lsls	r5, r0, #2
 801b11e:	42b3      	cmp	r3, r6
 801b120:	d902      	bls.n	801b128 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b122:	3001      	adds	r0, #1
 801b124:	b284      	uxth	r4, r0
 801b126:	e7f3      	b.n	801b110 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b128:	d201      	bcs.n	801b12e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b12a:	b281      	uxth	r1, r0
 801b12c:	e7f0      	b.n	801b110 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b12e:	442a      	add	r2, r5
 801b130:	8850      	ldrh	r0, [r2, #2]
 801b132:	bd70      	pop	{r4, r5, r6, pc}
 801b134:	2000      	movs	r0, #0
 801b136:	e7fc      	b.n	801b132 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b138 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b13c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b13e:	4604      	mov	r4, r0
 801b140:	260b      	movs	r6, #11
 801b142:	886f      	ldrh	r7, [r5, #2]
 801b144:	087f      	lsrs	r7, r7, #1
 801b146:	3e01      	subs	r6, #1
 801b148:	d01b      	beq.n	801b182 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b14a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b14c:	b92b      	cbnz	r3, 801b15a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801b14e:	4b0e      	ldr	r3, [pc, #56]	; (801b188 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801b150:	21bf      	movs	r1, #191	; 0xbf
 801b152:	4a0e      	ldr	r2, [pc, #56]	; (801b18c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801b154:	480e      	ldr	r0, [pc, #56]	; (801b190 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801b156:	f00a feb3 	bl	8025ec0 <__assert_func>
 801b15a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b15c:	462a      	mov	r2, r5
 801b15e:	4639      	mov	r1, r7
 801b160:	4620      	mov	r0, r4
 801b162:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b166:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b16a:	4643      	mov	r3, r8
 801b16c:	f7ff ffc6 	bl	801b0fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b170:	b138      	cbz	r0, 801b182 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b172:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b176:	4642      	mov	r2, r8
 801b178:	4620      	mov	r0, r4
 801b17a:	f7ff ff8b 	bl	801b094 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b17e:	2800      	cmp	r0, #0
 801b180:	d1e1      	bne.n	801b146 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b186:	bf00      	nop
 801b188:	0802d3e0 	.word	0x0802d3e0
 801b18c:	0802d652 	.word	0x0802d652
 801b190:	0802d3e9 	.word	0x0802d3e9

0801b194 <_ZN8touchgfx8ceil28_4El>:
 801b194:	f110 030f 	adds.w	r3, r0, #15
 801b198:	d401      	bmi.n	801b19e <_ZN8touchgfx8ceil28_4El+0xa>
 801b19a:	1118      	asrs	r0, r3, #4
 801b19c:	4770      	bx	lr
 801b19e:	2210      	movs	r2, #16
 801b1a0:	f1c0 0001 	rsb	r0, r0, #1
 801b1a4:	fb93 f3f2 	sdiv	r3, r3, r2
 801b1a8:	f010 000f 	ands.w	r0, r0, #15
 801b1ac:	bf18      	it	ne
 801b1ae:	2001      	movne	r0, #1
 801b1b0:	1a18      	subs	r0, r3, r0
 801b1b2:	4770      	bx	lr

0801b1b4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801b1b4:	2900      	cmp	r1, #0
 801b1b6:	b538      	push	{r3, r4, r5, lr}
 801b1b8:	dc05      	bgt.n	801b1c6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801b1ba:	4b0f      	ldr	r3, [pc, #60]	; (801b1f8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801b1bc:	21f7      	movs	r1, #247	; 0xf7
 801b1be:	4a0f      	ldr	r2, [pc, #60]	; (801b1fc <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801b1c0:	480f      	ldr	r0, [pc, #60]	; (801b200 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801b1c2:	f00a fe7d 	bl	8025ec0 <__assert_func>
 801b1c6:	2800      	cmp	r0, #0
 801b1c8:	db06      	blt.n	801b1d8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801b1ca:	fb90 f4f1 	sdiv	r4, r0, r1
 801b1ce:	fb01 0114 	mls	r1, r1, r4, r0
 801b1d2:	6014      	str	r4, [r2, #0]
 801b1d4:	6019      	str	r1, [r3, #0]
 801b1d6:	bd38      	pop	{r3, r4, r5, pc}
 801b1d8:	4240      	negs	r0, r0
 801b1da:	fb90 f4f1 	sdiv	r4, r0, r1
 801b1de:	4265      	negs	r5, r4
 801b1e0:	fb01 0014 	mls	r0, r1, r4, r0
 801b1e4:	6015      	str	r5, [r2, #0]
 801b1e6:	6018      	str	r0, [r3, #0]
 801b1e8:	2800      	cmp	r0, #0
 801b1ea:	d0f4      	beq.n	801b1d6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801b1ec:	6810      	ldr	r0, [r2, #0]
 801b1ee:	3801      	subs	r0, #1
 801b1f0:	6010      	str	r0, [r2, #0]
 801b1f2:	6818      	ldr	r0, [r3, #0]
 801b1f4:	1a09      	subs	r1, r1, r0
 801b1f6:	e7ed      	b.n	801b1d4 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801b1f8:	0802d9ac 	.word	0x0802d9ac
 801b1fc:	0802d9eb 	.word	0x0802d9eb
 801b200:	0802d9bc 	.word	0x0802d9bc

0801b204 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b204:	b570      	push	{r4, r5, r6, lr}
 801b206:	694a      	ldr	r2, [r1, #20]
 801b208:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b20a:	684b      	ldr	r3, [r1, #4]
 801b20c:	1b54      	subs	r4, r2, r5
 801b20e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801b210:	f000 8106 	beq.w	801b420 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801b214:	1b9b      	subs	r3, r3, r6
 801b216:	d003      	beq.n	801b220 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b218:	4363      	muls	r3, r4
 801b21a:	2210      	movs	r2, #16
 801b21c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b220:	680c      	ldr	r4, [r1, #0]
 801b222:	698a      	ldr	r2, [r1, #24]
 801b224:	1b65      	subs	r5, r4, r5
 801b226:	f000 80fd 	beq.w	801b424 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801b22a:	1b92      	subs	r2, r2, r6
 801b22c:	d003      	beq.n	801b236 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b22e:	436a      	muls	r2, r5
 801b230:	2410      	movs	r4, #16
 801b232:	fb92 f2f4 	sdiv	r2, r2, r4
 801b236:	1a9b      	subs	r3, r3, r2
 801b238:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b460 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801b23c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b240:	460a      	mov	r2, r1
 801b242:	ee07 3a90 	vmov	s15, r3
 801b246:	f100 040c 	add.w	r4, r0, #12
 801b24a:	4603      	mov	r3, r0
 801b24c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b250:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b254:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b258:	eeb1 6a43 	vneg.f32	s12, s6
 801b25c:	edd2 7a02 	vldr	s15, [r2, #8]
 801b260:	3214      	adds	r2, #20
 801b262:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b266:	ece3 6a01 	vstmia	r3!, {s13}
 801b26a:	429c      	cmp	r4, r3
 801b26c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801b270:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b274:	edc3 7a02 	vstr	s15, [r3, #8]
 801b278:	ed52 7a01 	vldr	s15, [r2, #-4]
 801b27c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b280:	edc3 7a05 	vstr	s15, [r3, #20]
 801b284:	d1ea      	bne.n	801b25c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b286:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b288:	698b      	ldr	r3, [r1, #24]
 801b28a:	edd0 4a02 	vldr	s9, [r0, #8]
 801b28e:	1a9b      	subs	r3, r3, r2
 801b290:	edd0 3a00 	vldr	s7, [r0]
 801b294:	edd0 6a01 	vldr	s13, [r0, #4]
 801b298:	ee07 3a90 	vmov	s15, r3
 801b29c:	684b      	ldr	r3, [r1, #4]
 801b29e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b2a2:	ed90 5a05 	vldr	s10, [r0, #20]
 801b2a6:	1a9b      	subs	r3, r3, r2
 801b2a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2ac:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b2b0:	ed90 2a03 	vldr	s4, [r0, #12]
 801b2b4:	ee07 3a10 	vmov	s14, r3
 801b2b8:	edd0 5a04 	vldr	s11, [r0, #16]
 801b2bc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b2c0:	ed90 1a07 	vldr	s2, [r0, #28]
 801b2c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b2c8:	edd0 2a06 	vldr	s5, [r0, #24]
 801b2cc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b2d0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b2d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b2d8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b2dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b2e0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b2e4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b2e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b2ea:	694a      	ldr	r2, [r1, #20]
 801b2ec:	1b13      	subs	r3, r2, r4
 801b2ee:	ee07 3a10 	vmov	s14, r3
 801b2f2:	680b      	ldr	r3, [r1, #0]
 801b2f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b2f8:	1b1b      	subs	r3, r3, r4
 801b2fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b2fe:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b302:	ee07 3a10 	vmov	s14, r3
 801b306:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b30a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b30e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b312:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b316:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b31a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b31c:	698b      	ldr	r3, [r1, #24]
 801b31e:	1a9b      	subs	r3, r3, r2
 801b320:	ee06 3a90 	vmov	s13, r3
 801b324:	684b      	ldr	r3, [r1, #4]
 801b326:	1a9b      	subs	r3, r3, r2
 801b328:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b32c:	ee07 3a10 	vmov	s14, r3
 801b330:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b334:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b338:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b33c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b340:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b344:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b348:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b34c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b34e:	694a      	ldr	r2, [r1, #20]
 801b350:	1b13      	subs	r3, r2, r4
 801b352:	ee07 3a10 	vmov	s14, r3
 801b356:	680b      	ldr	r3, [r1, #0]
 801b358:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b35c:	1b1b      	subs	r3, r3, r4
 801b35e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b362:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b366:	ee07 3a10 	vmov	s14, r3
 801b36a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b36e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b372:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b376:	edd0 5a08 	vldr	s11, [r0, #32]
 801b37a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b37e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b382:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b386:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b38a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b38c:	698b      	ldr	r3, [r1, #24]
 801b38e:	1a9b      	subs	r3, r3, r2
 801b390:	ee07 3a10 	vmov	s14, r3
 801b394:	684b      	ldr	r3, [r1, #4]
 801b396:	1a9b      	subs	r3, r3, r2
 801b398:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b39c:	ee01 3a90 	vmov	s3, r3
 801b3a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b3a4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b3a8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b3ac:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b3b0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b3b4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b3b8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b3bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b3be:	694a      	ldr	r2, [r1, #20]
 801b3c0:	1b13      	subs	r3, r2, r4
 801b3c2:	ee03 3a10 	vmov	s6, r3
 801b3c6:	680b      	ldr	r3, [r1, #0]
 801b3c8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b3cc:	1b1b      	subs	r3, r3, r4
 801b3ce:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b3d2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b3d6:	ee03 3a10 	vmov	s6, r3
 801b3da:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b3de:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b3e2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b3e6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b3ea:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b3ee:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b3f2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b3f6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3fe:	dd13      	ble.n	801b428 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b404:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b408:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b40a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b40e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b416:	dd15      	ble.n	801b444 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801b418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b41c:	6403      	str	r3, [r0, #64]	; 0x40
 801b41e:	bd70      	pop	{r4, r5, r6, pc}
 801b420:	4623      	mov	r3, r4
 801b422:	e6fd      	b.n	801b220 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b424:	462a      	mov	r2, r5
 801b426:	e706      	b.n	801b236 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b428:	d502      	bpl.n	801b430 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801b42a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b42e:	e7e9      	b.n	801b404 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801b430:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b434:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b438:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b440:	dade      	bge.n	801b400 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801b442:	e7f2      	b.n	801b42a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b444:	d502      	bpl.n	801b44c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801b446:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b44a:	e7e7      	b.n	801b41c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b44c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b450:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b454:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b45c:	dadc      	bge.n	801b418 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b45e:	e7f2      	b.n	801b446 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b460:	3d800000 	.word	0x3d800000

0801b464 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b468:	f04f 0814 	mov.w	r8, #20
 801b46c:	4604      	mov	r4, r0
 801b46e:	4617      	mov	r7, r2
 801b470:	460d      	mov	r5, r1
 801b472:	fb08 f903 	mul.w	r9, r8, r3
 801b476:	461e      	mov	r6, r3
 801b478:	eb02 0a09 	add.w	sl, r2, r9
 801b47c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b480:	f7ff fe88 	bl	801b194 <_ZN8touchgfx8ceil28_4El>
 801b484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b486:	6160      	str	r0, [r4, #20]
 801b488:	fb08 f803 	mul.w	r8, r8, r3
 801b48c:	9001      	str	r0, [sp, #4]
 801b48e:	eb07 0b08 	add.w	fp, r7, r8
 801b492:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b496:	f7ff fe7d 	bl	801b194 <_ZN8touchgfx8ceil28_4El>
 801b49a:	9a01      	ldr	r2, [sp, #4]
 801b49c:	1a80      	subs	r0, r0, r2
 801b49e:	61a0      	str	r0, [r4, #24]
 801b4a0:	2800      	cmp	r0, #0
 801b4a2:	f000 8088 	beq.w	801b5b6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801b4a6:	f857 3009 	ldr.w	r3, [r7, r9]
 801b4aa:	f857 c008 	ldr.w	ip, [r7, r8]
 801b4ae:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b4b2:	ebac 0c03 	sub.w	ip, ip, r3
 801b4b6:	f8da 1004 	ldr.w	r1, [sl, #4]
 801b4ba:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801b4be:	1a40      	subs	r0, r0, r1
 801b4c0:	fb0b f202 	mul.w	r2, fp, r2
 801b4c4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801b4c8:	fb0c 2211 	mls	r2, ip, r1, r2
 801b4cc:	4641      	mov	r1, r8
 801b4ce:	fb00 2003 	mla	r0, r0, r3, r2
 801b4d2:	f104 0310 	add.w	r3, r4, #16
 801b4d6:	4622      	mov	r2, r4
 801b4d8:	3801      	subs	r0, #1
 801b4da:	4440      	add	r0, r8
 801b4dc:	f7ff fe6a 	bl	801b1b4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b4e0:	f104 0308 	add.w	r3, r4, #8
 801b4e4:	1d22      	adds	r2, r4, #4
 801b4e6:	4641      	mov	r1, r8
 801b4e8:	4658      	mov	r0, fp
 801b4ea:	f7ff fe63 	bl	801b1b4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b4ee:	f8c4 800c 	str.w	r8, [r4, #12]
 801b4f2:	6962      	ldr	r2, [r4, #20]
 801b4f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b4f8:	eddf 6a31 	vldr	s13, [pc, #196]	; 801b5c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b4fc:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b500:	6822      	ldr	r2, [r4, #0]
 801b502:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b506:	ee07 3a10 	vmov	s14, r3
 801b50a:	f857 3009 	ldr.w	r3, [r7, r9]
 801b50e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b512:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b516:	ee07 3a90 	vmov	s15, r3
 801b51a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801b51e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b526:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b52a:	edd3 6a00 	vldr	s13, [r3]
 801b52e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b532:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b536:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b53a:	edc4 6a07 	vstr	s13, [r4, #28]
 801b53e:	edd4 6a01 	vldr	s13, [r4, #4]
 801b542:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801b546:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b54a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b54e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b552:	ed84 6a08 	vstr	s12, [r4, #32]
 801b556:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801b558:	6262      	str	r2, [r4, #36]	; 0x24
 801b55a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801b55e:	ed93 6a03 	vldr	s12, [r3, #12]
 801b562:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b566:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b56a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b56e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801b572:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b576:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801b57a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b57e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801b582:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801b584:	6322      	str	r2, [r4, #48]	; 0x30
 801b586:	ed93 6a06 	vldr	s12, [r3, #24]
 801b58a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801b58e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b592:	eeb0 7a46 	vmov.f32	s14, s12
 801b596:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801b59a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b59e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801b5a2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801b5a6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801b5aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b5ae:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801b5b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b5b4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b5b6:	4620      	mov	r0, r4
 801b5b8:	b003      	add	sp, #12
 801b5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5be:	bf00      	nop
 801b5c0:	3d800000 	.word	0x3d800000

0801b5c4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b5c4:	4602      	mov	r2, r0
 801b5c6:	b148      	cbz	r0, 801b5dc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	b298      	uxth	r0, r3
 801b5cc:	3301      	adds	r3, #1
 801b5ce:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b5d2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b5d6:	2900      	cmp	r1, #0
 801b5d8:	d1f7      	bne.n	801b5ca <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b5da:	4770      	bx	lr
 801b5dc:	4770      	bx	lr

0801b5de <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b5de:	b530      	push	{r4, r5, lr}
 801b5e0:	4604      	mov	r4, r0
 801b5e2:	b159      	cbz	r1, 801b5fc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b5e4:	b148      	cbz	r0, 801b5fa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	b298      	uxth	r0, r3
 801b5ea:	4282      	cmp	r2, r0
 801b5ec:	d905      	bls.n	801b5fa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b5ee:	5ccd      	ldrb	r5, [r1, r3]
 801b5f0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b5f4:	3301      	adds	r3, #1
 801b5f6:	2d00      	cmp	r5, #0
 801b5f8:	d1f6      	bne.n	801b5e8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b5fa:	bd30      	pop	{r4, r5, pc}
 801b5fc:	4608      	mov	r0, r1
 801b5fe:	e7fc      	b.n	801b5fa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b600 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801b600:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b602:	468c      	mov	ip, r1
 801b604:	b08b      	sub	sp, #44	; 0x2c
 801b606:	2100      	movs	r1, #0
 801b608:	ae01      	add	r6, sp, #4
 801b60a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b60e:	211f      	movs	r1, #31
 801b610:	fbb0 f7f3 	udiv	r7, r0, r3
 801b614:	fb03 0517 	mls	r5, r3, r7, r0
 801b618:	4638      	mov	r0, r7
 801b61a:	b2ec      	uxtb	r4, r5
 801b61c:	2d09      	cmp	r5, #9
 801b61e:	bfd4      	ite	le
 801b620:	3430      	addle	r4, #48	; 0x30
 801b622:	3457      	addgt	r4, #87	; 0x57
 801b624:	b2e4      	uxtb	r4, r4
 801b626:	558c      	strb	r4, [r1, r6]
 801b628:	1e4c      	subs	r4, r1, #1
 801b62a:	b92f      	cbnz	r7, 801b638 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801b62c:	4431      	add	r1, r6
 801b62e:	4660      	mov	r0, ip
 801b630:	f7ff ffd5 	bl	801b5de <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b634:	b00b      	add	sp, #44	; 0x2c
 801b636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b638:	4621      	mov	r1, r4
 801b63a:	e7e9      	b.n	801b610 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801b63c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b63e:	4607      	mov	r7, r0
 801b640:	b08b      	sub	sp, #44	; 0x2c
 801b642:	4608      	mov	r0, r1
 801b644:	b341      	cbz	r1, 801b698 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b646:	1e99      	subs	r1, r3, #2
 801b648:	2922      	cmp	r1, #34	; 0x22
 801b64a:	d825      	bhi.n	801b698 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b64c:	2100      	movs	r1, #0
 801b64e:	463c      	mov	r4, r7
 801b650:	261f      	movs	r6, #31
 801b652:	f10d 0c04 	add.w	ip, sp, #4
 801b656:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b65a:	1e71      	subs	r1, r6, #1
 801b65c:	fb94 fef3 	sdiv	lr, r4, r3
 801b660:	fb03 441e 	mls	r4, r3, lr, r4
 801b664:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b668:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b66c:	b2ec      	uxtb	r4, r5
 801b66e:	2d09      	cmp	r5, #9
 801b670:	bfd4      	ite	le
 801b672:	3430      	addle	r4, #48	; 0x30
 801b674:	3457      	addgt	r4, #87	; 0x57
 801b676:	b2e4      	uxtb	r4, r4
 801b678:	f80c 4006 	strb.w	r4, [ip, r6]
 801b67c:	4674      	mov	r4, lr
 801b67e:	b96c      	cbnz	r4, 801b69c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b680:	2f00      	cmp	r7, #0
 801b682:	da05      	bge.n	801b690 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b684:	ab0a      	add	r3, sp, #40	; 0x28
 801b686:	4419      	add	r1, r3
 801b688:	232d      	movs	r3, #45	; 0x2d
 801b68a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b68e:	1eb1      	subs	r1, r6, #2
 801b690:	3101      	adds	r1, #1
 801b692:	4461      	add	r1, ip
 801b694:	f7ff ffa3 	bl	801b5de <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b698:	b00b      	add	sp, #44	; 0x2c
 801b69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b69c:	460e      	mov	r6, r1
 801b69e:	e7dc      	b.n	801b65a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b6a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6a4:	b085      	sub	sp, #20
 801b6a6:	4691      	mov	r9, r2
 801b6a8:	6802      	ldr	r2, [r0, #0]
 801b6aa:	4688      	mov	r8, r1
 801b6ac:	461c      	mov	r4, r3
 801b6ae:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b6b2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b6b6:	4683      	mov	fp, r0
 801b6b8:	4610      	mov	r0, r2
 801b6ba:	9103      	str	r1, [sp, #12]
 801b6bc:	9302      	str	r3, [sp, #8]
 801b6be:	9201      	str	r2, [sp, #4]
 801b6c0:	f7ff ff80 	bl	801b5c4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b6c4:	f1b8 0f00 	cmp.w	r8, #0
 801b6c8:	bf0c      	ite	eq
 801b6ca:	4684      	moveq	ip, r0
 801b6cc:	f100 0c01 	addne.w	ip, r0, #1
 801b6d0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801b6d4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801b6d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b6da:	fa1f fc8c 	uxth.w	ip, ip
 801b6de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b6e0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801b6e4:	9903      	ldr	r1, [sp, #12]
 801b6e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b6ea:	d041      	beq.n	801b770 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b6ec:	d834      	bhi.n	801b758 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b6ee:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801b6f2:	d059      	beq.n	801b7a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b6f4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801b6f8:	d03a      	beq.n	801b770 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b6fa:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801b6fe:	d034      	beq.n	801b76a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b700:	2400      	movs	r4, #0
 801b702:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b706:	3a01      	subs	r2, #1
 801b708:	b169      	cbz	r1, 801b726 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b70a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b70c:	458c      	cmp	ip, r1
 801b70e:	da09      	bge.n	801b724 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b710:	eba1 010c 	sub.w	r1, r1, ip
 801b714:	b289      	uxth	r1, r1
 801b716:	b933      	cbnz	r3, 801b726 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b718:	2e00      	cmp	r6, #0
 801b71a:	d051      	beq.n	801b7c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b71c:	2800      	cmp	r0, #0
 801b71e:	d04f      	beq.n	801b7c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b720:	440c      	add	r4, r1
 801b722:	b2a4      	uxth	r4, r4
 801b724:	2100      	movs	r1, #0
 801b726:	682b      	ldr	r3, [r5, #0]
 801b728:	4293      	cmp	r3, r2
 801b72a:	da07      	bge.n	801b73c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b72c:	f1b8 0f00 	cmp.w	r8, #0
 801b730:	d004      	beq.n	801b73c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b732:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b736:	682b      	ldr	r3, [r5, #0]
 801b738:	3301      	adds	r3, #1
 801b73a:	602b      	str	r3, [r5, #0]
 801b73c:	2730      	movs	r7, #48	; 0x30
 801b73e:	2c00      	cmp	r4, #0
 801b740:	d04e      	beq.n	801b7e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b742:	682e      	ldr	r6, [r5, #0]
 801b744:	3c01      	subs	r4, #1
 801b746:	42b2      	cmp	r2, r6
 801b748:	b2a4      	uxth	r4, r4
 801b74a:	dd49      	ble.n	801b7e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b74c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b750:	682b      	ldr	r3, [r5, #0]
 801b752:	3301      	adds	r3, #1
 801b754:	602b      	str	r3, [r5, #0]
 801b756:	e7f2      	b.n	801b73e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b758:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801b75c:	d01d      	beq.n	801b79a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b75e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801b762:	d002      	beq.n	801b76a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b764:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801b768:	e7c9      	b.n	801b6fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b76a:	4684      	mov	ip, r0
 801b76c:	f04f 0800 	mov.w	r8, #0
 801b770:	2c00      	cmp	r4, #0
 801b772:	d0c6      	beq.n	801b702 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b774:	b947      	cbnz	r7, 801b788 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b776:	2801      	cmp	r0, #1
 801b778:	d106      	bne.n	801b788 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b77a:	8814      	ldrh	r4, [r2, #0]
 801b77c:	2c30      	cmp	r4, #48	; 0x30
 801b77e:	bf02      	ittt	eq
 801b780:	3202      	addeq	r2, #2
 801b782:	4638      	moveq	r0, r7
 801b784:	f8cb 2000 	streq.w	r2, [fp]
 801b788:	45bc      	cmp	ip, r7
 801b78a:	da14      	bge.n	801b7b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b78c:	b2bf      	uxth	r7, r7
 801b78e:	eba7 040c 	sub.w	r4, r7, ip
 801b792:	46bc      	mov	ip, r7
 801b794:	b2a4      	uxth	r4, r4
 801b796:	2600      	movs	r6, #0
 801b798:	e7b3      	b.n	801b702 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b79a:	4684      	mov	ip, r0
 801b79c:	b16c      	cbz	r4, 801b7ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b79e:	42b8      	cmp	r0, r7
 801b7a0:	dd00      	ble.n	801b7a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b7a2:	b2b8      	uxth	r0, r7
 801b7a4:	2400      	movs	r4, #0
 801b7a6:	e003      	b.n	801b7b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b7a8:	f04f 0c01 	mov.w	ip, #1
 801b7ac:	2400      	movs	r4, #0
 801b7ae:	4660      	mov	r0, ip
 801b7b0:	4626      	mov	r6, r4
 801b7b2:	46a0      	mov	r8, r4
 801b7b4:	e7a5      	b.n	801b702 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b7b6:	2400      	movs	r4, #0
 801b7b8:	e7ed      	b.n	801b796 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b7ba:	4626      	mov	r6, r4
 801b7bc:	46a0      	mov	r8, r4
 801b7be:	e7a0      	b.n	801b702 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b7c0:	2900      	cmp	r1, #0
 801b7c2:	d0b0      	beq.n	801b726 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b7c4:	2720      	movs	r7, #32
 801b7c6:	682e      	ldr	r6, [r5, #0]
 801b7c8:	2900      	cmp	r1, #0
 801b7ca:	d0ac      	beq.n	801b726 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b7cc:	3901      	subs	r1, #1
 801b7ce:	4296      	cmp	r6, r2
 801b7d0:	b289      	uxth	r1, r1
 801b7d2:	daa7      	bge.n	801b724 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b7d4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b7d8:	682b      	ldr	r3, [r5, #0]
 801b7da:	3301      	adds	r3, #1
 801b7dc:	602b      	str	r3, [r5, #0]
 801b7de:	e7f2      	b.n	801b7c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b7e0:	b188      	cbz	r0, 801b806 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b7e2:	682b      	ldr	r3, [r5, #0]
 801b7e4:	3801      	subs	r0, #1
 801b7e6:	429a      	cmp	r2, r3
 801b7e8:	b280      	uxth	r0, r0
 801b7ea:	dd0c      	ble.n	801b806 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b7ec:	f8db 3000 	ldr.w	r3, [fp]
 801b7f0:	1c9c      	adds	r4, r3, #2
 801b7f2:	f8cb 4000 	str.w	r4, [fp]
 801b7f6:	881c      	ldrh	r4, [r3, #0]
 801b7f8:	682b      	ldr	r3, [r5, #0]
 801b7fa:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b7fe:	682b      	ldr	r3, [r5, #0]
 801b800:	3301      	adds	r3, #1
 801b802:	602b      	str	r3, [r5, #0]
 801b804:	e7ec      	b.n	801b7e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b806:	2620      	movs	r6, #32
 801b808:	b151      	cbz	r1, 801b820 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b80a:	6828      	ldr	r0, [r5, #0]
 801b80c:	3901      	subs	r1, #1
 801b80e:	4282      	cmp	r2, r0
 801b810:	b289      	uxth	r1, r1
 801b812:	dd05      	ble.n	801b820 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b814:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b818:	682b      	ldr	r3, [r5, #0]
 801b81a:	3301      	adds	r3, #1
 801b81c:	602b      	str	r3, [r5, #0]
 801b81e:	e7f3      	b.n	801b808 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b820:	b005      	add	sp, #20
 801b822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b826 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b82a:	2400      	movs	r4, #0
 801b82c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b830:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801b834:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801b838:	8014      	strh	r4, [r2, #0]
 801b83a:	701c      	strb	r4, [r3, #0]
 801b83c:	f888 4000 	strb.w	r4, [r8]
 801b840:	f88c 4000 	strb.w	r4, [ip]
 801b844:	f88e 4000 	strb.w	r4, [lr]
 801b848:	703c      	strb	r4, [r7, #0]
 801b84a:	6804      	ldr	r4, [r0, #0]
 801b84c:	b1a4      	cbz	r4, 801b878 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b84e:	8824      	ldrh	r4, [r4, #0]
 801b850:	f04f 0901 	mov.w	r9, #1
 801b854:	b314      	cbz	r4, 801b89c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b856:	2c2b      	cmp	r4, #43	; 0x2b
 801b858:	d001      	beq.n	801b85e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b85a:	2c20      	cmp	r4, #32
 801b85c:	d110      	bne.n	801b880 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b85e:	8014      	strh	r4, [r2, #0]
 801b860:	6804      	ldr	r4, [r0, #0]
 801b862:	b10c      	cbz	r4, 801b868 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b864:	3402      	adds	r4, #2
 801b866:	6004      	str	r4, [r0, #0]
 801b868:	680c      	ldr	r4, [r1, #0]
 801b86a:	b10c      	cbz	r4, 801b870 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b86c:	3401      	adds	r4, #1
 801b86e:	600c      	str	r4, [r1, #0]
 801b870:	6804      	ldr	r4, [r0, #0]
 801b872:	b17c      	cbz	r4, 801b894 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b874:	8824      	ldrh	r4, [r4, #0]
 801b876:	e7ed      	b.n	801b854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b878:	680c      	ldr	r4, [r1, #0]
 801b87a:	b17c      	cbz	r4, 801b89c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b87c:	7824      	ldrb	r4, [r4, #0]
 801b87e:	e7e7      	b.n	801b850 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b880:	2c2d      	cmp	r4, #45	; 0x2d
 801b882:	d102      	bne.n	801b88a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b884:	f883 9000 	strb.w	r9, [r3]
 801b888:	e7ea      	b.n	801b860 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b88a:	2c23      	cmp	r4, #35	; 0x23
 801b88c:	d107      	bne.n	801b89e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b88e:	f888 9000 	strb.w	r9, [r8]
 801b892:	e7e5      	b.n	801b860 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b894:	680c      	ldr	r4, [r1, #0]
 801b896:	b10c      	cbz	r4, 801b89c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b898:	7824      	ldrb	r4, [r4, #0]
 801b89a:	e7db      	b.n	801b854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b89c:	2400      	movs	r4, #0
 801b89e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b8a2:	2b09      	cmp	r3, #9
 801b8a4:	d901      	bls.n	801b8aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b8a6:	2c2a      	cmp	r4, #42	; 0x2a
 801b8a8:	d122      	bne.n	801b8f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b8aa:	2301      	movs	r3, #1
 801b8ac:	2c30      	cmp	r4, #48	; 0x30
 801b8ae:	f88e 3000 	strb.w	r3, [lr]
 801b8b2:	d10d      	bne.n	801b8d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b8b4:	f88c 3000 	strb.w	r3, [ip]
 801b8b8:	6803      	ldr	r3, [r0, #0]
 801b8ba:	b10b      	cbz	r3, 801b8c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b8bc:	3302      	adds	r3, #2
 801b8be:	6003      	str	r3, [r0, #0]
 801b8c0:	680b      	ldr	r3, [r1, #0]
 801b8c2:	b10b      	cbz	r3, 801b8c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b8c4:	3301      	adds	r3, #1
 801b8c6:	600b      	str	r3, [r1, #0]
 801b8c8:	6803      	ldr	r3, [r0, #0]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d02f      	beq.n	801b92e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b8ce:	881c      	ldrh	r4, [r3, #0]
 801b8d0:	2c2a      	cmp	r4, #42	; 0x2a
 801b8d2:	d135      	bne.n	801b940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b8d4:	f04f 33ff 	mov.w	r3, #4294967295
 801b8d8:	6033      	str	r3, [r6, #0]
 801b8da:	6803      	ldr	r3, [r0, #0]
 801b8dc:	b10b      	cbz	r3, 801b8e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b8de:	3302      	adds	r3, #2
 801b8e0:	6003      	str	r3, [r0, #0]
 801b8e2:	680b      	ldr	r3, [r1, #0]
 801b8e4:	b10b      	cbz	r3, 801b8ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b8e6:	3301      	adds	r3, #1
 801b8e8:	600b      	str	r3, [r1, #0]
 801b8ea:	6803      	ldr	r3, [r0, #0]
 801b8ec:	b31b      	cbz	r3, 801b936 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b8ee:	881c      	ldrh	r4, [r3, #0]
 801b8f0:	2c2e      	cmp	r4, #46	; 0x2e
 801b8f2:	d11a      	bne.n	801b92a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b8f4:	2301      	movs	r3, #1
 801b8f6:	703b      	strb	r3, [r7, #0]
 801b8f8:	6803      	ldr	r3, [r0, #0]
 801b8fa:	b10b      	cbz	r3, 801b900 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b8fc:	3302      	adds	r3, #2
 801b8fe:	6003      	str	r3, [r0, #0]
 801b900:	680b      	ldr	r3, [r1, #0]
 801b902:	b10b      	cbz	r3, 801b908 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b904:	3301      	adds	r3, #1
 801b906:	600b      	str	r3, [r1, #0]
 801b908:	6803      	ldr	r3, [r0, #0]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d036      	beq.n	801b97c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b90e:	881b      	ldrh	r3, [r3, #0]
 801b910:	2b2a      	cmp	r3, #42	; 0x2a
 801b912:	d137      	bne.n	801b984 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b914:	f04f 33ff 	mov.w	r3, #4294967295
 801b918:	602b      	str	r3, [r5, #0]
 801b91a:	6803      	ldr	r3, [r0, #0]
 801b91c:	b10b      	cbz	r3, 801b922 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b91e:	3302      	adds	r3, #2
 801b920:	6003      	str	r3, [r0, #0]
 801b922:	680b      	ldr	r3, [r1, #0]
 801b924:	b10b      	cbz	r3, 801b92a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b926:	3301      	adds	r3, #1
 801b928:	600b      	str	r3, [r1, #0]
 801b92a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b92e:	680c      	ldr	r4, [r1, #0]
 801b930:	b134      	cbz	r4, 801b940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b932:	7824      	ldrb	r4, [r4, #0]
 801b934:	e7cc      	b.n	801b8d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b936:	680b      	ldr	r3, [r1, #0]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d0f6      	beq.n	801b92a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b93c:	781c      	ldrb	r4, [r3, #0]
 801b93e:	e7d7      	b.n	801b8f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b940:	2300      	movs	r3, #0
 801b942:	220a      	movs	r2, #10
 801b944:	6033      	str	r3, [r6, #0]
 801b946:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b94a:	fa1f f38c 	uxth.w	r3, ip
 801b94e:	2b09      	cmp	r3, #9
 801b950:	d8ce      	bhi.n	801b8f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b952:	6833      	ldr	r3, [r6, #0]
 801b954:	fb02 c303 	mla	r3, r2, r3, ip
 801b958:	6033      	str	r3, [r6, #0]
 801b95a:	6803      	ldr	r3, [r0, #0]
 801b95c:	b10b      	cbz	r3, 801b962 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b95e:	3302      	adds	r3, #2
 801b960:	6003      	str	r3, [r0, #0]
 801b962:	680b      	ldr	r3, [r1, #0]
 801b964:	b10b      	cbz	r3, 801b96a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b966:	3301      	adds	r3, #1
 801b968:	600b      	str	r3, [r1, #0]
 801b96a:	6803      	ldr	r3, [r0, #0]
 801b96c:	b10b      	cbz	r3, 801b972 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b96e:	881c      	ldrh	r4, [r3, #0]
 801b970:	e7e9      	b.n	801b946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b972:	680c      	ldr	r4, [r1, #0]
 801b974:	2c00      	cmp	r4, #0
 801b976:	d0e6      	beq.n	801b946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b978:	7824      	ldrb	r4, [r4, #0]
 801b97a:	e7e4      	b.n	801b946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b97c:	680b      	ldr	r3, [r1, #0]
 801b97e:	b10b      	cbz	r3, 801b984 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b980:	781b      	ldrb	r3, [r3, #0]
 801b982:	e7c5      	b.n	801b910 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b984:	2200      	movs	r2, #0
 801b986:	240a      	movs	r4, #10
 801b988:	602a      	str	r2, [r5, #0]
 801b98a:	3b30      	subs	r3, #48	; 0x30
 801b98c:	682a      	ldr	r2, [r5, #0]
 801b98e:	b29e      	uxth	r6, r3
 801b990:	2e09      	cmp	r6, #9
 801b992:	d813      	bhi.n	801b9bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b994:	fb04 3302 	mla	r3, r4, r2, r3
 801b998:	602b      	str	r3, [r5, #0]
 801b99a:	6803      	ldr	r3, [r0, #0]
 801b99c:	b10b      	cbz	r3, 801b9a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b99e:	3302      	adds	r3, #2
 801b9a0:	6003      	str	r3, [r0, #0]
 801b9a2:	680b      	ldr	r3, [r1, #0]
 801b9a4:	b10b      	cbz	r3, 801b9aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b9a6:	3301      	adds	r3, #1
 801b9a8:	600b      	str	r3, [r1, #0]
 801b9aa:	6803      	ldr	r3, [r0, #0]
 801b9ac:	b10b      	cbz	r3, 801b9b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b9ae:	881b      	ldrh	r3, [r3, #0]
 801b9b0:	e7eb      	b.n	801b98a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b9b2:	680b      	ldr	r3, [r1, #0]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d0e8      	beq.n	801b98a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b9b8:	781b      	ldrb	r3, [r3, #0]
 801b9ba:	e7e6      	b.n	801b98a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b9bc:	2a06      	cmp	r2, #6
 801b9be:	bfa8      	it	ge
 801b9c0:	2206      	movge	r2, #6
 801b9c2:	602a      	str	r2, [r5, #0]
 801b9c4:	e7b1      	b.n	801b92a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b9c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b9c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9ca:	b0a3      	sub	sp, #140	; 0x8c
 801b9cc:	2600      	movs	r6, #0
 801b9ce:	4607      	mov	r7, r0
 801b9d0:	4688      	mov	r8, r1
 801b9d2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801b9d6:	4631      	mov	r1, r6
 801b9d8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801b9da:	4648      	mov	r0, r9
 801b9dc:	960d      	str	r6, [sp, #52]	; 0x34
 801b9de:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b9e2:	2242      	movs	r2, #66	; 0x42
 801b9e4:	f00a faf8 	bl	8025fd8 <memset>
 801b9e8:	b15f      	cbz	r7, 801ba02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b9ea:	f108 3aff 	add.w	sl, r8, #4294967295
 801b9ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9f2:	b152      	cbz	r2, 801ba0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b9f4:	8812      	ldrh	r2, [r2, #0]
 801b9f6:	b10a      	cbz	r2, 801b9fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b9f8:	459a      	cmp	sl, r3
 801b9fa:	dc2e      	bgt.n	801ba5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b9fc:	2200      	movs	r2, #0
 801b9fe:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ba02:	4638      	mov	r0, r7
 801ba04:	b023      	add	sp, #140	; 0x8c
 801ba06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba0a:	9a08      	ldr	r2, [sp, #32]
 801ba0c:	2a00      	cmp	r2, #0
 801ba0e:	d0f5      	beq.n	801b9fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ba10:	7812      	ldrb	r2, [r2, #0]
 801ba12:	e7f0      	b.n	801b9f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801ba14:	2d00      	cmp	r5, #0
 801ba16:	d0ea      	beq.n	801b9ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ba18:	782a      	ldrb	r2, [r5, #0]
 801ba1a:	b142      	cbz	r2, 801ba2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801ba1c:	2a25      	cmp	r2, #37	; 0x25
 801ba1e:	d001      	beq.n	801ba24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801ba20:	459a      	cmp	sl, r3
 801ba22:	dc08      	bgt.n	801ba36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801ba24:	f1bb 0f00 	cmp.w	fp, #0
 801ba28:	d121      	bne.n	801ba6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801ba2a:	2d00      	cmp	r5, #0
 801ba2c:	d0df      	beq.n	801b9ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ba2e:	782a      	ldrb	r2, [r5, #0]
 801ba30:	f04f 0b00 	mov.w	fp, #0
 801ba34:	e01d      	b.n	801ba72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801ba36:	f1bb 0f00 	cmp.w	fp, #0
 801ba3a:	d077      	beq.n	801bb2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801ba3c:	f8bb 2000 	ldrh.w	r2, [fp]
 801ba40:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ba44:	f1bb 0f00 	cmp.w	fp, #0
 801ba48:	d002      	beq.n	801ba50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801ba4a:	f10b 0202 	add.w	r2, fp, #2
 801ba4e:	9209      	str	r2, [sp, #36]	; 0x24
 801ba50:	b10d      	cbz	r5, 801ba56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801ba52:	3501      	adds	r5, #1
 801ba54:	9508      	str	r5, [sp, #32]
 801ba56:	3301      	adds	r3, #1
 801ba58:	930d      	str	r3, [sp, #52]	; 0x34
 801ba5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba5c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801ba60:	f1bb 0f00 	cmp.w	fp, #0
 801ba64:	d0d6      	beq.n	801ba14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801ba66:	f8bb 2000 	ldrh.w	r2, [fp]
 801ba6a:	2a00      	cmp	r2, #0
 801ba6c:	d1d6      	bne.n	801ba1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801ba6e:	f8bb 2000 	ldrh.w	r2, [fp]
 801ba72:	2a00      	cmp	r2, #0
 801ba74:	d0bb      	beq.n	801b9ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ba76:	459a      	cmp	sl, r3
 801ba78:	ddb9      	ble.n	801b9ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ba7a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801ba7e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801ba82:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801ba86:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801ba8a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801ba8e:	960e      	str	r6, [sp, #56]	; 0x38
 801ba90:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801ba94:	960f      	str	r6, [sp, #60]	; 0x3c
 801ba96:	f1bb 0f00 	cmp.w	fp, #0
 801ba9a:	d002      	beq.n	801baa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ba9c:	f10b 0302 	add.w	r3, fp, #2
 801baa0:	9309      	str	r3, [sp, #36]	; 0x24
 801baa2:	b10d      	cbz	r5, 801baa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801baa4:	1c6b      	adds	r3, r5, #1
 801baa6:	9308      	str	r3, [sp, #32]
 801baa8:	ab0f      	add	r3, sp, #60	; 0x3c
 801baaa:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801baae:	a908      	add	r1, sp, #32
 801bab0:	a809      	add	r0, sp, #36	; 0x24
 801bab2:	9305      	str	r3, [sp, #20]
 801bab4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801bab8:	9304      	str	r3, [sp, #16]
 801baba:	ab0e      	add	r3, sp, #56	; 0x38
 801babc:	9303      	str	r3, [sp, #12]
 801babe:	ab0c      	add	r3, sp, #48	; 0x30
 801bac0:	9302      	str	r3, [sp, #8]
 801bac2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801bac6:	9301      	str	r3, [sp, #4]
 801bac8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801bacc:	9300      	str	r3, [sp, #0]
 801bace:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801bad2:	f7ff fea8 	bl	801b826 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801bad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bad8:	2b00      	cmp	r3, #0
 801bada:	bfbf      	itttt	lt
 801badc:	6823      	ldrlt	r3, [r4, #0]
 801bade:	3404      	addlt	r4, #4
 801bae0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801bae4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801bae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bae8:	2b00      	cmp	r3, #0
 801baea:	bfbe      	ittt	lt
 801baec:	6823      	ldrlt	r3, [r4, #0]
 801baee:	3404      	addlt	r4, #4
 801baf0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801baf4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801baf8:	bfb8      	it	lt
 801bafa:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801bafc:	b1d9      	cbz	r1, 801bb36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801bafe:	880b      	ldrh	r3, [r1, #0]
 801bb00:	2b69      	cmp	r3, #105	; 0x69
 801bb02:	d01f      	beq.n	801bb44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bb04:	d82f      	bhi.n	801bb66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801bb06:	2b58      	cmp	r3, #88	; 0x58
 801bb08:	d01c      	beq.n	801bb44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bb0a:	d818      	bhi.n	801bb3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801bb0c:	2b25      	cmp	r3, #37	; 0x25
 801bb0e:	d034      	beq.n	801bb7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801bb10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb12:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801bb16:	f1bb 0f00 	cmp.w	fp, #0
 801bb1a:	f000 80b7 	beq.w	801bc8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801bb1e:	f8bb 5000 	ldrh.w	r5, [fp]
 801bb22:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801bb26:	3301      	adds	r3, #1
 801bb28:	930d      	str	r3, [sp, #52]	; 0x34
 801bb2a:	e029      	b.n	801bb80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801bb2c:	b10d      	cbz	r5, 801bb32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801bb2e:	782a      	ldrb	r2, [r5, #0]
 801bb30:	e786      	b.n	801ba40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801bb32:	462a      	mov	r2, r5
 801bb34:	e784      	b.n	801ba40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801bb36:	2a00      	cmp	r2, #0
 801bb38:	d0ea      	beq.n	801bb10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bb3a:	7813      	ldrb	r3, [r2, #0]
 801bb3c:	e7e0      	b.n	801bb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801bb3e:	3b63      	subs	r3, #99	; 0x63
 801bb40:	2b01      	cmp	r3, #1
 801bb42:	d8e5      	bhi.n	801bb10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bb44:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801bb48:	b329      	cbz	r1, 801bb96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801bb4a:	880b      	ldrh	r3, [r1, #0]
 801bb4c:	2b69      	cmp	r3, #105	; 0x69
 801bb4e:	d063      	beq.n	801bc18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801bb50:	d825      	bhi.n	801bb9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801bb52:	2b63      	cmp	r3, #99	; 0x63
 801bb54:	d038      	beq.n	801bbc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801bb56:	2b64      	cmp	r3, #100	; 0x64
 801bb58:	d05e      	beq.n	801bc18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801bb5a:	2b58      	cmp	r3, #88	; 0x58
 801bb5c:	d07a      	beq.n	801bc54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801bb5e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801bb62:	4625      	mov	r5, r4
 801bb64:	e036      	b.n	801bbd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bb66:	2b73      	cmp	r3, #115	; 0x73
 801bb68:	d0ec      	beq.n	801bb44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bb6a:	d802      	bhi.n	801bb72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801bb6c:	2b6f      	cmp	r3, #111	; 0x6f
 801bb6e:	d1cf      	bne.n	801bb10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bb70:	e7e8      	b.n	801bb44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bb72:	2b75      	cmp	r3, #117	; 0x75
 801bb74:	d0e6      	beq.n	801bb44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bb76:	2b78      	cmp	r3, #120	; 0x78
 801bb78:	e7f9      	b.n	801bb6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801bb7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb7c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801bb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb82:	b10b      	cbz	r3, 801bb88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801bb84:	3302      	adds	r3, #2
 801bb86:	9309      	str	r3, [sp, #36]	; 0x24
 801bb88:	9b08      	ldr	r3, [sp, #32]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	f43f af2f 	beq.w	801b9ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bb90:	3301      	adds	r3, #1
 801bb92:	9308      	str	r3, [sp, #32]
 801bb94:	e72b      	b.n	801b9ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bb96:	2a00      	cmp	r2, #0
 801bb98:	d0e1      	beq.n	801bb5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bb9a:	7813      	ldrb	r3, [r2, #0]
 801bb9c:	e7d6      	b.n	801bb4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801bb9e:	2b73      	cmp	r3, #115	; 0x73
 801bba0:	d036      	beq.n	801bc10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801bba2:	d807      	bhi.n	801bbb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801bba4:	2b6f      	cmp	r3, #111	; 0x6f
 801bba6:	d1da      	bne.n	801bb5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bbaa:	1d25      	adds	r5, r4, #4
 801bbac:	2308      	movs	r3, #8
 801bbae:	eba8 0202 	sub.w	r2, r8, r2
 801bbb2:	e049      	b.n	801bc48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801bbb4:	2b75      	cmp	r3, #117	; 0x75
 801bbb6:	d042      	beq.n	801bc3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801bbb8:	2b78      	cmp	r3, #120	; 0x78
 801bbba:	d1d0      	bne.n	801bb5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bbbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bbbe:	1d25      	adds	r5, r4, #4
 801bbc0:	2310      	movs	r3, #16
 801bbc2:	eba8 0202 	sub.w	r2, r8, r2
 801bbc6:	e03f      	b.n	801bc48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801bbc8:	7823      	ldrb	r3, [r4, #0]
 801bbca:	1d25      	adds	r5, r4, #4
 801bbcc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801bbd0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801bbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbd6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d051      	beq.n	801bc82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801bbde:	881a      	ldrh	r2, [r3, #0]
 801bbe0:	a80d      	add	r0, sp, #52	; 0x34
 801bbe2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801bbe6:	462c      	mov	r4, r5
 801bbe8:	9005      	str	r0, [sp, #20]
 801bbea:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801bbee:	9004      	str	r0, [sp, #16]
 801bbf0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bbf2:	9003      	str	r0, [sp, #12]
 801bbf4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801bbf8:	9002      	str	r0, [sp, #8]
 801bbfa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bbfc:	9001      	str	r0, [sp, #4]
 801bbfe:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801bc02:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801bc06:	9000      	str	r0, [sp, #0]
 801bc08:	a810      	add	r0, sp, #64	; 0x40
 801bc0a:	f7ff fd49 	bl	801b6a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801bc0e:	e7b7      	b.n	801bb80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801bc10:	1d25      	adds	r5, r4, #4
 801bc12:	6823      	ldr	r3, [r4, #0]
 801bc14:	9310      	str	r3, [sp, #64]	; 0x40
 801bc16:	e7dd      	b.n	801bbd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bc18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bc1a:	230a      	movs	r3, #10
 801bc1c:	4649      	mov	r1, r9
 801bc1e:	6820      	ldr	r0, [r4, #0]
 801bc20:	eba8 0202 	sub.w	r2, r8, r2
 801bc24:	1d25      	adds	r5, r4, #4
 801bc26:	b292      	uxth	r2, r2
 801bc28:	f7ff fd08 	bl	801b63c <_ZN8touchgfx7Unicode4itoaElPtti>
 801bc2c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bc30:	2b2d      	cmp	r3, #45	; 0x2d
 801bc32:	d1cf      	bne.n	801bbd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bc34:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801bc38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc3a:	3302      	adds	r3, #2
 801bc3c:	e7ea      	b.n	801bc14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801bc3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bc40:	1d25      	adds	r5, r4, #4
 801bc42:	230a      	movs	r3, #10
 801bc44:	eba8 0202 	sub.w	r2, r8, r2
 801bc48:	b292      	uxth	r2, r2
 801bc4a:	4649      	mov	r1, r9
 801bc4c:	6820      	ldr	r0, [r4, #0]
 801bc4e:	f7ff fcd7 	bl	801b600 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bc52:	e7bf      	b.n	801bbd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bc54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bc56:	2310      	movs	r3, #16
 801bc58:	4649      	mov	r1, r9
 801bc5a:	6820      	ldr	r0, [r4, #0]
 801bc5c:	eba8 0202 	sub.w	r2, r8, r2
 801bc60:	1d25      	adds	r5, r4, #4
 801bc62:	b292      	uxth	r2, r2
 801bc64:	f7ff fccc 	bl	801b600 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bc68:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801bc6c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d0af      	beq.n	801bbd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bc74:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801bc78:	2919      	cmp	r1, #25
 801bc7a:	d8f7      	bhi.n	801bc6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bc7c:	3b20      	subs	r3, #32
 801bc7e:	8013      	strh	r3, [r2, #0]
 801bc80:	e7f4      	b.n	801bc6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bc82:	9a08      	ldr	r2, [sp, #32]
 801bc84:	2a00      	cmp	r2, #0
 801bc86:	d0ab      	beq.n	801bbe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bc88:	7812      	ldrb	r2, [r2, #0]
 801bc8a:	e7a9      	b.n	801bbe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bc8c:	2d00      	cmp	r5, #0
 801bc8e:	f43f af48 	beq.w	801bb22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801bc92:	782d      	ldrb	r5, [r5, #0]
 801bc94:	e745      	b.n	801bb22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801bc96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801bc96:	b507      	push	{r0, r1, r2, lr}
 801bc98:	9300      	str	r3, [sp, #0]
 801bc9a:	4613      	mov	r3, r2
 801bc9c:	2200      	movs	r2, #0
 801bc9e:	f7ff fe92 	bl	801b9c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801bca2:	b003      	add	sp, #12
 801bca4:	f85d fb04 	ldr.w	pc, [sp], #4

0801bca8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801bca8:	b40c      	push	{r2, r3}
 801bcaa:	b507      	push	{r0, r1, r2, lr}
 801bcac:	ab04      	add	r3, sp, #16
 801bcae:	f853 2b04 	ldr.w	r2, [r3], #4
 801bcb2:	9301      	str	r3, [sp, #4]
 801bcb4:	f7ff ffef 	bl	801bc96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801bcb8:	b003      	add	sp, #12
 801bcba:	f85d eb04 	ldr.w	lr, [sp], #4
 801bcbe:	b002      	add	sp, #8
 801bcc0:	4770      	bx	lr
	...

0801bcc4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bcc4:	4b01      	ldr	r3, [pc, #4]	; (801bccc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bcc6:	6018      	str	r0, [r3, #0]
 801bcc8:	4770      	bx	lr
 801bcca:	bf00      	nop
 801bccc:	20056778 	.word	0x20056778

0801bcd0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801bcd0:	4b06      	ldr	r3, [pc, #24]	; (801bcec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801bcd2:	881a      	ldrh	r2, [r3, #0]
 801bcd4:	4282      	cmp	r2, r0
 801bcd6:	d807      	bhi.n	801bce8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801bcd8:	4b05      	ldr	r3, [pc, #20]	; (801bcf0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801bcda:	881b      	ldrh	r3, [r3, #0]
 801bcdc:	4413      	add	r3, r2
 801bcde:	4298      	cmp	r0, r3
 801bce0:	bfac      	ite	ge
 801bce2:	2000      	movge	r0, #0
 801bce4:	2001      	movlt	r0, #1
 801bce6:	4770      	bx	lr
 801bce8:	2000      	movs	r0, #0
 801bcea:	4770      	bx	lr
 801bcec:	20056798 	.word	0x20056798
 801bcf0:	2005679c 	.word	0x2005679c

0801bcf4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801bcf4:	b508      	push	{r3, lr}
 801bcf6:	4601      	mov	r1, r0
 801bcf8:	f7ff ffea 	bl	801bcd0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801bcfc:	b118      	cbz	r0, 801bd06 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801bcfe:	4b02      	ldr	r3, [pc, #8]	; (801bd08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801bd06:	bd08      	pop	{r3, pc}
 801bd08:	2005677c 	.word	0x2005677c

0801bd0c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd10:	4d28      	ldr	r5, [pc, #160]	; (801bdb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bd12:	682b      	ldr	r3, [r5, #0]
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d04a      	beq.n	801bdae <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801bd18:	4a27      	ldr	r2, [pc, #156]	; (801bdb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bd1a:	4e28      	ldr	r6, [pc, #160]	; (801bdbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bd1c:	8810      	ldrh	r0, [r2, #0]
 801bd1e:	f8b6 8000 	ldrh.w	r8, [r6]
 801bd22:	4c27      	ldr	r4, [pc, #156]	; (801bdc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bd24:	4440      	add	r0, r8
 801bd26:	4f27      	ldr	r7, [pc, #156]	; (801bdc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bd28:	1c41      	adds	r1, r0, #1
 801bd2a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801bd2e:	f021 0101 	bic.w	r1, r1, #1
 801bd32:	eb03 020e 	add.w	r2, r3, lr
 801bd36:	0409      	lsls	r1, r1, #16
 801bd38:	6022      	str	r2, [r4, #0]
 801bd3a:	0c09      	lsrs	r1, r1, #16
 801bd3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801bd40:	eb0e 010c 	add.w	r1, lr, ip
 801bd44:	185a      	adds	r2, r3, r1
 801bd46:	603a      	str	r2, [r7, #0]
 801bd48:	220e      	movs	r2, #14
 801bd4a:	fb02 f208 	mul.w	r2, r2, r8
 801bd4e:	3203      	adds	r2, #3
 801bd50:	f022 0203 	bic.w	r2, r2, #3
 801bd54:	4411      	add	r1, r2
 801bd56:	440b      	add	r3, r1
 801bd58:	491b      	ldr	r1, [pc, #108]	; (801bdc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801bd5a:	600b      	str	r3, [r1, #0]
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	491b      	ldr	r1, [pc, #108]	; (801bdcc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801bd60:	800b      	strh	r3, [r1, #0]
 801bd62:	491b      	ldr	r1, [pc, #108]	; (801bdd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801bd64:	6809      	ldr	r1, [r1, #0]
 801bd66:	eba1 010e 	sub.w	r1, r1, lr
 801bd6a:	eba1 010c 	sub.w	r1, r1, ip
 801bd6e:	469c      	mov	ip, r3
 801bd70:	1a8a      	subs	r2, r1, r2
 801bd72:	4918      	ldr	r1, [pc, #96]	; (801bdd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801bd74:	600a      	str	r2, [r1, #0]
 801bd76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bd7a:	4a17      	ldr	r2, [pc, #92]	; (801bdd8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801bd7c:	8013      	strh	r3, [r2, #0]
 801bd7e:	4283      	cmp	r3, r0
 801bd80:	d10d      	bne.n	801bd9e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801bd82:	8835      	ldrh	r5, [r6, #0]
 801bd84:	2300      	movs	r3, #0
 801bd86:	6838      	ldr	r0, [r7, #0]
 801bd88:	240e      	movs	r4, #14
 801bd8a:	429d      	cmp	r5, r3
 801bd8c:	d90f      	bls.n	801bdae <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801bd8e:	fb04 0203 	mla	r2, r4, r3, r0
 801bd92:	3301      	adds	r3, #1
 801bd94:	7b11      	ldrb	r1, [r2, #12]
 801bd96:	f36f 1145 	bfc	r1, #5, #1
 801bd9a:	7311      	strb	r1, [r2, #12]
 801bd9c:	e7f5      	b.n	801bd8a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801bd9e:	682a      	ldr	r2, [r5, #0]
 801bda0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801bda4:	6822      	ldr	r2, [r4, #0]
 801bda6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801bdaa:	3301      	adds	r3, #1
 801bdac:	e7e7      	b.n	801bd7e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801bdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bdb2:	bf00      	nop
 801bdb4:	2005677c 	.word	0x2005677c
 801bdb8:	20056798 	.word	0x20056798
 801bdbc:	2005679c 	.word	0x2005679c
 801bdc0:	20056790 	.word	0x20056790
 801bdc4:	20056780 	.word	0x20056780
 801bdc8:	20056788 	.word	0x20056788
 801bdcc:	2005679a 	.word	0x2005679a
 801bdd0:	20056784 	.word	0x20056784
 801bdd4:	20056794 	.word	0x20056794
 801bdd8:	2005678c 	.word	0x2005678c

0801bddc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bddc:	4b10      	ldr	r3, [pc, #64]	; (801be20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801bdde:	b510      	push	{r4, lr}
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	b9db      	cbnz	r3, 801be1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bde4:	b1d1      	cbz	r1, 801be1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bde6:	4b0f      	ldr	r3, [pc, #60]	; (801be24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801bde8:	240e      	movs	r4, #14
 801bdea:	801a      	strh	r2, [r3, #0]
 801bdec:	b292      	uxth	r2, r2
 801bdee:	4b0e      	ldr	r3, [pc, #56]	; (801be28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801bdf0:	881b      	ldrh	r3, [r3, #0]
 801bdf2:	4413      	add	r3, r2
 801bdf4:	4362      	muls	r2, r4
 801bdf6:	2406      	movs	r4, #6
 801bdf8:	fb04 2203 	mla	r2, r4, r3, r2
 801bdfc:	428a      	cmp	r2, r1
 801bdfe:	d305      	bcc.n	801be0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801be00:	4b0a      	ldr	r3, [pc, #40]	; (801be2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801be02:	2135      	movs	r1, #53	; 0x35
 801be04:	4a0a      	ldr	r2, [pc, #40]	; (801be30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801be06:	480b      	ldr	r0, [pc, #44]	; (801be34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801be08:	f00a f85a 	bl	8025ec0 <__assert_func>
 801be0c:	4b0a      	ldr	r3, [pc, #40]	; (801be38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801be0e:	6019      	str	r1, [r3, #0]
 801be10:	4b0a      	ldr	r3, [pc, #40]	; (801be3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801be12:	6018      	str	r0, [r3, #0]
 801be14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be18:	f7ff bf78 	b.w	801bd0c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801be1c:	bd10      	pop	{r4, pc}
 801be1e:	bf00      	nop
 801be20:	20056788 	.word	0x20056788
 801be24:	2005679c 	.word	0x2005679c
 801be28:	20056798 	.word	0x20056798
 801be2c:	0802da89 	.word	0x0802da89
 801be30:	0802db1e 	.word	0x0802db1e
 801be34:	0802da64 	.word	0x0802da64
 801be38:	20056784 	.word	0x20056784
 801be3c:	2005677c 	.word	0x2005677c

0801be40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801be40:	b470      	push	{r4, r5, r6}
 801be42:	4c07      	ldr	r4, [pc, #28]	; (801be60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801be44:	4605      	mov	r5, r0
 801be46:	4610      	mov	r0, r2
 801be48:	9a03      	ldr	r2, [sp, #12]
 801be4a:	6826      	ldr	r6, [r4, #0]
 801be4c:	b936      	cbnz	r6, 801be5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801be4e:	6025      	str	r5, [r4, #0]
 801be50:	4c04      	ldr	r4, [pc, #16]	; (801be64 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801be52:	8021      	strh	r1, [r4, #0]
 801be54:	4619      	mov	r1, r3
 801be56:	bc70      	pop	{r4, r5, r6}
 801be58:	f7ff bfc0 	b.w	801bddc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801be5c:	bc70      	pop	{r4, r5, r6}
 801be5e:	4770      	bx	lr
 801be60:	200567a0 	.word	0x200567a0
 801be64:	20056798 	.word	0x20056798

0801be68 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801be68:	b508      	push	{r3, lr}
 801be6a:	4b14      	ldr	r3, [pc, #80]	; (801bebc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801be6c:	6819      	ldr	r1, [r3, #0]
 801be6e:	b931      	cbnz	r1, 801be7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801be70:	4b13      	ldr	r3, [pc, #76]	; (801bec0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801be72:	f240 4186 	movw	r1, #1158	; 0x486
 801be76:	4a13      	ldr	r2, [pc, #76]	; (801bec4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801be78:	4813      	ldr	r0, [pc, #76]	; (801bec8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801be7a:	f00a f821 	bl	8025ec0 <__assert_func>
 801be7e:	4a13      	ldr	r2, [pc, #76]	; (801becc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801be80:	8803      	ldrh	r3, [r0, #0]
 801be82:	8812      	ldrh	r2, [r2, #0]
 801be84:	4293      	cmp	r3, r2
 801be86:	d204      	bcs.n	801be92 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801be88:	2214      	movs	r2, #20
 801be8a:	fb02 1303 	mla	r3, r2, r3, r1
 801be8e:	8918      	ldrh	r0, [r3, #8]
 801be90:	bd08      	pop	{r3, pc}
 801be92:	490f      	ldr	r1, [pc, #60]	; (801bed0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801be94:	8809      	ldrh	r1, [r1, #0]
 801be96:	4411      	add	r1, r2
 801be98:	428b      	cmp	r3, r1
 801be9a:	da06      	bge.n	801beaa <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801be9c:	1a9b      	subs	r3, r3, r2
 801be9e:	4a0d      	ldr	r2, [pc, #52]	; (801bed4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801bea0:	210e      	movs	r1, #14
 801bea2:	6812      	ldr	r2, [r2, #0]
 801bea4:	fb01 2303 	mla	r3, r1, r3, r2
 801bea8:	e7f1      	b.n	801be8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801beaa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801beae:	4293      	cmp	r3, r2
 801beb0:	bf0a      	itet	eq
 801beb2:	4b09      	ldreq	r3, [pc, #36]	; (801bed8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801beb4:	2000      	movne	r0, #0
 801beb6:	8818      	ldrheq	r0, [r3, #0]
 801beb8:	e7ea      	b.n	801be90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801beba:	bf00      	nop
 801bebc:	200567a0 	.word	0x200567a0
 801bec0:	0802dae2 	.word	0x0802dae2
 801bec4:	0802db95 	.word	0x0802db95
 801bec8:	0802da64 	.word	0x0802da64
 801becc:	20056798 	.word	0x20056798
 801bed0:	2005679c 	.word	0x2005679c
 801bed4:	20056780 	.word	0x20056780
 801bed8:	200566ec 	.word	0x200566ec

0801bedc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bedc:	b508      	push	{r3, lr}
 801bede:	4b14      	ldr	r3, [pc, #80]	; (801bf30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bee0:	6819      	ldr	r1, [r3, #0]
 801bee2:	b931      	cbnz	r1, 801bef2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801bee4:	4b13      	ldr	r3, [pc, #76]	; (801bf34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bee6:	f240 419a 	movw	r1, #1178	; 0x49a
 801beea:	4a13      	ldr	r2, [pc, #76]	; (801bf38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801beec:	4813      	ldr	r0, [pc, #76]	; (801bf3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801beee:	f009 ffe7 	bl	8025ec0 <__assert_func>
 801bef2:	4a13      	ldr	r2, [pc, #76]	; (801bf40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bef4:	8803      	ldrh	r3, [r0, #0]
 801bef6:	8812      	ldrh	r2, [r2, #0]
 801bef8:	4293      	cmp	r3, r2
 801befa:	d204      	bcs.n	801bf06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801befc:	2214      	movs	r2, #20
 801befe:	fb02 1303 	mla	r3, r2, r3, r1
 801bf02:	8958      	ldrh	r0, [r3, #10]
 801bf04:	bd08      	pop	{r3, pc}
 801bf06:	490f      	ldr	r1, [pc, #60]	; (801bf44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801bf08:	8809      	ldrh	r1, [r1, #0]
 801bf0a:	4411      	add	r1, r2
 801bf0c:	428b      	cmp	r3, r1
 801bf0e:	da06      	bge.n	801bf1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801bf10:	1a9b      	subs	r3, r3, r2
 801bf12:	4a0d      	ldr	r2, [pc, #52]	; (801bf48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801bf14:	210e      	movs	r1, #14
 801bf16:	6812      	ldr	r2, [r2, #0]
 801bf18:	fb01 2303 	mla	r3, r1, r3, r2
 801bf1c:	e7f1      	b.n	801bf02 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801bf1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bf22:	4293      	cmp	r3, r2
 801bf24:	bf0a      	itet	eq
 801bf26:	4b09      	ldreq	r3, [pc, #36]	; (801bf4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801bf28:	2000      	movne	r0, #0
 801bf2a:	8818      	ldrheq	r0, [r3, #0]
 801bf2c:	e7ea      	b.n	801bf04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801bf2e:	bf00      	nop
 801bf30:	200567a0 	.word	0x200567a0
 801bf34:	0802dae2 	.word	0x0802dae2
 801bf38:	0802dbc1 	.word	0x0802dbc1
 801bf3c:	0802da64 	.word	0x0802da64
 801bf40:	20056798 	.word	0x20056798
 801bf44:	2005679c 	.word	0x2005679c
 801bf48:	20056780 	.word	0x20056780
 801bf4c:	200566ee 	.word	0x200566ee

0801bf50 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bf50:	b508      	push	{r3, lr}
 801bf52:	4b12      	ldr	r3, [pc, #72]	; (801bf9c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bf54:	6819      	ldr	r1, [r3, #0]
 801bf56:	b931      	cbnz	r1, 801bf66 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bf58:	4b11      	ldr	r3, [pc, #68]	; (801bfa0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bf5a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801bf5e:	4a11      	ldr	r2, [pc, #68]	; (801bfa4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bf60:	4811      	ldr	r0, [pc, #68]	; (801bfa8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bf62:	f009 ffad 	bl	8025ec0 <__assert_func>
 801bf66:	8803      	ldrh	r3, [r0, #0]
 801bf68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf6c:	4293      	cmp	r3, r2
 801bf6e:	d012      	beq.n	801bf96 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bf70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bf74:	4293      	cmp	r3, r2
 801bf76:	d103      	bne.n	801bf80 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bf78:	4b0c      	ldr	r3, [pc, #48]	; (801bfac <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bf7e:	bd08      	pop	{r3, pc}
 801bf80:	4a0b      	ldr	r2, [pc, #44]	; (801bfb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bf82:	6812      	ldr	r2, [r2, #0]
 801bf84:	b11a      	cbz	r2, 801bf8e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bf86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bf8a:	2800      	cmp	r0, #0
 801bf8c:	d1f7      	bne.n	801bf7e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf8e:	2214      	movs	r2, #20
 801bf90:	4353      	muls	r3, r2
 801bf92:	58c8      	ldr	r0, [r1, r3]
 801bf94:	e7f3      	b.n	801bf7e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf96:	2000      	movs	r0, #0
 801bf98:	e7f1      	b.n	801bf7e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf9a:	bf00      	nop
 801bf9c:	200567a0 	.word	0x200567a0
 801bfa0:	0802dae2 	.word	0x0802dae2
 801bfa4:	0802db64 	.word	0x0802db64
 801bfa8:	0802da64 	.word	0x0802da64
 801bfac:	200566f8 	.word	0x200566f8
 801bfb0:	2005677c 	.word	0x2005677c

0801bfb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bfb4:	8802      	ldrh	r2, [r0, #0]
 801bfb6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bfba:	429a      	cmp	r2, r3
 801bfbc:	d845      	bhi.n	801c04a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801bfbe:	4b24      	ldr	r3, [pc, #144]	; (801c050 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bfc0:	8818      	ldrh	r0, [r3, #0]
 801bfc2:	4282      	cmp	r2, r0
 801bfc4:	d221      	bcs.n	801c00a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801bfc6:	4b23      	ldr	r3, [pc, #140]	; (801c054 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bfc8:	6819      	ldr	r1, [r3, #0]
 801bfca:	2314      	movs	r3, #20
 801bfcc:	fb03 1302 	mla	r3, r3, r2, r1
 801bfd0:	6858      	ldr	r0, [r3, #4]
 801bfd2:	2800      	cmp	r0, #0
 801bfd4:	d03a      	beq.n	801c04c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801bfd6:	4920      	ldr	r1, [pc, #128]	; (801c058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801bfd8:	6809      	ldr	r1, [r1, #0]
 801bfda:	2900      	cmp	r1, #0
 801bfdc:	d036      	beq.n	801c04c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801bfde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bfe2:	2900      	cmp	r1, #0
 801bfe4:	d032      	beq.n	801c04c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801bfe6:	891a      	ldrh	r2, [r3, #8]
 801bfe8:	8958      	ldrh	r0, [r3, #10]
 801bfea:	4350      	muls	r0, r2
 801bfec:	7c5a      	ldrb	r2, [r3, #17]
 801bfee:	7cdb      	ldrb	r3, [r3, #19]
 801bff0:	0952      	lsrs	r2, r2, #5
 801bff2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bff6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bffa:	2b0b      	cmp	r3, #11
 801bffc:	bf18      	it	ne
 801bffe:	0040      	lslne	r0, r0, #1
 801c000:	3003      	adds	r0, #3
 801c002:	f020 0003 	bic.w	r0, r0, #3
 801c006:	4408      	add	r0, r1
 801c008:	4770      	bx	lr
 801c00a:	4b14      	ldr	r3, [pc, #80]	; (801c05c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801c00c:	881b      	ldrh	r3, [r3, #0]
 801c00e:	4403      	add	r3, r0
 801c010:	429a      	cmp	r2, r3
 801c012:	da1a      	bge.n	801c04a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c014:	4b12      	ldr	r3, [pc, #72]	; (801c060 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801c016:	1a10      	subs	r0, r2, r0
 801c018:	210e      	movs	r1, #14
 801c01a:	681b      	ldr	r3, [r3, #0]
 801c01c:	fb01 3000 	mla	r0, r1, r0, r3
 801c020:	7b03      	ldrb	r3, [r0, #12]
 801c022:	f003 031f 	and.w	r3, r3, #31
 801c026:	2b0b      	cmp	r3, #11
 801c028:	d10b      	bne.n	801c042 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c02a:	8903      	ldrh	r3, [r0, #8]
 801c02c:	8940      	ldrh	r0, [r0, #10]
 801c02e:	4358      	muls	r0, r3
 801c030:	4b09      	ldr	r3, [pc, #36]	; (801c058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c032:	3003      	adds	r0, #3
 801c034:	6819      	ldr	r1, [r3, #0]
 801c036:	f020 0303 	bic.w	r3, r0, #3
 801c03a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c03e:	4418      	add	r0, r3
 801c040:	4770      	bx	lr
 801c042:	2b0d      	cmp	r3, #13
 801c044:	d101      	bne.n	801c04a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c046:	300d      	adds	r0, #13
 801c048:	4770      	bx	lr
 801c04a:	2000      	movs	r0, #0
 801c04c:	4770      	bx	lr
 801c04e:	bf00      	nop
 801c050:	20056798 	.word	0x20056798
 801c054:	200567a0 	.word	0x200567a0
 801c058:	2005677c 	.word	0x2005677c
 801c05c:	2005679c 	.word	0x2005679c
 801c060:	20056780 	.word	0x20056780

0801c064 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c064:	4b17      	ldr	r3, [pc, #92]	; (801c0c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801c066:	b510      	push	{r4, lr}
 801c068:	6819      	ldr	r1, [r3, #0]
 801c06a:	8803      	ldrh	r3, [r0, #0]
 801c06c:	b1e9      	cbz	r1, 801c0aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c06e:	4a16      	ldr	r2, [pc, #88]	; (801c0c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801c070:	8812      	ldrh	r2, [r2, #0]
 801c072:	429a      	cmp	r2, r3
 801c074:	d90a      	bls.n	801c08c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801c076:	2214      	movs	r2, #20
 801c078:	fb02 1303 	mla	r3, r2, r3, r1
 801c07c:	7c58      	ldrb	r0, [r3, #17]
 801c07e:	0942      	lsrs	r2, r0, #5
 801c080:	7cd8      	ldrb	r0, [r3, #19]
 801c082:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c086:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c08a:	bd10      	pop	{r4, pc}
 801c08c:	490f      	ldr	r1, [pc, #60]	; (801c0cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c08e:	8809      	ldrh	r1, [r1, #0]
 801c090:	4411      	add	r1, r2
 801c092:	428b      	cmp	r3, r1
 801c094:	da09      	bge.n	801c0aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c096:	1a9b      	subs	r3, r3, r2
 801c098:	4a0d      	ldr	r2, [pc, #52]	; (801c0d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c09a:	210e      	movs	r1, #14
 801c09c:	6812      	ldr	r2, [r2, #0]
 801c09e:	fb01 2303 	mla	r3, r1, r3, r2
 801c0a2:	7b18      	ldrb	r0, [r3, #12]
 801c0a4:	f000 001f 	and.w	r0, r0, #31
 801c0a8:	e7ef      	b.n	801c08a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c0aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c0ae:	4293      	cmp	r3, r2
 801c0b0:	d106      	bne.n	801c0c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c0b2:	f7e9 fded 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 801c0b6:	6803      	ldr	r3, [r0, #0]
 801c0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0be:	4718      	bx	r3
 801c0c0:	2000      	movs	r0, #0
 801c0c2:	e7e2      	b.n	801c08a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c0c4:	200567a0 	.word	0x200567a0
 801c0c8:	20056798 	.word	0x20056798
 801c0cc:	2005679c 	.word	0x2005679c
 801c0d0:	20056780 	.word	0x20056780

0801c0d4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c0d4:	2018      	movs	r0, #24
 801c0d6:	4770      	bx	lr

0801c0d8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c0d8:	2001      	movs	r0, #1
 801c0da:	4770      	bx	lr

0801c0dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0e0:	b085      	sub	sp, #20
 801c0e2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c0e4:	9203      	str	r2, [sp, #12]
 801c0e6:	6870      	ldr	r0, [r6, #4]
 801c0e8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c0ec:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c0f0:	9101      	str	r1, [sp, #4]
 801c0f2:	fa1f f885 	uxth.w	r8, r5
 801c0f6:	43ed      	mvns	r5, r5
 801c0f8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c0fc:	b2ed      	uxtb	r5, r5
 801c0fe:	fb00 2404 	mla	r4, r0, r4, r2
 801c102:	6832      	ldr	r2, [r6, #0]
 801c104:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c108:	4414      	add	r4, r2
 801c10a:	f8dc 2000 	ldr.w	r2, [ip]
 801c10e:	9202      	str	r2, [sp, #8]
 801c110:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c114:	f102 0e04 	add.w	lr, r2, #4
 801c118:	9a01      	ldr	r2, [sp, #4]
 801c11a:	2a00      	cmp	r2, #0
 801c11c:	dc03      	bgt.n	801c126 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c11e:	9a03      	ldr	r2, [sp, #12]
 801c120:	2a00      	cmp	r2, #0
 801c122:	f340 8116 	ble.w	801c352 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c128:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801c12c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c130:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c132:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801c136:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	dd0e      	ble.n	801c15c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c13e:	1406      	asrs	r6, r0, #16
 801c140:	d405      	bmi.n	801c14e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c142:	4556      	cmp	r6, sl
 801c144:	da03      	bge.n	801c14e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c146:	1416      	asrs	r6, r2, #16
 801c148:	d401      	bmi.n	801c14e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c14a:	454e      	cmp	r6, r9
 801c14c:	db07      	blt.n	801c15e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c14e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c150:	3b01      	subs	r3, #1
 801c152:	3403      	adds	r4, #3
 801c154:	4430      	add	r0, r6
 801c156:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c158:	4432      	add	r2, r6
 801c15a:	e7ee      	b.n	801c13a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c15c:	d063      	beq.n	801c226 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c15e:	1e5e      	subs	r6, r3, #1
 801c160:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801c162:	fb07 0706 	mla	r7, r7, r6, r0
 801c166:	143f      	asrs	r7, r7, #16
 801c168:	d454      	bmi.n	801c214 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c16a:	4557      	cmp	r7, sl
 801c16c:	da52      	bge.n	801c214 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c16e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801c170:	fb07 2606 	mla	r6, r7, r6, r2
 801c174:	1436      	asrs	r6, r6, #16
 801c176:	d44d      	bmi.n	801c214 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c178:	454e      	cmp	r6, r9
 801c17a:	da4b      	bge.n	801c214 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c17c:	1ce6      	adds	r6, r4, #3
 801c17e:	4699      	mov	r9, r3
 801c180:	f1b9 0f00 	cmp.w	r9, #0
 801c184:	f106 0603 	add.w	r6, r6, #3
 801c188:	dd48      	ble.n	801c21c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c18a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c18e:	1417      	asrs	r7, r2, #16
 801c190:	9902      	ldr	r1, [sp, #8]
 801c192:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c196:	f109 39ff 	add.w	r9, r9, #4294967295
 801c19a:	fb0b 1707 	mla	r7, fp, r7, r1
 801c19e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c1a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c1a4:	f817 700a 	ldrb.w	r7, [r7, sl]
 801c1a8:	fb1b fb05 	smulbb	fp, fp, r5
 801c1ac:	4408      	add	r0, r1
 801c1ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c1b0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c1b4:	440a      	add	r2, r1
 801c1b6:	eb0e 0a07 	add.w	sl, lr, r7
 801c1ba:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801c1be:	fb07 b708 	mla	r7, r7, r8, fp
 801c1c2:	b2bf      	uxth	r7, r7
 801c1c4:	f107 0b01 	add.w	fp, r7, #1
 801c1c8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c1cc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c1d0:	fb1b fb05 	smulbb	fp, fp, r5
 801c1d4:	123f      	asrs	r7, r7, #8
 801c1d6:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c1da:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c1de:	fb07 b708 	mla	r7, r7, r8, fp
 801c1e2:	b2bf      	uxth	r7, r7
 801c1e4:	f107 0b01 	add.w	fp, r7, #1
 801c1e8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c1ec:	123f      	asrs	r7, r7, #8
 801c1ee:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c1f2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c1f6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c1fa:	fb1a fa05 	smulbb	sl, sl, r5
 801c1fe:	fb07 a708 	mla	r7, r7, r8, sl
 801c202:	b2bf      	uxth	r7, r7
 801c204:	f107 0a01 	add.w	sl, r7, #1
 801c208:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c20c:	123f      	asrs	r7, r7, #8
 801c20e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c212:	e7b5      	b.n	801c180 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c214:	2700      	movs	r7, #0
 801c216:	1bde      	subs	r6, r3, r7
 801c218:	2e00      	cmp	r6, #0
 801c21a:	dc42      	bgt.n	801c2a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c21c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c224:	441c      	add	r4, r3
 801c226:	9b01      	ldr	r3, [sp, #4]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	f340 8092 	ble.w	801c352 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c22e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c234:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c238:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c23c:	eef0 6a62 	vmov.f32	s13, s5
 801c240:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c244:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c248:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c24c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c250:	eef0 6a43 	vmov.f32	s13, s6
 801c254:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c258:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c25c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c260:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c264:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c268:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c26c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c270:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c274:	ee12 2a90 	vmov	r2, s5
 801c278:	eef0 2a47 	vmov.f32	s5, s14
 801c27c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c280:	ee13 2a10 	vmov	r2, s6
 801c284:	9311      	str	r3, [sp, #68]	; 0x44
 801c286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c288:	eeb0 3a67 	vmov.f32	s6, s15
 801c28c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c290:	9312      	str	r3, [sp, #72]	; 0x48
 801c292:	9b01      	ldr	r3, [sp, #4]
 801c294:	9a03      	ldr	r2, [sp, #12]
 801c296:	3b01      	subs	r3, #1
 801c298:	9301      	str	r3, [sp, #4]
 801c29a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c29c:	bf08      	it	eq
 801c29e:	4613      	moveq	r3, r2
 801c2a0:	e73a      	b.n	801c118 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c2a2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c2a6:	d44e      	bmi.n	801c346 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c2a8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c2ac:	4556      	cmp	r6, sl
 801c2ae:	dd4a      	ble.n	801c346 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c2b0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c2b4:	d447      	bmi.n	801c346 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c2b6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801c2ba:	4559      	cmp	r1, fp
 801c2bc:	dd43      	ble.n	801c346 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c2be:	fa0f f986 	sxth.w	r9, r6
 801c2c2:	9902      	ldr	r1, [sp, #8]
 801c2c4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c2c8:	fb0b 1909 	mla	r9, fp, r9, r1
 801c2cc:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c2d0:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c2d4:	fb1b fb05 	smulbb	fp, fp, r5
 801c2d8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c2dc:	eb0e 0a09 	add.w	sl, lr, r9
 801c2e0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801c2e4:	fb09 b908 	mla	r9, r9, r8, fp
 801c2e8:	fa1f f989 	uxth.w	r9, r9
 801c2ec:	f109 0b01 	add.w	fp, r9, #1
 801c2f0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c2f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c2f8:	f804 9006 	strb.w	r9, [r4, r6]
 801c2fc:	4426      	add	r6, r4
 801c2fe:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c302:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c306:	fb1b fb05 	smulbb	fp, fp, r5
 801c30a:	fb09 b908 	mla	r9, r9, r8, fp
 801c30e:	fa1f f989 	uxth.w	r9, r9
 801c312:	f109 0b01 	add.w	fp, r9, #1
 801c316:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c31a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c31e:	f886 9001 	strb.w	r9, [r6, #1]
 801c322:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c326:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c32a:	fb1a fa05 	smulbb	sl, sl, r5
 801c32e:	fb09 a908 	mla	r9, r9, r8, sl
 801c332:	fa1f f989 	uxth.w	r9, r9
 801c336:	f109 0a01 	add.w	sl, r9, #1
 801c33a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c33e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c342:	f886 9002 	strb.w	r9, [r6, #2]
 801c346:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c348:	3701      	adds	r7, #1
 801c34a:	4408      	add	r0, r1
 801c34c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c34e:	440a      	add	r2, r1
 801c350:	e761      	b.n	801c216 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c352:	b005      	add	sp, #20
 801c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c358 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c35c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c35e:	4693      	mov	fp, r2
 801c360:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c366:	6868      	ldr	r0, [r5, #4]
 801c368:	6877      	ldr	r7, [r6, #4]
 801c36a:	9100      	str	r1, [sp, #0]
 801c36c:	3704      	adds	r7, #4
 801c36e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c372:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801c376:	fb00 2404 	mla	r4, r0, r4, r2
 801c37a:	682a      	ldr	r2, [r5, #0]
 801c37c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c380:	4414      	add	r4, r2
 801c382:	6832      	ldr	r2, [r6, #0]
 801c384:	9201      	str	r2, [sp, #4]
 801c386:	9a00      	ldr	r2, [sp, #0]
 801c388:	2a00      	cmp	r2, #0
 801c38a:	dc03      	bgt.n	801c394 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c38c:	f1bb 0f00 	cmp.w	fp, #0
 801c390:	f340 80bc 	ble.w	801c50c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c396:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801c39a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c39e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c3a0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801c3a4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	dd0c      	ble.n	801c3c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c3ac:	1405      	asrs	r5, r0, #16
 801c3ae:	d405      	bmi.n	801c3bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c3b0:	4555      	cmp	r5, sl
 801c3b2:	da03      	bge.n	801c3bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c3b4:	1415      	asrs	r5, r2, #16
 801c3b6:	d401      	bmi.n	801c3bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c3b8:	454d      	cmp	r5, r9
 801c3ba:	db05      	blt.n	801c3c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c3bc:	4440      	add	r0, r8
 801c3be:	4472      	add	r2, lr
 801c3c0:	3b01      	subs	r3, #1
 801c3c2:	3403      	adds	r4, #3
 801c3c4:	e7f0      	b.n	801c3a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c3c6:	d03f      	beq.n	801c448 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801c3c8:	1e5d      	subs	r5, r3, #1
 801c3ca:	fb08 0c05 	mla	ip, r8, r5, r0
 801c3ce:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c3d2:	d42e      	bmi.n	801c432 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c3d4:	45d4      	cmp	ip, sl
 801c3d6:	da2c      	bge.n	801c432 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c3d8:	fb0e 2505 	mla	r5, lr, r5, r2
 801c3dc:	142d      	asrs	r5, r5, #16
 801c3de:	d428      	bmi.n	801c432 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c3e0:	454d      	cmp	r5, r9
 801c3e2:	da26      	bge.n	801c432 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c3e4:	1ce5      	adds	r5, r4, #3
 801c3e6:	469c      	mov	ip, r3
 801c3e8:	f1bc 0f00 	cmp.w	ip, #0
 801c3ec:	f105 0503 	add.w	r5, r5, #3
 801c3f0:	dd25      	ble.n	801c43e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801c3f2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801c3f6:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c3fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c3fe:	4472      	add	r2, lr
 801c400:	468a      	mov	sl, r1
 801c402:	9901      	ldr	r1, [sp, #4]
 801c404:	fb0a 1909 	mla	r9, sl, r9, r1
 801c408:	1401      	asrs	r1, r0, #16
 801c40a:	4440      	add	r0, r8
 801c40c:	f819 9001 	ldrb.w	r9, [r9, r1]
 801c410:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c414:	eb07 0a09 	add.w	sl, r7, r9
 801c418:	f817 9009 	ldrb.w	r9, [r7, r9]
 801c41c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c420:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c424:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c428:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c42c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c430:	e7da      	b.n	801c3e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c432:	2500      	movs	r5, #0
 801c434:	eba3 0c05 	sub.w	ip, r3, r5
 801c438:	f1bc 0f00 	cmp.w	ip, #0
 801c43c:	dc3b      	bgt.n	801c4b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c43e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c442:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c446:	441c      	add	r4, r3
 801c448:	9b00      	ldr	r3, [sp, #0]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	dd5e      	ble.n	801c50c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c44e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c454:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c458:	eeb0 6a62 	vmov.f32	s12, s5
 801c45c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c460:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c464:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c468:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c46c:	eeb0 6a43 	vmov.f32	s12, s6
 801c470:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c474:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c478:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c47c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c480:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c484:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c488:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c48c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c490:	ee12 2a90 	vmov	r2, s5
 801c494:	eef0 2a47 	vmov.f32	s5, s14
 801c498:	fb92 f8f3 	sdiv	r8, r2, r3
 801c49c:	ee13 2a10 	vmov	r2, s6
 801c4a0:	eeb0 3a67 	vmov.f32	s6, s15
 801c4a4:	fb92 fef3 	sdiv	lr, r2, r3
 801c4a8:	9b00      	ldr	r3, [sp, #0]
 801c4aa:	3b01      	subs	r3, #1
 801c4ac:	9300      	str	r3, [sp, #0]
 801c4ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4b0:	bf08      	it	eq
 801c4b2:	465b      	moveq	r3, fp
 801c4b4:	e767      	b.n	801c386 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c4b6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c4ba:	d423      	bmi.n	801c504 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c4bc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801c4c0:	45cc      	cmp	ip, r9
 801c4c2:	dd1f      	ble.n	801c504 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c4c4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c4c8:	d41c      	bmi.n	801c504 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c4ca:	68f1      	ldr	r1, [r6, #12]
 801c4cc:	4551      	cmp	r1, sl
 801c4ce:	dd19      	ble.n	801c504 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c4d0:	fa0f fc8c 	sxth.w	ip, ip
 801c4d4:	9901      	ldr	r1, [sp, #4]
 801c4d6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801c4da:	f81c c009 	ldrb.w	ip, [ip, r9]
 801c4de:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c4e2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801c4e6:	eb07 090c 	add.w	r9, r7, ip
 801c4ea:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801c4ee:	f804 a00c 	strb.w	sl, [r4, ip]
 801c4f2:	44a4      	add	ip, r4
 801c4f4:	f899 a001 	ldrb.w	sl, [r9, #1]
 801c4f8:	f88c a001 	strb.w	sl, [ip, #1]
 801c4fc:	f899 9002 	ldrb.w	r9, [r9, #2]
 801c500:	f88c 9002 	strb.w	r9, [ip, #2]
 801c504:	4440      	add	r0, r8
 801c506:	4472      	add	r2, lr
 801c508:	3501      	adds	r5, #1
 801c50a:	e793      	b.n	801c434 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801c50c:	b003      	add	sp, #12
 801c50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c512 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c516:	b085      	sub	sp, #20
 801c518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c51c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c51e:	9202      	str	r2, [sp, #8]
 801c520:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c524:	6860      	ldr	r0, [r4, #4]
 801c526:	9203      	str	r2, [sp, #12]
 801c528:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c52c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c530:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c534:	fb00 2505 	mla	r5, r0, r5, r2
 801c538:	6822      	ldr	r2, [r4, #0]
 801c53a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c53e:	4415      	add	r5, r2
 801c540:	f8dc 2000 	ldr.w	r2, [ip]
 801c544:	9200      	str	r2, [sp, #0]
 801c546:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c54a:	3204      	adds	r2, #4
 801c54c:	9201      	str	r2, [sp, #4]
 801c54e:	2900      	cmp	r1, #0
 801c550:	dc03      	bgt.n	801c55a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c552:	9a02      	ldr	r2, [sp, #8]
 801c554:	2a00      	cmp	r2, #0
 801c556:	f340 8127 	ble.w	801c7a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c55a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c55c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c560:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c566:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c56a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c56e:	2b00      	cmp	r3, #0
 801c570:	dd0d      	ble.n	801c58e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c572:	1422      	asrs	r2, r4, #16
 801c574:	d405      	bmi.n	801c582 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c576:	4542      	cmp	r2, r8
 801c578:	da03      	bge.n	801c582 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c57a:	1402      	asrs	r2, r0, #16
 801c57c:	d401      	bmi.n	801c582 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c57e:	42ba      	cmp	r2, r7
 801c580:	db06      	blt.n	801c590 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c582:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c584:	4474      	add	r4, lr
 801c586:	3b01      	subs	r3, #1
 801c588:	3503      	adds	r5, #3
 801c58a:	4410      	add	r0, r2
 801c58c:	e7ef      	b.n	801c56e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c58e:	d075      	beq.n	801c67c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c590:	1e5a      	subs	r2, r3, #1
 801c592:	fb0e 4602 	mla	r6, lr, r2, r4
 801c596:	1436      	asrs	r6, r6, #16
 801c598:	d465      	bmi.n	801c666 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c59a:	4546      	cmp	r6, r8
 801c59c:	da63      	bge.n	801c666 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c59e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c5a0:	fb06 0202 	mla	r2, r6, r2, r0
 801c5a4:	1412      	asrs	r2, r2, #16
 801c5a6:	d45e      	bmi.n	801c666 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c5a8:	42ba      	cmp	r2, r7
 801c5aa:	da5c      	bge.n	801c666 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c5ac:	1cef      	adds	r7, r5, #3
 801c5ae:	4699      	mov	r9, r3
 801c5b0:	f1b9 0f00 	cmp.w	r9, #0
 801c5b4:	dd5d      	ble.n	801c672 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c5b6:	1402      	asrs	r2, r0, #16
 801c5b8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c5bc:	1426      	asrs	r6, r4, #16
 801c5be:	4692      	mov	sl, r2
 801c5c0:	9a00      	ldr	r2, [sp, #0]
 801c5c2:	fb08 220a 	mla	r2, r8, sl, r2
 801c5c6:	5d92      	ldrb	r2, [r2, r6]
 801c5c8:	9e01      	ldr	r6, [sp, #4]
 801c5ca:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c5ce:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c5d2:	d041      	beq.n	801c658 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c5d4:	9a03      	ldr	r2, [sp, #12]
 801c5d6:	fa5f fb86 	uxtb.w	fp, r6
 801c5da:	fb02 f808 	mul.w	r8, r2, r8
 801c5de:	f108 0201 	add.w	r2, r8, #1
 801c5e2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c5e6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c5ea:	1212      	asrs	r2, r2, #8
 801c5ec:	fa1f fa82 	uxth.w	sl, r2
 801c5f0:	43d2      	mvns	r2, r2
 801c5f2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c5f6:	b2d2      	uxtb	r2, r2
 801c5f8:	fb08 b802 	mla	r8, r8, r2, fp
 801c5fc:	fa1f f888 	uxth.w	r8, r8
 801c600:	f108 0b01 	add.w	fp, r8, #1
 801c604:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c608:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c60c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c610:	fb1b fb0a 	smulbb	fp, fp, sl
 801c614:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c618:	fb16 fa0a 	smulbb	sl, r6, sl
 801c61c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c620:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c624:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c628:	fb06 aa02 	mla	sl, r6, r2, sl
 801c62c:	fb08 b802 	mla	r8, r8, r2, fp
 801c630:	fa1f fa8a 	uxth.w	sl, sl
 801c634:	fa1f f888 	uxth.w	r8, r8
 801c638:	f10a 0601 	add.w	r6, sl, #1
 801c63c:	f108 0b01 	add.w	fp, r8, #1
 801c640:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c644:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c648:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c64c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c650:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c654:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c65a:	4474      	add	r4, lr
 801c65c:	3703      	adds	r7, #3
 801c65e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c662:	4410      	add	r0, r2
 801c664:	e7a4      	b.n	801c5b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c666:	f04f 0800 	mov.w	r8, #0
 801c66a:	eba3 0208 	sub.w	r2, r3, r8
 801c66e:	2a00      	cmp	r2, #0
 801c670:	dc3b      	bgt.n	801c6ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801c672:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c676:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c67a:	441d      	add	r5, r3
 801c67c:	2900      	cmp	r1, #0
 801c67e:	f340 8093 	ble.w	801c7a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c682:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c688:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c68c:	3901      	subs	r1, #1
 801c68e:	eeb0 6a62 	vmov.f32	s12, s5
 801c692:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c696:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c69a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c69e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c6a2:	eeb0 6a43 	vmov.f32	s12, s6
 801c6a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6aa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c6ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6c6:	ee12 2a90 	vmov	r2, s5
 801c6ca:	eef0 2a47 	vmov.f32	s5, s14
 801c6ce:	fb92 fef3 	sdiv	lr, r2, r3
 801c6d2:	ee13 2a10 	vmov	r2, s6
 801c6d6:	eeb0 3a67 	vmov.f32	s6, s15
 801c6da:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6de:	9a02      	ldr	r2, [sp, #8]
 801c6e0:	9312      	str	r3, [sp, #72]	; 0x48
 801c6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6e4:	bf08      	it	eq
 801c6e6:	4613      	moveq	r3, r2
 801c6e8:	e731      	b.n	801c54e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c6ea:	1427      	asrs	r7, r4, #16
 801c6ec:	d456      	bmi.n	801c79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c6ee:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c6f2:	42be      	cmp	r6, r7
 801c6f4:	dd52      	ble.n	801c79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c6f6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c6fa:	d44f      	bmi.n	801c79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c6fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c700:	454a      	cmp	r2, r9
 801c702:	dd4b      	ble.n	801c79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c704:	9a00      	ldr	r2, [sp, #0]
 801c706:	b236      	sxth	r6, r6
 801c708:	fb09 2606 	mla	r6, r9, r6, r2
 801c70c:	5df2      	ldrb	r2, [r6, r7]
 801c70e:	9e01      	ldr	r6, [sp, #4]
 801c710:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c714:	0e3a      	lsrs	r2, r7, #24
 801c716:	d041      	beq.n	801c79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c718:	9e03      	ldr	r6, [sp, #12]
 801c71a:	fa5f fb87 	uxtb.w	fp, r7
 801c71e:	4372      	muls	r2, r6
 801c720:	1c56      	adds	r6, r2, #1
 801c722:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c726:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c72a:	1212      	asrs	r2, r2, #8
 801c72c:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c730:	fa1f fa82 	uxth.w	sl, r2
 801c734:	43d2      	mvns	r2, r2
 801c736:	fb1b fb0a 	smulbb	fp, fp, sl
 801c73a:	b2d2      	uxtb	r2, r2
 801c73c:	fb09 b902 	mla	r9, r9, r2, fp
 801c740:	fa1f f989 	uxth.w	r9, r9
 801c744:	f109 0b01 	add.w	fp, r9, #1
 801c748:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c74c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c750:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c754:	fb1b fb0a 	smulbb	fp, fp, sl
 801c758:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c75c:	fb17 fa0a 	smulbb	sl, r7, sl
 801c760:	f805 9006 	strb.w	r9, [r5, r6]
 801c764:	442e      	add	r6, r5
 801c766:	78b7      	ldrb	r7, [r6, #2]
 801c768:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c76c:	fb07 aa02 	mla	sl, r7, r2, sl
 801c770:	fb09 b902 	mla	r9, r9, r2, fp
 801c774:	fa1f fa8a 	uxth.w	sl, sl
 801c778:	fa1f f989 	uxth.w	r9, r9
 801c77c:	f10a 0701 	add.w	r7, sl, #1
 801c780:	f109 0b01 	add.w	fp, r9, #1
 801c784:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c788:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c78c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c790:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c794:	f886 a002 	strb.w	sl, [r6, #2]
 801c798:	f886 9001 	strb.w	r9, [r6, #1]
 801c79c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c79e:	4474      	add	r4, lr
 801c7a0:	f108 0801 	add.w	r8, r8, #1
 801c7a4:	4410      	add	r0, r2
 801c7a6:	e760      	b.n	801c66a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801c7a8:	b005      	add	sp, #20
 801c7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c7ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7b2:	b085      	sub	sp, #20
 801c7b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c7ba:	9203      	str	r2, [sp, #12]
 801c7bc:	6868      	ldr	r0, [r5, #4]
 801c7be:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c7c2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c7c6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c7ca:	fb00 2404 	mla	r4, r0, r4, r2
 801c7ce:	682a      	ldr	r2, [r5, #0]
 801c7d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c7d4:	4414      	add	r4, r2
 801c7d6:	f8dc 2000 	ldr.w	r2, [ip]
 801c7da:	9201      	str	r2, [sp, #4]
 801c7dc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c7e0:	3204      	adds	r2, #4
 801c7e2:	9202      	str	r2, [sp, #8]
 801c7e4:	2900      	cmp	r1, #0
 801c7e6:	dc03      	bgt.n	801c7f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c7e8:	9a03      	ldr	r2, [sp, #12]
 801c7ea:	2a00      	cmp	r2, #0
 801c7ec:	f340 8137 	ble.w	801ca5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c7f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c7f2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c7f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c7fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c7fc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c800:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c804:	2b00      	cmp	r3, #0
 801c806:	dd0d      	ble.n	801c824 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c808:	1405      	asrs	r5, r0, #16
 801c80a:	d405      	bmi.n	801c818 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c80c:	4545      	cmp	r5, r8
 801c80e:	da03      	bge.n	801c818 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c810:	1415      	asrs	r5, r2, #16
 801c812:	d401      	bmi.n	801c818 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c814:	42bd      	cmp	r5, r7
 801c816:	db06      	blt.n	801c826 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c818:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c81a:	4470      	add	r0, lr
 801c81c:	3b01      	subs	r3, #1
 801c81e:	3403      	adds	r4, #3
 801c820:	442a      	add	r2, r5
 801c822:	e7ef      	b.n	801c804 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801c824:	d070      	beq.n	801c908 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c826:	1e5d      	subs	r5, r3, #1
 801c828:	fb0e 0605 	mla	r6, lr, r5, r0
 801c82c:	1436      	asrs	r6, r6, #16
 801c82e:	d462      	bmi.n	801c8f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c830:	4546      	cmp	r6, r8
 801c832:	da60      	bge.n	801c8f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c834:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c836:	fb06 2505 	mla	r5, r6, r5, r2
 801c83a:	142d      	asrs	r5, r5, #16
 801c83c:	d45b      	bmi.n	801c8f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c83e:	42bd      	cmp	r5, r7
 801c840:	da59      	bge.n	801c8f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c842:	1ce5      	adds	r5, r4, #3
 801c844:	469a      	mov	sl, r3
 801c846:	f1ba 0f00 	cmp.w	sl, #0
 801c84a:	dd58      	ble.n	801c8fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801c84c:	1416      	asrs	r6, r2, #16
 801c84e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c852:	1407      	asrs	r7, r0, #16
 801c854:	46b1      	mov	r9, r6
 801c856:	9e01      	ldr	r6, [sp, #4]
 801c858:	fb08 6609 	mla	r6, r8, r9, r6
 801c85c:	5df6      	ldrb	r6, [r6, r7]
 801c85e:	9f02      	ldr	r7, [sp, #8]
 801c860:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801c864:	0e37      	lsrs	r7, r6, #24
 801c866:	2fff      	cmp	r7, #255	; 0xff
 801c868:	f000 80f0 	beq.w	801ca4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c86c:	fa5f f887 	uxtb.w	r8, r7
 801c870:	b3d7      	cbz	r7, 801c8e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c872:	fa1f f788 	uxth.w	r7, r8
 801c876:	ea6f 0808 	mvn.w	r8, r8
 801c87a:	fa5f fb86 	uxtb.w	fp, r6
 801c87e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c882:	fa5f f888 	uxtb.w	r8, r8
 801c886:	fb1b fb07 	smulbb	fp, fp, r7
 801c88a:	fb09 b908 	mla	r9, r9, r8, fp
 801c88e:	fa1f f989 	uxth.w	r9, r9
 801c892:	f109 0b01 	add.w	fp, r9, #1
 801c896:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c89a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c89e:	fb1b fb08 	smulbb	fp, fp, r8
 801c8a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8a6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c8aa:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c8ae:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c8b2:	fb09 b907 	mla	r9, r9, r7, fp
 801c8b6:	fa1f f989 	uxth.w	r9, r9
 801c8ba:	f109 0b01 	add.w	fp, r9, #1
 801c8be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8c6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c8ca:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c8ce:	fb19 f808 	smulbb	r8, r9, r8
 801c8d2:	fb06 8607 	mla	r6, r6, r7, r8
 801c8d6:	b2b6      	uxth	r6, r6
 801c8d8:	f106 0801 	add.w	r8, r6, #1
 801c8dc:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801c8e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c8e4:	f805 8c01 	strb.w	r8, [r5, #-1]
 801c8e8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c8ea:	4470      	add	r0, lr
 801c8ec:	3503      	adds	r5, #3
 801c8ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c8f2:	4432      	add	r2, r6
 801c8f4:	e7a7      	b.n	801c846 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c8f6:	2600      	movs	r6, #0
 801c8f8:	1b9d      	subs	r5, r3, r6
 801c8fa:	2d00      	cmp	r5, #0
 801c8fc:	dc3b      	bgt.n	801c976 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c8fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c902:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c906:	441c      	add	r4, r3
 801c908:	2900      	cmp	r1, #0
 801c90a:	f340 80a8 	ble.w	801ca5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c90e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c914:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c918:	3901      	subs	r1, #1
 801c91a:	eeb0 6a62 	vmov.f32	s12, s5
 801c91e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c922:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c926:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c92a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c92e:	eeb0 6a43 	vmov.f32	s12, s6
 801c932:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c936:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c93a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c93e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c942:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c946:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c94a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c94e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c952:	ee12 2a90 	vmov	r2, s5
 801c956:	eef0 2a47 	vmov.f32	s5, s14
 801c95a:	fb92 fef3 	sdiv	lr, r2, r3
 801c95e:	ee13 2a10 	vmov	r2, s6
 801c962:	eeb0 3a67 	vmov.f32	s6, s15
 801c966:	fb92 f3f3 	sdiv	r3, r2, r3
 801c96a:	9a03      	ldr	r2, [sp, #12]
 801c96c:	9312      	str	r3, [sp, #72]	; 0x48
 801c96e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c970:	bf08      	it	eq
 801c972:	4613      	moveq	r3, r2
 801c974:	e736      	b.n	801c7e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c976:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c97a:	d457      	bmi.n	801ca2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c97c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801c980:	4547      	cmp	r7, r8
 801c982:	dd53      	ble.n	801ca2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c984:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c988:	d450      	bmi.n	801ca2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c98a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801c98e:	454d      	cmp	r5, r9
 801c990:	dd4c      	ble.n	801ca2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c992:	9d01      	ldr	r5, [sp, #4]
 801c994:	b23f      	sxth	r7, r7
 801c996:	fb09 5707 	mla	r7, r9, r7, r5
 801c99a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801c99e:	9f02      	ldr	r7, [sp, #8]
 801c9a0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801c9a4:	0e2f      	lsrs	r7, r5, #24
 801c9a6:	2fff      	cmp	r7, #255	; 0xff
 801c9a8:	d045      	beq.n	801ca36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c9aa:	fa5f f987 	uxtb.w	r9, r7
 801c9ae:	b3ef      	cbz	r7, 801ca2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c9b0:	fa1f f889 	uxth.w	r8, r9
 801c9b4:	ea6f 0909 	mvn.w	r9, r9
 801c9b8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c9bc:	fa5f fb85 	uxtb.w	fp, r5
 801c9c0:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c9c4:	fa5f f989 	uxtb.w	r9, r9
 801c9c8:	fb1b fb08 	smulbb	fp, fp, r8
 801c9cc:	fb0a ba09 	mla	sl, sl, r9, fp
 801c9d0:	fa1f fa8a 	uxth.w	sl, sl
 801c9d4:	f10a 0b01 	add.w	fp, sl, #1
 801c9d8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c9dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9e0:	f804 a007 	strb.w	sl, [r4, r7]
 801c9e4:	4427      	add	r7, r4
 801c9e6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c9ea:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c9ee:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c9f2:	fb1b fb09 	smulbb	fp, fp, r9
 801c9f6:	fb0a ba08 	mla	sl, sl, r8, fp
 801c9fa:	fa1f fa8a 	uxth.w	sl, sl
 801c9fe:	f10a 0b01 	add.w	fp, sl, #1
 801ca02:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ca06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca0a:	f887 a001 	strb.w	sl, [r7, #1]
 801ca0e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ca12:	fb1a f909 	smulbb	r9, sl, r9
 801ca16:	fb05 9508 	mla	r5, r5, r8, r9
 801ca1a:	b2ad      	uxth	r5, r5
 801ca1c:	f105 0901 	add.w	r9, r5, #1
 801ca20:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801ca24:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca28:	f887 9002 	strb.w	r9, [r7, #2]
 801ca2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ca2e:	4470      	add	r0, lr
 801ca30:	3601      	adds	r6, #1
 801ca32:	442a      	add	r2, r5
 801ca34:	e760      	b.n	801c8f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ca36:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ca3a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801ca3e:	55e5      	strb	r5, [r4, r7]
 801ca40:	4427      	add	r7, r4
 801ca42:	0c2d      	lsrs	r5, r5, #16
 801ca44:	f887 8001 	strb.w	r8, [r7, #1]
 801ca48:	70bd      	strb	r5, [r7, #2]
 801ca4a:	e7ef      	b.n	801ca2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ca4c:	0a37      	lsrs	r7, r6, #8
 801ca4e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801ca52:	0c36      	lsrs	r6, r6, #16
 801ca54:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ca58:	f805 6c01 	strb.w	r6, [r5, #-1]
 801ca5c:	e744      	b.n	801c8e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ca5e:	b005      	add	sp, #20
 801ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca68:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ca6a:	9201      	str	r2, [sp, #4]
 801ca6c:	6870      	ldr	r0, [r6, #4]
 801ca6e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801ca72:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801ca76:	fa1f fe85 	uxth.w	lr, r5
 801ca7a:	43ed      	mvns	r5, r5
 801ca7c:	f8dc 8000 	ldr.w	r8, [ip]
 801ca80:	b2ed      	uxtb	r5, r5
 801ca82:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ca86:	fb00 2404 	mla	r4, r0, r4, r2
 801ca8a:	6832      	ldr	r2, [r6, #0]
 801ca8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca90:	4414      	add	r4, r2
 801ca92:	2900      	cmp	r1, #0
 801ca94:	dc03      	bgt.n	801ca9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ca96:	9a01      	ldr	r2, [sp, #4]
 801ca98:	2a00      	cmp	r2, #0
 801ca9a:	f340 810d 	ble.w	801ccb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ca9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801caa0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801caa4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801caa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801caaa:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801caae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	dd0e      	ble.n	801cad4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cab6:	1406      	asrs	r6, r0, #16
 801cab8:	d405      	bmi.n	801cac6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801caba:	4556      	cmp	r6, sl
 801cabc:	da03      	bge.n	801cac6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cabe:	1416      	asrs	r6, r2, #16
 801cac0:	d401      	bmi.n	801cac6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cac2:	454e      	cmp	r6, r9
 801cac4:	db07      	blt.n	801cad6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cac6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cac8:	3b01      	subs	r3, #1
 801caca:	3403      	adds	r4, #3
 801cacc:	4430      	add	r0, r6
 801cace:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cad0:	4432      	add	r2, r6
 801cad2:	e7ee      	b.n	801cab2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801cad4:	d060      	beq.n	801cb98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801cad6:	1e5e      	subs	r6, r3, #1
 801cad8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cada:	fb07 0706 	mla	r7, r7, r6, r0
 801cade:	143f      	asrs	r7, r7, #16
 801cae0:	d451      	bmi.n	801cb86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cae2:	4557      	cmp	r7, sl
 801cae4:	da4f      	bge.n	801cb86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cae6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cae8:	fb07 2606 	mla	r6, r7, r6, r2
 801caec:	1436      	asrs	r6, r6, #16
 801caee:	d44a      	bmi.n	801cb86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801caf0:	454e      	cmp	r6, r9
 801caf2:	da48      	bge.n	801cb86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801caf4:	1ce6      	adds	r6, r4, #3
 801caf6:	4699      	mov	r9, r3
 801caf8:	f1b9 0f00 	cmp.w	r9, #0
 801cafc:	f106 0603 	add.w	r6, r6, #3
 801cb00:	dd45      	ble.n	801cb8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801cb02:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801cb06:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cb0a:	1417      	asrs	r7, r2, #16
 801cb0c:	f109 39ff 	add.w	r9, r9, #4294967295
 801cb10:	fb0b a707 	mla	r7, fp, r7, sl
 801cb14:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801cb18:	fb1b fb05 	smulbb	fp, fp, r5
 801cb1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cb20:	eb08 0a07 	add.w	sl, r8, r7
 801cb24:	f818 7007 	ldrb.w	r7, [r8, r7]
 801cb28:	fb07 b70e 	mla	r7, r7, lr, fp
 801cb2c:	b2bf      	uxth	r7, r7
 801cb2e:	f107 0b01 	add.w	fp, r7, #1
 801cb32:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb36:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801cb3a:	fb1b fb05 	smulbb	fp, fp, r5
 801cb3e:	123f      	asrs	r7, r7, #8
 801cb40:	f806 7c06 	strb.w	r7, [r6, #-6]
 801cb44:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801cb48:	fb07 b70e 	mla	r7, r7, lr, fp
 801cb4c:	b2bf      	uxth	r7, r7
 801cb4e:	f107 0b01 	add.w	fp, r7, #1
 801cb52:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb56:	123f      	asrs	r7, r7, #8
 801cb58:	f806 7c05 	strb.w	r7, [r6, #-5]
 801cb5c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801cb60:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cb64:	fb1a fa05 	smulbb	sl, sl, r5
 801cb68:	fb07 a70e 	mla	r7, r7, lr, sl
 801cb6c:	b2bf      	uxth	r7, r7
 801cb6e:	f107 0a01 	add.w	sl, r7, #1
 801cb72:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cb76:	123f      	asrs	r7, r7, #8
 801cb78:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cb7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cb7e:	4438      	add	r0, r7
 801cb80:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cb82:	443a      	add	r2, r7
 801cb84:	e7b8      	b.n	801caf8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cb86:	2700      	movs	r7, #0
 801cb88:	1bde      	subs	r6, r3, r7
 801cb8a:	2e00      	cmp	r6, #0
 801cb8c:	dc3f      	bgt.n	801cc0e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cb8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb96:	441c      	add	r4, r3
 801cb98:	2900      	cmp	r1, #0
 801cb9a:	f340 808d 	ble.w	801ccb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801cb9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cba4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cba8:	3901      	subs	r1, #1
 801cbaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbae:	eef0 6a62 	vmov.f32	s13, s5
 801cbb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cbb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbbe:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801cbc2:	eef0 6a43 	vmov.f32	s13, s6
 801cbc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbca:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801cbce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbda:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbe2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbe6:	ee12 2a90 	vmov	r2, s5
 801cbea:	eef0 2a47 	vmov.f32	s5, s14
 801cbee:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbf2:	ee13 2a10 	vmov	r2, s6
 801cbf6:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbfa:	eeb0 3a67 	vmov.f32	s6, s15
 801cbfe:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc02:	9a01      	ldr	r2, [sp, #4]
 801cc04:	9310      	str	r3, [sp, #64]	; 0x40
 801cc06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc08:	bf08      	it	eq
 801cc0a:	4613      	moveq	r3, r2
 801cc0c:	e741      	b.n	801ca92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cc0e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cc12:	d44b      	bmi.n	801ccac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc14:	f8dc b008 	ldr.w	fp, [ip, #8]
 801cc18:	45cb      	cmp	fp, r9
 801cc1a:	dd47      	ble.n	801ccac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc1c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cc20:	d444      	bmi.n	801ccac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc22:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801cc26:	4556      	cmp	r6, sl
 801cc28:	dd40      	ble.n	801ccac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc2a:	fa0f f68b 	sxth.w	r6, fp
 801cc2e:	fb0a 9906 	mla	r9, sl, r6, r9
 801cc32:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cc36:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cc3a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801cc3e:	fb1b fb05 	smulbb	fp, fp, r5
 801cc42:	eb08 0a09 	add.w	sl, r8, r9
 801cc46:	f818 9009 	ldrb.w	r9, [r8, r9]
 801cc4a:	fb09 b90e 	mla	r9, r9, lr, fp
 801cc4e:	fa1f f989 	uxth.w	r9, r9
 801cc52:	f109 0b01 	add.w	fp, r9, #1
 801cc56:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc5e:	f804 9006 	strb.w	r9, [r4, r6]
 801cc62:	4426      	add	r6, r4
 801cc64:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cc68:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cc6c:	fb1b fb05 	smulbb	fp, fp, r5
 801cc70:	fb09 b90e 	mla	r9, r9, lr, fp
 801cc74:	fa1f f989 	uxth.w	r9, r9
 801cc78:	f109 0b01 	add.w	fp, r9, #1
 801cc7c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc80:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc84:	f886 9001 	strb.w	r9, [r6, #1]
 801cc88:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cc8c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801cc90:	fb1a fa05 	smulbb	sl, sl, r5
 801cc94:	fb09 a90e 	mla	r9, r9, lr, sl
 801cc98:	fa1f f989 	uxth.w	r9, r9
 801cc9c:	f109 0a01 	add.w	sl, r9, #1
 801cca0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801cca4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cca8:	f886 9002 	strb.w	r9, [r6, #2]
 801ccac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ccae:	3701      	adds	r7, #1
 801ccb0:	4430      	add	r0, r6
 801ccb2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ccb4:	4432      	add	r2, r6
 801ccb6:	e767      	b.n	801cb88 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801ccb8:	b003      	add	sp, #12
 801ccba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ccbe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ccbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccc2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ccc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ccc8:	9201      	str	r2, [sp, #4]
 801ccca:	6868      	ldr	r0, [r5, #4]
 801cccc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ccce:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ccd2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801ccd6:	fb00 2404 	mla	r4, r0, r4, r2
 801ccda:	682a      	ldr	r2, [r5, #0]
 801ccdc:	f8d7 8000 	ldr.w	r8, [r7]
 801cce0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cce4:	4414      	add	r4, r2
 801cce6:	2900      	cmp	r1, #0
 801cce8:	dc03      	bgt.n	801ccf2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ccea:	9a01      	ldr	r2, [sp, #4]
 801ccec:	2a00      	cmp	r2, #0
 801ccee:	f340 80af 	ble.w	801ce50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ccf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ccf4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ccf8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ccfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ccfe:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801cd02:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	dd0c      	ble.n	801cd24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cd0a:	1405      	asrs	r5, r0, #16
 801cd0c:	d405      	bmi.n	801cd1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cd0e:	4555      	cmp	r5, sl
 801cd10:	da03      	bge.n	801cd1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cd12:	1415      	asrs	r5, r2, #16
 801cd14:	d401      	bmi.n	801cd1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cd16:	454d      	cmp	r5, r9
 801cd18:	db05      	blt.n	801cd26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cd1a:	4470      	add	r0, lr
 801cd1c:	4462      	add	r2, ip
 801cd1e:	3b01      	subs	r3, #1
 801cd20:	3403      	adds	r4, #3
 801cd22:	e7f0      	b.n	801cd06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cd24:	d038      	beq.n	801cd98 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cd26:	1e5d      	subs	r5, r3, #1
 801cd28:	fb0e 0605 	mla	r6, lr, r5, r0
 801cd2c:	1436      	asrs	r6, r6, #16
 801cd2e:	d42a      	bmi.n	801cd86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd30:	4556      	cmp	r6, sl
 801cd32:	da28      	bge.n	801cd86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd34:	fb0c 2505 	mla	r5, ip, r5, r2
 801cd38:	142d      	asrs	r5, r5, #16
 801cd3a:	d424      	bmi.n	801cd86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd3c:	454d      	cmp	r5, r9
 801cd3e:	da22      	bge.n	801cd86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd40:	1ce6      	adds	r6, r4, #3
 801cd42:	4699      	mov	r9, r3
 801cd44:	f1b9 0f00 	cmp.w	r9, #0
 801cd48:	f106 0603 	add.w	r6, r6, #3
 801cd4c:	dd1f      	ble.n	801cd8e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801cd4e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801cd52:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cd56:	1415      	asrs	r5, r2, #16
 801cd58:	4470      	add	r0, lr
 801cd5a:	4462      	add	r2, ip
 801cd5c:	f109 39ff 	add.w	r9, r9, #4294967295
 801cd60:	fb0b a505 	mla	r5, fp, r5, sl
 801cd64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd68:	eb08 0a05 	add.w	sl, r8, r5
 801cd6c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801cd70:	f806 5c06 	strb.w	r5, [r6, #-6]
 801cd74:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801cd78:	f806 5c05 	strb.w	r5, [r6, #-5]
 801cd7c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801cd80:	f806 5c04 	strb.w	r5, [r6, #-4]
 801cd84:	e7de      	b.n	801cd44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cd86:	2600      	movs	r6, #0
 801cd88:	1b9d      	subs	r5, r3, r6
 801cd8a:	2d00      	cmp	r5, #0
 801cd8c:	dc38      	bgt.n	801ce00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cd8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd96:	441c      	add	r4, r3
 801cd98:	2900      	cmp	r1, #0
 801cd9a:	dd59      	ble.n	801ce50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801cd9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cda0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cda2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cda6:	3901      	subs	r1, #1
 801cda8:	eeb0 6a62 	vmov.f32	s12, s5
 801cdac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cdb0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cdb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdb8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cdbc:	eeb0 6a43 	vmov.f32	s12, s6
 801cdc0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdc4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cdc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdcc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdd0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdd4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdd8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cddc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cde0:	ee12 2a90 	vmov	r2, s5
 801cde4:	eef0 2a47 	vmov.f32	s5, s14
 801cde8:	fb92 fef3 	sdiv	lr, r2, r3
 801cdec:	ee13 2a10 	vmov	r2, s6
 801cdf0:	eeb0 3a67 	vmov.f32	s6, s15
 801cdf4:	fb92 fcf3 	sdiv	ip, r2, r3
 801cdf8:	9a01      	ldr	r2, [sp, #4]
 801cdfa:	bf08      	it	eq
 801cdfc:	4613      	moveq	r3, r2
 801cdfe:	e772      	b.n	801cce6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ce00:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ce04:	d420      	bmi.n	801ce48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce06:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801ce0a:	45cb      	cmp	fp, r9
 801ce0c:	dd1c      	ble.n	801ce48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce0e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ce12:	d419      	bmi.n	801ce48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce14:	68fd      	ldr	r5, [r7, #12]
 801ce16:	4555      	cmp	r5, sl
 801ce18:	dd16      	ble.n	801ce48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce1a:	fa0f f58b 	sxth.w	r5, fp
 801ce1e:	fb0a 9505 	mla	r5, sl, r5, r9
 801ce22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce26:	f818 9005 	ldrb.w	r9, [r8, r5]
 801ce2a:	eb08 0b05 	add.w	fp, r8, r5
 801ce2e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801ce32:	f804 9005 	strb.w	r9, [r4, r5]
 801ce36:	4425      	add	r5, r4
 801ce38:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ce3c:	f885 9001 	strb.w	r9, [r5, #1]
 801ce40:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ce44:	f885 9002 	strb.w	r9, [r5, #2]
 801ce48:	4470      	add	r0, lr
 801ce4a:	4462      	add	r2, ip
 801ce4c:	3601      	adds	r6, #1
 801ce4e:	e79b      	b.n	801cd88 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801ce50:	b003      	add	sp, #12
 801ce52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce5a:	b085      	sub	sp, #20
 801ce5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ce62:	9202      	str	r2, [sp, #8]
 801ce64:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801ce68:	6860      	ldr	r0, [r4, #4]
 801ce6a:	9203      	str	r2, [sp, #12]
 801ce6c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ce70:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801ce74:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ce78:	fb00 2505 	mla	r5, r0, r5, r2
 801ce7c:	6822      	ldr	r2, [r4, #0]
 801ce7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce82:	4415      	add	r5, r2
 801ce84:	f8dc 2000 	ldr.w	r2, [ip]
 801ce88:	9201      	str	r2, [sp, #4]
 801ce8a:	2900      	cmp	r1, #0
 801ce8c:	dc03      	bgt.n	801ce96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ce8e:	9a02      	ldr	r2, [sp, #8]
 801ce90:	2a00      	cmp	r2, #0
 801ce92:	f340 8122 	ble.w	801d0da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801ce96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce98:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ce9c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cea0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cea2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cea6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	dd0d      	ble.n	801ceca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ceae:	1422      	asrs	r2, r4, #16
 801ceb0:	d405      	bmi.n	801cebe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ceb2:	4542      	cmp	r2, r8
 801ceb4:	da03      	bge.n	801cebe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ceb6:	1402      	asrs	r2, r0, #16
 801ceb8:	d401      	bmi.n	801cebe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ceba:	42ba      	cmp	r2, r7
 801cebc:	db06      	blt.n	801cecc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cebe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cec0:	4474      	add	r4, lr
 801cec2:	3b01      	subs	r3, #1
 801cec4:	3503      	adds	r5, #3
 801cec6:	4410      	add	r0, r2
 801cec8:	e7ef      	b.n	801ceaa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ceca:	d072      	beq.n	801cfb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801cecc:	1e5a      	subs	r2, r3, #1
 801cece:	fb0e 4602 	mla	r6, lr, r2, r4
 801ced2:	1436      	asrs	r6, r6, #16
 801ced4:	d462      	bmi.n	801cf9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ced6:	4546      	cmp	r6, r8
 801ced8:	da60      	bge.n	801cf9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ceda:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cedc:	fb06 0202 	mla	r2, r6, r2, r0
 801cee0:	1412      	asrs	r2, r2, #16
 801cee2:	d45b      	bmi.n	801cf9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cee4:	42ba      	cmp	r2, r7
 801cee6:	da59      	bge.n	801cf9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cee8:	1cef      	adds	r7, r5, #3
 801ceea:	4699      	mov	r9, r3
 801ceec:	f1b9 0f00 	cmp.w	r9, #0
 801cef0:	dd5a      	ble.n	801cfa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cef2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cef6:	1426      	asrs	r6, r4, #16
 801cef8:	1402      	asrs	r2, r0, #16
 801cefa:	fb08 6202 	mla	r2, r8, r2, r6
 801cefe:	9e01      	ldr	r6, [sp, #4]
 801cf00:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cf04:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801cf08:	d041      	beq.n	801cf8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cf0a:	9a03      	ldr	r2, [sp, #12]
 801cf0c:	fa5f fb86 	uxtb.w	fp, r6
 801cf10:	fb02 f808 	mul.w	r8, r2, r8
 801cf14:	f108 0201 	add.w	r2, r8, #1
 801cf18:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801cf1c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801cf20:	1212      	asrs	r2, r2, #8
 801cf22:	fa1f fa82 	uxth.w	sl, r2
 801cf26:	43d2      	mvns	r2, r2
 801cf28:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf2c:	b2d2      	uxtb	r2, r2
 801cf2e:	fb08 b802 	mla	r8, r8, r2, fp
 801cf32:	fa1f f888 	uxth.w	r8, r8
 801cf36:	f108 0b01 	add.w	fp, r8, #1
 801cf3a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cf3e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cf42:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cf46:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cf4e:	fb16 fa0a 	smulbb	sl, r6, sl
 801cf52:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cf56:	f807 8c03 	strb.w	r8, [r7, #-3]
 801cf5a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801cf5e:	fb06 aa02 	mla	sl, r6, r2, sl
 801cf62:	fb08 b802 	mla	r8, r8, r2, fp
 801cf66:	fa1f fa8a 	uxth.w	sl, sl
 801cf6a:	fa1f f888 	uxth.w	r8, r8
 801cf6e:	f10a 0601 	add.w	r6, sl, #1
 801cf72:	f108 0b01 	add.w	fp, r8, #1
 801cf76:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cf7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cf7e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf82:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cf86:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cf8a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801cf8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf90:	4474      	add	r4, lr
 801cf92:	3703      	adds	r7, #3
 801cf94:	f109 39ff 	add.w	r9, r9, #4294967295
 801cf98:	4410      	add	r0, r2
 801cf9a:	e7a7      	b.n	801ceec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cf9c:	f04f 0800 	mov.w	r8, #0
 801cfa0:	eba3 0208 	sub.w	r2, r3, r8
 801cfa4:	2a00      	cmp	r2, #0
 801cfa6:	dc3b      	bgt.n	801d020 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801cfa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cfac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfb0:	441d      	add	r5, r3
 801cfb2:	2900      	cmp	r1, #0
 801cfb4:	f340 8091 	ble.w	801d0da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801cfb8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cfbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfbe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cfc2:	3901      	subs	r1, #1
 801cfc4:	eeb0 6a62 	vmov.f32	s12, s5
 801cfc8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cfcc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cfd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfd4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cfd8:	eeb0 6a43 	vmov.f32	s12, s6
 801cfdc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfe0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cfe4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cfe8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cfec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cff0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cff4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cff8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cffc:	ee12 2a90 	vmov	r2, s5
 801d000:	eef0 2a47 	vmov.f32	s5, s14
 801d004:	fb92 fef3 	sdiv	lr, r2, r3
 801d008:	ee13 2a10 	vmov	r2, s6
 801d00c:	eeb0 3a67 	vmov.f32	s6, s15
 801d010:	fb92 f3f3 	sdiv	r3, r2, r3
 801d014:	9a02      	ldr	r2, [sp, #8]
 801d016:	9312      	str	r3, [sp, #72]	; 0x48
 801d018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d01a:	bf08      	it	eq
 801d01c:	4613      	moveq	r3, r2
 801d01e:	e734      	b.n	801ce8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d020:	1427      	asrs	r7, r4, #16
 801d022:	d454      	bmi.n	801d0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d024:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d028:	42be      	cmp	r6, r7
 801d02a:	dd50      	ble.n	801d0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d02c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d030:	d44d      	bmi.n	801d0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d032:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d036:	454a      	cmp	r2, r9
 801d038:	dd49      	ble.n	801d0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d03a:	b236      	sxth	r6, r6
 801d03c:	9a01      	ldr	r2, [sp, #4]
 801d03e:	fb09 7606 	mla	r6, r9, r6, r7
 801d042:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d046:	0e3a      	lsrs	r2, r7, #24
 801d048:	d041      	beq.n	801d0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d04a:	9e03      	ldr	r6, [sp, #12]
 801d04c:	fa5f fb87 	uxtb.w	fp, r7
 801d050:	4372      	muls	r2, r6
 801d052:	1c56      	adds	r6, r2, #1
 801d054:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d058:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801d05c:	1212      	asrs	r2, r2, #8
 801d05e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d062:	fa1f fa82 	uxth.w	sl, r2
 801d066:	43d2      	mvns	r2, r2
 801d068:	fb1b fb0a 	smulbb	fp, fp, sl
 801d06c:	b2d2      	uxtb	r2, r2
 801d06e:	fb09 b902 	mla	r9, r9, r2, fp
 801d072:	fa1f f989 	uxth.w	r9, r9
 801d076:	f109 0b01 	add.w	fp, r9, #1
 801d07a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d07e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d082:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d086:	fb1b fb0a 	smulbb	fp, fp, sl
 801d08a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d08e:	fb17 fa0a 	smulbb	sl, r7, sl
 801d092:	f805 9006 	strb.w	r9, [r5, r6]
 801d096:	442e      	add	r6, r5
 801d098:	78b7      	ldrb	r7, [r6, #2]
 801d09a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d09e:	fb07 aa02 	mla	sl, r7, r2, sl
 801d0a2:	fb09 b902 	mla	r9, r9, r2, fp
 801d0a6:	fa1f fa8a 	uxth.w	sl, sl
 801d0aa:	fa1f f989 	uxth.w	r9, r9
 801d0ae:	f10a 0701 	add.w	r7, sl, #1
 801d0b2:	f109 0b01 	add.w	fp, r9, #1
 801d0b6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d0ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d0be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d0c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0c6:	f886 a002 	strb.w	sl, [r6, #2]
 801d0ca:	f886 9001 	strb.w	r9, [r6, #1]
 801d0ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0d0:	4474      	add	r4, lr
 801d0d2:	f108 0801 	add.w	r8, r8, #1
 801d0d6:	4410      	add	r0, r2
 801d0d8:	e762      	b.n	801cfa0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d0da:	b005      	add	sp, #20
 801d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d0e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d0ea:	9201      	str	r2, [sp, #4]
 801d0ec:	6860      	ldr	r0, [r4, #4]
 801d0ee:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d0f2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801d0f6:	fb00 2505 	mla	r5, r0, r5, r2
 801d0fa:	6822      	ldr	r2, [r4, #0]
 801d0fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d100:	4415      	add	r5, r2
 801d102:	f8dc 2000 	ldr.w	r2, [ip]
 801d106:	9200      	str	r2, [sp, #0]
 801d108:	2900      	cmp	r1, #0
 801d10a:	dc03      	bgt.n	801d114 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d10c:	9a01      	ldr	r2, [sp, #4]
 801d10e:	2a00      	cmp	r2, #0
 801d110:	f340 812b 	ble.w	801d36a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d114:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d116:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d11a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d11e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d120:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d124:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d128:	2b00      	cmp	r3, #0
 801d12a:	dd0e      	ble.n	801d14a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d12c:	1422      	asrs	r2, r4, #16
 801d12e:	d405      	bmi.n	801d13c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d130:	4572      	cmp	r2, lr
 801d132:	da03      	bge.n	801d13c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d134:	1402      	asrs	r2, r0, #16
 801d136:	d401      	bmi.n	801d13c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d138:	42ba      	cmp	r2, r7
 801d13a:	db07      	blt.n	801d14c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d13c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d13e:	3b01      	subs	r3, #1
 801d140:	3503      	adds	r5, #3
 801d142:	4414      	add	r4, r2
 801d144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d146:	4410      	add	r0, r2
 801d148:	e7ee      	b.n	801d128 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d14a:	d06f      	beq.n	801d22c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d14c:	1e5a      	subs	r2, r3, #1
 801d14e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d150:	fb06 4602 	mla	r6, r6, r2, r4
 801d154:	1436      	asrs	r6, r6, #16
 801d156:	d45e      	bmi.n	801d216 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d158:	4576      	cmp	r6, lr
 801d15a:	da5c      	bge.n	801d216 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d15c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d15e:	fb06 0202 	mla	r2, r6, r2, r0
 801d162:	1412      	asrs	r2, r2, #16
 801d164:	d457      	bmi.n	801d216 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d166:	42ba      	cmp	r2, r7
 801d168:	da55      	bge.n	801d216 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d16a:	1cee      	adds	r6, r5, #3
 801d16c:	469a      	mov	sl, r3
 801d16e:	f1ba 0f00 	cmp.w	sl, #0
 801d172:	dd56      	ble.n	801d222 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d174:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d178:	1427      	asrs	r7, r4, #16
 801d17a:	1402      	asrs	r2, r0, #16
 801d17c:	fb0e 7202 	mla	r2, lr, r2, r7
 801d180:	9f00      	ldr	r7, [sp, #0]
 801d182:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d186:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801d18a:	d03c      	beq.n	801d206 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d18c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d190:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d194:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d198:	fa5f f28e 	uxtb.w	r2, lr
 801d19c:	b2ff      	uxtb	r7, r7
 801d19e:	f000 80dd 	beq.w	801d35c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d1a2:	fa1f f882 	uxth.w	r8, r2
 801d1a6:	43d2      	mvns	r2, r2
 801d1a8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801d1ac:	fb17 f708 	smulbb	r7, r7, r8
 801d1b0:	b2d2      	uxtb	r2, r2
 801d1b2:	fb19 f908 	smulbb	r9, r9, r8
 801d1b6:	fb0e 7702 	mla	r7, lr, r2, r7
 801d1ba:	fb1b f808 	smulbb	r8, fp, r8
 801d1be:	b2bf      	uxth	r7, r7
 801d1c0:	f107 0e01 	add.w	lr, r7, #1
 801d1c4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d1c8:	123f      	asrs	r7, r7, #8
 801d1ca:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d1ce:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d1d2:	fb07 9902 	mla	r9, r7, r2, r9
 801d1d6:	fa1f f989 	uxth.w	r9, r9
 801d1da:	f109 0701 	add.w	r7, r9, #1
 801d1de:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d1e2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d1e6:	fb07 8802 	mla	r8, r7, r2, r8
 801d1ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1ee:	fa1f f888 	uxth.w	r8, r8
 801d1f2:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d1f6:	f108 0201 	add.w	r2, r8, #1
 801d1fa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d1fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d202:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d208:	3603      	adds	r6, #3
 801d20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d20e:	4414      	add	r4, r2
 801d210:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d212:	4410      	add	r0, r2
 801d214:	e7ab      	b.n	801d16e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d216:	f04f 0e00 	mov.w	lr, #0
 801d21a:	eba3 020e 	sub.w	r2, r3, lr
 801d21e:	2a00      	cmp	r2, #0
 801d220:	dc3d      	bgt.n	801d29e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801d222:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d226:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d22a:	441d      	add	r5, r3
 801d22c:	2900      	cmp	r1, #0
 801d22e:	f340 809c 	ble.w	801d36a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d232:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d238:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d23c:	3901      	subs	r1, #1
 801d23e:	eeb0 6a62 	vmov.f32	s12, s5
 801d242:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d246:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d24a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d24e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d252:	eeb0 6a43 	vmov.f32	s12, s6
 801d256:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d25a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d25e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d262:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d266:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d26a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d26e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d272:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d276:	ee12 2a90 	vmov	r2, s5
 801d27a:	eef0 2a47 	vmov.f32	s5, s14
 801d27e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d282:	ee13 2a10 	vmov	r2, s6
 801d286:	930f      	str	r3, [sp, #60]	; 0x3c
 801d288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d28a:	eeb0 3a67 	vmov.f32	s6, s15
 801d28e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d292:	9a01      	ldr	r2, [sp, #4]
 801d294:	9310      	str	r3, [sp, #64]	; 0x40
 801d296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d298:	bf08      	it	eq
 801d29a:	4613      	moveq	r3, r2
 801d29c:	e734      	b.n	801d108 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d29e:	1427      	asrs	r7, r4, #16
 801d2a0:	d44d      	bmi.n	801d33e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2a2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d2a6:	42be      	cmp	r6, r7
 801d2a8:	dd49      	ble.n	801d33e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2aa:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d2ae:	d446      	bmi.n	801d33e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2b0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d2b4:	4542      	cmp	r2, r8
 801d2b6:	dd42      	ble.n	801d33e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2b8:	b236      	sxth	r6, r6
 801d2ba:	9a00      	ldr	r2, [sp, #0]
 801d2bc:	fb08 7606 	mla	r6, r8, r6, r7
 801d2c0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d2c4:	0e3a      	lsrs	r2, r7, #24
 801d2c6:	d03a      	beq.n	801d33e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2c8:	2aff      	cmp	r2, #255	; 0xff
 801d2ca:	b2d6      	uxtb	r6, r2
 801d2cc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d2d0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d2d4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801d2d8:	b2ff      	uxtb	r7, r7
 801d2da:	d037      	beq.n	801d34c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801d2dc:	fa1f f986 	uxth.w	r9, r6
 801d2e0:	4472      	add	r2, lr
 801d2e2:	43f6      	mvns	r6, r6
 801d2e4:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d2e8:	fb17 f709 	smulbb	r7, r7, r9
 801d2ec:	fb1a fa09 	smulbb	sl, sl, r9
 801d2f0:	b2f6      	uxtb	r6, r6
 801d2f2:	fb1b f909 	smulbb	r9, fp, r9
 801d2f6:	fb08 7706 	mla	r7, r8, r6, r7
 801d2fa:	b2bf      	uxth	r7, r7
 801d2fc:	f107 0801 	add.w	r8, r7, #1
 801d300:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d304:	123f      	asrs	r7, r7, #8
 801d306:	54af      	strb	r7, [r5, r2]
 801d308:	442a      	add	r2, r5
 801d30a:	7857      	ldrb	r7, [r2, #1]
 801d30c:	fb07 aa06 	mla	sl, r7, r6, sl
 801d310:	fa1f fa8a 	uxth.w	sl, sl
 801d314:	f10a 0701 	add.w	r7, sl, #1
 801d318:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d31c:	7897      	ldrb	r7, [r2, #2]
 801d31e:	fb07 9906 	mla	r9, r7, r6, r9
 801d322:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d326:	fa1f f989 	uxth.w	r9, r9
 801d32a:	f882 a001 	strb.w	sl, [r2, #1]
 801d32e:	f109 0601 	add.w	r6, r9, #1
 801d332:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d336:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d33a:	f882 9002 	strb.w	r9, [r2, #2]
 801d33e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d340:	f10e 0e01 	add.w	lr, lr, #1
 801d344:	4414      	add	r4, r2
 801d346:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d348:	4410      	add	r0, r2
 801d34a:	e766      	b.n	801d21a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d34c:	4472      	add	r2, lr
 801d34e:	54af      	strb	r7, [r5, r2]
 801d350:	442a      	add	r2, r5
 801d352:	f882 a001 	strb.w	sl, [r2, #1]
 801d356:	f882 b002 	strb.w	fp, [r2, #2]
 801d35a:	e7f0      	b.n	801d33e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d35c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d360:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d364:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d368:	e74d      	b.n	801d206 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d36a:	b003      	add	sp, #12
 801d36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d370 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d374:	b087      	sub	sp, #28
 801d376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d37a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d37c:	9204      	str	r2, [sp, #16]
 801d37e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d382:	6860      	ldr	r0, [r4, #4]
 801d384:	9205      	str	r2, [sp, #20]
 801d386:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d38a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801d38e:	9101      	str	r1, [sp, #4]
 801d390:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d394:	fb00 2505 	mla	r5, r0, r5, r2
 801d398:	6822      	ldr	r2, [r4, #0]
 801d39a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d39e:	4415      	add	r5, r2
 801d3a0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d3a4:	3201      	adds	r2, #1
 801d3a6:	f022 0201 	bic.w	r2, r2, #1
 801d3aa:	9202      	str	r2, [sp, #8]
 801d3ac:	f8dc 2000 	ldr.w	r2, [ip]
 801d3b0:	9203      	str	r2, [sp, #12]
 801d3b2:	9a01      	ldr	r2, [sp, #4]
 801d3b4:	2a00      	cmp	r2, #0
 801d3b6:	dc03      	bgt.n	801d3c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d3b8:	9a04      	ldr	r2, [sp, #16]
 801d3ba:	2a00      	cmp	r2, #0
 801d3bc:	f340 8135 	ble.w	801d62a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d3c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d3c2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d3c6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d3ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3cc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d3d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	dd0d      	ble.n	801d3f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d3d8:	1422      	asrs	r2, r4, #16
 801d3da:	d405      	bmi.n	801d3e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d3dc:	4542      	cmp	r2, r8
 801d3de:	da03      	bge.n	801d3e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d3e0:	1402      	asrs	r2, r0, #16
 801d3e2:	d401      	bmi.n	801d3e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d3e4:	42ba      	cmp	r2, r7
 801d3e6:	db06      	blt.n	801d3f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d3e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3ea:	4474      	add	r4, lr
 801d3ec:	3b01      	subs	r3, #1
 801d3ee:	3503      	adds	r5, #3
 801d3f0:	4410      	add	r0, r2
 801d3f2:	e7ef      	b.n	801d3d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d3f4:	d077      	beq.n	801d4e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801d3f6:	1e5a      	subs	r2, r3, #1
 801d3f8:	fb0e 4602 	mla	r6, lr, r2, r4
 801d3fc:	1436      	asrs	r6, r6, #16
 801d3fe:	d469      	bmi.n	801d4d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d400:	4546      	cmp	r6, r8
 801d402:	da67      	bge.n	801d4d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d404:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d406:	fb06 0202 	mla	r2, r6, r2, r0
 801d40a:	1412      	asrs	r2, r2, #16
 801d40c:	d462      	bmi.n	801d4d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d40e:	42ba      	cmp	r2, r7
 801d410:	da60      	bge.n	801d4d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d412:	1cee      	adds	r6, r5, #3
 801d414:	4699      	mov	r9, r3
 801d416:	f1b9 0f00 	cmp.w	r9, #0
 801d41a:	dd5f      	ble.n	801d4dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d41c:	1422      	asrs	r2, r4, #16
 801d41e:	9902      	ldr	r1, [sp, #8]
 801d420:	1407      	asrs	r7, r0, #16
 801d422:	fb01 2707 	mla	r7, r1, r7, r2
 801d426:	9903      	ldr	r1, [sp, #12]
 801d428:	087a      	lsrs	r2, r7, #1
 801d42a:	5c8a      	ldrb	r2, [r1, r2]
 801d42c:	07f9      	lsls	r1, r7, #31
 801d42e:	bf54      	ite	pl
 801d430:	f002 020f 	andpl.w	r2, r2, #15
 801d434:	1112      	asrmi	r2, r2, #4
 801d436:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d43a:	b2d2      	uxtb	r2, r2
 801d43c:	2a00      	cmp	r2, #0
 801d43e:	d042      	beq.n	801d4c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d440:	497b      	ldr	r1, [pc, #492]	; (801d630 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d442:	680f      	ldr	r7, [r1, #0]
 801d444:	9905      	ldr	r1, [sp, #20]
 801d446:	fa5f fb87 	uxtb.w	fp, r7
 801d44a:	434a      	muls	r2, r1
 801d44c:	f102 0801 	add.w	r8, r2, #1
 801d450:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801d454:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801d458:	1212      	asrs	r2, r2, #8
 801d45a:	fa1f fa82 	uxth.w	sl, r2
 801d45e:	43d2      	mvns	r2, r2
 801d460:	fb1b fb0a 	smulbb	fp, fp, sl
 801d464:	b2d2      	uxtb	r2, r2
 801d466:	fb08 b802 	mla	r8, r8, r2, fp
 801d46a:	fa1f f888 	uxth.w	r8, r8
 801d46e:	f108 0b01 	add.w	fp, r8, #1
 801d472:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d476:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d47a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d47e:	fb1b fb0a 	smulbb	fp, fp, sl
 801d482:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d486:	fb17 fa0a 	smulbb	sl, r7, sl
 801d48a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d48e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801d492:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801d496:	fb07 aa02 	mla	sl, r7, r2, sl
 801d49a:	fb08 b802 	mla	r8, r8, r2, fp
 801d49e:	fa1f fa8a 	uxth.w	sl, sl
 801d4a2:	fa1f f888 	uxth.w	r8, r8
 801d4a6:	f10a 0701 	add.w	r7, sl, #1
 801d4aa:	f108 0b01 	add.w	fp, r8, #1
 801d4ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d4b2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d4b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d4ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d4be:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d4c2:	f806 8c02 	strb.w	r8, [r6, #-2]
 801d4c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4c8:	4474      	add	r4, lr
 801d4ca:	3603      	adds	r6, #3
 801d4cc:	f109 39ff 	add.w	r9, r9, #4294967295
 801d4d0:	4410      	add	r0, r2
 801d4d2:	e7a0      	b.n	801d416 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d4d4:	2700      	movs	r7, #0
 801d4d6:	1bda      	subs	r2, r3, r7
 801d4d8:	2a00      	cmp	r2, #0
 801d4da:	dc3e      	bgt.n	801d55a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d4dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4e4:	441d      	add	r5, r3
 801d4e6:	9b01      	ldr	r3, [sp, #4]
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	f340 809e 	ble.w	801d62a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d4ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4f8:	eeb0 6a62 	vmov.f32	s12, s5
 801d4fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d500:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d504:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d508:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d50c:	eeb0 6a43 	vmov.f32	s12, s6
 801d510:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d514:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d518:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d51c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d520:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d524:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d528:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d52c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d530:	ee12 2a90 	vmov	r2, s5
 801d534:	eef0 2a47 	vmov.f32	s5, s14
 801d538:	fb92 fef3 	sdiv	lr, r2, r3
 801d53c:	ee13 2a10 	vmov	r2, s6
 801d540:	eeb0 3a67 	vmov.f32	s6, s15
 801d544:	fb92 f3f3 	sdiv	r3, r2, r3
 801d548:	9314      	str	r3, [sp, #80]	; 0x50
 801d54a:	9b01      	ldr	r3, [sp, #4]
 801d54c:	9a04      	ldr	r2, [sp, #16]
 801d54e:	3b01      	subs	r3, #1
 801d550:	9301      	str	r3, [sp, #4]
 801d552:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d554:	bf08      	it	eq
 801d556:	4613      	moveq	r3, r2
 801d558:	e72b      	b.n	801d3b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d55a:	1426      	asrs	r6, r4, #16
 801d55c:	d460      	bmi.n	801d620 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d55e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d562:	42b2      	cmp	r2, r6
 801d564:	dd5c      	ble.n	801d620 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d566:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d56a:	d459      	bmi.n	801d620 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d56c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d570:	4542      	cmp	r2, r8
 801d572:	dd55      	ble.n	801d620 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d574:	9a02      	ldr	r2, [sp, #8]
 801d576:	9903      	ldr	r1, [sp, #12]
 801d578:	fb08 6602 	mla	r6, r8, r2, r6
 801d57c:	0872      	lsrs	r2, r6, #1
 801d57e:	07f6      	lsls	r6, r6, #31
 801d580:	5c8a      	ldrb	r2, [r1, r2]
 801d582:	bf54      	ite	pl
 801d584:	f002 020f 	andpl.w	r2, r2, #15
 801d588:	1112      	asrmi	r2, r2, #4
 801d58a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d58e:	b2d2      	uxtb	r2, r2
 801d590:	2a00      	cmp	r2, #0
 801d592:	d045      	beq.n	801d620 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d594:	4926      	ldr	r1, [pc, #152]	; (801d630 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d596:	f8d1 8000 	ldr.w	r8, [r1]
 801d59a:	9905      	ldr	r1, [sp, #20]
 801d59c:	fa5f fb88 	uxtb.w	fp, r8
 801d5a0:	434a      	muls	r2, r1
 801d5a2:	1c56      	adds	r6, r2, #1
 801d5a4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d5a8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d5ac:	1212      	asrs	r2, r2, #8
 801d5ae:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d5b2:	fa1f fa82 	uxth.w	sl, r2
 801d5b6:	43d2      	mvns	r2, r2
 801d5b8:	fb1b fb0a 	smulbb	fp, fp, sl
 801d5bc:	b2d2      	uxtb	r2, r2
 801d5be:	fb09 b902 	mla	r9, r9, r2, fp
 801d5c2:	fa1f f989 	uxth.w	r9, r9
 801d5c6:	f109 0b01 	add.w	fp, r9, #1
 801d5ca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d5ce:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801d5d2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801d5d6:	fb1b fb0a 	smulbb	fp, fp, sl
 801d5da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d5de:	fb18 fa0a 	smulbb	sl, r8, sl
 801d5e2:	f805 9006 	strb.w	r9, [r5, r6]
 801d5e6:	442e      	add	r6, r5
 801d5e8:	f896 8002 	ldrb.w	r8, [r6, #2]
 801d5ec:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d5f0:	fb08 aa02 	mla	sl, r8, r2, sl
 801d5f4:	fb09 b902 	mla	r9, r9, r2, fp
 801d5f8:	fa1f fa8a 	uxth.w	sl, sl
 801d5fc:	fa1f f989 	uxth.w	r9, r9
 801d600:	f10a 0801 	add.w	r8, sl, #1
 801d604:	f109 0b01 	add.w	fp, r9, #1
 801d608:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801d60c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d610:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d614:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d618:	f886 a002 	strb.w	sl, [r6, #2]
 801d61c:	f886 9001 	strb.w	r9, [r6, #1]
 801d620:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d622:	4474      	add	r4, lr
 801d624:	3701      	adds	r7, #1
 801d626:	4410      	add	r0, r2
 801d628:	e755      	b.n	801d4d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801d62a:	b007      	add	sp, #28
 801d62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d630:	20056720 	.word	0x20056720

0801d634 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d638:	b085      	sub	sp, #20
 801d63a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d63e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d640:	9203      	str	r2, [sp, #12]
 801d642:	6860      	ldr	r0, [r4, #4]
 801d644:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d648:	9100      	str	r1, [sp, #0]
 801d64a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801d64e:	fb00 2606 	mla	r6, r0, r6, r2
 801d652:	6822      	ldr	r2, [r4, #0]
 801d654:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d658:	4416      	add	r6, r2
 801d65a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d65e:	3201      	adds	r2, #1
 801d660:	f022 0201 	bic.w	r2, r2, #1
 801d664:	9201      	str	r2, [sp, #4]
 801d666:	f8dc 2000 	ldr.w	r2, [ip]
 801d66a:	9202      	str	r2, [sp, #8]
 801d66c:	9a00      	ldr	r2, [sp, #0]
 801d66e:	2a00      	cmp	r2, #0
 801d670:	dc03      	bgt.n	801d67a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d672:	9a03      	ldr	r2, [sp, #12]
 801d674:	2a00      	cmp	r2, #0
 801d676:	f340 8140 	ble.w	801d8fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d67a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d67c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d680:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d686:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d68a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d68e:	2b00      	cmp	r3, #0
 801d690:	dd0e      	ble.n	801d6b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d692:	142a      	asrs	r2, r5, #16
 801d694:	d405      	bmi.n	801d6a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d696:	4572      	cmp	r2, lr
 801d698:	da03      	bge.n	801d6a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d69a:	1422      	asrs	r2, r4, #16
 801d69c:	d401      	bmi.n	801d6a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d69e:	42ba      	cmp	r2, r7
 801d6a0:	db07      	blt.n	801d6b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d6a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d6a4:	3b01      	subs	r3, #1
 801d6a6:	3603      	adds	r6, #3
 801d6a8:	4415      	add	r5, r2
 801d6aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d6ac:	4414      	add	r4, r2
 801d6ae:	e7ee      	b.n	801d68e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d6b0:	d072      	beq.n	801d798 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d6b2:	1e5a      	subs	r2, r3, #1
 801d6b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d6b6:	fb00 5002 	mla	r0, r0, r2, r5
 801d6ba:	1400      	asrs	r0, r0, #16
 801d6bc:	d463      	bmi.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d6be:	4570      	cmp	r0, lr
 801d6c0:	da61      	bge.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d6c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d6c4:	fb00 4202 	mla	r2, r0, r2, r4
 801d6c8:	1412      	asrs	r2, r2, #16
 801d6ca:	d45c      	bmi.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d6cc:	42ba      	cmp	r2, r7
 801d6ce:	da5a      	bge.n	801d786 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d6d0:	1cf0      	adds	r0, r6, #3
 801d6d2:	469a      	mov	sl, r3
 801d6d4:	f1ba 0f00 	cmp.w	sl, #0
 801d6d8:	dd59      	ble.n	801d78e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d6da:	142a      	asrs	r2, r5, #16
 801d6dc:	9901      	ldr	r1, [sp, #4]
 801d6de:	1427      	asrs	r7, r4, #16
 801d6e0:	fb01 2707 	mla	r7, r1, r7, r2
 801d6e4:	9902      	ldr	r1, [sp, #8]
 801d6e6:	087a      	lsrs	r2, r7, #1
 801d6e8:	5c8a      	ldrb	r2, [r1, r2]
 801d6ea:	07f9      	lsls	r1, r7, #31
 801d6ec:	bf54      	ite	pl
 801d6ee:	f002 020f 	andpl.w	r2, r2, #15
 801d6f2:	1112      	asrmi	r2, r2, #4
 801d6f4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d6f8:	b2d2      	uxtb	r2, r2
 801d6fa:	2a00      	cmp	r2, #0
 801d6fc:	d03b      	beq.n	801d776 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d6fe:	4980      	ldr	r1, [pc, #512]	; (801d900 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d700:	2aff      	cmp	r2, #255	; 0xff
 801d702:	680f      	ldr	r7, [r1, #0]
 801d704:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d708:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d70c:	b2ff      	uxtb	r7, r7
 801d70e:	f000 80ed 	beq.w	801d8ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801d712:	fa1f f882 	uxth.w	r8, r2
 801d716:	43d2      	mvns	r2, r2
 801d718:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801d71c:	fb17 f708 	smulbb	r7, r7, r8
 801d720:	b2d2      	uxtb	r2, r2
 801d722:	fb19 f908 	smulbb	r9, r9, r8
 801d726:	fb0e 7702 	mla	r7, lr, r2, r7
 801d72a:	fb1b f808 	smulbb	r8, fp, r8
 801d72e:	b2bf      	uxth	r7, r7
 801d730:	f107 0e01 	add.w	lr, r7, #1
 801d734:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d738:	123f      	asrs	r7, r7, #8
 801d73a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d73e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d742:	fb07 9902 	mla	r9, r7, r2, r9
 801d746:	fa1f f989 	uxth.w	r9, r9
 801d74a:	f109 0701 	add.w	r7, r9, #1
 801d74e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d752:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d756:	fb07 8802 	mla	r8, r7, r2, r8
 801d75a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d75e:	fa1f f888 	uxth.w	r8, r8
 801d762:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d766:	f108 0201 	add.w	r2, r8, #1
 801d76a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d76e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d772:	f800 8c01 	strb.w	r8, [r0, #-1]
 801d776:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d778:	3003      	adds	r0, #3
 801d77a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d77e:	4415      	add	r5, r2
 801d780:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d782:	4414      	add	r4, r2
 801d784:	e7a6      	b.n	801d6d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d786:	2700      	movs	r7, #0
 801d788:	1bda      	subs	r2, r3, r7
 801d78a:	2a00      	cmp	r2, #0
 801d78c:	dc40      	bgt.n	801d810 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d78e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d792:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d796:	441e      	add	r6, r3
 801d798:	9b00      	ldr	r3, [sp, #0]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	f340 80ad 	ble.w	801d8fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d7a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d7a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d7aa:	eeb0 6a62 	vmov.f32	s12, s5
 801d7ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d7b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d7b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7ba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d7be:	eeb0 6a43 	vmov.f32	s12, s6
 801d7c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d7ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d7ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d7d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d7d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d7da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d7de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d7e2:	ee12 2a90 	vmov	r2, s5
 801d7e6:	eef0 2a47 	vmov.f32	s5, s14
 801d7ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7ee:	ee13 2a10 	vmov	r2, s6
 801d7f2:	9311      	str	r3, [sp, #68]	; 0x44
 801d7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7f6:	eeb0 3a67 	vmov.f32	s6, s15
 801d7fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7fe:	9312      	str	r3, [sp, #72]	; 0x48
 801d800:	9b00      	ldr	r3, [sp, #0]
 801d802:	9a03      	ldr	r2, [sp, #12]
 801d804:	3b01      	subs	r3, #1
 801d806:	9300      	str	r3, [sp, #0]
 801d808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d80a:	bf08      	it	eq
 801d80c:	4613      	moveq	r3, r2
 801d80e:	e72d      	b.n	801d66c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d810:	1428      	asrs	r0, r5, #16
 801d812:	d45c      	bmi.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d814:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d818:	4282      	cmp	r2, r0
 801d81a:	dd58      	ble.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d81c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801d820:	d455      	bmi.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d822:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d826:	4572      	cmp	r2, lr
 801d828:	dd51      	ble.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d82a:	9a01      	ldr	r2, [sp, #4]
 801d82c:	9902      	ldr	r1, [sp, #8]
 801d82e:	fb0e 0002 	mla	r0, lr, r2, r0
 801d832:	0842      	lsrs	r2, r0, #1
 801d834:	07c0      	lsls	r0, r0, #31
 801d836:	5c8a      	ldrb	r2, [r1, r2]
 801d838:	bf54      	ite	pl
 801d83a:	f002 020f 	andpl.w	r2, r2, #15
 801d83e:	1112      	asrmi	r2, r2, #4
 801d840:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d844:	b2d2      	uxtb	r2, r2
 801d846:	2a00      	cmp	r2, #0
 801d848:	d041      	beq.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d84a:	492d      	ldr	r1, [pc, #180]	; (801d900 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d84c:	2aff      	cmp	r2, #255	; 0xff
 801d84e:	6808      	ldr	r0, [r1, #0]
 801d850:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d854:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d858:	fa5f fe80 	uxtb.w	lr, r0
 801d85c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d860:	d03b      	beq.n	801d8da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d862:	fa1f f982 	uxth.w	r9, r2
 801d866:	4438      	add	r0, r7
 801d868:	43d2      	mvns	r2, r2
 801d86a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d86e:	fb1e fe09 	smulbb	lr, lr, r9
 801d872:	fb1a fa09 	smulbb	sl, sl, r9
 801d876:	b2d2      	uxtb	r2, r2
 801d878:	fb1b f909 	smulbb	r9, fp, r9
 801d87c:	fb08 ee02 	mla	lr, r8, r2, lr
 801d880:	fa1f fe8e 	uxth.w	lr, lr
 801d884:	f10e 0801 	add.w	r8, lr, #1
 801d888:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801d88c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d890:	f806 e000 	strb.w	lr, [r6, r0]
 801d894:	4430      	add	r0, r6
 801d896:	f890 e001 	ldrb.w	lr, [r0, #1]
 801d89a:	fb0e aa02 	mla	sl, lr, r2, sl
 801d89e:	fa1f fa8a 	uxth.w	sl, sl
 801d8a2:	f10a 0e01 	add.w	lr, sl, #1
 801d8a6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801d8aa:	f890 e002 	ldrb.w	lr, [r0, #2]
 801d8ae:	fb0e 9902 	mla	r9, lr, r2, r9
 801d8b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d8b6:	fa1f f989 	uxth.w	r9, r9
 801d8ba:	f880 a001 	strb.w	sl, [r0, #1]
 801d8be:	f109 0201 	add.w	r2, r9, #1
 801d8c2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d8c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d8ca:	f880 9002 	strb.w	r9, [r0, #2]
 801d8ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8d0:	3701      	adds	r7, #1
 801d8d2:	4415      	add	r5, r2
 801d8d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d8d6:	4414      	add	r4, r2
 801d8d8:	e756      	b.n	801d788 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d8da:	4438      	add	r0, r7
 801d8dc:	f806 e000 	strb.w	lr, [r6, r0]
 801d8e0:	4430      	add	r0, r6
 801d8e2:	f880 a001 	strb.w	sl, [r0, #1]
 801d8e6:	f880 b002 	strb.w	fp, [r0, #2]
 801d8ea:	e7f0      	b.n	801d8ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d8ec:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d8f0:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d8f4:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d8f8:	e73d      	b.n	801d776 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d8fa:	b005      	add	sp, #20
 801d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d900:	20056720 	.word	0x20056720

0801d904 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d904:	4770      	bx	lr

0801d906 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d906:	4770      	bx	lr

0801d908 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d908:	4770      	bx	lr

0801d90a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d90a:	4770      	bx	lr

0801d90c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d90c:	4770      	bx	lr

0801d90e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d90e:	4770      	bx	lr

0801d910 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d910:	4770      	bx	lr

0801d912 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d912:	4770      	bx	lr

0801d914 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d914:	4770      	bx	lr

0801d916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d916:	4770      	bx	lr

0801d918 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d918:	4770      	bx	lr

0801d91a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d91a:	4770      	bx	lr

0801d91c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d91c:	4770      	bx	lr

0801d91e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d91e:	4770      	bx	lr

0801d920 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d920:	4770      	bx	lr

0801d922 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d922:	4770      	bx	lr

0801d924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d924:	4770      	bx	lr

0801d926 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d926:	4770      	bx	lr

0801d928 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d928:	4770      	bx	lr

0801d92a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d92a:	4770      	bx	lr

0801d92c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d92c:	2bff      	cmp	r3, #255	; 0xff
 801d92e:	b508      	push	{r3, lr}
 801d930:	d04f      	beq.n	801d9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d932:	2a2c      	cmp	r2, #44	; 0x2c
 801d934:	d032      	beq.n	801d99c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d936:	d80f      	bhi.n	801d958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d938:	2a08      	cmp	r2, #8
 801d93a:	d046      	beq.n	801d9ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d93c:	d805      	bhi.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d93e:	2a04      	cmp	r2, #4
 801d940:	d041      	beq.n	801d9c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d942:	2a05      	cmp	r2, #5
 801d944:	d03d      	beq.n	801d9c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d946:	2000      	movs	r0, #0
 801d948:	e027      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d94a:	2a0a      	cmp	r2, #10
 801d94c:	d03d      	beq.n	801d9ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d94e:	d301      	bcc.n	801d954 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d950:	2a0b      	cmp	r2, #11
 801d952:	d1f8      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d954:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d956:	e020      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d958:	2a30      	cmp	r2, #48	; 0x30
 801d95a:	d038      	beq.n	801d9ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d95c:	d808      	bhi.n	801d970 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d95e:	2a2e      	cmp	r2, #46	; 0x2e
 801d960:	684b      	ldr	r3, [r1, #4]
 801d962:	d029      	beq.n	801d9b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d964:	d90b      	bls.n	801d97e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d966:	781b      	ldrb	r3, [r3, #0]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d1ec      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d96c:	6a00      	ldr	r0, [r0, #32]
 801d96e:	e014      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d970:	2a32      	cmp	r2, #50	; 0x32
 801d972:	d02c      	beq.n	801d9ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d974:	d301      	bcc.n	801d97a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d976:	2a33      	cmp	r2, #51	; 0x33
 801d978:	d1e5      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d97a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d97c:	e00d      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d97e:	781b      	ldrb	r3, [r3, #0]
 801d980:	2b01      	cmp	r3, #1
 801d982:	d009      	beq.n	801d998 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d984:	d3f2      	bcc.n	801d96c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d986:	2b02      	cmp	r3, #2
 801d988:	d1dd      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d98a:	4b39      	ldr	r3, [pc, #228]	; (801da70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d98c:	f240 4186 	movw	r1, #1158	; 0x486
 801d990:	4a38      	ldr	r2, [pc, #224]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d992:	4839      	ldr	r0, [pc, #228]	; (801da78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d994:	f008 fa94 	bl	8025ec0 <__assert_func>
 801d998:	6900      	ldr	r0, [r0, #16]
 801d99a:	bd08      	pop	{r3, pc}
 801d99c:	684b      	ldr	r3, [r1, #4]
 801d99e:	781b      	ldrb	r3, [r3, #0]
 801d9a0:	2b01      	cmp	r3, #1
 801d9a2:	d007      	beq.n	801d9b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d9a4:	d30b      	bcc.n	801d9be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d9a6:	2b02      	cmp	r3, #2
 801d9a8:	d1cd      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9aa:	4b31      	ldr	r3, [pc, #196]	; (801da70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d9ac:	f240 4192 	movw	r1, #1170	; 0x492
 801d9b0:	4a30      	ldr	r2, [pc, #192]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d9b2:	e7ee      	b.n	801d992 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d9b4:	6880      	ldr	r0, [r0, #8]
 801d9b6:	e7f0      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9b8:	781b      	ldrb	r3, [r3, #0]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d1c3      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9be:	6980      	ldr	r0, [r0, #24]
 801d9c0:	e7eb      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d9c4:	e7e9      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d9c8:	e7e7      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d9cc:	e7e5      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9ce:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d9d0:	e7e3      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9d2:	2a2c      	cmp	r2, #44	; 0x2c
 801d9d4:	d030      	beq.n	801da38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d9d6:	d80f      	bhi.n	801d9f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d9d8:	2a08      	cmp	r2, #8
 801d9da:	d044      	beq.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d9dc:	d805      	bhi.n	801d9ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d9de:	2a04      	cmp	r2, #4
 801d9e0:	d03f      	beq.n	801da62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d9e2:	2a05      	cmp	r2, #5
 801d9e4:	d1af      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9e6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d9e8:	e7d7      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9ea:	2a0a      	cmp	r2, #10
 801d9ec:	d03b      	beq.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d9ee:	d301      	bcc.n	801d9f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d9f0:	2a0b      	cmp	r2, #11
 801d9f2:	d1a8      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9f4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d9f6:	e7d0      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9f8:	2a30      	cmp	r2, #48	; 0x30
 801d9fa:	d036      	beq.n	801da6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d9fc:	d808      	bhi.n	801da10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d9fe:	2a2e      	cmp	r2, #46	; 0x2e
 801da00:	684b      	ldr	r3, [r1, #4]
 801da02:	d028      	beq.n	801da56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801da04:	d90b      	bls.n	801da1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801da06:	781b      	ldrb	r3, [r3, #0]
 801da08:	2b00      	cmp	r3, #0
 801da0a:	d19c      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801da0e:	e7c4      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da10:	2a32      	cmp	r2, #50	; 0x32
 801da12:	d02a      	beq.n	801da6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801da14:	d301      	bcc.n	801da1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801da16:	2a33      	cmp	r2, #51	; 0x33
 801da18:	d195      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da1a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801da1c:	e7bd      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da1e:	781b      	ldrb	r3, [r3, #0]
 801da20:	2b01      	cmp	r3, #1
 801da22:	d007      	beq.n	801da34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801da24:	d3f2      	bcc.n	801da0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801da26:	2b02      	cmp	r3, #2
 801da28:	d18d      	bne.n	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da2a:	4b11      	ldr	r3, [pc, #68]	; (801da70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801da2c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 801da30:	4a10      	ldr	r2, [pc, #64]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801da32:	e7ae      	b.n	801d992 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801da34:	6940      	ldr	r0, [r0, #20]
 801da36:	e7b0      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da38:	684b      	ldr	r3, [r1, #4]
 801da3a:	781b      	ldrb	r3, [r3, #0]
 801da3c:	2b01      	cmp	r3, #1
 801da3e:	d008      	beq.n	801da52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801da40:	d30d      	bcc.n	801da5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801da42:	2b02      	cmp	r3, #2
 801da44:	f47f af7f 	bne.w	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da48:	4b09      	ldr	r3, [pc, #36]	; (801da70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801da4a:	f240 41cf 	movw	r1, #1231	; 0x4cf
 801da4e:	4a09      	ldr	r2, [pc, #36]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801da50:	e79f      	b.n	801d992 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801da52:	68c0      	ldr	r0, [r0, #12]
 801da54:	e7a1      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da56:	781b      	ldrb	r3, [r3, #0]
 801da58:	2b00      	cmp	r3, #0
 801da5a:	f47f af74 	bne.w	801d946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da5e:	69c0      	ldr	r0, [r0, #28]
 801da60:	e79b      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801da64:	e799      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da66:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801da68:	e797      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801da6c:	e795      	b.n	801d99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da6e:	bf00      	nop
 801da70:	0802dd1d 	.word	0x0802dd1d
 801da74:	0802e540 	.word	0x0802e540
 801da78:	0802dd69 	.word	0x0802dd69

0801da7c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801da7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da80:	b085      	sub	sp, #20
 801da82:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 801da86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801da88:	f1be 0f00 	cmp.w	lr, #0
 801da8c:	f000 8114 	beq.w	801dcb8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801da90:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 801da94:	f1bc 0f00 	cmp.w	ip, #0
 801da98:	f340 810e 	ble.w	801dcb8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801da9c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801daa0:	2800      	cmp	r0, #0
 801daa2:	f340 8109 	ble.w	801dcb8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801daa6:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801daaa:	4350      	muls	r0, r2
 801daac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dab0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801dab4:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 801dab8:	eba2 060c 	sub.w	r6, r2, ip
 801dabc:	fb02 3305 	mla	r3, r2, r5, r3
 801dac0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dac4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dac8:	fa5f f88b 	uxtb.w	r8, fp
 801dacc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dad0:	fa5f f78a 	uxtb.w	r7, sl
 801dad4:	4419      	add	r1, r3
 801dad6:	fa5f f984 	uxtb.w	r9, r4
 801dada:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dade:	4408      	add	r0, r1
 801dae0:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801dae4:	d03e      	beq.n	801db64 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 801dae6:	fa1f f58e 	uxth.w	r5, lr
 801daea:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801daee:	4463      	add	r3, ip
 801daf0:	fb08 f405 	mul.w	r4, r8, r5
 801daf4:	b292      	uxth	r2, r2
 801daf6:	436f      	muls	r7, r5
 801daf8:	fb09 f505 	mul.w	r5, r9, r5
 801dafc:	4281      	cmp	r1, r0
 801dafe:	f080 80db 	bcs.w	801dcb8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801db02:	eb01 0c03 	add.w	ip, r1, r3
 801db06:	458c      	cmp	ip, r1
 801db08:	f101 0e03 	add.w	lr, r1, #3
 801db0c:	d928      	bls.n	801db60 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801db0e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801db12:	fb11 f102 	smulbb	r1, r1, r2
 801db16:	4429      	add	r1, r5
 801db18:	b289      	uxth	r1, r1
 801db1a:	f101 0801 	add.w	r8, r1, #1
 801db1e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801db22:	1209      	asrs	r1, r1, #8
 801db24:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801db28:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801db2c:	fb11 f102 	smulbb	r1, r1, r2
 801db30:	4439      	add	r1, r7
 801db32:	b289      	uxth	r1, r1
 801db34:	f101 0801 	add.w	r8, r1, #1
 801db38:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801db3c:	1209      	asrs	r1, r1, #8
 801db3e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801db42:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801db46:	fb11 f102 	smulbb	r1, r1, r2
 801db4a:	4421      	add	r1, r4
 801db4c:	b289      	uxth	r1, r1
 801db4e:	f101 0801 	add.w	r8, r1, #1
 801db52:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801db56:	1209      	asrs	r1, r1, #8
 801db58:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801db5c:	4671      	mov	r1, lr
 801db5e:	e7d2      	b.n	801db06 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 801db60:	4431      	add	r1, r6
 801db62:	e7cb      	b.n	801dafc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 801db64:	f012 0503 	ands.w	r5, r2, #3
 801db68:	d00f      	beq.n	801db8a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801db6a:	4463      	add	r3, ip
 801db6c:	4281      	cmp	r1, r0
 801db6e:	f080 80a3 	bcs.w	801dcb8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801db72:	18ca      	adds	r2, r1, r3
 801db74:	4291      	cmp	r1, r2
 801db76:	f080 809d 	bcs.w	801dcb4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 801db7a:	f881 9000 	strb.w	r9, [r1]
 801db7e:	3103      	adds	r1, #3
 801db80:	f801 7c02 	strb.w	r7, [r1, #-2]
 801db84:	f801 8c01 	strb.w	r8, [r1, #-1]
 801db88:	e7f4      	b.n	801db74 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801db8a:	f001 0603 	and.w	r6, r1, #3
 801db8e:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 801db92:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 801db96:	4463      	add	r3, ip
 801db98:	2e02      	cmp	r6, #2
 801db9a:	b2bf      	uxth	r7, r7
 801db9c:	fa1f fa8a 	uxth.w	sl, sl
 801dba0:	d017      	beq.n	801dbd2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801dba2:	2e03      	cmp	r6, #3
 801dba4:	d00c      	beq.n	801dbc0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801dba6:	2e01      	cmp	r6, #1
 801dba8:	d11f      	bne.n	801dbea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801dbaa:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801dbae:	460d      	mov	r5, r1
 801dbb0:	4285      	cmp	r5, r0
 801dbb2:	d230      	bcs.n	801dc16 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 801dbb4:	f885 9000 	strb.w	r9, [r5]
 801dbb8:	f8a5 7001 	strh.w	r7, [r5, #1]
 801dbbc:	4435      	add	r5, r6
 801dbbe:	e7f7      	b.n	801dbb0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 801dbc0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801dbc4:	460d      	mov	r5, r1
 801dbc6:	4285      	cmp	r5, r0
 801dbc8:	d20c      	bcs.n	801dbe4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801dbca:	f885 9000 	strb.w	r9, [r5]
 801dbce:	4435      	add	r5, r6
 801dbd0:	e7f9      	b.n	801dbc6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801dbd2:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801dbd6:	460d      	mov	r5, r1
 801dbd8:	4285      	cmp	r5, r0
 801dbda:	d218      	bcs.n	801dc0e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801dbdc:	f8a5 a000 	strh.w	sl, [r5]
 801dbe0:	4435      	add	r5, r6
 801dbe2:	e7f9      	b.n	801dbd8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 801dbe4:	3b01      	subs	r3, #1
 801dbe6:	3101      	adds	r1, #1
 801dbe8:	2501      	movs	r5, #1
 801dbea:	f003 0603 	and.w	r6, r3, #3
 801dbee:	2e02      	cmp	r6, #2
 801dbf0:	d021      	beq.n	801dc36 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 801dbf2:	2e03      	cmp	r6, #3
 801dbf4:	d013      	beq.n	801dc1e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 801dbf6:	2e01      	cmp	r6, #1
 801dbf8:	d126      	bne.n	801dc48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801dbfa:	3b01      	subs	r3, #1
 801dbfc:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801dc00:	18ce      	adds	r6, r1, r3
 801dc02:	4286      	cmp	r6, r0
 801dc04:	d220      	bcs.n	801dc48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801dc06:	f886 8000 	strb.w	r8, [r6]
 801dc0a:	443e      	add	r6, r7
 801dc0c:	e7f9      	b.n	801dc02 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801dc0e:	3b02      	subs	r3, #2
 801dc10:	3102      	adds	r1, #2
 801dc12:	2502      	movs	r5, #2
 801dc14:	e7e9      	b.n	801dbea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801dc16:	3b03      	subs	r3, #3
 801dc18:	3103      	adds	r1, #3
 801dc1a:	2500      	movs	r5, #0
 801dc1c:	e7e5      	b.n	801dbea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801dc1e:	3b03      	subs	r3, #3
 801dc20:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801dc24:	18ce      	adds	r6, r1, r3
 801dc26:	4286      	cmp	r6, r0
 801dc28:	d20e      	bcs.n	801dc48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801dc2a:	f8a6 a000 	strh.w	sl, [r6]
 801dc2e:	f886 8002 	strb.w	r8, [r6, #2]
 801dc32:	443e      	add	r6, r7
 801dc34:	e7f7      	b.n	801dc26 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 801dc36:	3b02      	subs	r3, #2
 801dc38:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801dc3c:	18ce      	adds	r6, r1, r3
 801dc3e:	4286      	cmp	r6, r0
 801dc40:	d202      	bcs.n	801dc48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801dc42:	8037      	strh	r7, [r6, #0]
 801dc44:	4466      	add	r6, ip
 801dc46:	e7fa      	b.n	801dc3e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 801dc48:	079e      	lsls	r6, r3, #30
 801dc4a:	d006      	beq.n	801dc5a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801dc4c:	4b1c      	ldr	r3, [pc, #112]	; (801dcc0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801dc4e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 801dc52:	4a1c      	ldr	r2, [pc, #112]	; (801dcc4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 801dc54:	481c      	ldr	r0, [pc, #112]	; (801dcc8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 801dc56:	f008 f933 	bl	8025ec0 <__assert_func>
 801dc5a:	b36b      	cbz	r3, 801dcb8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801dc5c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 801dc60:	109b      	asrs	r3, r3, #2
 801dc62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dc66:	2703      	movs	r7, #3
 801dc68:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 801dc6c:	9601      	str	r6, [sp, #4]
 801dc6e:	0426      	lsls	r6, r4, #16
 801dc70:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 801dc74:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 801dc78:	9602      	str	r6, [sp, #8]
 801dc7a:	009e      	lsls	r6, r3, #2
 801dc7c:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 801dc80:	9403      	str	r4, [sp, #12]
 801dc82:	009b      	lsls	r3, r3, #2
 801dc84:	4281      	cmp	r1, r0
 801dc86:	d217      	bcs.n	801dcb8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801dc88:	eb01 0c06 	add.w	ip, r1, r6
 801dc8c:	462a      	mov	r2, r5
 801dc8e:	4561      	cmp	r1, ip
 801dc90:	d20e      	bcs.n	801dcb0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 801dc92:	f10d 0e10 	add.w	lr, sp, #16
 801dc96:	1c54      	adds	r4, r2, #1
 801dc98:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801dc9c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801dca0:	f841 2b04 	str.w	r2, [r1], #4
 801dca4:	fb94 f2f7 	sdiv	r2, r4, r7
 801dca8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dcac:	1aa2      	subs	r2, r4, r2
 801dcae:	e7ee      	b.n	801dc8e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 801dcb0:	4419      	add	r1, r3
 801dcb2:	e7e7      	b.n	801dc84 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 801dcb4:	4431      	add	r1, r6
 801dcb6:	e759      	b.n	801db6c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 801dcb8:	b005      	add	sp, #20
 801dcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcbe:	bf00      	nop
 801dcc0:	0802dc39 	.word	0x0802dc39
 801dcc4:	0802e28a 	.word	0x0802e28a
 801dcc8:	0802dd69 	.word	0x0802dd69

0801dccc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801dccc:	b508      	push	{r3, lr}
 801dcce:	4b06      	ldr	r3, [pc, #24]	; (801dce8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801dcd0:	8818      	ldrh	r0, [r3, #0]
 801dcd2:	b928      	cbnz	r0, 801dce0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801dcd4:	4b05      	ldr	r3, [pc, #20]	; (801dcec <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801dcd6:	214d      	movs	r1, #77	; 0x4d
 801dcd8:	4a05      	ldr	r2, [pc, #20]	; (801dcf0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801dcda:	4806      	ldr	r0, [pc, #24]	; (801dcf4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801dcdc:	f008 f8f0 	bl	8025ec0 <__assert_func>
 801dce0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dce4:	b280      	uxth	r0, r0
 801dce6:	bd08      	pop	{r3, pc}
 801dce8:	200566f2 	.word	0x200566f2
 801dcec:	0802dfb6 	.word	0x0802dfb6
 801dcf0:	0802e505 	.word	0x0802e505
 801dcf4:	0802dff8 	.word	0x0802dff8

0801dcf8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801dcf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dcfc:	b08b      	sub	sp, #44	; 0x2c
 801dcfe:	460d      	mov	r5, r1
 801dd00:	4616      	mov	r6, r2
 801dd02:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801dd06:	f1b8 0f00 	cmp.w	r8, #0
 801dd0a:	d045      	beq.n	801dd98 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801dd0c:	6810      	ldr	r0, [r2, #0]
 801dd0e:	ac06      	add	r4, sp, #24
 801dd10:	6851      	ldr	r1, [r2, #4]
 801dd12:	4f50      	ldr	r7, [pc, #320]	; (801de54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 801dd14:	c403      	stmia	r4!, {r0, r1}
 801dd16:	6818      	ldr	r0, [r3, #0]
 801dd18:	ac08      	add	r4, sp, #32
 801dd1a:	6859      	ldr	r1, [r3, #4]
 801dd1c:	c403      	stmia	r4!, {r0, r1}
 801dd1e:	a806      	add	r0, sp, #24
 801dd20:	f7fa fe62 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd24:	4631      	mov	r1, r6
 801dd26:	a808      	add	r0, sp, #32
 801dd28:	f7fa fe46 	bl	80189b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dd2c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dd30:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dd34:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801dd38:	6838      	ldr	r0, [r7, #0]
 801dd3a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dd3e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801dd42:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801dd46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dd4a:	440d      	add	r5, r1
 801dd4c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801dd50:	440a      	add	r2, r1
 801dd52:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dd56:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dd5a:	4413      	add	r3, r2
 801dd5c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801dd60:	6803      	ldr	r3, [r0, #0]
 801dd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dd64:	4798      	blx	r3
 801dd66:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dd6a:	d018      	beq.n	801dd9e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801dd6c:	f010 0f04 	tst.w	r0, #4
 801dd70:	6838      	ldr	r0, [r7, #0]
 801dd72:	d017      	beq.n	801dda4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801dd74:	2700      	movs	r7, #0
 801dd76:	6801      	ldr	r1, [r0, #0]
 801dd78:	b2a4      	uxth	r4, r4
 801dd7a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dd7e:	b2b6      	uxth	r6, r6
 801dd80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dd84:	9401      	str	r4, [sp, #4]
 801dd86:	9600      	str	r6, [sp, #0]
 801dd88:	e9cd 8703 	strd	r8, r7, [sp, #12]
 801dd8c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801dd90:	9702      	str	r7, [sp, #8]
 801dd92:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 801dd94:	4629      	mov	r1, r5
 801dd96:	47a0      	blx	r4
 801dd98:	b00b      	add	sp, #44	; 0x2c
 801dd9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dd9e:	f010 0f01 	tst.w	r0, #1
 801dda2:	e7e5      	b.n	801dd70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801dda4:	6803      	ldr	r3, [r0, #0]
 801dda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dda8:	4798      	blx	r3
 801ddaa:	4a2b      	ldr	r2, [pc, #172]	; (801de58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801ddac:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ddb0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ddb4:	8813      	ldrh	r3, [r2, #0]
 801ddb6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801ddba:	fb03 f404 	mul.w	r4, r3, r4
 801ddbe:	fb03 c101 	mla	r1, r3, r1, ip
 801ddc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ddc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ddca:	4408      	add	r0, r1
 801ddcc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801ddd0:	4404      	add	r4, r0
 801ddd2:	d02e      	beq.n	801de32 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 801ddd4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ddd8:	1b9b      	subs	r3, r3, r6
 801ddda:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801ddde:	1b96      	subs	r6, r2, r6
 801dde0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dde4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dde8:	42a0      	cmp	r0, r4
 801ddea:	d22d      	bcs.n	801de48 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801ddec:	eb00 0e01 	add.w	lr, r0, r1
 801ddf0:	4570      	cmp	r0, lr
 801ddf2:	d210      	bcs.n	801de16 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801ddf4:	f890 9000 	ldrb.w	r9, [r0]
 801ddf8:	f815 2b01 	ldrb.w	r2, [r5], #1
 801ddfc:	fb19 f90c 	smulbb	r9, r9, ip
 801de00:	fb02 9208 	mla	r2, r2, r8, r9
 801de04:	b292      	uxth	r2, r2
 801de06:	f102 0901 	add.w	r9, r2, #1
 801de0a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801de0e:	1212      	asrs	r2, r2, #8
 801de10:	f800 2b01 	strb.w	r2, [r0], #1
 801de14:	e7ec      	b.n	801ddf0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 801de16:	4418      	add	r0, r3
 801de18:	4435      	add	r5, r6
 801de1a:	e7e5      	b.n	801dde8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801de1c:	8813      	ldrh	r3, [r2, #0]
 801de1e:	1b9b      	subs	r3, r3, r6
 801de20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de24:	4418      	add	r0, r3
 801de26:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801de2a:	1b9b      	subs	r3, r3, r6
 801de2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de30:	441d      	add	r5, r3
 801de32:	42a0      	cmp	r0, r4
 801de34:	d208      	bcs.n	801de48 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801de36:	eb00 0c01 	add.w	ip, r0, r1
 801de3a:	4560      	cmp	r0, ip
 801de3c:	d2ee      	bcs.n	801de1c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801de3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801de42:	f800 3b01 	strb.w	r3, [r0], #1
 801de46:	e7f8      	b.n	801de3a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 801de48:	6838      	ldr	r0, [r7, #0]
 801de4a:	6803      	ldr	r3, [r0, #0]
 801de4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de4e:	4798      	blx	r3
 801de50:	e7a2      	b.n	801dd98 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801de52:	bf00      	nop
 801de54:	200566f8 	.word	0x200566f8
 801de58:	200566f2 	.word	0x200566f2

0801de5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801de5c:	b510      	push	{r4, lr}
 801de5e:	4604      	mov	r4, r0
 801de60:	2104      	movs	r1, #4
 801de62:	f007 fef8 	bl	8025c56 <_ZdlPvj>
 801de66:	4620      	mov	r0, r4
 801de68:	bd10      	pop	{r4, pc}

0801de6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801de6a:	b510      	push	{r4, lr}
 801de6c:	4604      	mov	r4, r0
 801de6e:	2104      	movs	r1, #4
 801de70:	f007 fef1 	bl	8025c56 <_ZdlPvj>
 801de74:	4620      	mov	r0, r4
 801de76:	bd10      	pop	{r4, pc}

0801de78 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801de78:	b510      	push	{r4, lr}
 801de7a:	4604      	mov	r4, r0
 801de7c:	2104      	movs	r1, #4
 801de7e:	f007 feea 	bl	8025c56 <_ZdlPvj>
 801de82:	4620      	mov	r0, r4
 801de84:	bd10      	pop	{r4, pc}

0801de86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801de86:	b510      	push	{r4, lr}
 801de88:	4604      	mov	r4, r0
 801de8a:	2104      	movs	r1, #4
 801de8c:	f007 fee3 	bl	8025c56 <_ZdlPvj>
 801de90:	4620      	mov	r0, r4
 801de92:	bd10      	pop	{r4, pc}

0801de94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801de94:	b510      	push	{r4, lr}
 801de96:	4604      	mov	r4, r0
 801de98:	2104      	movs	r1, #4
 801de9a:	f007 fedc 	bl	8025c56 <_ZdlPvj>
 801de9e:	4620      	mov	r0, r4
 801dea0:	bd10      	pop	{r4, pc}

0801dea2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dea2:	b510      	push	{r4, lr}
 801dea4:	4604      	mov	r4, r0
 801dea6:	2104      	movs	r1, #4
 801dea8:	f007 fed5 	bl	8025c56 <_ZdlPvj>
 801deac:	4620      	mov	r0, r4
 801deae:	bd10      	pop	{r4, pc}

0801deb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801deb0:	b510      	push	{r4, lr}
 801deb2:	4604      	mov	r4, r0
 801deb4:	2104      	movs	r1, #4
 801deb6:	f007 fece 	bl	8025c56 <_ZdlPvj>
 801deba:	4620      	mov	r0, r4
 801debc:	bd10      	pop	{r4, pc}

0801debe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801debe:	b510      	push	{r4, lr}
 801dec0:	4604      	mov	r4, r0
 801dec2:	2104      	movs	r1, #4
 801dec4:	f007 fec7 	bl	8025c56 <_ZdlPvj>
 801dec8:	4620      	mov	r0, r4
 801deca:	bd10      	pop	{r4, pc}

0801decc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801decc:	b510      	push	{r4, lr}
 801dece:	4604      	mov	r4, r0
 801ded0:	2104      	movs	r1, #4
 801ded2:	f007 fec0 	bl	8025c56 <_ZdlPvj>
 801ded6:	4620      	mov	r0, r4
 801ded8:	bd10      	pop	{r4, pc}

0801deda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801deda:	b510      	push	{r4, lr}
 801dedc:	4604      	mov	r4, r0
 801dede:	2104      	movs	r1, #4
 801dee0:	f007 feb9 	bl	8025c56 <_ZdlPvj>
 801dee4:	4620      	mov	r0, r4
 801dee6:	bd10      	pop	{r4, pc}

0801dee8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dee8:	b510      	push	{r4, lr}
 801deea:	4604      	mov	r4, r0
 801deec:	2104      	movs	r1, #4
 801deee:	f007 feb2 	bl	8025c56 <_ZdlPvj>
 801def2:	4620      	mov	r0, r4
 801def4:	bd10      	pop	{r4, pc}

0801def6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801def6:	b510      	push	{r4, lr}
 801def8:	4604      	mov	r4, r0
 801defa:	2104      	movs	r1, #4
 801defc:	f007 feab 	bl	8025c56 <_ZdlPvj>
 801df00:	4620      	mov	r0, r4
 801df02:	bd10      	pop	{r4, pc}

0801df04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801df04:	b510      	push	{r4, lr}
 801df06:	4604      	mov	r4, r0
 801df08:	2104      	movs	r1, #4
 801df0a:	f007 fea4 	bl	8025c56 <_ZdlPvj>
 801df0e:	4620      	mov	r0, r4
 801df10:	bd10      	pop	{r4, pc}

0801df12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801df12:	b510      	push	{r4, lr}
 801df14:	4604      	mov	r4, r0
 801df16:	2104      	movs	r1, #4
 801df18:	f007 fe9d 	bl	8025c56 <_ZdlPvj>
 801df1c:	4620      	mov	r0, r4
 801df1e:	bd10      	pop	{r4, pc}

0801df20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801df20:	b510      	push	{r4, lr}
 801df22:	4604      	mov	r4, r0
 801df24:	2104      	movs	r1, #4
 801df26:	f007 fe96 	bl	8025c56 <_ZdlPvj>
 801df2a:	4620      	mov	r0, r4
 801df2c:	bd10      	pop	{r4, pc}

0801df2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801df2e:	b510      	push	{r4, lr}
 801df30:	4604      	mov	r4, r0
 801df32:	2104      	movs	r1, #4
 801df34:	f007 fe8f 	bl	8025c56 <_ZdlPvj>
 801df38:	4620      	mov	r0, r4
 801df3a:	bd10      	pop	{r4, pc}

0801df3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801df3c:	b510      	push	{r4, lr}
 801df3e:	4604      	mov	r4, r0
 801df40:	2104      	movs	r1, #4
 801df42:	f007 fe88 	bl	8025c56 <_ZdlPvj>
 801df46:	4620      	mov	r0, r4
 801df48:	bd10      	pop	{r4, pc}

0801df4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801df4a:	b510      	push	{r4, lr}
 801df4c:	4604      	mov	r4, r0
 801df4e:	2104      	movs	r1, #4
 801df50:	f007 fe81 	bl	8025c56 <_ZdlPvj>
 801df54:	4620      	mov	r0, r4
 801df56:	bd10      	pop	{r4, pc}

0801df58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801df58:	b510      	push	{r4, lr}
 801df5a:	4604      	mov	r4, r0
 801df5c:	2104      	movs	r1, #4
 801df5e:	f007 fe7a 	bl	8025c56 <_ZdlPvj>
 801df62:	4620      	mov	r0, r4
 801df64:	bd10      	pop	{r4, pc}

0801df66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801df66:	b510      	push	{r4, lr}
 801df68:	4604      	mov	r4, r0
 801df6a:	2104      	movs	r1, #4
 801df6c:	f007 fe73 	bl	8025c56 <_ZdlPvj>
 801df70:	4620      	mov	r0, r4
 801df72:	bd10      	pop	{r4, pc}

0801df74 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801df74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df76:	4606      	mov	r6, r0
 801df78:	b087      	sub	sp, #28
 801df7a:	4615      	mov	r5, r2
 801df7c:	461f      	mov	r7, r3
 801df7e:	b343      	cbz	r3, 801dfd2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801df80:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801df84:	2b00      	cmp	r3, #0
 801df86:	dd24      	ble.n	801dfd2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801df88:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	dd20      	ble.n	801dfd2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801df90:	6808      	ldr	r0, [r1, #0]
 801df92:	aa04      	add	r2, sp, #16
 801df94:	6849      	ldr	r1, [r1, #4]
 801df96:	4c1a      	ldr	r4, [pc, #104]	; (801e000 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801df98:	c203      	stmia	r2!, {r0, r1}
 801df9a:	a804      	add	r0, sp, #16
 801df9c:	f7fa fd24 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dfa0:	6820      	ldr	r0, [r4, #0]
 801dfa2:	6803      	ldr	r3, [r0, #0]
 801dfa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dfa6:	4798      	blx	r3
 801dfa8:	2fff      	cmp	r7, #255	; 0xff
 801dfaa:	d014      	beq.n	801dfd6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801dfac:	f010 0f08 	tst.w	r0, #8
 801dfb0:	6820      	ldr	r0, [r4, #0]
 801dfb2:	d013      	beq.n	801dfdc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801dfb4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801dfb8:	6801      	ldr	r1, [r0, #0]
 801dfba:	9401      	str	r4, [sp, #4]
 801dfbc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801dfc0:	9702      	str	r7, [sp, #8]
 801dfc2:	9400      	str	r4, [sp, #0]
 801dfc4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801dfc8:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801dfca:	4629      	mov	r1, r5
 801dfcc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dfd0:	47a0      	blx	r4
 801dfd2:	b007      	add	sp, #28
 801dfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfd6:	f010 0f02 	tst.w	r0, #2
 801dfda:	e7e9      	b.n	801dfb0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801dfdc:	6803      	ldr	r3, [r0, #0]
 801dfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfe0:	4798      	blx	r3
 801dfe2:	4b08      	ldr	r3, [pc, #32]	; (801e004 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801dfe4:	4601      	mov	r1, r0
 801dfe6:	4630      	mov	r0, r6
 801dfe8:	881a      	ldrh	r2, [r3, #0]
 801dfea:	6833      	ldr	r3, [r6, #0]
 801dfec:	e9cd 5700 	strd	r5, r7, [sp]
 801dff0:	69dd      	ldr	r5, [r3, #28]
 801dff2:	ab04      	add	r3, sp, #16
 801dff4:	47a8      	blx	r5
 801dff6:	6820      	ldr	r0, [r4, #0]
 801dff8:	6803      	ldr	r3, [r0, #0]
 801dffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dffc:	4798      	blx	r3
 801dffe:	e7e8      	b.n	801dfd2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801e000:	200566f8 	.word	0x200566f8
 801e004:	200566f2 	.word	0x200566f2

0801e008 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e00c:	4db4      	ldr	r5, [pc, #720]	; (801e2e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801e00e:	4690      	mov	r8, r2
 801e010:	b08d      	sub	sp, #52	; 0x34
 801e012:	4604      	mov	r4, r0
 801e014:	682a      	ldr	r2, [r5, #0]
 801e016:	4689      	mov	r9, r1
 801e018:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801e01c:	2a02      	cmp	r2, #2
 801e01e:	d106      	bne.n	801e02e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801e020:	4bb0      	ldr	r3, [pc, #704]	; (801e2e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801e022:	f240 11ed 	movw	r1, #493	; 0x1ed
 801e026:	4ab0      	ldr	r2, [pc, #704]	; (801e2e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e028:	48b0      	ldr	r0, [pc, #704]	; (801e2ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801e02a:	f007 ff49 	bl	8025ec0 <__assert_func>
 801e02e:	ae0c      	add	r6, sp, #48	; 0x30
 801e030:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801e034:	4630      	mov	r0, r6
 801e036:	f7fe f815 	bl	801c064 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e03a:	6823      	ldr	r3, [r4, #0]
 801e03c:	4607      	mov	r7, r0
 801e03e:	4620      	mov	r0, r4
 801e040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e042:	4798      	blx	r3
 801e044:	4287      	cmp	r7, r0
 801e046:	d004      	beq.n	801e052 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801e048:	4ba9      	ldr	r3, [pc, #676]	; (801e2f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801e04a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801e04e:	4aa6      	ldr	r2, [pc, #664]	; (801e2e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e050:	e7ea      	b.n	801e028 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e052:	4630      	mov	r0, r6
 801e054:	f7fd ff7c 	bl	801bf50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e058:	4607      	mov	r7, r0
 801e05a:	b920      	cbnz	r0, 801e066 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801e05c:	4ba5      	ldr	r3, [pc, #660]	; (801e2f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801e05e:	f240 11f1 	movw	r1, #497	; 0x1f1
 801e062:	4aa1      	ldr	r2, [pc, #644]	; (801e2e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e064:	e7e0      	b.n	801e028 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e066:	f8d8 0000 	ldr.w	r0, [r8]
 801e06a:	ab06      	add	r3, sp, #24
 801e06c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e070:	f9b8 a000 	ldrsh.w	sl, [r8]
 801e074:	c303      	stmia	r3!, {r0, r1}
 801e076:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e07a:	ab08      	add	r3, sp, #32
 801e07c:	f8d9 0000 	ldr.w	r0, [r9]
 801e080:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801e084:	c303      	stmia	r3!, {r0, r1}
 801e086:	4630      	mov	r0, r6
 801e088:	f7fd feee 	bl	801be68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e08c:	4680      	mov	r8, r0
 801e08e:	4630      	mov	r0, r6
 801e090:	f7fd ff24 	bl	801bedc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e094:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801e098:	f10d 0920 	add.w	r9, sp, #32
 801e09c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801e0a0:	a806      	add	r0, sp, #24
 801e0a2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801e0a6:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801e0aa:	f7fa fc9d 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0ae:	4648      	mov	r0, r9
 801e0b0:	f7fa fc9a 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0b4:	a80a      	add	r0, sp, #40	; 0x28
 801e0b6:	f7fa fc97 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0ba:	4b8f      	ldr	r3, [pc, #572]	; (801e2f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801e0bc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e0c0:	881e      	ldrh	r6, [r3, #0]
 801e0c2:	4b8e      	ldr	r3, [pc, #568]	; (801e2fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801e0c4:	fa0f fb86 	sxth.w	fp, r6
 801e0c8:	8819      	ldrh	r1, [r3, #0]
 801e0ca:	4593      	cmp	fp, r2
 801e0cc:	dd75      	ble.n	801e1ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e0ce:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801e0d2:	4494      	add	ip, r2
 801e0d4:	fa1f fc8c 	uxth.w	ip, ip
 801e0d8:	fa0f fa8c 	sxth.w	sl, ip
 801e0dc:	f1ba 0f00 	cmp.w	sl, #0
 801e0e0:	dd6b      	ble.n	801e1ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e0e2:	fa0f f881 	sxth.w	r8, r1
 801e0e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e0ea:	4598      	cmp	r8, r3
 801e0ec:	dd65      	ble.n	801e1ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e0ee:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801e0f2:	4418      	add	r0, r3
 801e0f4:	b280      	uxth	r0, r0
 801e0f6:	fa0f fe80 	sxth.w	lr, r0
 801e0fa:	f1be 0f00 	cmp.w	lr, #0
 801e0fe:	dd5c      	ble.n	801e1ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801e100:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801e104:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e108:	45d3      	cmp	fp, sl
 801e10a:	bfc8      	it	gt
 801e10c:	4666      	movgt	r6, ip
 801e10e:	45f0      	cmp	r8, lr
 801e110:	bfc8      	it	gt
 801e112:	4601      	movgt	r1, r0
 801e114:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e118:	1ab6      	subs	r6, r6, r2
 801e11a:	1ac9      	subs	r1, r1, r3
 801e11c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e120:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801e124:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801e128:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801e12c:	f1bc 0f00 	cmp.w	ip, #0
 801e130:	f340 80aa 	ble.w	801e288 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e134:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801e138:	2e00      	cmp	r6, #0
 801e13a:	f340 80a5 	ble.w	801e288 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e13e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801e142:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801e146:	4288      	cmp	r0, r1
 801e148:	db3b      	blt.n	801e1c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e14a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801e14e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e152:	429a      	cmp	r2, r3
 801e154:	db35      	blt.n	801e1c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e156:	4460      	add	r0, ip
 801e158:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801e15c:	4461      	add	r1, ip
 801e15e:	b200      	sxth	r0, r0
 801e160:	b209      	sxth	r1, r1
 801e162:	4288      	cmp	r0, r1
 801e164:	dc2d      	bgt.n	801e1c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e166:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801e16a:	4432      	add	r2, r6
 801e16c:	440b      	add	r3, r1
 801e16e:	b212      	sxth	r2, r2
 801e170:	b21b      	sxth	r3, r3
 801e172:	429a      	cmp	r2, r3
 801e174:	dc25      	bgt.n	801e1c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801e176:	6823      	ldr	r3, [r4, #0]
 801e178:	4620      	mov	r0, r4
 801e17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e17c:	4798      	blx	r3
 801e17e:	4682      	mov	sl, r0
 801e180:	6828      	ldr	r0, [r5, #0]
 801e182:	6803      	ldr	r3, [r0, #0]
 801e184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e186:	4798      	blx	r3
 801e188:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801e18c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e190:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e194:	9303      	str	r3, [sp, #12]
 801e196:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e19a:	1a9b      	subs	r3, r3, r2
 801e19c:	b29b      	uxth	r3, r3
 801e19e:	b21c      	sxth	r4, r3
 801e1a0:	2c00      	cmp	r4, #0
 801e1a2:	dc13      	bgt.n	801e1cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 801e1a4:	bf18      	it	ne
 801e1a6:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801e1aa:	463c      	mov	r4, r7
 801e1ac:	bf1e      	ittt	ne
 801e1ae:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801e1b2:	189b      	addne	r3, r3, r2
 801e1b4:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801e1b8:	e00f      	b.n	801e1da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 801e1ba:	2300      	movs	r3, #0
 801e1bc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801e1c0:	e7b2      	b.n	801e128 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801e1c2:	4b4f      	ldr	r3, [pc, #316]	; (801e300 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801e1c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 801e1c8:	4a47      	ldr	r2, [pc, #284]	; (801e2e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801e1ca:	e72d      	b.n	801e028 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e1cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e1d0:	ebab 0303 	sub.w	r3, fp, r3
 801e1d4:	443c      	add	r4, r7
 801e1d6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e1da:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e1de:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e1e2:	1a9b      	subs	r3, r3, r2
 801e1e4:	b29b      	uxth	r3, r3
 801e1e6:	b219      	sxth	r1, r3
 801e1e8:	2900      	cmp	r1, #0
 801e1ea:	dd51      	ble.n	801e290 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801e1ec:	9a03      	ldr	r2, [sp, #12]
 801e1ee:	fb02 4401 	mla	r4, r2, r1, r4
 801e1f2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e1f6:	1ad3      	subs	r3, r2, r3
 801e1f8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e1fc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e200:	2b00      	cmp	r3, #0
 801e202:	dd41      	ble.n	801e288 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e204:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e208:	2e00      	cmp	r6, #0
 801e20a:	dd3d      	ble.n	801e288 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e20c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801e210:	f04f 0803 	mov.w	r8, #3
 801e214:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e218:	fb0a f10c 	mul.w	r1, sl, ip
 801e21c:	fb12 1808 	smlabb	r8, r2, r8, r1
 801e220:	4935      	ldr	r1, [pc, #212]	; (801e2f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801e222:	4480      	add	r8, r0
 801e224:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801e228:	8809      	ldrh	r1, [r1, #0]
 801e22a:	4283      	cmp	r3, r0
 801e22c:	eba1 0202 	sub.w	r2, r1, r2
 801e230:	bfa8      	it	ge
 801e232:	4603      	movge	r3, r0
 801e234:	4293      	cmp	r3, r2
 801e236:	bfa8      	it	ge
 801e238:	4613      	movge	r3, r2
 801e23a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801e23e:	4296      	cmp	r6, r2
 801e240:	bfa8      	it	ge
 801e242:	4616      	movge	r6, r2
 801e244:	4a2d      	ldr	r2, [pc, #180]	; (801e2fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801e246:	8812      	ldrh	r2, [r2, #0]
 801e248:	eba2 0c0c 	sub.w	ip, r2, ip
 801e24c:	4632      	mov	r2, r6
 801e24e:	4566      	cmp	r6, ip
 801e250:	bfa8      	it	ge
 801e252:	4662      	movge	r2, ip
 801e254:	4299      	cmp	r1, r3
 801e256:	9202      	str	r2, [sp, #8]
 801e258:	d12d      	bne.n	801e2b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801e25a:	4559      	cmp	r1, fp
 801e25c:	d12b      	bne.n	801e2b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801e25e:	6828      	ldr	r0, [r5, #0]
 801e260:	6803      	ldr	r3, [r0, #0]
 801e262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e264:	4798      	blx	r3
 801e266:	07c3      	lsls	r3, r0, #31
 801e268:	d51b      	bpl.n	801e2a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 801e26a:	6828      	ldr	r0, [r5, #0]
 801e26c:	9b02      	ldr	r3, [sp, #8]
 801e26e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801e272:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801e276:	6803      	ldr	r3, [r0, #0]
 801e278:	f8cd b000 	str.w	fp, [sp]
 801e27c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 801e27e:	4623      	mov	r3, r4
 801e280:	e899 0006 	ldmia.w	r9, {r1, r2}
 801e284:	47a8      	blx	r5
 801e286:	4607      	mov	r7, r0
 801e288:	4638      	mov	r0, r7
 801e28a:	b00d      	add	sp, #52	; 0x34
 801e28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e290:	bf1f      	itttt	ne
 801e292:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801e296:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801e29a:	189b      	addne	r3, r3, r2
 801e29c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e2a0:	e7ac      	b.n	801e1fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 801e2a2:	6828      	ldr	r0, [r5, #0]
 801e2a4:	4642      	mov	r2, r8
 801e2a6:	4621      	mov	r1, r4
 801e2a8:	6803      	ldr	r3, [r0, #0]
 801e2aa:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 801e2ac:	9b02      	ldr	r3, [sp, #8]
 801e2ae:	fb03 f30a 	mul.w	r3, r3, sl
 801e2b2:	47a8      	blx	r5
 801e2b4:	e7e8      	b.n	801e288 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e2b6:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801e2ba:	f04f 0900 	mov.w	r9, #0
 801e2be:	9b02      	ldr	r3, [sp, #8]
 801e2c0:	454b      	cmp	r3, r9
 801e2c2:	dde1      	ble.n	801e288 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801e2c4:	6828      	ldr	r0, [r5, #0]
 801e2c6:	4642      	mov	r2, r8
 801e2c8:	4621      	mov	r1, r4
 801e2ca:	44d0      	add	r8, sl
 801e2cc:	6803      	ldr	r3, [r0, #0]
 801e2ce:	f109 0901 	add.w	r9, r9, #1
 801e2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e2d4:	461e      	mov	r6, r3
 801e2d6:	465b      	mov	r3, fp
 801e2d8:	47b0      	blx	r6
 801e2da:	9b03      	ldr	r3, [sp, #12]
 801e2dc:	441c      	add	r4, r3
 801e2de:	e7ee      	b.n	801e2be <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 801e2e0:	200566f8 	.word	0x200566f8
 801e2e4:	0802dd9b 	.word	0x0802dd9b
 801e2e8:	0802e5ea 	.word	0x0802e5ea
 801e2ec:	0802dd69 	.word	0x0802dd69
 801e2f0:	0802de4d 	.word	0x0802de4d
 801e2f4:	0802dea2 	.word	0x0802dea2
 801e2f8:	200566f2 	.word	0x200566f2
 801e2fc:	200566f4 	.word	0x200566f4
 801e300:	0802dee0 	.word	0x0802dee0

0801e304 <_ZN8touchgfx8LCD24bppC1Ev>:
 801e304:	2200      	movs	r2, #0
 801e306:	490c      	ldr	r1, [pc, #48]	; (801e338 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801e308:	6042      	str	r2, [r0, #4]
 801e30a:	6001      	str	r1, [r0, #0]
 801e30c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e310:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e314:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e318:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e31c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e320:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e324:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e328:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e32c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e330:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e334:	4770      	bx	lr
 801e336:	bf00      	nop
 801e338:	0802e1c4 	.word	0x0802e1c4

0801e33c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e340:	4616      	mov	r6, r2
 801e342:	b091      	sub	sp, #68	; 0x44
 801e344:	880a      	ldrh	r2, [r1, #0]
 801e346:	4607      	mov	r7, r0
 801e348:	4688      	mov	r8, r1
 801e34a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801e34e:	b12a      	cbz	r2, 801e35c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801e350:	4b67      	ldr	r3, [pc, #412]	; (801e4f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801e352:	2160      	movs	r1, #96	; 0x60
 801e354:	4a67      	ldr	r2, [pc, #412]	; (801e4f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 801e356:	4868      	ldr	r0, [pc, #416]	; (801e4f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801e358:	f007 fdb2 	bl	8025ec0 <__assert_func>
 801e35c:	6830      	ldr	r0, [r6, #0]
 801e35e:	ac0c      	add	r4, sp, #48	; 0x30
 801e360:	6871      	ldr	r1, [r6, #4]
 801e362:	4d66      	ldr	r5, [pc, #408]	; (801e4fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801e364:	f8df a198 	ldr.w	sl, [pc, #408]	; 801e500 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 801e368:	c403      	stmia	r4!, {r0, r1}
 801e36a:	6818      	ldr	r0, [r3, #0]
 801e36c:	ac0e      	add	r4, sp, #56	; 0x38
 801e36e:	6859      	ldr	r1, [r3, #4]
 801e370:	c403      	stmia	r4!, {r0, r1}
 801e372:	a80c      	add	r0, sp, #48	; 0x30
 801e374:	f7fa fb38 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e378:	4631      	mov	r1, r6
 801e37a:	a80e      	add	r0, sp, #56	; 0x38
 801e37c:	f7fa fb1c 	bl	80189b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e380:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e384:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e388:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e38c:	6828      	ldr	r0, [r5, #0]
 801e38e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e392:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801e396:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801e39a:	440f      	add	r7, r1
 801e39c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e3a0:	440a      	add	r2, r1
 801e3a2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e3a6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e3aa:	4413      	add	r3, r2
 801e3ac:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e3b0:	6803      	ldr	r3, [r0, #0]
 801e3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e3b4:	4798      	blx	r3
 801e3b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e3ba:	6828      	ldr	r0, [r5, #0]
 801e3bc:	d01d      	beq.n	801e3fa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e3be:	2201      	movs	r2, #1
 801e3c0:	250b      	movs	r5, #11
 801e3c2:	6801      	ldr	r1, [r0, #0]
 801e3c4:	b2a4      	uxth	r4, r4
 801e3c6:	b2b6      	uxth	r6, r6
 801e3c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e3cc:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801e3d0:	f8ba 5000 	ldrh.w	r5, [sl]
 801e3d4:	f8cd 9010 	str.w	r9, [sp, #16]
 801e3d8:	9602      	str	r6, [sp, #8]
 801e3da:	9401      	str	r4, [sp, #4]
 801e3dc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801e3e0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e3e4:	9203      	str	r2, [sp, #12]
 801e3e6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e3ea:	9200      	str	r2, [sp, #0]
 801e3ec:	4642      	mov	r2, r8
 801e3ee:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801e3f0:	4639      	mov	r1, r7
 801e3f2:	47a0      	blx	r4
 801e3f4:	b011      	add	sp, #68	; 0x44
 801e3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3fa:	6803      	ldr	r3, [r0, #0]
 801e3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3fe:	4798      	blx	r3
 801e400:	f8ba 5000 	ldrh.w	r5, [sl]
 801e404:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e408:	f04f 0e04 	mov.w	lr, #4
 801e40c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e410:	436e      	muls	r6, r5
 801e412:	fb05 2303 	mla	r3, r5, r3, r2
 801e416:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e41a:	1b2d      	subs	r5, r5, r4
 801e41c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e424:	4418      	add	r0, r3
 801e426:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e42a:	1982      	adds	r2, r0, r6
 801e42c:	1b1b      	subs	r3, r3, r4
 801e42e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e432:	930b      	str	r3, [sp, #44]	; 0x2c
 801e434:	4290      	cmp	r0, r2
 801e436:	d254      	bcs.n	801e4e2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801e438:	eb00 0a04 	add.w	sl, r0, r4
 801e43c:	4550      	cmp	r0, sl
 801e43e:	d24c      	bcs.n	801e4da <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 801e440:	f817 1b01 	ldrb.w	r1, [r7], #1
 801e444:	fb1e e101 	smlabb	r1, lr, r1, lr
 801e448:	eb08 0c01 	add.w	ip, r8, r1
 801e44c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e450:	b173      	cbz	r3, 801e470 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801e452:	2bff      	cmp	r3, #255	; 0xff
 801e454:	f818 b001 	ldrb.w	fp, [r8, r1]
 801e458:	d10c      	bne.n	801e474 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e45a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e45e:	d109      	bne.n	801e474 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e460:	f880 b000 	strb.w	fp, [r0]
 801e464:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e468:	7043      	strb	r3, [r0, #1]
 801e46a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e46e:	7083      	strb	r3, [r0, #2]
 801e470:	3003      	adds	r0, #3
 801e472:	e7e3      	b.n	801e43c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801e474:	fb09 f103 	mul.w	r1, r9, r3
 801e478:	1c4b      	adds	r3, r1, #1
 801e47a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e47e:	7801      	ldrb	r1, [r0, #0]
 801e480:	121b      	asrs	r3, r3, #8
 801e482:	b29e      	uxth	r6, r3
 801e484:	43db      	mvns	r3, r3
 801e486:	fb1b fb06 	smulbb	fp, fp, r6
 801e48a:	b2db      	uxtb	r3, r3
 801e48c:	fb01 b103 	mla	r1, r1, r3, fp
 801e490:	b289      	uxth	r1, r1
 801e492:	f101 0b01 	add.w	fp, r1, #1
 801e496:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e49a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e49e:	fb1b fb03 	smulbb	fp, fp, r3
 801e4a2:	1209      	asrs	r1, r1, #8
 801e4a4:	7001      	strb	r1, [r0, #0]
 801e4a6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e4aa:	fb01 b106 	mla	r1, r1, r6, fp
 801e4ae:	b289      	uxth	r1, r1
 801e4b0:	f101 0b01 	add.w	fp, r1, #1
 801e4b4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e4b8:	1209      	asrs	r1, r1, #8
 801e4ba:	7041      	strb	r1, [r0, #1]
 801e4bc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801e4c0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e4c4:	fb1c f303 	smulbb	r3, ip, r3
 801e4c8:	fb01 3606 	mla	r6, r1, r6, r3
 801e4cc:	b2b6      	uxth	r6, r6
 801e4ce:	1c73      	adds	r3, r6, #1
 801e4d0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e4d4:	1236      	asrs	r6, r6, #8
 801e4d6:	7086      	strb	r6, [r0, #2]
 801e4d8:	e7ca      	b.n	801e470 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801e4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e4dc:	4428      	add	r0, r5
 801e4de:	441f      	add	r7, r3
 801e4e0:	e7a8      	b.n	801e434 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801e4e2:	4b06      	ldr	r3, [pc, #24]	; (801e4fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801e4e4:	6818      	ldr	r0, [r3, #0]
 801e4e6:	6803      	ldr	r3, [r0, #0]
 801e4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4ea:	4798      	blx	r3
 801e4ec:	e782      	b.n	801e3f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e4ee:	bf00      	nop
 801e4f0:	0802dccd 	.word	0x0802dccd
 801e4f4:	0802e40c 	.word	0x0802e40c
 801e4f8:	0802dd69 	.word	0x0802dd69
 801e4fc:	200566f8 	.word	0x200566f8
 801e500:	200566f2 	.word	0x200566f2

0801e504 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e508:	f8b1 9000 	ldrh.w	r9, [r1]
 801e50c:	b091      	sub	sp, #68	; 0x44
 801e50e:	4604      	mov	r4, r0
 801e510:	460e      	mov	r6, r1
 801e512:	f1b9 0f01 	cmp.w	r9, #1
 801e516:	4690      	mov	r8, r2
 801e518:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e51c:	d005      	beq.n	801e52a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801e51e:	4b68      	ldr	r3, [pc, #416]	; (801e6c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801e520:	21ae      	movs	r1, #174	; 0xae
 801e522:	4a68      	ldr	r2, [pc, #416]	; (801e6c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801e524:	4868      	ldr	r0, [pc, #416]	; (801e6c8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801e526:	f007 fccb 	bl	8025ec0 <__assert_func>
 801e52a:	6810      	ldr	r0, [r2, #0]
 801e52c:	ad0c      	add	r5, sp, #48	; 0x30
 801e52e:	6851      	ldr	r1, [r2, #4]
 801e530:	f8df a198 	ldr.w	sl, [pc, #408]	; 801e6cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801e534:	f8df b198 	ldr.w	fp, [pc, #408]	; 801e6d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801e538:	c503      	stmia	r5!, {r0, r1}
 801e53a:	6818      	ldr	r0, [r3, #0]
 801e53c:	ad0e      	add	r5, sp, #56	; 0x38
 801e53e:	6859      	ldr	r1, [r3, #4]
 801e540:	c503      	stmia	r5!, {r0, r1}
 801e542:	a80c      	add	r0, sp, #48	; 0x30
 801e544:	f7fa fa50 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e548:	4641      	mov	r1, r8
 801e54a:	a80e      	add	r0, sp, #56	; 0x38
 801e54c:	f7fa fa34 	bl	80189b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e550:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e554:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e558:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e55c:	f8da 0000 	ldr.w	r0, [sl]
 801e560:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e564:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801e568:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801e56c:	440c      	add	r4, r1
 801e56e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e572:	440a      	add	r2, r1
 801e574:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e578:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e57c:	4413      	add	r3, r2
 801e57e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e582:	6803      	ldr	r3, [r0, #0]
 801e584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e586:	4798      	blx	r3
 801e588:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e58c:	f8da 0000 	ldr.w	r0, [sl]
 801e590:	d01e      	beq.n	801e5d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801e592:	220b      	movs	r2, #11
 801e594:	6801      	ldr	r1, [r0, #0]
 801e596:	f8cd 9020 	str.w	r9, [sp, #32]
 801e59a:	b2ad      	uxth	r5, r5
 801e59c:	9207      	str	r2, [sp, #28]
 801e59e:	f8bb 2000 	ldrh.w	r2, [fp]
 801e5a2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e5a6:	9206      	str	r2, [sp, #24]
 801e5a8:	2200      	movs	r2, #0
 801e5aa:	9502      	str	r5, [sp, #8]
 801e5ac:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e5b0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e5b4:	9203      	str	r2, [sp, #12]
 801e5b6:	fa1f f288 	uxth.w	r2, r8
 801e5ba:	9201      	str	r2, [sp, #4]
 801e5bc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e5c0:	9200      	str	r2, [sp, #0]
 801e5c2:	4632      	mov	r2, r6
 801e5c4:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801e5c6:	4621      	mov	r1, r4
 801e5c8:	47a8      	blx	r5
 801e5ca:	b011      	add	sp, #68	; 0x44
 801e5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5d0:	6803      	ldr	r3, [r0, #0]
 801e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5d4:	4798      	blx	r3
 801e5d6:	f8bb 2000 	ldrh.w	r2, [fp]
 801e5da:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e5de:	f04f 0e03 	mov.w	lr, #3
 801e5e2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801e5e6:	4355      	muls	r5, r2
 801e5e8:	fa1f fc87 	uxth.w	ip, r7
 801e5ec:	fb02 1303 	mla	r3, r2, r3, r1
 801e5f0:	eba2 0208 	sub.w	r2, r2, r8
 801e5f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e5f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e600:	4418      	add	r0, r3
 801e602:	920b      	str	r2, [sp, #44]	; 0x2c
 801e604:	1943      	adds	r3, r0, r5
 801e606:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801e60a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801e60e:	eba2 0208 	sub.w	r2, r2, r8
 801e612:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e616:	b2ad      	uxth	r5, r5
 801e618:	4298      	cmp	r0, r3
 801e61a:	d24a      	bcs.n	801e6b2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801e61c:	eb00 0908 	add.w	r9, r0, r8
 801e620:	4621      	mov	r1, r4
 801e622:	4548      	cmp	r0, r9
 801e624:	460c      	mov	r4, r1
 801e626:	d240      	bcs.n	801e6aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801e628:	f04f 0a04 	mov.w	sl, #4
 801e62c:	7824      	ldrb	r4, [r4, #0]
 801e62e:	2fff      	cmp	r7, #255	; 0xff
 801e630:	f101 0101 	add.w	r1, r1, #1
 801e634:	fb1e a404 	smlabb	r4, lr, r4, sl
 801e638:	eb06 0a04 	add.w	sl, r6, r4
 801e63c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801e640:	d02b      	beq.n	801e69a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801e642:	7804      	ldrb	r4, [r0, #0]
 801e644:	fb14 f405 	smulbb	r4, r4, r5
 801e648:	fb0b 440c 	mla	r4, fp, ip, r4
 801e64c:	b2a4      	uxth	r4, r4
 801e64e:	f104 0b01 	add.w	fp, r4, #1
 801e652:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e656:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e65a:	fb1b fb05 	smulbb	fp, fp, r5
 801e65e:	1224      	asrs	r4, r4, #8
 801e660:	7004      	strb	r4, [r0, #0]
 801e662:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e666:	fb04 b40c 	mla	r4, r4, ip, fp
 801e66a:	b2a4      	uxth	r4, r4
 801e66c:	f104 0b01 	add.w	fp, r4, #1
 801e670:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e674:	1224      	asrs	r4, r4, #8
 801e676:	7044      	strb	r4, [r0, #1]
 801e678:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e67c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801e680:	fb1a fa05 	smulbb	sl, sl, r5
 801e684:	fb04 a40c 	mla	r4, r4, ip, sl
 801e688:	b2a4      	uxth	r4, r4
 801e68a:	f104 0a01 	add.w	sl, r4, #1
 801e68e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e692:	1224      	asrs	r4, r4, #8
 801e694:	7084      	strb	r4, [r0, #2]
 801e696:	3003      	adds	r0, #3
 801e698:	e7c3      	b.n	801e622 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 801e69a:	f880 b000 	strb.w	fp, [r0]
 801e69e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e6a2:	7044      	strb	r4, [r0, #1]
 801e6a4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e6a8:	e7f4      	b.n	801e694 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 801e6aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e6ac:	4420      	add	r0, r4
 801e6ae:	188c      	adds	r4, r1, r2
 801e6b0:	e7b2      	b.n	801e618 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 801e6b2:	4b06      	ldr	r3, [pc, #24]	; (801e6cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801e6b4:	6818      	ldr	r0, [r3, #0]
 801e6b6:	6803      	ldr	r3, [r0, #0]
 801e6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6ba:	4798      	blx	r3
 801e6bc:	e785      	b.n	801e5ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801e6be:	bf00      	nop
 801e6c0:	0802dc4c 	.word	0x0802dc4c
 801e6c4:	0802e2ff 	.word	0x0802e2ff
 801e6c8:	0802dd69 	.word	0x0802dd69
 801e6cc:	200566f8 	.word	0x200566f8
 801e6d0:	200566f2 	.word	0x200566f2

0801e6d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e6d4:	b570      	push	{r4, r5, r6, lr}
 801e6d6:	780d      	ldrb	r5, [r1, #0]
 801e6d8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e6dc:	2d01      	cmp	r5, #1
 801e6de:	d00d      	beq.n	801e6fc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e6e0:	d307      	bcc.n	801e6f2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e6e2:	2d02      	cmp	r5, #2
 801e6e4:	d10f      	bne.n	801e706 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e6e6:	4b08      	ldr	r3, [pc, #32]	; (801e708 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e6e8:	2153      	movs	r1, #83	; 0x53
 801e6ea:	4a08      	ldr	r2, [pc, #32]	; (801e70c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e6ec:	4808      	ldr	r0, [pc, #32]	; (801e710 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e6ee:	f007 fbe7 	bl	8025ec0 <__assert_func>
 801e6f2:	9404      	str	r4, [sp, #16]
 801e6f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e6f8:	f7ff be20 	b.w	801e33c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e6fc:	9404      	str	r4, [sp, #16]
 801e6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e702:	f7ff beff 	b.w	801e504 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e706:	bd70      	pop	{r4, r5, r6, pc}
 801e708:	0802dbee 	.word	0x0802dbee
 801e70c:	0802e208 	.word	0x0802e208
 801e710:	0802dd69 	.word	0x0802dd69

0801e714 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e718:	4605      	mov	r5, r0
 801e71a:	b08d      	sub	sp, #52	; 0x34
 801e71c:	460c      	mov	r4, r1
 801e71e:	461f      	mov	r7, r3
 801e720:	2b00      	cmp	r3, #0
 801e722:	d051      	beq.n	801e7c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801e724:	6808      	ldr	r0, [r1, #0]
 801e726:	ab08      	add	r3, sp, #32
 801e728:	6849      	ldr	r1, [r1, #4]
 801e72a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801e8f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801e72e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801e8f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801e732:	c303      	stmia	r3!, {r0, r1}
 801e734:	6810      	ldr	r0, [r2, #0]
 801e736:	ab0a      	add	r3, sp, #40	; 0x28
 801e738:	6851      	ldr	r1, [r2, #4]
 801e73a:	c303      	stmia	r3!, {r0, r1}
 801e73c:	a808      	add	r0, sp, #32
 801e73e:	f7fa f953 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e742:	4621      	mov	r1, r4
 801e744:	a80a      	add	r0, sp, #40	; 0x28
 801e746:	f7fa f937 	bl	80189b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e74a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e74e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801e752:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801e756:	f8d8 0000 	ldr.w	r0, [r8]
 801e75a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e75e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801e762:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 801e766:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e76a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801e76e:	440a      	add	r2, r1
 801e770:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e774:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801e778:	4413      	add	r3, r2
 801e77a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e77e:	6803      	ldr	r3, [r0, #0]
 801e780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e782:	4798      	blx	r3
 801e784:	2fff      	cmp	r7, #255	; 0xff
 801e786:	d022      	beq.n	801e7ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801e788:	f010 0f04 	tst.w	r0, #4
 801e78c:	f8d8 0000 	ldr.w	r0, [r8]
 801e790:	d020      	beq.n	801e7d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 801e792:	2100      	movs	r1, #0
 801e794:	f04f 0e01 	mov.w	lr, #1
 801e798:	f8d0 c000 	ldr.w	ip, [r0]
 801e79c:	b2a4      	uxth	r4, r4
 801e79e:	b2b6      	uxth	r6, r6
 801e7a0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e7a4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e7a8:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801e7ac:	f8b9 e000 	ldrh.w	lr, [r9]
 801e7b0:	9703      	str	r7, [sp, #12]
 801e7b2:	9401      	str	r4, [sp, #4]
 801e7b4:	9600      	str	r6, [sp, #0]
 801e7b6:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801e7ba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801e7be:	9102      	str	r1, [sp, #8]
 801e7c0:	4629      	mov	r1, r5
 801e7c2:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801e7c6:	47a0      	blx	r4
 801e7c8:	b00d      	add	sp, #52	; 0x34
 801e7ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7ce:	f010 0f01 	tst.w	r0, #1
 801e7d2:	e7db      	b.n	801e78c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801e7d4:	6803      	ldr	r3, [r0, #0]
 801e7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7d8:	4798      	blx	r3
 801e7da:	f8b9 1000 	ldrh.w	r1, [r9]
 801e7de:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801e7e2:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801e7e6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e7ea:	434c      	muls	r4, r1
 801e7ec:	2fff      	cmp	r7, #255	; 0xff
 801e7ee:	fb01 2303 	mla	r3, r1, r3, r2
 801e7f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e7f6:	eba1 0106 	sub.w	r1, r1, r6
 801e7fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e7fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e802:	4418      	add	r0, r3
 801e804:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801e808:	eba3 0606 	sub.w	r6, r3, r6
 801e80c:	4404      	add	r4, r0
 801e80e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801e812:	d04a      	beq.n	801e8aa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 801e814:	43fa      	mvns	r2, r7
 801e816:	b2bb      	uxth	r3, r7
 801e818:	b2d7      	uxtb	r7, r2
 801e81a:	42a0      	cmp	r0, r4
 801e81c:	d263      	bcs.n	801e8e6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801e81e:	eb00 0e0c 	add.w	lr, r0, ip
 801e822:	4586      	cmp	lr, r0
 801e824:	f100 0803 	add.w	r8, r0, #3
 801e828:	d93a      	bls.n	801e8a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 801e82a:	f835 2b02 	ldrh.w	r2, [r5], #2
 801e82e:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801e832:	00d0      	lsls	r0, r2, #3
 801e834:	fb19 f907 	smulbb	r9, r9, r7
 801e838:	b2c0      	uxtb	r0, r0
 801e83a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e83e:	fb00 9003 	mla	r0, r0, r3, r9
 801e842:	b280      	uxth	r0, r0
 801e844:	f100 0901 	add.w	r9, r0, #1
 801e848:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e84c:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801e850:	fb19 f907 	smulbb	r9, r9, r7
 801e854:	1200      	asrs	r0, r0, #8
 801e856:	f808 0c03 	strb.w	r0, [r8, #-3]
 801e85a:	10d0      	asrs	r0, r2, #3
 801e85c:	1212      	asrs	r2, r2, #8
 801e85e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e862:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e866:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801e86a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e86e:	fb00 9003 	mla	r0, r0, r3, r9
 801e872:	b280      	uxth	r0, r0
 801e874:	f100 0901 	add.w	r9, r0, #1
 801e878:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e87c:	1200      	asrs	r0, r0, #8
 801e87e:	f808 0c02 	strb.w	r0, [r8, #-2]
 801e882:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801e886:	fb10 f007 	smulbb	r0, r0, r7
 801e88a:	fb02 0203 	mla	r2, r2, r3, r0
 801e88e:	b292      	uxth	r2, r2
 801e890:	1c50      	adds	r0, r2, #1
 801e892:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e896:	4640      	mov	r0, r8
 801e898:	1212      	asrs	r2, r2, #8
 801e89a:	f808 2c01 	strb.w	r2, [r8, #-1]
 801e89e:	e7c0      	b.n	801e822 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 801e8a0:	4408      	add	r0, r1
 801e8a2:	4435      	add	r5, r6
 801e8a4:	e7b9      	b.n	801e81a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 801e8a6:	4408      	add	r0, r1
 801e8a8:	4435      	add	r5, r6
 801e8aa:	42a0      	cmp	r0, r4
 801e8ac:	d21b      	bcs.n	801e8e6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801e8ae:	eb00 070c 	add.w	r7, r0, ip
 801e8b2:	42b8      	cmp	r0, r7
 801e8b4:	d2f7      	bcs.n	801e8a6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 801e8b6:	f835 3b02 	ldrh.w	r3, [r5], #2
 801e8ba:	3003      	adds	r0, #3
 801e8bc:	00da      	lsls	r2, r3, #3
 801e8be:	b2d2      	uxtb	r2, r2
 801e8c0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e8c4:	f800 2c03 	strb.w	r2, [r0, #-3]
 801e8c8:	10da      	asrs	r2, r3, #3
 801e8ca:	121b      	asrs	r3, r3, #8
 801e8cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e8d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e8d4:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e8d8:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e8dc:	f800 2c02 	strb.w	r2, [r0, #-2]
 801e8e0:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e8e4:	e7e5      	b.n	801e8b2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 801e8e6:	4b03      	ldr	r3, [pc, #12]	; (801e8f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801e8e8:	6818      	ldr	r0, [r3, #0]
 801e8ea:	6803      	ldr	r3, [r0, #0]
 801e8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8ee:	4798      	blx	r3
 801e8f0:	e76a      	b.n	801e7c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801e8f2:	bf00      	nop
 801e8f4:	200566f8 	.word	0x200566f8
 801e8f8:	200566f2 	.word	0x200566f2

0801e8fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e900:	b088      	sub	sp, #32
 801e902:	460d      	mov	r5, r1
 801e904:	4604      	mov	r4, r0
 801e906:	461e      	mov	r6, r3
 801e908:	6808      	ldr	r0, [r1, #0]
 801e90a:	ab04      	add	r3, sp, #16
 801e90c:	6849      	ldr	r1, [r1, #4]
 801e90e:	4f5c      	ldr	r7, [pc, #368]	; (801ea80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 801e910:	c303      	stmia	r3!, {r0, r1}
 801e912:	6810      	ldr	r0, [r2, #0]
 801e914:	ab06      	add	r3, sp, #24
 801e916:	6851      	ldr	r1, [r2, #4]
 801e918:	c303      	stmia	r3!, {r0, r1}
 801e91a:	a804      	add	r0, sp, #16
 801e91c:	f7fa f864 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e920:	4629      	mov	r1, r5
 801e922:	a806      	add	r0, sp, #24
 801e924:	f7fa f848 	bl	80189b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e928:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801e92c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e930:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e934:	6838      	ldr	r0, [r7, #0]
 801e936:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e93a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801e93e:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 801e942:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e946:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801e94a:	440a      	add	r2, r1
 801e94c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e950:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e954:	4413      	add	r3, r2
 801e956:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e95a:	6803      	ldr	r3, [r0, #0]
 801e95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e95e:	4798      	blx	r3
 801e960:	2eff      	cmp	r6, #255	; 0xff
 801e962:	d117      	bne.n	801e994 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801e964:	f010 0f20 	tst.w	r0, #32
 801e968:	6838      	ldr	r0, [r7, #0]
 801e96a:	d016      	beq.n	801e99a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801e96c:	b2ad      	uxth	r5, r5
 801e96e:	6801      	ldr	r1, [r0, #0]
 801e970:	9603      	str	r6, [sp, #12]
 801e972:	9501      	str	r5, [sp, #4]
 801e974:	fa1f f588 	uxth.w	r5, r8
 801e978:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 801e97c:	9500      	str	r5, [sp, #0]
 801e97e:	9602      	str	r6, [sp, #8]
 801e980:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801e984:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 801e986:	4621      	mov	r1, r4
 801e988:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801e98c:	47a8      	blx	r5
 801e98e:	b008      	add	sp, #32
 801e990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e994:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e998:	e7e6      	b.n	801e968 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801e99a:	6803      	ldr	r3, [r0, #0]
 801e99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e99e:	4798      	blx	r3
 801e9a0:	4b38      	ldr	r3, [pc, #224]	; (801ea84 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801e9a2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801e9a6:	f8b3 c000 	ldrh.w	ip, [r3]
 801e9aa:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e9ae:	fb0c f505 	mul.w	r5, ip, r5
 801e9b2:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801e9b6:	fb0c 2303 	mla	r3, ip, r3, r2
 801e9ba:	ebac 0c08 	sub.w	ip, ip, r8
 801e9be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e9c2:	ebae 0e08 	sub.w	lr, lr, r8
 801e9c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e9ca:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e9ce:	4418      	add	r0, r3
 801e9d0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801e9d4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e9d8:	4405      	add	r5, r0
 801e9da:	42a8      	cmp	r0, r5
 801e9dc:	d24a      	bcs.n	801ea74 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 801e9de:	eb00 0803 	add.w	r8, r0, r3
 801e9e2:	4540      	cmp	r0, r8
 801e9e4:	d243      	bcs.n	801ea6e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 801e9e6:	78e2      	ldrb	r2, [r4, #3]
 801e9e8:	b15a      	cbz	r2, 801ea02 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e9ea:	2aff      	cmp	r2, #255	; 0xff
 801e9ec:	f894 9000 	ldrb.w	r9, [r4]
 801e9f0:	d10a      	bne.n	801ea08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e9f2:	2eff      	cmp	r6, #255	; 0xff
 801e9f4:	d108      	bne.n	801ea08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e9f6:	f880 9000 	strb.w	r9, [r0]
 801e9fa:	7862      	ldrb	r2, [r4, #1]
 801e9fc:	7042      	strb	r2, [r0, #1]
 801e9fe:	78a2      	ldrb	r2, [r4, #2]
 801ea00:	7082      	strb	r2, [r0, #2]
 801ea02:	3003      	adds	r0, #3
 801ea04:	3404      	adds	r4, #4
 801ea06:	e7ec      	b.n	801e9e2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 801ea08:	4372      	muls	r2, r6
 801ea0a:	1c51      	adds	r1, r2, #1
 801ea0c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801ea10:	1209      	asrs	r1, r1, #8
 801ea12:	fa1f fa81 	uxth.w	sl, r1
 801ea16:	43c9      	mvns	r1, r1
 801ea18:	fb19 f90a 	smulbb	r9, r9, sl
 801ea1c:	b2ca      	uxtb	r2, r1
 801ea1e:	7801      	ldrb	r1, [r0, #0]
 801ea20:	fb01 9902 	mla	r9, r1, r2, r9
 801ea24:	fa1f f989 	uxth.w	r9, r9
 801ea28:	f109 0101 	add.w	r1, r9, #1
 801ea2c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801ea30:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea34:	f880 9000 	strb.w	r9, [r0]
 801ea38:	f890 9001 	ldrb.w	r9, [r0, #1]
 801ea3c:	7861      	ldrb	r1, [r4, #1]
 801ea3e:	fb19 f902 	smulbb	r9, r9, r2
 801ea42:	fb01 910a 	mla	r1, r1, sl, r9
 801ea46:	b289      	uxth	r1, r1
 801ea48:	f101 0901 	add.w	r9, r1, #1
 801ea4c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801ea50:	1209      	asrs	r1, r1, #8
 801ea52:	7041      	strb	r1, [r0, #1]
 801ea54:	7881      	ldrb	r1, [r0, #2]
 801ea56:	f894 9002 	ldrb.w	r9, [r4, #2]
 801ea5a:	fb11 f202 	smulbb	r2, r1, r2
 801ea5e:	fb09 220a 	mla	r2, r9, sl, r2
 801ea62:	b292      	uxth	r2, r2
 801ea64:	1c51      	adds	r1, r2, #1
 801ea66:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ea6a:	1212      	asrs	r2, r2, #8
 801ea6c:	e7c8      	b.n	801ea00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 801ea6e:	4460      	add	r0, ip
 801ea70:	4474      	add	r4, lr
 801ea72:	e7b2      	b.n	801e9da <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801ea74:	6838      	ldr	r0, [r7, #0]
 801ea76:	6803      	ldr	r3, [r0, #0]
 801ea78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea7a:	4798      	blx	r3
 801ea7c:	e787      	b.n	801e98e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 801ea7e:	bf00      	nop
 801ea80:	200566f8 	.word	0x200566f8
 801ea84:	200566f2 	.word	0x200566f2

0801ea88 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ea88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ea8c:	b085      	sub	sp, #20
 801ea8e:	4606      	mov	r6, r0
 801ea90:	460c      	mov	r4, r1
 801ea92:	4691      	mov	r9, r2
 801ea94:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801ea98:	4698      	mov	r8, r3
 801ea9a:	b31d      	cbz	r5, 801eae4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ea9c:	4608      	mov	r0, r1
 801ea9e:	f7fd f9e3 	bl	801be68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801eaa2:	4607      	mov	r7, r0
 801eaa4:	4620      	mov	r0, r4
 801eaa6:	f7fd fa19 	bl	801bedc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801eaaa:	f8ad 000e 	strh.w	r0, [sp, #14]
 801eaae:	4620      	mov	r0, r4
 801eab0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801eab4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801eab8:	f8ad 700c 	strh.w	r7, [sp, #12]
 801eabc:	f7fd fad2 	bl	801c064 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801eac0:	280b      	cmp	r0, #11
 801eac2:	d838      	bhi.n	801eb36 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801eac4:	e8df f000 	tbb	[pc, r0]
 801eac8:	37062920 	.word	0x37062920
 801eacc:	37373737 	.word	0x37373737
 801ead0:	11373737 	.word	0x11373737
 801ead4:	4620      	mov	r0, r4
 801ead6:	f7fd fa3b 	bl	801bf50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801eada:	462b      	mov	r3, r5
 801eadc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eade:	a902      	add	r1, sp, #8
 801eae0:	f7ff ff0c 	bl	801e8fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eae4:	b005      	add	sp, #20
 801eae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eaea:	4620      	mov	r0, r4
 801eaec:	f7fd fa30 	bl	801bf50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801eaf0:	4606      	mov	r6, r0
 801eaf2:	4620      	mov	r0, r4
 801eaf4:	f7fd fa5e 	bl	801bfb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801eaf8:	9500      	str	r5, [sp, #0]
 801eafa:	4601      	mov	r1, r0
 801eafc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eafe:	aa02      	add	r2, sp, #8
 801eb00:	4630      	mov	r0, r6
 801eb02:	f7ff fde7 	bl	801e6d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801eb06:	e7ed      	b.n	801eae4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801eb08:	4620      	mov	r0, r4
 801eb0a:	f7fd fa21 	bl	801bf50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801eb0e:	462b      	mov	r3, r5
 801eb10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eb12:	a902      	add	r1, sp, #8
 801eb14:	f7ff fdfe 	bl	801e714 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801eb18:	e7e4      	b.n	801eae4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801eb1a:	6833      	ldr	r3, [r6, #0]
 801eb1c:	4620      	mov	r0, r4
 801eb1e:	68df      	ldr	r7, [r3, #12]
 801eb20:	f7fd fa16 	bl	801bf50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801eb24:	2300      	movs	r3, #0
 801eb26:	4601      	mov	r1, r0
 801eb28:	aa02      	add	r2, sp, #8
 801eb2a:	4630      	mov	r0, r6
 801eb2c:	e9cd 5300 	strd	r5, r3, [sp]
 801eb30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb32:	47b8      	blx	r7
 801eb34:	e7d6      	b.n	801eae4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801eb36:	4b03      	ldr	r3, [pc, #12]	; (801eb44 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801eb38:	2147      	movs	r1, #71	; 0x47
 801eb3a:	4a03      	ldr	r2, [pc, #12]	; (801eb48 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801eb3c:	4803      	ldr	r0, [pc, #12]	; (801eb4c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801eb3e:	f007 f9bf 	bl	8025ec0 <__assert_func>
 801eb42:	bf00      	nop
 801eb44:	0802dc9a 	.word	0x0802dc9a
 801eb48:	0802e388 	.word	0x0802e388
 801eb4c:	0802dd69 	.word	0x0802dd69

0801eb50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801eb50:	b570      	push	{r4, r5, r6, lr}
 801eb52:	9d04      	ldr	r5, [sp, #16]
 801eb54:	460c      	mov	r4, r1
 801eb56:	4619      	mov	r1, r3
 801eb58:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801eb5c:	2a0d      	cmp	r2, #13
 801eb5e:	d826      	bhi.n	801ebae <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801eb60:	e8df f002 	tbb	[pc, r2]
 801eb64:	200e1407 	.word	0x200e1407
 801eb68:	20202020 	.word	0x20202020
 801eb6c:	20202020 	.word	0x20202020
 801eb70:	2020      	.short	0x2020
 801eb72:	4b0f      	ldr	r3, [pc, #60]	; (801ebb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801eb74:	f240 11d3 	movw	r1, #467	; 0x1d3
 801eb78:	4a0e      	ldr	r2, [pc, #56]	; (801ebb4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801eb7a:	480f      	ldr	r0, [pc, #60]	; (801ebb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801eb7c:	f007 f9a0 	bl	8025ec0 <__assert_func>
 801eb80:	462a      	mov	r2, r5
 801eb82:	4620      	mov	r0, r4
 801eb84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eb88:	f7ff beb8 	b.w	801e8fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eb8c:	6802      	ldr	r2, [r0, #0]
 801eb8e:	2600      	movs	r6, #0
 801eb90:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801eb94:	68d6      	ldr	r6, [r2, #12]
 801eb96:	462b      	mov	r3, r5
 801eb98:	460a      	mov	r2, r1
 801eb9a:	4621      	mov	r1, r4
 801eb9c:	46b4      	mov	ip, r6
 801eb9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eba2:	4760      	bx	ip
 801eba4:	4b05      	ldr	r3, [pc, #20]	; (801ebbc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801eba6:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801ebaa:	4a02      	ldr	r2, [pc, #8]	; (801ebb4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801ebac:	e7e5      	b.n	801eb7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801ebae:	bd70      	pop	{r4, r5, r6, pc}
 801ebb0:	0802df40 	.word	0x0802df40
 801ebb4:	0802e670 	.word	0x0802e670
 801ebb8:	0802dd69 	.word	0x0802dd69
 801ebbc:	0802df81 	.word	0x0802df81

0801ebc0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801ebc0:	b158      	cbz	r0, 801ebda <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801ebc2:	2902      	cmp	r1, #2
 801ebc4:	d00f      	beq.n	801ebe6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801ebc6:	2903      	cmp	r1, #3
 801ebc8:	d010      	beq.n	801ebec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801ebca:	2901      	cmp	r1, #1
 801ebcc:	d101      	bne.n	801ebd2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ebce:	2001      	movs	r0, #1
 801ebd0:	4770      	bx	lr
 801ebd2:	4b08      	ldr	r3, [pc, #32]	; (801ebf4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ebd4:	8819      	ldrh	r1, [r3, #0]
 801ebd6:	4248      	negs	r0, r1
 801ebd8:	4770      	bx	lr
 801ebda:	2902      	cmp	r1, #2
 801ebdc:	d006      	beq.n	801ebec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801ebde:	2903      	cmp	r1, #3
 801ebe0:	d0f7      	beq.n	801ebd2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ebe2:	2901      	cmp	r1, #1
 801ebe4:	d1f3      	bne.n	801ebce <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801ebe6:	4b03      	ldr	r3, [pc, #12]	; (801ebf4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ebe8:	8818      	ldrh	r0, [r3, #0]
 801ebea:	4770      	bx	lr
 801ebec:	f04f 30ff 	mov.w	r0, #4294967295
 801ebf0:	4770      	bx	lr
 801ebf2:	bf00      	nop
 801ebf4:	200566f2 	.word	0x200566f2

0801ebf8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801ebf8:	b170      	cbz	r0, 801ec18 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801ebfa:	2902      	cmp	r1, #2
 801ebfc:	d012      	beq.n	801ec24 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801ebfe:	2903      	cmp	r1, #3
 801ec00:	d006      	beq.n	801ec10 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801ec02:	2901      	cmp	r1, #1
 801ec04:	d001      	beq.n	801ec0a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801ec06:	2001      	movs	r0, #1
 801ec08:	4770      	bx	lr
 801ec0a:	4b08      	ldr	r3, [pc, #32]	; (801ec2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ec0c:	8818      	ldrh	r0, [r3, #0]
 801ec0e:	4770      	bx	lr
 801ec10:	4b06      	ldr	r3, [pc, #24]	; (801ec2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ec12:	8818      	ldrh	r0, [r3, #0]
 801ec14:	4240      	negs	r0, r0
 801ec16:	4770      	bx	lr
 801ec18:	2902      	cmp	r1, #2
 801ec1a:	d0f9      	beq.n	801ec10 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801ec1c:	2903      	cmp	r1, #3
 801ec1e:	d0f2      	beq.n	801ec06 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801ec20:	2901      	cmp	r1, #1
 801ec22:	d1f2      	bne.n	801ec0a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801ec24:	f04f 30ff 	mov.w	r0, #4294967295
 801ec28:	4770      	bx	lr
 801ec2a:	bf00      	nop
 801ec2c:	200566f2 	.word	0x200566f2

0801ec30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec34:	b095      	sub	sp, #84	; 0x54
 801ec36:	9109      	str	r1, [sp, #36]	; 0x24
 801ec38:	a910      	add	r1, sp, #64	; 0x40
 801ec3a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801ec3e:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 801ec42:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801ec46:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801ec4a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801ec4e:	e881 000c 	stmia.w	r1, {r2, r3}
 801ec52:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801ec56:	9308      	str	r3, [sp, #32]
 801ec58:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801ec5c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801ec60:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec62:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801ec66:	798d      	ldrb	r5, [r1, #6]
 801ec68:	930a      	str	r3, [sp, #40]	; 0x28
 801ec6a:	7b4b      	ldrb	r3, [r1, #13]
 801ec6c:	0158      	lsls	r0, r3, #5
 801ec6e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ec72:	4328      	orrs	r0, r5
 801ec74:	9007      	str	r0, [sp, #28]
 801ec76:	f000 817a 	beq.w	801ef6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801ec7a:	011b      	lsls	r3, r3, #4
 801ec7c:	79c8      	ldrb	r0, [r1, #7]
 801ec7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ec82:	4303      	orrs	r3, r0
 801ec84:	930c      	str	r3, [sp, #48]	; 0x30
 801ec86:	f000 8172 	beq.w	801ef6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801ec8a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ec8e:	b29b      	uxth	r3, r3
 801ec90:	2f00      	cmp	r7, #0
 801ec92:	f000 8117 	beq.w	801eec4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801ec96:	1aff      	subs	r7, r7, r3
 801ec98:	b2bf      	uxth	r7, r7
 801ec9a:	043b      	lsls	r3, r7, #16
 801ec9c:	d502      	bpl.n	801eca4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ec9e:	1bf6      	subs	r6, r6, r7
 801eca0:	2700      	movs	r7, #0
 801eca2:	b236      	sxth	r6, r6
 801eca4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801eca8:	a810      	add	r0, sp, #64	; 0x40
 801ecaa:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ecae:	428e      	cmp	r6, r1
 801ecb0:	b28b      	uxth	r3, r1
 801ecb2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801ecb6:	bfbf      	itttt	lt
 801ecb8:	18ff      	addlt	r7, r7, r3
 801ecba:	1bbe      	sublt	r6, r7, r6
 801ecbc:	b2b7      	uxthlt	r7, r6
 801ecbe:	460e      	movlt	r6, r1
 801ecc0:	8891      	ldrh	r1, [r2, #4]
 801ecc2:	440b      	add	r3, r1
 801ecc4:	4631      	mov	r1, r6
 801ecc6:	b21b      	sxth	r3, r3
 801ecc8:	930e      	str	r3, [sp, #56]	; 0x38
 801ecca:	88d3      	ldrh	r3, [r2, #6]
 801eccc:	9a08      	ldr	r2, [sp, #32]
 801ecce:	449a      	add	sl, r3
 801ecd0:	fa0f f38a 	sxth.w	r3, sl
 801ecd4:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801ecd8:	930d      	str	r3, [sp, #52]	; 0x34
 801ecda:	4bb4      	ldr	r3, [pc, #720]	; (801efac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801ecdc:	f893 b000 	ldrb.w	fp, [r3]
 801ece0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ece4:	f1dc 0300 	rsbs	r3, ip, #0
 801ece8:	eb43 030c 	adc.w	r3, r3, ip
 801ecec:	930b      	str	r3, [sp, #44]	; 0x2c
 801ecee:	464b      	mov	r3, r9
 801ecf0:	f7f9 fcd3 	bl	801869a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ecf4:	4631      	mov	r1, r6
 801ecf6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801ecfa:	464b      	mov	r3, r9
 801ecfc:	9a08      	ldr	r2, [sp, #32]
 801ecfe:	a810      	add	r0, sp, #64	; 0x40
 801ed00:	f7f9 fce3 	bl	80186ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ed04:	a914      	add	r1, sp, #80	; 0x50
 801ed06:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ed0a:	a813      	add	r0, sp, #76	; 0x4c
 801ed0c:	f7f9 fe3e 	bl	801898c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ed10:	f1b9 0f00 	cmp.w	r9, #0
 801ed14:	f040 80d9 	bne.w	801eeca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801ed18:	f1bb 0f01 	cmp.w	fp, #1
 801ed1c:	f040 80dd 	bne.w	801eeda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801ed20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed22:	b153      	cbz	r3, 801ed3a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801ed24:	2508      	movs	r5, #8
 801ed26:	9a07      	ldr	r2, [sp, #28]
 801ed28:	fb95 f3f8 	sdiv	r3, r5, r8
 801ed2c:	1e5d      	subs	r5, r3, #1
 801ed2e:	4415      	add	r5, r2
 801ed30:	fb95 f5f3 	sdiv	r5, r5, r3
 801ed34:	fb15 f503 	smulbb	r5, r5, r3
 801ed38:	b2ad      	uxth	r5, r5
 801ed3a:	b907      	cbnz	r7, 801ed3e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801ed3c:	b16c      	cbz	r4, 801ed5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801ed3e:	fb04 7305 	mla	r3, r4, r5, r7
 801ed42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ed44:	ebaa 0a04 	sub.w	sl, sl, r4
 801ed48:	fb08 f303 	mul.w	r3, r8, r3
 801ed4c:	fa1f fa8a 	uxth.w	sl, sl
 801ed50:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ed54:	f003 0407 	and.w	r4, r3, #7
 801ed58:	9224      	str	r2, [sp, #144]	; 0x90
 801ed5a:	4649      	mov	r1, r9
 801ed5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ed5e:	f7ff ff2f 	bl	801ebc0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ed62:	4649      	mov	r1, r9
 801ed64:	4683      	mov	fp, r0
 801ed66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ed68:	f7ff ff46 	bl	801ebf8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ed6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ed6e:	9a08      	ldr	r2, [sp, #32]
 801ed70:	4681      	mov	r9, r0
 801ed72:	1a9b      	subs	r3, r3, r2
 801ed74:	459a      	cmp	sl, r3
 801ed76:	bfa8      	it	ge
 801ed78:	469a      	movge	sl, r3
 801ed7a:	f1ba 0f00 	cmp.w	sl, #0
 801ed7e:	f340 80f6 	ble.w	801ef6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801ed82:	1bf6      	subs	r6, r6, r7
 801ed84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed86:	1b9e      	subs	r6, r3, r6
 801ed88:	9b07      	ldr	r3, [sp, #28]
 801ed8a:	429e      	cmp	r6, r3
 801ed8c:	bfd4      	ite	le
 801ed8e:	ebc7 0706 	rsble	r7, r7, r6
 801ed92:	ebc7 0703 	rsbgt	r7, r7, r3
 801ed96:	2f00      	cmp	r7, #0
 801ed98:	f340 80e9 	ble.w	801ef6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801ed9c:	1bed      	subs	r5, r5, r7
 801ed9e:	fb08 f305 	mul.w	r3, r8, r5
 801eda2:	930b      	str	r3, [sp, #44]	; 0x2c
 801eda4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eda6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801edaa:	930c      	str	r3, [sp, #48]	; 0x30
 801edac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801edae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801edb2:	930d      	str	r3, [sp, #52]	; 0x34
 801edb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801edb6:	b2db      	uxtb	r3, r3
 801edb8:	930e      	str	r3, [sp, #56]	; 0x38
 801edba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edbc:	2b00      	cmp	r3, #0
 801edbe:	f040 80db 	bne.w	801ef78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801edc2:	4b7b      	ldr	r3, [pc, #492]	; (801efb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801edc4:	6818      	ldr	r0, [r3, #0]
 801edc6:	6803      	ldr	r3, [r0, #0]
 801edc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edca:	4798      	blx	r3
 801edcc:	2301      	movs	r3, #1
 801edce:	4a79      	ldr	r2, [pc, #484]	; (801efb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801edd0:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801edd4:	fb07 9b1b 	mls	fp, r7, fp, r9
 801edd8:	fa03 f308 	lsl.w	r3, r3, r8
 801eddc:	8811      	ldrh	r1, [r2, #0]
 801edde:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ede2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801ede6:	3b01      	subs	r3, #1
 801ede8:	fb06 bb07 	mla	fp, r6, r7, fp
 801edec:	b2db      	uxtb	r3, r3
 801edee:	9308      	str	r3, [sp, #32]
 801edf0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801edf4:	fb01 2303 	mla	r3, r1, r3, r2
 801edf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801edfc:	18c3      	adds	r3, r0, r3
 801edfe:	9307      	str	r3, [sp, #28]
 801ee00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ee02:	781a      	ldrb	r2, [r3, #0]
 801ee04:	4122      	asrs	r2, r4
 801ee06:	b2d2      	uxtb	r2, r2
 801ee08:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801ee0c:	f0c0 80d4 	bcc.w	801efb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 801ee10:	46be      	mov	lr, r7
 801ee12:	9907      	ldr	r1, [sp, #28]
 801ee14:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801ee18:	f0c0 80b7 	bcc.w	801ef8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801ee1c:	9b08      	ldr	r3, [sp, #32]
 801ee1e:	4013      	ands	r3, r2
 801ee20:	d041      	beq.n	801eea6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801ee22:	20ff      	movs	r0, #255	; 0xff
 801ee24:	9d08      	ldr	r5, [sp, #32]
 801ee26:	fb90 f5f5 	sdiv	r5, r0, r5
 801ee2a:	436b      	muls	r3, r5
 801ee2c:	2bfe      	cmp	r3, #254	; 0xfe
 801ee2e:	dd03      	ble.n	801ee38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801ee30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ee32:	4285      	cmp	r5, r0
 801ee34:	f000 80a2 	beq.w	801ef7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801ee38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ee3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ee3c:	fb15 f303 	smulbb	r3, r5, r3
 801ee40:	b29b      	uxth	r3, r3
 801ee42:	1c5d      	adds	r5, r3, #1
 801ee44:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801ee48:	780d      	ldrb	r5, [r1, #0]
 801ee4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ee4e:	fa1f fc83 	uxth.w	ip, r3
 801ee52:	43db      	mvns	r3, r3
 801ee54:	fb10 f90c 	smulbb	r9, r0, ip
 801ee58:	b2db      	uxtb	r3, r3
 801ee5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ee5c:	fb05 9503 	mla	r5, r5, r3, r9
 801ee60:	b2ad      	uxth	r5, r5
 801ee62:	f105 0901 	add.w	r9, r5, #1
 801ee66:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ee6a:	fb10 f90c 	smulbb	r9, r0, ip
 801ee6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ee70:	122d      	asrs	r5, r5, #8
 801ee72:	fb10 fc0c 	smulbb	ip, r0, ip
 801ee76:	700d      	strb	r5, [r1, #0]
 801ee78:	784d      	ldrb	r5, [r1, #1]
 801ee7a:	fb05 9503 	mla	r5, r5, r3, r9
 801ee7e:	b2ad      	uxth	r5, r5
 801ee80:	f105 0901 	add.w	r9, r5, #1
 801ee84:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ee88:	122d      	asrs	r5, r5, #8
 801ee8a:	704d      	strb	r5, [r1, #1]
 801ee8c:	788d      	ldrb	r5, [r1, #2]
 801ee8e:	fb05 cc03 	mla	ip, r5, r3, ip
 801ee92:	fa1f fc8c 	uxth.w	ip, ip
 801ee96:	f10c 0301 	add.w	r3, ip, #1
 801ee9a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ee9e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eea2:	f881 c002 	strb.w	ip, [r1, #2]
 801eea6:	4444      	add	r4, r8
 801eea8:	4431      	add	r1, r6
 801eeaa:	b2a4      	uxth	r4, r4
 801eeac:	2c07      	cmp	r4, #7
 801eeae:	bf89      	itett	hi
 801eeb0:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801eeb2:	fa42 f208 	asrls.w	r2, r2, r8
 801eeb6:	2400      	movhi	r4, #0
 801eeb8:	785a      	ldrbhi	r2, [r3, #1]
 801eeba:	bf8a      	itet	hi
 801eebc:	3301      	addhi	r3, #1
 801eebe:	b2d2      	uxtbls	r2, r2
 801eec0:	9324      	strhi	r3, [sp, #144]	; 0x90
 801eec2:	e7a7      	b.n	801ee14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801eec4:	441e      	add	r6, r3
 801eec6:	b236      	sxth	r6, r6
 801eec8:	e6ec      	b.n	801eca4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801eeca:	f1b9 0f01 	cmp.w	r9, #1
 801eece:	f47f af27 	bne.w	801ed20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eed2:	f1bb 0f01 	cmp.w	fp, #1
 801eed6:	f47f af23 	bne.w	801ed20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eeda:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801efb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801eede:	f8db 0000 	ldr.w	r0, [fp]
 801eee2:	6803      	ldr	r3, [r0, #0]
 801eee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eee6:	4798      	blx	r3
 801eee8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801eeec:	465a      	mov	r2, fp
 801eeee:	d006      	beq.n	801eefe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801eef0:	f1b8 0f04 	cmp.w	r8, #4
 801eef4:	d13e      	bne.n	801ef74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801eef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eef8:	3300      	adds	r3, #0
 801eefa:	bf18      	it	ne
 801eefc:	2301      	movne	r3, #1
 801eefe:	0580      	lsls	r0, r0, #22
 801ef00:	d563      	bpl.n	801efca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801ef02:	f1b8 0f08 	cmp.w	r8, #8
 801ef06:	d160      	bne.n	801efca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	bf0c      	ite	eq
 801ef0c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801ef10:	f44f 7180 	movne.w	r1, #256	; 0x100
 801ef14:	2f00      	cmp	r7, #0
 801ef16:	f47f af03 	bne.w	801ed20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ef1a:	2c00      	cmp	r4, #0
 801ef1c:	f47f af00 	bne.w	801ed20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ef20:	9b07      	ldr	r3, [sp, #28]
 801ef22:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ef24:	18f3      	adds	r3, r6, r3
 801ef26:	4283      	cmp	r3, r0
 801ef28:	f73f aefa 	bgt.w	801ed20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ef2c:	9808      	ldr	r0, [sp, #32]
 801ef2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef30:	4403      	add	r3, r0
 801ef32:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ef34:	4283      	cmp	r3, r0
 801ef36:	f73f aef3 	bgt.w	801ed20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ef3a:	f1b8 0f08 	cmp.w	r8, #8
 801ef3e:	6810      	ldr	r0, [r2, #0]
 801ef40:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801ef44:	bf18      	it	ne
 801ef46:	3501      	addne	r5, #1
 801ef48:	6804      	ldr	r4, [r0, #0]
 801ef4a:	9105      	str	r1, [sp, #20]
 801ef4c:	bf18      	it	ne
 801ef4e:	f025 0501 	bicne.w	r5, r5, #1
 801ef52:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ef54:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801ef58:	bf18      	it	ne
 801ef5a:	b2ad      	uxthne	r5, r5
 801ef5c:	9104      	str	r1, [sp, #16]
 801ef5e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ef60:	e9cd 5a00 	strd	r5, sl, [sp]
 801ef64:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801ef68:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ef6a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801ef6c:	47a0      	blx	r4
 801ef6e:	b015      	add	sp, #84	; 0x54
 801ef70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef74:	2300      	movs	r3, #0
 801ef76:	e7c2      	b.n	801eefe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801ef78:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef7a:	e727      	b.n	801edcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801ef7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef7e:	700b      	strb	r3, [r1, #0]
 801ef80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ef82:	704b      	strb	r3, [r1, #1]
 801ef84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef86:	708b      	strb	r3, [r1, #2]
 801ef88:	e78d      	b.n	801eea6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801ef8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef8c:	b153      	cbz	r3, 801efa4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ef8e:	441c      	add	r4, r3
 801ef90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef92:	b2a4      	uxth	r4, r4
 801ef94:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ef98:	f004 0407 	and.w	r4, r4, #7
 801ef9c:	781a      	ldrb	r2, [r3, #0]
 801ef9e:	9324      	str	r3, [sp, #144]	; 0x90
 801efa0:	4122      	asrs	r2, r4
 801efa2:	b2d2      	uxtb	r2, r2
 801efa4:	9b07      	ldr	r3, [sp, #28]
 801efa6:	445b      	add	r3, fp
 801efa8:	9307      	str	r3, [sp, #28]
 801efaa:	e72d      	b.n	801ee08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801efac:	200566f0 	.word	0x200566f0
 801efb0:	200566f8 	.word	0x200566f8
 801efb4:	200566f2 	.word	0x200566f2
 801efb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d1d7      	bne.n	801ef6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801efbe:	4b06      	ldr	r3, [pc, #24]	; (801efd8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801efc0:	6818      	ldr	r0, [r3, #0]
 801efc2:	6803      	ldr	r3, [r0, #0]
 801efc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801efc6:	4798      	blx	r3
 801efc8:	e7d1      	b.n	801ef6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801efca:	2b00      	cmp	r3, #0
 801efcc:	f43f aea8 	beq.w	801ed20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801efd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801efd4:	e79e      	b.n	801ef14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801efd6:	bf00      	nop
 801efd8:	200566f8 	.word	0x200566f8

0801efdc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801efdc:	b538      	push	{r3, r4, r5, lr}
 801efde:	4c15      	ldr	r4, [pc, #84]	; (801f034 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801efe0:	4605      	mov	r5, r0
 801efe2:	7823      	ldrb	r3, [r4, #0]
 801efe4:	f3bf 8f5b 	dmb	ish
 801efe8:	07da      	lsls	r2, r3, #31
 801efea:	d40b      	bmi.n	801f004 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801efec:	4620      	mov	r0, r4
 801efee:	f006 fe34 	bl	8025c5a <__cxa_guard_acquire>
 801eff2:	b138      	cbz	r0, 801f004 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801eff4:	4620      	mov	r0, r4
 801eff6:	f006 fe3c 	bl	8025c72 <__cxa_guard_release>
 801effa:	4a0f      	ldr	r2, [pc, #60]	; (801f038 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801effc:	490f      	ldr	r1, [pc, #60]	; (801f03c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801effe:	4810      	ldr	r0, [pc, #64]	; (801f040 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f000:	f006 fe24 	bl	8025c4c <__aeabi_atexit>
 801f004:	4c0f      	ldr	r4, [pc, #60]	; (801f044 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f006:	7823      	ldrb	r3, [r4, #0]
 801f008:	f3bf 8f5b 	dmb	ish
 801f00c:	07db      	lsls	r3, r3, #31
 801f00e:	d40b      	bmi.n	801f028 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f010:	4620      	mov	r0, r4
 801f012:	f006 fe22 	bl	8025c5a <__cxa_guard_acquire>
 801f016:	b138      	cbz	r0, 801f028 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f018:	4620      	mov	r0, r4
 801f01a:	f006 fe2a 	bl	8025c72 <__cxa_guard_release>
 801f01e:	4a06      	ldr	r2, [pc, #24]	; (801f038 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f020:	4909      	ldr	r1, [pc, #36]	; (801f048 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f022:	480a      	ldr	r0, [pc, #40]	; (801f04c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f024:	f006 fe12 	bl	8025c4c <__aeabi_atexit>
 801f028:	4b05      	ldr	r3, [pc, #20]	; (801f040 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f02a:	612b      	str	r3, [r5, #16]
 801f02c:	4b07      	ldr	r3, [pc, #28]	; (801f04c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f02e:	616b      	str	r3, [r5, #20]
 801f030:	bd38      	pop	{r3, r4, r5, pc}
 801f032:	bf00      	nop
 801f034:	200567e4 	.word	0x200567e4
 801f038:	20000000 	.word	0x20000000
 801f03c:	0801d927 	.word	0x0801d927
 801f040:	20000068 	.word	0x20000068
 801f044:	200567e8 	.word	0x200567e8
 801f048:	0801d925 	.word	0x0801d925
 801f04c:	2000006c 	.word	0x2000006c

0801f050 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f050:	b538      	push	{r3, r4, r5, lr}
 801f052:	4c15      	ldr	r4, [pc, #84]	; (801f0a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f054:	4605      	mov	r5, r0
 801f056:	7823      	ldrb	r3, [r4, #0]
 801f058:	f3bf 8f5b 	dmb	ish
 801f05c:	07da      	lsls	r2, r3, #31
 801f05e:	d40b      	bmi.n	801f078 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f060:	4620      	mov	r0, r4
 801f062:	f006 fdfa 	bl	8025c5a <__cxa_guard_acquire>
 801f066:	b138      	cbz	r0, 801f078 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f068:	4620      	mov	r0, r4
 801f06a:	f006 fe02 	bl	8025c72 <__cxa_guard_release>
 801f06e:	4a0f      	ldr	r2, [pc, #60]	; (801f0ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f070:	490f      	ldr	r1, [pc, #60]	; (801f0b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f072:	4810      	ldr	r0, [pc, #64]	; (801f0b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f074:	f006 fdea 	bl	8025c4c <__aeabi_atexit>
 801f078:	4c0f      	ldr	r4, [pc, #60]	; (801f0b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f07a:	7823      	ldrb	r3, [r4, #0]
 801f07c:	f3bf 8f5b 	dmb	ish
 801f080:	07db      	lsls	r3, r3, #31
 801f082:	d40b      	bmi.n	801f09c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f084:	4620      	mov	r0, r4
 801f086:	f006 fde8 	bl	8025c5a <__cxa_guard_acquire>
 801f08a:	b138      	cbz	r0, 801f09c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f08c:	4620      	mov	r0, r4
 801f08e:	f006 fdf0 	bl	8025c72 <__cxa_guard_release>
 801f092:	4a06      	ldr	r2, [pc, #24]	; (801f0ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f094:	4909      	ldr	r1, [pc, #36]	; (801f0bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f096:	480a      	ldr	r0, [pc, #40]	; (801f0c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f098:	f006 fdd8 	bl	8025c4c <__aeabi_atexit>
 801f09c:	4b05      	ldr	r3, [pc, #20]	; (801f0b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f09e:	60ab      	str	r3, [r5, #8]
 801f0a0:	4b07      	ldr	r3, [pc, #28]	; (801f0c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f0a2:	60eb      	str	r3, [r5, #12]
 801f0a4:	bd38      	pop	{r3, r4, r5, pc}
 801f0a6:	bf00      	nop
 801f0a8:	200567c4 	.word	0x200567c4
 801f0ac:	20000000 	.word	0x20000000
 801f0b0:	0801d92b 	.word	0x0801d92b
 801f0b4:	20000048 	.word	0x20000048
 801f0b8:	200567c8 	.word	0x200567c8
 801f0bc:	0801d929 	.word	0x0801d929
 801f0c0:	2000004c 	.word	0x2000004c

0801f0c4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801f0c4:	b510      	push	{r4, lr}
 801f0c6:	4604      	mov	r4, r0
 801f0c8:	f7ff ff88 	bl	801efdc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f0cc:	4620      	mov	r0, r4
 801f0ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0d2:	f7ff bfbd 	b.w	801f050 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f0d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f0d8:	b538      	push	{r3, r4, r5, lr}
 801f0da:	4c15      	ldr	r4, [pc, #84]	; (801f130 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f0dc:	4605      	mov	r5, r0
 801f0de:	7823      	ldrb	r3, [r4, #0]
 801f0e0:	f3bf 8f5b 	dmb	ish
 801f0e4:	07da      	lsls	r2, r3, #31
 801f0e6:	d40b      	bmi.n	801f100 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f0e8:	4620      	mov	r0, r4
 801f0ea:	f006 fdb6 	bl	8025c5a <__cxa_guard_acquire>
 801f0ee:	b138      	cbz	r0, 801f100 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f0f0:	4620      	mov	r0, r4
 801f0f2:	f006 fdbe 	bl	8025c72 <__cxa_guard_release>
 801f0f6:	4a0f      	ldr	r2, [pc, #60]	; (801f134 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f0f8:	490f      	ldr	r1, [pc, #60]	; (801f138 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f0fa:	4810      	ldr	r0, [pc, #64]	; (801f13c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f0fc:	f006 fda6 	bl	8025c4c <__aeabi_atexit>
 801f100:	4c0f      	ldr	r4, [pc, #60]	; (801f140 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f102:	7823      	ldrb	r3, [r4, #0]
 801f104:	f3bf 8f5b 	dmb	ish
 801f108:	07db      	lsls	r3, r3, #31
 801f10a:	d40b      	bmi.n	801f124 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f10c:	4620      	mov	r0, r4
 801f10e:	f006 fda4 	bl	8025c5a <__cxa_guard_acquire>
 801f112:	b138      	cbz	r0, 801f124 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f114:	4620      	mov	r0, r4
 801f116:	f006 fdac 	bl	8025c72 <__cxa_guard_release>
 801f11a:	4a06      	ldr	r2, [pc, #24]	; (801f134 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f11c:	4909      	ldr	r1, [pc, #36]	; (801f144 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f11e:	480a      	ldr	r0, [pc, #40]	; (801f148 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f120:	f006 fd94 	bl	8025c4c <__aeabi_atexit>
 801f124:	4b05      	ldr	r3, [pc, #20]	; (801f13c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f126:	622b      	str	r3, [r5, #32]
 801f128:	4b07      	ldr	r3, [pc, #28]	; (801f148 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f12a:	626b      	str	r3, [r5, #36]	; 0x24
 801f12c:	bd38      	pop	{r3, r4, r5, pc}
 801f12e:	bf00      	nop
 801f130:	200567ec 	.word	0x200567ec
 801f134:	20000000 	.word	0x20000000
 801f138:	0801d91f 	.word	0x0801d91f
 801f13c:	20000070 	.word	0x20000070
 801f140:	200567f0 	.word	0x200567f0
 801f144:	0801d91d 	.word	0x0801d91d
 801f148:	20000074 	.word	0x20000074

0801f14c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f14c:	b538      	push	{r3, r4, r5, lr}
 801f14e:	4c15      	ldr	r4, [pc, #84]	; (801f1a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f150:	4605      	mov	r5, r0
 801f152:	7823      	ldrb	r3, [r4, #0]
 801f154:	f3bf 8f5b 	dmb	ish
 801f158:	07da      	lsls	r2, r3, #31
 801f15a:	d40b      	bmi.n	801f174 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f15c:	4620      	mov	r0, r4
 801f15e:	f006 fd7c 	bl	8025c5a <__cxa_guard_acquire>
 801f162:	b138      	cbz	r0, 801f174 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f164:	4620      	mov	r0, r4
 801f166:	f006 fd84 	bl	8025c72 <__cxa_guard_release>
 801f16a:	4a0f      	ldr	r2, [pc, #60]	; (801f1a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f16c:	490f      	ldr	r1, [pc, #60]	; (801f1ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f16e:	4810      	ldr	r0, [pc, #64]	; (801f1b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f170:	f006 fd6c 	bl	8025c4c <__aeabi_atexit>
 801f174:	4c0f      	ldr	r4, [pc, #60]	; (801f1b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f176:	7823      	ldrb	r3, [r4, #0]
 801f178:	f3bf 8f5b 	dmb	ish
 801f17c:	07db      	lsls	r3, r3, #31
 801f17e:	d40b      	bmi.n	801f198 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f180:	4620      	mov	r0, r4
 801f182:	f006 fd6a 	bl	8025c5a <__cxa_guard_acquire>
 801f186:	b138      	cbz	r0, 801f198 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f188:	4620      	mov	r0, r4
 801f18a:	f006 fd72 	bl	8025c72 <__cxa_guard_release>
 801f18e:	4a06      	ldr	r2, [pc, #24]	; (801f1a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f190:	4909      	ldr	r1, [pc, #36]	; (801f1b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f192:	480a      	ldr	r0, [pc, #40]	; (801f1bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f194:	f006 fd5a 	bl	8025c4c <__aeabi_atexit>
 801f198:	4b05      	ldr	r3, [pc, #20]	; (801f1b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f19a:	61ab      	str	r3, [r5, #24]
 801f19c:	4b07      	ldr	r3, [pc, #28]	; (801f1bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f19e:	61eb      	str	r3, [r5, #28]
 801f1a0:	bd38      	pop	{r3, r4, r5, pc}
 801f1a2:	bf00      	nop
 801f1a4:	200567cc 	.word	0x200567cc
 801f1a8:	20000000 	.word	0x20000000
 801f1ac:	0801d923 	.word	0x0801d923
 801f1b0:	20000050 	.word	0x20000050
 801f1b4:	200567d0 	.word	0x200567d0
 801f1b8:	0801d921 	.word	0x0801d921
 801f1bc:	20000054 	.word	0x20000054

0801f1c0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f1c0:	b510      	push	{r4, lr}
 801f1c2:	4604      	mov	r4, r0
 801f1c4:	f7ff ff88 	bl	801f0d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f1c8:	4620      	mov	r0, r4
 801f1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1ce:	f7ff bfbd 	b.w	801f14c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f1d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801f1d4:	b538      	push	{r3, r4, r5, lr}
 801f1d6:	4c15      	ldr	r4, [pc, #84]	; (801f22c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801f1d8:	4605      	mov	r5, r0
 801f1da:	7823      	ldrb	r3, [r4, #0]
 801f1dc:	f3bf 8f5b 	dmb	ish
 801f1e0:	07da      	lsls	r2, r3, #31
 801f1e2:	d40b      	bmi.n	801f1fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f1e4:	4620      	mov	r0, r4
 801f1e6:	f006 fd38 	bl	8025c5a <__cxa_guard_acquire>
 801f1ea:	b138      	cbz	r0, 801f1fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	f006 fd40 	bl	8025c72 <__cxa_guard_release>
 801f1f2:	4a0f      	ldr	r2, [pc, #60]	; (801f230 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f1f4:	490f      	ldr	r1, [pc, #60]	; (801f234 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801f1f6:	4810      	ldr	r0, [pc, #64]	; (801f238 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f1f8:	f006 fd28 	bl	8025c4c <__aeabi_atexit>
 801f1fc:	4c0f      	ldr	r4, [pc, #60]	; (801f23c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801f1fe:	7823      	ldrb	r3, [r4, #0]
 801f200:	f3bf 8f5b 	dmb	ish
 801f204:	07db      	lsls	r3, r3, #31
 801f206:	d40b      	bmi.n	801f220 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f208:	4620      	mov	r0, r4
 801f20a:	f006 fd26 	bl	8025c5a <__cxa_guard_acquire>
 801f20e:	b138      	cbz	r0, 801f220 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f210:	4620      	mov	r0, r4
 801f212:	f006 fd2e 	bl	8025c72 <__cxa_guard_release>
 801f216:	4a06      	ldr	r2, [pc, #24]	; (801f230 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f218:	4909      	ldr	r1, [pc, #36]	; (801f240 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801f21a:	480a      	ldr	r0, [pc, #40]	; (801f244 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f21c:	f006 fd16 	bl	8025c4c <__aeabi_atexit>
 801f220:	4b05      	ldr	r3, [pc, #20]	; (801f238 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f222:	632b      	str	r3, [r5, #48]	; 0x30
 801f224:	4b07      	ldr	r3, [pc, #28]	; (801f244 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f226:	636b      	str	r3, [r5, #52]	; 0x34
 801f228:	bd38      	pop	{r3, r4, r5, pc}
 801f22a:	bf00      	nop
 801f22c:	200567d4 	.word	0x200567d4
 801f230:	20000000 	.word	0x20000000
 801f234:	0801d917 	.word	0x0801d917
 801f238:	20000058 	.word	0x20000058
 801f23c:	200567d8 	.word	0x200567d8
 801f240:	0801d915 	.word	0x0801d915
 801f244:	2000005c 	.word	0x2000005c

0801f248 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801f248:	b538      	push	{r3, r4, r5, lr}
 801f24a:	4c15      	ldr	r4, [pc, #84]	; (801f2a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801f24c:	4605      	mov	r5, r0
 801f24e:	7823      	ldrb	r3, [r4, #0]
 801f250:	f3bf 8f5b 	dmb	ish
 801f254:	07da      	lsls	r2, r3, #31
 801f256:	d40b      	bmi.n	801f270 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f258:	4620      	mov	r0, r4
 801f25a:	f006 fcfe 	bl	8025c5a <__cxa_guard_acquire>
 801f25e:	b138      	cbz	r0, 801f270 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f260:	4620      	mov	r0, r4
 801f262:	f006 fd06 	bl	8025c72 <__cxa_guard_release>
 801f266:	4a0f      	ldr	r2, [pc, #60]	; (801f2a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f268:	490f      	ldr	r1, [pc, #60]	; (801f2a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801f26a:	4810      	ldr	r0, [pc, #64]	; (801f2ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f26c:	f006 fcee 	bl	8025c4c <__aeabi_atexit>
 801f270:	4c0f      	ldr	r4, [pc, #60]	; (801f2b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801f272:	7823      	ldrb	r3, [r4, #0]
 801f274:	f3bf 8f5b 	dmb	ish
 801f278:	07db      	lsls	r3, r3, #31
 801f27a:	d40b      	bmi.n	801f294 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f27c:	4620      	mov	r0, r4
 801f27e:	f006 fcec 	bl	8025c5a <__cxa_guard_acquire>
 801f282:	b138      	cbz	r0, 801f294 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f284:	4620      	mov	r0, r4
 801f286:	f006 fcf4 	bl	8025c72 <__cxa_guard_release>
 801f28a:	4a06      	ldr	r2, [pc, #24]	; (801f2a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f28c:	4909      	ldr	r1, [pc, #36]	; (801f2b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801f28e:	480a      	ldr	r0, [pc, #40]	; (801f2b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f290:	f006 fcdc 	bl	8025c4c <__aeabi_atexit>
 801f294:	4b05      	ldr	r3, [pc, #20]	; (801f2ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f296:	62ab      	str	r3, [r5, #40]	; 0x28
 801f298:	4b07      	ldr	r3, [pc, #28]	; (801f2b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f29a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f29c:	bd38      	pop	{r3, r4, r5, pc}
 801f29e:	bf00      	nop
 801f2a0:	200567ac 	.word	0x200567ac
 801f2a4:	20000000 	.word	0x20000000
 801f2a8:	0801d91b 	.word	0x0801d91b
 801f2ac:	20000030 	.word	0x20000030
 801f2b0:	200567b0 	.word	0x200567b0
 801f2b4:	0801d919 	.word	0x0801d919
 801f2b8:	20000034 	.word	0x20000034

0801f2bc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801f2bc:	b510      	push	{r4, lr}
 801f2be:	4604      	mov	r4, r0
 801f2c0:	f7ff ff88 	bl	801f1d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801f2c4:	4620      	mov	r0, r4
 801f2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f2ca:	f7ff bfbd 	b.w	801f248 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801f2d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f2d0:	b538      	push	{r3, r4, r5, lr}
 801f2d2:	4c15      	ldr	r4, [pc, #84]	; (801f328 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f2d4:	4605      	mov	r5, r0
 801f2d6:	7823      	ldrb	r3, [r4, #0]
 801f2d8:	f3bf 8f5b 	dmb	ish
 801f2dc:	07da      	lsls	r2, r3, #31
 801f2de:	d40b      	bmi.n	801f2f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f2e0:	4620      	mov	r0, r4
 801f2e2:	f006 fcba 	bl	8025c5a <__cxa_guard_acquire>
 801f2e6:	b138      	cbz	r0, 801f2f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f2e8:	4620      	mov	r0, r4
 801f2ea:	f006 fcc2 	bl	8025c72 <__cxa_guard_release>
 801f2ee:	4a0f      	ldr	r2, [pc, #60]	; (801f32c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f2f0:	490f      	ldr	r1, [pc, #60]	; (801f330 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f2f2:	4810      	ldr	r0, [pc, #64]	; (801f334 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f2f4:	f006 fcaa 	bl	8025c4c <__aeabi_atexit>
 801f2f8:	4c0f      	ldr	r4, [pc, #60]	; (801f338 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f2fa:	7823      	ldrb	r3, [r4, #0]
 801f2fc:	f3bf 8f5b 	dmb	ish
 801f300:	07db      	lsls	r3, r3, #31
 801f302:	d40b      	bmi.n	801f31c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f304:	4620      	mov	r0, r4
 801f306:	f006 fca8 	bl	8025c5a <__cxa_guard_acquire>
 801f30a:	b138      	cbz	r0, 801f31c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f30c:	4620      	mov	r0, r4
 801f30e:	f006 fcb0 	bl	8025c72 <__cxa_guard_release>
 801f312:	4a06      	ldr	r2, [pc, #24]	; (801f32c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f314:	4909      	ldr	r1, [pc, #36]	; (801f33c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f316:	480a      	ldr	r0, [pc, #40]	; (801f340 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f318:	f006 fc98 	bl	8025c4c <__aeabi_atexit>
 801f31c:	4b05      	ldr	r3, [pc, #20]	; (801f334 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f31e:	642b      	str	r3, [r5, #64]	; 0x40
 801f320:	4b07      	ldr	r3, [pc, #28]	; (801f340 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f322:	646b      	str	r3, [r5, #68]	; 0x44
 801f324:	bd38      	pop	{r3, r4, r5, pc}
 801f326:	bf00      	nop
 801f328:	200567dc 	.word	0x200567dc
 801f32c:	20000000 	.word	0x20000000
 801f330:	0801d90f 	.word	0x0801d90f
 801f334:	20000060 	.word	0x20000060
 801f338:	200567e0 	.word	0x200567e0
 801f33c:	0801d90d 	.word	0x0801d90d
 801f340:	20000064 	.word	0x20000064

0801f344 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f344:	b538      	push	{r3, r4, r5, lr}
 801f346:	4c15      	ldr	r4, [pc, #84]	; (801f39c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f348:	4605      	mov	r5, r0
 801f34a:	7823      	ldrb	r3, [r4, #0]
 801f34c:	f3bf 8f5b 	dmb	ish
 801f350:	07da      	lsls	r2, r3, #31
 801f352:	d40b      	bmi.n	801f36c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f354:	4620      	mov	r0, r4
 801f356:	f006 fc80 	bl	8025c5a <__cxa_guard_acquire>
 801f35a:	b138      	cbz	r0, 801f36c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f35c:	4620      	mov	r0, r4
 801f35e:	f006 fc88 	bl	8025c72 <__cxa_guard_release>
 801f362:	4a0f      	ldr	r2, [pc, #60]	; (801f3a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f364:	490f      	ldr	r1, [pc, #60]	; (801f3a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f366:	4810      	ldr	r0, [pc, #64]	; (801f3a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f368:	f006 fc70 	bl	8025c4c <__aeabi_atexit>
 801f36c:	4c0f      	ldr	r4, [pc, #60]	; (801f3ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f36e:	7823      	ldrb	r3, [r4, #0]
 801f370:	f3bf 8f5b 	dmb	ish
 801f374:	07db      	lsls	r3, r3, #31
 801f376:	d40b      	bmi.n	801f390 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f378:	4620      	mov	r0, r4
 801f37a:	f006 fc6e 	bl	8025c5a <__cxa_guard_acquire>
 801f37e:	b138      	cbz	r0, 801f390 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f380:	4620      	mov	r0, r4
 801f382:	f006 fc76 	bl	8025c72 <__cxa_guard_release>
 801f386:	4a06      	ldr	r2, [pc, #24]	; (801f3a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f388:	4909      	ldr	r1, [pc, #36]	; (801f3b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f38a:	480a      	ldr	r0, [pc, #40]	; (801f3b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f38c:	f006 fc5e 	bl	8025c4c <__aeabi_atexit>
 801f390:	4b05      	ldr	r3, [pc, #20]	; (801f3a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f392:	63ab      	str	r3, [r5, #56]	; 0x38
 801f394:	4b07      	ldr	r3, [pc, #28]	; (801f3b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f396:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f398:	bd38      	pop	{r3, r4, r5, pc}
 801f39a:	bf00      	nop
 801f39c:	200567bc 	.word	0x200567bc
 801f3a0:	20000000 	.word	0x20000000
 801f3a4:	0801d913 	.word	0x0801d913
 801f3a8:	20000040 	.word	0x20000040
 801f3ac:	200567c0 	.word	0x200567c0
 801f3b0:	0801d911 	.word	0x0801d911
 801f3b4:	20000044 	.word	0x20000044

0801f3b8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f3b8:	b510      	push	{r4, lr}
 801f3ba:	4604      	mov	r4, r0
 801f3bc:	f7ff ff88 	bl	801f2d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f3c0:	4620      	mov	r0, r4
 801f3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3c6:	f7ff bfbd 	b.w	801f344 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f3cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f3cc:	b538      	push	{r3, r4, r5, lr}
 801f3ce:	4c15      	ldr	r4, [pc, #84]	; (801f424 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f3d0:	4605      	mov	r5, r0
 801f3d2:	7823      	ldrb	r3, [r4, #0]
 801f3d4:	f3bf 8f5b 	dmb	ish
 801f3d8:	07da      	lsls	r2, r3, #31
 801f3da:	d40b      	bmi.n	801f3f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f3dc:	4620      	mov	r0, r4
 801f3de:	f006 fc3c 	bl	8025c5a <__cxa_guard_acquire>
 801f3e2:	b138      	cbz	r0, 801f3f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f3e4:	4620      	mov	r0, r4
 801f3e6:	f006 fc44 	bl	8025c72 <__cxa_guard_release>
 801f3ea:	4a0f      	ldr	r2, [pc, #60]	; (801f428 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f3ec:	490f      	ldr	r1, [pc, #60]	; (801f42c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f3ee:	4810      	ldr	r0, [pc, #64]	; (801f430 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f3f0:	f006 fc2c 	bl	8025c4c <__aeabi_atexit>
 801f3f4:	4c0f      	ldr	r4, [pc, #60]	; (801f434 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f3f6:	7823      	ldrb	r3, [r4, #0]
 801f3f8:	f3bf 8f5b 	dmb	ish
 801f3fc:	07db      	lsls	r3, r3, #31
 801f3fe:	d40b      	bmi.n	801f418 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f400:	4620      	mov	r0, r4
 801f402:	f006 fc2a 	bl	8025c5a <__cxa_guard_acquire>
 801f406:	b138      	cbz	r0, 801f418 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f408:	4620      	mov	r0, r4
 801f40a:	f006 fc32 	bl	8025c72 <__cxa_guard_release>
 801f40e:	4a06      	ldr	r2, [pc, #24]	; (801f428 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f410:	4909      	ldr	r1, [pc, #36]	; (801f438 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f412:	480a      	ldr	r0, [pc, #40]	; (801f43c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f414:	f006 fc1a 	bl	8025c4c <__aeabi_atexit>
 801f418:	4b05      	ldr	r3, [pc, #20]	; (801f430 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f41a:	652b      	str	r3, [r5, #80]	; 0x50
 801f41c:	4b07      	ldr	r3, [pc, #28]	; (801f43c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f41e:	656b      	str	r3, [r5, #84]	; 0x54
 801f420:	bd38      	pop	{r3, r4, r5, pc}
 801f422:	bf00      	nop
 801f424:	200567b4 	.word	0x200567b4
 801f428:	20000000 	.word	0x20000000
 801f42c:	0801d907 	.word	0x0801d907
 801f430:	20000038 	.word	0x20000038
 801f434:	200567b8 	.word	0x200567b8
 801f438:	0801d905 	.word	0x0801d905
 801f43c:	2000003c 	.word	0x2000003c

0801f440 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f440:	b538      	push	{r3, r4, r5, lr}
 801f442:	4c15      	ldr	r4, [pc, #84]	; (801f498 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f444:	4605      	mov	r5, r0
 801f446:	7823      	ldrb	r3, [r4, #0]
 801f448:	f3bf 8f5b 	dmb	ish
 801f44c:	07da      	lsls	r2, r3, #31
 801f44e:	d40b      	bmi.n	801f468 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f450:	4620      	mov	r0, r4
 801f452:	f006 fc02 	bl	8025c5a <__cxa_guard_acquire>
 801f456:	b138      	cbz	r0, 801f468 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f458:	4620      	mov	r0, r4
 801f45a:	f006 fc0a 	bl	8025c72 <__cxa_guard_release>
 801f45e:	4a0f      	ldr	r2, [pc, #60]	; (801f49c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f460:	490f      	ldr	r1, [pc, #60]	; (801f4a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f462:	4810      	ldr	r0, [pc, #64]	; (801f4a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f464:	f006 fbf2 	bl	8025c4c <__aeabi_atexit>
 801f468:	4c0f      	ldr	r4, [pc, #60]	; (801f4a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f46a:	7823      	ldrb	r3, [r4, #0]
 801f46c:	f3bf 8f5b 	dmb	ish
 801f470:	07db      	lsls	r3, r3, #31
 801f472:	d40b      	bmi.n	801f48c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f474:	4620      	mov	r0, r4
 801f476:	f006 fbf0 	bl	8025c5a <__cxa_guard_acquire>
 801f47a:	b138      	cbz	r0, 801f48c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f47c:	4620      	mov	r0, r4
 801f47e:	f006 fbf8 	bl	8025c72 <__cxa_guard_release>
 801f482:	4a06      	ldr	r2, [pc, #24]	; (801f49c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f484:	4909      	ldr	r1, [pc, #36]	; (801f4ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f486:	480a      	ldr	r0, [pc, #40]	; (801f4b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f488:	f006 fbe0 	bl	8025c4c <__aeabi_atexit>
 801f48c:	4b05      	ldr	r3, [pc, #20]	; (801f4a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f48e:	64ab      	str	r3, [r5, #72]	; 0x48
 801f490:	4b07      	ldr	r3, [pc, #28]	; (801f4b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f492:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f494:	bd38      	pop	{r3, r4, r5, pc}
 801f496:	bf00      	nop
 801f498:	200567a4 	.word	0x200567a4
 801f49c:	20000000 	.word	0x20000000
 801f4a0:	0801d90b 	.word	0x0801d90b
 801f4a4:	20000028 	.word	0x20000028
 801f4a8:	200567a8 	.word	0x200567a8
 801f4ac:	0801d909 	.word	0x0801d909
 801f4b0:	2000002c 	.word	0x2000002c

0801f4b4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f4b4:	b510      	push	{r4, lr}
 801f4b6:	4604      	mov	r4, r0
 801f4b8:	f7ff ff88 	bl	801f3cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f4bc:	4620      	mov	r0, r4
 801f4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f4c2:	f7ff bfbd 	b.w	801f440 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f4c6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f4c6:	b510      	push	{r4, lr}
 801f4c8:	4604      	mov	r4, r0
 801f4ca:	f7ff fff3 	bl	801f4b4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f4ce:	4620      	mov	r0, r4
 801f4d0:	f7ff ff72 	bl	801f3b8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f4d4:	4620      	mov	r0, r4
 801f4d6:	f7ff fe73 	bl	801f1c0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f4da:	4620      	mov	r0, r4
 801f4dc:	f7ff fdf2 	bl	801f0c4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f4e0:	4620      	mov	r0, r4
 801f4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f4e6:	f7ff bee9 	b.w	801f2bc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f4ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4f0:	b087      	sub	sp, #28
 801f4f2:	7888      	ldrb	r0, [r1, #2]
 801f4f4:	4616      	mov	r6, r2
 801f4f6:	9001      	str	r0, [sp, #4]
 801f4f8:	7848      	ldrb	r0, [r1, #1]
 801f4fa:	9100      	str	r1, [sp, #0]
 801f4fc:	9002      	str	r0, [sp, #8]
 801f4fe:	7808      	ldrb	r0, [r1, #0]
 801f500:	9901      	ldr	r1, [sp, #4]
 801f502:	9003      	str	r0, [sp, #12]
 801f504:	9802      	ldr	r0, [sp, #8]
 801f506:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801f50a:	0200      	lsls	r0, r0, #8
 801f50c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801f510:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f514:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801f518:	9903      	ldr	r1, [sp, #12]
 801f51a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f51e:	4308      	orrs	r0, r1
 801f520:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f524:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801f528:	9005      	str	r0, [sp, #20]
 801f52a:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f52e:	2d00      	cmp	r5, #0
 801f530:	eb06 080a 	add.w	r8, r6, sl
 801f534:	db4a      	blt.n	801f5cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801f536:	45a9      	cmp	r9, r5
 801f538:	dd48      	ble.n	801f5cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801f53a:	f1bc 0f00 	cmp.w	ip, #0
 801f53e:	db43      	blt.n	801f5c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801f540:	45e6      	cmp	lr, ip
 801f542:	dd41      	ble.n	801f5c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801f544:	f816 600a 	ldrb.w	r6, [r6, sl]
 801f548:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f54c:	441e      	add	r6, r3
 801f54e:	f11c 0001 	adds.w	r0, ip, #1
 801f552:	d43e      	bmi.n	801f5d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801f554:	4586      	cmp	lr, r0
 801f556:	dd3c      	ble.n	801f5d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801f558:	2a00      	cmp	r2, #0
 801f55a:	d03a      	beq.n	801f5d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801f55c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f560:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f564:	4418      	add	r0, r3
 801f566:	3501      	adds	r5, #1
 801f568:	d437      	bmi.n	801f5da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801f56a:	45a9      	cmp	r9, r5
 801f56c:	dd35      	ble.n	801f5da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801f56e:	b3a4      	cbz	r4, 801f5da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801f570:	f1bc 0f00 	cmp.w	ip, #0
 801f574:	db2f      	blt.n	801f5d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801f576:	45e6      	cmp	lr, ip
 801f578:	dd2d      	ble.n	801f5d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801f57a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f57e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f582:	441d      	add	r5, r3
 801f584:	f11c 0c01 	adds.w	ip, ip, #1
 801f588:	d42a      	bmi.n	801f5e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801f58a:	45e6      	cmp	lr, ip
 801f58c:	dd28      	ble.n	801f5e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801f58e:	b33a      	cbz	r2, 801f5e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801f590:	44c6      	add	lr, r8
 801f592:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f596:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f59a:	4463      	add	r3, ip
 801f59c:	ea6f 0c07 	mvn.w	ip, r7
 801f5a0:	2a0f      	cmp	r2, #15
 801f5a2:	f896 a000 	ldrb.w	sl, [r6]
 801f5a6:	fa5f fc8c 	uxtb.w	ip, ip
 801f5aa:	f890 b000 	ldrb.w	fp, [r0]
 801f5ae:	f895 9000 	ldrb.w	r9, [r5]
 801f5b2:	7819      	ldrb	r1, [r3, #0]
 801f5b4:	d801      	bhi.n	801f5ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 801f5b6:	2c0f      	cmp	r4, #15
 801f5b8:	d914      	bls.n	801f5e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801f5ba:	4b40      	ldr	r3, [pc, #256]	; (801f6bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 801f5bc:	f240 1157 	movw	r1, #343	; 0x157
 801f5c0:	4a3f      	ldr	r2, [pc, #252]	; (801f6c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f5c2:	4840      	ldr	r0, [pc, #256]	; (801f6c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f5c4:	f006 fc7c 	bl	8025ec0 <__assert_func>
 801f5c8:	ae05      	add	r6, sp, #20
 801f5ca:	e7c0      	b.n	801f54e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 801f5cc:	a805      	add	r0, sp, #20
 801f5ce:	4606      	mov	r6, r0
 801f5d0:	e7c9      	b.n	801f566 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801f5d2:	a805      	add	r0, sp, #20
 801f5d4:	e7c7      	b.n	801f566 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801f5d6:	ad05      	add	r5, sp, #20
 801f5d8:	e7d4      	b.n	801f584 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 801f5da:	ab05      	add	r3, sp, #20
 801f5dc:	461d      	mov	r5, r3
 801f5de:	e7dd      	b.n	801f59c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801f5e0:	ab05      	add	r3, sp, #20
 801f5e2:	e7db      	b.n	801f59c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801f5e4:	b292      	uxth	r2, r2
 801f5e6:	b2a4      	uxth	r4, r4
 801f5e8:	fa1f fc8c 	uxth.w	ip, ip
 801f5ec:	fb02 f804 	mul.w	r8, r2, r4
 801f5f0:	0112      	lsls	r2, r2, #4
 801f5f2:	b2bf      	uxth	r7, r7
 801f5f4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f5f8:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f5fc:	eba2 0208 	sub.w	r2, r2, r8
 801f600:	b2a4      	uxth	r4, r4
 801f602:	b292      	uxth	r2, r2
 801f604:	ebae 0e04 	sub.w	lr, lr, r4
 801f608:	fb02 fb0b 	mul.w	fp, r2, fp
 801f60c:	fa1f fe8e 	uxth.w	lr, lr
 801f610:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f614:	fb04 aa09 	mla	sl, r4, r9, sl
 801f618:	fb08 aa01 	mla	sl, r8, r1, sl
 801f61c:	9903      	ldr	r1, [sp, #12]
 801f61e:	fb11 f90c 	smulbb	r9, r1, ip
 801f622:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f626:	9900      	ldr	r1, [sp, #0]
 801f628:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f62c:	fa1f fa8a 	uxth.w	sl, sl
 801f630:	f10a 0901 	add.w	r9, sl, #1
 801f634:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f638:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f63c:	f881 a000 	strb.w	sl, [r1]
 801f640:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f644:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f648:	fb02 fa0a 	mul.w	sl, r2, sl
 801f64c:	9902      	ldr	r1, [sp, #8]
 801f64e:	fb0e aa09 	mla	sl, lr, r9, sl
 801f652:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f656:	fb04 aa09 	mla	sl, r4, r9, sl
 801f65a:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f65e:	fb08 a909 	mla	r9, r8, r9, sl
 801f662:	fb11 fa0c 	smulbb	sl, r1, ip
 801f666:	9900      	ldr	r1, [sp, #0]
 801f668:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f66c:	fb09 a907 	mla	r9, r9, r7, sl
 801f670:	fa1f f989 	uxth.w	r9, r9
 801f674:	f109 0a01 	add.w	sl, r9, #1
 801f678:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f67c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f680:	f881 9001 	strb.w	r9, [r1, #1]
 801f684:	7880      	ldrb	r0, [r0, #2]
 801f686:	78b6      	ldrb	r6, [r6, #2]
 801f688:	4342      	muls	r2, r0
 801f68a:	78a8      	ldrb	r0, [r5, #2]
 801f68c:	789b      	ldrb	r3, [r3, #2]
 801f68e:	fb0e 2206 	mla	r2, lr, r6, r2
 801f692:	fb04 2400 	mla	r4, r4, r0, r2
 801f696:	fb08 4803 	mla	r8, r8, r3, r4
 801f69a:	9b01      	ldr	r3, [sp, #4]
 801f69c:	fb13 fc0c 	smulbb	ip, r3, ip
 801f6a0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f6a4:	fb08 c707 	mla	r7, r8, r7, ip
 801f6a8:	b2bf      	uxth	r7, r7
 801f6aa:	f107 0c01 	add.w	ip, r7, #1
 801f6ae:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f6b2:	123f      	asrs	r7, r7, #8
 801f6b4:	708f      	strb	r7, [r1, #2]
 801f6b6:	b007      	add	sp, #28
 801f6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6bc:	0802df2f 	.word	0x0802df2f
 801f6c0:	0802e497 	.word	0x0802e497
 801f6c4:	0802dff8 	.word	0x0802dff8

0801f6c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6cc:	ed2d 8b08 	vpush	{d8-d11}
 801f6d0:	b093      	sub	sp, #76	; 0x4c
 801f6d2:	eeb0 aa40 	vmov.f32	s20, s0
 801f6d6:	eef0 9a60 	vmov.f32	s19, s1
 801f6da:	9210      	str	r2, [sp, #64]	; 0x40
 801f6dc:	eeb0 9a41 	vmov.f32	s18, s2
 801f6e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f6e2:	eeb0 8a62 	vmov.f32	s16, s5
 801f6e6:	9309      	str	r3, [sp, #36]	; 0x24
 801f6e8:	eef0 8a43 	vmov.f32	s17, s6
 801f6ec:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801f6f0:	eef0 ba44 	vmov.f32	s23, s8
 801f6f4:	9011      	str	r0, [sp, #68]	; 0x44
 801f6f6:	eeb0 ba64 	vmov.f32	s22, s9
 801f6fa:	930e      	str	r3, [sp, #56]	; 0x38
 801f6fc:	eef0 aa45 	vmov.f32	s21, s10
 801f700:	6850      	ldr	r0, [r2, #4]
 801f702:	910d      	str	r1, [sp, #52]	; 0x34
 801f704:	6812      	ldr	r2, [r2, #0]
 801f706:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f70a:	fb00 1303 	mla	r3, r0, r3, r1
 801f70e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f712:	18d3      	adds	r3, r2, r3
 801f714:	930a      	str	r3, [sp, #40]	; 0x28
 801f716:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	930c      	str	r3, [sp, #48]	; 0x30
 801f71c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f71e:	685c      	ldr	r4, [r3, #4]
 801f720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f722:	3404      	adds	r4, #4
 801f724:	43db      	mvns	r3, r3
 801f726:	b2db      	uxtb	r3, r3
 801f728:	930b      	str	r3, [sp, #44]	; 0x2c
 801f72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f72c:	2b00      	cmp	r3, #0
 801f72e:	dc03      	bgt.n	801f738 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f730:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f732:	2b00      	cmp	r3, #0
 801f734:	f340 8250 	ble.w	801fbd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801f738:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f73a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f73e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f742:	1e48      	subs	r0, r1, #1
 801f744:	1e55      	subs	r5, r2, #1
 801f746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f748:	2b00      	cmp	r3, #0
 801f74a:	f340 80ee 	ble.w	801f92a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801f74e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801f750:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f752:	1436      	asrs	r6, r6, #16
 801f754:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f758:	d406      	bmi.n	801f768 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f75a:	4286      	cmp	r6, r0
 801f75c:	da04      	bge.n	801f768 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f75e:	2b00      	cmp	r3, #0
 801f760:	db02      	blt.n	801f768 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f762:	42ab      	cmp	r3, r5
 801f764:	f2c0 80e2 	blt.w	801f92c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801f768:	3601      	adds	r6, #1
 801f76a:	f100 80cf 	bmi.w	801f90c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f76e:	42b1      	cmp	r1, r6
 801f770:	f2c0 80cc 	blt.w	801f90c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f774:	3301      	adds	r3, #1
 801f776:	f100 80c9 	bmi.w	801f90c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f77a:	429a      	cmp	r2, r3
 801f77c:	f2c0 80c6 	blt.w	801f90c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f780:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801f784:	f1bb 0f00 	cmp.w	fp, #0
 801f788:	f340 80f1 	ble.w	801f96e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f78c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f78e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f790:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801f792:	141d      	asrs	r5, r3, #16
 801f794:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f796:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f79a:	68c7      	ldr	r7, [r0, #12]
 801f79c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f79e:	1418      	asrs	r0, r3, #16
 801f7a0:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801f7a4:	6892      	ldr	r2, [r2, #8]
 801f7a6:	f100 8137 	bmi.w	801fa18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f7aa:	f102 3cff 	add.w	ip, r2, #4294967295
 801f7ae:	4560      	cmp	r0, ip
 801f7b0:	f280 8132 	bge.w	801fa18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f7b4:	2d00      	cmp	r5, #0
 801f7b6:	f2c0 812f 	blt.w	801fa18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f7ba:	f107 3cff 	add.w	ip, r7, #4294967295
 801f7be:	4565      	cmp	r5, ip
 801f7c0:	f280 812a 	bge.w	801fa18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f7c4:	b212      	sxth	r2, r2
 801f7c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f7c8:	fb05 0002 	mla	r0, r5, r2, r0
 801f7cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f7ce:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f7d2:	4405      	add	r5, r0
 801f7d4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f7d8:	eb04 0e0c 	add.w	lr, r4, ip
 801f7dc:	f1b8 0f00 	cmp.w	r8, #0
 801f7e0:	f000 810c 	beq.w	801f9fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801f7e4:	786f      	ldrb	r7, [r5, #1]
 801f7e6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f7ea:	4427      	add	r7, r4
 801f7ec:	2900      	cmp	r1, #0
 801f7ee:	f000 810d 	beq.w	801fa0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f7f2:	18a8      	adds	r0, r5, r2
 801f7f4:	5caa      	ldrb	r2, [r5, r2]
 801f7f6:	7840      	ldrb	r0, [r0, #1]
 801f7f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f7fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f800:	4422      	add	r2, r4
 801f802:	4420      	add	r0, r4
 801f804:	fa1f f388 	uxth.w	r3, r8
 801f808:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801f80c:	b289      	uxth	r1, r1
 801f80e:	f897 c000 	ldrb.w	ip, [r7]
 801f812:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801f816:	fb03 f901 	mul.w	r9, r3, r1
 801f81a:	011b      	lsls	r3, r3, #4
 801f81c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f820:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f824:	eba3 0309 	sub.w	r3, r3, r9
 801f828:	b289      	uxth	r1, r1
 801f82a:	b29b      	uxth	r3, r3
 801f82c:	eba8 0801 	sub.w	r8, r8, r1
 801f830:	fb03 fc0c 	mul.w	ip, r3, ip
 801f834:	fa1f f888 	uxth.w	r8, r8
 801f838:	930f      	str	r3, [sp, #60]	; 0x3c
 801f83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f83c:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f840:	f892 a000 	ldrb.w	sl, [r2]
 801f844:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f848:	f890 a000 	ldrb.w	sl, [r0]
 801f84c:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f850:	f896 a000 	ldrb.w	sl, [r6]
 801f854:	fb1a fa03 	smulbb	sl, sl, r3
 801f858:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f85c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f85e:	fb0c ac05 	mla	ip, ip, r5, sl
 801f862:	fa1f fc8c 	uxth.w	ip, ip
 801f866:	f10c 0a01 	add.w	sl, ip, #1
 801f86a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f86e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f872:	f886 a000 	strb.w	sl, [r6]
 801f876:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f87a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801f87e:	fb03 fc0c 	mul.w	ip, r3, ip
 801f882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f884:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f888:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f88c:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f890:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f894:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f898:	f896 a001 	ldrb.w	sl, [r6, #1]
 801f89c:	fb1a fa03 	smulbb	sl, sl, r3
 801f8a0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f8a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f8a6:	fb0c ac05 	mla	ip, ip, r5, sl
 801f8aa:	fa1f fc8c 	uxth.w	ip, ip
 801f8ae:	f10c 0a01 	add.w	sl, ip, #1
 801f8b2:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801f8b6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f8ba:	f886 c001 	strb.w	ip, [r6, #1]
 801f8be:	78bf      	ldrb	r7, [r7, #2]
 801f8c0:	f89e c002 	ldrb.w	ip, [lr, #2]
 801f8c4:	437b      	muls	r3, r7
 801f8c6:	fb08 330c 	mla	r3, r8, ip, r3
 801f8ca:	f892 c002 	ldrb.w	ip, [r2, #2]
 801f8ce:	7882      	ldrb	r2, [r0, #2]
 801f8d0:	fb01 310c 	mla	r1, r1, ip, r3
 801f8d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8d6:	fb09 1902 	mla	r9, r9, r2, r1
 801f8da:	78b1      	ldrb	r1, [r6, #2]
 801f8dc:	fb11 f103 	smulbb	r1, r1, r3
 801f8e0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f8e4:	fb09 1505 	mla	r5, r9, r5, r1
 801f8e8:	b2ad      	uxth	r5, r5
 801f8ea:	1c6b      	adds	r3, r5, #1
 801f8ec:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f8f0:	122d      	asrs	r5, r5, #8
 801f8f2:	70b5      	strb	r5, [r6, #2]
 801f8f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f8f6:	3603      	adds	r6, #3
 801f8f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f8fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f8fe:	4413      	add	r3, r2
 801f900:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f902:	9325      	str	r3, [sp, #148]	; 0x94
 801f904:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f906:	4413      	add	r3, r2
 801f908:	9326      	str	r3, [sp, #152]	; 0x98
 801f90a:	e73b      	b.n	801f784 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801f90c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f90e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801f910:	4433      	add	r3, r6
 801f912:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801f914:	9325      	str	r3, [sp, #148]	; 0x94
 801f916:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f918:	4433      	add	r3, r6
 801f91a:	9326      	str	r3, [sp, #152]	; 0x98
 801f91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f91e:	3b01      	subs	r3, #1
 801f920:	9309      	str	r3, [sp, #36]	; 0x24
 801f922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f924:	3303      	adds	r3, #3
 801f926:	930a      	str	r3, [sp, #40]	; 0x28
 801f928:	e70d      	b.n	801f746 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f92a:	d028      	beq.n	801f97e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f92e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f930:	3b01      	subs	r3, #1
 801f932:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801f934:	fb00 5003 	mla	r0, r0, r3, r5
 801f938:	1400      	asrs	r0, r0, #16
 801f93a:	f53f af21 	bmi.w	801f780 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f93e:	3901      	subs	r1, #1
 801f940:	4288      	cmp	r0, r1
 801f942:	f6bf af1d 	bge.w	801f780 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f946:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f948:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f94a:	fb01 0303 	mla	r3, r1, r3, r0
 801f94e:	141b      	asrs	r3, r3, #16
 801f950:	f53f af16 	bmi.w	801f780 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f954:	3a01      	subs	r2, #1
 801f956:	4293      	cmp	r3, r2
 801f958:	f6bf af12 	bge.w	801f780 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f95c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f95e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f962:	1cdf      	adds	r7, r3, #3
 801f964:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801f968:	f1b9 0f00 	cmp.w	r9, #0
 801f96c:	dc73      	bgt.n	801fa56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801f96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f972:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f976:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f97a:	441a      	add	r2, r3
 801f97c:	920a      	str	r2, [sp, #40]	; 0x28
 801f97e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f980:	2b00      	cmp	r3, #0
 801f982:	f340 8129 	ble.w	801fbd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801f986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f98a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f98c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f990:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f994:	eef0 6a48 	vmov.f32	s13, s16
 801f998:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f99c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f9a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9a4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801f9a8:	eef0 6a68 	vmov.f32	s13, s17
 801f9ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9b0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801f9b4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f9b8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f9bc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f9c0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f9c4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f9c8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f9cc:	ee18 2a10 	vmov	r2, s16
 801f9d0:	eeb0 8a47 	vmov.f32	s16, s14
 801f9d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9d8:	ee18 2a90 	vmov	r2, s17
 801f9dc:	9327      	str	r3, [sp, #156]	; 0x9c
 801f9de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f9e0:	eef0 8a67 	vmov.f32	s17, s15
 801f9e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9e8:	9328      	str	r3, [sp, #160]	; 0xa0
 801f9ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f9ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f9ee:	3b01      	subs	r3, #1
 801f9f0:	930d      	str	r3, [sp, #52]	; 0x34
 801f9f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f9f4:	bf08      	it	eq
 801f9f6:	4613      	moveq	r3, r2
 801f9f8:	9309      	str	r3, [sp, #36]	; 0x24
 801f9fa:	e696      	b.n	801f72a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f9fc:	b149      	cbz	r1, 801fa12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f9fe:	5caa      	ldrb	r2, [r5, r2]
 801fa00:	4670      	mov	r0, lr
 801fa02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa06:	4422      	add	r2, r4
 801fa08:	4677      	mov	r7, lr
 801fa0a:	e6fb      	b.n	801f804 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801fa0c:	4670      	mov	r0, lr
 801fa0e:	4672      	mov	r2, lr
 801fa10:	e6f8      	b.n	801f804 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801fa12:	4670      	mov	r0, lr
 801fa14:	4672      	mov	r2, lr
 801fa16:	e7f7      	b.n	801fa08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801fa18:	f110 0c01 	adds.w	ip, r0, #1
 801fa1c:	f53f af6a 	bmi.w	801f8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fa20:	4562      	cmp	r2, ip
 801fa22:	f6ff af67 	blt.w	801f8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fa26:	f115 0c01 	adds.w	ip, r5, #1
 801fa2a:	f53f af63 	bmi.w	801f8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fa2e:	4567      	cmp	r7, ip
 801fa30:	f6ff af60 	blt.w	801f8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fa34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa36:	b23f      	sxth	r7, r7
 801fa38:	b212      	sxth	r2, r2
 801fa3a:	9002      	str	r0, [sp, #8]
 801fa3c:	9701      	str	r7, [sp, #4]
 801fa3e:	9200      	str	r2, [sp, #0]
 801fa40:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fa42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fa44:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801fa48:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801fa4c:	4623      	mov	r3, r4
 801fa4e:	4631      	mov	r1, r6
 801fa50:	f7ff fd4c 	bl	801f4ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801fa54:	e74e      	b.n	801f8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801fa56:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fa58:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fa5a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fa5e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801fa60:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fa62:	1400      	asrs	r0, r0, #16
 801fa64:	142d      	asrs	r5, r5, #16
 801fa66:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fa68:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fa6c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fa70:	fb02 5000 	mla	r0, r2, r0, r5
 801fa74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fa76:	f815 e000 	ldrb.w	lr, [r5, r0]
 801fa7a:	eb05 0c00 	add.w	ip, r5, r0
 801fa7e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fa82:	eb04 060e 	add.w	r6, r4, lr
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	f000 8097 	beq.w	801fbba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801fa8c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fa90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fa94:	4425      	add	r5, r4
 801fa96:	2900      	cmp	r1, #0
 801fa98:	f000 8098 	beq.w	801fbcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801fa9c:	eb0c 0002 	add.w	r0, ip, r2
 801faa0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801faa4:	7840      	ldrb	r0, [r0, #1]
 801faa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801faaa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801faae:	4422      	add	r2, r4
 801fab0:	4420      	add	r0, r4
 801fab2:	b29b      	uxth	r3, r3
 801fab4:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fab8:	b289      	uxth	r1, r1
 801faba:	f895 e000 	ldrb.w	lr, [r5]
 801fabe:	3703      	adds	r7, #3
 801fac0:	f109 39ff 	add.w	r9, r9, #4294967295
 801fac4:	fb03 f801 	mul.w	r8, r3, r1
 801fac8:	011b      	lsls	r3, r3, #4
 801faca:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801face:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801fad2:	eba3 0308 	sub.w	r3, r3, r8
 801fad6:	b289      	uxth	r1, r1
 801fad8:	b29b      	uxth	r3, r3
 801fada:	ebac 0c01 	sub.w	ip, ip, r1
 801fade:	fb03 fe0e 	mul.w	lr, r3, lr
 801fae2:	fa1f fc8c 	uxth.w	ip, ip
 801fae6:	930f      	str	r3, [sp, #60]	; 0x3c
 801fae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801faea:	fb0c ee0b 	mla	lr, ip, fp, lr
 801faee:	f892 b000 	ldrb.w	fp, [r2]
 801faf2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801faf6:	f890 b000 	ldrb.w	fp, [r0]
 801fafa:	fb08 ee0b 	mla	lr, r8, fp, lr
 801fafe:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801fb02:	fb1b fb03 	smulbb	fp, fp, r3
 801fb06:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fb0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fb0c:	fb0e be0a 	mla	lr, lr, sl, fp
 801fb10:	fa1f fe8e 	uxth.w	lr, lr
 801fb14:	f10e 0b01 	add.w	fp, lr, #1
 801fb18:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801fb1c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fb20:	f807 ec06 	strb.w	lr, [r7, #-6]
 801fb24:	f895 e001 	ldrb.w	lr, [r5, #1]
 801fb28:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fb2c:	fb03 fe0e 	mul.w	lr, r3, lr
 801fb30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb32:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fb36:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fb3a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fb3e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fb42:	fb08 ee0b 	mla	lr, r8, fp, lr
 801fb46:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801fb4a:	fb1b fb03 	smulbb	fp, fp, r3
 801fb4e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fb52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fb54:	fb0e be0a 	mla	lr, lr, sl, fp
 801fb58:	fa1f fe8e 	uxth.w	lr, lr
 801fb5c:	f10e 0b01 	add.w	fp, lr, #1
 801fb60:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801fb64:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fb68:	f807 ec05 	strb.w	lr, [r7, #-5]
 801fb6c:	78ad      	ldrb	r5, [r5, #2]
 801fb6e:	78b6      	ldrb	r6, [r6, #2]
 801fb70:	436b      	muls	r3, r5
 801fb72:	7895      	ldrb	r5, [r2, #2]
 801fb74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fb76:	fb0c 3306 	mla	r3, ip, r6, r3
 801fb7a:	fb01 3305 	mla	r3, r1, r5, r3
 801fb7e:	7885      	ldrb	r5, [r0, #2]
 801fb80:	fb08 3805 	mla	r8, r8, r5, r3
 801fb84:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801fb88:	fb13 f302 	smulbb	r3, r3, r2
 801fb8c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801fb90:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801fb92:	fb08 380a 	mla	r8, r8, sl, r3
 801fb96:	fa1f f888 	uxth.w	r8, r8
 801fb9a:	f108 0301 	add.w	r3, r8, #1
 801fb9e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801fba2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fba4:	4413      	add	r3, r2
 801fba6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fba8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fbac:	9325      	str	r3, [sp, #148]	; 0x94
 801fbae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fbb0:	f807 8c04 	strb.w	r8, [r7, #-4]
 801fbb4:	4413      	add	r3, r2
 801fbb6:	9326      	str	r3, [sp, #152]	; 0x98
 801fbb8:	e6d6      	b.n	801f968 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801fbba:	b151      	cbz	r1, 801fbd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 801fbbc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fbc0:	4630      	mov	r0, r6
 801fbc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fbc6:	4422      	add	r2, r4
 801fbc8:	4635      	mov	r5, r6
 801fbca:	e772      	b.n	801fab2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801fbcc:	4630      	mov	r0, r6
 801fbce:	4632      	mov	r2, r6
 801fbd0:	e76f      	b.n	801fab2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801fbd2:	4630      	mov	r0, r6
 801fbd4:	4632      	mov	r2, r6
 801fbd6:	e7f7      	b.n	801fbc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801fbd8:	b013      	add	sp, #76	; 0x4c
 801fbda:	ecbd 8b08 	vpop	{d8-d11}
 801fbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fbe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801fbe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbe8:	784d      	ldrb	r5, [r1, #1]
 801fbea:	f891 9002 	ldrb.w	r9, [r1, #2]
 801fbee:	022d      	lsls	r5, r5, #8
 801fbf0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801fbf4:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801fbf8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801fbfc:	f891 9000 	ldrb.w	r9, [r1]
 801fc00:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801fc04:	ea45 0509 	orr.w	r5, r5, r9
 801fc08:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801fc0c:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801fc10:	9501      	str	r5, [sp, #4]
 801fc12:	fb06 470c 	mla	r7, r6, ip, r4
 801fc16:	2e00      	cmp	r6, #0
 801fc18:	eb02 0e07 	add.w	lr, r2, r7
 801fc1c:	db46      	blt.n	801fcac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801fc1e:	45b0      	cmp	r8, r6
 801fc20:	dd44      	ble.n	801fcac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801fc22:	2c00      	cmp	r4, #0
 801fc24:	db40      	blt.n	801fca8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801fc26:	45a4      	cmp	ip, r4
 801fc28:	dd3e      	ble.n	801fca8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801fc2a:	5dd7      	ldrb	r7, [r2, r7]
 801fc2c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fc30:	441f      	add	r7, r3
 801fc32:	1c62      	adds	r2, r4, #1
 801fc34:	d43d      	bmi.n	801fcb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801fc36:	4594      	cmp	ip, r2
 801fc38:	dd3b      	ble.n	801fcb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801fc3a:	f1ba 0f00 	cmp.w	sl, #0
 801fc3e:	d038      	beq.n	801fcb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801fc40:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801fc44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fc48:	441d      	add	r5, r3
 801fc4a:	3601      	adds	r6, #1
 801fc4c:	d435      	bmi.n	801fcba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801fc4e:	45b0      	cmp	r8, r6
 801fc50:	dd33      	ble.n	801fcba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801fc52:	b390      	cbz	r0, 801fcba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801fc54:	2c00      	cmp	r4, #0
 801fc56:	db2e      	blt.n	801fcb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801fc58:	45a4      	cmp	ip, r4
 801fc5a:	dd2c      	ble.n	801fcb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801fc5c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801fc60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fc64:	441e      	add	r6, r3
 801fc66:	1c62      	adds	r2, r4, #1
 801fc68:	d42a      	bmi.n	801fcc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801fc6a:	4594      	cmp	ip, r2
 801fc6c:	dd28      	ble.n	801fcc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801fc6e:	f1ba 0f00 	cmp.w	sl, #0
 801fc72:	d025      	beq.n	801fcc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801fc74:	44f4      	add	ip, lr
 801fc76:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fc7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc7e:	4413      	add	r3, r2
 801fc80:	f1ba 0f0f 	cmp.w	sl, #15
 801fc84:	f897 8000 	ldrb.w	r8, [r7]
 801fc88:	f895 9000 	ldrb.w	r9, [r5]
 801fc8c:	f896 e000 	ldrb.w	lr, [r6]
 801fc90:	f893 c000 	ldrb.w	ip, [r3]
 801fc94:	d801      	bhi.n	801fc9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 801fc96:	280f      	cmp	r0, #15
 801fc98:	d914      	bls.n	801fcc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 801fc9a:	4b29      	ldr	r3, [pc, #164]	; (801fd40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 801fc9c:	f240 1157 	movw	r1, #343	; 0x157
 801fca0:	4a28      	ldr	r2, [pc, #160]	; (801fd44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801fca2:	4829      	ldr	r0, [pc, #164]	; (801fd48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801fca4:	f006 f90c 	bl	8025ec0 <__assert_func>
 801fca8:	af01      	add	r7, sp, #4
 801fcaa:	e7c2      	b.n	801fc32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 801fcac:	ad01      	add	r5, sp, #4
 801fcae:	462f      	mov	r7, r5
 801fcb0:	e7cb      	b.n	801fc4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801fcb2:	ad01      	add	r5, sp, #4
 801fcb4:	e7c9      	b.n	801fc4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801fcb6:	ae01      	add	r6, sp, #4
 801fcb8:	e7d5      	b.n	801fc66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 801fcba:	ab01      	add	r3, sp, #4
 801fcbc:	461e      	mov	r6, r3
 801fcbe:	e7df      	b.n	801fc80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801fcc0:	ab01      	add	r3, sp, #4
 801fcc2:	e7dd      	b.n	801fc80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801fcc4:	fa1f f48a 	uxth.w	r4, sl
 801fcc8:	b280      	uxth	r0, r0
 801fcca:	fb04 fa00 	mul.w	sl, r4, r0
 801fcce:	0124      	lsls	r4, r4, #4
 801fcd0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fcd4:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801fcd8:	b282      	uxth	r2, r0
 801fcda:	eba4 000a 	sub.w	r0, r4, sl
 801fcde:	ebab 0b02 	sub.w	fp, fp, r2
 801fce2:	b280      	uxth	r0, r0
 801fce4:	fa1f fb8b 	uxth.w	fp, fp
 801fce8:	fb00 f909 	mul.w	r9, r0, r9
 801fcec:	fb0b 9808 	mla	r8, fp, r8, r9
 801fcf0:	fb02 8e0e 	mla	lr, r2, lr, r8
 801fcf4:	fb0a ec0c 	mla	ip, sl, ip, lr
 801fcf8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fcfc:	f881 c000 	strb.w	ip, [r1]
 801fd00:	786c      	ldrb	r4, [r5, #1]
 801fd02:	f897 c001 	ldrb.w	ip, [r7, #1]
 801fd06:	4344      	muls	r4, r0
 801fd08:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801fd0c:	7874      	ldrb	r4, [r6, #1]
 801fd0e:	fb02 cc04 	mla	ip, r2, r4, ip
 801fd12:	785c      	ldrb	r4, [r3, #1]
 801fd14:	fb0a c404 	mla	r4, sl, r4, ip
 801fd18:	1224      	asrs	r4, r4, #8
 801fd1a:	704c      	strb	r4, [r1, #1]
 801fd1c:	78ad      	ldrb	r5, [r5, #2]
 801fd1e:	78bc      	ldrb	r4, [r7, #2]
 801fd20:	4368      	muls	r0, r5
 801fd22:	fb0b 0b04 	mla	fp, fp, r4, r0
 801fd26:	78b0      	ldrb	r0, [r6, #2]
 801fd28:	fb02 b000 	mla	r0, r2, r0, fp
 801fd2c:	789a      	ldrb	r2, [r3, #2]
 801fd2e:	fb0a 0a02 	mla	sl, sl, r2, r0
 801fd32:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fd36:	f881 a002 	strb.w	sl, [r1, #2]
 801fd3a:	b003      	add	sp, #12
 801fd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd40:	0802df2f 	.word	0x0802df2f
 801fd44:	0802e497 	.word	0x0802e497
 801fd48:	0802dff8 	.word	0x0802dff8

0801fd4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd50:	ed2d 8b0a 	vpush	{d8-d12}
 801fd54:	b08d      	sub	sp, #52	; 0x34
 801fd56:	eeb0 aa40 	vmov.f32	s20, s0
 801fd5a:	eef0 9a60 	vmov.f32	s19, s1
 801fd5e:	900b      	str	r0, [sp, #44]	; 0x2c
 801fd60:	eeb0 9a41 	vmov.f32	s18, s2
 801fd64:	9306      	str	r3, [sp, #24]
 801fd66:	eeb0 8a62 	vmov.f32	s16, s5
 801fd6a:	eef0 8a43 	vmov.f32	s17, s6
 801fd6e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801fd70:	eeb0 ca44 	vmov.f32	s24, s8
 801fd74:	eef0 ba64 	vmov.f32	s23, s9
 801fd78:	eeb0 ba45 	vmov.f32	s22, s10
 801fd7c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801fd80:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801fd84:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fd86:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801fd8a:	6850      	ldr	r0, [r2, #4]
 801fd8c:	6812      	ldr	r2, [r2, #0]
 801fd8e:	fb00 1303 	mla	r3, r0, r3, r1
 801fd92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd96:	18d3      	adds	r3, r2, r3
 801fd98:	9307      	str	r3, [sp, #28]
 801fd9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fd9c:	681b      	ldr	r3, [r3, #0]
 801fd9e:	9308      	str	r3, [sp, #32]
 801fda0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fda2:	685d      	ldr	r5, [r3, #4]
 801fda4:	3504      	adds	r5, #4
 801fda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	dc03      	bgt.n	801fdb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fdac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	f340 81e6 	ble.w	8020180 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801fdb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fdb6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fdba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fdbe:	1e48      	subs	r0, r1, #1
 801fdc0:	1e56      	subs	r6, r2, #1
 801fdc2:	9b06      	ldr	r3, [sp, #24]
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	f340 80bd 	ble.w	801ff44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801fdca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fdcc:	1427      	asrs	r7, r4, #16
 801fdce:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fdd2:	d406      	bmi.n	801fde2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fdd4:	4287      	cmp	r7, r0
 801fdd6:	da04      	bge.n	801fde2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	db02      	blt.n	801fde2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fddc:	42b3      	cmp	r3, r6
 801fdde:	f2c0 80b2 	blt.w	801ff46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fde2:	3701      	adds	r7, #1
 801fde4:	f100 80a1 	bmi.w	801ff2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fde8:	42b9      	cmp	r1, r7
 801fdea:	f2c0 809e 	blt.w	801ff2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fdee:	3301      	adds	r3, #1
 801fdf0:	f100 809b 	bmi.w	801ff2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fdf4:	429a      	cmp	r2, r3
 801fdf6:	f2c0 8098 	blt.w	801ff2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fdfa:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801fdfe:	f1bb 0f00 	cmp.w	fp, #0
 801fe02:	f340 80bf 	ble.w	801ff84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801fe06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801fe08:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801fe0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fe0c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fe10:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801fe14:	1420      	asrs	r0, r4, #16
 801fe16:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fe18:	ea4f 4723 	mov.w	r7, r3, asr #16
 801fe1c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801fe20:	6892      	ldr	r2, [r2, #8]
 801fe22:	f100 8103 	bmi.w	802002c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fe26:	f102 3eff 	add.w	lr, r2, #4294967295
 801fe2a:	4570      	cmp	r0, lr
 801fe2c:	f280 80fe 	bge.w	802002c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fe30:	2f00      	cmp	r7, #0
 801fe32:	f2c0 80fb 	blt.w	802002c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fe36:	f10c 3eff 	add.w	lr, ip, #4294967295
 801fe3a:	4577      	cmp	r7, lr
 801fe3c:	f280 80f6 	bge.w	802002c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fe40:	b212      	sxth	r2, r2
 801fe42:	fb07 0002 	mla	r0, r7, r2, r0
 801fe46:	9f08      	ldr	r7, [sp, #32]
 801fe48:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fe4c:	eb07 0e00 	add.w	lr, r7, r0
 801fe50:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fe54:	eb05 0c08 	add.w	ip, r5, r8
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	f000 80d8 	beq.w	802000e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801fe5e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801fe62:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fe66:	442f      	add	r7, r5
 801fe68:	2900      	cmp	r1, #0
 801fe6a:	f000 80d9 	beq.w	8020020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801fe6e:	eb0e 0002 	add.w	r0, lr, r2
 801fe72:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801fe76:	7840      	ldrb	r0, [r0, #1]
 801fe78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fe80:	442a      	add	r2, r5
 801fe82:	4428      	add	r0, r5
 801fe84:	b29b      	uxth	r3, r3
 801fe86:	f815 a008 	ldrb.w	sl, [r5, r8]
 801fe8a:	b289      	uxth	r1, r1
 801fe8c:	f897 8000 	ldrb.w	r8, [r7]
 801fe90:	fb03 f901 	mul.w	r9, r3, r1
 801fe94:	011b      	lsls	r3, r3, #4
 801fe96:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fe9a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fe9e:	eba3 0309 	sub.w	r3, r3, r9
 801fea2:	b289      	uxth	r1, r1
 801fea4:	b29b      	uxth	r3, r3
 801fea6:	ebae 0e01 	sub.w	lr, lr, r1
 801feaa:	fb03 f808 	mul.w	r8, r3, r8
 801feae:	fa1f fe8e 	uxth.w	lr, lr
 801feb2:	fb0e 880a 	mla	r8, lr, sl, r8
 801feb6:	f892 a000 	ldrb.w	sl, [r2]
 801feba:	fb01 880a 	mla	r8, r1, sl, r8
 801febe:	f890 a000 	ldrb.w	sl, [r0]
 801fec2:	fb09 880a 	mla	r8, r9, sl, r8
 801fec6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801feca:	f886 8000 	strb.w	r8, [r6]
 801fece:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fed2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fed6:	fb03 f808 	mul.w	r8, r3, r8
 801feda:	fb0e 880a 	mla	r8, lr, sl, r8
 801fede:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fee2:	fb01 880a 	mla	r8, r1, sl, r8
 801fee6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801feea:	fb09 880a 	mla	r8, r9, sl, r8
 801feee:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fef2:	f886 8001 	strb.w	r8, [r6, #1]
 801fef6:	78bf      	ldrb	r7, [r7, #2]
 801fef8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801fefc:	437b      	muls	r3, r7
 801fefe:	7892      	ldrb	r2, [r2, #2]
 801ff00:	fb0e 330c 	mla	r3, lr, ip, r3
 801ff04:	fb01 3102 	mla	r1, r1, r2, r3
 801ff08:	7882      	ldrb	r2, [r0, #2]
 801ff0a:	fb09 1902 	mla	r9, r9, r2, r1
 801ff0e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff12:	f886 9002 	strb.w	r9, [r6, #2]
 801ff16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ff18:	3603      	adds	r6, #3
 801ff1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ff1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ff20:	441c      	add	r4, r3
 801ff22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ff24:	4413      	add	r3, r2
 801ff26:	9322      	str	r3, [sp, #136]	; 0x88
 801ff28:	e769      	b.n	801fdfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ff2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ff2c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801ff2e:	441c      	add	r4, r3
 801ff30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ff32:	443b      	add	r3, r7
 801ff34:	9322      	str	r3, [sp, #136]	; 0x88
 801ff36:	9b06      	ldr	r3, [sp, #24]
 801ff38:	3b01      	subs	r3, #1
 801ff3a:	9306      	str	r3, [sp, #24]
 801ff3c:	9b07      	ldr	r3, [sp, #28]
 801ff3e:	3303      	adds	r3, #3
 801ff40:	9307      	str	r3, [sp, #28]
 801ff42:	e73e      	b.n	801fdc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ff44:	d026      	beq.n	801ff94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801ff46:	9b06      	ldr	r3, [sp, #24]
 801ff48:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801ff4a:	3b01      	subs	r3, #1
 801ff4c:	fb00 4003 	mla	r0, r0, r3, r4
 801ff50:	1400      	asrs	r0, r0, #16
 801ff52:	f53f af52 	bmi.w	801fdfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ff56:	3901      	subs	r1, #1
 801ff58:	4288      	cmp	r0, r1
 801ff5a:	f6bf af4e 	bge.w	801fdfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ff5e:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ff60:	9822      	ldr	r0, [sp, #136]	; 0x88
 801ff62:	fb01 0303 	mla	r3, r1, r3, r0
 801ff66:	141b      	asrs	r3, r3, #16
 801ff68:	f53f af47 	bmi.w	801fdfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ff6c:	3a01      	subs	r2, #1
 801ff6e:	4293      	cmp	r3, r2
 801ff70:	f6bf af43 	bge.w	801fdfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ff74:	9b07      	ldr	r3, [sp, #28]
 801ff76:	f8dd a018 	ldr.w	sl, [sp, #24]
 801ff7a:	f103 0803 	add.w	r8, r3, #3
 801ff7e:	f1ba 0f00 	cmp.w	sl, #0
 801ff82:	dc71      	bgt.n	8020068 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801ff84:	9b06      	ldr	r3, [sp, #24]
 801ff86:	9a07      	ldr	r2, [sp, #28]
 801ff88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff90:	441a      	add	r2, r3
 801ff92:	9207      	str	r2, [sp, #28]
 801ff94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	f340 80f2 	ble.w	8020180 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801ff9c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801ffa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ffa2:	ee79 9aab 	vadd.f32	s19, s19, s23
 801ffa6:	eef0 6a48 	vmov.f32	s13, s16
 801ffaa:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801ffae:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801ffb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ffb6:	ee16 4a90 	vmov	r4, s13
 801ffba:	eef0 6a68 	vmov.f32	s13, s17
 801ffbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ffc2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801ffc6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ffca:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ffce:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ffd2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ffd6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ffda:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ffde:	ee18 2a10 	vmov	r2, s16
 801ffe2:	eeb0 8a47 	vmov.f32	s16, s14
 801ffe6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffea:	ee18 2a90 	vmov	r2, s17
 801ffee:	9323      	str	r3, [sp, #140]	; 0x8c
 801fff0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fff2:	eef0 8a67 	vmov.f32	s17, s15
 801fff6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fffa:	9324      	str	r3, [sp, #144]	; 0x90
 801fffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020000:	3b01      	subs	r3, #1
 8020002:	9309      	str	r3, [sp, #36]	; 0x24
 8020004:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020006:	bf08      	it	eq
 8020008:	4613      	moveq	r3, r2
 802000a:	9306      	str	r3, [sp, #24]
 802000c:	e6cb      	b.n	801fda6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802000e:	b151      	cbz	r1, 8020026 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020010:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020014:	4660      	mov	r0, ip
 8020016:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802001a:	442a      	add	r2, r5
 802001c:	4667      	mov	r7, ip
 802001e:	e731      	b.n	801fe84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020020:	4660      	mov	r0, ip
 8020022:	4662      	mov	r2, ip
 8020024:	e72e      	b.n	801fe84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020026:	4660      	mov	r0, ip
 8020028:	4662      	mov	r2, ip
 802002a:	e7f7      	b.n	802001c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802002c:	f110 0e01 	adds.w	lr, r0, #1
 8020030:	f53f af71 	bmi.w	801ff16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020034:	4572      	cmp	r2, lr
 8020036:	f6ff af6e 	blt.w	801ff16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802003a:	f117 0e01 	adds.w	lr, r7, #1
 802003e:	f53f af6a 	bmi.w	801ff16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020042:	45f4      	cmp	ip, lr
 8020044:	f6ff af67 	blt.w	801ff16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020048:	b212      	sxth	r2, r2
 802004a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802004e:	fa0f f38c 	sxth.w	r3, ip
 8020052:	9200      	str	r2, [sp, #0]
 8020054:	4631      	mov	r1, r6
 8020056:	9a08      	ldr	r2, [sp, #32]
 8020058:	9301      	str	r3, [sp, #4]
 802005a:	462b      	mov	r3, r5
 802005c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020060:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020062:	f7ff fdbf 	bl	801fbe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020066:	e756      	b.n	801ff16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020068:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802006a:	1426      	asrs	r6, r4, #16
 802006c:	9822      	ldr	r0, [sp, #136]	; 0x88
 802006e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020072:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020076:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020078:	1400      	asrs	r0, r0, #16
 802007a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802007e:	fb02 6000 	mla	r0, r2, r0, r6
 8020082:	9e08      	ldr	r6, [sp, #32]
 8020084:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020088:	eb06 0c00 	add.w	ip, r6, r0
 802008c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020090:	eb05 070e 	add.w	r7, r5, lr
 8020094:	2b00      	cmp	r3, #0
 8020096:	d064      	beq.n	8020162 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8020098:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802009c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80200a0:	442e      	add	r6, r5
 80200a2:	2900      	cmp	r1, #0
 80200a4:	d066      	beq.n	8020174 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80200a6:	eb0c 0002 	add.w	r0, ip, r2
 80200aa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80200ae:	7840      	ldrb	r0, [r0, #1]
 80200b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80200b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80200b8:	442a      	add	r2, r5
 80200ba:	4428      	add	r0, r5
 80200bc:	b29b      	uxth	r3, r3
 80200be:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80200c2:	b289      	uxth	r1, r1
 80200c4:	f896 e000 	ldrb.w	lr, [r6]
 80200c8:	f108 0803 	add.w	r8, r8, #3
 80200cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80200d0:	fb03 f901 	mul.w	r9, r3, r1
 80200d4:	011b      	lsls	r3, r3, #4
 80200d6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80200da:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80200de:	eba3 0309 	sub.w	r3, r3, r9
 80200e2:	b289      	uxth	r1, r1
 80200e4:	b29b      	uxth	r3, r3
 80200e6:	ebac 0c01 	sub.w	ip, ip, r1
 80200ea:	fb03 fe0e 	mul.w	lr, r3, lr
 80200ee:	fa1f fc8c 	uxth.w	ip, ip
 80200f2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80200f6:	f892 b000 	ldrb.w	fp, [r2]
 80200fa:	fb01 ee0b 	mla	lr, r1, fp, lr
 80200fe:	f890 b000 	ldrb.w	fp, [r0]
 8020102:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020106:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802010a:	f808 ec06 	strb.w	lr, [r8, #-6]
 802010e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020112:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020116:	fb03 fe0e 	mul.w	lr, r3, lr
 802011a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802011e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020122:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020126:	f890 b001 	ldrb.w	fp, [r0, #1]
 802012a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802012e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020132:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020136:	78b6      	ldrb	r6, [r6, #2]
 8020138:	78bf      	ldrb	r7, [r7, #2]
 802013a:	4373      	muls	r3, r6
 802013c:	7896      	ldrb	r6, [r2, #2]
 802013e:	7882      	ldrb	r2, [r0, #2]
 8020140:	fb0c 3307 	mla	r3, ip, r7, r3
 8020144:	fb01 3306 	mla	r3, r1, r6, r3
 8020148:	fb09 3902 	mla	r9, r9, r2, r3
 802014c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802014e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020150:	441c      	add	r4, r3
 8020152:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020154:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020158:	4413      	add	r3, r2
 802015a:	f808 9c04 	strb.w	r9, [r8, #-4]
 802015e:	9322      	str	r3, [sp, #136]	; 0x88
 8020160:	e70d      	b.n	801ff7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020162:	b151      	cbz	r1, 802017a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8020164:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020168:	4638      	mov	r0, r7
 802016a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802016e:	442a      	add	r2, r5
 8020170:	463e      	mov	r6, r7
 8020172:	e7a3      	b.n	80200bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020174:	4638      	mov	r0, r7
 8020176:	463a      	mov	r2, r7
 8020178:	e7a0      	b.n	80200bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802017a:	4638      	mov	r0, r7
 802017c:	463a      	mov	r2, r7
 802017e:	e7f7      	b.n	8020170 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020180:	b00d      	add	sp, #52	; 0x34
 8020182:	ecbd 8b0a 	vpop	{d8-d12}
 8020186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802018c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 802018c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020190:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8020194:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020198:	2d00      	cmp	r5, #0
 802019a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802019e:	fb05 040e 	mla	r4, r5, lr, r0
 80201a2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80201a6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80201aa:	eb02 0804 	add.w	r8, r2, r4
 80201ae:	db40      	blt.n	8020232 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80201b0:	45a9      	cmp	r9, r5
 80201b2:	dd3e      	ble.n	8020232 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80201b4:	2800      	cmp	r0, #0
 80201b6:	db3a      	blt.n	802022e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80201b8:	4586      	cmp	lr, r0
 80201ba:	dd38      	ble.n	802022e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80201bc:	5d12      	ldrb	r2, [r2, r4]
 80201be:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80201c2:	1c42      	adds	r2, r0, #1
 80201c4:	d438      	bmi.n	8020238 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80201c6:	4596      	cmp	lr, r2
 80201c8:	dd36      	ble.n	8020238 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80201ca:	b3bf      	cbz	r7, 802023c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 80201cc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80201d0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80201d4:	3501      	adds	r5, #1
 80201d6:	d435      	bmi.n	8020244 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80201d8:	45a9      	cmp	r9, r5
 80201da:	dd33      	ble.n	8020244 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80201dc:	f1bc 0f00 	cmp.w	ip, #0
 80201e0:	d033      	beq.n	802024a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 80201e2:	2800      	cmp	r0, #0
 80201e4:	db2c      	blt.n	8020240 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80201e6:	4586      	cmp	lr, r0
 80201e8:	dd2a      	ble.n	8020240 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80201ea:	f818 200e 	ldrb.w	r2, [r8, lr]
 80201ee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80201f2:	3001      	adds	r0, #1
 80201f4:	d42c      	bmi.n	8020250 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80201f6:	4586      	cmp	lr, r0
 80201f8:	dd2a      	ble.n	8020250 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80201fa:	b35f      	cbz	r7, 8020254 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 80201fc:	44c6      	add	lr, r8
 80201fe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020206:	2f0f      	cmp	r7, #15
 8020208:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802020c:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8020210:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020214:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020218:	d802      	bhi.n	8020220 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 802021a:	f1bc 0f0f 	cmp.w	ip, #15
 802021e:	d91b      	bls.n	8020258 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8020220:	4b77      	ldr	r3, [pc, #476]	; (8020400 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8020222:	f240 1157 	movw	r1, #343	; 0x157
 8020226:	4a77      	ldr	r2, [pc, #476]	; (8020404 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8020228:	4877      	ldr	r0, [pc, #476]	; (8020408 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 802022a:	f005 fe49 	bl	8025ec0 <__assert_func>
 802022e:	2600      	movs	r6, #0
 8020230:	e7c7      	b.n	80201c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8020232:	2400      	movs	r4, #0
 8020234:	4626      	mov	r6, r4
 8020236:	e7cd      	b.n	80201d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020238:	2400      	movs	r4, #0
 802023a:	e7cb      	b.n	80201d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 802023c:	463c      	mov	r4, r7
 802023e:	e7c9      	b.n	80201d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020240:	2500      	movs	r5, #0
 8020242:	e7d6      	b.n	80201f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8020244:	2200      	movs	r2, #0
 8020246:	4615      	mov	r5, r2
 8020248:	e7dd      	b.n	8020206 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 802024a:	4662      	mov	r2, ip
 802024c:	4665      	mov	r5, ip
 802024e:	e7da      	b.n	8020206 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020250:	2200      	movs	r2, #0
 8020252:	e7d8      	b.n	8020206 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020254:	463a      	mov	r2, r7
 8020256:	e7d6      	b.n	8020206 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020258:	b2bf      	uxth	r7, r7
 802025a:	fa1f f08c 	uxth.w	r0, ip
 802025e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8020262:	fb00 fe07 	mul.w	lr, r0, r7
 8020266:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802026a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802026e:	ebac 070e 	sub.w	r7, ip, lr
 8020272:	b280      	uxth	r0, r0
 8020274:	b2bf      	uxth	r7, r7
 8020276:	1a1b      	subs	r3, r3, r0
 8020278:	fb07 fc0a 	mul.w	ip, r7, sl
 802027c:	b29b      	uxth	r3, r3
 802027e:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020282:	9300      	str	r3, [sp, #0]
 8020284:	fb00 cc09 	mla	ip, r0, r9, ip
 8020288:	fb0e cc08 	mla	ip, lr, r8, ip
 802028c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020290:	9301      	str	r3, [sp, #4]
 8020292:	2b00      	cmp	r3, #0
 8020294:	f000 80b0 	beq.w	80203f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8020298:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802029c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80202a0:	fb0b fc0c 	mul.w	ip, fp, ip
 80202a4:	fb0b f606 	mul.w	r6, fp, r6
 80202a8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80202ac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80202b0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80202b4:	44dc      	add	ip, fp
 80202b6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80202ba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80202be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202c2:	fb0a fb0b 	mul.w	fp, sl, fp
 80202c6:	fb0a fa04 	mul.w	sl, sl, r4
 80202ca:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80202ce:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80202d2:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 80202d6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80202da:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80202de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80202e2:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 80202e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80202ea:	0a36      	lsrs	r6, r6, #8
 80202ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80202f0:	44dc      	add	ip, fp
 80202f2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80202f6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80202fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80202fe:	fb09 fb0b 	mul.w	fp, r9, fp
 8020302:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020306:	fb09 f905 	mul.w	r9, r9, r5
 802030a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802030e:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8020312:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020316:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802031a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802031e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020322:	fb0c fc07 	mul.w	ip, ip, r7
 8020326:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802032a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802032e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020332:	445c      	add	r4, fp
 8020334:	fb08 f505 	mul.w	r5, r8, r5
 8020338:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802033c:	fb08 f802 	mul.w	r8, r8, r2
 8020340:	0a24      	lsrs	r4, r4, #8
 8020342:	0a2a      	lsrs	r2, r5, #8
 8020344:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020348:	fb07 f70a 	mul.w	r7, r7, sl
 802034c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020350:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020354:	4415      	add	r5, r2
 8020356:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802035a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802035e:	9a00      	ldr	r2, [sp, #0]
 8020360:	0a2d      	lsrs	r5, r5, #8
 8020362:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020366:	fb03 cc02 	mla	ip, r3, r2, ip
 802036a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802036e:	fb02 7306 	mla	r3, r2, r6, r7
 8020372:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020376:	9a01      	ldr	r2, [sp, #4]
 8020378:	fb05 c50e 	mla	r5, r5, lr, ip
 802037c:	fb0e 3e08 	mla	lr, lr, r8, r3
 8020380:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8020384:	fb04 5400 	mla	r4, r4, r0, r5
 8020388:	fb00 e303 	mla	r3, r0, r3, lr
 802038c:	0a24      	lsrs	r4, r4, #8
 802038e:	0a1b      	lsrs	r3, r3, #8
 8020390:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020394:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020398:	431c      	orrs	r4, r3
 802039a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 802039e:	b29b      	uxth	r3, r3
 80203a0:	b2e0      	uxtb	r0, r4
 80203a2:	435a      	muls	r2, r3
 80203a4:	fb10 f003 	smulbb	r0, r0, r3
 80203a8:	1c55      	adds	r5, r2, #1
 80203aa:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 80203ae:	780a      	ldrb	r2, [r1, #0]
 80203b0:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 80203b4:	b2ed      	uxtb	r5, r5
 80203b6:	fb02 0205 	mla	r2, r2, r5, r0
 80203ba:	b292      	uxth	r2, r2
 80203bc:	1c50      	adds	r0, r2, #1
 80203be:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80203c2:	7848      	ldrb	r0, [r1, #1]
 80203c4:	fb10 f005 	smulbb	r0, r0, r5
 80203c8:	1212      	asrs	r2, r2, #8
 80203ca:	700a      	strb	r2, [r1, #0]
 80203cc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80203d0:	0c24      	lsrs	r4, r4, #16
 80203d2:	fb02 0203 	mla	r2, r2, r3, r0
 80203d6:	b292      	uxth	r2, r2
 80203d8:	1c50      	adds	r0, r2, #1
 80203da:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80203de:	1212      	asrs	r2, r2, #8
 80203e0:	704a      	strb	r2, [r1, #1]
 80203e2:	788a      	ldrb	r2, [r1, #2]
 80203e4:	fb12 f505 	smulbb	r5, r2, r5
 80203e8:	fb04 5303 	mla	r3, r4, r3, r5
 80203ec:	b29b      	uxth	r3, r3
 80203ee:	1c5a      	adds	r2, r3, #1
 80203f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80203f4:	121b      	asrs	r3, r3, #8
 80203f6:	708b      	strb	r3, [r1, #2]
 80203f8:	b003      	add	sp, #12
 80203fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203fe:	bf00      	nop
 8020400:	0802df2f 	.word	0x0802df2f
 8020404:	0802e497 	.word	0x0802e497
 8020408:	0802dff8 	.word	0x0802dff8

0802040c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020410:	ed2d 8b08 	vpush	{d8-d11}
 8020414:	b09f      	sub	sp, #124	; 0x7c
 8020416:	eeb0 aa40 	vmov.f32	s20, s0
 802041a:	eef0 9a60 	vmov.f32	s19, s1
 802041e:	921b      	str	r2, [sp, #108]	; 0x6c
 8020420:	eeb0 9a41 	vmov.f32	s18, s2
 8020424:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020426:	eeb0 8a62 	vmov.f32	s16, s5
 802042a:	9309      	str	r3, [sp, #36]	; 0x24
 802042c:	eef0 8a43 	vmov.f32	s17, s6
 8020430:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8020434:	eef0 ba44 	vmov.f32	s23, s8
 8020438:	901d      	str	r0, [sp, #116]	; 0x74
 802043a:	eeb0 ba64 	vmov.f32	s22, s9
 802043e:	931c      	str	r3, [sp, #112]	; 0x70
 8020440:	eef0 aa45 	vmov.f32	s21, s10
 8020444:	6850      	ldr	r0, [r2, #4]
 8020446:	9119      	str	r1, [sp, #100]	; 0x64
 8020448:	6812      	ldr	r2, [r2, #0]
 802044a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 802044c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020450:	fb00 1303 	mla	r3, r0, r3, r1
 8020454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020458:	18d3      	adds	r3, r2, r3
 802045a:	930c      	str	r3, [sp, #48]	; 0x30
 802045c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802045e:	681b      	ldr	r3, [r3, #0]
 8020460:	9312      	str	r3, [sp, #72]	; 0x48
 8020462:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020464:	685e      	ldr	r6, [r3, #4]
 8020466:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802046a:	3604      	adds	r6, #4
 802046c:	930d      	str	r3, [sp, #52]	; 0x34
 802046e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020470:	2b00      	cmp	r3, #0
 8020472:	dc03      	bgt.n	802047c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020476:	2b00      	cmp	r3, #0
 8020478:	f340 8378 	ble.w	8020b6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 802047c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802047e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020482:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020486:	1e48      	subs	r0, r1, #1
 8020488:	1e57      	subs	r7, r2, #1
 802048a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802048c:	2b00      	cmp	r3, #0
 802048e:	f340 818c 	ble.w	80207aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8020492:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020494:	142b      	asrs	r3, r5, #16
 8020496:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802049a:	d406      	bmi.n	80204aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802049c:	4584      	cmp	ip, r0
 802049e:	da04      	bge.n	80204aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	db02      	blt.n	80204aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80204a4:	42bb      	cmp	r3, r7
 80204a6:	f2c0 8181 	blt.w	80207ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 80204aa:	f11c 0c01 	adds.w	ip, ip, #1
 80204ae:	f100 816f 	bmi.w	8020790 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80204b2:	4561      	cmp	r1, ip
 80204b4:	f2c0 816c 	blt.w	8020790 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80204b8:	3301      	adds	r3, #1
 80204ba:	f100 8169 	bmi.w	8020790 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80204be:	429a      	cmp	r2, r3
 80204c0:	f2c0 8166 	blt.w	8020790 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80204c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80204c8:	931a      	str	r3, [sp, #104]	; 0x68
 80204ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80204cc:	2b00      	cmp	r3, #0
 80204ce:	f340 818c 	ble.w	80207ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80204d2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80204d4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80204d8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80204dc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80204e0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80204e2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80204e6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80204e8:	141b      	asrs	r3, r3, #16
 80204ea:	f100 81d0 	bmi.w	802088e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80204ee:	f100 38ff 	add.w	r8, r0, #4294967295
 80204f2:	4543      	cmp	r3, r8
 80204f4:	f280 81cb 	bge.w	802088e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80204f8:	f1bc 0f00 	cmp.w	ip, #0
 80204fc:	f2c0 81c7 	blt.w	802088e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8020500:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020504:	45c4      	cmp	ip, r8
 8020506:	f280 81c2 	bge.w	802088e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802050a:	b200      	sxth	r0, r0
 802050c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802050e:	fb0c 3300 	mla	r3, ip, r0, r3
 8020512:	eb04 0803 	add.w	r8, r4, r3
 8020516:	5ce3      	ldrb	r3, [r4, r3]
 8020518:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802051c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020520:	2a00      	cmp	r2, #0
 8020522:	f000 81a9 	beq.w	8020878 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8020526:	f898 c001 	ldrb.w	ip, [r8, #1]
 802052a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802052e:	940e      	str	r4, [sp, #56]	; 0x38
 8020530:	0e24      	lsrs	r4, r4, #24
 8020532:	9415      	str	r4, [sp, #84]	; 0x54
 8020534:	b179      	cbz	r1, 8020556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020536:	eb08 0c00 	add.w	ip, r8, r0
 802053a:	f818 0000 	ldrb.w	r0, [r8, r0]
 802053e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020542:	900a      	str	r0, [sp, #40]	; 0x28
 8020544:	0e00      	lsrs	r0, r0, #24
 8020546:	9013      	str	r0, [sp, #76]	; 0x4c
 8020548:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802054c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020550:	900f      	str	r0, [sp, #60]	; 0x3c
 8020552:	0e00      	lsrs	r0, r0, #24
 8020554:	9016      	str	r0, [sp, #88]	; 0x58
 8020556:	b292      	uxth	r2, r2
 8020558:	9815      	ldr	r0, [sp, #84]	; 0x54
 802055a:	b289      	uxth	r1, r1
 802055c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802055e:	fb02 f901 	mul.w	r9, r2, r1
 8020562:	0112      	lsls	r2, r2, #4
 8020564:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020568:	eba2 0809 	sub.w	r8, r2, r9
 802056c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020570:	b289      	uxth	r1, r1
 8020572:	fa1f f888 	uxth.w	r8, r8
 8020576:	1a52      	subs	r2, r2, r1
 8020578:	fb08 f000 	mul.w	r0, r8, r0
 802057c:	b292      	uxth	r2, r2
 802057e:	fb02 000e 	mla	r0, r2, lr, r0
 8020582:	fb01 0004 	mla	r0, r1, r4, r0
 8020586:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020588:	fb09 0004 	mla	r0, r9, r4, r0
 802058c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020590:	2800      	cmp	r0, #0
 8020592:	f000 80f2 	beq.w	802077a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020596:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802059a:	d01b      	beq.n	80205d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802059c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80205a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80205a4:	fb0e fa0a 	mul.w	sl, lr, sl
 80205a8:	fb0e fe03 	mul.w	lr, lr, r3
 80205ac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80205b0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80205b4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80205b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80205bc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80205c0:	4453      	add	r3, sl
 80205c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205c6:	0a1b      	lsrs	r3, r3, #8
 80205c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80205cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80205d0:	ea43 030c 	orr.w	r3, r3, ip
 80205d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80205d6:	2cff      	cmp	r4, #255	; 0xff
 80205d8:	d021      	beq.n	802061e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80205da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80205dc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80205e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80205e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80205e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80205e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80205ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80205ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80205f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80205f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80205fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020602:	44de      	add	lr, fp
 8020604:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020608:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802060c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020610:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020614:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020618:	ea4e 040a 	orr.w	r4, lr, sl
 802061c:	940e      	str	r4, [sp, #56]	; 0x38
 802061e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020620:	2cff      	cmp	r4, #255	; 0xff
 8020622:	d021      	beq.n	8020668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8020624:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020626:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802062a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802062c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020630:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020632:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020636:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020638:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802063c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020640:	fb04 fa0a 	mul.w	sl, r4, sl
 8020644:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020648:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802064c:	44de      	add	lr, fp
 802064e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020652:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020656:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802065a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802065e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020662:	ea4e 040a 	orr.w	r4, lr, sl
 8020666:	940a      	str	r4, [sp, #40]	; 0x28
 8020668:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802066a:	2cff      	cmp	r4, #255	; 0xff
 802066c:	d021      	beq.n	80206b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802066e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020670:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020674:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020676:	fb04 fb0b 	mul.w	fp, r4, fp
 802067a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802067c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020680:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020682:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020686:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802068a:	fb04 fa0a 	mul.w	sl, r4, sl
 802068e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020692:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020696:	44de      	add	lr, fp
 8020698:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802069c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80206ac:	ea4e 040a 	orr.w	r4, lr, sl
 80206b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80206b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80206b4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80206b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80206c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80206c2:	fb08 fc0c 	mul.w	ip, r8, ip
 80206c6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80206ca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80206ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80206d0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80206d4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80206d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80206da:	fb09 cc0e 	mla	ip, r9, lr, ip
 80206de:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80206e2:	fb08 f80e 	mul.w	r8, r8, lr
 80206e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206ea:	fb02 8303 	mla	r3, r2, r3, r8
 80206ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80206f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206f4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80206f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80206fa:	fb01 330a 	mla	r3, r1, sl, r3
 80206fe:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8020702:	fb09 3901 	mla	r9, r9, r1, r3
 8020706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020708:	990d      	ldr	r1, [sp, #52]	; 0x34
 802070a:	4343      	muls	r3, r0
 802070c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020710:	1c58      	adds	r0, r3, #1
 8020712:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020716:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802071a:	ea4c 0c09 	orr.w	ip, ip, r9
 802071e:	783b      	ldrb	r3, [r7, #0]
 8020720:	fa5f f28c 	uxtb.w	r2, ip
 8020724:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020728:	fb12 f201 	smulbb	r2, r2, r1
 802072c:	b2c0      	uxtb	r0, r0
 802072e:	fb03 2300 	mla	r3, r3, r0, r2
 8020732:	b29b      	uxth	r3, r3
 8020734:	1c5a      	adds	r2, r3, #1
 8020736:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802073a:	787a      	ldrb	r2, [r7, #1]
 802073c:	fb12 f200 	smulbb	r2, r2, r0
 8020740:	121b      	asrs	r3, r3, #8
 8020742:	703b      	strb	r3, [r7, #0]
 8020744:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020748:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802074c:	fb03 2301 	mla	r3, r3, r1, r2
 8020750:	b29b      	uxth	r3, r3
 8020752:	1c5a      	adds	r2, r3, #1
 8020754:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020758:	121b      	asrs	r3, r3, #8
 802075a:	707b      	strb	r3, [r7, #1]
 802075c:	78bb      	ldrb	r3, [r7, #2]
 802075e:	fb13 f000 	smulbb	r0, r3, r0
 8020762:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020766:	fa1f fc8c 	uxth.w	ip, ip
 802076a:	f10c 0301 	add.w	r3, ip, #1
 802076e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020772:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020776:	f887 c002 	strb.w	ip, [r7, #2]
 802077a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802077c:	3703      	adds	r7, #3
 802077e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020780:	441a      	add	r2, r3
 8020782:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020784:	441d      	add	r5, r3
 8020786:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020788:	9231      	str	r2, [sp, #196]	; 0xc4
 802078a:	3b01      	subs	r3, #1
 802078c:	931a      	str	r3, [sp, #104]	; 0x68
 802078e:	e69c      	b.n	80204ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8020790:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020792:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020794:	441c      	add	r4, r3
 8020796:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020798:	441d      	add	r5, r3
 802079a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802079c:	9431      	str	r4, [sp, #196]	; 0xc4
 802079e:	3b01      	subs	r3, #1
 80207a0:	9309      	str	r3, [sp, #36]	; 0x24
 80207a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207a4:	3303      	adds	r3, #3
 80207a6:	930c      	str	r3, [sp, #48]	; 0x30
 80207a8:	e66f      	b.n	802048a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80207aa:	d026      	beq.n	80207fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80207ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207ae:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80207b0:	3b01      	subs	r3, #1
 80207b2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80207b4:	fb00 4003 	mla	r0, r0, r3, r4
 80207b8:	1400      	asrs	r0, r0, #16
 80207ba:	f53f ae83 	bmi.w	80204c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80207be:	3901      	subs	r1, #1
 80207c0:	4288      	cmp	r0, r1
 80207c2:	f6bf ae7f 	bge.w	80204c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80207c6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80207c8:	fb01 5303 	mla	r3, r1, r3, r5
 80207cc:	141b      	asrs	r3, r3, #16
 80207ce:	f53f ae79 	bmi.w	80204c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80207d2:	3a01      	subs	r2, #1
 80207d4:	4293      	cmp	r3, r2
 80207d6:	f6bf ae75 	bge.w	80204c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80207da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80207e0:	f103 0e03 	add.w	lr, r3, #3
 80207e4:	f1bb 0f00 	cmp.w	fp, #0
 80207e8:	dc71      	bgt.n	80208ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80207ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207ec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80207f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80207f6:	4423      	add	r3, r4
 80207f8:	930c      	str	r3, [sp, #48]	; 0x30
 80207fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	f340 81b5 	ble.w	8020b6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8020802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020806:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020808:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802080c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020810:	eef0 6a48 	vmov.f32	s13, s16
 8020814:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020818:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802081c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020820:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8020824:	eef0 6a68 	vmov.f32	s13, s17
 8020828:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802082c:	ee16 5a90 	vmov	r5, s13
 8020830:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020834:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020838:	ee37 8a48 	vsub.f32	s16, s14, s16
 802083c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020840:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020844:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020848:	ee18 2a10 	vmov	r2, s16
 802084c:	eeb0 8a47 	vmov.f32	s16, s14
 8020850:	fb92 f3f3 	sdiv	r3, r2, r3
 8020854:	ee18 2a90 	vmov	r2, s17
 8020858:	9333      	str	r3, [sp, #204]	; 0xcc
 802085a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802085c:	eef0 8a67 	vmov.f32	s17, s15
 8020860:	fb92 f3f3 	sdiv	r3, r2, r3
 8020864:	9334      	str	r3, [sp, #208]	; 0xd0
 8020866:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020868:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802086a:	3b01      	subs	r3, #1
 802086c:	9319      	str	r3, [sp, #100]	; 0x64
 802086e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020870:	bf08      	it	eq
 8020872:	4613      	moveq	r3, r2
 8020874:	9309      	str	r3, [sp, #36]	; 0x24
 8020876:	e5fa      	b.n	802046e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020878:	2900      	cmp	r1, #0
 802087a:	f43f ae6c 	beq.w	8020556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802087e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020882:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020886:	900a      	str	r0, [sp, #40]	; 0x28
 8020888:	0e00      	lsrs	r0, r0, #24
 802088a:	9013      	str	r0, [sp, #76]	; 0x4c
 802088c:	e663      	b.n	8020556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802088e:	f113 0801 	adds.w	r8, r3, #1
 8020892:	f53f af72 	bmi.w	802077a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020896:	4540      	cmp	r0, r8
 8020898:	f6ff af6f 	blt.w	802077a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802089c:	f11c 0801 	adds.w	r8, ip, #1
 80208a0:	f53f af6b 	bmi.w	802077a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80208a4:	45c6      	cmp	lr, r8
 80208a6:	f6ff af68 	blt.w	802077a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80208aa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80208ac:	b200      	sxth	r0, r0
 80208ae:	9302      	str	r3, [sp, #8]
 80208b0:	fa0f f38e 	sxth.w	r3, lr
 80208b4:	9000      	str	r0, [sp, #0]
 80208b6:	9301      	str	r3, [sp, #4]
 80208b8:	4633      	mov	r3, r6
 80208ba:	981d      	ldr	r0, [sp, #116]	; 0x74
 80208bc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80208c0:	e9cd c203 	strd	ip, r2, [sp, #12]
 80208c4:	4639      	mov	r1, r7
 80208c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80208c8:	f7ff fc60 	bl	802018c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80208cc:	e755      	b.n	802077a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80208ce:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80208d0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80208d4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80208d6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80208da:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80208dc:	1427      	asrs	r7, r4, #16
 80208de:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80208e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80208e4:	142b      	asrs	r3, r5, #16
 80208e6:	fb01 7303 	mla	r3, r1, r3, r7
 80208ea:	18e7      	adds	r7, r4, r3
 80208ec:	5ce3      	ldrb	r3, [r4, r3]
 80208ee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80208f2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80208f6:	2a00      	cmp	r2, #0
 80208f8:	f000 812e 	beq.w	8020b58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 80208fc:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020900:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020904:	9410      	str	r4, [sp, #64]	; 0x40
 8020906:	0e24      	lsrs	r4, r4, #24
 8020908:	9417      	str	r4, [sp, #92]	; 0x5c
 802090a:	b170      	cbz	r0, 802092a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802090c:	eb07 0801 	add.w	r8, r7, r1
 8020910:	5c79      	ldrb	r1, [r7, r1]
 8020912:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020916:	910b      	str	r1, [sp, #44]	; 0x2c
 8020918:	0e09      	lsrs	r1, r1, #24
 802091a:	9114      	str	r1, [sp, #80]	; 0x50
 802091c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020920:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020924:	9111      	str	r1, [sp, #68]	; 0x44
 8020926:	0e09      	lsrs	r1, r1, #24
 8020928:	9118      	str	r1, [sp, #96]	; 0x60
 802092a:	b292      	uxth	r2, r2
 802092c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802092e:	b280      	uxth	r0, r0
 8020930:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020932:	fb02 f900 	mul.w	r9, r2, r0
 8020936:	0112      	lsls	r2, r2, #4
 8020938:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802093c:	eba2 0809 	sub.w	r8, r2, r9
 8020940:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020944:	b280      	uxth	r0, r0
 8020946:	fa1f f888 	uxth.w	r8, r8
 802094a:	1a12      	subs	r2, r2, r0
 802094c:	fb08 f101 	mul.w	r1, r8, r1
 8020950:	b292      	uxth	r2, r2
 8020952:	fb02 110c 	mla	r1, r2, ip, r1
 8020956:	fb00 1104 	mla	r1, r0, r4, r1
 802095a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802095c:	fb09 1104 	mla	r1, r9, r4, r1
 8020960:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020964:	2900      	cmp	r1, #0
 8020966:	f000 80ec 	beq.w	8020b42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802096a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802096e:	d019      	beq.n	80209a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8020970:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020974:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020978:	fb0c fa0a 	mul.w	sl, ip, sl
 802097c:	fb0c fc03 	mul.w	ip, ip, r3
 8020980:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020984:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020988:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802098c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020990:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020994:	4453      	add	r3, sl
 8020996:	0a3f      	lsrs	r7, r7, #8
 8020998:	0a1b      	lsrs	r3, r3, #8
 802099a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802099e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80209a2:	433b      	orrs	r3, r7
 80209a4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80209a6:	2cff      	cmp	r4, #255	; 0xff
 80209a8:	d020      	beq.n	80209ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80209aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209ac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80209b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80209b2:	4367      	muls	r7, r4
 80209b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209b6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80209ba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80209c0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80209c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80209c8:	fb04 fa0a 	mul.w	sl, r4, sl
 80209cc:	44bc      	add	ip, r7
 80209ce:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80209d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80209da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80209de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209e6:	ea4c 040a 	orr.w	r4, ip, sl
 80209ea:	9410      	str	r4, [sp, #64]	; 0x40
 80209ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209ee:	2cff      	cmp	r4, #255	; 0xff
 80209f0:	d020      	beq.n	8020a34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80209f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80209f4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80209f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209fa:	4367      	muls	r7, r4
 80209fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80209fe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020a08:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020a0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a10:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a14:	44bc      	add	ip, r7
 8020a16:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020a1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a1e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a2e:	ea4c 040a 	orr.w	r4, ip, sl
 8020a32:	940b      	str	r4, [sp, #44]	; 0x2c
 8020a34:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020a36:	2cff      	cmp	r4, #255	; 0xff
 8020a38:	d020      	beq.n	8020a7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8020a3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a3c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020a40:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020a42:	4367      	muls	r7, r4
 8020a44:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a46:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a4a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a4e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020a50:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020a54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a58:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a5c:	44bc      	add	ip, r7
 8020a5e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020a62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a66:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a76:	ea4c 040a 	orr.w	r4, ip, sl
 8020a7a:	9411      	str	r4, [sp, #68]	; 0x44
 8020a7c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a7e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020a82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a86:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020a8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a8c:	fb08 f707 	mul.w	r7, r8, r7
 8020a90:	fb02 770c 	mla	r7, r2, ip, r7
 8020a94:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020a98:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a9a:	fb00 770c 	mla	r7, r0, ip, r7
 8020a9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020aa2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020aa4:	fb09 770c 	mla	r7, r9, ip, r7
 8020aa8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020aac:	fb08 f80c 	mul.w	r8, r8, ip
 8020ab0:	0a3f      	lsrs	r7, r7, #8
 8020ab2:	fb02 8303 	mla	r3, r2, r3, r8
 8020ab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020ab8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020abc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ac2:	fb00 330a 	mla	r3, r0, sl, r3
 8020ac6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020aca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020acc:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ad2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ad6:	434b      	muls	r3, r1
 8020ad8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020adc:	1c59      	adds	r1, r3, #1
 8020ade:	ea47 070c 	orr.w	r7, r7, ip
 8020ae2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020ae6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020aea:	b2fa      	uxtb	r2, r7
 8020aec:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020af0:	fb12 f200 	smulbb	r2, r2, r0
 8020af4:	b2c9      	uxtb	r1, r1
 8020af6:	fb03 2301 	mla	r3, r3, r1, r2
 8020afa:	b29b      	uxth	r3, r3
 8020afc:	1c5a      	adds	r2, r3, #1
 8020afe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b02:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020b06:	fb12 f201 	smulbb	r2, r2, r1
 8020b0a:	121b      	asrs	r3, r3, #8
 8020b0c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020b10:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020b14:	0c3f      	lsrs	r7, r7, #16
 8020b16:	fb03 2300 	mla	r3, r3, r0, r2
 8020b1a:	b29b      	uxth	r3, r3
 8020b1c:	1c5a      	adds	r2, r3, #1
 8020b1e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b22:	121b      	asrs	r3, r3, #8
 8020b24:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020b28:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020b2c:	fb13 f101 	smulbb	r1, r3, r1
 8020b30:	fb07 1700 	mla	r7, r7, r0, r1
 8020b34:	b2bf      	uxth	r7, r7
 8020b36:	1c7b      	adds	r3, r7, #1
 8020b38:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020b3c:	123f      	asrs	r7, r7, #8
 8020b3e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020b42:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020b44:	f10e 0e03 	add.w	lr, lr, #3
 8020b48:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020b4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020b4e:	441a      	add	r2, r3
 8020b50:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020b52:	9231      	str	r2, [sp, #196]	; 0xc4
 8020b54:	441d      	add	r5, r3
 8020b56:	e645      	b.n	80207e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8020b58:	2800      	cmp	r0, #0
 8020b5a:	f43f aee6 	beq.w	802092a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020b5e:	5c79      	ldrb	r1, [r7, r1]
 8020b60:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020b64:	910b      	str	r1, [sp, #44]	; 0x2c
 8020b66:	0e09      	lsrs	r1, r1, #24
 8020b68:	9114      	str	r1, [sp, #80]	; 0x50
 8020b6a:	e6de      	b.n	802092a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020b6c:	b01f      	add	sp, #124	; 0x7c
 8020b6e:	ecbd 8b08 	vpop	{d8-d11}
 8020b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020b78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b7c:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 8020b80:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020b84:	2c00      	cmp	r4, #0
 8020b86:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020b8a:	fb04 060c 	mla	r6, r4, ip, r0
 8020b8e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8020b92:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8020b96:	eb02 0e06 	add.w	lr, r2, r6
 8020b9a:	db3d      	blt.n	8020c18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8020b9c:	45a0      	cmp	r8, r4
 8020b9e:	dd3b      	ble.n	8020c18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8020ba0:	2800      	cmp	r0, #0
 8020ba2:	db37      	blt.n	8020c14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020ba4:	4584      	cmp	ip, r0
 8020ba6:	dd35      	ble.n	8020c14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020ba8:	5d92      	ldrb	r2, [r2, r6]
 8020baa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020bae:	1c46      	adds	r6, r0, #1
 8020bb0:	d435      	bmi.n	8020c1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8020bb2:	45b4      	cmp	ip, r6
 8020bb4:	dd33      	ble.n	8020c1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8020bb6:	b3a5      	cbz	r5, 8020c22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8020bb8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8020bbc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8020bc0:	3401      	adds	r4, #1
 8020bc2:	d432      	bmi.n	8020c2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020bc4:	45a0      	cmp	r8, r4
 8020bc6:	dd30      	ble.n	8020c2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020bc8:	b397      	cbz	r7, 8020c30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8020bca:	2800      	cmp	r0, #0
 8020bcc:	db2b      	blt.n	8020c26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8020bce:	4584      	cmp	ip, r0
 8020bd0:	dd29      	ble.n	8020c26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8020bd2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020bd6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8020bda:	3001      	adds	r0, #1
 8020bdc:	d42b      	bmi.n	8020c36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8020bde:	4584      	cmp	ip, r0
 8020be0:	dd29      	ble.n	8020c36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8020be2:	b355      	cbz	r5, 8020c3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8020be4:	44f4      	add	ip, lr
 8020be6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020bea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8020bee:	2d0f      	cmp	r5, #15
 8020bf0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020bf4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020bf8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020bfc:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020c00:	d801      	bhi.n	8020c06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8020c02:	2f0f      	cmp	r7, #15
 8020c04:	d91b      	bls.n	8020c3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8020c06:	4b7f      	ldr	r3, [pc, #508]	; (8020e04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8020c08:	f240 1157 	movw	r1, #343	; 0x157
 8020c0c:	4a7e      	ldr	r2, [pc, #504]	; (8020e08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8020c0e:	487f      	ldr	r0, [pc, #508]	; (8020e0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8020c10:	f005 f956 	bl	8025ec0 <__assert_func>
 8020c14:	2200      	movs	r2, #0
 8020c16:	e7ca      	b.n	8020bae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8020c18:	2600      	movs	r6, #0
 8020c1a:	4632      	mov	r2, r6
 8020c1c:	e7d0      	b.n	8020bc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020c1e:	2600      	movs	r6, #0
 8020c20:	e7ce      	b.n	8020bc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020c22:	462e      	mov	r6, r5
 8020c24:	e7cc      	b.n	8020bc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020c26:	2400      	movs	r4, #0
 8020c28:	e7d7      	b.n	8020bda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8020c2a:	2300      	movs	r3, #0
 8020c2c:	461c      	mov	r4, r3
 8020c2e:	e7de      	b.n	8020bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020c30:	463b      	mov	r3, r7
 8020c32:	463c      	mov	r4, r7
 8020c34:	e7db      	b.n	8020bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020c36:	2300      	movs	r3, #0
 8020c38:	e7d9      	b.n	8020bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020c3a:	462b      	mov	r3, r5
 8020c3c:	e7d7      	b.n	8020bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020c3e:	b2a8      	uxth	r0, r5
 8020c40:	b2bf      	uxth	r7, r7
 8020c42:	fb07 fe00 	mul.w	lr, r7, r0
 8020c46:	0100      	lsls	r0, r0, #4
 8020c48:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020c4c:	eba0 0c0e 	sub.w	ip, r0, lr
 8020c50:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8020c54:	b2bf      	uxth	r7, r7
 8020c56:	fa1f fc8c 	uxth.w	ip, ip
 8020c5a:	1bc5      	subs	r5, r0, r7
 8020c5c:	fb0c f00a 	mul.w	r0, ip, sl
 8020c60:	b2ad      	uxth	r5, r5
 8020c62:	fb05 000b 	mla	r0, r5, fp, r0
 8020c66:	fb07 0009 	mla	r0, r7, r9, r0
 8020c6a:	fb0e 0008 	mla	r0, lr, r8, r0
 8020c6e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020c72:	9001      	str	r0, [sp, #4]
 8020c74:	2800      	cmp	r0, #0
 8020c76:	f000 80c2 	beq.w	8020dfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8020c7a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020c7e:	d018      	beq.n	8020cb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8020c80:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8020c84:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020c88:	fb0b f000 	mul.w	r0, fp, r0
 8020c8c:	fb0b fb02 	mul.w	fp, fp, r2
 8020c90:	0a02      	lsrs	r2, r0, #8
 8020c92:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020c96:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020c9a:	4402      	add	r2, r0
 8020c9c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8020ca0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020ca4:	0a12      	lsrs	r2, r2, #8
 8020ca6:	0a00      	lsrs	r0, r0, #8
 8020ca8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020cac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020cb0:	4302      	orrs	r2, r0
 8020cb2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020cb6:	d01a      	beq.n	8020cee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8020cb8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020cbc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020cc0:	fb0a f000 	mul.w	r0, sl, r0
 8020cc4:	fb0a fa06 	mul.w	sl, sl, r6
 8020cc8:	0a06      	lsrs	r6, r0, #8
 8020cca:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020cce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020cd2:	4406      	add	r6, r0
 8020cd4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020cd8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020cdc:	0a36      	lsrs	r6, r6, #8
 8020cde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ce2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020ce6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020cea:	ea46 060a 	orr.w	r6, r6, sl
 8020cee:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020cf2:	d01b      	beq.n	8020d2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8020cf4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020cf8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020cfc:	fb09 fa0a 	mul.w	sl, r9, sl
 8020d00:	fb09 f004 	mul.w	r0, r9, r4
 8020d04:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020d08:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020d0c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8020d10:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020d14:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020d18:	4454      	add	r4, sl
 8020d1a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020d1e:	0a24      	lsrs	r4, r4, #8
 8020d20:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020d24:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020d28:	ea44 0409 	orr.w	r4, r4, r9
 8020d2c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020d30:	d01b      	beq.n	8020d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8020d32:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8020d36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d3a:	fb08 f909 	mul.w	r9, r8, r9
 8020d3e:	fb08 f003 	mul.w	r0, r8, r3
 8020d42:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8020d46:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020d4a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8020d4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d52:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8020d56:	444b      	add	r3, r9
 8020d58:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020d5c:	0a1b      	lsrs	r3, r3, #8
 8020d5e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020d62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d66:	ea43 0308 	orr.w	r3, r3, r8
 8020d6a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020d6e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d72:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8020d76:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020d7a:	fb0c f000 	mul.w	r0, ip, r0
 8020d7e:	fb0c f606 	mul.w	r6, ip, r6
 8020d82:	fb05 0808 	mla	r8, r5, r8, r0
 8020d86:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8020d8a:	fb05 6502 	mla	r5, r5, r2, r6
 8020d8e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020d92:	fb07 8800 	mla	r8, r7, r0, r8
 8020d96:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8020d9a:	fb07 5704 	mla	r7, r7, r4, r5
 8020d9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020da2:	fb0e 8000 	mla	r0, lr, r0, r8
 8020da6:	780a      	ldrb	r2, [r1, #0]
 8020da8:	fb0e 7e03 	mla	lr, lr, r3, r7
 8020dac:	9b01      	ldr	r3, [sp, #4]
 8020dae:	0a00      	lsrs	r0, r0, #8
 8020db0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020db4:	43db      	mvns	r3, r3
 8020db6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020dba:	b2db      	uxtb	r3, r3
 8020dbc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020dc0:	ea40 0e0e 	orr.w	lr, r0, lr
 8020dc4:	fb02 f003 	mul.w	r0, r2, r3
 8020dc8:	1c42      	adds	r2, r0, #1
 8020dca:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020dce:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020dd2:	700a      	strb	r2, [r1, #0]
 8020dd4:	784a      	ldrb	r2, [r1, #1]
 8020dd6:	435a      	muls	r2, r3
 8020dd8:	1c50      	adds	r0, r2, #1
 8020dda:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020dde:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8020de2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020de6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020dea:	704a      	strb	r2, [r1, #1]
 8020dec:	788a      	ldrb	r2, [r1, #2]
 8020dee:	4353      	muls	r3, r2
 8020df0:	1c5a      	adds	r2, r3, #1
 8020df2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020df6:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8020dfa:	f881 e002 	strb.w	lr, [r1, #2]
 8020dfe:	b003      	add	sp, #12
 8020e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e04:	0802df2f 	.word	0x0802df2f
 8020e08:	0802e497 	.word	0x0802e497
 8020e0c:	0802dff8 	.word	0x0802dff8

08020e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e14:	ed2d 8b0a 	vpush	{d8-d12}
 8020e18:	b09b      	sub	sp, #108	; 0x6c
 8020e1a:	eeb0 aa40 	vmov.f32	s20, s0
 8020e1e:	eef0 9a60 	vmov.f32	s19, s1
 8020e22:	9218      	str	r2, [sp, #96]	; 0x60
 8020e24:	eeb0 9a41 	vmov.f32	s18, s2
 8020e28:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020e2a:	eeb0 8a62 	vmov.f32	s16, s5
 8020e2e:	9019      	str	r0, [sp, #100]	; 0x64
 8020e30:	eef0 8a43 	vmov.f32	s17, s6
 8020e34:	6850      	ldr	r0, [r2, #4]
 8020e36:	eeb0 ca44 	vmov.f32	s24, s8
 8020e3a:	9116      	str	r1, [sp, #88]	; 0x58
 8020e3c:	eef0 ba64 	vmov.f32	s23, s9
 8020e40:	9307      	str	r3, [sp, #28]
 8020e42:	eeb0 ba45 	vmov.f32	s22, s10
 8020e46:	6812      	ldr	r2, [r2, #0]
 8020e48:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020e4c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8020e4e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8020e52:	fb00 1303 	mla	r3, r0, r3, r1
 8020e56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e5a:	18d3      	adds	r3, r2, r3
 8020e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8020e5e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020e60:	681b      	ldr	r3, [r3, #0]
 8020e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8020e64:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020e66:	685e      	ldr	r6, [r3, #4]
 8020e68:	3604      	adds	r6, #4
 8020e6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020e6c:	2b00      	cmp	r3, #0
 8020e6e:	dc03      	bgt.n	8020e78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020e70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020e72:	2b00      	cmp	r3, #0
 8020e74:	f340 834f 	ble.w	8021516 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8020e78:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020e7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020e82:	1e48      	subs	r0, r1, #1
 8020e84:	1e57      	subs	r7, r2, #1
 8020e86:	9b07      	ldr	r3, [sp, #28]
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	f340 8178 	ble.w	802117e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e8e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8020e90:	142b      	asrs	r3, r5, #16
 8020e92:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020e96:	d406      	bmi.n	8020ea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020e98:	4584      	cmp	ip, r0
 8020e9a:	da04      	bge.n	8020ea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	db02      	blt.n	8020ea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020ea0:	42bb      	cmp	r3, r7
 8020ea2:	f2c0 816d 	blt.w	8021180 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020ea6:	f11c 0c01 	adds.w	ip, ip, #1
 8020eaa:	f100 815b 	bmi.w	8021164 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020eae:	4561      	cmp	r1, ip
 8020eb0:	f2c0 8158 	blt.w	8021164 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020eb4:	3301      	adds	r3, #1
 8020eb6:	f100 8155 	bmi.w	8021164 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020eba:	429a      	cmp	r2, r3
 8020ebc:	f2c0 8152 	blt.w	8021164 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020ec0:	9b07      	ldr	r3, [sp, #28]
 8020ec2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020ec4:	9317      	str	r3, [sp, #92]	; 0x5c
 8020ec6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020ec8:	2b00      	cmp	r3, #0
 8020eca:	f340 8178 	ble.w	80211be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020ece:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8020ed0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020ed4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020ed8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020edc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020ede:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020ee2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8020ee4:	141b      	asrs	r3, r3, #16
 8020ee6:	f100 81ba 	bmi.w	802125e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020eea:	f101 38ff 	add.w	r8, r1, #4294967295
 8020eee:	4543      	cmp	r3, r8
 8020ef0:	f280 81b5 	bge.w	802125e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020ef4:	f1bc 0f00 	cmp.w	ip, #0
 8020ef8:	f2c0 81b1 	blt.w	802125e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020efc:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020f00:	45c4      	cmp	ip, r8
 8020f02:	f280 81ac 	bge.w	802125e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020f06:	b209      	sxth	r1, r1
 8020f08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020f0a:	fb0c 3301 	mla	r3, ip, r1, r3
 8020f0e:	eb04 0803 	add.w	r8, r4, r3
 8020f12:	5ce3      	ldrb	r3, [r4, r3]
 8020f14:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020f18:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020f1c:	2a00      	cmp	r2, #0
 8020f1e:	f000 8193 	beq.w	8021248 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8020f22:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020f26:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020f2a:	940b      	str	r4, [sp, #44]	; 0x2c
 8020f2c:	0e24      	lsrs	r4, r4, #24
 8020f2e:	9412      	str	r4, [sp, #72]	; 0x48
 8020f30:	b178      	cbz	r0, 8020f52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020f32:	eb08 0c01 	add.w	ip, r8, r1
 8020f36:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020f3a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f3e:	9108      	str	r1, [sp, #32]
 8020f40:	0e09      	lsrs	r1, r1, #24
 8020f42:	9110      	str	r1, [sp, #64]	; 0x40
 8020f44:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020f48:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f4c:	910c      	str	r1, [sp, #48]	; 0x30
 8020f4e:	0e09      	lsrs	r1, r1, #24
 8020f50:	9113      	str	r1, [sp, #76]	; 0x4c
 8020f52:	b292      	uxth	r2, r2
 8020f54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020f56:	b280      	uxth	r0, r0
 8020f58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020f5a:	fb02 f900 	mul.w	r9, r2, r0
 8020f5e:	0112      	lsls	r2, r2, #4
 8020f60:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020f64:	eba2 0809 	sub.w	r8, r2, r9
 8020f68:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020f6c:	b280      	uxth	r0, r0
 8020f6e:	fa1f f888 	uxth.w	r8, r8
 8020f72:	1a12      	subs	r2, r2, r0
 8020f74:	fb08 f101 	mul.w	r1, r8, r1
 8020f78:	b292      	uxth	r2, r2
 8020f7a:	fb02 110e 	mla	r1, r2, lr, r1
 8020f7e:	fb00 1104 	mla	r1, r0, r4, r1
 8020f82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f84:	fb09 1104 	mla	r1, r9, r4, r1
 8020f88:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f8c:	2900      	cmp	r1, #0
 8020f8e:	f000 80de 	beq.w	802114e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020f92:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020f96:	d01b      	beq.n	8020fd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8020f98:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020f9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020fa0:	fb0e fa0a 	mul.w	sl, lr, sl
 8020fa4:	fb0e fe03 	mul.w	lr, lr, r3
 8020fa8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020fac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020fb0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020fb4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fb8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020fbc:	4453      	add	r3, sl
 8020fbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fc2:	0a1b      	lsrs	r3, r3, #8
 8020fc4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020fc8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fcc:	ea43 030c 	orr.w	r3, r3, ip
 8020fd0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020fd2:	2cff      	cmp	r4, #255	; 0xff
 8020fd4:	d021      	beq.n	802101a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020fd6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fd8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020fdc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020fde:	fb04 fb0b 	mul.w	fp, r4, fp
 8020fe2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fe4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020fe8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020fea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020fee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020ff2:	fb04 fa0a 	mul.w	sl, r4, sl
 8020ff6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ffa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020ffe:	44de      	add	lr, fp
 8021000:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021004:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021008:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802100c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021010:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021014:	ea4e 040a 	orr.w	r4, lr, sl
 8021018:	940b      	str	r4, [sp, #44]	; 0x2c
 802101a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802101c:	2cff      	cmp	r4, #255	; 0xff
 802101e:	d021      	beq.n	8021064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8021020:	9c08      	ldr	r4, [sp, #32]
 8021022:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021026:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021028:	fb04 fb0b 	mul.w	fp, r4, fp
 802102c:	9c08      	ldr	r4, [sp, #32]
 802102e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021032:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021034:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021038:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802103c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021040:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021044:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021048:	44de      	add	lr, fp
 802104a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802104e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021052:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021056:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802105a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802105e:	ea4e 040a 	orr.w	r4, lr, sl
 8021062:	9408      	str	r4, [sp, #32]
 8021064:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021066:	2cff      	cmp	r4, #255	; 0xff
 8021068:	d021      	beq.n	80210ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802106a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802106c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021070:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021072:	fb04 fb0b 	mul.w	fp, r4, fp
 8021076:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021078:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802107c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802107e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021082:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021086:	fb04 fa0a 	mul.w	sl, r4, sl
 802108a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802108e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021092:	44de      	add	lr, fp
 8021094:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021098:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802109c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80210a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80210a8:	ea4e 040a 	orr.w	r4, lr, sl
 80210ac:	940c      	str	r4, [sp, #48]	; 0x30
 80210ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80210b0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80210b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210b8:	43c9      	mvns	r1, r1
 80210ba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80210be:	9c08      	ldr	r4, [sp, #32]
 80210c0:	b2c9      	uxtb	r1, r1
 80210c2:	fb08 fc0c 	mul.w	ip, r8, ip
 80210c6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80210ca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80210ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80210d0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80210d4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80210d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80210da:	fb09 cc0e 	mla	ip, r9, lr, ip
 80210de:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80210e2:	fb08 f80e 	mul.w	r8, r8, lr
 80210e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210ea:	fb02 8303 	mla	r3, r2, r3, r8
 80210ee:	9a08      	ldr	r2, [sp, #32]
 80210f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80210f4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80210f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210fa:	fb00 330a 	mla	r3, r0, sl, r3
 80210fe:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021102:	fb09 3900 	mla	r9, r9, r0, r3
 8021106:	783b      	ldrb	r3, [r7, #0]
 8021108:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802110c:	fb03 f201 	mul.w	r2, r3, r1
 8021110:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021114:	1c53      	adds	r3, r2, #1
 8021116:	ea4c 0c09 	orr.w	ip, ip, r9
 802111a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802111e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021122:	703b      	strb	r3, [r7, #0]
 8021124:	787b      	ldrb	r3, [r7, #1]
 8021126:	434b      	muls	r3, r1
 8021128:	1c5a      	adds	r2, r3, #1
 802112a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802112e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021132:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021136:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802113a:	707b      	strb	r3, [r7, #1]
 802113c:	78bb      	ldrb	r3, [r7, #2]
 802113e:	4359      	muls	r1, r3
 8021140:	1c4b      	adds	r3, r1, #1
 8021142:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021146:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802114a:	f887 c002 	strb.w	ip, [r7, #2]
 802114e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021150:	3703      	adds	r7, #3
 8021152:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021154:	441a      	add	r2, r3
 8021156:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021158:	441d      	add	r5, r3
 802115a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802115c:	922f      	str	r2, [sp, #188]	; 0xbc
 802115e:	3b01      	subs	r3, #1
 8021160:	9317      	str	r3, [sp, #92]	; 0x5c
 8021162:	e6b0      	b.n	8020ec6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021164:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021166:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021168:	441c      	add	r4, r3
 802116a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802116c:	441d      	add	r5, r3
 802116e:	9b07      	ldr	r3, [sp, #28]
 8021170:	942f      	str	r4, [sp, #188]	; 0xbc
 8021172:	3b01      	subs	r3, #1
 8021174:	9307      	str	r3, [sp, #28]
 8021176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021178:	3303      	adds	r3, #3
 802117a:	930a      	str	r3, [sp, #40]	; 0x28
 802117c:	e683      	b.n	8020e86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802117e:	d026      	beq.n	80211ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8021180:	9b07      	ldr	r3, [sp, #28]
 8021182:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8021184:	3b01      	subs	r3, #1
 8021186:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021188:	fb00 4003 	mla	r0, r0, r3, r4
 802118c:	1400      	asrs	r0, r0, #16
 802118e:	f53f ae97 	bmi.w	8020ec0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021192:	3901      	subs	r1, #1
 8021194:	4288      	cmp	r0, r1
 8021196:	f6bf ae93 	bge.w	8020ec0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802119a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 802119c:	fb01 5303 	mla	r3, r1, r3, r5
 80211a0:	141b      	asrs	r3, r3, #16
 80211a2:	f53f ae8d 	bmi.w	8020ec0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80211a6:	3a01      	subs	r2, #1
 80211a8:	4293      	cmp	r3, r2
 80211aa:	f6bf ae89 	bge.w	8020ec0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80211ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211b0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80211b4:	f103 0e03 	add.w	lr, r3, #3
 80211b8:	f1bb 0f00 	cmp.w	fp, #0
 80211bc:	dc6d      	bgt.n	802129a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80211be:	9b07      	ldr	r3, [sp, #28]
 80211c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80211c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80211ca:	4423      	add	r3, r4
 80211cc:	930a      	str	r3, [sp, #40]	; 0x28
 80211ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	f340 81a0 	ble.w	8021516 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80211d6:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80211da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80211dc:	ee79 9aab 	vadd.f32	s19, s19, s23
 80211e0:	eef0 6a48 	vmov.f32	s13, s16
 80211e4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80211e8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80211ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211f0:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 80211f4:	eef0 6a68 	vmov.f32	s13, s17
 80211f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211fc:	ee16 5a90 	vmov	r5, s13
 8021200:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021204:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021208:	ee37 8a48 	vsub.f32	s16, s14, s16
 802120c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021210:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021214:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021218:	ee18 2a10 	vmov	r2, s16
 802121c:	eeb0 8a47 	vmov.f32	s16, s14
 8021220:	fb92 f3f3 	sdiv	r3, r2, r3
 8021224:	ee18 2a90 	vmov	r2, s17
 8021228:	9331      	str	r3, [sp, #196]	; 0xc4
 802122a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802122c:	eef0 8a67 	vmov.f32	s17, s15
 8021230:	fb92 f3f3 	sdiv	r3, r2, r3
 8021234:	9332      	str	r3, [sp, #200]	; 0xc8
 8021236:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021238:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802123a:	3b01      	subs	r3, #1
 802123c:	9316      	str	r3, [sp, #88]	; 0x58
 802123e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021240:	bf08      	it	eq
 8021242:	4613      	moveq	r3, r2
 8021244:	9307      	str	r3, [sp, #28]
 8021246:	e610      	b.n	8020e6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021248:	2800      	cmp	r0, #0
 802124a:	f43f ae82 	beq.w	8020f52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802124e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021252:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021256:	9108      	str	r1, [sp, #32]
 8021258:	0e09      	lsrs	r1, r1, #24
 802125a:	9110      	str	r1, [sp, #64]	; 0x40
 802125c:	e679      	b.n	8020f52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802125e:	f113 0801 	adds.w	r8, r3, #1
 8021262:	f53f af74 	bmi.w	802114e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021266:	4541      	cmp	r1, r8
 8021268:	f6ff af71 	blt.w	802114e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802126c:	f11c 0801 	adds.w	r8, ip, #1
 8021270:	f53f af6d 	bmi.w	802114e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021274:	45c6      	cmp	lr, r8
 8021276:	f6ff af6a 	blt.w	802114e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802127a:	b209      	sxth	r1, r1
 802127c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021280:	fa0f f38e 	sxth.w	r3, lr
 8021284:	9100      	str	r1, [sp, #0]
 8021286:	4639      	mov	r1, r7
 8021288:	9301      	str	r3, [sp, #4]
 802128a:	4633      	mov	r3, r6
 802128c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021292:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021294:	f7ff fc70 	bl	8020b78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021298:	e759      	b.n	802114e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802129a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802129c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80212a0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80212a2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80212a6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80212a8:	1427      	asrs	r7, r4, #16
 80212aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80212ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80212b0:	142b      	asrs	r3, r5, #16
 80212b2:	fb01 7303 	mla	r3, r1, r3, r7
 80212b6:	18e7      	adds	r7, r4, r3
 80212b8:	5ce3      	ldrb	r3, [r4, r3]
 80212ba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80212be:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80212c2:	2a00      	cmp	r2, #0
 80212c4:	f000 811d 	beq.w	8021502 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80212c8:	f897 8001 	ldrb.w	r8, [r7, #1]
 80212cc:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80212d0:	940d      	str	r4, [sp, #52]	; 0x34
 80212d2:	0e24      	lsrs	r4, r4, #24
 80212d4:	9414      	str	r4, [sp, #80]	; 0x50
 80212d6:	b170      	cbz	r0, 80212f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80212d8:	eb07 0801 	add.w	r8, r7, r1
 80212dc:	5c79      	ldrb	r1, [r7, r1]
 80212de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212e2:	9109      	str	r1, [sp, #36]	; 0x24
 80212e4:	0e09      	lsrs	r1, r1, #24
 80212e6:	9111      	str	r1, [sp, #68]	; 0x44
 80212e8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80212ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212f0:	910e      	str	r1, [sp, #56]	; 0x38
 80212f2:	0e09      	lsrs	r1, r1, #24
 80212f4:	9115      	str	r1, [sp, #84]	; 0x54
 80212f6:	b292      	uxth	r2, r2
 80212f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80212fa:	b280      	uxth	r0, r0
 80212fc:	fb02 f900 	mul.w	r9, r2, r0
 8021300:	0112      	lsls	r2, r2, #4
 8021302:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021306:	eba2 0809 	sub.w	r8, r2, r9
 802130a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802130e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021310:	b280      	uxth	r0, r0
 8021312:	fa1f f888 	uxth.w	r8, r8
 8021316:	1a09      	subs	r1, r1, r0
 8021318:	fb08 f202 	mul.w	r2, r8, r2
 802131c:	b289      	uxth	r1, r1
 802131e:	fb01 220c 	mla	r2, r1, ip, r2
 8021322:	fb00 2204 	mla	r2, r0, r4, r2
 8021326:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021328:	fb09 2204 	mla	r2, r9, r4, r2
 802132c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021330:	2a00      	cmp	r2, #0
 8021332:	f000 80db 	beq.w	80214ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021336:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802133a:	d019      	beq.n	8021370 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 802133c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021340:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021344:	fb0c fa0a 	mul.w	sl, ip, sl
 8021348:	fb0c fc03 	mul.w	ip, ip, r3
 802134c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021350:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021354:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021358:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802135c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021360:	4453      	add	r3, sl
 8021362:	0a3f      	lsrs	r7, r7, #8
 8021364:	0a1b      	lsrs	r3, r3, #8
 8021366:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802136a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802136e:	433b      	orrs	r3, r7
 8021370:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021372:	2cff      	cmp	r4, #255	; 0xff
 8021374:	d020      	beq.n	80213b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8021376:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021378:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802137c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802137e:	4367      	muls	r7, r4
 8021380:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021382:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021386:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802138a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802138c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021390:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021394:	fb04 fa0a 	mul.w	sl, r4, sl
 8021398:	44bc      	add	ip, r7
 802139a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802139e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213a2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213b2:	ea4c 040a 	orr.w	r4, ip, sl
 80213b6:	940d      	str	r4, [sp, #52]	; 0x34
 80213b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213ba:	2cff      	cmp	r4, #255	; 0xff
 80213bc:	d020      	beq.n	8021400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 80213be:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80213c0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80213c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213c6:	4367      	muls	r7, r4
 80213c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80213ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80213ce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80213d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213d4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80213d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80213e0:	44bc      	add	ip, r7
 80213e2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80213e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213fa:	ea4c 040a 	orr.w	r4, ip, sl
 80213fe:	9409      	str	r4, [sp, #36]	; 0x24
 8021400:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021402:	2cff      	cmp	r4, #255	; 0xff
 8021404:	d020      	beq.n	8021448 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8021406:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021408:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802140c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802140e:	4367      	muls	r7, r4
 8021410:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021412:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021416:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802141a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802141c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021420:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021424:	fb04 fa0a 	mul.w	sl, r4, sl
 8021428:	44bc      	add	ip, r7
 802142a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802142e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021432:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021436:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802143a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802143e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021442:	ea4c 040a 	orr.w	r4, ip, sl
 8021446:	940e      	str	r4, [sp, #56]	; 0x38
 8021448:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802144a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802144e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021452:	43d2      	mvns	r2, r2
 8021454:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021458:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802145a:	b2d2      	uxtb	r2, r2
 802145c:	fb08 f707 	mul.w	r7, r8, r7
 8021460:	fb01 770c 	mla	r7, r1, ip, r7
 8021464:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021468:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802146a:	fb00 770c 	mla	r7, r0, ip, r7
 802146e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021472:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021474:	fb09 770c 	mla	r7, r9, ip, r7
 8021478:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802147c:	fb08 f80c 	mul.w	r8, r8, ip
 8021480:	0a3f      	lsrs	r7, r7, #8
 8021482:	fb01 8303 	mla	r3, r1, r3, r8
 8021486:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021488:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802148c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021490:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021492:	fb00 330a 	mla	r3, r0, sl, r3
 8021496:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802149a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802149e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80214a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214a6:	fb03 f102 	mul.w	r1, r3, r2
 80214aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80214ae:	1c4b      	adds	r3, r1, #1
 80214b0:	ea47 070c 	orr.w	r7, r7, ip
 80214b4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80214b8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80214bc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80214c0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80214c4:	4353      	muls	r3, r2
 80214c6:	1c59      	adds	r1, r3, #1
 80214c8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80214cc:	0a3b      	lsrs	r3, r7, #8
 80214ce:	0c3f      	lsrs	r7, r7, #16
 80214d0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80214d4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80214d8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80214dc:	435a      	muls	r2, r3
 80214de:	1c53      	adds	r3, r2, #1
 80214e0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80214e4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80214e8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80214ec:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80214ee:	f10e 0e03 	add.w	lr, lr, #3
 80214f2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80214f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80214f8:	441a      	add	r2, r3
 80214fa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80214fc:	922f      	str	r2, [sp, #188]	; 0xbc
 80214fe:	441d      	add	r5, r3
 8021500:	e65a      	b.n	80211b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8021502:	2800      	cmp	r0, #0
 8021504:	f43f aef7 	beq.w	80212f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8021508:	5c79      	ldrb	r1, [r7, r1]
 802150a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802150e:	9109      	str	r1, [sp, #36]	; 0x24
 8021510:	0e09      	lsrs	r1, r1, #24
 8021512:	9111      	str	r1, [sp, #68]	; 0x44
 8021514:	e6ef      	b.n	80212f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8021516:	b01b      	add	sp, #108	; 0x6c
 8021518:	ecbd 8b0a 	vpop	{d8-d12}
 802151c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021520 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021524:	b08d      	sub	sp, #52	; 0x34
 8021526:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802152a:	9103      	str	r1, [sp, #12]
 802152c:	fb07 5803 	mla	r8, r7, r3, r5
 8021530:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8021534:	9803      	ldr	r0, [sp, #12]
 8021536:	2f00      	cmp	r7, #0
 8021538:	910b      	str	r1, [sp, #44]	; 0x2c
 802153a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802153e:	9903      	ldr	r1, [sp, #12]
 8021540:	9c03      	ldr	r4, [sp, #12]
 8021542:	eb02 0608 	add.w	r6, r2, r8
 8021546:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802154a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 802154e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8021552:	7809      	ldrb	r1, [r1, #0]
 8021554:	7840      	ldrb	r0, [r0, #1]
 8021556:	78a4      	ldrb	r4, [r4, #2]
 8021558:	db51      	blt.n	80215fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802155a:	45be      	cmp	lr, r7
 802155c:	dd4f      	ble.n	80215fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802155e:	2d00      	cmp	r5, #0
 8021560:	db49      	blt.n	80215f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021562:	42ab      	cmp	r3, r5
 8021564:	dd47      	ble.n	80215f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021566:	f812 2008 	ldrb.w	r2, [r2, r8]
 802156a:	9204      	str	r2, [sp, #16]
 802156c:	7872      	ldrb	r2, [r6, #1]
 802156e:	9205      	str	r2, [sp, #20]
 8021570:	78b2      	ldrb	r2, [r6, #2]
 8021572:	9206      	str	r2, [sp, #24]
 8021574:	1c6a      	adds	r2, r5, #1
 8021576:	d449      	bmi.n	802160c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021578:	4293      	cmp	r3, r2
 802157a:	dd47      	ble.n	802160c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802157c:	f1bc 0f00 	cmp.w	ip, #0
 8021580:	d044      	beq.n	802160c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021582:	7972      	ldrb	r2, [r6, #5]
 8021584:	f896 b003 	ldrb.w	fp, [r6, #3]
 8021588:	f896 a004 	ldrb.w	sl, [r6, #4]
 802158c:	9201      	str	r2, [sp, #4]
 802158e:	3701      	adds	r7, #1
 8021590:	d444      	bmi.n	802161c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8021592:	45be      	cmp	lr, r7
 8021594:	dd42      	ble.n	802161c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8021596:	f1b9 0f00 	cmp.w	r9, #0
 802159a:	f000 80c1 	beq.w	8021720 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 802159e:	2d00      	cmp	r5, #0
 80215a0:	db38      	blt.n	8021614 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80215a2:	42ab      	cmp	r3, r5
 80215a4:	dd36      	ble.n	8021614 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80215a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80215aa:	f816 8002 	ldrb.w	r8, [r6, r2]
 80215ae:	2203      	movs	r2, #3
 80215b0:	fb03 6702 	mla	r7, r3, r2, r6
 80215b4:	fb03 6202 	mla	r2, r3, r2, r6
 80215b8:	787f      	ldrb	r7, [r7, #1]
 80215ba:	f892 e002 	ldrb.w	lr, [r2, #2]
 80215be:	9702      	str	r7, [sp, #8]
 80215c0:	3501      	adds	r5, #1
 80215c2:	d432      	bmi.n	802162a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80215c4:	42ab      	cmp	r3, r5
 80215c6:	dd30      	ble.n	802162a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80215c8:	f1bc 0f00 	cmp.w	ip, #0
 80215cc:	d031      	beq.n	8021632 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80215ce:	2703      	movs	r7, #3
 80215d0:	fb13 7207 	smlabb	r2, r3, r7, r7
 80215d4:	5cb5      	ldrb	r5, [r6, r2]
 80215d6:	fb03 6207 	mla	r2, r3, r7, r6
 80215da:	fb03 6307 	mla	r3, r3, r7, r6
 80215de:	7912      	ldrb	r2, [r2, #4]
 80215e0:	795e      	ldrb	r6, [r3, #5]
 80215e2:	f1bc 0f0f 	cmp.w	ip, #15
 80215e6:	d927      	bls.n	8021638 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 80215e8:	4b53      	ldr	r3, [pc, #332]	; (8021738 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 80215ea:	f240 1157 	movw	r1, #343	; 0x157
 80215ee:	4a53      	ldr	r2, [pc, #332]	; (802173c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 80215f0:	4853      	ldr	r0, [pc, #332]	; (8021740 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 80215f2:	f004 fc65 	bl	8025ec0 <__assert_func>
 80215f6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80215fa:	9104      	str	r1, [sp, #16]
 80215fc:	e7ba      	b.n	8021574 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80215fe:	9401      	str	r4, [sp, #4]
 8021600:	4682      	mov	sl, r0
 8021602:	468b      	mov	fp, r1
 8021604:	9104      	str	r1, [sp, #16]
 8021606:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802160a:	e7c0      	b.n	802158e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802160c:	9401      	str	r4, [sp, #4]
 802160e:	4682      	mov	sl, r0
 8021610:	468b      	mov	fp, r1
 8021612:	e7bc      	b.n	802158e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021614:	46a6      	mov	lr, r4
 8021616:	9002      	str	r0, [sp, #8]
 8021618:	4688      	mov	r8, r1
 802161a:	e7d1      	b.n	80215c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 802161c:	4626      	mov	r6, r4
 802161e:	4602      	mov	r2, r0
 8021620:	460d      	mov	r5, r1
 8021622:	46a6      	mov	lr, r4
 8021624:	9002      	str	r0, [sp, #8]
 8021626:	4688      	mov	r8, r1
 8021628:	e7db      	b.n	80215e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802162a:	4626      	mov	r6, r4
 802162c:	4602      	mov	r2, r0
 802162e:	460d      	mov	r5, r1
 8021630:	e7d7      	b.n	80215e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021632:	4626      	mov	r6, r4
 8021634:	4602      	mov	r2, r0
 8021636:	460d      	mov	r5, r1
 8021638:	f1b9 0f0f 	cmp.w	r9, #15
 802163c:	d8d4      	bhi.n	80215e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802163e:	fa1f f38c 	uxth.w	r3, ip
 8021642:	fa1f fc89 	uxth.w	ip, r9
 8021646:	fb03 f70c 	mul.w	r7, r3, ip
 802164a:	011b      	lsls	r3, r3, #4
 802164c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021650:	9707      	str	r7, [sp, #28]
 8021652:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021656:	fa1f fc8c 	uxth.w	ip, ip
 802165a:	eba7 070c 	sub.w	r7, r7, ip
 802165e:	b2bf      	uxth	r7, r7
 8021660:	9709      	str	r7, [sp, #36]	; 0x24
 8021662:	9f07      	ldr	r7, [sp, #28]
 8021664:	1bdb      	subs	r3, r3, r7
 8021666:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802166a:	b29b      	uxth	r3, r3
 802166c:	9708      	str	r7, [sp, #32]
 802166e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021670:	930a      	str	r3, [sp, #40]	; 0x28
 8021672:	ea6f 0907 	mvn.w	r9, r7
 8021676:	fb03 fb0b 	mul.w	fp, r3, fp
 802167a:	9f04      	ldr	r7, [sp, #16]
 802167c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802167e:	fa5f f989 	uxtb.w	r9, r9
 8021682:	fb03 bb07 	mla	fp, r3, r7, fp
 8021686:	9f07      	ldr	r7, [sp, #28]
 8021688:	fb11 f109 	smulbb	r1, r1, r9
 802168c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802168e:	fb0c b808 	mla	r8, ip, r8, fp
 8021692:	fb10 f009 	smulbb	r0, r0, r9
 8021696:	fb14 f409 	smulbb	r4, r4, r9
 802169a:	fb07 8805 	mla	r8, r7, r5, r8
 802169e:	9d08      	ldr	r5, [sp, #32]
 80216a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80216a2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80216a6:	fb08 1805 	mla	r8, r8, r5, r1
 80216aa:	9d05      	ldr	r5, [sp, #20]
 80216ac:	fa1f f888 	uxth.w	r8, r8
 80216b0:	f108 0101 	add.w	r1, r8, #1
 80216b4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80216b8:	9903      	ldr	r1, [sp, #12]
 80216ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 80216be:	f881 8000 	strb.w	r8, [r1]
 80216c2:	fb03 f10a 	mul.w	r1, r3, sl
 80216c6:	fb07 1105 	mla	r1, r7, r5, r1
 80216ca:	9d02      	ldr	r5, [sp, #8]
 80216cc:	fb0c 1105 	mla	r1, ip, r5, r1
 80216d0:	9d07      	ldr	r5, [sp, #28]
 80216d2:	fb05 1102 	mla	r1, r5, r2, r1
 80216d6:	9a08      	ldr	r2, [sp, #32]
 80216d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80216dc:	fb01 0102 	mla	r1, r1, r2, r0
 80216e0:	9a03      	ldr	r2, [sp, #12]
 80216e2:	b289      	uxth	r1, r1
 80216e4:	1c48      	adds	r0, r1, #1
 80216e6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80216ea:	1209      	asrs	r1, r1, #8
 80216ec:	7051      	strb	r1, [r2, #1]
 80216ee:	9a01      	ldr	r2, [sp, #4]
 80216f0:	4353      	muls	r3, r2
 80216f2:	9a06      	ldr	r2, [sp, #24]
 80216f4:	fb07 3702 	mla	r7, r7, r2, r3
 80216f8:	9b08      	ldr	r3, [sp, #32]
 80216fa:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80216fe:	fb05 c606 	mla	r6, r5, r6, ip
 8021702:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021706:	fb06 4603 	mla	r6, r6, r3, r4
 802170a:	9b03      	ldr	r3, [sp, #12]
 802170c:	b2b6      	uxth	r6, r6
 802170e:	f106 0e01 	add.w	lr, r6, #1
 8021712:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021716:	1236      	asrs	r6, r6, #8
 8021718:	709e      	strb	r6, [r3, #2]
 802171a:	b00d      	add	sp, #52	; 0x34
 802171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021720:	f1bc 0f0f 	cmp.w	ip, #15
 8021724:	f63f af60 	bhi.w	80215e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021728:	4626      	mov	r6, r4
 802172a:	4602      	mov	r2, r0
 802172c:	460d      	mov	r5, r1
 802172e:	46a6      	mov	lr, r4
 8021730:	9002      	str	r0, [sp, #8]
 8021732:	4688      	mov	r8, r1
 8021734:	e783      	b.n	802163e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8021736:	bf00      	nop
 8021738:	0802df2f 	.word	0x0802df2f
 802173c:	0802e497 	.word	0x0802e497
 8021740:	0802dff8 	.word	0x0802dff8

08021744 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021748:	ed2d 8b08 	vpush	{d8-d11}
 802174c:	b09f      	sub	sp, #124	; 0x7c
 802174e:	eeb0 aa40 	vmov.f32	s20, s0
 8021752:	eef0 9a60 	vmov.f32	s19, s1
 8021756:	920e      	str	r2, [sp, #56]	; 0x38
 8021758:	eeb0 9a41 	vmov.f32	s18, s2
 802175c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802175e:	eeb0 8a62 	vmov.f32	s16, s5
 8021762:	9307      	str	r3, [sp, #28]
 8021764:	eef0 8a43 	vmov.f32	s17, s6
 8021768:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 802176c:	eef0 ba44 	vmov.f32	s23, s8
 8021770:	901d      	str	r0, [sp, #116]	; 0x74
 8021772:	eeb0 ba64 	vmov.f32	s22, s9
 8021776:	930c      	str	r3, [sp, #48]	; 0x30
 8021778:	eef0 aa45 	vmov.f32	s21, s10
 802177c:	6850      	ldr	r0, [r2, #4]
 802177e:	910b      	str	r1, [sp, #44]	; 0x2c
 8021780:	6812      	ldr	r2, [r2, #0]
 8021782:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8021786:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 802178a:	fb00 1303 	mla	r3, r0, r3, r1
 802178e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021792:	18d3      	adds	r3, r2, r3
 8021794:	9308      	str	r3, [sp, #32]
 8021796:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021798:	681b      	ldr	r3, [r3, #0]
 802179a:	930a      	str	r3, [sp, #40]	; 0x28
 802179c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802179e:	43db      	mvns	r3, r3
 80217a0:	b2db      	uxtb	r3, r3
 80217a2:	9309      	str	r3, [sp, #36]	; 0x24
 80217a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217a6:	2b00      	cmp	r3, #0
 80217a8:	dc03      	bgt.n	80217b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80217aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	f340 81f5 	ble.w	8021b9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80217b2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80217b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80217b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80217bc:	1e48      	subs	r0, r1, #1
 80217be:	1e54      	subs	r4, r2, #1
 80217c0:	9b07      	ldr	r3, [sp, #28]
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	f340 80d5 	ble.w	8021972 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80217c8:	ea5f 452a 	movs.w	r5, sl, asr #16
 80217cc:	ea4f 4328 	mov.w	r3, r8, asr #16
 80217d0:	d406      	bmi.n	80217e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80217d2:	4285      	cmp	r5, r0
 80217d4:	da04      	bge.n	80217e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	db02      	blt.n	80217e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80217da:	42a3      	cmp	r3, r4
 80217dc:	f2c0 80ca 	blt.w	8021974 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80217e0:	3501      	adds	r5, #1
 80217e2:	f100 80bb 	bmi.w	802195c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80217e6:	42a9      	cmp	r1, r5
 80217e8:	f2c0 80b8 	blt.w	802195c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80217ec:	3301      	adds	r3, #1
 80217ee:	f100 80b5 	bmi.w	802195c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80217f2:	429a      	cmp	r2, r3
 80217f4:	f2c0 80b2 	blt.w	802195c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80217f8:	9b07      	ldr	r3, [sp, #28]
 80217fa:	9d08      	ldr	r5, [sp, #32]
 80217fc:	930d      	str	r3, [sp, #52]	; 0x34
 80217fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021800:	2b00      	cmp	r3, #0
 8021802:	f340 80d6 	ble.w	80219b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8021806:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8021808:	ea4f 4428 	mov.w	r4, r8, asr #16
 802180c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802180e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8021812:	68c6      	ldr	r6, [r0, #12]
 8021814:	ea5f 402a 	movs.w	r0, sl, asr #16
 8021818:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802181c:	689b      	ldr	r3, [r3, #8]
 802181e:	f100 810f 	bmi.w	8021a40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021822:	1e5f      	subs	r7, r3, #1
 8021824:	42b8      	cmp	r0, r7
 8021826:	f280 810b 	bge.w	8021a40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802182a:	2c00      	cmp	r4, #0
 802182c:	f2c0 8108 	blt.w	8021a40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021830:	1e77      	subs	r7, r6, #1
 8021832:	42bc      	cmp	r4, r7
 8021834:	f280 8104 	bge.w	8021a40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8021838:	b21b      	sxth	r3, r3
 802183a:	fb04 0003 	mla	r0, r4, r3, r0
 802183e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021840:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021844:	1826      	adds	r6, r4, r0
 8021846:	5c24      	ldrb	r4, [r4, r0]
 8021848:	78b7      	ldrb	r7, [r6, #2]
 802184a:	7870      	ldrb	r0, [r6, #1]
 802184c:	970f      	str	r7, [sp, #60]	; 0x3c
 802184e:	7977      	ldrb	r7, [r6, #5]
 8021850:	f896 e003 	ldrb.w	lr, [r6, #3]
 8021854:	f896 c004 	ldrb.w	ip, [r6, #4]
 8021858:	9710      	str	r7, [sp, #64]	; 0x40
 802185a:	b1c9      	cbz	r1, 8021890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802185c:	f04f 0b03 	mov.w	fp, #3
 8021860:	f06f 0904 	mvn.w	r9, #4
 8021864:	3605      	adds	r6, #5
 8021866:	fb13 930b 	smlabb	r3, r3, fp, r9
 802186a:	eb06 0b03 	add.w	fp, r6, r3
 802186e:	5cf3      	ldrb	r3, [r6, r3]
 8021870:	9311      	str	r3, [sp, #68]	; 0x44
 8021872:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8021876:	9313      	str	r3, [sp, #76]	; 0x4c
 8021878:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802187c:	9315      	str	r3, [sp, #84]	; 0x54
 802187e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8021882:	9312      	str	r3, [sp, #72]	; 0x48
 8021884:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8021888:	9314      	str	r3, [sp, #80]	; 0x50
 802188a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 802188e:	9316      	str	r3, [sp, #88]	; 0x58
 8021890:	b292      	uxth	r2, r2
 8021892:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8021894:	b289      	uxth	r1, r1
 8021896:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802189a:	fb02 f601 	mul.w	r6, r2, r1
 802189e:	0112      	lsls	r2, r2, #4
 80218a0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80218a4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80218a8:	1b92      	subs	r2, r2, r6
 80218aa:	b289      	uxth	r1, r1
 80218ac:	b292      	uxth	r2, r2
 80218ae:	eba9 0901 	sub.w	r9, r9, r1
 80218b2:	fb02 fe0e 	mul.w	lr, r2, lr
 80218b6:	fa1f f989 	uxth.w	r9, r9
 80218ba:	fb02 fc0c 	mul.w	ip, r2, ip
 80218be:	fb09 e404 	mla	r4, r9, r4, lr
 80218c2:	f895 e000 	ldrb.w	lr, [r5]
 80218c6:	fb09 c000 	mla	r0, r9, r0, ip
 80218ca:	fb01 4407 	mla	r4, r1, r7, r4
 80218ce:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80218d0:	fb06 4407 	mla	r4, r6, r7, r4
 80218d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80218d6:	fb1e fe07 	smulbb	lr, lr, r7
 80218da:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80218de:	fb04 e403 	mla	r4, r4, r3, lr
 80218e2:	b2a4      	uxth	r4, r4
 80218e4:	f104 0e01 	add.w	lr, r4, #1
 80218e8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80218ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80218ee:	fb01 0004 	mla	r0, r1, r4, r0
 80218f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80218f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80218f8:	fb06 0004 	mla	r0, r6, r4, r0
 80218fc:	786c      	ldrb	r4, [r5, #1]
 80218fe:	f885 e000 	strb.w	lr, [r5]
 8021902:	fb14 f407 	smulbb	r4, r4, r7
 8021906:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802190a:	fb00 4003 	mla	r0, r0, r3, r4
 802190e:	b280      	uxth	r0, r0
 8021910:	1c44      	adds	r4, r0, #1
 8021912:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021916:	1200      	asrs	r0, r0, #8
 8021918:	7068      	strb	r0, [r5, #1]
 802191a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802191c:	4342      	muls	r2, r0
 802191e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021920:	fb09 2200 	mla	r2, r9, r0, r2
 8021924:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021926:	fb01 2100 	mla	r1, r1, r0, r2
 802192a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802192c:	fb06 1602 	mla	r6, r6, r2, r1
 8021930:	78a9      	ldrb	r1, [r5, #2]
 8021932:	fb11 f107 	smulbb	r1, r1, r7
 8021936:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802193a:	fb06 1303 	mla	r3, r6, r3, r1
 802193e:	b29b      	uxth	r3, r3
 8021940:	1c5e      	adds	r6, r3, #1
 8021942:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021946:	121b      	asrs	r3, r3, #8
 8021948:	70ab      	strb	r3, [r5, #2]
 802194a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802194c:	3503      	adds	r5, #3
 802194e:	449a      	add	sl, r3
 8021950:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021952:	4498      	add	r8, r3
 8021954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021956:	3b01      	subs	r3, #1
 8021958:	930d      	str	r3, [sp, #52]	; 0x34
 802195a:	e750      	b.n	80217fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802195c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802195e:	449a      	add	sl, r3
 8021960:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021962:	4498      	add	r8, r3
 8021964:	9b07      	ldr	r3, [sp, #28]
 8021966:	3b01      	subs	r3, #1
 8021968:	9307      	str	r3, [sp, #28]
 802196a:	9b08      	ldr	r3, [sp, #32]
 802196c:	3303      	adds	r3, #3
 802196e:	9308      	str	r3, [sp, #32]
 8021970:	e726      	b.n	80217c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021972:	d026      	beq.n	80219c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021974:	9b07      	ldr	r3, [sp, #28]
 8021976:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021978:	3b01      	subs	r3, #1
 802197a:	fb00 a003 	mla	r0, r0, r3, sl
 802197e:	1400      	asrs	r0, r0, #16
 8021980:	f53f af3a 	bmi.w	80217f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021984:	3901      	subs	r1, #1
 8021986:	4288      	cmp	r0, r1
 8021988:	f6bf af36 	bge.w	80217f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802198c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802198e:	fb01 8303 	mla	r3, r1, r3, r8
 8021992:	141b      	asrs	r3, r3, #16
 8021994:	f53f af30 	bmi.w	80217f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021998:	3a01      	subs	r2, #1
 802199a:	4293      	cmp	r3, r2
 802199c:	f6bf af2c 	bge.w	80217f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80219a0:	9b08      	ldr	r3, [sp, #32]
 80219a2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80219a6:	1cdd      	adds	r5, r3, #3
 80219a8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80219ac:	f1bc 0f00 	cmp.w	ip, #0
 80219b0:	dc5f      	bgt.n	8021a72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80219b2:	9b07      	ldr	r3, [sp, #28]
 80219b4:	9a08      	ldr	r2, [sp, #32]
 80219b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80219ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219be:	441a      	add	r2, r3
 80219c0:	9208      	str	r2, [sp, #32]
 80219c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	f340 80e9 	ble.w	8021b9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80219ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80219ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80219d0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80219d4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80219d8:	eef0 6a48 	vmov.f32	s13, s16
 80219dc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80219e0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80219e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80219e8:	ee16 aa90 	vmov	sl, s13
 80219ec:	eef0 6a68 	vmov.f32	s13, s17
 80219f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80219f4:	ee16 8a90 	vmov	r8, s13
 80219f8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80219fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021a00:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021a04:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021a08:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021a0c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021a10:	ee18 2a10 	vmov	r2, s16
 8021a14:	eeb0 8a47 	vmov.f32	s16, s14
 8021a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a1c:	ee18 2a90 	vmov	r2, s17
 8021a20:	9333      	str	r3, [sp, #204]	; 0xcc
 8021a22:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021a24:	eef0 8a67 	vmov.f32	s17, s15
 8021a28:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a2c:	9334      	str	r3, [sp, #208]	; 0xd0
 8021a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021a32:	3b01      	subs	r3, #1
 8021a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8021a36:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021a38:	bf08      	it	eq
 8021a3a:	4613      	moveq	r3, r2
 8021a3c:	9307      	str	r3, [sp, #28]
 8021a3e:	e6b1      	b.n	80217a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021a40:	1c47      	adds	r7, r0, #1
 8021a42:	d482      	bmi.n	802194a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021a44:	42bb      	cmp	r3, r7
 8021a46:	db80      	blt.n	802194a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021a48:	1c67      	adds	r7, r4, #1
 8021a4a:	f53f af7e 	bmi.w	802194a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021a4e:	42be      	cmp	r6, r7
 8021a50:	f6ff af7b 	blt.w	802194a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021a54:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021a56:	b236      	sxth	r6, r6
 8021a58:	9001      	str	r0, [sp, #4]
 8021a5a:	b21b      	sxth	r3, r3
 8021a5c:	9600      	str	r6, [sp, #0]
 8021a5e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021a60:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8021a64:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8021a68:	4629      	mov	r1, r5
 8021a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021a6c:	f7ff fd58 	bl	8021520 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8021a70:	e76b      	b.n	802194a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021a72:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8021a74:	ea4f 402a 	mov.w	r0, sl, asr #16
 8021a78:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8021a7c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8021a80:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8021a84:	ea4f 4128 	mov.w	r1, r8, asr #16
 8021a88:	fb07 0101 	mla	r1, r7, r1, r0
 8021a8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021a8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021a92:	1844      	adds	r4, r0, r1
 8021a94:	5c40      	ldrb	r0, [r0, r1]
 8021a96:	78a6      	ldrb	r6, [r4, #2]
 8021a98:	7861      	ldrb	r1, [r4, #1]
 8021a9a:	960f      	str	r6, [sp, #60]	; 0x3c
 8021a9c:	78e6      	ldrb	r6, [r4, #3]
 8021a9e:	910d      	str	r1, [sp, #52]	; 0x34
 8021aa0:	9610      	str	r6, [sp, #64]	; 0x40
 8021aa2:	f894 9004 	ldrb.w	r9, [r4, #4]
 8021aa6:	f894 b005 	ldrb.w	fp, [r4, #5]
 8021aaa:	b192      	cbz	r2, 8021ad2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8021aac:	f06f 0604 	mvn.w	r6, #4
 8021ab0:	2103      	movs	r1, #3
 8021ab2:	3405      	adds	r4, #5
 8021ab4:	fb17 6701 	smlabb	r7, r7, r1, r6
 8021ab8:	19e6      	adds	r6, r4, r7
 8021aba:	5de4      	ldrb	r4, [r4, r7]
 8021abc:	9417      	str	r4, [sp, #92]	; 0x5c
 8021abe:	7874      	ldrb	r4, [r6, #1]
 8021ac0:	9419      	str	r4, [sp, #100]	; 0x64
 8021ac2:	78b4      	ldrb	r4, [r6, #2]
 8021ac4:	941b      	str	r4, [sp, #108]	; 0x6c
 8021ac6:	78f4      	ldrb	r4, [r6, #3]
 8021ac8:	9418      	str	r4, [sp, #96]	; 0x60
 8021aca:	7934      	ldrb	r4, [r6, #4]
 8021acc:	941a      	str	r4, [sp, #104]	; 0x68
 8021ace:	7974      	ldrb	r4, [r6, #5]
 8021ad0:	941c      	str	r4, [sp, #112]	; 0x70
 8021ad2:	b29b      	uxth	r3, r3
 8021ad4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021ad6:	b292      	uxth	r2, r2
 8021ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021ada:	3503      	adds	r5, #3
 8021adc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021ae0:	fb03 f402 	mul.w	r4, r3, r2
 8021ae4:	011b      	lsls	r3, r3, #4
 8021ae6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8021aea:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8021aee:	1b1b      	subs	r3, r3, r4
 8021af0:	b292      	uxth	r2, r2
 8021af2:	b29b      	uxth	r3, r3
 8021af4:	1ab6      	subs	r6, r6, r2
 8021af6:	435f      	muls	r7, r3
 8021af8:	b2b6      	uxth	r6, r6
 8021afa:	fb03 f909 	mul.w	r9, r3, r9
 8021afe:	fb03 fb0b 	mul.w	fp, r3, fp
 8021b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021b04:	fb06 7000 	mla	r0, r6, r0, r7
 8021b08:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8021b0a:	fb06 bb03 	mla	fp, r6, r3, fp
 8021b0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021b10:	fb02 0007 	mla	r0, r2, r7, r0
 8021b14:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8021b16:	fb02 bb03 	mla	fp, r2, r3, fp
 8021b1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021b1c:	fb04 0007 	mla	r0, r4, r7, r0
 8021b20:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8021b24:	fb17 f701 	smulbb	r7, r7, r1
 8021b28:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021b2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021b2e:	fb00 700e 	mla	r0, r0, lr, r7
 8021b32:	fb06 9101 	mla	r1, r6, r1, r9
 8021b36:	b280      	uxth	r0, r0
 8021b38:	1c47      	adds	r7, r0, #1
 8021b3a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021b3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021b40:	1200      	asrs	r0, r0, #8
 8021b42:	f805 0c06 	strb.w	r0, [r5, #-6]
 8021b46:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021b48:	fb02 1100 	mla	r1, r2, r0, r1
 8021b4c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8021b4e:	fb04 1100 	mla	r1, r4, r0, r1
 8021b52:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8021b56:	fb04 b403 	mla	r4, r4, r3, fp
 8021b5a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8021b5e:	fb10 f007 	smulbb	r0, r0, r7
 8021b62:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021b66:	fb13 f307 	smulbb	r3, r3, r7
 8021b6a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021b6e:	fb01 010e 	mla	r1, r1, lr, r0
 8021b72:	fb04 340e 	mla	r4, r4, lr, r3
 8021b76:	b289      	uxth	r1, r1
 8021b78:	b2a4      	uxth	r4, r4
 8021b7a:	1c48      	adds	r0, r1, #1
 8021b7c:	1c63      	adds	r3, r4, #1
 8021b7e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021b82:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021b86:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021b88:	1209      	asrs	r1, r1, #8
 8021b8a:	1224      	asrs	r4, r4, #8
 8021b8c:	449a      	add	sl, r3
 8021b8e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021b90:	f805 1c05 	strb.w	r1, [r5, #-5]
 8021b94:	f805 4c04 	strb.w	r4, [r5, #-4]
 8021b98:	4498      	add	r8, r3
 8021b9a:	e707      	b.n	80219ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8021b9c:	b01f      	add	sp, #124	; 0x7c
 8021b9e:	ecbd 8b08 	vpop	{d8-d11}
 8021ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8021ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bac:	b085      	sub	sp, #20
 8021bae:	784d      	ldrb	r5, [r1, #1]
 8021bb0:	788e      	ldrb	r6, [r1, #2]
 8021bb2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8021bb6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8021bba:	9403      	str	r4, [sp, #12]
 8021bbc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021bc0:	780c      	ldrb	r4, [r1, #0]
 8021bc2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8021bc6:	fb07 ce03 	mla	lr, r7, r3, ip
 8021bca:	2f00      	cmp	r7, #0
 8021bcc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021bd0:	eb02 0b0e 	add.w	fp, r2, lr
 8021bd4:	db56      	blt.n	8021c84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8021bd6:	45b9      	cmp	r9, r7
 8021bd8:	dd54      	ble.n	8021c84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8021bda:	f1bc 0f00 	cmp.w	ip, #0
 8021bde:	db4d      	blt.n	8021c7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021be0:	4563      	cmp	r3, ip
 8021be2:	dd4b      	ble.n	8021c7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021be4:	f812 200e 	ldrb.w	r2, [r2, lr]
 8021be8:	9200      	str	r2, [sp, #0]
 8021bea:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8021bee:	9201      	str	r2, [sp, #4]
 8021bf0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021bf4:	9202      	str	r2, [sp, #8]
 8021bf6:	f11c 0201 	adds.w	r2, ip, #1
 8021bfa:	d44a      	bmi.n	8021c92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021bfc:	4293      	cmp	r3, r2
 8021bfe:	dd48      	ble.n	8021c92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021c00:	2800      	cmp	r0, #0
 8021c02:	d046      	beq.n	8021c92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021c04:	f89b e003 	ldrb.w	lr, [fp, #3]
 8021c08:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8021c0c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021c10:	3701      	adds	r7, #1
 8021c12:	d446      	bmi.n	8021ca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021c14:	45b9      	cmp	r9, r7
 8021c16:	dd44      	ble.n	8021ca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021c18:	9a03      	ldr	r2, [sp, #12]
 8021c1a:	2a00      	cmp	r2, #0
 8021c1c:	d045      	beq.n	8021caa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8021c1e:	f1bc 0f00 	cmp.w	ip, #0
 8021c22:	db3a      	blt.n	8021c9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021c24:	4563      	cmp	r3, ip
 8021c26:	dd38      	ble.n	8021c9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021c28:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021c2c:	f04f 0903 	mov.w	r9, #3
 8021c30:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021c34:	fb03 b209 	mla	r2, r3, r9, fp
 8021c38:	fb03 b909 	mla	r9, r3, r9, fp
 8021c3c:	7852      	ldrb	r2, [r2, #1]
 8021c3e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021c42:	f11c 0c01 	adds.w	ip, ip, #1
 8021c46:	d40d      	bmi.n	8021c64 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021c48:	4563      	cmp	r3, ip
 8021c4a:	dd0b      	ble.n	8021c64 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021c4c:	b160      	cbz	r0, 8021c68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8021c4e:	2603      	movs	r6, #3
 8021c50:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021c54:	fb03 b506 	mla	r5, r3, r6, fp
 8021c58:	fb03 b306 	mla	r3, r3, r6, fp
 8021c5c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021c60:	792d      	ldrb	r5, [r5, #4]
 8021c62:	795e      	ldrb	r6, [r3, #5]
 8021c64:	280f      	cmp	r0, #15
 8021c66:	d802      	bhi.n	8021c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021c68:	9b03      	ldr	r3, [sp, #12]
 8021c6a:	2b0f      	cmp	r3, #15
 8021c6c:	d922      	bls.n	8021cb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8021c6e:	4b2f      	ldr	r3, [pc, #188]	; (8021d2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8021c70:	f240 1157 	movw	r1, #343	; 0x157
 8021c74:	4a2e      	ldr	r2, [pc, #184]	; (8021d30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8021c76:	482f      	ldr	r0, [pc, #188]	; (8021d34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8021c78:	f004 f922 	bl	8025ec0 <__assert_func>
 8021c7c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021c80:	9400      	str	r4, [sp, #0]
 8021c82:	e7b8      	b.n	8021bf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8021c84:	46b2      	mov	sl, r6
 8021c86:	46a8      	mov	r8, r5
 8021c88:	46a6      	mov	lr, r4
 8021c8a:	9400      	str	r4, [sp, #0]
 8021c8c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021c90:	e7be      	b.n	8021c10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021c92:	46b2      	mov	sl, r6
 8021c94:	46a8      	mov	r8, r5
 8021c96:	46a6      	mov	lr, r4
 8021c98:	e7ba      	b.n	8021c10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021c9a:	46b1      	mov	r9, r6
 8021c9c:	462a      	mov	r2, r5
 8021c9e:	4627      	mov	r7, r4
 8021ca0:	e7cf      	b.n	8021c42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8021ca2:	46b1      	mov	r9, r6
 8021ca4:	462a      	mov	r2, r5
 8021ca6:	4627      	mov	r7, r4
 8021ca8:	e7dc      	b.n	8021c64 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021caa:	280f      	cmp	r0, #15
 8021cac:	d8df      	bhi.n	8021c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021cae:	46b1      	mov	r9, r6
 8021cb0:	462a      	mov	r2, r5
 8021cb2:	4627      	mov	r7, r4
 8021cb4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8021cb8:	b280      	uxth	r0, r0
 8021cba:	fb00 f30b 	mul.w	r3, r0, fp
 8021cbe:	0100      	lsls	r0, r0, #4
 8021cc0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8021cc4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8021cc8:	1ac0      	subs	r0, r0, r3
 8021cca:	fa1f fb8b 	uxth.w	fp, fp
 8021cce:	b280      	uxth	r0, r0
 8021cd0:	ebac 0c0b 	sub.w	ip, ip, fp
 8021cd4:	9003      	str	r0, [sp, #12]
 8021cd6:	fa1f fc8c 	uxth.w	ip, ip
 8021cda:	fb00 fe0e 	mul.w	lr, r0, lr
 8021cde:	9800      	ldr	r0, [sp, #0]
 8021ce0:	fb0c ee00 	mla	lr, ip, r0, lr
 8021ce4:	9803      	ldr	r0, [sp, #12]
 8021ce6:	fb00 f808 	mul.w	r8, r0, r8
 8021cea:	9801      	ldr	r0, [sp, #4]
 8021cec:	fb0b ee07 	mla	lr, fp, r7, lr
 8021cf0:	fb0c 8800 	mla	r8, ip, r0, r8
 8021cf4:	fb03 ee04 	mla	lr, r3, r4, lr
 8021cf8:	fb0b 8202 	mla	r2, fp, r2, r8
 8021cfc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021d00:	fb03 2505 	mla	r5, r3, r5, r2
 8021d04:	9a03      	ldr	r2, [sp, #12]
 8021d06:	f881 e000 	strb.w	lr, [r1]
 8021d0a:	fb02 f00a 	mul.w	r0, r2, sl
 8021d0e:	9a02      	ldr	r2, [sp, #8]
 8021d10:	122d      	asrs	r5, r5, #8
 8021d12:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021d16:	704d      	strb	r5, [r1, #1]
 8021d18:	fb0b c909 	mla	r9, fp, r9, ip
 8021d1c:	fb03 9606 	mla	r6, r3, r6, r9
 8021d20:	1236      	asrs	r6, r6, #8
 8021d22:	708e      	strb	r6, [r1, #2]
 8021d24:	b005      	add	sp, #20
 8021d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d2a:	bf00      	nop
 8021d2c:	0802df2f 	.word	0x0802df2f
 8021d30:	0802e497 	.word	0x0802e497
 8021d34:	0802dff8 	.word	0x0802dff8

08021d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d3c:	ed2d 8b08 	vpush	{d8-d11}
 8021d40:	b09b      	sub	sp, #108	; 0x6c
 8021d42:	eeb0 aa40 	vmov.f32	s20, s0
 8021d46:	eef0 9a60 	vmov.f32	s19, s1
 8021d4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8021d4c:	eeb0 9a41 	vmov.f32	s18, s2
 8021d50:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021d52:	eeb0 8a62 	vmov.f32	s16, s5
 8021d56:	9019      	str	r0, [sp, #100]	; 0x64
 8021d58:	eef0 8a43 	vmov.f32	s17, s6
 8021d5c:	6850      	ldr	r0, [r2, #4]
 8021d5e:	eef0 ba44 	vmov.f32	s23, s8
 8021d62:	9109      	str	r1, [sp, #36]	; 0x24
 8021d64:	eeb0 ba64 	vmov.f32	s22, s9
 8021d68:	9306      	str	r3, [sp, #24]
 8021d6a:	eef0 aa45 	vmov.f32	s21, s10
 8021d6e:	6812      	ldr	r2, [r2, #0]
 8021d70:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8021d74:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8021d78:	fb00 1303 	mla	r3, r0, r3, r1
 8021d7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d80:	18d3      	adds	r3, r2, r3
 8021d82:	9307      	str	r3, [sp, #28]
 8021d84:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d86:	681b      	ldr	r3, [r3, #0]
 8021d88:	9308      	str	r3, [sp, #32]
 8021d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	dc03      	bgt.n	8021d98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d92:	2b00      	cmp	r3, #0
 8021d94:	f340 81ab 	ble.w	80220ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8021d98:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021da2:	1e48      	subs	r0, r1, #1
 8021da4:	1e55      	subs	r5, r2, #1
 8021da6:	9b06      	ldr	r3, [sp, #24]
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	f340 80b1 	ble.w	8021f10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021dae:	ea5f 462b 	movs.w	r6, fp, asr #16
 8021db2:	ea4f 4324 	mov.w	r3, r4, asr #16
 8021db6:	d406      	bmi.n	8021dc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021db8:	4286      	cmp	r6, r0
 8021dba:	da04      	bge.n	8021dc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021dbc:	2b00      	cmp	r3, #0
 8021dbe:	db02      	blt.n	8021dc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021dc0:	42ab      	cmp	r3, r5
 8021dc2:	f2c0 80a6 	blt.w	8021f12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8021dc6:	3601      	adds	r6, #1
 8021dc8:	f100 8097 	bmi.w	8021efa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021dcc:	42b1      	cmp	r1, r6
 8021dce:	f2c0 8094 	blt.w	8021efa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021dd2:	3301      	adds	r3, #1
 8021dd4:	f100 8091 	bmi.w	8021efa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021dd8:	429a      	cmp	r2, r3
 8021dda:	f2c0 808e 	blt.w	8021efa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021dde:	9b06      	ldr	r3, [sp, #24]
 8021de0:	9e07      	ldr	r6, [sp, #28]
 8021de2:	930a      	str	r3, [sp, #40]	; 0x28
 8021de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	f340 80b0 	ble.w	8021f4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021dec:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8021dee:	1425      	asrs	r5, r4, #16
 8021df0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021df2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021df6:	68c7      	ldr	r7, [r0, #12]
 8021df8:	ea5f 402b 	movs.w	r0, fp, asr #16
 8021dfc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021e00:	689b      	ldr	r3, [r3, #8]
 8021e02:	f100 80ea 	bmi.w	8021fda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021e06:	f103 3cff 	add.w	ip, r3, #4294967295
 8021e0a:	4560      	cmp	r0, ip
 8021e0c:	f280 80e5 	bge.w	8021fda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021e10:	2d00      	cmp	r5, #0
 8021e12:	f2c0 80e2 	blt.w	8021fda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021e16:	f107 3cff 	add.w	ip, r7, #4294967295
 8021e1a:	4565      	cmp	r5, ip
 8021e1c:	f280 80dd 	bge.w	8021fda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021e20:	b21b      	sxth	r3, r3
 8021e22:	fb05 0003 	mla	r0, r5, r3, r0
 8021e26:	9d08      	ldr	r5, [sp, #32]
 8021e28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021e2c:	182f      	adds	r7, r5, r0
 8021e2e:	5c2d      	ldrb	r5, [r5, r0]
 8021e30:	7878      	ldrb	r0, [r7, #1]
 8021e32:	f897 e002 	ldrb.w	lr, [r7, #2]
 8021e36:	900c      	str	r0, [sp, #48]	; 0x30
 8021e38:	f897 9003 	ldrb.w	r9, [r7, #3]
 8021e3c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8021e40:	f897 a005 	ldrb.w	sl, [r7, #5]
 8021e44:	b1c9      	cbz	r1, 8021e7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021e46:	f04f 0c03 	mov.w	ip, #3
 8021e4a:	f06f 0004 	mvn.w	r0, #4
 8021e4e:	3705      	adds	r7, #5
 8021e50:	fb13 030c 	smlabb	r3, r3, ip, r0
 8021e54:	eb07 0c03 	add.w	ip, r7, r3
 8021e58:	5cfb      	ldrb	r3, [r7, r3]
 8021e5a:	930d      	str	r3, [sp, #52]	; 0x34
 8021e5c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021e60:	930f      	str	r3, [sp, #60]	; 0x3c
 8021e62:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8021e66:	9311      	str	r3, [sp, #68]	; 0x44
 8021e68:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8021e6e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8021e72:	9310      	str	r3, [sp, #64]	; 0x40
 8021e74:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8021e78:	9312      	str	r3, [sp, #72]	; 0x48
 8021e7a:	b292      	uxth	r2, r2
 8021e7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021e7e:	b289      	uxth	r1, r1
 8021e80:	fb02 f301 	mul.w	r3, r2, r1
 8021e84:	0112      	lsls	r2, r2, #4
 8021e86:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021e8a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021e8e:	1ad2      	subs	r2, r2, r3
 8021e90:	b289      	uxth	r1, r1
 8021e92:	b292      	uxth	r2, r2
 8021e94:	1a7f      	subs	r7, r7, r1
 8021e96:	fb02 f909 	mul.w	r9, r2, r9
 8021e9a:	b2bf      	uxth	r7, r7
 8021e9c:	fb02 f808 	mul.w	r8, r2, r8
 8021ea0:	fb02 fa0a 	mul.w	sl, r2, sl
 8021ea4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021ea6:	fb07 9905 	mla	r9, r7, r5, r9
 8021eaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021eac:	fb07 8800 	mla	r8, r7, r0, r8
 8021eb0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021eb2:	fb07 aa0e 	mla	sl, r7, lr, sl
 8021eb6:	fb01 9905 	mla	r9, r1, r5, r9
 8021eba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021ebc:	fb01 8800 	mla	r8, r1, r0, r8
 8021ec0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021ec2:	fb01 a102 	mla	r1, r1, r2, sl
 8021ec6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021ec8:	fb03 9905 	mla	r9, r3, r5, r9
 8021ecc:	fb03 8800 	mla	r8, r3, r0, r8
 8021ed0:	fb03 1302 	mla	r3, r3, r2, r1
 8021ed4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021ed8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021edc:	121b      	asrs	r3, r3, #8
 8021ede:	f886 9000 	strb.w	r9, [r6]
 8021ee2:	f886 8001 	strb.w	r8, [r6, #1]
 8021ee6:	70b3      	strb	r3, [r6, #2]
 8021ee8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021eea:	3603      	adds	r6, #3
 8021eec:	449b      	add	fp, r3
 8021eee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021ef0:	441c      	add	r4, r3
 8021ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ef4:	3b01      	subs	r3, #1
 8021ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8021ef8:	e774      	b.n	8021de4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8021efa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021efc:	449b      	add	fp, r3
 8021efe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021f00:	441c      	add	r4, r3
 8021f02:	9b06      	ldr	r3, [sp, #24]
 8021f04:	3b01      	subs	r3, #1
 8021f06:	9306      	str	r3, [sp, #24]
 8021f08:	9b07      	ldr	r3, [sp, #28]
 8021f0a:	3303      	adds	r3, #3
 8021f0c:	9307      	str	r3, [sp, #28]
 8021f0e:	e74a      	b.n	8021da6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021f10:	d024      	beq.n	8021f5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021f12:	9b06      	ldr	r3, [sp, #24]
 8021f14:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8021f16:	3b01      	subs	r3, #1
 8021f18:	fb00 b003 	mla	r0, r0, r3, fp
 8021f1c:	1400      	asrs	r0, r0, #16
 8021f1e:	f53f af5e 	bmi.w	8021dde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021f22:	3901      	subs	r1, #1
 8021f24:	4288      	cmp	r0, r1
 8021f26:	f6bf af5a 	bge.w	8021dde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021f2a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8021f2c:	fb01 4303 	mla	r3, r1, r3, r4
 8021f30:	141b      	asrs	r3, r3, #16
 8021f32:	f53f af54 	bmi.w	8021dde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021f36:	3a01      	subs	r2, #1
 8021f38:	4293      	cmp	r3, r2
 8021f3a:	f6bf af50 	bge.w	8021dde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021f3e:	9b07      	ldr	r3, [sp, #28]
 8021f40:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021f44:	1cde      	adds	r6, r3, #3
 8021f46:	f1be 0f00 	cmp.w	lr, #0
 8021f4a:	dc5f      	bgt.n	802200c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8021f4c:	9b06      	ldr	r3, [sp, #24]
 8021f4e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021f52:	9b07      	ldr	r3, [sp, #28]
 8021f54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021f58:	4423      	add	r3, r4
 8021f5a:	9307      	str	r3, [sp, #28]
 8021f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f5e:	2b00      	cmp	r3, #0
 8021f60:	f340 80c5 	ble.w	80220ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8021f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021f6a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021f6e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021f72:	eef0 6a48 	vmov.f32	s13, s16
 8021f76:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021f7a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021f7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f82:	ee16 ba90 	vmov	fp, s13
 8021f86:	eef0 6a68 	vmov.f32	s13, s17
 8021f8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f8e:	ee16 4a90 	vmov	r4, s13
 8021f92:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021f96:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021f9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021f9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021fa2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021fa6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021faa:	ee18 2a10 	vmov	r2, s16
 8021fae:	eeb0 8a47 	vmov.f32	s16, s14
 8021fb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fb6:	ee18 2a90 	vmov	r2, s17
 8021fba:	932f      	str	r3, [sp, #188]	; 0xbc
 8021fbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021fbe:	eef0 8a67 	vmov.f32	s17, s15
 8021fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fc6:	9330      	str	r3, [sp, #192]	; 0xc0
 8021fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021fcc:	3b01      	subs	r3, #1
 8021fce:	9309      	str	r3, [sp, #36]	; 0x24
 8021fd0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021fd2:	bf08      	it	eq
 8021fd4:	4613      	moveq	r3, r2
 8021fd6:	9306      	str	r3, [sp, #24]
 8021fd8:	e6d7      	b.n	8021d8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021fda:	f110 0c01 	adds.w	ip, r0, #1
 8021fde:	d483      	bmi.n	8021ee8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8021fe0:	4563      	cmp	r3, ip
 8021fe2:	db81      	blt.n	8021ee8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8021fe4:	f115 0c01 	adds.w	ip, r5, #1
 8021fe8:	f53f af7e 	bmi.w	8021ee8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8021fec:	4567      	cmp	r7, ip
 8021fee:	f6ff af7b 	blt.w	8021ee8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8021ff2:	b23f      	sxth	r7, r7
 8021ff4:	b21b      	sxth	r3, r3
 8021ff6:	9700      	str	r7, [sp, #0]
 8021ff8:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8021ffc:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8022000:	9a08      	ldr	r2, [sp, #32]
 8022002:	4631      	mov	r1, r6
 8022004:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022006:	f7ff fdcf 	bl	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802200a:	e76d      	b.n	8021ee8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802200c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802200e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022012:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022016:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802201a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802201e:	1421      	asrs	r1, r4, #16
 8022020:	930a      	str	r3, [sp, #40]	; 0x28
 8022022:	fb0c 0101 	mla	r1, ip, r1, r0
 8022026:	9808      	ldr	r0, [sp, #32]
 8022028:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802202c:	1845      	adds	r5, r0, r1
 802202e:	5c40      	ldrb	r0, [r0, r1]
 8022030:	796f      	ldrb	r7, [r5, #5]
 8022032:	7869      	ldrb	r1, [r5, #1]
 8022034:	f895 8002 	ldrb.w	r8, [r5, #2]
 8022038:	f895 a003 	ldrb.w	sl, [r5, #3]
 802203c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022040:	970c      	str	r7, [sp, #48]	; 0x30
 8022042:	b1a2      	cbz	r2, 802206e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8022044:	2703      	movs	r7, #3
 8022046:	f06f 0304 	mvn.w	r3, #4
 802204a:	3505      	adds	r5, #5
 802204c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022050:	eb05 070c 	add.w	r7, r5, ip
 8022054:	f815 500c 	ldrb.w	r5, [r5, ip]
 8022058:	9513      	str	r5, [sp, #76]	; 0x4c
 802205a:	787d      	ldrb	r5, [r7, #1]
 802205c:	9515      	str	r5, [sp, #84]	; 0x54
 802205e:	78bd      	ldrb	r5, [r7, #2]
 8022060:	9517      	str	r5, [sp, #92]	; 0x5c
 8022062:	78fd      	ldrb	r5, [r7, #3]
 8022064:	9514      	str	r5, [sp, #80]	; 0x50
 8022066:	793d      	ldrb	r5, [r7, #4]
 8022068:	9516      	str	r5, [sp, #88]	; 0x58
 802206a:	797d      	ldrb	r5, [r7, #5]
 802206c:	9518      	str	r5, [sp, #96]	; 0x60
 802206e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022072:	b292      	uxth	r2, r2
 8022074:	3603      	adds	r6, #3
 8022076:	f10e 3eff 	add.w	lr, lr, #4294967295
 802207a:	fb03 f502 	mul.w	r5, r3, r2
 802207e:	011b      	lsls	r3, r3, #4
 8022080:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8022084:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022088:	1b5b      	subs	r3, r3, r5
 802208a:	b292      	uxth	r2, r2
 802208c:	b29b      	uxth	r3, r3
 802208e:	1abf      	subs	r7, r7, r2
 8022090:	fb03 f909 	mul.w	r9, r3, r9
 8022094:	b2bf      	uxth	r7, r7
 8022096:	fb03 fa0a 	mul.w	sl, r3, sl
 802209a:	fb07 9901 	mla	r9, r7, r1, r9
 802209e:	9915      	ldr	r1, [sp, #84]	; 0x54
 80220a0:	fb07 aa00 	mla	sl, r7, r0, sl
 80220a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80220a6:	fb02 9901 	mla	r9, r2, r1, r9
 80220aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80220ac:	fb02 aa00 	mla	sl, r2, r0, sl
 80220b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80220b2:	fb05 9901 	mla	r9, r5, r1, r9
 80220b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80220b8:	fb05 aa00 	mla	sl, r5, r0, sl
 80220bc:	434b      	muls	r3, r1
 80220be:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80220c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80220c4:	fb07 3308 	mla	r3, r7, r8, r3
 80220c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80220cc:	f806 ac06 	strb.w	sl, [r6, #-6]
 80220d0:	fb02 3201 	mla	r2, r2, r1, r3
 80220d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80220d6:	f806 9c05 	strb.w	r9, [r6, #-5]
 80220da:	fb05 2503 	mla	r5, r5, r3, r2
 80220de:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80220e0:	122d      	asrs	r5, r5, #8
 80220e2:	449b      	add	fp, r3
 80220e4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80220e6:	f806 5c04 	strb.w	r5, [r6, #-4]
 80220ea:	441c      	add	r4, r3
 80220ec:	e72b      	b.n	8021f46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80220ee:	b01b      	add	sp, #108	; 0x6c
 80220f0:	ecbd 8b08 	vpop	{d8-d11}
 80220f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80220f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220fc:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8022100:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022104:	fb04 5603 	mla	r6, r4, r3, r5
 8022108:	2c00      	cmp	r4, #0
 802210a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802210e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8022112:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8022116:	db36      	blt.n	8022186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8022118:	45a6      	cmp	lr, r4
 802211a:	dd34      	ble.n	8022186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 802211c:	2d00      	cmp	r5, #0
 802211e:	db30      	blt.n	8022182 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022120:	42ab      	cmp	r3, r5
 8022122:	dd2e      	ble.n	8022182 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022124:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022128:	1c6e      	adds	r6, r5, #1
 802212a:	d42f      	bmi.n	802218c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 802212c:	42b3      	cmp	r3, r6
 802212e:	dd2d      	ble.n	802218c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8022130:	b370      	cbz	r0, 8022190 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8022132:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022136:	3401      	adds	r4, #1
 8022138:	d42e      	bmi.n	8022198 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 802213a:	45a6      	cmp	lr, r4
 802213c:	dd2c      	ble.n	8022198 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 802213e:	b377      	cbz	r7, 802219e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8022140:	2d00      	cmp	r5, #0
 8022142:	db27      	blt.n	8022194 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022144:	42ab      	cmp	r3, r5
 8022146:	dd25      	ble.n	8022194 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022148:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802214c:	3501      	adds	r5, #1
 802214e:	d429      	bmi.n	80221a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022150:	42ab      	cmp	r3, r5
 8022152:	dd27      	ble.n	80221a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022154:	b340      	cbz	r0, 80221a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8022156:	3301      	adds	r3, #1
 8022158:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 802215c:	280f      	cmp	r0, #15
 802215e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022162:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022166:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802216a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802216e:	d801      	bhi.n	8022174 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8022170:	2f0f      	cmp	r7, #15
 8022172:	d91b      	bls.n	80221ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8022174:	4b89      	ldr	r3, [pc, #548]	; (802239c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8022176:	f240 1157 	movw	r1, #343	; 0x157
 802217a:	4a89      	ldr	r2, [pc, #548]	; (80223a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802217c:	4889      	ldr	r0, [pc, #548]	; (80223a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 802217e:	f003 fe9f 	bl	8025ec0 <__assert_func>
 8022182:	2200      	movs	r2, #0
 8022184:	e7d0      	b.n	8022128 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8022186:	2600      	movs	r6, #0
 8022188:	4632      	mov	r2, r6
 802218a:	e7d4      	b.n	8022136 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 802218c:	2600      	movs	r6, #0
 802218e:	e7d2      	b.n	8022136 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022190:	4606      	mov	r6, r0
 8022192:	e7d0      	b.n	8022136 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022194:	2400      	movs	r4, #0
 8022196:	e7d9      	b.n	802214c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8022198:	2300      	movs	r3, #0
 802219a:	461c      	mov	r4, r3
 802219c:	e7de      	b.n	802215c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 802219e:	463b      	mov	r3, r7
 80221a0:	463c      	mov	r4, r7
 80221a2:	e7db      	b.n	802215c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80221a4:	2300      	movs	r3, #0
 80221a6:	e7d9      	b.n	802215c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80221a8:	4603      	mov	r3, r0
 80221aa:	e7d7      	b.n	802215c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80221ac:	b280      	uxth	r0, r0
 80221ae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80221b2:	b2bf      	uxth	r7, r7
 80221b4:	fb00 fe07 	mul.w	lr, r0, r7
 80221b8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80221bc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80221c0:	eba0 0c0e 	sub.w	ip, r0, lr
 80221c4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80221c8:	b2bf      	uxth	r7, r7
 80221ca:	fa1f fc8c 	uxth.w	ip, ip
 80221ce:	eba5 0507 	sub.w	r5, r5, r7
 80221d2:	fb0c f00a 	mul.w	r0, ip, sl
 80221d6:	b2ad      	uxth	r5, r5
 80221d8:	fb05 000b 	mla	r0, r5, fp, r0
 80221dc:	fb07 0009 	mla	r0, r7, r9, r0
 80221e0:	fb0e 0008 	mla	r0, lr, r8, r0
 80221e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80221e8:	9001      	str	r0, [sp, #4]
 80221ea:	d018      	beq.n	802221e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 80221ec:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80221f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80221f4:	fb0b f000 	mul.w	r0, fp, r0
 80221f8:	fb0b fb02 	mul.w	fp, fp, r2
 80221fc:	0a02      	lsrs	r2, r0, #8
 80221fe:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022202:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022206:	4402      	add	r2, r0
 8022208:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802220c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022210:	0a12      	lsrs	r2, r2, #8
 8022212:	0a00      	lsrs	r0, r0, #8
 8022214:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022218:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802221c:	4302      	orrs	r2, r0
 802221e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022222:	d01a      	beq.n	802225a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8022224:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022228:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802222c:	fb0a f000 	mul.w	r0, sl, r0
 8022230:	fb0a fa06 	mul.w	sl, sl, r6
 8022234:	0a06      	lsrs	r6, r0, #8
 8022236:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802223a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802223e:	4406      	add	r6, r0
 8022240:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022244:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022248:	0a36      	lsrs	r6, r6, #8
 802224a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802224e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022252:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022256:	ea46 060a 	orr.w	r6, r6, sl
 802225a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802225e:	d01b      	beq.n	8022298 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8022260:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022264:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022268:	fb09 fa0a 	mul.w	sl, r9, sl
 802226c:	fb09 f004 	mul.w	r0, r9, r4
 8022270:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022274:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022278:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802227c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022280:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022284:	4454      	add	r4, sl
 8022286:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802228a:	0a24      	lsrs	r4, r4, #8
 802228c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022290:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022294:	ea44 0409 	orr.w	r4, r4, r9
 8022298:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802229c:	d01b      	beq.n	80222d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 802229e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80222a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222a6:	fb08 f909 	mul.w	r9, r8, r9
 80222aa:	fb08 f003 	mul.w	r0, r8, r3
 80222ae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80222b2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80222b6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80222ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222be:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80222c2:	444b      	add	r3, r9
 80222c4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80222c8:	0a1b      	lsrs	r3, r3, #8
 80222ca:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80222ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222d2:	ea43 0308 	orr.w	r3, r3, r8
 80222d6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80222da:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80222de:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80222e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80222e6:	fb0c f000 	mul.w	r0, ip, r0
 80222ea:	fb0c f606 	mul.w	r6, ip, r6
 80222ee:	fb05 0808 	mla	r8, r5, r8, r0
 80222f2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80222f6:	fb05 6502 	mla	r5, r5, r2, r6
 80222fa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80222fe:	fb07 8800 	mla	r8, r7, r0, r8
 8022302:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022306:	fb07 5704 	mla	r7, r7, r4, r5
 802230a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802230e:	fb0e 8000 	mla	r0, lr, r0, r8
 8022312:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022316:	9b01      	ldr	r3, [sp, #4]
 8022318:	0a00      	lsrs	r0, r0, #8
 802231a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802231e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022322:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022326:	ea40 0e0e 	orr.w	lr, r0, lr
 802232a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802232e:	b280      	uxth	r0, r0
 8022330:	fa5f f48e 	uxtb.w	r4, lr
 8022334:	4343      	muls	r3, r0
 8022336:	fb14 f400 	smulbb	r4, r4, r0
 802233a:	1c5a      	adds	r2, r3, #1
 802233c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022340:	780b      	ldrb	r3, [r1, #0]
 8022342:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022346:	b2d2      	uxtb	r2, r2
 8022348:	fb03 4302 	mla	r3, r3, r2, r4
 802234c:	b29b      	uxth	r3, r3
 802234e:	1c5c      	adds	r4, r3, #1
 8022350:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022354:	784c      	ldrb	r4, [r1, #1]
 8022356:	fb14 f402 	smulbb	r4, r4, r2
 802235a:	121b      	asrs	r3, r3, #8
 802235c:	700b      	strb	r3, [r1, #0]
 802235e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022362:	fb03 4300 	mla	r3, r3, r0, r4
 8022366:	b29b      	uxth	r3, r3
 8022368:	1c5c      	adds	r4, r3, #1
 802236a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802236e:	121b      	asrs	r3, r3, #8
 8022370:	704b      	strb	r3, [r1, #1]
 8022372:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8022376:	f891 e002 	ldrb.w	lr, [r1, #2]
 802237a:	fb1e fe02 	smulbb	lr, lr, r2
 802237e:	fb03 ee00 	mla	lr, r3, r0, lr
 8022382:	fa1f fe8e 	uxth.w	lr, lr
 8022386:	f10e 0301 	add.w	r3, lr, #1
 802238a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802238e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022392:	f881 e002 	strb.w	lr, [r1, #2]
 8022396:	b003      	add	sp, #12
 8022398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802239c:	0802df2f 	.word	0x0802df2f
 80223a0:	0802e497 	.word	0x0802e497
 80223a4:	0802dff8 	.word	0x0802dff8

080223a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80223a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223ac:	ed2d 8b08 	vpush	{d8-d11}
 80223b0:	b09d      	sub	sp, #116	; 0x74
 80223b2:	eeb0 aa40 	vmov.f32	s20, s0
 80223b6:	eef0 9a60 	vmov.f32	s19, s1
 80223ba:	9219      	str	r2, [sp, #100]	; 0x64
 80223bc:	eeb0 9a41 	vmov.f32	s18, s2
 80223c0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80223c2:	eeb0 8a62 	vmov.f32	s16, s5
 80223c6:	9307      	str	r3, [sp, #28]
 80223c8:	eef0 8a43 	vmov.f32	s17, s6
 80223cc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80223d0:	eef0 ba44 	vmov.f32	s23, s8
 80223d4:	901b      	str	r0, [sp, #108]	; 0x6c
 80223d6:	eeb0 ba64 	vmov.f32	s22, s9
 80223da:	931a      	str	r3, [sp, #104]	; 0x68
 80223dc:	eef0 aa45 	vmov.f32	s21, s10
 80223e0:	6850      	ldr	r0, [r2, #4]
 80223e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80223e4:	6812      	ldr	r2, [r2, #0]
 80223e6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80223ea:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 80223ee:	fb00 1303 	mla	r3, r0, r3, r1
 80223f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80223f6:	18d3      	adds	r3, r2, r3
 80223f8:	930a      	str	r3, [sp, #40]	; 0x28
 80223fa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	9310      	str	r3, [sp, #64]	; 0x40
 8022400:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022404:	930b      	str	r3, [sp, #44]	; 0x2c
 8022406:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022408:	2b00      	cmp	r3, #0
 802240a:	dc03      	bgt.n	8022414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802240c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802240e:	2b00      	cmp	r3, #0
 8022410:	f340 8368 	ble.w	8022ae4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8022414:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022416:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802241a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802241e:	1e48      	subs	r0, r1, #1
 8022420:	1e57      	subs	r7, r2, #1
 8022422:	9b07      	ldr	r3, [sp, #28]
 8022424:	2b00      	cmp	r3, #0
 8022426:	f340 8187 	ble.w	8022738 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802242a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802242e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022432:	d406      	bmi.n	8022442 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022434:	4584      	cmp	ip, r0
 8022436:	da04      	bge.n	8022442 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022438:	2b00      	cmp	r3, #0
 802243a:	db02      	blt.n	8022442 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802243c:	42bb      	cmp	r3, r7
 802243e:	f2c0 817c 	blt.w	802273a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022442:	f11c 0c01 	adds.w	ip, ip, #1
 8022446:	f100 816c 	bmi.w	8022722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802244a:	4561      	cmp	r1, ip
 802244c:	f2c0 8169 	blt.w	8022722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022450:	3301      	adds	r3, #1
 8022452:	f100 8166 	bmi.w	8022722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022456:	429a      	cmp	r2, r3
 8022458:	f2c0 8163 	blt.w	8022722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802245c:	9b07      	ldr	r3, [sp, #28]
 802245e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022460:	9318      	str	r3, [sp, #96]	; 0x60
 8022462:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022464:	2b00      	cmp	r3, #0
 8022466:	f340 8186 	ble.w	8022776 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802246a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802246c:	142a      	asrs	r2, r5, #16
 802246e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022472:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022476:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802247a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802247e:	f100 81cb 	bmi.w	8022818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022482:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022486:	4542      	cmp	r2, r8
 8022488:	f280 81c6 	bge.w	8022818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802248c:	2800      	cmp	r0, #0
 802248e:	f2c0 81c3 	blt.w	8022818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022492:	f103 38ff 	add.w	r8, r3, #4294967295
 8022496:	4540      	cmp	r0, r8
 8022498:	f280 81be 	bge.w	8022818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802249c:	fa0f f38e 	sxth.w	r3, lr
 80224a0:	fb00 2203 	mla	r2, r0, r3, r2
 80224a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80224a6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80224aa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80224ae:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80224b2:	2900      	cmp	r1, #0
 80224b4:	f000 81a6 	beq.w	8022804 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 80224b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80224bc:	900c      	str	r0, [sp, #48]	; 0x30
 80224be:	0e00      	lsrs	r0, r0, #24
 80224c0:	9013      	str	r0, [sp, #76]	; 0x4c
 80224c2:	f1bc 0f00 	cmp.w	ip, #0
 80224c6:	d00f      	beq.n	80224e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80224c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80224cc:	3b01      	subs	r3, #1
 80224ce:	009b      	lsls	r3, r3, #2
 80224d0:	3304      	adds	r3, #4
 80224d2:	eb08 0003 	add.w	r0, r8, r3
 80224d6:	f858 3003 	ldr.w	r3, [r8, r3]
 80224da:	9308      	str	r3, [sp, #32]
 80224dc:	0e1b      	lsrs	r3, r3, #24
 80224de:	9311      	str	r3, [sp, #68]	; 0x44
 80224e0:	6843      	ldr	r3, [r0, #4]
 80224e2:	930d      	str	r3, [sp, #52]	; 0x34
 80224e4:	0e1b      	lsrs	r3, r3, #24
 80224e6:	9314      	str	r3, [sp, #80]	; 0x50
 80224e8:	b289      	uxth	r1, r1
 80224ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80224ec:	fa1f fc8c 	uxth.w	ip, ip
 80224f0:	0108      	lsls	r0, r1, #4
 80224f2:	fb01 f90c 	mul.w	r9, r1, ip
 80224f6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80224fa:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80224fe:	eba0 0809 	sub.w	r8, r0, r9
 8022502:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022504:	fa1f f18c 	uxth.w	r1, ip
 8022508:	fa1f f888 	uxth.w	r8, r8
 802250c:	1a5b      	subs	r3, r3, r1
 802250e:	fb08 f000 	mul.w	r0, r8, r0
 8022512:	b29b      	uxth	r3, r3
 8022514:	fb03 000e 	mla	r0, r3, lr, r0
 8022518:	fb01 0004 	mla	r0, r1, r4, r0
 802251c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802251e:	fb09 0004 	mla	r0, r9, r4, r0
 8022522:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022526:	2800      	cmp	r0, #0
 8022528:	f000 80f2 	beq.w	8022710 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802252c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022530:	d01b      	beq.n	802256a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022532:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022536:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802253a:	fb0e fa0a 	mul.w	sl, lr, sl
 802253e:	fb0e fe02 	mul.w	lr, lr, r2
 8022542:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022546:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802254a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802254e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022552:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022556:	4452      	add	r2, sl
 8022558:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802255c:	0a12      	lsrs	r2, r2, #8
 802255e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022562:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022566:	ea42 020c 	orr.w	r2, r2, ip
 802256a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802256c:	2cff      	cmp	r4, #255	; 0xff
 802256e:	d021      	beq.n	80225b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022570:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022572:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022576:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022578:	fb04 fb0b 	mul.w	fp, r4, fp
 802257c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802257e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022582:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022584:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022588:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802258c:	fb04 fa0a 	mul.w	sl, r4, sl
 8022590:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022594:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022598:	44de      	add	lr, fp
 802259a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802259e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80225a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80225a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80225aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80225ae:	ea4e 040a 	orr.w	r4, lr, sl
 80225b2:	940c      	str	r4, [sp, #48]	; 0x30
 80225b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80225b6:	2cff      	cmp	r4, #255	; 0xff
 80225b8:	d021      	beq.n	80225fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80225ba:	9c08      	ldr	r4, [sp, #32]
 80225bc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80225c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80225c2:	fb04 fb0b 	mul.w	fp, r4, fp
 80225c6:	9c08      	ldr	r4, [sp, #32]
 80225c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80225cc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80225ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80225d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80225d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80225da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80225de:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80225e2:	44de      	add	lr, fp
 80225e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80225e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80225ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80225f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80225f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80225f8:	ea4e 040a 	orr.w	r4, lr, sl
 80225fc:	9408      	str	r4, [sp, #32]
 80225fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022600:	2cff      	cmp	r4, #255	; 0xff
 8022602:	d021      	beq.n	8022648 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022604:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022606:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802260a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802260c:	fb04 fb0b 	mul.w	fp, r4, fp
 8022610:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022612:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022616:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022618:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802261c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022620:	fb04 fa0a 	mul.w	sl, r4, sl
 8022624:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022628:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802262c:	44de      	add	lr, fp
 802262e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022632:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022636:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802263a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802263e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022642:	ea4e 040a 	orr.w	r4, lr, sl
 8022646:	940d      	str	r4, [sp, #52]	; 0x34
 8022648:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802264a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802264e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022652:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022656:	9c08      	ldr	r4, [sp, #32]
 8022658:	fb08 fc0c 	mul.w	ip, r8, ip
 802265c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8022660:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022664:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022666:	fb01 cc0e 	mla	ip, r1, lr, ip
 802266a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802266e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022670:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022674:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022678:	fb08 f80e 	mul.w	r8, r8, lr
 802267c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022680:	fb03 8202 	mla	r2, r3, r2, r8
 8022684:	9b08      	ldr	r3, [sp, #32]
 8022686:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802268a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802268e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022690:	fb01 220a 	mla	r2, r1, sl, r2
 8022694:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8022698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802269a:	fb09 2901 	mla	r9, r9, r1, r2
 802269e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80226a0:	4343      	muls	r3, r0
 80226a2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80226a6:	1c58      	adds	r0, r3, #1
 80226a8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80226ac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80226b0:	783b      	ldrb	r3, [r7, #0]
 80226b2:	ea4c 0c09 	orr.w	ip, ip, r9
 80226b6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80226ba:	fa5f f28c 	uxtb.w	r2, ip
 80226be:	b2c0      	uxtb	r0, r0
 80226c0:	fb12 f201 	smulbb	r2, r2, r1
 80226c4:	fb03 2300 	mla	r3, r3, r0, r2
 80226c8:	b29b      	uxth	r3, r3
 80226ca:	1c5a      	adds	r2, r3, #1
 80226cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80226d0:	787a      	ldrb	r2, [r7, #1]
 80226d2:	fb12 f200 	smulbb	r2, r2, r0
 80226d6:	121b      	asrs	r3, r3, #8
 80226d8:	703b      	strb	r3, [r7, #0]
 80226da:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80226de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80226e2:	fb03 2301 	mla	r3, r3, r1, r2
 80226e6:	b29b      	uxth	r3, r3
 80226e8:	1c5a      	adds	r2, r3, #1
 80226ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80226ee:	121b      	asrs	r3, r3, #8
 80226f0:	707b      	strb	r3, [r7, #1]
 80226f2:	78bb      	ldrb	r3, [r7, #2]
 80226f4:	fb13 f000 	smulbb	r0, r3, r0
 80226f8:	fb0c 0c01 	mla	ip, ip, r1, r0
 80226fc:	fa1f fc8c 	uxth.w	ip, ip
 8022700:	f10c 0301 	add.w	r3, ip, #1
 8022704:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022708:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802270c:	f887 c002 	strb.w	ip, [r7, #2]
 8022710:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022712:	3703      	adds	r7, #3
 8022714:	441d      	add	r5, r3
 8022716:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022718:	441e      	add	r6, r3
 802271a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802271c:	3b01      	subs	r3, #1
 802271e:	9318      	str	r3, [sp, #96]	; 0x60
 8022720:	e69f      	b.n	8022462 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8022722:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022724:	441d      	add	r5, r3
 8022726:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022728:	441e      	add	r6, r3
 802272a:	9b07      	ldr	r3, [sp, #28]
 802272c:	3b01      	subs	r3, #1
 802272e:	9307      	str	r3, [sp, #28]
 8022730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022732:	3303      	adds	r3, #3
 8022734:	930a      	str	r3, [sp, #40]	; 0x28
 8022736:	e674      	b.n	8022422 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022738:	d025      	beq.n	8022786 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802273a:	9b07      	ldr	r3, [sp, #28]
 802273c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802273e:	3b01      	subs	r3, #1
 8022740:	fb00 5003 	mla	r0, r0, r3, r5
 8022744:	1400      	asrs	r0, r0, #16
 8022746:	f53f ae89 	bmi.w	802245c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802274a:	3901      	subs	r1, #1
 802274c:	4288      	cmp	r0, r1
 802274e:	f6bf ae85 	bge.w	802245c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022752:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8022754:	fb01 6303 	mla	r3, r1, r3, r6
 8022758:	141b      	asrs	r3, r3, #16
 802275a:	f53f ae7f 	bmi.w	802245c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802275e:	3a01      	subs	r2, #1
 8022760:	4293      	cmp	r3, r2
 8022762:	f6bf ae7b 	bge.w	802245c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022768:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802276c:	f103 0e03 	add.w	lr, r3, #3
 8022770:	f1bb 0f00 	cmp.w	fp, #0
 8022774:	dc6e      	bgt.n	8022854 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8022776:	9b07      	ldr	r3, [sp, #28]
 8022778:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802277c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802277e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022782:	4423      	add	r3, r4
 8022784:	930a      	str	r3, [sp, #40]	; 0x28
 8022786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022788:	2b00      	cmp	r3, #0
 802278a:	f340 81ab 	ble.w	8022ae4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802278e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022792:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022794:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022798:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802279c:	eef0 6a48 	vmov.f32	s13, s16
 80227a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80227a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80227a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80227ac:	ee16 5a90 	vmov	r5, s13
 80227b0:	eef0 6a68 	vmov.f32	s13, s17
 80227b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80227b8:	ee16 6a90 	vmov	r6, s13
 80227bc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80227c0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80227c4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80227c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80227cc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80227d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80227d4:	ee18 2a10 	vmov	r2, s16
 80227d8:	eeb0 8a47 	vmov.f32	s16, s14
 80227dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80227e0:	ee18 2a90 	vmov	r2, s17
 80227e4:	9331      	str	r3, [sp, #196]	; 0xc4
 80227e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80227e8:	eef0 8a67 	vmov.f32	s17, s15
 80227ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80227f0:	9332      	str	r3, [sp, #200]	; 0xc8
 80227f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80227f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80227f6:	3b01      	subs	r3, #1
 80227f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80227fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80227fc:	bf08      	it	eq
 80227fe:	4613      	moveq	r3, r2
 8022800:	9307      	str	r3, [sp, #28]
 8022802:	e600      	b.n	8022406 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022804:	f1bc 0f00 	cmp.w	ip, #0
 8022808:	f43f ae6e 	beq.w	80224e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802280c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022810:	9308      	str	r3, [sp, #32]
 8022812:	0e1b      	lsrs	r3, r3, #24
 8022814:	9311      	str	r3, [sp, #68]	; 0x44
 8022816:	e667      	b.n	80224e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022818:	f112 0801 	adds.w	r8, r2, #1
 802281c:	f53f af78 	bmi.w	8022710 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022820:	45c6      	cmp	lr, r8
 8022822:	f6ff af75 	blt.w	8022710 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022826:	f110 0801 	adds.w	r8, r0, #1
 802282a:	f53f af71 	bmi.w	8022710 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802282e:	4543      	cmp	r3, r8
 8022830:	f6ff af6e 	blt.w	8022710 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022834:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022836:	b21b      	sxth	r3, r3
 8022838:	9201      	str	r2, [sp, #4]
 802283a:	9300      	str	r3, [sp, #0]
 802283c:	fa0f f38e 	sxth.w	r3, lr
 8022840:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022846:	e9cd c404 	strd	ip, r4, [sp, #16]
 802284a:	4639      	mov	r1, r7
 802284c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802284e:	f7ff fc53 	bl	80220f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8022852:	e75d      	b.n	8022710 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022854:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022856:	142f      	asrs	r7, r5, #16
 8022858:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802285a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802285e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8022862:	1433      	asrs	r3, r6, #16
 8022864:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022868:	fb02 7303 	mla	r3, r2, r3, r7
 802286c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8022870:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022874:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022878:	2900      	cmp	r1, #0
 802287a:	f000 812a 	beq.w	8022ad2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 802287e:	687c      	ldr	r4, [r7, #4]
 8022880:	940e      	str	r4, [sp, #56]	; 0x38
 8022882:	0e24      	lsrs	r4, r4, #24
 8022884:	9415      	str	r4, [sp, #84]	; 0x54
 8022886:	b178      	cbz	r0, 80228a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8022888:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 802288c:	3a01      	subs	r2, #1
 802288e:	0092      	lsls	r2, r2, #2
 8022890:	3204      	adds	r2, #4
 8022892:	eb07 0802 	add.w	r8, r7, r2
 8022896:	58ba      	ldr	r2, [r7, r2]
 8022898:	9209      	str	r2, [sp, #36]	; 0x24
 802289a:	0e12      	lsrs	r2, r2, #24
 802289c:	9212      	str	r2, [sp, #72]	; 0x48
 802289e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80228a2:	920f      	str	r2, [sp, #60]	; 0x3c
 80228a4:	0e12      	lsrs	r2, r2, #24
 80228a6:	9216      	str	r2, [sp, #88]	; 0x58
 80228a8:	b289      	uxth	r1, r1
 80228aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80228ac:	b280      	uxth	r0, r0
 80228ae:	fb01 f900 	mul.w	r9, r1, r0
 80228b2:	0109      	lsls	r1, r1, #4
 80228b4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80228b8:	eba1 0809 	sub.w	r8, r1, r9
 80228bc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80228c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80228c2:	b280      	uxth	r0, r0
 80228c4:	fa1f f888 	uxth.w	r8, r8
 80228c8:	1a12      	subs	r2, r2, r0
 80228ca:	fb08 f101 	mul.w	r1, r8, r1
 80228ce:	b292      	uxth	r2, r2
 80228d0:	fb02 110c 	mla	r1, r2, ip, r1
 80228d4:	fb00 1104 	mla	r1, r0, r4, r1
 80228d8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80228da:	fb09 1104 	mla	r1, r9, r4, r1
 80228de:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80228e2:	2900      	cmp	r1, #0
 80228e4:	f000 80ec 	beq.w	8022ac0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80228e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80228ec:	d019      	beq.n	8022922 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 80228ee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80228f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228f6:	fb0c fa0a 	mul.w	sl, ip, sl
 80228fa:	fb0c fc03 	mul.w	ip, ip, r3
 80228fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022902:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022906:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802290a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802290e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022912:	4453      	add	r3, sl
 8022914:	0a3f      	lsrs	r7, r7, #8
 8022916:	0a1b      	lsrs	r3, r3, #8
 8022918:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802291c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022920:	433b      	orrs	r3, r7
 8022922:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022924:	2cff      	cmp	r4, #255	; 0xff
 8022926:	d020      	beq.n	802296a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8022928:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802292a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802292e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022930:	4367      	muls	r7, r4
 8022932:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022934:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022938:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802293c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802293e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022942:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022946:	fb04 fa0a 	mul.w	sl, r4, sl
 802294a:	44bc      	add	ip, r7
 802294c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022950:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022954:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022958:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802295c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022960:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022964:	ea4c 040a 	orr.w	r4, ip, sl
 8022968:	940e      	str	r4, [sp, #56]	; 0x38
 802296a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802296c:	2cff      	cmp	r4, #255	; 0xff
 802296e:	d020      	beq.n	80229b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8022970:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022972:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022976:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022978:	4367      	muls	r7, r4
 802297a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802297c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022980:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022984:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022986:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802298a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802298e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022992:	44bc      	add	ip, r7
 8022994:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022998:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802299c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80229a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80229a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80229a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80229ac:	ea4c 040a 	orr.w	r4, ip, sl
 80229b0:	9409      	str	r4, [sp, #36]	; 0x24
 80229b2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80229b4:	2cff      	cmp	r4, #255	; 0xff
 80229b6:	d020      	beq.n	80229fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 80229b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80229ba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80229be:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80229c0:	4367      	muls	r7, r4
 80229c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80229c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80229c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80229cc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80229ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80229d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80229d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80229da:	44bc      	add	ip, r7
 80229dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80229e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80229e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80229e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80229ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80229f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80229f4:	ea4c 040a 	orr.w	r4, ip, sl
 80229f8:	940f      	str	r4, [sp, #60]	; 0x3c
 80229fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80229fc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022a00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a04:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022a08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022a0a:	fb08 f707 	mul.w	r7, r8, r7
 8022a0e:	fb02 770c 	mla	r7, r2, ip, r7
 8022a12:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022a16:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022a18:	fb00 770c 	mla	r7, r0, ip, r7
 8022a1c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022a20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022a22:	fb09 770c 	mla	r7, r9, ip, r7
 8022a26:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022a2a:	fb08 f80c 	mul.w	r8, r8, ip
 8022a2e:	0a3f      	lsrs	r7, r7, #8
 8022a30:	fb02 8303 	mla	r3, r2, r3, r8
 8022a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a36:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022a3a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022a3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022a40:	fb00 330a 	mla	r3, r0, sl, r3
 8022a44:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022a48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022a4a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a54:	434b      	muls	r3, r1
 8022a56:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022a5a:	1c59      	adds	r1, r3, #1
 8022a5c:	ea47 070c 	orr.w	r7, r7, ip
 8022a60:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022a64:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022a68:	b2fa      	uxtb	r2, r7
 8022a6a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022a6e:	fb12 f200 	smulbb	r2, r2, r0
 8022a72:	b2c9      	uxtb	r1, r1
 8022a74:	fb03 2301 	mla	r3, r3, r1, r2
 8022a78:	b29b      	uxth	r3, r3
 8022a7a:	1c5a      	adds	r2, r3, #1
 8022a7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022a80:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022a84:	fb12 f201 	smulbb	r2, r2, r1
 8022a88:	121b      	asrs	r3, r3, #8
 8022a8a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022a8e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8022a92:	0c3f      	lsrs	r7, r7, #16
 8022a94:	fb03 2300 	mla	r3, r3, r0, r2
 8022a98:	b29b      	uxth	r3, r3
 8022a9a:	1c5a      	adds	r2, r3, #1
 8022a9c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022aa0:	121b      	asrs	r3, r3, #8
 8022aa2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022aa6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022aaa:	fb13 f101 	smulbb	r1, r3, r1
 8022aae:	fb07 1700 	mla	r7, r7, r0, r1
 8022ab2:	b2bf      	uxth	r7, r7
 8022ab4:	1c79      	adds	r1, r7, #1
 8022ab6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022aba:	123f      	asrs	r7, r7, #8
 8022abc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022ac0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022ac2:	f10e 0e03 	add.w	lr, lr, #3
 8022ac6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022aca:	441d      	add	r5, r3
 8022acc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022ace:	441e      	add	r6, r3
 8022ad0:	e64e      	b.n	8022770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8022ad2:	2800      	cmp	r0, #0
 8022ad4:	f43f aee8 	beq.w	80228a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8022ad8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022adc:	9209      	str	r2, [sp, #36]	; 0x24
 8022ade:	0e12      	lsrs	r2, r2, #24
 8022ae0:	9212      	str	r2, [sp, #72]	; 0x48
 8022ae2:	e6e1      	b.n	80228a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8022ae4:	b01d      	add	sp, #116	; 0x74
 8022ae6:	ecbd 8b08 	vpop	{d8-d11}
 8022aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022af0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8022af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022af4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8022af8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022afc:	fb04 5603 	mla	r6, r4, r3, r5
 8022b00:	2c00      	cmp	r4, #0
 8022b02:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8022b06:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8022b0a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8022b0e:	db36      	blt.n	8022b7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8022b10:	45a6      	cmp	lr, r4
 8022b12:	dd34      	ble.n	8022b7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8022b14:	2d00      	cmp	r5, #0
 8022b16:	db30      	blt.n	8022b7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8022b18:	42ab      	cmp	r3, r5
 8022b1a:	dd2e      	ble.n	8022b7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8022b1c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022b20:	1c6e      	adds	r6, r5, #1
 8022b22:	d42f      	bmi.n	8022b84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8022b24:	42b3      	cmp	r3, r6
 8022b26:	dd2d      	ble.n	8022b84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8022b28:	b370      	cbz	r0, 8022b88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 8022b2a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022b2e:	3401      	adds	r4, #1
 8022b30:	d42e      	bmi.n	8022b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8022b32:	45a6      	cmp	lr, r4
 8022b34:	dd2c      	ble.n	8022b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8022b36:	b377      	cbz	r7, 8022b96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8022b38:	2d00      	cmp	r5, #0
 8022b3a:	db27      	blt.n	8022b8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8022b3c:	42ab      	cmp	r3, r5
 8022b3e:	dd25      	ble.n	8022b8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8022b40:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022b44:	3501      	adds	r5, #1
 8022b46:	d429      	bmi.n	8022b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8022b48:	42ab      	cmp	r3, r5
 8022b4a:	dd27      	ble.n	8022b9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8022b4c:	b340      	cbz	r0, 8022ba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 8022b4e:	3301      	adds	r3, #1
 8022b50:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8022b54:	280f      	cmp	r0, #15
 8022b56:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022b5a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022b5e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022b62:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022b66:	d801      	bhi.n	8022b6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8022b68:	2f0f      	cmp	r7, #15
 8022b6a:	d91b      	bls.n	8022ba4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 8022b6c:	4b7e      	ldr	r3, [pc, #504]	; (8022d68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 8022b6e:	f240 1157 	movw	r1, #343	; 0x157
 8022b72:	4a7e      	ldr	r2, [pc, #504]	; (8022d6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8022b74:	487e      	ldr	r0, [pc, #504]	; (8022d70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8022b76:	f003 f9a3 	bl	8025ec0 <__assert_func>
 8022b7a:	2200      	movs	r2, #0
 8022b7c:	e7d0      	b.n	8022b20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 8022b7e:	2600      	movs	r6, #0
 8022b80:	4632      	mov	r2, r6
 8022b82:	e7d4      	b.n	8022b2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022b84:	2600      	movs	r6, #0
 8022b86:	e7d2      	b.n	8022b2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022b88:	4606      	mov	r6, r0
 8022b8a:	e7d0      	b.n	8022b2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022b8c:	2400      	movs	r4, #0
 8022b8e:	e7d9      	b.n	8022b44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8022b90:	2300      	movs	r3, #0
 8022b92:	461c      	mov	r4, r3
 8022b94:	e7de      	b.n	8022b54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022b96:	463b      	mov	r3, r7
 8022b98:	463c      	mov	r4, r7
 8022b9a:	e7db      	b.n	8022b54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022b9c:	2300      	movs	r3, #0
 8022b9e:	e7d9      	b.n	8022b54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022ba0:	4603      	mov	r3, r0
 8022ba2:	e7d7      	b.n	8022b54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022ba4:	b280      	uxth	r0, r0
 8022ba6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022baa:	b2bf      	uxth	r7, r7
 8022bac:	fb00 fe07 	mul.w	lr, r0, r7
 8022bb0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8022bb4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022bb8:	eba0 0c0e 	sub.w	ip, r0, lr
 8022bbc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022bc0:	b2bf      	uxth	r7, r7
 8022bc2:	fa1f fc8c 	uxth.w	ip, ip
 8022bc6:	eba0 0507 	sub.w	r5, r0, r7
 8022bca:	fb0c f00a 	mul.w	r0, ip, sl
 8022bce:	b2ad      	uxth	r5, r5
 8022bd0:	fb05 000b 	mla	r0, r5, fp, r0
 8022bd4:	fb07 0009 	mla	r0, r7, r9, r0
 8022bd8:	fb0e 0008 	mla	r0, lr, r8, r0
 8022bdc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022be0:	9001      	str	r0, [sp, #4]
 8022be2:	d018      	beq.n	8022c16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 8022be4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022be8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022bec:	fb0b f000 	mul.w	r0, fp, r0
 8022bf0:	fb0b fb02 	mul.w	fp, fp, r2
 8022bf4:	0a02      	lsrs	r2, r0, #8
 8022bf6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022bfa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022bfe:	4402      	add	r2, r0
 8022c00:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022c04:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022c08:	0a12      	lsrs	r2, r2, #8
 8022c0a:	0a00      	lsrs	r0, r0, #8
 8022c0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022c10:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022c14:	4302      	orrs	r2, r0
 8022c16:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022c1a:	d01a      	beq.n	8022c52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8022c1c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022c20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022c24:	fb0a f000 	mul.w	r0, sl, r0
 8022c28:	fb0a fa06 	mul.w	sl, sl, r6
 8022c2c:	0a06      	lsrs	r6, r0, #8
 8022c2e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022c32:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022c36:	4406      	add	r6, r0
 8022c38:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022c3c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022c40:	0a36      	lsrs	r6, r6, #8
 8022c42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c46:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022c4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c4e:	ea46 060a 	orr.w	r6, r6, sl
 8022c52:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022c56:	d01b      	beq.n	8022c90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8022c58:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022c5c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022c60:	fb09 fa0a 	mul.w	sl, r9, sl
 8022c64:	fb09 f004 	mul.w	r0, r9, r4
 8022c68:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022c6c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022c70:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8022c74:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022c78:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022c7c:	4454      	add	r4, sl
 8022c7e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022c82:	0a24      	lsrs	r4, r4, #8
 8022c84:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022c88:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022c8c:	ea44 0409 	orr.w	r4, r4, r9
 8022c90:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022c94:	d01b      	beq.n	8022cce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8022c96:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022c9e:	fb08 f909 	mul.w	r9, r8, r9
 8022ca2:	fb08 f003 	mul.w	r0, r8, r3
 8022ca6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022caa:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022cae:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8022cb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022cb6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8022cba:	444b      	add	r3, r9
 8022cbc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022cc0:	0a1b      	lsrs	r3, r3, #8
 8022cc2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022cc6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022cca:	ea43 0308 	orr.w	r3, r3, r8
 8022cce:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022cd2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022cd6:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8022cda:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022cde:	fb0c f000 	mul.w	r0, ip, r0
 8022ce2:	fb0c f606 	mul.w	r6, ip, r6
 8022ce6:	fb05 0808 	mla	r8, r5, r8, r0
 8022cea:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022cee:	fb05 6502 	mla	r5, r5, r2, r6
 8022cf2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022cf6:	fb07 8800 	mla	r8, r7, r0, r8
 8022cfa:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022cfe:	fb07 5704 	mla	r7, r7, r4, r5
 8022d02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022d06:	fb0e 8000 	mla	r0, lr, r0, r8
 8022d0a:	780a      	ldrb	r2, [r1, #0]
 8022d0c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022d10:	9b01      	ldr	r3, [sp, #4]
 8022d12:	0a00      	lsrs	r0, r0, #8
 8022d14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d18:	43db      	mvns	r3, r3
 8022d1a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022d1e:	b2db      	uxtb	r3, r3
 8022d20:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022d24:	ea40 0e0e 	orr.w	lr, r0, lr
 8022d28:	fb02 f003 	mul.w	r0, r2, r3
 8022d2c:	1c42      	adds	r2, r0, #1
 8022d2e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022d32:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022d36:	700a      	strb	r2, [r1, #0]
 8022d38:	784a      	ldrb	r2, [r1, #1]
 8022d3a:	435a      	muls	r2, r3
 8022d3c:	1c50      	adds	r0, r2, #1
 8022d3e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022d42:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022d46:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022d4a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022d4e:	704a      	strb	r2, [r1, #1]
 8022d50:	788a      	ldrb	r2, [r1, #2]
 8022d52:	4353      	muls	r3, r2
 8022d54:	1c5a      	adds	r2, r3, #1
 8022d56:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022d5a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022d5e:	f881 e002 	strb.w	lr, [r1, #2]
 8022d62:	b003      	add	sp, #12
 8022d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d68:	0802df2f 	.word	0x0802df2f
 8022d6c:	0802e497 	.word	0x0802e497
 8022d70:	0802dff8 	.word	0x0802dff8

08022d74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d78:	ed2d 8b08 	vpush	{d8-d11}
 8022d7c:	b099      	sub	sp, #100	; 0x64
 8022d7e:	eeb0 aa40 	vmov.f32	s20, s0
 8022d82:	eef0 9a60 	vmov.f32	s19, s1
 8022d86:	9017      	str	r0, [sp, #92]	; 0x5c
 8022d88:	eeb0 9a41 	vmov.f32	s18, s2
 8022d8c:	9306      	str	r3, [sp, #24]
 8022d8e:	eeb0 8a62 	vmov.f32	s16, s5
 8022d92:	eef0 8a43 	vmov.f32	s17, s6
 8022d96:	eef0 ba44 	vmov.f32	s23, s8
 8022d9a:	eeb0 ba64 	vmov.f32	s22, s9
 8022d9e:	eef0 aa45 	vmov.f32	s21, s10
 8022da2:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8022da6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022da8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022dac:	6850      	ldr	r0, [r2, #4]
 8022dae:	6812      	ldr	r2, [r2, #0]
 8022db0:	fb00 1303 	mla	r3, r0, r3, r1
 8022db4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022db8:	18d3      	adds	r3, r2, r3
 8022dba:	9309      	str	r3, [sp, #36]	; 0x24
 8022dbc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022dbe:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 8022dc2:	681b      	ldr	r3, [r3, #0]
 8022dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8022dc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	dc03      	bgt.n	8022dd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022dcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	f340 8360 	ble.w	8023494 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8022dd4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022dd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022dda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022dde:	1e48      	subs	r0, r1, #1
 8022de0:	1e57      	subs	r7, r2, #1
 8022de2:	9b06      	ldr	r3, [sp, #24]
 8022de4:	2b00      	cmp	r3, #0
 8022de6:	f340 817b 	ble.w	80230e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022dea:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022dee:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022df2:	d406      	bmi.n	8022e02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022df4:	4584      	cmp	ip, r0
 8022df6:	da04      	bge.n	8022e02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	db02      	blt.n	8022e02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022dfc:	42bb      	cmp	r3, r7
 8022dfe:	f2c0 8170 	blt.w	80230e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022e02:	f11c 0c01 	adds.w	ip, ip, #1
 8022e06:	f100 8160 	bmi.w	80230ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022e0a:	4561      	cmp	r1, ip
 8022e0c:	f2c0 815d 	blt.w	80230ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022e10:	3301      	adds	r3, #1
 8022e12:	f100 815a 	bmi.w	80230ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022e16:	429a      	cmp	r2, r3
 8022e18:	f2c0 8157 	blt.w	80230ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022e1c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022e20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022e22:	f1b8 0f00 	cmp.w	r8, #0
 8022e26:	f340 8179 	ble.w	802311c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8022e2a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8022e2c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022e30:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022e32:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022e36:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022e3a:	142a      	asrs	r2, r5, #16
 8022e3c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022e40:	689b      	ldr	r3, [r3, #8]
 8022e42:	f100 81be 	bmi.w	80231c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022e46:	f103 39ff 	add.w	r9, r3, #4294967295
 8022e4a:	454a      	cmp	r2, r9
 8022e4c:	f280 81b9 	bge.w	80231c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022e50:	f1bc 0f00 	cmp.w	ip, #0
 8022e54:	f2c0 81b5 	blt.w	80231c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022e58:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022e5c:	45cc      	cmp	ip, r9
 8022e5e:	f280 81b0 	bge.w	80231c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022e62:	b21b      	sxth	r3, r3
 8022e64:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022e66:	fb0c 2203 	mla	r2, ip, r3, r2
 8022e6a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8022e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022e72:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022e76:	2900      	cmp	r1, #0
 8022e78:	f000 8197 	beq.w	80231aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8022e7c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8022e80:	940a      	str	r4, [sp, #40]	; 0x28
 8022e82:	0e24      	lsrs	r4, r4, #24
 8022e84:	9411      	str	r4, [sp, #68]	; 0x44
 8022e86:	b180      	cbz	r0, 8022eaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022e8c:	3b01      	subs	r3, #1
 8022e8e:	009b      	lsls	r3, r3, #2
 8022e90:	3304      	adds	r3, #4
 8022e92:	eb09 0c03 	add.w	ip, r9, r3
 8022e96:	f859 3003 	ldr.w	r3, [r9, r3]
 8022e9a:	9307      	str	r3, [sp, #28]
 8022e9c:	0e1b      	lsrs	r3, r3, #24
 8022e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ea0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022ea4:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ea6:	0e1b      	lsrs	r3, r3, #24
 8022ea8:	9312      	str	r3, [sp, #72]	; 0x48
 8022eaa:	b289      	uxth	r1, r1
 8022eac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022eae:	b280      	uxth	r0, r0
 8022eb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022eb2:	fb01 fa00 	mul.w	sl, r1, r0
 8022eb6:	0109      	lsls	r1, r1, #4
 8022eb8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022ebc:	eba1 090a 	sub.w	r9, r1, sl
 8022ec0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8022ec4:	b280      	uxth	r0, r0
 8022ec6:	fa1f f989 	uxth.w	r9, r9
 8022eca:	1a09      	subs	r1, r1, r0
 8022ecc:	fb09 f303 	mul.w	r3, r9, r3
 8022ed0:	b289      	uxth	r1, r1
 8022ed2:	fb01 330e 	mla	r3, r1, lr, r3
 8022ed6:	fb00 3304 	mla	r3, r0, r4, r3
 8022eda:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022edc:	fb0a 3304 	mla	r3, sl, r4, r3
 8022ee0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022ee4:	2b00      	cmp	r3, #0
 8022ee6:	f000 80e8 	beq.w	80230ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8022eea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022eee:	d01b      	beq.n	8022f28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022ef0:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8022ef4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022ef8:	fb0e fb0b 	mul.w	fp, lr, fp
 8022efc:	fb0e fe02 	mul.w	lr, lr, r2
 8022f00:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8022f04:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022f08:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022f0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022f10:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022f14:	445a      	add	r2, fp
 8022f16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f1a:	0a12      	lsrs	r2, r2, #8
 8022f1c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022f20:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022f24:	ea42 020c 	orr.w	r2, r2, ip
 8022f28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022f2a:	2cff      	cmp	r4, #255	; 0xff
 8022f2c:	d021      	beq.n	8022f72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8022f2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022f30:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022f34:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022f36:	fb04 fc0c 	mul.w	ip, r4, ip
 8022f3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022f3c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022f40:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022f44:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022f46:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022f4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f4e:	fb04 fb0b 	mul.w	fp, r4, fp
 8022f52:	44e6      	add	lr, ip
 8022f54:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022f58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f5c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022f60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f64:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022f68:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022f6c:	ea4e 040b 	orr.w	r4, lr, fp
 8022f70:	940a      	str	r4, [sp, #40]	; 0x28
 8022f72:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022f74:	2cff      	cmp	r4, #255	; 0xff
 8022f76:	d021      	beq.n	8022fbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022f78:	9c07      	ldr	r4, [sp, #28]
 8022f7a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022f7e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022f80:	fb04 fc0c 	mul.w	ip, r4, ip
 8022f84:	9c07      	ldr	r4, [sp, #28]
 8022f86:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022f8a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022f8e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022f90:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022f94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f98:	fb04 fb0b 	mul.w	fp, r4, fp
 8022f9c:	44e6      	add	lr, ip
 8022f9e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022fa2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022fa6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022faa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022fae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022fb2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022fb6:	ea4e 040b 	orr.w	r4, lr, fp
 8022fba:	9407      	str	r4, [sp, #28]
 8022fbc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022fbe:	2cff      	cmp	r4, #255	; 0xff
 8022fc0:	d021      	beq.n	8023006 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8022fc2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022fc4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022fc8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022fca:	fb04 fc0c 	mul.w	ip, r4, ip
 8022fce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022fd0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022fd4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022fd8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022fda:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022fde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022fe2:	fb04 fb0b 	mul.w	fp, r4, fp
 8022fe6:	44e6      	add	lr, ip
 8022fe8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022fec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ff0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022ff4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ff8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022ffc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023000:	ea4e 040b 	orr.w	r4, lr, fp
 8023004:	940b      	str	r4, [sp, #44]	; 0x2c
 8023006:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023008:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802300c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023010:	2bff      	cmp	r3, #255	; 0xff
 8023012:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023016:	9c07      	ldr	r4, [sp, #28]
 8023018:	fb09 fc0c 	mul.w	ip, r9, ip
 802301c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023020:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023024:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023026:	fb00 cc0e 	mla	ip, r0, lr, ip
 802302a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802302e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023030:	fb0a cc0e 	mla	ip, sl, lr, ip
 8023034:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023038:	fb09 f90e 	mul.w	r9, r9, lr
 802303c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023040:	fb01 9202 	mla	r2, r1, r2, r9
 8023044:	9907      	ldr	r1, [sp, #28]
 8023046:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802304a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 802304e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023050:	fb00 220b 	mla	r2, r0, fp, r2
 8023054:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023058:	fb0a 2a00 	mla	sl, sl, r0, r2
 802305c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023060:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023064:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023068:	fa5f f08c 	uxtb.w	r0, ip
 802306c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023070:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023074:	f000 80a2 	beq.w	80231bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023078:	43db      	mvns	r3, r3
 802307a:	783a      	ldrb	r2, [r7, #0]
 802307c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8023080:	b2db      	uxtb	r3, r3
 8023082:	fb02 fe03 	mul.w	lr, r2, r3
 8023086:	fb0a fa03 	mul.w	sl, sl, r3
 802308a:	f10e 0201 	add.w	r2, lr, #1
 802308e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8023092:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023096:	703a      	strb	r2, [r7, #0]
 8023098:	787a      	ldrb	r2, [r7, #1]
 802309a:	fb02 f003 	mul.w	r0, r2, r3
 802309e:	f10a 0301 	add.w	r3, sl, #1
 80230a2:	1c42      	adds	r2, r0, #1
 80230a4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80230a8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80230ac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80230b0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80230b4:	707a      	strb	r2, [r7, #1]
 80230b6:	f887 c002 	strb.w	ip, [r7, #2]
 80230ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80230bc:	3703      	adds	r7, #3
 80230be:	f108 38ff 	add.w	r8, r8, #4294967295
 80230c2:	441d      	add	r5, r3
 80230c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80230c6:	441e      	add	r6, r3
 80230c8:	e6ab      	b.n	8022e22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80230ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80230cc:	441d      	add	r5, r3
 80230ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80230d0:	441e      	add	r6, r3
 80230d2:	9b06      	ldr	r3, [sp, #24]
 80230d4:	3b01      	subs	r3, #1
 80230d6:	9306      	str	r3, [sp, #24]
 80230d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80230da:	3303      	adds	r3, #3
 80230dc:	9309      	str	r3, [sp, #36]	; 0x24
 80230de:	e680      	b.n	8022de2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80230e0:	d024      	beq.n	802312c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 80230e2:	9b06      	ldr	r3, [sp, #24]
 80230e4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80230e6:	3b01      	subs	r3, #1
 80230e8:	fb00 5003 	mla	r0, r0, r3, r5
 80230ec:	1400      	asrs	r0, r0, #16
 80230ee:	f53f ae95 	bmi.w	8022e1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80230f2:	3901      	subs	r1, #1
 80230f4:	4288      	cmp	r0, r1
 80230f6:	f6bf ae91 	bge.w	8022e1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80230fa:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80230fc:	fb01 6303 	mla	r3, r1, r3, r6
 8023100:	141b      	asrs	r3, r3, #16
 8023102:	f53f ae8b 	bmi.w	8022e1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023106:	3a01      	subs	r2, #1
 8023108:	4293      	cmp	r3, r2
 802310a:	f6bf ae87 	bge.w	8022e1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802310e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023110:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023114:	1cdf      	adds	r7, r3, #3
 8023116:	f1bb 0f00 	cmp.w	fp, #0
 802311a:	dc6e      	bgt.n	80231fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802311c:	9b06      	ldr	r3, [sp, #24]
 802311e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023124:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023128:	4423      	add	r3, r4
 802312a:	9309      	str	r3, [sp, #36]	; 0x24
 802312c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802312e:	2b00      	cmp	r3, #0
 8023130:	f340 81b0 	ble.w	8023494 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8023134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023138:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802313a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802313e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023142:	eef0 6a48 	vmov.f32	s13, s16
 8023146:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802314a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802314e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023152:	ee16 5a90 	vmov	r5, s13
 8023156:	eef0 6a68 	vmov.f32	s13, s17
 802315a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802315e:	ee16 6a90 	vmov	r6, s13
 8023162:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023166:	ee69 7a27 	vmul.f32	s15, s18, s15
 802316a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802316e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023172:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023176:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802317a:	ee18 2a10 	vmov	r2, s16
 802317e:	eeb0 8a47 	vmov.f32	s16, s14
 8023182:	fb92 f3f3 	sdiv	r3, r2, r3
 8023186:	ee18 2a90 	vmov	r2, s17
 802318a:	932d      	str	r3, [sp, #180]	; 0xb4
 802318c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802318e:	eef0 8a67 	vmov.f32	s17, s15
 8023192:	fb92 f3f3 	sdiv	r3, r2, r3
 8023196:	932e      	str	r3, [sp, #184]	; 0xb8
 8023198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802319a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802319c:	3b01      	subs	r3, #1
 802319e:	9315      	str	r3, [sp, #84]	; 0x54
 80231a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80231a2:	bf08      	it	eq
 80231a4:	4613      	moveq	r3, r2
 80231a6:	9306      	str	r3, [sp, #24]
 80231a8:	e60d      	b.n	8022dc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80231aa:	2800      	cmp	r0, #0
 80231ac:	f43f ae7d 	beq.w	8022eaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80231b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80231b4:	9307      	str	r3, [sp, #28]
 80231b6:	0e1b      	lsrs	r3, r3, #24
 80231b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80231ba:	e676      	b.n	8022eaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80231bc:	7038      	strb	r0, [r7, #0]
 80231be:	7079      	strb	r1, [r7, #1]
 80231c0:	e779      	b.n	80230b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80231c2:	f112 0901 	adds.w	r9, r2, #1
 80231c6:	f53f af78 	bmi.w	80230ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80231ca:	454b      	cmp	r3, r9
 80231cc:	f6ff af75 	blt.w	80230ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80231d0:	f11c 0901 	adds.w	r9, ip, #1
 80231d4:	f53f af71 	bmi.w	80230ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80231d8:	45ce      	cmp	lr, r9
 80231da:	f6ff af6e 	blt.w	80230ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80231de:	b21b      	sxth	r3, r3
 80231e0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80231e4:	fa0f f28e 	sxth.w	r2, lr
 80231e8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80231ec:	9200      	str	r2, [sp, #0]
 80231ee:	4639      	mov	r1, r7
 80231f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80231f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80231f4:	f7ff fc7c 	bl	8022af0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80231f8:	e75f      	b.n	80230ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80231fa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80231fc:	1429      	asrs	r1, r5, #16
 80231fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023200:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023204:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8023208:	1433      	asrs	r3, r6, #16
 802320a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802320e:	fb0c 1303 	mla	r3, ip, r3, r1
 8023212:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023214:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023218:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802321c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023220:	2a00      	cmp	r2, #0
 8023222:	f000 8129 	beq.w	8023478 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023226:	684c      	ldr	r4, [r1, #4]
 8023228:	940c      	str	r4, [sp, #48]	; 0x30
 802322a:	0e24      	lsrs	r4, r4, #24
 802322c:	9413      	str	r4, [sp, #76]	; 0x4c
 802322e:	b198      	cbz	r0, 8023258 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023230:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8023234:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023238:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802323c:	f10c 0c04 	add.w	ip, ip, #4
 8023240:	eb01 080c 	add.w	r8, r1, ip
 8023244:	f851 100c 	ldr.w	r1, [r1, ip]
 8023248:	9108      	str	r1, [sp, #32]
 802324a:	0e09      	lsrs	r1, r1, #24
 802324c:	9110      	str	r1, [sp, #64]	; 0x40
 802324e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023252:	910d      	str	r1, [sp, #52]	; 0x34
 8023254:	0e09      	lsrs	r1, r1, #24
 8023256:	9114      	str	r1, [sp, #80]	; 0x50
 8023258:	b292      	uxth	r2, r2
 802325a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802325c:	b280      	uxth	r0, r0
 802325e:	fb02 f900 	mul.w	r9, r2, r0
 8023262:	0112      	lsls	r2, r2, #4
 8023264:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023268:	eba2 0809 	sub.w	r8, r2, r9
 802326c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023272:	b280      	uxth	r0, r0
 8023274:	fa1f f888 	uxth.w	r8, r8
 8023278:	1a09      	subs	r1, r1, r0
 802327a:	fb08 f202 	mul.w	r2, r8, r2
 802327e:	b289      	uxth	r1, r1
 8023280:	fb01 220e 	mla	r2, r1, lr, r2
 8023284:	fb00 2204 	mla	r2, r0, r4, r2
 8023288:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802328a:	fb09 2204 	mla	r2, r9, r4, r2
 802328e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023292:	2a00      	cmp	r2, #0
 8023294:	f000 80e8 	beq.w	8023468 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8023298:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802329c:	d01b      	beq.n	80232d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 802329e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80232a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80232a6:	fb0e fa0a 	mul.w	sl, lr, sl
 80232aa:	fb0e fe03 	mul.w	lr, lr, r3
 80232ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80232b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80232b6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80232ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80232be:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80232c2:	4453      	add	r3, sl
 80232c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232c8:	0a1b      	lsrs	r3, r3, #8
 80232ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80232ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80232d2:	ea43 030c 	orr.w	r3, r3, ip
 80232d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80232d8:	2cff      	cmp	r4, #255	; 0xff
 80232da:	d021      	beq.n	8023320 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 80232dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80232de:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80232e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80232e4:	fb04 fc0c 	mul.w	ip, r4, ip
 80232e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80232ea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80232ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80232f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80232f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80232f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80232fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8023300:	44e6      	add	lr, ip
 8023302:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023306:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802330a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802330e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023312:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023316:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802331a:	ea4e 040a 	orr.w	r4, lr, sl
 802331e:	940c      	str	r4, [sp, #48]	; 0x30
 8023320:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023322:	2cff      	cmp	r4, #255	; 0xff
 8023324:	d021      	beq.n	802336a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8023326:	9c08      	ldr	r4, [sp, #32]
 8023328:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802332c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802332e:	fb04 fc0c 	mul.w	ip, r4, ip
 8023332:	9c08      	ldr	r4, [sp, #32]
 8023334:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023338:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802333a:	fb04 fa0e 	mul.w	sl, r4, lr
 802333e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023342:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023346:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802334a:	44e6      	add	lr, ip
 802334c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023350:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023354:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023358:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802335c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023360:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023364:	ea4e 040a 	orr.w	r4, lr, sl
 8023368:	9408      	str	r4, [sp, #32]
 802336a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802336c:	2cff      	cmp	r4, #255	; 0xff
 802336e:	d021      	beq.n	80233b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8023370:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023372:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023376:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023378:	fb04 fc0c 	mul.w	ip, r4, ip
 802337c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802337e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023382:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023386:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023388:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802338c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023390:	fb04 fa0a 	mul.w	sl, r4, sl
 8023394:	44e6      	add	lr, ip
 8023396:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802339a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802339e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80233a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80233ae:	ea4e 040a 	orr.w	r4, lr, sl
 80233b2:	940d      	str	r4, [sp, #52]	; 0x34
 80233b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80233b6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80233ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80233be:	2aff      	cmp	r2, #255	; 0xff
 80233c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80233c4:	9c08      	ldr	r4, [sp, #32]
 80233c6:	fb08 fc0c 	mul.w	ip, r8, ip
 80233ca:	fb01 cc0e 	mla	ip, r1, lr, ip
 80233ce:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80233d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80233d4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80233d8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80233dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80233de:	fb09 cc0e 	mla	ip, r9, lr, ip
 80233e2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80233e6:	fb08 f80e 	mul.w	r8, r8, lr
 80233ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80233ee:	fb01 8303 	mla	r3, r1, r3, r8
 80233f2:	9908      	ldr	r1, [sp, #32]
 80233f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80233f8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80233fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80233fe:	fb00 330a 	mla	r3, r0, sl, r3
 8023402:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023406:	fb09 3e0e 	mla	lr, r9, lr, r3
 802340a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802340e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023412:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023416:	fa5f f08c 	uxtb.w	r0, ip
 802341a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802341e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023422:	d032      	beq.n	802348a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8023424:	43d2      	mvns	r2, r2
 8023426:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802342a:	b2d2      	uxtb	r2, r2
 802342c:	fb0e fe02 	mul.w	lr, lr, r2
 8023430:	f10e 0301 	add.w	r3, lr, #1
 8023434:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023438:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802343c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023440:	4350      	muls	r0, r2
 8023442:	f807 3c03 	strb.w	r3, [r7, #-3]
 8023446:	1c43      	adds	r3, r0, #1
 8023448:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802344c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023450:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023454:	4353      	muls	r3, r2
 8023456:	f807 1c02 	strb.w	r1, [r7, #-2]
 802345a:	1c5a      	adds	r2, r3, #1
 802345c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023460:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023464:	f807 cc01 	strb.w	ip, [r7, #-1]
 8023468:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802346a:	3703      	adds	r7, #3
 802346c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023470:	441d      	add	r5, r3
 8023472:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023474:	441e      	add	r6, r3
 8023476:	e64e      	b.n	8023116 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8023478:	2800      	cmp	r0, #0
 802347a:	f43f aeed 	beq.w	8023258 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802347e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023482:	9108      	str	r1, [sp, #32]
 8023484:	0e09      	lsrs	r1, r1, #24
 8023486:	9110      	str	r1, [sp, #64]	; 0x40
 8023488:	e6e6      	b.n	8023258 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802348a:	f807 0c03 	strb.w	r0, [r7, #-3]
 802348e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023492:	e7e7      	b.n	8023464 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8023494:	b019      	add	sp, #100	; 0x64
 8023496:	ecbd 8b08 	vpop	{d8-d11}
 802349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080234a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80234a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234a4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80234a8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80234ac:	2800      	cmp	r0, #0
 80234ae:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80234b2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80234b6:	fb0c 0e03 	mla	lr, ip, r3, r0
 80234ba:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80234be:	db6b      	blt.n	8023598 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80234c0:	4580      	cmp	r8, r0
 80234c2:	dd69      	ble.n	8023598 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80234c4:	f1bc 0f00 	cmp.w	ip, #0
 80234c8:	db66      	blt.n	8023598 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80234ca:	45e1      	cmp	r9, ip
 80234cc:	dd64      	ble.n	8023598 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80234ce:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80234d2:	f01e 0f01 	tst.w	lr, #1
 80234d6:	5d16      	ldrb	r6, [r2, r4]
 80234d8:	bf0c      	ite	eq
 80234da:	f006 060f 	andeq.w	r6, r6, #15
 80234de:	1136      	asrne	r6, r6, #4
 80234e0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80234e4:	b2f6      	uxtb	r6, r6
 80234e6:	f110 0a01 	adds.w	sl, r0, #1
 80234ea:	d457      	bmi.n	802359c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80234ec:	45d0      	cmp	r8, sl
 80234ee:	dd55      	ble.n	802359c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80234f0:	f1bc 0f00 	cmp.w	ip, #0
 80234f4:	db52      	blt.n	802359c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80234f6:	45e1      	cmp	r9, ip
 80234f8:	dd50      	ble.n	802359c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80234fa:	2f00      	cmp	r7, #0
 80234fc:	f000 80ac 	beq.w	8023658 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8023500:	f10e 0b01 	add.w	fp, lr, #1
 8023504:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023508:	f01b 0f01 	tst.w	fp, #1
 802350c:	5d14      	ldrb	r4, [r2, r4]
 802350e:	bf0c      	ite	eq
 8023510:	f004 040f 	andeq.w	r4, r4, #15
 8023514:	1124      	asrne	r4, r4, #4
 8023516:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802351a:	b2e4      	uxtb	r4, r4
 802351c:	2d00      	cmp	r5, #0
 802351e:	f000 8096 	beq.w	802364e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8023522:	2800      	cmp	r0, #0
 8023524:	f10c 0c01 	add.w	ip, ip, #1
 8023528:	db3c      	blt.n	80235a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802352a:	4580      	cmp	r8, r0
 802352c:	dd3a      	ble.n	80235a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802352e:	f1bc 0f00 	cmp.w	ip, #0
 8023532:	db37      	blt.n	80235a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023534:	45e1      	cmp	r9, ip
 8023536:	dd35      	ble.n	80235a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8023538:	eb03 0b0e 	add.w	fp, r3, lr
 802353c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023540:	f01b 0f01 	tst.w	fp, #1
 8023544:	5c10      	ldrb	r0, [r2, r0]
 8023546:	bf0c      	ite	eq
 8023548:	f000 000f 	andeq.w	r0, r0, #15
 802354c:	1100      	asrne	r0, r0, #4
 802354e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023552:	b2c0      	uxtb	r0, r0
 8023554:	f1ba 0f00 	cmp.w	sl, #0
 8023558:	db26      	blt.n	80235a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802355a:	45d0      	cmp	r8, sl
 802355c:	dd24      	ble.n	80235a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802355e:	f1bc 0f00 	cmp.w	ip, #0
 8023562:	db21      	blt.n	80235a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023564:	45e1      	cmp	r9, ip
 8023566:	dd1f      	ble.n	80235a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023568:	b307      	cbz	r7, 80235ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802356a:	3301      	adds	r3, #1
 802356c:	449e      	add	lr, r3
 802356e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023572:	f01e 0f01 	tst.w	lr, #1
 8023576:	5cd3      	ldrb	r3, [r2, r3]
 8023578:	bf0c      	ite	eq
 802357a:	f003 030f 	andeq.w	r3, r3, #15
 802357e:	111b      	asrne	r3, r3, #4
 8023580:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023584:	b2db      	uxtb	r3, r3
 8023586:	2f0f      	cmp	r7, #15
 8023588:	d911      	bls.n	80235ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802358a:	4b35      	ldr	r3, [pc, #212]	; (8023660 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 802358c:	f240 1157 	movw	r1, #343	; 0x157
 8023590:	4a34      	ldr	r2, [pc, #208]	; (8023664 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8023592:	4835      	ldr	r0, [pc, #212]	; (8023668 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023594:	f002 fc94 	bl	8025ec0 <__assert_func>
 8023598:	2600      	movs	r6, #0
 802359a:	e7a4      	b.n	80234e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802359c:	2400      	movs	r4, #0
 802359e:	e7bd      	b.n	802351c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80235a0:	463c      	mov	r4, r7
 80235a2:	e7be      	b.n	8023522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80235a4:	2000      	movs	r0, #0
 80235a6:	e7d5      	b.n	8023554 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80235a8:	2300      	movs	r3, #0
 80235aa:	e7ec      	b.n	8023586 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 80235ac:	463b      	mov	r3, r7
 80235ae:	2d0f      	cmp	r5, #15
 80235b0:	d8eb      	bhi.n	802358a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80235b2:	b2bf      	uxth	r7, r7
 80235b4:	b2ad      	uxth	r5, r5
 80235b6:	fb07 f205 	mul.w	r2, r7, r5
 80235ba:	013f      	lsls	r7, r7, #4
 80235bc:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80235c0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80235c4:	1abf      	subs	r7, r7, r2
 80235c6:	b2ad      	uxth	r5, r5
 80235c8:	b2bf      	uxth	r7, r7
 80235ca:	ebac 0c05 	sub.w	ip, ip, r5
 80235ce:	437c      	muls	r4, r7
 80235d0:	fa1f fc8c 	uxth.w	ip, ip
 80235d4:	fb06 440c 	mla	r4, r6, ip, r4
 80235d8:	fb05 4400 	mla	r4, r5, r0, r4
 80235dc:	fb02 4203 	mla	r2, r2, r3, r4
 80235e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80235e4:	b38a      	cbz	r2, 802364a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80235e6:	4b21      	ldr	r3, [pc, #132]	; (802366c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80235e8:	681c      	ldr	r4, [r3, #0]
 80235ea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80235ee:	b2e5      	uxtb	r5, r4
 80235f0:	4353      	muls	r3, r2
 80235f2:	1c5a      	adds	r2, r3, #1
 80235f4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80235f8:	1212      	asrs	r2, r2, #8
 80235fa:	b290      	uxth	r0, r2
 80235fc:	43d2      	mvns	r2, r2
 80235fe:	fb15 f500 	smulbb	r5, r5, r0
 8023602:	b2d3      	uxtb	r3, r2
 8023604:	780a      	ldrb	r2, [r1, #0]
 8023606:	fb02 5203 	mla	r2, r2, r3, r5
 802360a:	b292      	uxth	r2, r2
 802360c:	1c55      	adds	r5, r2, #1
 802360e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023612:	784d      	ldrb	r5, [r1, #1]
 8023614:	fb15 f503 	smulbb	r5, r5, r3
 8023618:	1212      	asrs	r2, r2, #8
 802361a:	700a      	strb	r2, [r1, #0]
 802361c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023620:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023624:	fb02 5200 	mla	r2, r2, r0, r5
 8023628:	b292      	uxth	r2, r2
 802362a:	1c55      	adds	r5, r2, #1
 802362c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023630:	1212      	asrs	r2, r2, #8
 8023632:	704a      	strb	r2, [r1, #1]
 8023634:	788a      	ldrb	r2, [r1, #2]
 8023636:	fb12 f303 	smulbb	r3, r2, r3
 802363a:	fb04 3300 	mla	r3, r4, r0, r3
 802363e:	b29b      	uxth	r3, r3
 8023640:	1c5a      	adds	r2, r3, #1
 8023642:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023646:	121b      	asrs	r3, r3, #8
 8023648:	708b      	strb	r3, [r1, #2]
 802364a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802364e:	2f0f      	cmp	r7, #15
 8023650:	d89b      	bhi.n	802358a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023652:	462b      	mov	r3, r5
 8023654:	4628      	mov	r0, r5
 8023656:	e7ac      	b.n	80235b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8023658:	2d00      	cmp	r5, #0
 802365a:	d1a1      	bne.n	80235a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 802365c:	462c      	mov	r4, r5
 802365e:	e7f8      	b.n	8023652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8023660:	0802df2f 	.word	0x0802df2f
 8023664:	0802e497 	.word	0x0802e497
 8023668:	0802dff8 	.word	0x0802dff8
 802366c:	20056720 	.word	0x20056720

08023670 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023674:	ed2d 8b08 	vpush	{d8-d11}
 8023678:	b097      	sub	sp, #92	; 0x5c
 802367a:	eeb0 aa40 	vmov.f32	s20, s0
 802367e:	eef0 9a60 	vmov.f32	s19, s1
 8023682:	9214      	str	r2, [sp, #80]	; 0x50
 8023684:	eeb0 9a41 	vmov.f32	s18, s2
 8023688:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802368a:	eeb0 8a62 	vmov.f32	s16, s5
 802368e:	9309      	str	r3, [sp, #36]	; 0x24
 8023690:	eef0 8a43 	vmov.f32	s17, s6
 8023694:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023698:	eef0 ba44 	vmov.f32	s23, s8
 802369c:	9015      	str	r0, [sp, #84]	; 0x54
 802369e:	eeb0 ba64 	vmov.f32	s22, s9
 80236a2:	6850      	ldr	r0, [r2, #4]
 80236a4:	eef0 aa45 	vmov.f32	s21, s10
 80236a8:	910c      	str	r1, [sp, #48]	; 0x30
 80236aa:	930e      	str	r3, [sp, #56]	; 0x38
 80236ac:	6812      	ldr	r2, [r2, #0]
 80236ae:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80236b2:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80236b6:	fb00 1303 	mla	r3, r0, r3, r1
 80236ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80236be:	eb02 0a03 	add.w	sl, r2, r3
 80236c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80236c4:	689b      	ldr	r3, [r3, #8]
 80236c6:	3301      	adds	r3, #1
 80236c8:	f023 0301 	bic.w	r3, r3, #1
 80236cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80236ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80236d0:	681f      	ldr	r7, [r3, #0]
 80236d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80236d4:	2b00      	cmp	r3, #0
 80236d6:	dc03      	bgt.n	80236e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80236d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80236da:	2b00      	cmp	r3, #0
 80236dc:	f340 8247 	ble.w	8023b6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80236e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80236e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80236e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80236ea:	1e48      	subs	r0, r1, #1
 80236ec:	f102 3cff 	add.w	ip, r2, #4294967295
 80236f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	f340 80e5 	ble.w	80238c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80236f8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 80236fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023700:	d406      	bmi.n	8023710 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023702:	4586      	cmp	lr, r0
 8023704:	da04      	bge.n	8023710 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023706:	2b00      	cmp	r3, #0
 8023708:	db02      	blt.n	8023710 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802370a:	4563      	cmp	r3, ip
 802370c:	f2c0 80da 	blt.w	80238c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8023710:	f11e 0e01 	adds.w	lr, lr, #1
 8023714:	f100 80cb 	bmi.w	80238ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023718:	4571      	cmp	r1, lr
 802371a:	f2c0 80c8 	blt.w	80238ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802371e:	3301      	adds	r3, #1
 8023720:	f100 80c5 	bmi.w	80238ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023724:	429a      	cmp	r2, r3
 8023726:	f2c0 80c2 	blt.w	80238ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802372a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802372c:	46d0      	mov	r8, sl
 802372e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8023732:	930d      	str	r3, [sp, #52]	; 0x34
 8023734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023736:	2b00      	cmp	r3, #0
 8023738:	f340 80e3 	ble.w	8023902 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802373c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802373e:	1430      	asrs	r0, r6, #16
 8023740:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023744:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023748:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802374c:	142b      	asrs	r3, r5, #16
 802374e:	f100 812e 	bmi.w	80239ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023752:	f10c 3bff 	add.w	fp, ip, #4294967295
 8023756:	455b      	cmp	r3, fp
 8023758:	f280 8129 	bge.w	80239ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802375c:	2800      	cmp	r0, #0
 802375e:	f2c0 8126 	blt.w	80239ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023762:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023766:	4558      	cmp	r0, fp
 8023768:	f280 8121 	bge.w	80239ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802376c:	fb00 3309 	mla	r3, r0, r9, r3
 8023770:	0858      	lsrs	r0, r3, #1
 8023772:	07dc      	lsls	r4, r3, #31
 8023774:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023778:	bf54      	ite	pl
 802377a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802377e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023782:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023786:	fa5f fc8c 	uxtb.w	ip, ip
 802378a:	2a00      	cmp	r2, #0
 802378c:	f000 80fe 	beq.w	802398c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023790:	1c58      	adds	r0, r3, #1
 8023792:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023796:	07c0      	lsls	r0, r0, #31
 8023798:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802379c:	bf54      	ite	pl
 802379e:	f00e 0e0f 	andpl.w	lr, lr, #15
 80237a2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80237a6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80237aa:	fa5f f08e 	uxtb.w	r0, lr
 80237ae:	9010      	str	r0, [sp, #64]	; 0x40
 80237b0:	b1d9      	cbz	r1, 80237ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80237b2:	444b      	add	r3, r9
 80237b4:	0858      	lsrs	r0, r3, #1
 80237b6:	07dc      	lsls	r4, r3, #31
 80237b8:	f103 0301 	add.w	r3, r3, #1
 80237bc:	5c38      	ldrb	r0, [r7, r0]
 80237be:	bf54      	ite	pl
 80237c0:	f000 000f 	andpl.w	r0, r0, #15
 80237c4:	1100      	asrmi	r0, r0, #4
 80237c6:	07dc      	lsls	r4, r3, #31
 80237c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80237cc:	b2c0      	uxtb	r0, r0
 80237ce:	900a      	str	r0, [sp, #40]	; 0x28
 80237d0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80237d4:	f817 e000 	ldrb.w	lr, [r7, r0]
 80237d8:	bf54      	ite	pl
 80237da:	f00e 030f 	andpl.w	r3, lr, #15
 80237de:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80237e2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80237e6:	b2db      	uxtb	r3, r3
 80237e8:	9311      	str	r3, [sp, #68]	; 0x44
 80237ea:	b292      	uxth	r2, r2
 80237ec:	b289      	uxth	r1, r1
 80237ee:	0113      	lsls	r3, r2, #4
 80237f0:	fb02 f001 	mul.w	r0, r2, r1
 80237f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80237f6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80237fa:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80237fe:	1a1b      	subs	r3, r3, r0
 8023800:	b289      	uxth	r1, r1
 8023802:	b29b      	uxth	r3, r3
 8023804:	ebae 0e01 	sub.w	lr, lr, r1
 8023808:	4353      	muls	r3, r2
 802380a:	fa1f fe8e 	uxth.w	lr, lr
 802380e:	fb0c 320e 	mla	r2, ip, lr, r3
 8023812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023814:	fb01 2203 	mla	r2, r1, r3, r2
 8023818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802381a:	fb00 2203 	mla	r2, r0, r3, r2
 802381e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023822:	2a00      	cmp	r2, #0
 8023824:	d039      	beq.n	802389a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023826:	4bc7      	ldr	r3, [pc, #796]	; (8023b44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8023828:	6819      	ldr	r1, [r3, #0]
 802382a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802382c:	fa5f fc81 	uxtb.w	ip, r1
 8023830:	435a      	muls	r2, r3
 8023832:	1c53      	adds	r3, r2, #1
 8023834:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023838:	1212      	asrs	r2, r2, #8
 802383a:	b290      	uxth	r0, r2
 802383c:	43d2      	mvns	r2, r2
 802383e:	fb1c fc00 	smulbb	ip, ip, r0
 8023842:	b2d3      	uxtb	r3, r2
 8023844:	f898 2000 	ldrb.w	r2, [r8]
 8023848:	fb02 c203 	mla	r2, r2, r3, ip
 802384c:	b292      	uxth	r2, r2
 802384e:	f102 0c01 	add.w	ip, r2, #1
 8023852:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023856:	f898 c001 	ldrb.w	ip, [r8, #1]
 802385a:	fb1c fc03 	smulbb	ip, ip, r3
 802385e:	1212      	asrs	r2, r2, #8
 8023860:	f888 2000 	strb.w	r2, [r8]
 8023864:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8023868:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802386c:	fb02 c200 	mla	r2, r2, r0, ip
 8023870:	b292      	uxth	r2, r2
 8023872:	f102 0c01 	add.w	ip, r2, #1
 8023876:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802387a:	1212      	asrs	r2, r2, #8
 802387c:	f888 2001 	strb.w	r2, [r8, #1]
 8023880:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023884:	fb12 f303 	smulbb	r3, r2, r3
 8023888:	fb01 3300 	mla	r3, r1, r0, r3
 802388c:	b29b      	uxth	r3, r3
 802388e:	1c5a      	adds	r2, r3, #1
 8023890:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023894:	121b      	asrs	r3, r3, #8
 8023896:	f888 3002 	strb.w	r3, [r8, #2]
 802389a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802389c:	f108 0803 	add.w	r8, r8, #3
 80238a0:	441d      	add	r5, r3
 80238a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80238a4:	441e      	add	r6, r3
 80238a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80238a8:	3b01      	subs	r3, #1
 80238aa:	930d      	str	r3, [sp, #52]	; 0x34
 80238ac:	e742      	b.n	8023734 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80238ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80238b0:	f10a 0a03 	add.w	sl, sl, #3
 80238b4:	441d      	add	r5, r3
 80238b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80238b8:	441e      	add	r6, r3
 80238ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238bc:	3b01      	subs	r3, #1
 80238be:	9309      	str	r3, [sp, #36]	; 0x24
 80238c0:	e716      	b.n	80236f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80238c2:	d024      	beq.n	802390e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80238c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238c6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80238c8:	3b01      	subs	r3, #1
 80238ca:	fb00 5003 	mla	r0, r0, r3, r5
 80238ce:	1400      	asrs	r0, r0, #16
 80238d0:	f53f af2b 	bmi.w	802372a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80238d4:	3901      	subs	r1, #1
 80238d6:	4288      	cmp	r0, r1
 80238d8:	f6bf af27 	bge.w	802372a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80238dc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80238de:	fb01 6303 	mla	r3, r1, r3, r6
 80238e2:	141b      	asrs	r3, r3, #16
 80238e4:	f53f af21 	bmi.w	802372a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80238e8:	3a01      	subs	r2, #1
 80238ea:	4293      	cmp	r3, r2
 80238ec:	f6bf af1d 	bge.w	802372a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80238f0:	f10a 0e03 	add.w	lr, sl, #3
 80238f4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80238f8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80238fc:	f1b8 0f00 	cmp.w	r8, #0
 8023900:	dc76      	bgt.n	80239f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8023902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023904:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023908:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802390c:	44a2      	add	sl, r4
 802390e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023910:	2b00      	cmp	r3, #0
 8023912:	f340 812c 	ble.w	8023b6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802391a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802391c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023920:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023924:	eef0 6a48 	vmov.f32	s13, s16
 8023928:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802392c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023930:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023934:	ee16 5a90 	vmov	r5, s13
 8023938:	eef0 6a68 	vmov.f32	s13, s17
 802393c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023940:	ee16 6a90 	vmov	r6, s13
 8023944:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023948:	ee69 7a27 	vmul.f32	s15, s18, s15
 802394c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023950:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023954:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023958:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802395c:	ee18 2a10 	vmov	r2, s16
 8023960:	eeb0 8a47 	vmov.f32	s16, s14
 8023964:	fb92 f3f3 	sdiv	r3, r2, r3
 8023968:	ee18 2a90 	vmov	r2, s17
 802396c:	932b      	str	r3, [sp, #172]	; 0xac
 802396e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023970:	eef0 8a67 	vmov.f32	s17, s15
 8023974:	fb92 f3f3 	sdiv	r3, r2, r3
 8023978:	932c      	str	r3, [sp, #176]	; 0xb0
 802397a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802397c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802397e:	3b01      	subs	r3, #1
 8023980:	930c      	str	r3, [sp, #48]	; 0x30
 8023982:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023984:	bf08      	it	eq
 8023986:	4613      	moveq	r3, r2
 8023988:	9309      	str	r3, [sp, #36]	; 0x24
 802398a:	e6a2      	b.n	80236d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802398c:	2900      	cmp	r1, #0
 802398e:	f43f af2c 	beq.w	80237ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8023992:	eb09 0003 	add.w	r0, r9, r3
 8023996:	0843      	lsrs	r3, r0, #1
 8023998:	07c0      	lsls	r0, r0, #31
 802399a:	5cfb      	ldrb	r3, [r7, r3]
 802399c:	bf54      	ite	pl
 802399e:	f003 030f 	andpl.w	r3, r3, #15
 80239a2:	111b      	asrmi	r3, r3, #4
 80239a4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80239a8:	b2db      	uxtb	r3, r3
 80239aa:	930a      	str	r3, [sp, #40]	; 0x28
 80239ac:	e71d      	b.n	80237ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80239ae:	f113 0b01 	adds.w	fp, r3, #1
 80239b2:	f53f af72 	bmi.w	802389a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80239b6:	45dc      	cmp	ip, fp
 80239b8:	f6ff af6f 	blt.w	802389a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80239bc:	f110 0b01 	adds.w	fp, r0, #1
 80239c0:	f53f af6b 	bmi.w	802389a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80239c4:	45de      	cmp	lr, fp
 80239c6:	f6ff af68 	blt.w	802389a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80239ca:	9302      	str	r3, [sp, #8]
 80239cc:	fa0f f38e 	sxth.w	r3, lr
 80239d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80239d2:	9301      	str	r3, [sp, #4]
 80239d4:	fa0f f38c 	sxth.w	r3, ip
 80239d8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80239dc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80239e0:	9300      	str	r3, [sp, #0]
 80239e2:	463a      	mov	r2, r7
 80239e4:	464b      	mov	r3, r9
 80239e6:	4641      	mov	r1, r8
 80239e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80239ea:	f7ff fd59 	bl	80234a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80239ee:	e754      	b.n	802389a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80239f0:	142a      	asrs	r2, r5, #16
 80239f2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80239f6:	1433      	asrs	r3, r6, #16
 80239f8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80239fc:	fb09 2303 	mla	r3, r9, r3, r2
 8023a00:	085a      	lsrs	r2, r3, #1
 8023a02:	07dc      	lsls	r4, r3, #31
 8023a04:	5cba      	ldrb	r2, [r7, r2]
 8023a06:	bf54      	ite	pl
 8023a08:	f002 020f 	andpl.w	r2, r2, #15
 8023a0c:	1112      	asrmi	r2, r2, #4
 8023a0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023a12:	b2d2      	uxtb	r2, r2
 8023a14:	2900      	cmp	r1, #0
 8023a16:	f000 8097 	beq.w	8023b48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023a1a:	f103 0b01 	add.w	fp, r3, #1
 8023a1e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8023a22:	f01b 0f01 	tst.w	fp, #1
 8023a26:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a2a:	bf0c      	ite	eq
 8023a2c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023a30:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023a34:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a38:	fa5f f48c 	uxtb.w	r4, ip
 8023a3c:	9412      	str	r4, [sp, #72]	; 0x48
 8023a3e:	b300      	cbz	r0, 8023a82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023a40:	444b      	add	r3, r9
 8023a42:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a46:	07dc      	lsls	r4, r3, #31
 8023a48:	f103 0301 	add.w	r3, r3, #1
 8023a4c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a50:	bf54      	ite	pl
 8023a52:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023a56:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023a5a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a5e:	fa5f f48c 	uxtb.w	r4, ip
 8023a62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a66:	940b      	str	r4, [sp, #44]	; 0x2c
 8023a68:	07dc      	lsls	r4, r3, #31
 8023a6a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a6e:	bf54      	ite	pl
 8023a70:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023a74:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023a78:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a7c:	fa5f f38c 	uxtb.w	r3, ip
 8023a80:	9313      	str	r3, [sp, #76]	; 0x4c
 8023a82:	b289      	uxth	r1, r1
 8023a84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023a86:	b280      	uxth	r0, r0
 8023a88:	fb01 f300 	mul.w	r3, r1, r0
 8023a8c:	0109      	lsls	r1, r1, #4
 8023a8e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8023a92:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8023a96:	1ac9      	subs	r1, r1, r3
 8023a98:	b280      	uxth	r0, r0
 8023a9a:	b289      	uxth	r1, r1
 8023a9c:	ebac 0c00 	sub.w	ip, ip, r0
 8023aa0:	4361      	muls	r1, r4
 8023aa2:	fa1f fc8c 	uxth.w	ip, ip
 8023aa6:	fb02 120c 	mla	r2, r2, ip, r1
 8023aaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023aac:	fb00 2001 	mla	r0, r0, r1, r2
 8023ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023ab2:	fb03 0302 	mla	r3, r3, r2, r0
 8023ab6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023aba:	2b00      	cmp	r3, #0
 8023abc:	d039      	beq.n	8023b32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023abe:	4a21      	ldr	r2, [pc, #132]	; (8023b44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8023ac0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023ac4:	6810      	ldr	r0, [r2, #0]
 8023ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ac8:	fa5f fc80 	uxtb.w	ip, r0
 8023acc:	4353      	muls	r3, r2
 8023ace:	1c5a      	adds	r2, r3, #1
 8023ad0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023ad4:	121b      	asrs	r3, r3, #8
 8023ad6:	b29a      	uxth	r2, r3
 8023ad8:	43db      	mvns	r3, r3
 8023ada:	fb1c fc02 	smulbb	ip, ip, r2
 8023ade:	b2db      	uxtb	r3, r3
 8023ae0:	fb01 c103 	mla	r1, r1, r3, ip
 8023ae4:	b289      	uxth	r1, r1
 8023ae6:	f101 0c01 	add.w	ip, r1, #1
 8023aea:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023aee:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8023af2:	fb1c fc03 	smulbb	ip, ip, r3
 8023af6:	1209      	asrs	r1, r1, #8
 8023af8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023afc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8023b00:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023b04:	fb01 c102 	mla	r1, r1, r2, ip
 8023b08:	b289      	uxth	r1, r1
 8023b0a:	f101 0c01 	add.w	ip, r1, #1
 8023b0e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023b12:	1209      	asrs	r1, r1, #8
 8023b14:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023b18:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023b1c:	fb11 f303 	smulbb	r3, r1, r3
 8023b20:	fb00 3002 	mla	r0, r0, r2, r3
 8023b24:	b280      	uxth	r0, r0
 8023b26:	1c42      	adds	r2, r0, #1
 8023b28:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023b2c:	1200      	asrs	r0, r0, #8
 8023b2e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8023b32:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023b34:	f10e 0e03 	add.w	lr, lr, #3
 8023b38:	f108 38ff 	add.w	r8, r8, #4294967295
 8023b3c:	441d      	add	r5, r3
 8023b3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023b40:	441e      	add	r6, r3
 8023b42:	e6db      	b.n	80238fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023b44:	20056720 	.word	0x20056720
 8023b48:	2800      	cmp	r0, #0
 8023b4a:	d09a      	beq.n	8023a82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023b4c:	444b      	add	r3, r9
 8023b4e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023b52:	07db      	lsls	r3, r3, #31
 8023b54:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023b58:	bf54      	ite	pl
 8023b5a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023b5e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023b62:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023b66:	fa5f f38c 	uxtb.w	r3, ip
 8023b6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023b6c:	e789      	b.n	8023a82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023b6e:	b017      	add	sp, #92	; 0x5c
 8023b70:	ecbd 8b08 	vpop	{d8-d11}
 8023b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023b78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b7c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023b80:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023b84:	2800      	cmp	r0, #0
 8023b86:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023b8a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023b8e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8023b92:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023b96:	db6b      	blt.n	8023c70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023b98:	4580      	cmp	r8, r0
 8023b9a:	dd69      	ble.n	8023c70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023b9c:	f1bc 0f00 	cmp.w	ip, #0
 8023ba0:	db66      	blt.n	8023c70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023ba2:	45e1      	cmp	r9, ip
 8023ba4:	dd64      	ble.n	8023c70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023ba6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023baa:	f01e 0f01 	tst.w	lr, #1
 8023bae:	5d16      	ldrb	r6, [r2, r4]
 8023bb0:	bf0c      	ite	eq
 8023bb2:	f006 060f 	andeq.w	r6, r6, #15
 8023bb6:	1136      	asrne	r6, r6, #4
 8023bb8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023bbc:	b2f6      	uxtb	r6, r6
 8023bbe:	f110 0a01 	adds.w	sl, r0, #1
 8023bc2:	d457      	bmi.n	8023c74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023bc4:	45d0      	cmp	r8, sl
 8023bc6:	dd55      	ble.n	8023c74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023bc8:	f1bc 0f00 	cmp.w	ip, #0
 8023bcc:	db52      	blt.n	8023c74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023bce:	45e1      	cmp	r9, ip
 8023bd0:	dd50      	ble.n	8023c74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023bd2:	2f00      	cmp	r7, #0
 8023bd4:	f000 80a5 	beq.w	8023d22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8023bd8:	f10e 0b01 	add.w	fp, lr, #1
 8023bdc:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023be0:	f01b 0f01 	tst.w	fp, #1
 8023be4:	5d14      	ldrb	r4, [r2, r4]
 8023be6:	bf0c      	ite	eq
 8023be8:	f004 040f 	andeq.w	r4, r4, #15
 8023bec:	1124      	asrne	r4, r4, #4
 8023bee:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023bf2:	b2e4      	uxtb	r4, r4
 8023bf4:	2d00      	cmp	r5, #0
 8023bf6:	f000 808f 	beq.w	8023d18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023bfa:	2800      	cmp	r0, #0
 8023bfc:	f10c 0c01 	add.w	ip, ip, #1
 8023c00:	db3c      	blt.n	8023c7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023c02:	4580      	cmp	r8, r0
 8023c04:	dd3a      	ble.n	8023c7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023c06:	f1bc 0f00 	cmp.w	ip, #0
 8023c0a:	db37      	blt.n	8023c7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023c0c:	45e1      	cmp	r9, ip
 8023c0e:	dd35      	ble.n	8023c7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023c10:	eb03 0b0e 	add.w	fp, r3, lr
 8023c14:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023c18:	f01b 0f01 	tst.w	fp, #1
 8023c1c:	5c10      	ldrb	r0, [r2, r0]
 8023c1e:	bf0c      	ite	eq
 8023c20:	f000 000f 	andeq.w	r0, r0, #15
 8023c24:	1100      	asrne	r0, r0, #4
 8023c26:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023c2a:	b2c0      	uxtb	r0, r0
 8023c2c:	f1ba 0f00 	cmp.w	sl, #0
 8023c30:	db26      	blt.n	8023c80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023c32:	45d0      	cmp	r8, sl
 8023c34:	dd24      	ble.n	8023c80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023c36:	f1bc 0f00 	cmp.w	ip, #0
 8023c3a:	db21      	blt.n	8023c80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023c3c:	45e1      	cmp	r9, ip
 8023c3e:	dd1f      	ble.n	8023c80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023c40:	b307      	cbz	r7, 8023c84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8023c42:	3301      	adds	r3, #1
 8023c44:	449e      	add	lr, r3
 8023c46:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023c4a:	f01e 0f01 	tst.w	lr, #1
 8023c4e:	5cd3      	ldrb	r3, [r2, r3]
 8023c50:	bf0c      	ite	eq
 8023c52:	f003 030f 	andeq.w	r3, r3, #15
 8023c56:	111b      	asrne	r3, r3, #4
 8023c58:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023c5c:	b2db      	uxtb	r3, r3
 8023c5e:	2f0f      	cmp	r7, #15
 8023c60:	d911      	bls.n	8023c86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8023c62:	4b32      	ldr	r3, [pc, #200]	; (8023d2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8023c64:	f240 1157 	movw	r1, #343	; 0x157
 8023c68:	4a31      	ldr	r2, [pc, #196]	; (8023d30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8023c6a:	4832      	ldr	r0, [pc, #200]	; (8023d34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8023c6c:	f002 f928 	bl	8025ec0 <__assert_func>
 8023c70:	2600      	movs	r6, #0
 8023c72:	e7a4      	b.n	8023bbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8023c74:	2400      	movs	r4, #0
 8023c76:	e7bd      	b.n	8023bf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023c78:	463c      	mov	r4, r7
 8023c7a:	e7be      	b.n	8023bfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8023c7c:	2000      	movs	r0, #0
 8023c7e:	e7d5      	b.n	8023c2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8023c80:	2300      	movs	r3, #0
 8023c82:	e7ec      	b.n	8023c5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8023c84:	463b      	mov	r3, r7
 8023c86:	2d0f      	cmp	r5, #15
 8023c88:	d8eb      	bhi.n	8023c62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023c8a:	b2bf      	uxth	r7, r7
 8023c8c:	b2ad      	uxth	r5, r5
 8023c8e:	fb07 f205 	mul.w	r2, r7, r5
 8023c92:	013f      	lsls	r7, r7, #4
 8023c94:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023c98:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023c9c:	1abf      	subs	r7, r7, r2
 8023c9e:	b2ad      	uxth	r5, r5
 8023ca0:	b2bf      	uxth	r7, r7
 8023ca2:	ebac 0c05 	sub.w	ip, ip, r5
 8023ca6:	437c      	muls	r4, r7
 8023ca8:	fa1f fc8c 	uxth.w	ip, ip
 8023cac:	fb06 440c 	mla	r4, r6, ip, r4
 8023cb0:	fb05 4400 	mla	r4, r5, r0, r4
 8023cb4:	fb02 4303 	mla	r3, r2, r3, r4
 8023cb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023cbc:	b353      	cbz	r3, 8023d14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8023cbe:	4a1e      	ldr	r2, [pc, #120]	; (8023d38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8023cc0:	7808      	ldrb	r0, [r1, #0]
 8023cc2:	6814      	ldr	r4, [r2, #0]
 8023cc4:	b29a      	uxth	r2, r3
 8023cc6:	43db      	mvns	r3, r3
 8023cc8:	b2e5      	uxtb	r5, r4
 8023cca:	b2db      	uxtb	r3, r3
 8023ccc:	fb15 f502 	smulbb	r5, r5, r2
 8023cd0:	fb00 5003 	mla	r0, r0, r3, r5
 8023cd4:	b280      	uxth	r0, r0
 8023cd6:	1c45      	adds	r5, r0, #1
 8023cd8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023cdc:	784d      	ldrb	r5, [r1, #1]
 8023cde:	fb15 f503 	smulbb	r5, r5, r3
 8023ce2:	1200      	asrs	r0, r0, #8
 8023ce4:	7008      	strb	r0, [r1, #0]
 8023ce6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023cea:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023cee:	fb00 5002 	mla	r0, r0, r2, r5
 8023cf2:	b280      	uxth	r0, r0
 8023cf4:	1c45      	adds	r5, r0, #1
 8023cf6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023cfa:	1200      	asrs	r0, r0, #8
 8023cfc:	7048      	strb	r0, [r1, #1]
 8023cfe:	7888      	ldrb	r0, [r1, #2]
 8023d00:	fb10 f303 	smulbb	r3, r0, r3
 8023d04:	fb04 3202 	mla	r2, r4, r2, r3
 8023d08:	b292      	uxth	r2, r2
 8023d0a:	1c53      	adds	r3, r2, #1
 8023d0c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023d10:	1212      	asrs	r2, r2, #8
 8023d12:	708a      	strb	r2, [r1, #2]
 8023d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d18:	2f0f      	cmp	r7, #15
 8023d1a:	d8a2      	bhi.n	8023c62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023d1c:	462b      	mov	r3, r5
 8023d1e:	4628      	mov	r0, r5
 8023d20:	e7b3      	b.n	8023c8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8023d22:	2d00      	cmp	r5, #0
 8023d24:	d1a8      	bne.n	8023c78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8023d26:	462c      	mov	r4, r5
 8023d28:	e7f8      	b.n	8023d1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8023d2a:	bf00      	nop
 8023d2c:	0802df2f 	.word	0x0802df2f
 8023d30:	0802e497 	.word	0x0802e497
 8023d34:	0802dff8 	.word	0x0802dff8
 8023d38:	20056720 	.word	0x20056720

08023d3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d40:	ed2d 8b08 	vpush	{d8-d11}
 8023d44:	b093      	sub	sp, #76	; 0x4c
 8023d46:	461c      	mov	r4, r3
 8023d48:	eeb0 aa40 	vmov.f32	s20, s0
 8023d4c:	920c      	str	r2, [sp, #48]	; 0x30
 8023d4e:	eef0 9a60 	vmov.f32	s19, s1
 8023d52:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023d54:	eeb0 9a41 	vmov.f32	s18, s2
 8023d58:	9011      	str	r0, [sp, #68]	; 0x44
 8023d5a:	eeb0 8a62 	vmov.f32	s16, s5
 8023d5e:	6850      	ldr	r0, [r2, #4]
 8023d60:	eef0 8a43 	vmov.f32	s17, s6
 8023d64:	9107      	str	r1, [sp, #28]
 8023d66:	eef0 ba44 	vmov.f32	s23, s8
 8023d6a:	6812      	ldr	r2, [r2, #0]
 8023d6c:	eeb0 ba64 	vmov.f32	s22, s9
 8023d70:	eef0 aa45 	vmov.f32	s21, s10
 8023d74:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023d78:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 8023d7c:	fb00 1303 	mla	r3, r0, r3, r1
 8023d80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023d84:	eb02 0b03 	add.w	fp, r2, r3
 8023d88:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d8a:	689b      	ldr	r3, [r3, #8]
 8023d8c:	3301      	adds	r3, #1
 8023d8e:	f023 0301 	bic.w	r3, r3, #1
 8023d92:	9309      	str	r3, [sp, #36]	; 0x24
 8023d94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d96:	f8d3 8000 	ldr.w	r8, [r3]
 8023d9a:	9b07      	ldr	r3, [sp, #28]
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	dc03      	bgt.n	8023da8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023da2:	2b00      	cmp	r3, #0
 8023da4:	f340 822b 	ble.w	80241fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023da8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023daa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023dae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023db2:	1e48      	subs	r0, r1, #1
 8023db4:	1e57      	subs	r7, r2, #1
 8023db6:	2c00      	cmp	r4, #0
 8023db8:	f340 80d7 	ble.w	8023f6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023dbc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023dc0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023dc4:	d406      	bmi.n	8023dd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023dc6:	4584      	cmp	ip, r0
 8023dc8:	da04      	bge.n	8023dd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023dca:	2b00      	cmp	r3, #0
 8023dcc:	db02      	blt.n	8023dd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023dce:	42bb      	cmp	r3, r7
 8023dd0:	f2c0 80cc 	blt.w	8023f6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023dd4:	f11c 0c01 	adds.w	ip, ip, #1
 8023dd8:	f100 80bf 	bmi.w	8023f5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023ddc:	4561      	cmp	r1, ip
 8023dde:	f2c0 80bc 	blt.w	8023f5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023de2:	3301      	adds	r3, #1
 8023de4:	f100 80b9 	bmi.w	8023f5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023de8:	429a      	cmp	r2, r3
 8023dea:	f2c0 80b6 	blt.w	8023f5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023dee:	46a2      	mov	sl, r4
 8023df0:	465f      	mov	r7, fp
 8023df2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023df6:	f1ba 0f00 	cmp.w	sl, #0
 8023dfa:	f340 80d4 	ble.w	8023fa6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8023dfe:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8023e02:	1430      	asrs	r0, r6, #16
 8023e04:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023e08:	9308      	str	r3, [sp, #32]
 8023e0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023e0c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023e10:	142b      	asrs	r3, r5, #16
 8023e12:	f100 8124 	bmi.w	802405e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023e16:	f10c 32ff 	add.w	r2, ip, #4294967295
 8023e1a:	4293      	cmp	r3, r2
 8023e1c:	f280 811f 	bge.w	802405e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023e20:	2800      	cmp	r0, #0
 8023e22:	f2c0 811c 	blt.w	802405e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023e26:	f10e 32ff 	add.w	r2, lr, #4294967295
 8023e2a:	4290      	cmp	r0, r2
 8023e2c:	f280 8117 	bge.w	802405e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023e30:	fb00 3309 	mla	r3, r0, r9, r3
 8023e34:	0858      	lsrs	r0, r3, #1
 8023e36:	07da      	lsls	r2, r3, #31
 8023e38:	9a08      	ldr	r2, [sp, #32]
 8023e3a:	f818 c000 	ldrb.w	ip, [r8, r0]
 8023e3e:	bf54      	ite	pl
 8023e40:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023e44:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023e48:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023e4c:	fa5f fc8c 	uxtb.w	ip, ip
 8023e50:	2a00      	cmp	r2, #0
 8023e52:	f000 80ed 	beq.w	8024030 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023e56:	1c58      	adds	r0, r3, #1
 8023e58:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023e5c:	07c0      	lsls	r0, r0, #31
 8023e5e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8023e62:	bf54      	ite	pl
 8023e64:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023e68:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023e6c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023e70:	fa5f fe8e 	uxtb.w	lr, lr
 8023e74:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8023e78:	b1c9      	cbz	r1, 8023eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8023e7a:	444b      	add	r3, r9
 8023e7c:	0858      	lsrs	r0, r3, #1
 8023e7e:	07da      	lsls	r2, r3, #31
 8023e80:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023e84:	bf54      	ite	pl
 8023e86:	f000 000f 	andpl.w	r0, r0, #15
 8023e8a:	1100      	asrmi	r0, r0, #4
 8023e8c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023e90:	b2c0      	uxtb	r0, r0
 8023e92:	900a      	str	r0, [sp, #40]	; 0x28
 8023e94:	1c58      	adds	r0, r3, #1
 8023e96:	0843      	lsrs	r3, r0, #1
 8023e98:	07c2      	lsls	r2, r0, #31
 8023e9a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023e9e:	bf54      	ite	pl
 8023ea0:	f003 030f 	andpl.w	r3, r3, #15
 8023ea4:	111b      	asrmi	r3, r3, #4
 8023ea6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023eaa:	b2db      	uxtb	r3, r3
 8023eac:	930e      	str	r3, [sp, #56]	; 0x38
 8023eae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023eb2:	b289      	uxth	r1, r1
 8023eb4:	fb02 f301 	mul.w	r3, r2, r1
 8023eb8:	0112      	lsls	r2, r2, #4
 8023eba:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023ebe:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8023ec2:	1ad2      	subs	r2, r2, r3
 8023ec4:	b289      	uxth	r1, r1
 8023ec6:	b292      	uxth	r2, r2
 8023ec8:	1a40      	subs	r0, r0, r1
 8023eca:	fa1f fe80 	uxth.w	lr, r0
 8023ece:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023ed0:	4342      	muls	r2, r0
 8023ed2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023ed8:	fb01 c102 	mla	r1, r1, r2, ip
 8023edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ede:	fb03 1302 	mla	r3, r3, r2, r1
 8023ee2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023ee6:	b383      	cbz	r3, 8023f4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023ee8:	4ac7      	ldr	r2, [pc, #796]	; (8024208 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8023eea:	2bff      	cmp	r3, #255	; 0xff
 8023eec:	6812      	ldr	r2, [r2, #0]
 8023eee:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8023ef2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8023ef6:	b2d2      	uxtb	r2, r2
 8023ef8:	f000 80ac 	beq.w	8024054 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8023efc:	b299      	uxth	r1, r3
 8023efe:	43db      	mvns	r3, r3
 8023f00:	f897 c000 	ldrb.w	ip, [r7]
 8023f04:	fb12 f201 	smulbb	r2, r2, r1
 8023f08:	b2db      	uxtb	r3, r3
 8023f0a:	fb10 f001 	smulbb	r0, r0, r1
 8023f0e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023f12:	fb1e f101 	smulbb	r1, lr, r1
 8023f16:	b292      	uxth	r2, r2
 8023f18:	f102 0c01 	add.w	ip, r2, #1
 8023f1c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023f20:	1212      	asrs	r2, r2, #8
 8023f22:	703a      	strb	r2, [r7, #0]
 8023f24:	787a      	ldrb	r2, [r7, #1]
 8023f26:	fb02 0003 	mla	r0, r2, r3, r0
 8023f2a:	b280      	uxth	r0, r0
 8023f2c:	1c42      	adds	r2, r0, #1
 8023f2e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023f32:	78ba      	ldrb	r2, [r7, #2]
 8023f34:	fb02 1303 	mla	r3, r2, r3, r1
 8023f38:	1200      	asrs	r0, r0, #8
 8023f3a:	b29b      	uxth	r3, r3
 8023f3c:	7078      	strb	r0, [r7, #1]
 8023f3e:	f103 0e01 	add.w	lr, r3, #1
 8023f42:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023f46:	121b      	asrs	r3, r3, #8
 8023f48:	70bb      	strb	r3, [r7, #2]
 8023f4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023f4c:	3703      	adds	r7, #3
 8023f4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023f52:	441d      	add	r5, r3
 8023f54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f56:	441e      	add	r6, r3
 8023f58:	e74d      	b.n	8023df6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023f5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023f5c:	3c01      	subs	r4, #1
 8023f5e:	f10b 0b03 	add.w	fp, fp, #3
 8023f62:	441d      	add	r5, r3
 8023f64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f66:	441e      	add	r6, r3
 8023f68:	e725      	b.n	8023db6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023f6a:	d021      	beq.n	8023fb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8023f6c:	1e63      	subs	r3, r4, #1
 8023f6e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023f70:	fb00 5003 	mla	r0, r0, r3, r5
 8023f74:	1400      	asrs	r0, r0, #16
 8023f76:	f53f af3a 	bmi.w	8023dee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023f7a:	3901      	subs	r1, #1
 8023f7c:	4288      	cmp	r0, r1
 8023f7e:	f6bf af36 	bge.w	8023dee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023f82:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023f84:	fb01 6303 	mla	r3, r1, r3, r6
 8023f88:	141b      	asrs	r3, r3, #16
 8023f8a:	f53f af30 	bmi.w	8023dee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023f8e:	3a01      	subs	r2, #1
 8023f90:	4293      	cmp	r3, r2
 8023f92:	f6bf af2c 	bge.w	8023dee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023f96:	f10b 0c03 	add.w	ip, fp, #3
 8023f9a:	46a6      	mov	lr, r4
 8023f9c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023fa0:	f1be 0f00 	cmp.w	lr, #0
 8023fa4:	dc79      	bgt.n	802409a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8023fa6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023faa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023fae:	44a3      	add	fp, r4
 8023fb0:	9b07      	ldr	r3, [sp, #28]
 8023fb2:	2b00      	cmp	r3, #0
 8023fb4:	f340 8123 	ble.w	80241fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023fbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023fbe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023fc2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023fc6:	eef0 6a48 	vmov.f32	s13, s16
 8023fca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023fce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023fd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023fd6:	ee16 5a90 	vmov	r5, s13
 8023fda:	eef0 6a68 	vmov.f32	s13, s17
 8023fde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023fe2:	ee16 6a90 	vmov	r6, s13
 8023fe6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023fea:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023fee:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023ff2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023ff6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023ffa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023ffe:	ee18 2a10 	vmov	r2, s16
 8024002:	eeb0 8a47 	vmov.f32	s16, s14
 8024006:	fb92 f3f3 	sdiv	r3, r2, r3
 802400a:	ee18 2a90 	vmov	r2, s17
 802400e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024010:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024012:	eef0 8a67 	vmov.f32	s17, s15
 8024016:	fb92 f3f3 	sdiv	r3, r2, r3
 802401a:	9328      	str	r3, [sp, #160]	; 0xa0
 802401c:	9b07      	ldr	r3, [sp, #28]
 802401e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024020:	3b01      	subs	r3, #1
 8024022:	9307      	str	r3, [sp, #28]
 8024024:	bf08      	it	eq
 8024026:	4614      	moveq	r4, r2
 8024028:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802402a:	bf18      	it	ne
 802402c:	461c      	movne	r4, r3
 802402e:	e6b4      	b.n	8023d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024030:	2900      	cmp	r1, #0
 8024032:	f43f af3c 	beq.w	8023eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024036:	eb09 0003 	add.w	r0, r9, r3
 802403a:	0843      	lsrs	r3, r0, #1
 802403c:	07c0      	lsls	r0, r0, #31
 802403e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024042:	bf54      	ite	pl
 8024044:	f003 030f 	andpl.w	r3, r3, #15
 8024048:	111b      	asrmi	r3, r3, #4
 802404a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802404e:	b2db      	uxtb	r3, r3
 8024050:	930a      	str	r3, [sp, #40]	; 0x28
 8024052:	e72c      	b.n	8023eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024054:	703a      	strb	r2, [r7, #0]
 8024056:	7078      	strb	r0, [r7, #1]
 8024058:	f887 e002 	strb.w	lr, [r7, #2]
 802405c:	e775      	b.n	8023f4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802405e:	1c5a      	adds	r2, r3, #1
 8024060:	f53f af73 	bmi.w	8023f4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024064:	4594      	cmp	ip, r2
 8024066:	f6ff af70 	blt.w	8023f4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802406a:	1c42      	adds	r2, r0, #1
 802406c:	f53f af6d 	bmi.w	8023f4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024070:	4596      	cmp	lr, r2
 8024072:	f6ff af6a 	blt.w	8023f4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024076:	9302      	str	r3, [sp, #8]
 8024078:	fa0f f38e 	sxth.w	r3, lr
 802407c:	9a08      	ldr	r2, [sp, #32]
 802407e:	9301      	str	r3, [sp, #4]
 8024080:	fa0f f38c 	sxth.w	r3, ip
 8024084:	9105      	str	r1, [sp, #20]
 8024086:	4639      	mov	r1, r7
 8024088:	9300      	str	r3, [sp, #0]
 802408a:	464b      	mov	r3, r9
 802408c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024090:	4642      	mov	r2, r8
 8024092:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024094:	f7ff fd70 	bl	8023b78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024098:	e757      	b.n	8023f4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802409a:	142a      	asrs	r2, r5, #16
 802409c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80240a0:	1433      	asrs	r3, r6, #16
 80240a2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80240a6:	fb09 2303 	mla	r3, r9, r3, r2
 80240aa:	085a      	lsrs	r2, r3, #1
 80240ac:	07d9      	lsls	r1, r3, #31
 80240ae:	f818 2002 	ldrb.w	r2, [r8, r2]
 80240b2:	bf54      	ite	pl
 80240b4:	f002 020f 	andpl.w	r2, r2, #15
 80240b8:	1112      	asrmi	r2, r2, #4
 80240ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80240be:	b2d2      	uxtb	r2, r2
 80240c0:	2800      	cmp	r0, #0
 80240c2:	f000 8085 	beq.w	80241d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80240c6:	f103 0a01 	add.w	sl, r3, #1
 80240ca:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80240ce:	f01a 0f01 	tst.w	sl, #1
 80240d2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80240d6:	bf0c      	ite	eq
 80240d8:	f001 010f 	andeq.w	r1, r1, #15
 80240dc:	1109      	asrne	r1, r1, #4
 80240de:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80240e2:	b2c9      	uxtb	r1, r1
 80240e4:	910f      	str	r1, [sp, #60]	; 0x3c
 80240e6:	b1df      	cbz	r7, 8024120 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80240e8:	444b      	add	r3, r9
 80240ea:	0859      	lsrs	r1, r3, #1
 80240ec:	f013 0f01 	tst.w	r3, #1
 80240f0:	f103 0301 	add.w	r3, r3, #1
 80240f4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80240f8:	bf0c      	ite	eq
 80240fa:	f001 010f 	andeq.w	r1, r1, #15
 80240fe:	1109      	asrne	r1, r1, #4
 8024100:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024104:	b2c9      	uxtb	r1, r1
 8024106:	910b      	str	r1, [sp, #44]	; 0x2c
 8024108:	0859      	lsrs	r1, r3, #1
 802410a:	07db      	lsls	r3, r3, #31
 802410c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024110:	bf54      	ite	pl
 8024112:	f001 010f 	andpl.w	r1, r1, #15
 8024116:	1109      	asrmi	r1, r1, #4
 8024118:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802411c:	b2c9      	uxtb	r1, r1
 802411e:	9110      	str	r1, [sp, #64]	; 0x40
 8024120:	b280      	uxth	r0, r0
 8024122:	b2bf      	uxth	r7, r7
 8024124:	fb00 f307 	mul.w	r3, r0, r7
 8024128:	0100      	lsls	r0, r0, #4
 802412a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802412e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024132:	1ac0      	subs	r0, r0, r3
 8024134:	b2bf      	uxth	r7, r7
 8024136:	b280      	uxth	r0, r0
 8024138:	1bc9      	subs	r1, r1, r7
 802413a:	fa1f fa81 	uxth.w	sl, r1
 802413e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024140:	4348      	muls	r0, r1
 8024142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024144:	fb02 020a 	mla	r2, r2, sl, r0
 8024148:	fb07 2701 	mla	r7, r7, r1, r2
 802414c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802414e:	fb03 7302 	mla	r3, r3, r2, r7
 8024152:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024156:	b393      	cbz	r3, 80241be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024158:	4a2b      	ldr	r2, [pc, #172]	; (8024208 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 802415a:	2bff      	cmp	r3, #255	; 0xff
 802415c:	6811      	ldr	r1, [r2, #0]
 802415e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024162:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024166:	b2c9      	uxtb	r1, r1
 8024168:	d042      	beq.n	80241f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802416a:	b298      	uxth	r0, r3
 802416c:	43db      	mvns	r3, r3
 802416e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024172:	fb11 f100 	smulbb	r1, r1, r0
 8024176:	b2db      	uxtb	r3, r3
 8024178:	fb17 f700 	smulbb	r7, r7, r0
 802417c:	fb02 1103 	mla	r1, r2, r3, r1
 8024180:	fb1a f000 	smulbb	r0, sl, r0
 8024184:	b289      	uxth	r1, r1
 8024186:	1c4a      	adds	r2, r1, #1
 8024188:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802418c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8024190:	fb02 7703 	mla	r7, r2, r3, r7
 8024194:	1209      	asrs	r1, r1, #8
 8024196:	b2bf      	uxth	r7, r7
 8024198:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802419c:	1c7a      	adds	r2, r7, #1
 802419e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80241a2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80241a6:	fb02 0303 	mla	r3, r2, r3, r0
 80241aa:	123f      	asrs	r7, r7, #8
 80241ac:	b29b      	uxth	r3, r3
 80241ae:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80241b2:	1c5a      	adds	r2, r3, #1
 80241b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80241b8:	121b      	asrs	r3, r3, #8
 80241ba:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80241be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80241c0:	f10c 0c03 	add.w	ip, ip, #3
 80241c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80241c8:	441d      	add	r5, r3
 80241ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80241cc:	441e      	add	r6, r3
 80241ce:	e6e7      	b.n	8023fa0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80241d0:	2f00      	cmp	r7, #0
 80241d2:	d0a5      	beq.n	8024120 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80241d4:	444b      	add	r3, r9
 80241d6:	0859      	lsrs	r1, r3, #1
 80241d8:	07db      	lsls	r3, r3, #31
 80241da:	f818 1001 	ldrb.w	r1, [r8, r1]
 80241de:	bf54      	ite	pl
 80241e0:	f001 010f 	andpl.w	r1, r1, #15
 80241e4:	1109      	asrmi	r1, r1, #4
 80241e6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80241ea:	b2c9      	uxtb	r1, r1
 80241ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80241ee:	e797      	b.n	8024120 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80241f0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80241f4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80241f8:	f80c ac01 	strb.w	sl, [ip, #-1]
 80241fc:	e7df      	b.n	80241be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80241fe:	b013      	add	sp, #76	; 0x4c
 8024200:	ecbd 8b08 	vpop	{d8-d11}
 8024204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024208:	20056720 	.word	0x20056720

0802420c <CRC_Lock>:
 802420c:	4a20      	ldr	r2, [pc, #128]	; (8024290 <CRC_Lock+0x84>)
 802420e:	b530      	push	{r4, r5, lr}
 8024210:	6813      	ldr	r3, [r2, #0]
 8024212:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024216:	f24c 2540 	movw	r5, #49728	; 0xc240
 802421a:	f023 0301 	bic.w	r3, r3, #1
 802421e:	6013      	str	r3, [r2, #0]
 8024220:	4b1c      	ldr	r3, [pc, #112]	; (8024294 <CRC_Lock+0x88>)
 8024222:	681a      	ldr	r2, [r3, #0]
 8024224:	4022      	ands	r2, r4
 8024226:	42aa      	cmp	r2, r5
 8024228:	d005      	beq.n	8024236 <CRC_Lock+0x2a>
 802422a:	681b      	ldr	r3, [r3, #0]
 802422c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024230:	4023      	ands	r3, r4
 8024232:	4293      	cmp	r3, r2
 8024234:	d124      	bne.n	8024280 <CRC_Lock+0x74>
 8024236:	4b18      	ldr	r3, [pc, #96]	; (8024298 <CRC_Lock+0x8c>)
 8024238:	681b      	ldr	r3, [r3, #0]
 802423a:	bb0b      	cbnz	r3, 8024280 <CRC_Lock+0x74>
 802423c:	4b17      	ldr	r3, [pc, #92]	; (802429c <CRC_Lock+0x90>)
 802423e:	681a      	ldr	r2, [r3, #0]
 8024240:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024244:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8024248:	d00d      	beq.n	8024266 <CRC_Lock+0x5a>
 802424a:	681a      	ldr	r2, [r3, #0]
 802424c:	f240 4483 	movw	r4, #1155	; 0x483
 8024250:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024254:	42a2      	cmp	r2, r4
 8024256:	d006      	beq.n	8024266 <CRC_Lock+0x5a>
 8024258:	681b      	ldr	r3, [r3, #0]
 802425a:	f240 4285 	movw	r2, #1157	; 0x485
 802425e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024262:	4293      	cmp	r3, r2
 8024264:	d10c      	bne.n	8024280 <CRC_Lock+0x74>
 8024266:	4b0e      	ldr	r3, [pc, #56]	; (80242a0 <CRC_Lock+0x94>)
 8024268:	2201      	movs	r2, #1
 802426a:	601a      	str	r2, [r3, #0]
 802426c:	681a      	ldr	r2, [r3, #0]
 802426e:	2a00      	cmp	r2, #0
 8024270:	d1fc      	bne.n	802426c <CRC_Lock+0x60>
 8024272:	4b0c      	ldr	r3, [pc, #48]	; (80242a4 <CRC_Lock+0x98>)
 8024274:	6018      	str	r0, [r3, #0]
 8024276:	6818      	ldr	r0, [r3, #0]
 8024278:	1a43      	subs	r3, r0, r1
 802427a:	4258      	negs	r0, r3
 802427c:	4158      	adcs	r0, r3
 802427e:	bd30      	pop	{r4, r5, pc}
 8024280:	4b09      	ldr	r3, [pc, #36]	; (80242a8 <CRC_Lock+0x9c>)
 8024282:	2201      	movs	r2, #1
 8024284:	601a      	str	r2, [r3, #0]
 8024286:	681a      	ldr	r2, [r3, #0]
 8024288:	2a00      	cmp	r2, #0
 802428a:	d1fc      	bne.n	8024286 <CRC_Lock+0x7a>
 802428c:	4b07      	ldr	r3, [pc, #28]	; (80242ac <CRC_Lock+0xa0>)
 802428e:	e7f1      	b.n	8024274 <CRC_Lock+0x68>
 8024290:	e0002000 	.word	0xe0002000
 8024294:	e000ed00 	.word	0xe000ed00
 8024298:	e0042000 	.word	0xe0042000
 802429c:	5c001000 	.word	0x5c001000
 80242a0:	58024c08 	.word	0x58024c08
 80242a4:	58024c00 	.word	0x58024c00
 80242a8:	40023008 	.word	0x40023008
 80242ac:	40023000 	.word	0x40023000

080242b0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80242b0:	6101      	str	r1, [r0, #16]
 80242b2:	4770      	bx	lr

080242b4 <_ZN8touchgfx8Gestures4tickEv>:
 80242b4:	7b83      	ldrb	r3, [r0, #14]
 80242b6:	b14b      	cbz	r3, 80242cc <_ZN8touchgfx8Gestures4tickEv+0x18>
 80242b8:	8903      	ldrh	r3, [r0, #8]
 80242ba:	3301      	adds	r3, #1
 80242bc:	b29b      	uxth	r3, r3
 80242be:	2b07      	cmp	r3, #7
 80242c0:	8103      	strh	r3, [r0, #8]
 80242c2:	bf81      	itttt	hi
 80242c4:	2300      	movhi	r3, #0
 80242c6:	8143      	strhhi	r3, [r0, #10]
 80242c8:	8183      	strhhi	r3, [r0, #12]
 80242ca:	7383      	strbhi	r3, [r0, #14]
 80242cc:	4770      	bx	lr
	...

080242d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80242d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80242d4:	4604      	mov	r4, r0
 80242d6:	4698      	mov	r8, r3
 80242d8:	8880      	ldrh	r0, [r0, #4]
 80242da:	4617      	mov	r7, r2
 80242dc:	4b1d      	ldr	r3, [pc, #116]	; (8024354 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80242de:	460e      	mov	r6, r1
 80242e0:	f8ad 0006 	strh.w	r0, [sp, #6]
 80242e4:	eba8 0000 	sub.w	r0, r8, r0
 80242e8:	9300      	str	r3, [sp, #0]
 80242ea:	2300      	movs	r3, #0
 80242ec:	b280      	uxth	r0, r0
 80242ee:	8aa2      	ldrh	r2, [r4, #20]
 80242f0:	f88d 3004 	strb.w	r3, [sp, #4]
 80242f4:	b203      	sxth	r3, r0
 80242f6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80242fa:	88e1      	ldrh	r1, [r4, #6]
 80242fc:	2b00      	cmp	r3, #0
 80242fe:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024302:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024306:	bfb8      	it	lt
 8024308:	4240      	neglt	r0, r0
 802430a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802430e:	bfb8      	it	lt
 8024310:	b203      	sxthlt	r3, r0
 8024312:	4293      	cmp	r3, r2
 8024314:	dc08      	bgt.n	8024328 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024316:	1a69      	subs	r1, r5, r1
 8024318:	b289      	uxth	r1, r1
 802431a:	b20b      	sxth	r3, r1
 802431c:	2b00      	cmp	r3, #0
 802431e:	bfbc      	itt	lt
 8024320:	4249      	neglt	r1, r1
 8024322:	b20b      	sxthlt	r3, r1
 8024324:	429a      	cmp	r2, r3
 8024326:	da13      	bge.n	8024350 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024328:	6920      	ldr	r0, [r4, #16]
 802432a:	4669      	mov	r1, sp
 802432c:	eba8 0606 	sub.w	r6, r8, r6
 8024330:	1bef      	subs	r7, r5, r7
 8024332:	6803      	ldr	r3, [r0, #0]
 8024334:	685b      	ldr	r3, [r3, #4]
 8024336:	4798      	blx	r3
 8024338:	2300      	movs	r3, #0
 802433a:	2001      	movs	r0, #1
 802433c:	8166      	strh	r6, [r4, #10]
 802433e:	8123      	strh	r3, [r4, #8]
 8024340:	81a7      	strh	r7, [r4, #12]
 8024342:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024346:	80e5      	strh	r5, [r4, #6]
 8024348:	73a0      	strb	r0, [r4, #14]
 802434a:	b004      	add	sp, #16
 802434c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024350:	2000      	movs	r0, #0
 8024352:	e7fa      	b.n	802434a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024354:	0802d38c 	.word	0x0802d38c

08024358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024358:	b5f0      	push	{r4, r5, r6, r7, lr}
 802435a:	461e      	mov	r6, r3
 802435c:	1e4b      	subs	r3, r1, #1
 802435e:	b085      	sub	sp, #20
 8024360:	4604      	mov	r4, r0
 8024362:	2b01      	cmp	r3, #1
 8024364:	460d      	mov	r5, r1
 8024366:	4617      	mov	r7, r2
 8024368:	d84b      	bhi.n	8024402 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802436a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802436e:	1cd3      	adds	r3, r2, #3
 8024370:	b29b      	uxth	r3, r3
 8024372:	2b06      	cmp	r3, #6
 8024374:	d916      	bls.n	80243a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024376:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024418 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802437a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802437e:	f8cd c004 	str.w	ip, [sp, #4]
 8024382:	f04f 0c00 	mov.w	ip, #0
 8024386:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802438a:	6900      	ldr	r0, [r0, #16]
 802438c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024390:	a901      	add	r1, sp, #4
 8024392:	f88d c008 	strb.w	ip, [sp, #8]
 8024396:	f8ad 200a 	strh.w	r2, [sp, #10]
 802439a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802439e:	6803      	ldr	r3, [r0, #0]
 80243a0:	689b      	ldr	r3, [r3, #8]
 80243a2:	4798      	blx	r3
 80243a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80243a8:	1cd3      	adds	r3, r2, #3
 80243aa:	b29b      	uxth	r3, r3
 80243ac:	2b06      	cmp	r3, #6
 80243ae:	d916      	bls.n	80243de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80243b0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024418 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80243b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80243b8:	f8cd c004 	str.w	ip, [sp, #4]
 80243bc:	f04f 0c01 	mov.w	ip, #1
 80243c0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80243c4:	6920      	ldr	r0, [r4, #16]
 80243c6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80243ca:	a901      	add	r1, sp, #4
 80243cc:	f88d c008 	strb.w	ip, [sp, #8]
 80243d0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80243d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80243d8:	6803      	ldr	r3, [r0, #0]
 80243da:	689b      	ldr	r3, [r3, #8]
 80243dc:	4798      	blx	r3
 80243de:	4b0d      	ldr	r3, [pc, #52]	; (8024414 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80243e0:	a901      	add	r1, sp, #4
 80243e2:	6920      	ldr	r0, [r4, #16]
 80243e4:	9301      	str	r3, [sp, #4]
 80243e6:	2300      	movs	r3, #0
 80243e8:	f88d 5008 	strb.w	r5, [sp, #8]
 80243ec:	f8ad 700a 	strh.w	r7, [sp, #10]
 80243f0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80243f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80243f8:	6803      	ldr	r3, [r0, #0]
 80243fa:	681b      	ldr	r3, [r3, #0]
 80243fc:	4798      	blx	r3
 80243fe:	b005      	add	sp, #20
 8024400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024402:	2900      	cmp	r1, #0
 8024404:	d1eb      	bne.n	80243de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024406:	80a2      	strh	r2, [r4, #4]
 8024408:	80c6      	strh	r6, [r0, #6]
 802440a:	60a1      	str	r1, [r4, #8]
 802440c:	81a1      	strh	r1, [r4, #12]
 802440e:	73a1      	strb	r1, [r4, #14]
 8024410:	e7e5      	b.n	80243de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024412:	bf00      	nop
 8024414:	0802d378 	.word	0x0802d378
 8024418:	0802d3a0 	.word	0x0802d3a0

0802441c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 802441c:	10c9      	asrs	r1, r1, #3
 802441e:	2900      	cmp	r1, #0
 8024420:	bfb8      	it	lt
 8024422:	4249      	neglt	r1, r1
 8024424:	2801      	cmp	r0, #1
 8024426:	d108      	bne.n	802443a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024428:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802442c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8024430:	4601      	mov	r1, r0
 8024432:	dd02      	ble.n	802443a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024434:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8024438:	4770      	bx	lr
 802443a:	29ff      	cmp	r1, #255	; 0xff
 802443c:	bfa8      	it	ge
 802443e:	21ff      	movge	r1, #255	; 0xff
 8024440:	4608      	mov	r0, r1
 8024442:	4770      	bx	lr

08024444 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8024444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024448:	688c      	ldr	r4, [r1, #8]
 802444a:	b087      	sub	sp, #28
 802444c:	4607      	mov	r7, r0
 802444e:	2c00      	cmp	r4, #0
 8024450:	db2b      	blt.n	80244aa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024452:	6803      	ldr	r3, [r0, #0]
 8024454:	691a      	ldr	r2, [r3, #16]
 8024456:	42a2      	cmp	r2, r4
 8024458:	dd27      	ble.n	80244aa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802445a:	685a      	ldr	r2, [r3, #4]
 802445c:	695e      	ldr	r6, [r3, #20]
 802445e:	68cd      	ldr	r5, [r1, #12]
 8024460:	fb06 2604 	mla	r6, r6, r4, r2
 8024464:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8024468:	698a      	ldr	r2, [r1, #24]
 802446a:	f893 a008 	ldrb.w	sl, [r3, #8]
 802446e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8024472:	9205      	str	r2, [sp, #20]
 8024474:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8024478:	9b05      	ldr	r3, [sp, #20]
 802447a:	6839      	ldr	r1, [r7, #0]
 802447c:	eb03 0c02 	add.w	ip, r3, r2
 8024480:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8024484:	68c9      	ldr	r1, [r1, #12]
 8024486:	1898      	adds	r0, r3, r2
 8024488:	4288      	cmp	r0, r1
 802448a:	db02      	blt.n	8024492 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802448c:	1a8b      	subs	r3, r1, r2
 802448e:	2b00      	cmp	r3, #0
 8024490:	dd09      	ble.n	80244a6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8024492:	6878      	ldr	r0, [r7, #4]
 8024494:	6801      	ldr	r1, [r0, #0]
 8024496:	9400      	str	r4, [sp, #0]
 8024498:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802449c:	4653      	mov	r3, sl
 802449e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80244a2:	4631      	mov	r1, r6
 80244a4:	47d8      	blx	fp
 80244a6:	3d01      	subs	r5, #1
 80244a8:	d1e4      	bne.n	8024474 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80244aa:	b007      	add	sp, #28
 80244ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080244b0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80244b0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80244b4:	b90b      	cbnz	r3, 80244ba <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 80244b6:	f001 b991 	b.w	80257dc <_ZN8touchgfx7Outline6lineToEii>
 80244ba:	4770      	bx	lr

080244bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80244bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80244c0:	4604      	mov	r4, r0
 80244c2:	2600      	movs	r6, #0
 80244c4:	4b8f      	ldr	r3, [pc, #572]	; (8024704 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80244c6:	f100 0518 	add.w	r5, r0, #24
 80244ca:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80244ce:	b086      	sub	sp, #24
 80244d0:	4690      	mov	r8, r2
 80244d2:	e9c0 3100 	strd	r3, r1, [r0]
 80244d6:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80244da:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80244de:	4628      	mov	r0, r5
 80244e0:	f001 fba0 	bl	8025c24 <_ZN8touchgfx15RenderingBufferC1Ev>
 80244e4:	4638      	mov	r0, r7
 80244e6:	f000 fb45 	bl	8024b74 <_ZN8touchgfx7OutlineC1Ev>
 80244ea:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80244ee:	f001 fb41 	bl	8025b74 <_ZN8touchgfx8ScanlineC1Ev>
 80244f2:	2301      	movs	r3, #1
 80244f4:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 80244f8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 80244fc:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8024500:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024504:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8024508:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802450c:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8024510:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8024514:	f7f2 ff36 	bl	8017384 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8024518:	b928      	cbnz	r0, 8024526 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802451a:	4b7b      	ldr	r3, [pc, #492]	; (8024708 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802451c:	212d      	movs	r1, #45	; 0x2d
 802451e:	4a7b      	ldr	r2, [pc, #492]	; (802470c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8024520:	487b      	ldr	r0, [pc, #492]	; (8024710 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8024522:	f001 fccd 	bl	8025ec0 <__assert_func>
 8024526:	f9b8 2000 	ldrsh.w	r2, [r8]
 802452a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802452e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8024532:	4410      	add	r0, r2
 8024534:	9602      	str	r6, [sp, #8]
 8024536:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802453a:	b280      	uxth	r0, r0
 802453c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8024540:	fa0f fa80 	sxth.w	sl, r0
 8024544:	f1ba 0f00 	cmp.w	sl, #0
 8024548:	dd70      	ble.n	802462c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802454a:	4591      	cmp	r9, r2
 802454c:	dd6e      	ble.n	802462c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802454e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8024552:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8024556:	440b      	add	r3, r1
 8024558:	b29b      	uxth	r3, r3
 802455a:	b21e      	sxth	r6, r3
 802455c:	2e00      	cmp	r6, #0
 802455e:	dd65      	ble.n	802462c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024560:	458e      	cmp	lr, r1
 8024562:	dd63      	ble.n	802462c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024564:	45d1      	cmp	r9, sl
 8024566:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802456a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802456e:	bfb8      	it	lt
 8024570:	fa1f f089 	uxthlt.w	r0, r9
 8024574:	45b6      	cmp	lr, r6
 8024576:	f8ad 2008 	strh.w	r2, [sp, #8]
 802457a:	bfb8      	it	lt
 802457c:	fa1f f38e 	uxthlt.w	r3, lr
 8024580:	1a80      	subs	r0, r0, r2
 8024582:	f8ad 100a 	strh.w	r1, [sp, #10]
 8024586:	1a5b      	subs	r3, r3, r1
 8024588:	f8ad 000c 	strh.w	r0, [sp, #12]
 802458c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024590:	f10d 0808 	add.w	r8, sp, #8
 8024594:	ae04      	add	r6, sp, #16
 8024596:	e898 0003 	ldmia.w	r8, {r0, r1}
 802459a:	e886 0003 	stmia.w	r6, {r0, r1}
 802459e:	f8dc 3000 	ldr.w	r3, [ip]
 80245a2:	4660      	mov	r0, ip
 80245a4:	4631      	mov	r1, r6
 80245a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80245a8:	4798      	blx	r3
 80245aa:	6861      	ldr	r1, [r4, #4]
 80245ac:	4640      	mov	r0, r8
 80245ae:	3104      	adds	r1, #4
 80245b0:	f7f4 fa02 	bl	80189b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80245b4:	4630      	mov	r0, r6
 80245b6:	f7f4 fa17 	bl	80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80245ba:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80245be:	f7f2 fe71 	bl	80172a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80245c2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80245c6:	4638      	mov	r0, r7
 80245c8:	f000 fab0 	bl	8024b2c <_ZN8touchgfx7Outline5resetEv>
 80245cc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80245d0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80245d4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80245d8:	015b      	lsls	r3, r3, #5
 80245da:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 80245de:	0152      	lsls	r2, r2, #5
 80245e0:	60e3      	str	r3, [r4, #12]
 80245e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80245e6:	60a2      	str	r2, [r4, #8]
 80245e8:	015b      	lsls	r3, r3, #5
 80245ea:	6123      	str	r3, [r4, #16]
 80245ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80245f0:	015b      	lsls	r3, r3, #5
 80245f2:	6163      	str	r3, [r4, #20]
 80245f4:	4b47      	ldr	r3, [pc, #284]	; (8024714 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80245f6:	6818      	ldr	r0, [r3, #0]
 80245f8:	6803      	ldr	r3, [r0, #0]
 80245fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80245fc:	4798      	blx	r3
 80245fe:	4606      	mov	r6, r0
 8024600:	f7e1 fb46 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8024604:	6803      	ldr	r3, [r0, #0]
 8024606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024608:	4798      	blx	r3
 802460a:	4607      	mov	r7, r0
 802460c:	f7e1 fb40 	bl	8005c90 <_ZN8touchgfx3HAL3lcdEv>
 8024610:	6803      	ldr	r3, [r0, #0]
 8024612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024614:	4798      	blx	r3
 8024616:	280d      	cmp	r0, #13
 8024618:	d854      	bhi.n	80246c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802461a:	e8df f000 	tbb	[pc, r0]
 802461e:	554b      	.short	0x554b
 8024620:	2b6e0a66 	.word	0x2b6e0a66
 8024624:	5f5f5f3b 	.word	0x5f5f5f3b
 8024628:	6e6e5f5f 	.word	0x6e6e5f5f
 802462c:	2300      	movs	r3, #0
 802462e:	9303      	str	r3, [sp, #12]
 8024630:	e7ae      	b.n	8024590 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8024632:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024636:	2108      	movs	r1, #8
 8024638:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802463c:	fb92 f1f1 	sdiv	r1, r2, r1
 8024640:	fb07 1303 	mla	r3, r7, r3, r1
 8024644:	441e      	add	r6, r3
 8024646:	4253      	negs	r3, r2
 8024648:	f002 0207 	and.w	r2, r2, #7
 802464c:	f003 0307 	and.w	r3, r3, #7
 8024650:	bf58      	it	pl
 8024652:	425a      	negpl	r2, r3
 8024654:	b2d2      	uxtb	r2, r2
 8024656:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802465a:	4628      	mov	r0, r5
 802465c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024660:	6721      	str	r1, [r4, #112]	; 0x70
 8024662:	e9cd 1700 	strd	r1, r7, [sp]
 8024666:	4631      	mov	r1, r6
 8024668:	f001 fae8 	bl	8025c3c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802466c:	4620      	mov	r0, r4
 802466e:	b006      	add	sp, #24
 8024670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024674:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024678:	2104      	movs	r1, #4
 802467a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802467e:	fb92 f1f1 	sdiv	r1, r2, r1
 8024682:	fb07 1303 	mla	r3, r7, r3, r1
 8024686:	441e      	add	r6, r3
 8024688:	4253      	negs	r3, r2
 802468a:	f002 0203 	and.w	r2, r2, #3
 802468e:	f003 0303 	and.w	r3, r3, #3
 8024692:	e7dd      	b.n	8024650 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8024694:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024698:	2102      	movs	r1, #2
 802469a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802469e:	2a00      	cmp	r2, #0
 80246a0:	fb92 f1f1 	sdiv	r1, r2, r1
 80246a4:	f002 0201 	and.w	r2, r2, #1
 80246a8:	fb07 1303 	mla	r3, r7, r3, r1
 80246ac:	bfb8      	it	lt
 80246ae:	4252      	neglt	r2, r2
 80246b0:	441e      	add	r6, r3
 80246b2:	e7cf      	b.n	8024654 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 80246b4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80246b8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80246bc:	437b      	muls	r3, r7
 80246be:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80246c2:	441e      	add	r6, r3
 80246c4:	2200      	movs	r2, #0
 80246c6:	e7c6      	b.n	8024656 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 80246c8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80246cc:	2103      	movs	r1, #3
 80246ce:	fb07 f203 	mul.w	r2, r7, r3
 80246d2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80246d6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80246da:	e7f2      	b.n	80246c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80246dc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80246e0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80246e4:	fb07 2303 	mla	r3, r7, r3, r2
 80246e8:	e7eb      	b.n	80246c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80246ea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80246ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80246f2:	437b      	muls	r3, r7
 80246f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80246f8:	e7e3      	b.n	80246c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80246fa:	4b07      	ldr	r3, [pc, #28]	; (8024718 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 80246fc:	216c      	movs	r1, #108	; 0x6c
 80246fe:	4a03      	ldr	r2, [pc, #12]	; (802470c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8024700:	e70e      	b.n	8024520 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8024702:	bf00      	nop
 8024704:	0802e7bc 	.word	0x0802e7bc
 8024708:	0802e707 	.word	0x0802e707
 802470c:	0802e7c4 	.word	0x0802e7c4
 8024710:	0802e763 	.word	0x0802e763
 8024714:	200566f8 	.word	0x200566f8
 8024718:	0802e797 	.word	0x0802e797

0802471c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802471c:	6812      	ldr	r2, [r2, #0]
 802471e:	2a00      	cmp	r2, #0
 8024720:	db0b      	blt.n	802473a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8024722:	9800      	ldr	r0, [sp, #0]
 8024724:	6800      	ldr	r0, [r0, #0]
 8024726:	4290      	cmp	r0, r2
 8024728:	bfd4      	ite	le
 802472a:	2002      	movle	r0, #2
 802472c:	2000      	movgt	r0, #0
 802472e:	680a      	ldr	r2, [r1, #0]
 8024730:	2a00      	cmp	r2, #0
 8024732:	da04      	bge.n	802473e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8024734:	f040 0004 	orr.w	r0, r0, #4
 8024738:	4770      	bx	lr
 802473a:	2001      	movs	r0, #1
 802473c:	e7f7      	b.n	802472e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802473e:	681b      	ldr	r3, [r3, #0]
 8024740:	4293      	cmp	r3, r2
 8024742:	bfd8      	it	le
 8024744:	f040 0008 	orrle.w	r0, r0, #8
 8024748:	4770      	bx	lr
	...

0802474c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802474c:	4b07      	ldr	r3, [pc, #28]	; (802476c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802474e:	b510      	push	{r4, lr}
 8024750:	781b      	ldrb	r3, [r3, #0]
 8024752:	2b01      	cmp	r3, #1
 8024754:	d108      	bne.n	8024768 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8024756:	6843      	ldr	r3, [r0, #4]
 8024758:	6814      	ldr	r4, [r2, #0]
 802475a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802475e:	680b      	ldr	r3, [r1, #0]
 8024760:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8024764:	6013      	str	r3, [r2, #0]
 8024766:	600c      	str	r4, [r1, #0]
 8024768:	bd10      	pop	{r4, pc}
 802476a:	bf00      	nop
 802476c:	200566f0 	.word	0x200566f0

08024770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024772:	b085      	sub	sp, #20
 8024774:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024778:	4604      	mov	r4, r0
 802477a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802477e:	b33b      	cbz	r3, 80247d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8024780:	aa02      	add	r2, sp, #8
 8024782:	a903      	add	r1, sp, #12
 8024784:	f7ff ffe2 	bl	802474c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024788:	68a3      	ldr	r3, [r4, #8]
 802478a:	9e03      	ldr	r6, [sp, #12]
 802478c:	aa02      	add	r2, sp, #8
 802478e:	9f02      	ldr	r7, [sp, #8]
 8024790:	a903      	add	r1, sp, #12
 8024792:	1af6      	subs	r6, r6, r3
 8024794:	68e3      	ldr	r3, [r4, #12]
 8024796:	4620      	mov	r0, r4
 8024798:	1aff      	subs	r7, r7, r3
 802479a:	f104 0314 	add.w	r3, r4, #20
 802479e:	9603      	str	r6, [sp, #12]
 80247a0:	9300      	str	r3, [sp, #0]
 80247a2:	f104 0310 	add.w	r3, r4, #16
 80247a6:	9702      	str	r7, [sp, #8]
 80247a8:	f7ff ffb8 	bl	802471c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80247ac:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80247b0:	4605      	mov	r5, r0
 80247b2:	b97b      	cbnz	r3, 80247d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80247b4:	463a      	mov	r2, r7
 80247b6:	4631      	mov	r1, r6
 80247b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80247bc:	f7ff fe78 	bl	80244b0 <_ZN8touchgfx10Rasterizer6lineToEii>
 80247c0:	9b03      	ldr	r3, [sp, #12]
 80247c2:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80247c6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80247ca:	9b02      	ldr	r3, [sp, #8]
 80247cc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80247d0:	b005      	add	sp, #20
 80247d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80247d4:	b110      	cbz	r0, 80247dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80247d6:	ea13 0200 	ands.w	r2, r3, r0
 80247da:	d11c      	bne.n	8024816 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80247dc:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 80247e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80247e4:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 80247e8:	b188      	cbz	r0, 802480e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80247ea:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 80247ee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80247f2:	b913      	cbnz	r3, 80247fa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80247f4:	4630      	mov	r0, r6
 80247f6:	f001 f821 	bl	802583c <_ZN8touchgfx7Outline6moveToEii>
 80247fa:	2300      	movs	r3, #0
 80247fc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024800:	2301      	movs	r3, #1
 8024802:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8024806:	4630      	mov	r0, r6
 8024808:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802480c:	e7d6      	b.n	80247bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802480e:	4630      	mov	r0, r6
 8024810:	f7ff fe4e 	bl	80244b0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024814:	e7f7      	b.n	8024806 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8024816:	4615      	mov	r5, r2
 8024818:	e7d2      	b.n	80247c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802481a <_ZN8touchgfx6Canvas5closeEv>:
 802481a:	b538      	push	{r3, r4, r5, lr}
 802481c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8024820:	4604      	mov	r4, r0
 8024822:	b993      	cbnz	r3, 802484a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024824:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8024828:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802482c:	4213      	tst	r3, r2
 802482e:	d10c      	bne.n	802484a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024830:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8024834:	b123      	cbz	r3, 8024840 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8024836:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802483a:	4628      	mov	r0, r5
 802483c:	f7ff fe38 	bl	80244b0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024840:	4628      	mov	r0, r5
 8024842:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8024846:	f7ff fe33 	bl	80244b0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802484a:	2300      	movs	r3, #0
 802484c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024850:	bd38      	pop	{r3, r4, r5, pc}

08024852 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024854:	b085      	sub	sp, #20
 8024856:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802485a:	4604      	mov	r4, r0
 802485c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024860:	b353      	cbz	r3, 80248b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8024862:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8024866:	b90b      	cbnz	r3, 802486c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8024868:	f7ff ffd7 	bl	802481a <_ZN8touchgfx6Canvas5closeEv>
 802486c:	aa02      	add	r2, sp, #8
 802486e:	a903      	add	r1, sp, #12
 8024870:	4620      	mov	r0, r4
 8024872:	f7ff ff6b 	bl	802474c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024876:	68a3      	ldr	r3, [r4, #8]
 8024878:	9d03      	ldr	r5, [sp, #12]
 802487a:	aa02      	add	r2, sp, #8
 802487c:	9e02      	ldr	r6, [sp, #8]
 802487e:	a903      	add	r1, sp, #12
 8024880:	1aed      	subs	r5, r5, r3
 8024882:	68e3      	ldr	r3, [r4, #12]
 8024884:	4620      	mov	r0, r4
 8024886:	1af6      	subs	r6, r6, r3
 8024888:	f104 0314 	add.w	r3, r4, #20
 802488c:	9503      	str	r5, [sp, #12]
 802488e:	9300      	str	r3, [sp, #0]
 8024890:	f104 0310 	add.w	r3, r4, #16
 8024894:	9602      	str	r6, [sp, #8]
 8024896:	f7ff ff41 	bl	802471c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802489a:	4607      	mov	r7, r0
 802489c:	b170      	cbz	r0, 80248bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802489e:	2301      	movs	r3, #1
 80248a0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80248a4:	9a03      	ldr	r2, [sp, #12]
 80248a6:	9b02      	ldr	r3, [sp, #8]
 80248a8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80248ac:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80248b0:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80248b4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80248b8:	b005      	add	sp, #20
 80248ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248bc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80248c0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 80248c4:	b92b      	cbnz	r3, 80248d2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80248c6:	4632      	mov	r2, r6
 80248c8:	4629      	mov	r1, r5
 80248ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80248ce:	f000 ffb5 	bl	802583c <_ZN8touchgfx7Outline6moveToEii>
 80248d2:	2300      	movs	r3, #0
 80248d4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80248d8:	2301      	movs	r3, #1
 80248da:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80248de:	e7e1      	b.n	80248a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080248e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80248e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248e4:	4604      	mov	r4, r0
 80248e6:	b087      	sub	sp, #28
 80248e8:	9105      	str	r1, [sp, #20]
 80248ea:	f001 f8ec 	bl	8025ac6 <_ZN8touchgfx7Outline8getCellsEv>
 80248ee:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80248f2:	4605      	mov	r5, r0
 80248f4:	f1b9 0f00 	cmp.w	r9, #0
 80248f8:	d103      	bne.n	8024902 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80248fa:	2001      	movs	r0, #1
 80248fc:	b007      	add	sp, #28
 80248fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024902:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8024906:	2e00      	cmp	r6, #0
 8024908:	d139      	bne.n	802497e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802490a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802490e:	f105 0708 	add.w	r7, r5, #8
 8024912:	4640      	mov	r0, r8
 8024914:	f001 f919 	bl	8025b4a <_ZN8touchgfx8Scanline5resetEv>
 8024918:	f109 33ff 	add.w	r3, r9, #4294967295
 802491c:	9303      	str	r3, [sp, #12]
 802491e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8024922:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8024926:	46da      	mov	sl, fp
 8024928:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802492c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8024930:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8024934:	9b03      	ldr	r3, [sp, #12]
 8024936:	4416      	add	r6, r2
 8024938:	9504      	str	r5, [sp, #16]
 802493a:	463d      	mov	r5, r7
 802493c:	3b01      	subs	r3, #1
 802493e:	9303      	str	r3, [sp, #12]
 8024940:	3301      	adds	r3, #1
 8024942:	d01e      	beq.n	8024982 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8024944:	3708      	adds	r7, #8
 8024946:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802494a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802494e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8024952:	4290      	cmp	r0, r2
 8024954:	d11e      	bne.n	8024994 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8024956:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802495a:	4411      	add	r1, r2
 802495c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024960:	e7e8      	b.n	8024934 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8024962:	1c91      	adds	r1, r2, #2
 8024964:	f04f 0301 	mov.w	r3, #1
 8024968:	65e1      	str	r1, [r4, #92]	; 0x5c
 802496a:	8053      	strh	r3, [r2, #2]
 802496c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802496e:	1c91      	adds	r1, r2, #2
 8024970:	65a1      	str	r1, [r4, #88]	; 0x58
 8024972:	f8a2 b002 	strh.w	fp, [r2, #2]
 8024976:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024978:	3201      	adds	r2, #1
 802497a:	6562      	str	r2, [r4, #84]	; 0x54
 802497c:	e03a      	b.n	80249f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802497e:	2000      	movs	r0, #0
 8024980:	e7bc      	b.n	80248fc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024982:	b951      	cbnz	r1, 802499a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024984:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024986:	2b00      	cmp	r3, #0
 8024988:	d0b7      	beq.n	80248fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802498a:	4641      	mov	r1, r8
 802498c:	9805      	ldr	r0, [sp, #20]
 802498e:	f7ff fd59 	bl	8024444 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024992:	e7b2      	b.n	80248fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024994:	2900      	cmp	r1, #0
 8024996:	d035      	beq.n	8024a04 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8024998:	9504      	str	r5, [sp, #16]
 802499a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802499e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80249a2:	f7ff fd3b 	bl	802441c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 80249a6:	4605      	mov	r5, r0
 80249a8:	b330      	cbz	r0, 80249f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80249aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80249ac:	b182      	cbz	r2, 80249d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80249ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80249b0:	4591      	cmp	r9, r2
 80249b2:	d00d      	beq.n	80249d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80249b4:	4641      	mov	r1, r8
 80249b6:	9805      	ldr	r0, [sp, #20]
 80249b8:	f7ff fd44 	bl	8024444 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80249bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80249c0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80249c2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80249c6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80249c8:	2300      	movs	r3, #0
 80249ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80249cc:	6563      	str	r3, [r4, #84]	; 0x54
 80249ce:	65a2      	str	r2, [r4, #88]	; 0x58
 80249d0:	f1bb 0f00 	cmp.w	fp, #0
 80249d4:	db10      	blt.n	80249f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80249d6:	f7f2 fce3 	bl	80173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80249da:	4583      	cmp	fp, r0
 80249dc:	da0c      	bge.n	80249f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80249de:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80249e0:	f802 500b 	strb.w	r5, [r2, fp]
 80249e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80249e6:	3201      	adds	r2, #1
 80249e8:	4593      	cmp	fp, r2
 80249ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80249ec:	d1b9      	bne.n	8024962 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 80249ee:	8811      	ldrh	r1, [r2, #0]
 80249f0:	3101      	adds	r1, #1
 80249f2:	8011      	strh	r1, [r2, #0]
 80249f4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80249f8:	9b03      	ldr	r3, [sp, #12]
 80249fa:	3301      	adds	r3, #1
 80249fc:	d0c2      	beq.n	8024984 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80249fe:	f10b 0a01 	add.w	sl, fp, #1
 8024a02:	9d04      	ldr	r5, [sp, #16]
 8024a04:	f9b5 3000 	ldrsh.w	r3, [r5]
 8024a08:	4553      	cmp	r3, sl
 8024a0a:	dd88      	ble.n	802491e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024a0c:	01b1      	lsls	r1, r6, #6
 8024a0e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024a12:	f7ff fd03 	bl	802441c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8024a16:	4683      	mov	fp, r0
 8024a18:	2800      	cmp	r0, #0
 8024a1a:	d080      	beq.n	802491e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024a1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024a1e:	b183      	cbz	r3, 8024a42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024a20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024a22:	4599      	cmp	r9, r3
 8024a24:	d00d      	beq.n	8024a42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024a26:	4641      	mov	r1, r8
 8024a28:	9805      	ldr	r0, [sp, #20]
 8024a2a:	f7ff fd0b 	bl	8024444 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024a2e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024a32:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8024a36:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8024a38:	65e3      	str	r3, [r4, #92]	; 0x5c
 8024a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024a3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8024a3e:	2300      	movs	r3, #0
 8024a40:	6563      	str	r3, [r4, #84]	; 0x54
 8024a42:	f9b5 3000 	ldrsh.w	r3, [r5]
 8024a46:	464a      	mov	r2, r9
 8024a48:	f8cd b000 	str.w	fp, [sp]
 8024a4c:	4651      	mov	r1, sl
 8024a4e:	eba3 030a 	sub.w	r3, r3, sl
 8024a52:	4640      	mov	r0, r8
 8024a54:	f001 f8a4 	bl	8025ba0 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8024a58:	e761      	b.n	802491e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08024a5a <_ZN8touchgfx6Canvas6renderEh>:
 8024a5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024a5c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024a60:	4604      	mov	r4, r0
 8024a62:	460d      	mov	r5, r1
 8024a64:	b913      	cbnz	r3, 8024a6c <_ZN8touchgfx6Canvas6renderEh+0x12>
 8024a66:	2001      	movs	r0, #1
 8024a68:	b003      	add	sp, #12
 8024a6a:	bd30      	pop	{r4, r5, pc}
 8024a6c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	d12f      	bne.n	8024ad4 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8024a74:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8024a78:	2b00      	cmp	r3, #0
 8024a7a:	d0f4      	beq.n	8024a66 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8024a7c:	6840      	ldr	r0, [r0, #4]
 8024a7e:	6803      	ldr	r3, [r0, #0]
 8024a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024a82:	4798      	blx	r3
 8024a84:	fb10 f105 	smulbb	r1, r0, r5
 8024a88:	b288      	uxth	r0, r1
 8024a8a:	1c41      	adds	r1, r0, #1
 8024a8c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024a90:	120d      	asrs	r5, r1, #8
 8024a92:	d0e8      	beq.n	8024a66 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8024a94:	4620      	mov	r0, r4
 8024a96:	f7ff fec0 	bl	802481a <_ZN8touchgfx6Canvas5closeEv>
 8024a9a:	6860      	ldr	r0, [r4, #4]
 8024a9c:	6803      	ldr	r3, [r0, #0]
 8024a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024aa0:	4798      	blx	r3
 8024aa2:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 8024aa6:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8024aaa:	8082      	strh	r2, [r0, #4]
 8024aac:	80c3      	strh	r3, [r0, #6]
 8024aae:	6860      	ldr	r0, [r4, #4]
 8024ab0:	6803      	ldr	r3, [r0, #0]
 8024ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024ab4:	4798      	blx	r3
 8024ab6:	7205      	strb	r5, [r0, #8]
 8024ab8:	6860      	ldr	r0, [r4, #4]
 8024aba:	6803      	ldr	r3, [r0, #0]
 8024abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024abe:	4798      	blx	r3
 8024ac0:	f104 0318 	add.w	r3, r4, #24
 8024ac4:	4669      	mov	r1, sp
 8024ac6:	e9cd 3000 	strd	r3, r0, [sp]
 8024aca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024ace:	f7ff ff07 	bl	80248e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8024ad2:	e7c9      	b.n	8024a68 <_ZN8touchgfx6Canvas6renderEh+0xe>
 8024ad4:	2000      	movs	r0, #0
 8024ad6:	e7c7      	b.n	8024a68 <_ZN8touchgfx6Canvas6renderEh+0xe>

08024ad8 <_ZN8touchgfx6CanvasD1Ev>:
 8024ad8:	b538      	push	{r3, r4, r5, lr}
 8024ada:	4605      	mov	r5, r0
 8024adc:	4b08      	ldr	r3, [pc, #32]	; (8024b00 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8024ade:	4604      	mov	r4, r0
 8024ae0:	f845 3b30 	str.w	r3, [r5], #48
 8024ae4:	4b07      	ldr	r3, [pc, #28]	; (8024b04 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8024ae6:	6818      	ldr	r0, [r3, #0]
 8024ae8:	6803      	ldr	r3, [r0, #0]
 8024aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024aec:	4798      	blx	r3
 8024aee:	4628      	mov	r0, r5
 8024af0:	f000 f814 	bl	8024b1c <_ZN8touchgfx7OutlineD1Ev>
 8024af4:	f104 0018 	add.w	r0, r4, #24
 8024af8:	f001 f88b 	bl	8025c12 <_ZN8touchgfx15RenderingBufferD1Ev>
 8024afc:	4620      	mov	r0, r4
 8024afe:	bd38      	pop	{r3, r4, r5, pc}
 8024b00:	0802e7bc 	.word	0x0802e7bc
 8024b04:	200566f8 	.word	0x200566f8

08024b08 <_ZN8touchgfx6CanvasD0Ev>:
 8024b08:	b510      	push	{r4, lr}
 8024b0a:	4604      	mov	r4, r0
 8024b0c:	f7ff ffe4 	bl	8024ad8 <_ZN8touchgfx6CanvasD1Ev>
 8024b10:	21bc      	movs	r1, #188	; 0xbc
 8024b12:	4620      	mov	r0, r4
 8024b14:	f001 f89f 	bl	8025c56 <_ZdlPvj>
 8024b18:	4620      	mov	r0, r4
 8024b1a:	bd10      	pop	{r4, pc}

08024b1c <_ZN8touchgfx7OutlineD1Ev>:
 8024b1c:	4770      	bx	lr

08024b1e <_ZN8touchgfx7OutlineD0Ev>:
 8024b1e:	b510      	push	{r4, lr}
 8024b20:	4604      	mov	r4, r0
 8024b22:	2148      	movs	r1, #72	; 0x48
 8024b24:	f001 f897 	bl	8025c56 <_ZdlPvj>
 8024b28:	4620      	mov	r0, r4
 8024b2a:	bd10      	pop	{r4, pc}

08024b2c <_ZN8touchgfx7Outline5resetEv>:
 8024b2c:	b510      	push	{r4, lr}
 8024b2e:	4604      	mov	r4, r0
 8024b30:	f7f2 fc4e 	bl	80173d0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8024b34:	60e0      	str	r0, [r4, #12]
 8024b36:	f7f2 fc51 	bl	80173dc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8024b3a:	68e3      	ldr	r3, [r4, #12]
 8024b3c:	2200      	movs	r2, #0
 8024b3e:	08c0      	lsrs	r0, r0, #3
 8024b40:	6123      	str	r3, [r4, #16]
 8024b42:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024b46:	6060      	str	r0, [r4, #4]
 8024b48:	82a3      	strh	r3, [r4, #20]
 8024b4a:	82e3      	strh	r3, [r4, #22]
 8024b4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024b4e:	60a2      	str	r2, [r4, #8]
 8024b50:	f023 0301 	bic.w	r3, r3, #1
 8024b54:	8322      	strh	r2, [r4, #24]
 8024b56:	8362      	strh	r2, [r4, #26]
 8024b58:	f043 0302 	orr.w	r3, r3, #2
 8024b5c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024b60:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024b62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024b66:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8024b6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024b6e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8024b72:	bd10      	pop	{r4, pc}

08024b74 <_ZN8touchgfx7OutlineC1Ev>:
 8024b74:	4b0f      	ldr	r3, [pc, #60]	; (8024bb4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8024b76:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024b7a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8024b7e:	b510      	push	{r4, lr}
 8024b80:	6003      	str	r3, [r0, #0]
 8024b82:	2300      	movs	r3, #0
 8024b84:	4604      	mov	r4, r0
 8024b86:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8024b8a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024b8e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024b92:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8024b96:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8024b9a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8024b9e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8024ba2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8024ba6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8024baa:	f7ff ffbf 	bl	8024b2c <_ZN8touchgfx7Outline5resetEv>
 8024bae:	4620      	mov	r0, r4
 8024bb0:	bd10      	pop	{r4, pc}
 8024bb2:	bf00      	nop
 8024bb4:	0802e88c 	.word	0x0802e88c

08024bb8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8024bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bbc:	b095      	sub	sp, #84	; 0x54
 8024bbe:	4604      	mov	r4, r0
 8024bc0:	1155      	asrs	r5, r2, #5
 8024bc2:	f002 061f 	and.w	r6, r2, #31
 8024bc6:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024bc8:	1157      	asrs	r7, r2, #5
 8024bca:	9304      	str	r3, [sp, #16]
 8024bcc:	1153      	asrs	r3, r2, #5
 8024bce:	9300      	str	r3, [sp, #0]
 8024bd0:	1143      	asrs	r3, r0, #5
 8024bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8024bd4:	f000 031f 	and.w	r3, r0, #31
 8024bd8:	9303      	str	r3, [sp, #12]
 8024bda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024bdc:	42ab      	cmp	r3, r5
 8024bde:	bfc8      	it	gt
 8024be0:	462b      	movgt	r3, r5
 8024be2:	ea4f 1562 	mov.w	r5, r2, asr #5
 8024be6:	bfc8      	it	gt
 8024be8:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024bec:	42ab      	cmp	r3, r5
 8024bee:	bfd8      	it	le
 8024bf0:	462b      	movle	r3, r5
 8024bf2:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024bf6:	bfdc      	itt	le
 8024bf8:	3301      	addle	r3, #1
 8024bfa:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024bfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024bfe:	42ab      	cmp	r3, r5
 8024c00:	bfc8      	it	gt
 8024c02:	462b      	movgt	r3, r5
 8024c04:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024c08:	bfc8      	it	gt
 8024c0a:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024c0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024c0e:	42ab      	cmp	r3, r5
 8024c10:	bfd8      	it	le
 8024c12:	462b      	movle	r3, r5
 8024c14:	ea4f 1561 	mov.w	r5, r1, asr #5
 8024c18:	bfdc      	itt	le
 8024c1a:	3301      	addle	r3, #1
 8024c1c:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024c1e:	9b04      	ldr	r3, [sp, #16]
 8024c20:	eba3 0a01 	sub.w	sl, r3, r1
 8024c24:	1143      	asrs	r3, r0, #5
 8024c26:	429f      	cmp	r7, r3
 8024c28:	f040 811d 	bne.w	8024e66 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 8024c2c:	9b04      	ldr	r3, [sp, #16]
 8024c2e:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8024c32:	9b03      	ldr	r3, [sp, #12]
 8024c34:	429e      	cmp	r6, r3
 8024c36:	d131      	bne.n	8024c9c <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8024c38:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024c3c:	fa0f fb8b 	sxth.w	fp, fp
 8024c40:	f9bd 2000 	ldrsh.w	r2, [sp]
 8024c44:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024c48:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 8024c4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024c50:	4281      	cmp	r1, r0
 8024c52:	f000 80e6 	beq.w	8024e22 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024c56:	8b60      	ldrh	r0, [r4, #26]
 8024c58:	8b21      	ldrh	r1, [r4, #24]
 8024c5a:	4301      	orrs	r1, r0
 8024c5c:	d00b      	beq.n	8024c76 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024c5e:	2b00      	cmp	r3, #0
 8024c60:	db09      	blt.n	8024c76 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024c62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c64:	428b      	cmp	r3, r1
 8024c66:	da06      	bge.n	8024c76 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024c68:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024c6c:	4299      	cmp	r1, r3
 8024c6e:	d308      	bcc.n	8024c82 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 8024c70:	2301      	movs	r3, #1
 8024c72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c76:	f8a4 b014 	strh.w	fp, [r4, #20]
 8024c7a:	2300      	movs	r3, #0
 8024c7c:	82e2      	strh	r2, [r4, #22]
 8024c7e:	8323      	strh	r3, [r4, #24]
 8024c80:	e01f      	b.n	8024cc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8024c82:	f104 0314 	add.w	r3, r4, #20
 8024c86:	6925      	ldr	r5, [r4, #16]
 8024c88:	cb03      	ldmia	r3!, {r0, r1}
 8024c8a:	6028      	str	r0, [r5, #0]
 8024c8c:	6069      	str	r1, [r5, #4]
 8024c8e:	6923      	ldr	r3, [r4, #16]
 8024c90:	3308      	adds	r3, #8
 8024c92:	6123      	str	r3, [r4, #16]
 8024c94:	68a3      	ldr	r3, [r4, #8]
 8024c96:	3301      	adds	r3, #1
 8024c98:	60a3      	str	r3, [r4, #8]
 8024c9a:	e7ec      	b.n	8024c76 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024c9c:	9b04      	ldr	r3, [sp, #16]
 8024c9e:	45ab      	cmp	fp, r5
 8024ca0:	f001 011f 	and.w	r1, r1, #31
 8024ca4:	8b20      	ldrh	r0, [r4, #24]
 8024ca6:	f003 031f 	and.w	r3, r3, #31
 8024caa:	8b62      	ldrh	r2, [r4, #26]
 8024cac:	9305      	str	r3, [sp, #20]
 8024cae:	9b03      	ldr	r3, [sp, #12]
 8024cb0:	eba3 0306 	sub.w	r3, r3, r6
 8024cb4:	d107      	bne.n	8024cc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 8024cb6:	4418      	add	r0, r3
 8024cb8:	8320      	strh	r0, [r4, #24]
 8024cba:	9805      	ldr	r0, [sp, #20]
 8024cbc:	4401      	add	r1, r0
 8024cbe:	fb03 2301 	mla	r3, r3, r1, r2
 8024cc2:	8363      	strh	r3, [r4, #26]
 8024cc4:	e0ad      	b.n	8024e22 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024cc6:	f1ba 0f00 	cmp.w	sl, #0
 8024cca:	db33      	blt.n	8024d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 8024ccc:	2701      	movs	r7, #1
 8024cce:	f1c1 0c20 	rsb	ip, r1, #32
 8024cd2:	9702      	str	r7, [sp, #8]
 8024cd4:	2720      	movs	r7, #32
 8024cd6:	fb03 f30c 	mul.w	r3, r3, ip
 8024cda:	9701      	str	r7, [sp, #4]
 8024cdc:	9f01      	ldr	r7, [sp, #4]
 8024cde:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024ce2:	4439      	add	r1, r7
 8024ce4:	fb93 fcfa 	sdiv	ip, r3, sl
 8024ce8:	fb0a 331c 	mls	r3, sl, ip, r3
 8024cec:	2b00      	cmp	r3, #0
 8024cee:	bfbc      	itt	lt
 8024cf0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024cf4:	4453      	addlt	r3, sl
 8024cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8024cfa:	9a02      	ldr	r2, [sp, #8]
 8024cfc:	4460      	add	r0, ip
 8024cfe:	4415      	add	r5, r2
 8024d00:	f9bd 2000 	ldrsh.w	r2, [sp]
 8024d04:	b200      	sxth	r0, r0
 8024d06:	0417      	lsls	r7, r2, #16
 8024d08:	9200      	str	r2, [sp, #0]
 8024d0a:	fa0f fe85 	sxth.w	lr, r5
 8024d0e:	8320      	strh	r0, [r4, #24]
 8024d10:	9704      	str	r7, [sp, #16]
 8024d12:	b209      	sxth	r1, r1
 8024d14:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8024d18:	9a04      	ldr	r2, [sp, #16]
 8024d1a:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 8024d1e:	8361      	strh	r1, [r4, #26]
 8024d20:	eb0e 0902 	add.w	r9, lr, r2
 8024d24:	454f      	cmp	r7, r9
 8024d26:	d10d      	bne.n	8024d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8024d28:	4ba0      	ldr	r3, [pc, #640]	; (8024fac <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 8024d2a:	2177      	movs	r1, #119	; 0x77
 8024d2c:	4aa0      	ldr	r2, [pc, #640]	; (8024fb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 8024d2e:	48a1      	ldr	r0, [pc, #644]	; (8024fb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8024d30:	f001 f8c6 	bl	8025ec0 <__assert_func>
 8024d34:	f04f 37ff 	mov.w	r7, #4294967295
 8024d38:	434b      	muls	r3, r1
 8024d3a:	f1ca 0a00 	rsb	sl, sl, #0
 8024d3e:	9702      	str	r7, [sp, #8]
 8024d40:	2700      	movs	r7, #0
 8024d42:	e7ca      	b.n	8024cda <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8024d44:	ea50 0201 	orrs.w	r2, r0, r1
 8024d48:	d00c      	beq.n	8024d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024d4a:	f1b8 0f00 	cmp.w	r8, #0
 8024d4e:	db09      	blt.n	8024d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024d50:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d52:	4588      	cmp	r8, r1
 8024d54:	da06      	bge.n	8024d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024d56:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024d5a:	4288      	cmp	r0, r1
 8024d5c:	d364      	bcc.n	8024e28 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8024d5e:	2101      	movs	r1, #1
 8024d60:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024d64:	2100      	movs	r1, #0
 8024d66:	9a00      	ldr	r2, [sp, #0]
 8024d68:	45ab      	cmp	fp, r5
 8024d6a:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024d6e:	82e2      	strh	r2, [r4, #22]
 8024d70:	4466      	add	r6, ip
 8024d72:	8321      	strh	r1, [r4, #24]
 8024d74:	8361      	strh	r1, [r4, #26]
 8024d76:	d04b      	beq.n	8024e10 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8024d78:	9a03      	ldr	r2, [sp, #12]
 8024d7a:	eba3 030a 	sub.w	r3, r3, sl
 8024d7e:	f04f 0800 	mov.w	r8, #0
 8024d82:	1b91      	subs	r1, r2, r6
 8024d84:	448c      	add	ip, r1
 8024d86:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024d8a:	fb9c f7fa 	sdiv	r7, ip, sl
 8024d8e:	fb0a cc17 	mls	ip, sl, r7, ip
 8024d92:	f1bc 0f00 	cmp.w	ip, #0
 8024d96:	bfbc      	itt	lt
 8024d98:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024d9c:	44d4      	addlt	ip, sl
 8024d9e:	1c7a      	adds	r2, r7, #1
 8024da0:	9207      	str	r2, [sp, #28]
 8024da2:	eb13 030c 	adds.w	r3, r3, ip
 8024da6:	9a02      	ldr	r2, [sp, #8]
 8024da8:	bf54      	ite	pl
 8024daa:	9807      	ldrpl	r0, [sp, #28]
 8024dac:	4638      	movmi	r0, r7
 8024dae:	4415      	add	r5, r2
 8024db0:	9a04      	ldr	r2, [sp, #16]
 8024db2:	fa0f fe80 	sxth.w	lr, r0
 8024db6:	4406      	add	r6, r0
 8024db8:	ea4f 1140 	mov.w	r1, r0, lsl #5
 8024dbc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024dc0:	fa0f f985 	sxth.w	r9, r5
 8024dc4:	bf58      	it	pl
 8024dc6:	eba3 030a 	subpl.w	r3, r3, sl
 8024dca:	4410      	add	r0, r2
 8024dcc:	b209      	sxth	r1, r1
 8024dce:	444a      	add	r2, r9
 8024dd0:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024dd4:	8361      	strh	r1, [r4, #26]
 8024dd6:	4290      	cmp	r0, r2
 8024dd8:	d0a6      	beq.n	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024dda:	ea5e 0201 	orrs.w	r2, lr, r1
 8024dde:	d00d      	beq.n	8024dfc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024de0:	9a00      	ldr	r2, [sp, #0]
 8024de2:	2a00      	cmp	r2, #0
 8024de4:	db0a      	blt.n	8024dfc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024de6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024de8:	428a      	cmp	r2, r1
 8024dea:	da07      	bge.n	8024dfc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024dec:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024df0:	4288      	cmp	r0, r1
 8024df2:	d329      	bcc.n	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 8024df4:	f04f 0201 	mov.w	r2, #1
 8024df8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024dfc:	9a00      	ldr	r2, [sp, #0]
 8024dfe:	45ab      	cmp	fp, r5
 8024e00:	f8a4 9014 	strh.w	r9, [r4, #20]
 8024e04:	82e2      	strh	r2, [r4, #22]
 8024e06:	f8a4 8018 	strh.w	r8, [r4, #24]
 8024e0a:	f8a4 801a 	strh.w	r8, [r4, #26]
 8024e0e:	d1c8      	bne.n	8024da2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8024e10:	9b03      	ldr	r3, [sp, #12]
 8024e12:	9a01      	ldr	r2, [sp, #4]
 8024e14:	1b9e      	subs	r6, r3, r6
 8024e16:	9b05      	ldr	r3, [sp, #20]
 8024e18:	3320      	adds	r3, #32
 8024e1a:	8326      	strh	r6, [r4, #24]
 8024e1c:	1a9b      	subs	r3, r3, r2
 8024e1e:	435e      	muls	r6, r3
 8024e20:	8366      	strh	r6, [r4, #26]
 8024e22:	b015      	add	sp, #84	; 0x54
 8024e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e28:	f104 0714 	add.w	r7, r4, #20
 8024e2c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024e30:	cf03      	ldmia	r7!, {r0, r1}
 8024e32:	f8c8 0000 	str.w	r0, [r8]
 8024e36:	f8c8 1004 	str.w	r1, [r8, #4]
 8024e3a:	6921      	ldr	r1, [r4, #16]
 8024e3c:	3108      	adds	r1, #8
 8024e3e:	6121      	str	r1, [r4, #16]
 8024e40:	68a1      	ldr	r1, [r4, #8]
 8024e42:	3101      	adds	r1, #1
 8024e44:	60a1      	str	r1, [r4, #8]
 8024e46:	e78d      	b.n	8024d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024e48:	f104 0e14 	add.w	lr, r4, #20
 8024e4c:	6922      	ldr	r2, [r4, #16]
 8024e4e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024e52:	9206      	str	r2, [sp, #24]
 8024e54:	6010      	str	r0, [r2, #0]
 8024e56:	6051      	str	r1, [r2, #4]
 8024e58:	6921      	ldr	r1, [r4, #16]
 8024e5a:	3108      	adds	r1, #8
 8024e5c:	6121      	str	r1, [r4, #16]
 8024e5e:	68a1      	ldr	r1, [r4, #8]
 8024e60:	3101      	adds	r1, #1
 8024e62:	60a1      	str	r1, [r4, #8]
 8024e64:	e7ca      	b.n	8024dfc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024e66:	eba0 0b02 	sub.w	fp, r0, r2
 8024e6a:	f1ba 0f00 	cmp.w	sl, #0
 8024e6e:	f040 80a3 	bne.w	8024fb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8024e72:	f1bb 0f00 	cmp.w	fp, #0
 8024e76:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024e7a:	8b62      	ldrh	r2, [r4, #26]
 8024e7c:	b22d      	sxth	r5, r5
 8024e7e:	bfa8      	it	ge
 8024e80:	f04f 0a20 	movge.w	sl, #32
 8024e84:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8024e88:	8b21      	ldrh	r1, [r4, #24]
 8024e8a:	bfb8      	it	lt
 8024e8c:	f04f 39ff 	movlt.w	r9, #4294967295
 8024e90:	ebaa 0606 	sub.w	r6, sl, r6
 8024e94:	bfa8      	it	ge
 8024e96:	f04f 0901 	movge.w	r9, #1
 8024e9a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8024e9e:	4431      	add	r1, r6
 8024ea0:	fb06 2603 	mla	r6, r6, r3, r2
 8024ea4:	9a00      	ldr	r2, [sp, #0]
 8024ea6:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8024eaa:	b209      	sxth	r1, r1
 8024eac:	444a      	add	r2, r9
 8024eae:	b236      	sxth	r6, r6
 8024eb0:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 8024eb4:	8321      	strh	r1, [r4, #24]
 8024eb6:	b217      	sxth	r7, r2
 8024eb8:	8366      	strh	r6, [r4, #26]
 8024eba:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 8024ebe:	45f4      	cmp	ip, lr
 8024ec0:	f43f af32 	beq.w	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024ec4:	4331      	orrs	r1, r6
 8024ec6:	d00b      	beq.n	8024ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024ec8:	2800      	cmp	r0, #0
 8024eca:	db09      	blt.n	8024ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024ecc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024ece:	4288      	cmp	r0, r1
 8024ed0:	da06      	bge.n	8024ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024ed2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024ed6:	4288      	cmp	r0, r1
 8024ed8:	d33b      	bcc.n	8024f52 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 8024eda:	2101      	movs	r1, #1
 8024edc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024ee0:	f1aa 0610 	sub.w	r6, sl, #16
 8024ee4:	82e7      	strh	r7, [r4, #22]
 8024ee6:	2700      	movs	r7, #0
 8024ee8:	82a5      	strh	r5, [r4, #20]
 8024eea:	0076      	lsls	r6, r6, #1
 8024eec:	8327      	strh	r7, [r4, #24]
 8024eee:	fb06 fc03 	mul.w	ip, r6, r3
 8024ef2:	b236      	sxth	r6, r6
 8024ef4:	8367      	strh	r7, [r4, #26]
 8024ef6:	fa0f fc8c 	sxth.w	ip, ip
 8024efa:	ea46 010c 	orr.w	r1, r6, ip
 8024efe:	9100      	str	r1, [sp, #0]
 8024f00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024f02:	428a      	cmp	r2, r1
 8024f04:	d046      	beq.n	8024f94 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 8024f06:	444a      	add	r2, r9
 8024f08:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024f0c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024f10:	fa0f f882 	sxth.w	r8, r2
 8024f14:	8326      	strh	r6, [r4, #24]
 8024f16:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024f1a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024f1e:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 8024f22:	4570      	cmp	r0, lr
 8024f24:	f43f af00 	beq.w	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024f28:	9800      	ldr	r0, [sp, #0]
 8024f2a:	b160      	cbz	r0, 8024f46 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024f2c:	2900      	cmp	r1, #0
 8024f2e:	db0a      	blt.n	8024f46 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024f30:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024f32:	4281      	cmp	r1, r0
 8024f34:	da07      	bge.n	8024f46 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024f36:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024f3a:	4288      	cmp	r0, r1
 8024f3c:	d319      	bcc.n	8024f72 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 8024f3e:	f04f 0101 	mov.w	r1, #1
 8024f42:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024f46:	82a5      	strh	r5, [r4, #20]
 8024f48:	f8a4 8016 	strh.w	r8, [r4, #22]
 8024f4c:	8327      	strh	r7, [r4, #24]
 8024f4e:	8367      	strh	r7, [r4, #26]
 8024f50:	e7d6      	b.n	8024f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 8024f52:	f104 0614 	add.w	r6, r4, #20
 8024f56:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8024f5a:	ce03      	ldmia	r6!, {r0, r1}
 8024f5c:	f8cc 0000 	str.w	r0, [ip]
 8024f60:	f8cc 1004 	str.w	r1, [ip, #4]
 8024f64:	6921      	ldr	r1, [r4, #16]
 8024f66:	3108      	adds	r1, #8
 8024f68:	6121      	str	r1, [r4, #16]
 8024f6a:	68a1      	ldr	r1, [r4, #8]
 8024f6c:	3101      	adds	r1, #1
 8024f6e:	60a1      	str	r1, [r4, #8]
 8024f70:	e7b6      	b.n	8024ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024f72:	f104 0e14 	add.w	lr, r4, #20
 8024f76:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8024f7a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024f7e:	f8cb 0000 	str.w	r0, [fp]
 8024f82:	f8cb 1004 	str.w	r1, [fp, #4]
 8024f86:	6921      	ldr	r1, [r4, #16]
 8024f88:	3108      	adds	r1, #8
 8024f8a:	6121      	str	r1, [r4, #16]
 8024f8c:	68a1      	ldr	r1, [r4, #8]
 8024f8e:	3101      	adds	r1, #1
 8024f90:	60a1      	str	r1, [r4, #8]
 8024f92:	e7d8      	b.n	8024f46 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024f94:	9a03      	ldr	r2, [sp, #12]
 8024f96:	8b61      	ldrh	r1, [r4, #26]
 8024f98:	f1a2 0e20 	sub.w	lr, r2, #32
 8024f9c:	8b22      	ldrh	r2, [r4, #24]
 8024f9e:	44d6      	add	lr, sl
 8024fa0:	4472      	add	r2, lr
 8024fa2:	fb0e 1303 	mla	r3, lr, r3, r1
 8024fa6:	8322      	strh	r2, [r4, #24]
 8024fa8:	e68b      	b.n	8024cc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8024faa:	bf00      	nop
 8024fac:	0802e813 	.word	0x0802e813
 8024fb0:	0802e894 	.word	0x0802e894
 8024fb4:	0802e844 	.word	0x0802e844
 8024fb8:	f1bb 0f00 	cmp.w	fp, #0
 8024fbc:	f2c0 8124 	blt.w	8025208 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 8024fc0:	2201      	movs	r2, #1
 8024fc2:	f1c6 0320 	rsb	r3, r6, #32
 8024fc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8024fc8:	2220      	movs	r2, #32
 8024fca:	fb0a f303 	mul.w	r3, sl, r3
 8024fce:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024fd2:	9202      	str	r2, [sp, #8]
 8024fd4:	fb93 fcfb 	sdiv	ip, r3, fp
 8024fd8:	fb0b 331c 	mls	r3, fp, ip, r3
 8024fdc:	2b00      	cmp	r3, #0
 8024fde:	9308      	str	r3, [sp, #32]
 8024fe0:	bfbe      	ittt	lt
 8024fe2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024fe6:	445b      	addlt	r3, fp
 8024fe8:	9308      	strlt	r3, [sp, #32]
 8024fea:	eb0c 0301 	add.w	r3, ip, r1
 8024fee:	9301      	str	r3, [sp, #4]
 8024ff0:	115b      	asrs	r3, r3, #5
 8024ff2:	9305      	str	r3, [sp, #20]
 8024ff4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8024ff8:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 8024ffc:	461f      	mov	r7, r3
 8024ffe:	9b02      	ldr	r3, [sp, #8]
 8025000:	42b3      	cmp	r3, r6
 8025002:	f040 8117 	bne.w	8025234 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8025006:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802500a:	f9bd 3000 	ldrsh.w	r3, [sp]
 802500e:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025012:	42b9      	cmp	r1, r7
 8025014:	d016      	beq.n	8025044 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025016:	8b60      	ldrh	r0, [r4, #26]
 8025018:	8b21      	ldrh	r1, [r4, #24]
 802501a:	4301      	orrs	r1, r0
 802501c:	d00d      	beq.n	802503a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802501e:	f1b8 0f00 	cmp.w	r8, #0
 8025022:	db0a      	blt.n	802503a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025024:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025026:	4541      	cmp	r1, r8
 8025028:	dd07      	ble.n	802503a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802502a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802502e:	4288      	cmp	r0, r1
 8025030:	f0c0 80f3 	bcc.w	802521a <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 8025034:	2101      	movs	r1, #1
 8025036:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802503a:	82e3      	strh	r3, [r4, #22]
 802503c:	2300      	movs	r3, #0
 802503e:	82a2      	strh	r2, [r4, #20]
 8025040:	8323      	strh	r3, [r4, #24]
 8025042:	8363      	strh	r3, [r4, #26]
 8025044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025046:	9a00      	ldr	r2, [sp, #0]
 8025048:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802504c:	441a      	add	r2, r3
 802504e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025052:	4691      	mov	r9, r2
 8025054:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8025058:	fa0f f589 	sxth.w	r5, r9
 802505c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8025060:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025064:	4281      	cmp	r1, r0
 8025066:	d015      	beq.n	8025094 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8025068:	8b60      	ldrh	r0, [r4, #26]
 802506a:	8b21      	ldrh	r1, [r4, #24]
 802506c:	4301      	orrs	r1, r0
 802506e:	d00c      	beq.n	802508a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025070:	2a00      	cmp	r2, #0
 8025072:	db0a      	blt.n	802508a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025074:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025076:	428a      	cmp	r2, r1
 8025078:	da07      	bge.n	802508a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802507a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802507e:	4291      	cmp	r1, r2
 8025080:	f0c0 81ae 	bcc.w	80253e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 8025084:	2201      	movs	r2, #1
 8025086:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802508a:	82a3      	strh	r3, [r4, #20]
 802508c:	2300      	movs	r3, #0
 802508e:	82e5      	strh	r5, [r4, #22]
 8025090:	8323      	strh	r3, [r4, #24]
 8025092:	8363      	strh	r3, [r4, #26]
 8025094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025096:	454b      	cmp	r3, r9
 8025098:	f000 808a 	beq.w	80251b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 802509c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80250a0:	fb93 f2fb 	sdiv	r2, r3, fp
 80250a4:	fb0b 3312 	mls	r3, fp, r2, r3
 80250a8:	9205      	str	r2, [sp, #20]
 80250aa:	2b00      	cmp	r3, #0
 80250ac:	9307      	str	r3, [sp, #28]
 80250ae:	da04      	bge.n	80250ba <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 80250b0:	1e53      	subs	r3, r2, #1
 80250b2:	9305      	str	r3, [sp, #20]
 80250b4:	9b07      	ldr	r3, [sp, #28]
 80250b6:	445b      	add	r3, fp
 80250b8:	9307      	str	r3, [sp, #28]
 80250ba:	9b08      	ldr	r3, [sp, #32]
 80250bc:	f04f 0a00 	mov.w	sl, #0
 80250c0:	eba3 030b 	sub.w	r3, r3, fp
 80250c4:	9308      	str	r3, [sp, #32]
 80250c6:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 80250ca:	f1c3 0320 	rsb	r3, r3, #32
 80250ce:	930a      	str	r3, [sp, #40]	; 0x28
 80250d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80250d2:	9b02      	ldr	r3, [sp, #8]
 80250d4:	1a9b      	subs	r3, r3, r2
 80250d6:	9309      	str	r3, [sp, #36]	; 0x24
 80250d8:	9902      	ldr	r1, [sp, #8]
 80250da:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80250de:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80250e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80250e6:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 80250ea:	189b      	adds	r3, r3, r2
 80250ec:	9308      	str	r3, [sp, #32]
 80250ee:	bf57      	itett	pl
 80250f0:	eba3 030b 	subpl.w	r3, r3, fp
 80250f4:	9b05      	ldrmi	r3, [sp, #20]
 80250f6:	9308      	strpl	r3, [sp, #32]
 80250f8:	9b05      	ldrpl	r3, [sp, #20]
 80250fa:	bf58      	it	pl
 80250fc:	3301      	addpl	r3, #1
 80250fe:	9300      	str	r3, [sp, #0]
 8025100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025104:	4413      	add	r3, r2
 8025106:	9301      	str	r3, [sp, #4]
 8025108:	115b      	asrs	r3, r3, #5
 802510a:	9306      	str	r3, [sp, #24]
 802510c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802510e:	428b      	cmp	r3, r1
 8025110:	f040 8180 	bne.w	8025414 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8025114:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8025118:	fa0f f389 	sxth.w	r3, r9
 802511c:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025120:	4541      	cmp	r1, r8
 8025122:	d017      	beq.n	8025154 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025124:	8b60      	ldrh	r0, [r4, #26]
 8025126:	8b21      	ldrh	r1, [r4, #24]
 8025128:	4301      	orrs	r1, r0
 802512a:	d00d      	beq.n	8025148 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802512c:	2e00      	cmp	r6, #0
 802512e:	db0b      	blt.n	8025148 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025130:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025132:	42b1      	cmp	r1, r6
 8025134:	dd08      	ble.n	8025148 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025136:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802513a:	4288      	cmp	r0, r1
 802513c:	f0c0 815d 	bcc.w	80253fa <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8025140:	f04f 0101 	mov.w	r1, #1
 8025144:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025148:	82a2      	strh	r2, [r4, #20]
 802514a:	82e3      	strh	r3, [r4, #22]
 802514c:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025150:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025156:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802515a:	4499      	add	r9, r3
 802515c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025160:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8025164:	fa0f f589 	sxth.w	r5, r9
 8025168:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802516c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025170:	4281      	cmp	r1, r0
 8025172:	f43f add9 	beq.w	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025176:	8b60      	ldrh	r0, [r4, #26]
 8025178:	8b21      	ldrh	r1, [r4, #24]
 802517a:	4301      	orrs	r1, r0
 802517c:	d00d      	beq.n	802519a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802517e:	2a00      	cmp	r2, #0
 8025180:	db0b      	blt.n	802519a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025182:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025184:	428a      	cmp	r2, r1
 8025186:	da08      	bge.n	802519a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025188:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802518c:	4291      	cmp	r1, r2
 802518e:	f0c0 8228 	bcc.w	80255e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 8025192:	f04f 0201 	mov.w	r2, #1
 8025196:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802519a:	82a3      	strh	r3, [r4, #20]
 802519c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802519e:	82e5      	strh	r5, [r4, #22]
 80251a0:	454b      	cmp	r3, r9
 80251a2:	f8a4 a018 	strh.w	sl, [r4, #24]
 80251a6:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80251aa:	f8dd c004 	ldr.w	ip, [sp, #4]
 80251ae:	d193      	bne.n	80250d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 80251b0:	9b02      	ldr	r3, [sp, #8]
 80251b2:	f1c3 0e20 	rsb	lr, r3, #32
 80251b6:	9b04      	ldr	r3, [sp, #16]
 80251b8:	ea4f 1b63 	mov.w	fp, r3, asr #5
 80251bc:	9b03      	ldr	r3, [sp, #12]
 80251be:	459e      	cmp	lr, r3
 80251c0:	f040 8229 	bne.w	8025616 <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 80251c4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80251c8:	fa0f f58b 	sxth.w	r5, fp
 80251cc:	fa0f f289 	sxth.w	r2, r9
 80251d0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80251d4:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 80251d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80251dc:	4281      	cmp	r1, r0
 80251de:	f43f ae20 	beq.w	8024e22 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80251e2:	8b60      	ldrh	r0, [r4, #26]
 80251e4:	8b21      	ldrh	r1, [r4, #24]
 80251e6:	4301      	orrs	r1, r0
 80251e8:	d00c      	beq.n	8025204 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80251ea:	2b00      	cmp	r3, #0
 80251ec:	db0a      	blt.n	8025204 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80251ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80251f0:	428b      	cmp	r3, r1
 80251f2:	da07      	bge.n	8025204 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80251f4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80251f8:	4299      	cmp	r1, r3
 80251fa:	f0c0 81ff 	bcc.w	80255fc <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 80251fe:	2301      	movs	r3, #1
 8025200:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025204:	82a5      	strh	r5, [r4, #20]
 8025206:	e538      	b.n	8024c7a <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 8025208:	f04f 32ff 	mov.w	r2, #4294967295
 802520c:	fb0a f306 	mul.w	r3, sl, r6
 8025210:	f1cb 0b00 	rsb	fp, fp, #0
 8025214:	920b      	str	r2, [sp, #44]	; 0x2c
 8025216:	2200      	movs	r2, #0
 8025218:	e6d9      	b.n	8024fce <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 802521a:	f104 0514 	add.w	r5, r4, #20
 802521e:	6926      	ldr	r6, [r4, #16]
 8025220:	cd03      	ldmia	r5!, {r0, r1}
 8025222:	6030      	str	r0, [r6, #0]
 8025224:	6071      	str	r1, [r6, #4]
 8025226:	6921      	ldr	r1, [r4, #16]
 8025228:	3108      	adds	r1, #8
 802522a:	6121      	str	r1, [r4, #16]
 802522c:	68a1      	ldr	r1, [r4, #8]
 802522e:	3101      	adds	r1, #1
 8025230:	60a1      	str	r1, [r4, #8]
 8025232:	e702      	b.n	802503a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025234:	9b01      	ldr	r3, [sp, #4]
 8025236:	f001 011f 	and.w	r1, r1, #31
 802523a:	8b20      	ldrh	r0, [r4, #24]
 802523c:	f003 031f 	and.w	r3, r3, #31
 8025240:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025244:	930d      	str	r3, [sp, #52]	; 0x34
 8025246:	9b02      	ldr	r3, [sp, #8]
 8025248:	1b9a      	subs	r2, r3, r6
 802524a:	9b05      	ldr	r3, [sp, #20]
 802524c:	42ab      	cmp	r3, r5
 802524e:	d107      	bne.n	8025260 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8025250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025252:	4410      	add	r0, r2
 8025254:	4419      	add	r1, r3
 8025256:	8320      	strh	r0, [r4, #24]
 8025258:	fb02 9201 	mla	r2, r2, r1, r9
 802525c:	8362      	strh	r2, [r4, #26]
 802525e:	e6f1      	b.n	8025044 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025260:	f1bc 0f00 	cmp.w	ip, #0
 8025264:	f2c0 8093 	blt.w	802538e <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8025268:	f1c1 0320 	rsb	r3, r1, #32
 802526c:	435a      	muls	r2, r3
 802526e:	2301      	movs	r3, #1
 8025270:	9309      	str	r3, [sp, #36]	; 0x24
 8025272:	2320      	movs	r3, #32
 8025274:	9307      	str	r3, [sp, #28]
 8025276:	9b07      	ldr	r3, [sp, #28]
 8025278:	fb92 fefc 	sdiv	lr, r2, ip
 802527c:	fb0c 221e 	mls	r2, ip, lr, r2
 8025280:	4419      	add	r1, r3
 8025282:	2a00      	cmp	r2, #0
 8025284:	bfbc      	itt	lt
 8025286:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802528a:	4462      	addlt	r2, ip
 802528c:	fb0e 9101 	mla	r1, lr, r1, r9
 8025290:	4470      	add	r0, lr
 8025292:	b20b      	sxth	r3, r1
 8025294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025296:	b200      	sxth	r0, r0
 8025298:	440d      	add	r5, r1
 802529a:	f9bd 1000 	ldrsh.w	r1, [sp]
 802529e:	8320      	strh	r0, [r4, #24]
 80252a0:	fa0f f985 	sxth.w	r9, r5
 80252a4:	9106      	str	r1, [sp, #24]
 80252a6:	0409      	lsls	r1, r1, #16
 80252a8:	8363      	strh	r3, [r4, #26]
 80252aa:	910a      	str	r1, [sp, #40]	; 0x28
 80252ac:	4449      	add	r1, r9
 80252ae:	42b9      	cmp	r1, r7
 80252b0:	f43f ad3a 	beq.w	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80252b4:	4303      	orrs	r3, r0
 80252b6:	d00c      	beq.n	80252d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80252b8:	f1b8 0f00 	cmp.w	r8, #0
 80252bc:	db09      	blt.n	80252d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80252be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80252c0:	4543      	cmp	r3, r8
 80252c2:	dd06      	ble.n	80252d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80252c4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80252c8:	4299      	cmp	r1, r3
 80252ca:	d368      	bcc.n	802539e <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 80252cc:	2301      	movs	r3, #1
 80252ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80252d2:	9b06      	ldr	r3, [sp, #24]
 80252d4:	4476      	add	r6, lr
 80252d6:	f8a4 9014 	strh.w	r9, [r4, #20]
 80252da:	82e3      	strh	r3, [r4, #22]
 80252dc:	2300      	movs	r3, #0
 80252de:	8323      	strh	r3, [r4, #24]
 80252e0:	8363      	strh	r3, [r4, #26]
 80252e2:	9b05      	ldr	r3, [sp, #20]
 80252e4:	42ab      	cmp	r3, r5
 80252e6:	d048      	beq.n	802537a <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 80252e8:	9b02      	ldr	r3, [sp, #8]
 80252ea:	eba2 020c 	sub.w	r2, r2, ip
 80252ee:	1b9b      	subs	r3, r3, r6
 80252f0:	4473      	add	r3, lr
 80252f2:	015b      	lsls	r3, r3, #5
 80252f4:	fb93 f8fc 	sdiv	r8, r3, ip
 80252f8:	fb0c 3318 	mls	r3, ip, r8, r3
 80252fc:	2b00      	cmp	r3, #0
 80252fe:	bfbc      	itt	lt
 8025300:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025304:	4463      	addlt	r3, ip
 8025306:	f108 0101 	add.w	r1, r8, #1
 802530a:	910f      	str	r1, [sp, #60]	; 0x3c
 802530c:	18d2      	adds	r2, r2, r3
 802530e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025310:	bf56      	itet	pl
 8025312:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 8025314:	4640      	movmi	r0, r8
 8025316:	eba2 020c 	subpl.w	r2, r2, ip
 802531a:	fa0f fe80 	sxth.w	lr, r0
 802531e:	4406      	add	r6, r0
 8025320:	0141      	lsls	r1, r0, #5
 8025322:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025324:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025328:	4405      	add	r5, r0
 802532a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802532e:	b209      	sxth	r1, r1
 8025330:	fa0f f985 	sxth.w	r9, r5
 8025334:	4438      	add	r0, r7
 8025336:	8361      	strh	r1, [r4, #26]
 8025338:	444f      	add	r7, r9
 802533a:	42b8      	cmp	r0, r7
 802533c:	f43f acf4 	beq.w	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025340:	ea5e 0101 	orrs.w	r1, lr, r1
 8025344:	d00e      	beq.n	8025364 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025346:	9906      	ldr	r1, [sp, #24]
 8025348:	2900      	cmp	r1, #0
 802534a:	db0b      	blt.n	8025364 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802534c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802534e:	9806      	ldr	r0, [sp, #24]
 8025350:	4288      	cmp	r0, r1
 8025352:	da07      	bge.n	8025364 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025354:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025358:	4288      	cmp	r0, r1
 802535a:	d330      	bcc.n	80253be <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 802535c:	f04f 0101 	mov.w	r1, #1
 8025360:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025364:	9906      	ldr	r1, [sp, #24]
 8025366:	f8a4 9014 	strh.w	r9, [r4, #20]
 802536a:	82e1      	strh	r1, [r4, #22]
 802536c:	f04f 0100 	mov.w	r1, #0
 8025370:	8321      	strh	r1, [r4, #24]
 8025372:	8361      	strh	r1, [r4, #26]
 8025374:	9905      	ldr	r1, [sp, #20]
 8025376:	42a9      	cmp	r1, r5
 8025378:	d1c8      	bne.n	802530c <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 802537a:	9b02      	ldr	r3, [sp, #8]
 802537c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802537e:	1b9e      	subs	r6, r3, r6
 8025380:	9b07      	ldr	r3, [sp, #28]
 8025382:	3120      	adds	r1, #32
 8025384:	8326      	strh	r6, [r4, #24]
 8025386:	1ac9      	subs	r1, r1, r3
 8025388:	434e      	muls	r6, r1
 802538a:	8366      	strh	r6, [r4, #26]
 802538c:	e65a      	b.n	8025044 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802538e:	f04f 33ff 	mov.w	r3, #4294967295
 8025392:	434a      	muls	r2, r1
 8025394:	f1cc 0c00 	rsb	ip, ip, #0
 8025398:	9309      	str	r3, [sp, #36]	; 0x24
 802539a:	2300      	movs	r3, #0
 802539c:	e76a      	b.n	8025274 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 802539e:	f104 0314 	add.w	r3, r4, #20
 80253a2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80253a6:	cb03      	ldmia	r3!, {r0, r1}
 80253a8:	f8c8 0000 	str.w	r0, [r8]
 80253ac:	f8c8 1004 	str.w	r1, [r8, #4]
 80253b0:	6923      	ldr	r3, [r4, #16]
 80253b2:	3308      	adds	r3, #8
 80253b4:	6123      	str	r3, [r4, #16]
 80253b6:	68a3      	ldr	r3, [r4, #8]
 80253b8:	3301      	adds	r3, #1
 80253ba:	60a3      	str	r3, [r4, #8]
 80253bc:	e789      	b.n	80252d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 80253be:	6921      	ldr	r1, [r4, #16]
 80253c0:	f104 0e14 	add.w	lr, r4, #20
 80253c4:	910e      	str	r1, [sp, #56]	; 0x38
 80253c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80253c8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80253cc:	6038      	str	r0, [r7, #0]
 80253ce:	4638      	mov	r0, r7
 80253d0:	6079      	str	r1, [r7, #4]
 80253d2:	6921      	ldr	r1, [r4, #16]
 80253d4:	3108      	adds	r1, #8
 80253d6:	6121      	str	r1, [r4, #16]
 80253d8:	68a1      	ldr	r1, [r4, #8]
 80253da:	3101      	adds	r1, #1
 80253dc:	60a1      	str	r1, [r4, #8]
 80253de:	e7c1      	b.n	8025364 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 80253e0:	f104 0214 	add.w	r2, r4, #20
 80253e4:	6926      	ldr	r6, [r4, #16]
 80253e6:	ca03      	ldmia	r2!, {r0, r1}
 80253e8:	6030      	str	r0, [r6, #0]
 80253ea:	6071      	str	r1, [r6, #4]
 80253ec:	6922      	ldr	r2, [r4, #16]
 80253ee:	3208      	adds	r2, #8
 80253f0:	6122      	str	r2, [r4, #16]
 80253f2:	68a2      	ldr	r2, [r4, #8]
 80253f4:	3201      	adds	r2, #1
 80253f6:	60a2      	str	r2, [r4, #8]
 80253f8:	e647      	b.n	802508a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 80253fa:	f104 0514 	add.w	r5, r4, #20
 80253fe:	6926      	ldr	r6, [r4, #16]
 8025400:	cd03      	ldmia	r5!, {r0, r1}
 8025402:	6030      	str	r0, [r6, #0]
 8025404:	6071      	str	r1, [r6, #4]
 8025406:	6921      	ldr	r1, [r4, #16]
 8025408:	3108      	adds	r1, #8
 802540a:	6121      	str	r1, [r4, #16]
 802540c:	68a1      	ldr	r1, [r4, #8]
 802540e:	3101      	adds	r1, #1
 8025410:	60a1      	str	r1, [r4, #8]
 8025412:	e699      	b.n	8025148 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025414:	9b01      	ldr	r3, [sp, #4]
 8025416:	ea4f 176c 	mov.w	r7, ip, asr #5
 802541a:	8b20      	ldrh	r0, [r4, #24]
 802541c:	f00c 0c1f 	and.w	ip, ip, #31
 8025420:	f003 031f 	and.w	r3, r3, #31
 8025424:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8025428:	9310      	str	r3, [sp, #64]	; 0x40
 802542a:	9b06      	ldr	r3, [sp, #24]
 802542c:	429f      	cmp	r7, r3
 802542e:	d10a      	bne.n	8025446 <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 8025430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025432:	4418      	add	r0, r3
 8025434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025436:	449c      	add	ip, r3
 8025438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802543a:	8320      	strh	r0, [r4, #24]
 802543c:	fb03 ee0c 	mla	lr, r3, ip, lr
 8025440:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025444:	e686      	b.n	8025154 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025446:	9b00      	ldr	r3, [sp, #0]
 8025448:	2b00      	cmp	r3, #0
 802544a:	f2c0 80a0 	blt.w	802558e <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 802544e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025450:	f1cc 0320 	rsb	r3, ip, #32
 8025454:	434b      	muls	r3, r1
 8025456:	2101      	movs	r1, #1
 8025458:	910e      	str	r1, [sp, #56]	; 0x38
 802545a:	2120      	movs	r1, #32
 802545c:	9a00      	ldr	r2, [sp, #0]
 802545e:	910d      	str	r1, [sp, #52]	; 0x34
 8025460:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025462:	fb93 f5f2 	sdiv	r5, r3, r2
 8025466:	fb02 3315 	mls	r3, r2, r5, r3
 802546a:	448c      	add	ip, r1
 802546c:	2b00      	cmp	r3, #0
 802546e:	bfbc      	itt	lt
 8025470:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8025474:	189b      	addlt	r3, r3, r2
 8025476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025478:	fb05 ec0c 	mla	ip, r5, ip, lr
 802547c:	4428      	add	r0, r5
 802547e:	4417      	add	r7, r2
 8025480:	fa0f f18c 	sxth.w	r1, ip
 8025484:	fa0f fc89 	sxth.w	ip, r9
 8025488:	fa0f fe87 	sxth.w	lr, r7
 802548c:	8361      	strh	r1, [r4, #26]
 802548e:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8025492:	b200      	sxth	r0, r0
 8025494:	920f      	str	r2, [sp, #60]	; 0x3c
 8025496:	4472      	add	r2, lr
 8025498:	8320      	strh	r0, [r4, #24]
 802549a:	4542      	cmp	r2, r8
 802549c:	f43f ac44 	beq.w	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80254a0:	ea50 0201 	orrs.w	r2, r0, r1
 80254a4:	d00c      	beq.n	80254c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80254a6:	2e00      	cmp	r6, #0
 80254a8:	db0a      	blt.n	80254c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80254aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80254ac:	42b1      	cmp	r1, r6
 80254ae:	dd07      	ble.n	80254c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80254b0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80254b4:	4288      	cmp	r0, r1
 80254b6:	d375      	bcc.n	80255a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 80254b8:	f04f 0201 	mov.w	r2, #1
 80254bc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80254c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80254c2:	f8a4 e014 	strh.w	lr, [r4, #20]
 80254c6:	1956      	adds	r6, r2, r5
 80254c8:	9a06      	ldr	r2, [sp, #24]
 80254ca:	f8a4 c016 	strh.w	ip, [r4, #22]
 80254ce:	42ba      	cmp	r2, r7
 80254d0:	f8a4 a018 	strh.w	sl, [r4, #24]
 80254d4:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80254d8:	d04c      	beq.n	8025574 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 80254da:	9a02      	ldr	r2, [sp, #8]
 80254dc:	1b91      	subs	r1, r2, r6
 80254de:	9a00      	ldr	r2, [sp, #0]
 80254e0:	440d      	add	r5, r1
 80254e2:	016d      	lsls	r5, r5, #5
 80254e4:	fb95 fef2 	sdiv	lr, r5, r2
 80254e8:	fb02 551e 	mls	r5, r2, lr, r5
 80254ec:	2d00      	cmp	r5, #0
 80254ee:	bfbc      	itt	lt
 80254f0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80254f4:	18ad      	addlt	r5, r5, r2
 80254f6:	9a00      	ldr	r2, [sp, #0]
 80254f8:	1a9b      	subs	r3, r3, r2
 80254fa:	f10e 0201 	add.w	r2, lr, #1
 80254fe:	9213      	str	r2, [sp, #76]	; 0x4c
 8025500:	195b      	adds	r3, r3, r5
 8025502:	bf57      	itett	pl
 8025504:	9a00      	ldrpl	r2, [sp, #0]
 8025506:	4670      	movmi	r0, lr
 8025508:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802550a:	1a9b      	subpl	r3, r3, r2
 802550c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802550e:	fa0f f880 	sxth.w	r8, r0
 8025512:	4406      	add	r6, r0
 8025514:	4417      	add	r7, r2
 8025516:	0141      	lsls	r1, r0, #5
 8025518:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802551c:	b23a      	sxth	r2, r7
 802551e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8025522:	b209      	sxth	r1, r1
 8025524:	9211      	str	r2, [sp, #68]	; 0x44
 8025526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025528:	8361      	strh	r1, [r4, #26]
 802552a:	1882      	adds	r2, r0, r2
 802552c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802552e:	9212      	str	r2, [sp, #72]	; 0x48
 8025530:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025532:	4402      	add	r2, r0
 8025534:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025536:	4290      	cmp	r0, r2
 8025538:	f43f abf6 	beq.w	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802553c:	ea58 0201 	orrs.w	r2, r8, r1
 8025540:	d00d      	beq.n	802555e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025542:	f1bc 0f00 	cmp.w	ip, #0
 8025546:	db0a      	blt.n	802555e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025548:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802554a:	458c      	cmp	ip, r1
 802554c:	da07      	bge.n	802555e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802554e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025552:	4288      	cmp	r0, r1
 8025554:	d336      	bcc.n	80255c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 8025556:	f04f 0201 	mov.w	r2, #1
 802555a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802555e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025560:	f8a4 c016 	strh.w	ip, [r4, #22]
 8025564:	82a2      	strh	r2, [r4, #20]
 8025566:	9a06      	ldr	r2, [sp, #24]
 8025568:	f8a4 a018 	strh.w	sl, [r4, #24]
 802556c:	42ba      	cmp	r2, r7
 802556e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025572:	d1c5      	bne.n	8025500 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 8025574:	9b02      	ldr	r3, [sp, #8]
 8025576:	1b9e      	subs	r6, r3, r6
 8025578:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802557a:	f103 0c20 	add.w	ip, r3, #32
 802557e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025580:	8326      	strh	r6, [r4, #24]
 8025582:	ebac 0c03 	sub.w	ip, ip, r3
 8025586:	fb06 f60c 	mul.w	r6, r6, ip
 802558a:	8366      	strh	r6, [r4, #26]
 802558c:	e5e2      	b.n	8025154 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802558e:	9a00      	ldr	r2, [sp, #0]
 8025590:	f04f 31ff 	mov.w	r1, #4294967295
 8025594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025596:	4252      	negs	r2, r2
 8025598:	910e      	str	r1, [sp, #56]	; 0x38
 802559a:	fb03 f30c 	mul.w	r3, r3, ip
 802559e:	2100      	movs	r1, #0
 80255a0:	9200      	str	r2, [sp, #0]
 80255a2:	e75b      	b.n	802545c <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 80255a4:	f104 0614 	add.w	r6, r4, #20
 80255a8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80255ac:	ce03      	ldmia	r6!, {r0, r1}
 80255ae:	f8c8 0000 	str.w	r0, [r8]
 80255b2:	f8c8 1004 	str.w	r1, [r8, #4]
 80255b6:	6921      	ldr	r1, [r4, #16]
 80255b8:	3108      	adds	r1, #8
 80255ba:	6121      	str	r1, [r4, #16]
 80255bc:	68a1      	ldr	r1, [r4, #8]
 80255be:	3101      	adds	r1, #1
 80255c0:	60a1      	str	r1, [r4, #8]
 80255c2:	e77d      	b.n	80254c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80255c4:	f104 0814 	add.w	r8, r4, #20
 80255c8:	6922      	ldr	r2, [r4, #16]
 80255ca:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80255ce:	9212      	str	r2, [sp, #72]	; 0x48
 80255d0:	6010      	str	r0, [r2, #0]
 80255d2:	6051      	str	r1, [r2, #4]
 80255d4:	6921      	ldr	r1, [r4, #16]
 80255d6:	3108      	adds	r1, #8
 80255d8:	6121      	str	r1, [r4, #16]
 80255da:	68a1      	ldr	r1, [r4, #8]
 80255dc:	3101      	adds	r1, #1
 80255de:	60a1      	str	r1, [r4, #8]
 80255e0:	e7bd      	b.n	802555e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 80255e2:	f104 0214 	add.w	r2, r4, #20
 80255e6:	6926      	ldr	r6, [r4, #16]
 80255e8:	ca03      	ldmia	r2!, {r0, r1}
 80255ea:	6030      	str	r0, [r6, #0]
 80255ec:	6071      	str	r1, [r6, #4]
 80255ee:	6922      	ldr	r2, [r4, #16]
 80255f0:	3208      	adds	r2, #8
 80255f2:	6122      	str	r2, [r4, #16]
 80255f4:	68a2      	ldr	r2, [r4, #8]
 80255f6:	3201      	adds	r2, #1
 80255f8:	60a2      	str	r2, [r4, #8]
 80255fa:	e5ce      	b.n	802519a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 80255fc:	f104 0314 	add.w	r3, r4, #20
 8025600:	6926      	ldr	r6, [r4, #16]
 8025602:	cb03      	ldmia	r3!, {r0, r1}
 8025604:	6030      	str	r0, [r6, #0]
 8025606:	6071      	str	r1, [r6, #4]
 8025608:	6923      	ldr	r3, [r4, #16]
 802560a:	3308      	adds	r3, #8
 802560c:	6123      	str	r3, [r4, #16]
 802560e:	68a3      	ldr	r3, [r4, #8]
 8025610:	3301      	adds	r3, #1
 8025612:	60a3      	str	r3, [r4, #8]
 8025614:	e5f6      	b.n	8025204 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025616:	9b01      	ldr	r3, [sp, #4]
 8025618:	8b20      	ldrh	r0, [r4, #24]
 802561a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802561e:	f003 021f 	and.w	r2, r3, #31
 8025622:	9b04      	ldr	r3, [sp, #16]
 8025624:	45dc      	cmp	ip, fp
 8025626:	8b66      	ldrh	r6, [r4, #26]
 8025628:	f003 031f 	and.w	r3, r3, #31
 802562c:	9305      	str	r3, [sp, #20]
 802562e:	9b03      	ldr	r3, [sp, #12]
 8025630:	eba3 050e 	sub.w	r5, r3, lr
 8025634:	d108      	bne.n	8025648 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 8025636:	9b05      	ldr	r3, [sp, #20]
 8025638:	4428      	add	r0, r5
 802563a:	441a      	add	r2, r3
 802563c:	8320      	strh	r0, [r4, #24]
 802563e:	fb05 6502 	mla	r5, r5, r2, r6
 8025642:	8365      	strh	r5, [r4, #26]
 8025644:	f7ff bbed 	b.w	8024e22 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025648:	9b04      	ldr	r3, [sp, #16]
 802564a:	9901      	ldr	r1, [sp, #4]
 802564c:	1a5b      	subs	r3, r3, r1
 802564e:	9300      	str	r3, [sp, #0]
 8025650:	f100 809c 	bmi.w	802578c <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 8025654:	f1c2 0120 	rsb	r1, r2, #32
 8025658:	434d      	muls	r5, r1
 802565a:	2101      	movs	r1, #1
 802565c:	9102      	str	r1, [sp, #8]
 802565e:	2120      	movs	r1, #32
 8025660:	9b00      	ldr	r3, [sp, #0]
 8025662:	9101      	str	r1, [sp, #4]
 8025664:	9901      	ldr	r1, [sp, #4]
 8025666:	fb95 f7f3 	sdiv	r7, r5, r3
 802566a:	fb03 5517 	mls	r5, r3, r7, r5
 802566e:	440a      	add	r2, r1
 8025670:	2d00      	cmp	r5, #0
 8025672:	bfbc      	itt	lt
 8025674:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8025678:	18ed      	addlt	r5, r5, r3
 802567a:	fb07 6202 	mla	r2, r7, r2, r6
 802567e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8025682:	4438      	add	r0, r7
 8025684:	b211      	sxth	r1, r2
 8025686:	9a02      	ldr	r2, [sp, #8]
 8025688:	b200      	sxth	r0, r0
 802568a:	4494      	add	ip, r2
 802568c:	fa0f f289 	sxth.w	r2, r9
 8025690:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8025694:	0413      	lsls	r3, r2, #16
 8025696:	8320      	strh	r0, [r4, #24]
 8025698:	fa0f f88c 	sxth.w	r8, ip
 802569c:	8361      	strh	r1, [r4, #26]
 802569e:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 80256a2:	9304      	str	r3, [sp, #16]
 80256a4:	eb08 0a03 	add.w	sl, r8, r3
 80256a8:	45d1      	cmp	r9, sl
 80256aa:	f43f ab3d 	beq.w	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80256ae:	ea50 0301 	orrs.w	r3, r0, r1
 80256b2:	d00b      	beq.n	80256cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80256b4:	2e00      	cmp	r6, #0
 80256b6:	db09      	blt.n	80256cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80256b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80256ba:	428e      	cmp	r6, r1
 80256bc:	da06      	bge.n	80256cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80256be:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80256c2:	4288      	cmp	r0, r1
 80256c4:	d36b      	bcc.n	802579e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 80256c6:	2101      	movs	r1, #1
 80256c8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80256cc:	2100      	movs	r1, #0
 80256ce:	45e3      	cmp	fp, ip
 80256d0:	f8a4 8014 	strh.w	r8, [r4, #20]
 80256d4:	44be      	add	lr, r7
 80256d6:	82e2      	strh	r2, [r4, #22]
 80256d8:	8321      	strh	r1, [r4, #24]
 80256da:	8361      	strh	r1, [r4, #26]
 80256dc:	d047      	beq.n	802576e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 80256de:	9b03      	ldr	r3, [sp, #12]
 80256e0:	f04f 0900 	mov.w	r9, #0
 80256e4:	eba3 060e 	sub.w	r6, r3, lr
 80256e8:	9b00      	ldr	r3, [sp, #0]
 80256ea:	443e      	add	r6, r7
 80256ec:	0176      	lsls	r6, r6, #5
 80256ee:	fb96 f7f3 	sdiv	r7, r6, r3
 80256f2:	fb03 6617 	mls	r6, r3, r7, r6
 80256f6:	428e      	cmp	r6, r1
 80256f8:	bfbc      	itt	lt
 80256fa:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80256fe:	18f6      	addlt	r6, r6, r3
 8025700:	9b00      	ldr	r3, [sp, #0]
 8025702:	1aed      	subs	r5, r5, r3
 8025704:	1c7b      	adds	r3, r7, #1
 8025706:	9307      	str	r3, [sp, #28]
 8025708:	19ad      	adds	r5, r5, r6
 802570a:	bf57      	itett	pl
 802570c:	9b00      	ldrpl	r3, [sp, #0]
 802570e:	4638      	movmi	r0, r7
 8025710:	9807      	ldrpl	r0, [sp, #28]
 8025712:	1aed      	subpl	r5, r5, r3
 8025714:	9b02      	ldr	r3, [sp, #8]
 8025716:	fa0f f880 	sxth.w	r8, r0
 802571a:	4486      	add	lr, r0
 802571c:	449c      	add	ip, r3
 802571e:	0141      	lsls	r1, r0, #5
 8025720:	9b04      	ldr	r3, [sp, #16]
 8025722:	fa0f fa8c 	sxth.w	sl, ip
 8025726:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802572a:	b209      	sxth	r1, r1
 802572c:	f8a4 8018 	strh.w	r8, [r4, #24]
 8025730:	4418      	add	r0, r3
 8025732:	4453      	add	r3, sl
 8025734:	8361      	strh	r1, [r4, #26]
 8025736:	4298      	cmp	r0, r3
 8025738:	f43f aaf6 	beq.w	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802573c:	ea58 0301 	orrs.w	r3, r8, r1
 8025740:	d00c      	beq.n	802575c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8025742:	2a00      	cmp	r2, #0
 8025744:	db0a      	blt.n	802575c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8025746:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025748:	428a      	cmp	r2, r1
 802574a:	da07      	bge.n	802575c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802574c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025750:	4288      	cmp	r0, r1
 8025752:	d334      	bcc.n	80257be <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8025754:	f04f 0301 	mov.w	r3, #1
 8025758:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802575c:	45e3      	cmp	fp, ip
 802575e:	f8a4 a014 	strh.w	sl, [r4, #20]
 8025762:	82e2      	strh	r2, [r4, #22]
 8025764:	f8a4 9018 	strh.w	r9, [r4, #24]
 8025768:	f8a4 901a 	strh.w	r9, [r4, #26]
 802576c:	d1cc      	bne.n	8025708 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 802576e:	9b03      	ldr	r3, [sp, #12]
 8025770:	9e05      	ldr	r6, [sp, #20]
 8025772:	eba3 0e0e 	sub.w	lr, r3, lr
 8025776:	9b01      	ldr	r3, [sp, #4]
 8025778:	3620      	adds	r6, #32
 802577a:	f8a4 e018 	strh.w	lr, [r4, #24]
 802577e:	1af6      	subs	r6, r6, r3
 8025780:	fb0e fe06 	mul.w	lr, lr, r6
 8025784:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025788:	f7ff bb4b 	b.w	8024e22 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802578c:	9b00      	ldr	r3, [sp, #0]
 802578e:	f04f 31ff 	mov.w	r1, #4294967295
 8025792:	4355      	muls	r5, r2
 8025794:	425b      	negs	r3, r3
 8025796:	9102      	str	r1, [sp, #8]
 8025798:	2100      	movs	r1, #0
 802579a:	9300      	str	r3, [sp, #0]
 802579c:	e760      	b.n	8025660 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 802579e:	f104 0614 	add.w	r6, r4, #20
 80257a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80257a6:	ce03      	ldmia	r6!, {r0, r1}
 80257a8:	f8c9 0000 	str.w	r0, [r9]
 80257ac:	f8c9 1004 	str.w	r1, [r9, #4]
 80257b0:	6921      	ldr	r1, [r4, #16]
 80257b2:	3108      	adds	r1, #8
 80257b4:	6121      	str	r1, [r4, #16]
 80257b6:	68a1      	ldr	r1, [r4, #8]
 80257b8:	3101      	adds	r1, #1
 80257ba:	60a1      	str	r1, [r4, #8]
 80257bc:	e786      	b.n	80256cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80257be:	f104 0814 	add.w	r8, r4, #20
 80257c2:	6923      	ldr	r3, [r4, #16]
 80257c4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80257c8:	9306      	str	r3, [sp, #24]
 80257ca:	6018      	str	r0, [r3, #0]
 80257cc:	6059      	str	r1, [r3, #4]
 80257ce:	6921      	ldr	r1, [r4, #16]
 80257d0:	3108      	adds	r1, #8
 80257d2:	6121      	str	r1, [r4, #16]
 80257d4:	68a1      	ldr	r1, [r4, #8]
 80257d6:	3101      	adds	r1, #1
 80257d8:	60a1      	str	r1, [r4, #8]
 80257da:	e7bf      	b.n	802575c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

080257dc <_ZN8touchgfx7Outline6lineToEii>:
 80257dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80257de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80257e0:	4604      	mov	r4, r0
 80257e2:	460d      	mov	r5, r1
 80257e4:	4616      	mov	r6, r2
 80257e6:	079b      	lsls	r3, r3, #30
 80257e8:	d526      	bpl.n	8025838 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80257ea:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80257ee:	ea85 0001 	eor.w	r0, r5, r1
 80257f2:	ea86 0302 	eor.w	r3, r6, r2
 80257f6:	4303      	orrs	r3, r0
 80257f8:	d01e      	beq.n	8025838 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80257fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80257fc:	114b      	asrs	r3, r1, #5
 80257fe:	9600      	str	r6, [sp, #0]
 8025800:	4283      	cmp	r3, r0
 8025802:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025804:	bfb8      	it	lt
 8025806:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025808:	3301      	adds	r3, #1
 802580a:	4283      	cmp	r3, r0
 802580c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802580e:	bfc8      	it	gt
 8025810:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025812:	116b      	asrs	r3, r5, #5
 8025814:	4283      	cmp	r3, r0
 8025816:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025818:	bfb8      	it	lt
 802581a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802581c:	3301      	adds	r3, #1
 802581e:	4283      	cmp	r3, r0
 8025820:	4620      	mov	r0, r4
 8025822:	bfc8      	it	gt
 8025824:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025826:	462b      	mov	r3, r5
 8025828:	f7ff f9c6 	bl	8024bb8 <_ZN8touchgfx7Outline10renderLineEiiii>
 802582c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802582e:	f043 0301 	orr.w	r3, r3, #1
 8025832:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8025836:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025838:	b002      	add	sp, #8
 802583a:	bd70      	pop	{r4, r5, r6, pc}

0802583c <_ZN8touchgfx7Outline6moveToEii>:
 802583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802583e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025840:	4615      	mov	r5, r2
 8025842:	4604      	mov	r4, r0
 8025844:	460e      	mov	r6, r1
 8025846:	079a      	lsls	r2, r3, #30
 8025848:	d401      	bmi.n	802584e <_ZN8touchgfx7Outline6moveToEii+0x12>
 802584a:	f7ff f96f 	bl	8024b2c <_ZN8touchgfx7Outline5resetEv>
 802584e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025850:	07db      	lsls	r3, r3, #31
 8025852:	d504      	bpl.n	802585e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8025854:	4620      	mov	r0, r4
 8025856:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802585a:	f7ff ffbf 	bl	80257dc <_ZN8touchgfx7Outline6lineToEii>
 802585e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025862:	f346 1c4f 	sbfx	ip, r6, #5, #16
 8025866:	f345 174f 	sbfx	r7, r5, #5, #16
 802586a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802586e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8025872:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8025876:	428a      	cmp	r2, r1
 8025878:	d015      	beq.n	80258a6 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802587a:	8b61      	ldrh	r1, [r4, #26]
 802587c:	8b22      	ldrh	r2, [r4, #24]
 802587e:	430a      	orrs	r2, r1
 8025880:	d00b      	beq.n	802589a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8025882:	2b00      	cmp	r3, #0
 8025884:	db09      	blt.n	802589a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8025886:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025888:	4293      	cmp	r3, r2
 802588a:	da06      	bge.n	802589a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802588c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8025890:	429a      	cmp	r2, r3
 8025892:	d30d      	bcc.n	80258b0 <_ZN8touchgfx7Outline6moveToEii+0x74>
 8025894:	2301      	movs	r3, #1
 8025896:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802589a:	2300      	movs	r3, #0
 802589c:	f8a4 c014 	strh.w	ip, [r4, #20]
 80258a0:	82e7      	strh	r7, [r4, #22]
 80258a2:	8323      	strh	r3, [r4, #24]
 80258a4:	8363      	strh	r3, [r4, #26]
 80258a6:	61e6      	str	r6, [r4, #28]
 80258a8:	62a5      	str	r5, [r4, #40]	; 0x28
 80258aa:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80258ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258b0:	f104 0314 	add.w	r3, r4, #20
 80258b4:	6922      	ldr	r2, [r4, #16]
 80258b6:	cb03      	ldmia	r3!, {r0, r1}
 80258b8:	6010      	str	r0, [r2, #0]
 80258ba:	6051      	str	r1, [r2, #4]
 80258bc:	6923      	ldr	r3, [r4, #16]
 80258be:	3308      	adds	r3, #8
 80258c0:	6123      	str	r3, [r4, #16]
 80258c2:	68a3      	ldr	r3, [r4, #8]
 80258c4:	3301      	adds	r3, #1
 80258c6:	60a3      	str	r3, [r4, #8]
 80258c8:	e7e7      	b.n	802589a <_ZN8touchgfx7Outline6moveToEii+0x5e>

080258ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80258ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258ce:	b0d1      	sub	sp, #324	; 0x144
 80258d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80258d4:	466c      	mov	r4, sp
 80258d6:	1a0d      	subs	r5, r1, r0
 80258d8:	f100 0208 	add.w	r2, r0, #8
 80258dc:	2d48      	cmp	r5, #72	; 0x48
 80258de:	f340 80ba 	ble.w	8025a56 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80258e2:	112d      	asrs	r5, r5, #4
 80258e4:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80258e8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80258ec:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80258f0:	f9b0 8000 	ldrsh.w	r8, [r0]
 80258f4:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80258f8:	681e      	ldr	r6, [r3, #0]
 80258fa:	6006      	str	r6, [r0, #0]
 80258fc:	685e      	ldr	r6, [r3, #4]
 80258fe:	6046      	str	r6, [r0, #4]
 8025900:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025904:	f8a3 e002 	strh.w	lr, [r3, #2]
 8025908:	f8a3 c004 	strh.w	ip, [r3, #4]
 802590c:	80df      	strh	r7, [r3, #6]
 802590e:	f1a1 0308 	sub.w	r3, r1, #8
 8025912:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8025916:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802591a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802591e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025922:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8025926:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802592a:	4565      	cmp	r5, ip
 802592c:	da0f      	bge.n	802594e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802592e:	681d      	ldr	r5, [r3, #0]
 8025930:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025934:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8025938:	6015      	str	r5, [r2, #0]
 802593a:	685d      	ldr	r5, [r3, #4]
 802593c:	6055      	str	r5, [r2, #4]
 802593e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025942:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025946:	f821 ec04 	strh.w	lr, [r1, #-4]
 802594a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802594e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025952:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025956:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802595a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802595e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025962:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025966:	45ac      	cmp	ip, r5
 8025968:	da0d      	bge.n	8025986 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802596a:	6815      	ldr	r5, [r2, #0]
 802596c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025970:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025974:	6005      	str	r5, [r0, #0]
 8025976:	6855      	ldr	r5, [r2, #4]
 8025978:	8107      	strh	r7, [r0, #8]
 802597a:	6045      	str	r5, [r0, #4]
 802597c:	8146      	strh	r6, [r0, #10]
 802597e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8025982:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8025986:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802598a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802598e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025992:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025996:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802599a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802599e:	4565      	cmp	r5, ip
 80259a0:	da0f      	bge.n	80259c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80259a2:	681d      	ldr	r5, [r3, #0]
 80259a4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80259a8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80259ac:	6005      	str	r5, [r0, #0]
 80259ae:	685d      	ldr	r5, [r3, #4]
 80259b0:	6045      	str	r5, [r0, #4]
 80259b2:	f821 7c08 	strh.w	r7, [r1, #-8]
 80259b6:	f821 6c06 	strh.w	r6, [r1, #-6]
 80259ba:	f821 ec04 	strh.w	lr, [r1, #-4]
 80259be:	f821 cc02 	strh.w	ip, [r1, #-2]
 80259c2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80259c6:	f102 0508 	add.w	r5, r2, #8
 80259ca:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80259ce:	f9b0 e000 	ldrsh.w	lr, [r0]
 80259d2:	462f      	mov	r7, r5
 80259d4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80259d8:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80259dc:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80259e0:	4556      	cmp	r6, sl
 80259e2:	db18      	blt.n	8025a16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80259e4:	3b08      	subs	r3, #8
 80259e6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80259ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80259ee:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80259f2:	45b2      	cmp	sl, r6
 80259f4:	dbf6      	blt.n	80259e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 80259f6:	42ab      	cmp	r3, r5
 80259f8:	681e      	ldr	r6, [r3, #0]
 80259fa:	d30e      	bcc.n	8025a1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 80259fc:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8025a00:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025a04:	602e      	str	r6, [r5, #0]
 8025a06:	685e      	ldr	r6, [r3, #4]
 8025a08:	606e      	str	r6, [r5, #4]
 8025a0a:	f8a3 9000 	strh.w	r9, [r3]
 8025a0e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8025a12:	809f      	strh	r7, [r3, #4]
 8025a14:	80da      	strh	r2, [r3, #6]
 8025a16:	462a      	mov	r2, r5
 8025a18:	e7d3      	b.n	80259c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025a1a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8025a1e:	6006      	str	r6, [r0, #0]
 8025a20:	685e      	ldr	r6, [r3, #4]
 8025a22:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8025a26:	6046      	str	r6, [r0, #4]
 8025a28:	1a1e      	subs	r6, r3, r0
 8025a2a:	80da      	strh	r2, [r3, #6]
 8025a2c:	1b4a      	subs	r2, r1, r5
 8025a2e:	f8a3 e000 	strh.w	lr, [r3]
 8025a32:	10d2      	asrs	r2, r2, #3
 8025a34:	f8a3 c002 	strh.w	ip, [r3, #2]
 8025a38:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025a3c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8025a40:	bfb5      	itete	lt
 8025a42:	e9c4 0300 	strdlt	r0, r3, [r4]
 8025a46:	4607      	movge	r7, r0
 8025a48:	460b      	movlt	r3, r1
 8025a4a:	e9c4 5100 	strdge	r5, r1, [r4]
 8025a4e:	4638      	mov	r0, r7
 8025a50:	3408      	adds	r4, #8
 8025a52:	4619      	mov	r1, r3
 8025a54:	e73f      	b.n	80258d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025a56:	4291      	cmp	r1, r2
 8025a58:	d925      	bls.n	8025aa6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8025a5a:	f1a2 0310 	sub.w	r3, r2, #16
 8025a5e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8025a62:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8025a66:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 8025a6a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8025a6e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8025a72:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025a76:	42ae      	cmp	r6, r5
 8025a78:	da13      	bge.n	8025aa2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8025a7a:	461d      	mov	r5, r3
 8025a7c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8025a80:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8025a84:	3b08      	subs	r3, #8
 8025a86:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8025a8a:	619e      	str	r6, [r3, #24]
 8025a8c:	42a8      	cmp	r0, r5
 8025a8e:	686e      	ldr	r6, [r5, #4]
 8025a90:	f8a3 c010 	strh.w	ip, [r3, #16]
 8025a94:	61de      	str	r6, [r3, #28]
 8025a96:	825f      	strh	r7, [r3, #18]
 8025a98:	f8a3 8014 	strh.w	r8, [r3, #20]
 8025a9c:	f8a3 e016 	strh.w	lr, [r3, #22]
 8025aa0:	d1dd      	bne.n	8025a5e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8025aa2:	3208      	adds	r2, #8
 8025aa4:	e7d7      	b.n	8025a56 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025aa6:	466b      	mov	r3, sp
 8025aa8:	429c      	cmp	r4, r3
 8025aaa:	d903      	bls.n	8025ab4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8025aac:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8025ab0:	3c08      	subs	r4, #8
 8025ab2:	e710      	b.n	80258d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025ab4:	b051      	add	sp, #324	; 0x144
 8025ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025aba <_ZN8touchgfx7Outline9sortCellsEv>:
 8025aba:	6881      	ldr	r1, [r0, #8]
 8025abc:	b111      	cbz	r1, 8025ac4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8025abe:	68c0      	ldr	r0, [r0, #12]
 8025ac0:	f7ff bf03 	b.w	80258ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8025ac4:	4770      	bx	lr

08025ac6 <_ZN8touchgfx7Outline8getCellsEv>:
 8025ac6:	b510      	push	{r4, lr}
 8025ac8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025aca:	4604      	mov	r4, r0
 8025acc:	07da      	lsls	r2, r3, #31
 8025ace:	d507      	bpl.n	8025ae0 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8025ad0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025ad4:	f7ff fe82 	bl	80257dc <_ZN8touchgfx7Outline6lineToEii>
 8025ad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025ada:	f023 0301 	bic.w	r3, r3, #1
 8025ade:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025ae0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025ae2:	079b      	lsls	r3, r3, #30
 8025ae4:	d51a      	bpl.n	8025b1c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8025ae6:	8b62      	ldrh	r2, [r4, #26]
 8025ae8:	8b23      	ldrh	r3, [r4, #24]
 8025aea:	4313      	orrs	r3, r2
 8025aec:	d00d      	beq.n	8025b0a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025aee:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025af2:	2b00      	cmp	r3, #0
 8025af4:	db09      	blt.n	8025b0a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025af6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025af8:	4293      	cmp	r3, r2
 8025afa:	da06      	bge.n	8025b0a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025afc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8025b00:	429a      	cmp	r2, r3
 8025b02:	d80d      	bhi.n	8025b20 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025b04:	2301      	movs	r3, #1
 8025b06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025b0a:	68a0      	ldr	r0, [r4, #8]
 8025b0c:	b138      	cbz	r0, 8025b1e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8025b0e:	4620      	mov	r0, r4
 8025b10:	f7ff ffd3 	bl	8025aba <_ZN8touchgfx7Outline9sortCellsEv>
 8025b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025b16:	f023 0302 	bic.w	r3, r3, #2
 8025b1a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025b1c:	68e0      	ldr	r0, [r4, #12]
 8025b1e:	bd10      	pop	{r4, pc}
 8025b20:	f104 0314 	add.w	r3, r4, #20
 8025b24:	6922      	ldr	r2, [r4, #16]
 8025b26:	cb03      	ldmia	r3!, {r0, r1}
 8025b28:	6010      	str	r0, [r2, #0]
 8025b2a:	6051      	str	r1, [r2, #4]
 8025b2c:	6923      	ldr	r3, [r4, #16]
 8025b2e:	3308      	adds	r3, #8
 8025b30:	6123      	str	r3, [r4, #16]
 8025b32:	68a3      	ldr	r3, [r4, #8]
 8025b34:	3301      	adds	r3, #1
 8025b36:	60a3      	str	r3, [r4, #8]
 8025b38:	e7e7      	b.n	8025b0a <_ZN8touchgfx7Outline8getCellsEv+0x44>

08025b3a <_ZN8touchgfx8ScanlineD1Ev>:
 8025b3a:	4770      	bx	lr

08025b3c <_ZN8touchgfx8ScanlineD0Ev>:
 8025b3c:	b510      	push	{r4, lr}
 8025b3e:	4604      	mov	r4, r0
 8025b40:	2124      	movs	r1, #36	; 0x24
 8025b42:	f000 f888 	bl	8025c56 <_ZdlPvj>
 8025b46:	4620      	mov	r0, r4
 8025b48:	bd10      	pop	{r4, pc}

08025b4a <_ZN8touchgfx8Scanline5resetEv>:
 8025b4a:	b510      	push	{r4, lr}
 8025b4c:	4604      	mov	r4, r0
 8025b4e:	f7f1 fc2d 	bl	80173ac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8025b52:	61a0      	str	r0, [r4, #24]
 8025b54:	f7f1 fc30 	bl	80173b8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8025b58:	61e0      	str	r0, [r4, #28]
 8025b5a:	f7f1 fc33 	bl	80173c4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8025b5e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025b62:	6220      	str	r0, [r4, #32]
 8025b64:	6160      	str	r0, [r4, #20]
 8025b66:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8025b6a:	69e3      	ldr	r3, [r4, #28]
 8025b6c:	6123      	str	r3, [r4, #16]
 8025b6e:	2300      	movs	r3, #0
 8025b70:	60e3      	str	r3, [r4, #12]
 8025b72:	bd10      	pop	{r4, pc}

08025b74 <_ZN8touchgfx8ScanlineC1Ev>:
 8025b74:	4b09      	ldr	r3, [pc, #36]	; (8025b9c <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 8025b76:	b510      	push	{r4, lr}
 8025b78:	6003      	str	r3, [r0, #0]
 8025b7a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025b7e:	4604      	mov	r4, r0
 8025b80:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8025b84:	2300      	movs	r3, #0
 8025b86:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025b8a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8025b8e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8025b92:	f7ff ffda 	bl	8025b4a <_ZN8touchgfx8Scanline5resetEv>
 8025b96:	4620      	mov	r0, r4
 8025b98:	bd10      	pop	{r4, pc}
 8025b9a:	bf00      	nop
 8025b9c:	0802e8cc 	.word	0x0802e8cc

08025ba0 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8025ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ba4:	1e0c      	subs	r4, r1, #0
 8025ba6:	4605      	mov	r5, r0
 8025ba8:	4617      	mov	r7, r2
 8025baa:	461e      	mov	r6, r3
 8025bac:	da03      	bge.n	8025bb6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8025bae:	4426      	add	r6, r4
 8025bb0:	2e01      	cmp	r6, #1
 8025bb2:	d421      	bmi.n	8025bf8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025bb4:	2400      	movs	r4, #0
 8025bb6:	f7f1 fbf3 	bl	80173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025bba:	42a0      	cmp	r0, r4
 8025bbc:	dd1c      	ble.n	8025bf8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025bbe:	eb04 0806 	add.w	r8, r4, r6
 8025bc2:	f7f1 fbed 	bl	80173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025bc6:	4580      	cmp	r8, r0
 8025bc8:	d902      	bls.n	8025bd0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8025bca:	f7f1 fbe9 	bl	80173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025bce:	1b06      	subs	r6, r0, r4
 8025bd0:	69a8      	ldr	r0, [r5, #24]
 8025bd2:	4632      	mov	r2, r6
 8025bd4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8025bd8:	4420      	add	r0, r4
 8025bda:	f7f4 f92f 	bl	8019e3c <_ZN8touchgfx6memsetEPvhm>
 8025bde:	686b      	ldr	r3, [r5, #4]
 8025be0:	b2b2      	uxth	r2, r6
 8025be2:	3301      	adds	r3, #1
 8025be4:	42a3      	cmp	r3, r4
 8025be6:	696b      	ldr	r3, [r5, #20]
 8025be8:	d108      	bne.n	8025bfc <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8025bea:	8819      	ldrh	r1, [r3, #0]
 8025bec:	440a      	add	r2, r1
 8025bee:	801a      	strh	r2, [r3, #0]
 8025bf0:	3c01      	subs	r4, #1
 8025bf2:	4434      	add	r4, r6
 8025bf4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8025bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025bfc:	1c99      	adds	r1, r3, #2
 8025bfe:	6169      	str	r1, [r5, #20]
 8025c00:	805a      	strh	r2, [r3, #2]
 8025c02:	692b      	ldr	r3, [r5, #16]
 8025c04:	1c9a      	adds	r2, r3, #2
 8025c06:	612a      	str	r2, [r5, #16]
 8025c08:	805c      	strh	r4, [r3, #2]
 8025c0a:	68eb      	ldr	r3, [r5, #12]
 8025c0c:	3301      	adds	r3, #1
 8025c0e:	60eb      	str	r3, [r5, #12]
 8025c10:	e7ee      	b.n	8025bf0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08025c12 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8025c12:	4770      	bx	lr

08025c14 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8025c14:	b510      	push	{r4, lr}
 8025c16:	4604      	mov	r4, r0
 8025c18:	2118      	movs	r1, #24
 8025c1a:	f000 f81c 	bl	8025c56 <_ZdlPvj>
 8025c1e:	4620      	mov	r0, r4
 8025c20:	bd10      	pop	{r4, pc}
	...

08025c24 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8025c24:	4a04      	ldr	r2, [pc, #16]	; (8025c38 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8025c26:	6002      	str	r2, [r0, #0]
 8025c28:	2200      	movs	r2, #0
 8025c2a:	6042      	str	r2, [r0, #4]
 8025c2c:	7202      	strb	r2, [r0, #8]
 8025c2e:	6142      	str	r2, [r0, #20]
 8025c30:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8025c34:	4770      	bx	lr
 8025c36:	bf00      	nop
 8025c38:	0802e8dc 	.word	0x0802e8dc

08025c3c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8025c3c:	60c3      	str	r3, [r0, #12]
 8025c3e:	9b00      	ldr	r3, [sp, #0]
 8025c40:	6041      	str	r1, [r0, #4]
 8025c42:	6103      	str	r3, [r0, #16]
 8025c44:	9b01      	ldr	r3, [sp, #4]
 8025c46:	7202      	strb	r2, [r0, #8]
 8025c48:	6143      	str	r3, [r0, #20]
 8025c4a:	4770      	bx	lr

08025c4c <__aeabi_atexit>:
 8025c4c:	460b      	mov	r3, r1
 8025c4e:	4601      	mov	r1, r0
 8025c50:	4618      	mov	r0, r3
 8025c52:	f000 b959 	b.w	8025f08 <__cxa_atexit>

08025c56 <_ZdlPvj>:
 8025c56:	f000 b812 	b.w	8025c7e <_ZdlPv>

08025c5a <__cxa_guard_acquire>:
 8025c5a:	6803      	ldr	r3, [r0, #0]
 8025c5c:	07db      	lsls	r3, r3, #31
 8025c5e:	d406      	bmi.n	8025c6e <__cxa_guard_acquire+0x14>
 8025c60:	7843      	ldrb	r3, [r0, #1]
 8025c62:	b103      	cbz	r3, 8025c66 <__cxa_guard_acquire+0xc>
 8025c64:	deff      	udf	#255	; 0xff
 8025c66:	2301      	movs	r3, #1
 8025c68:	7043      	strb	r3, [r0, #1]
 8025c6a:	4618      	mov	r0, r3
 8025c6c:	4770      	bx	lr
 8025c6e:	2000      	movs	r0, #0
 8025c70:	4770      	bx	lr

08025c72 <__cxa_guard_release>:
 8025c72:	2301      	movs	r3, #1
 8025c74:	6003      	str	r3, [r0, #0]
 8025c76:	4770      	bx	lr

08025c78 <__cxa_pure_virtual>:
 8025c78:	b508      	push	{r3, lr}
 8025c7a:	f000 f80f 	bl	8025c9c <_ZSt9terminatev>

08025c7e <_ZdlPv>:
 8025c7e:	f000 b995 	b.w	8025fac <free>

08025c82 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025c82:	b508      	push	{r3, lr}
 8025c84:	4780      	blx	r0
 8025c86:	f000 f913 	bl	8025eb0 <abort>
	...

08025c8c <_ZSt13get_terminatev>:
 8025c8c:	4b02      	ldr	r3, [pc, #8]	; (8025c98 <_ZSt13get_terminatev+0xc>)
 8025c8e:	6818      	ldr	r0, [r3, #0]
 8025c90:	f3bf 8f5b 	dmb	ish
 8025c94:	4770      	bx	lr
 8025c96:	bf00      	nop
 8025c98:	20000078 	.word	0x20000078

08025c9c <_ZSt9terminatev>:
 8025c9c:	b508      	push	{r3, lr}
 8025c9e:	f7ff fff5 	bl	8025c8c <_ZSt13get_terminatev>
 8025ca2:	f7ff ffee 	bl	8025c82 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08025ca8 <ceil>:
 8025ca8:	ee10 1a90 	vmov	r1, s1
 8025cac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025cb0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8025cb4:	2b13      	cmp	r3, #19
 8025cb6:	b530      	push	{r4, r5, lr}
 8025cb8:	ee10 0a10 	vmov	r0, s0
 8025cbc:	ee10 5a10 	vmov	r5, s0
 8025cc0:	dc2f      	bgt.n	8025d22 <ceil+0x7a>
 8025cc2:	2b00      	cmp	r3, #0
 8025cc4:	da13      	bge.n	8025cee <ceil+0x46>
 8025cc6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8025d88 <ceil+0xe0>
 8025cca:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025cce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cd6:	dd05      	ble.n	8025ce4 <ceil+0x3c>
 8025cd8:	2900      	cmp	r1, #0
 8025cda:	db4c      	blt.n	8025d76 <ceil+0xce>
 8025cdc:	4301      	orrs	r1, r0
 8025cde:	d04e      	beq.n	8025d7e <ceil+0xd6>
 8025ce0:	492b      	ldr	r1, [pc, #172]	; (8025d90 <ceil+0xe8>)
 8025ce2:	2000      	movs	r0, #0
 8025ce4:	460b      	mov	r3, r1
 8025ce6:	4602      	mov	r2, r0
 8025ce8:	ec43 2b10 	vmov	d0, r2, r3
 8025cec:	e020      	b.n	8025d30 <ceil+0x88>
 8025cee:	4a29      	ldr	r2, [pc, #164]	; (8025d94 <ceil+0xec>)
 8025cf0:	411a      	asrs	r2, r3
 8025cf2:	ea01 0402 	and.w	r4, r1, r2
 8025cf6:	4304      	orrs	r4, r0
 8025cf8:	d01a      	beq.n	8025d30 <ceil+0x88>
 8025cfa:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8025d88 <ceil+0xe0>
 8025cfe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025d02:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d0a:	ddeb      	ble.n	8025ce4 <ceil+0x3c>
 8025d0c:	2900      	cmp	r1, #0
 8025d0e:	bfc2      	ittt	gt
 8025d10:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8025d14:	fa40 f303 	asrgt.w	r3, r0, r3
 8025d18:	18c9      	addgt	r1, r1, r3
 8025d1a:	ea21 0102 	bic.w	r1, r1, r2
 8025d1e:	2000      	movs	r0, #0
 8025d20:	e7e0      	b.n	8025ce4 <ceil+0x3c>
 8025d22:	2b33      	cmp	r3, #51	; 0x33
 8025d24:	dd05      	ble.n	8025d32 <ceil+0x8a>
 8025d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025d2a:	d101      	bne.n	8025d30 <ceil+0x88>
 8025d2c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8025d30:	bd30      	pop	{r4, r5, pc}
 8025d32:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8025d36:	f04f 32ff 	mov.w	r2, #4294967295
 8025d3a:	40e2      	lsrs	r2, r4
 8025d3c:	4202      	tst	r2, r0
 8025d3e:	d0f7      	beq.n	8025d30 <ceil+0x88>
 8025d40:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8025d88 <ceil+0xe0>
 8025d44:	ee30 0b07 	vadd.f64	d0, d0, d7
 8025d48:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d50:	ddc8      	ble.n	8025ce4 <ceil+0x3c>
 8025d52:	2900      	cmp	r1, #0
 8025d54:	dd02      	ble.n	8025d5c <ceil+0xb4>
 8025d56:	2b14      	cmp	r3, #20
 8025d58:	d103      	bne.n	8025d62 <ceil+0xba>
 8025d5a:	3101      	adds	r1, #1
 8025d5c:	ea20 0002 	bic.w	r0, r0, r2
 8025d60:	e7c0      	b.n	8025ce4 <ceil+0x3c>
 8025d62:	2401      	movs	r4, #1
 8025d64:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8025d68:	fa04 f303 	lsl.w	r3, r4, r3
 8025d6c:	4418      	add	r0, r3
 8025d6e:	42a8      	cmp	r0, r5
 8025d70:	bf38      	it	cc
 8025d72:	1909      	addcc	r1, r1, r4
 8025d74:	e7f2      	b.n	8025d5c <ceil+0xb4>
 8025d76:	2000      	movs	r0, #0
 8025d78:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8025d7c:	e7b2      	b.n	8025ce4 <ceil+0x3c>
 8025d7e:	4608      	mov	r0, r1
 8025d80:	e7b0      	b.n	8025ce4 <ceil+0x3c>
 8025d82:	bf00      	nop
 8025d84:	f3af 8000 	nop.w
 8025d88:	8800759c 	.word	0x8800759c
 8025d8c:	7e37e43c 	.word	0x7e37e43c
 8025d90:	3ff00000 	.word	0x3ff00000
 8025d94:	000fffff 	.word	0x000fffff

08025d98 <fmin>:
 8025d98:	b508      	push	{r3, lr}
 8025d9a:	ed2d 8b04 	vpush	{d8-d9}
 8025d9e:	eeb0 8b40 	vmov.f64	d8, d0
 8025da2:	eeb0 9b41 	vmov.f64	d9, d1
 8025da6:	f000 f813 	bl	8025dd0 <__fpclassifyd>
 8025daa:	b148      	cbz	r0, 8025dc0 <fmin+0x28>
 8025dac:	eeb0 0b49 	vmov.f64	d0, d9
 8025db0:	f000 f80e 	bl	8025dd0 <__fpclassifyd>
 8025db4:	b130      	cbz	r0, 8025dc4 <fmin+0x2c>
 8025db6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8025dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025dbe:	d401      	bmi.n	8025dc4 <fmin+0x2c>
 8025dc0:	eeb0 8b49 	vmov.f64	d8, d9
 8025dc4:	eeb0 0b48 	vmov.f64	d0, d8
 8025dc8:	ecbd 8b04 	vpop	{d8-d9}
 8025dcc:	bd08      	pop	{r3, pc}
	...

08025dd0 <__fpclassifyd>:
 8025dd0:	ec51 0b10 	vmov	r0, r1, d0
 8025dd4:	b510      	push	{r4, lr}
 8025dd6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8025dda:	460b      	mov	r3, r1
 8025ddc:	d019      	beq.n	8025e12 <__fpclassifyd+0x42>
 8025dde:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8025de2:	490e      	ldr	r1, [pc, #56]	; (8025e1c <__fpclassifyd+0x4c>)
 8025de4:	428a      	cmp	r2, r1
 8025de6:	d90e      	bls.n	8025e06 <__fpclassifyd+0x36>
 8025de8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8025dec:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8025df0:	428a      	cmp	r2, r1
 8025df2:	d908      	bls.n	8025e06 <__fpclassifyd+0x36>
 8025df4:	4a0a      	ldr	r2, [pc, #40]	; (8025e20 <__fpclassifyd+0x50>)
 8025df6:	4213      	tst	r3, r2
 8025df8:	d007      	beq.n	8025e0a <__fpclassifyd+0x3a>
 8025dfa:	4294      	cmp	r4, r2
 8025dfc:	d107      	bne.n	8025e0e <__fpclassifyd+0x3e>
 8025dfe:	fab0 f080 	clz	r0, r0
 8025e02:	0940      	lsrs	r0, r0, #5
 8025e04:	bd10      	pop	{r4, pc}
 8025e06:	2004      	movs	r0, #4
 8025e08:	e7fc      	b.n	8025e04 <__fpclassifyd+0x34>
 8025e0a:	2003      	movs	r0, #3
 8025e0c:	e7fa      	b.n	8025e04 <__fpclassifyd+0x34>
 8025e0e:	2000      	movs	r0, #0
 8025e10:	e7f8      	b.n	8025e04 <__fpclassifyd+0x34>
 8025e12:	2800      	cmp	r0, #0
 8025e14:	d1ee      	bne.n	8025df4 <__fpclassifyd+0x24>
 8025e16:	2002      	movs	r0, #2
 8025e18:	e7f4      	b.n	8025e04 <__fpclassifyd+0x34>
 8025e1a:	bf00      	nop
 8025e1c:	7fdfffff 	.word	0x7fdfffff
 8025e20:	7ff00000 	.word	0x7ff00000

08025e24 <round>:
 8025e24:	ee10 1a90 	vmov	r1, s1
 8025e28:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8025e2c:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8025e30:	2a13      	cmp	r2, #19
 8025e32:	b510      	push	{r4, lr}
 8025e34:	ee10 3a10 	vmov	r3, s0
 8025e38:	dc19      	bgt.n	8025e6e <round+0x4a>
 8025e3a:	2a00      	cmp	r2, #0
 8025e3c:	da09      	bge.n	8025e52 <round+0x2e>
 8025e3e:	3201      	adds	r2, #1
 8025e40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8025e44:	d103      	bne.n	8025e4e <round+0x2a>
 8025e46:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8025e4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8025e4e:	2000      	movs	r0, #0
 8025e50:	e027      	b.n	8025ea2 <round+0x7e>
 8025e52:	4816      	ldr	r0, [pc, #88]	; (8025eac <round+0x88>)
 8025e54:	4110      	asrs	r0, r2
 8025e56:	ea01 0400 	and.w	r4, r1, r0
 8025e5a:	4323      	orrs	r3, r4
 8025e5c:	d00e      	beq.n	8025e7c <round+0x58>
 8025e5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8025e62:	fa43 f202 	asr.w	r2, r3, r2
 8025e66:	4411      	add	r1, r2
 8025e68:	ea21 0100 	bic.w	r1, r1, r0
 8025e6c:	e7ef      	b.n	8025e4e <round+0x2a>
 8025e6e:	2a33      	cmp	r2, #51	; 0x33
 8025e70:	dd05      	ble.n	8025e7e <round+0x5a>
 8025e72:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8025e76:	d101      	bne.n	8025e7c <round+0x58>
 8025e78:	ee30 0b00 	vadd.f64	d0, d0, d0
 8025e7c:	bd10      	pop	{r4, pc}
 8025e7e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8025e82:	f04f 30ff 	mov.w	r0, #4294967295
 8025e86:	fa20 f404 	lsr.w	r4, r0, r4
 8025e8a:	4223      	tst	r3, r4
 8025e8c:	d0f6      	beq.n	8025e7c <round+0x58>
 8025e8e:	2001      	movs	r0, #1
 8025e90:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8025e94:	fa00 f202 	lsl.w	r2, r0, r2
 8025e98:	189b      	adds	r3, r3, r2
 8025e9a:	bf28      	it	cs
 8025e9c:	1809      	addcs	r1, r1, r0
 8025e9e:	ea23 0004 	bic.w	r0, r3, r4
 8025ea2:	460b      	mov	r3, r1
 8025ea4:	4602      	mov	r2, r0
 8025ea6:	ec43 2b10 	vmov	d0, r2, r3
 8025eaa:	e7e7      	b.n	8025e7c <round+0x58>
 8025eac:	000fffff 	.word	0x000fffff

08025eb0 <abort>:
 8025eb0:	b508      	push	{r3, lr}
 8025eb2:	2006      	movs	r0, #6
 8025eb4:	f001 f920 	bl	80270f8 <raise>
 8025eb8:	2001      	movs	r0, #1
 8025eba:	f7dc fe5d 	bl	8002b78 <_exit>
	...

08025ec0 <__assert_func>:
 8025ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025ec2:	4614      	mov	r4, r2
 8025ec4:	461a      	mov	r2, r3
 8025ec6:	4b09      	ldr	r3, [pc, #36]	; (8025eec <__assert_func+0x2c>)
 8025ec8:	681b      	ldr	r3, [r3, #0]
 8025eca:	4605      	mov	r5, r0
 8025ecc:	68d8      	ldr	r0, [r3, #12]
 8025ece:	b14c      	cbz	r4, 8025ee4 <__assert_func+0x24>
 8025ed0:	4b07      	ldr	r3, [pc, #28]	; (8025ef0 <__assert_func+0x30>)
 8025ed2:	9100      	str	r1, [sp, #0]
 8025ed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025ed8:	4906      	ldr	r1, [pc, #24]	; (8025ef4 <__assert_func+0x34>)
 8025eda:	462b      	mov	r3, r5
 8025edc:	f000 f828 	bl	8025f30 <fiprintf>
 8025ee0:	f7ff ffe6 	bl	8025eb0 <abort>
 8025ee4:	4b04      	ldr	r3, [pc, #16]	; (8025ef8 <__assert_func+0x38>)
 8025ee6:	461c      	mov	r4, r3
 8025ee8:	e7f3      	b.n	8025ed2 <__assert_func+0x12>
 8025eea:	bf00      	nop
 8025eec:	2000007c 	.word	0x2000007c
 8025ef0:	0802e8e4 	.word	0x0802e8e4
 8025ef4:	0802e8f1 	.word	0x0802e8f1
 8025ef8:	0802e91f 	.word	0x0802e91f

08025efc <atexit>:
 8025efc:	2300      	movs	r3, #0
 8025efe:	4601      	mov	r1, r0
 8025f00:	461a      	mov	r2, r3
 8025f02:	4618      	mov	r0, r3
 8025f04:	f002 b872 	b.w	8027fec <__register_exitproc>

08025f08 <__cxa_atexit>:
 8025f08:	b510      	push	{r4, lr}
 8025f0a:	4c05      	ldr	r4, [pc, #20]	; (8025f20 <__cxa_atexit+0x18>)
 8025f0c:	4613      	mov	r3, r2
 8025f0e:	b12c      	cbz	r4, 8025f1c <__cxa_atexit+0x14>
 8025f10:	460a      	mov	r2, r1
 8025f12:	4601      	mov	r1, r0
 8025f14:	2002      	movs	r0, #2
 8025f16:	f002 f869 	bl	8027fec <__register_exitproc>
 8025f1a:	bd10      	pop	{r4, pc}
 8025f1c:	4620      	mov	r0, r4
 8025f1e:	e7fc      	b.n	8025f1a <__cxa_atexit+0x12>
 8025f20:	08027fed 	.word	0x08027fed

08025f24 <__errno>:
 8025f24:	4b01      	ldr	r3, [pc, #4]	; (8025f2c <__errno+0x8>)
 8025f26:	6818      	ldr	r0, [r3, #0]
 8025f28:	4770      	bx	lr
 8025f2a:	bf00      	nop
 8025f2c:	2000007c 	.word	0x2000007c

08025f30 <fiprintf>:
 8025f30:	b40e      	push	{r1, r2, r3}
 8025f32:	b503      	push	{r0, r1, lr}
 8025f34:	4601      	mov	r1, r0
 8025f36:	ab03      	add	r3, sp, #12
 8025f38:	4805      	ldr	r0, [pc, #20]	; (8025f50 <fiprintf+0x20>)
 8025f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8025f3e:	6800      	ldr	r0, [r0, #0]
 8025f40:	9301      	str	r3, [sp, #4]
 8025f42:	f000 f925 	bl	8026190 <_vfiprintf_r>
 8025f46:	b002      	add	sp, #8
 8025f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8025f4c:	b003      	add	sp, #12
 8025f4e:	4770      	bx	lr
 8025f50:	2000007c 	.word	0x2000007c

08025f54 <__libc_init_array>:
 8025f54:	b570      	push	{r4, r5, r6, lr}
 8025f56:	4d0d      	ldr	r5, [pc, #52]	; (8025f8c <__libc_init_array+0x38>)
 8025f58:	4c0d      	ldr	r4, [pc, #52]	; (8025f90 <__libc_init_array+0x3c>)
 8025f5a:	1b64      	subs	r4, r4, r5
 8025f5c:	10a4      	asrs	r4, r4, #2
 8025f5e:	2600      	movs	r6, #0
 8025f60:	42a6      	cmp	r6, r4
 8025f62:	d109      	bne.n	8025f78 <__libc_init_array+0x24>
 8025f64:	4d0b      	ldr	r5, [pc, #44]	; (8025f94 <__libc_init_array+0x40>)
 8025f66:	4c0c      	ldr	r4, [pc, #48]	; (8025f98 <__libc_init_array+0x44>)
 8025f68:	f004 fba0 	bl	802a6ac <_init>
 8025f6c:	1b64      	subs	r4, r4, r5
 8025f6e:	10a4      	asrs	r4, r4, #2
 8025f70:	2600      	movs	r6, #0
 8025f72:	42a6      	cmp	r6, r4
 8025f74:	d105      	bne.n	8025f82 <__libc_init_array+0x2e>
 8025f76:	bd70      	pop	{r4, r5, r6, pc}
 8025f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8025f7c:	4798      	blx	r3
 8025f7e:	3601      	adds	r6, #1
 8025f80:	e7ee      	b.n	8025f60 <__libc_init_array+0xc>
 8025f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8025f86:	4798      	blx	r3
 8025f88:	3601      	adds	r6, #1
 8025f8a:	e7f2      	b.n	8025f72 <__libc_init_array+0x1e>
 8025f8c:	080d8a70 	.word	0x080d8a70
 8025f90:	080d8a70 	.word	0x080d8a70
 8025f94:	080d8a70 	.word	0x080d8a70
 8025f98:	080d8aa0 	.word	0x080d8aa0

08025f9c <malloc>:
 8025f9c:	4b02      	ldr	r3, [pc, #8]	; (8025fa8 <malloc+0xc>)
 8025f9e:	4601      	mov	r1, r0
 8025fa0:	6818      	ldr	r0, [r3, #0]
 8025fa2:	f000 b871 	b.w	8026088 <_malloc_r>
 8025fa6:	bf00      	nop
 8025fa8:	2000007c 	.word	0x2000007c

08025fac <free>:
 8025fac:	4b02      	ldr	r3, [pc, #8]	; (8025fb8 <free+0xc>)
 8025fae:	4601      	mov	r1, r0
 8025fb0:	6818      	ldr	r0, [r3, #0]
 8025fb2:	f000 b819 	b.w	8025fe8 <_free_r>
 8025fb6:	bf00      	nop
 8025fb8:	2000007c 	.word	0x2000007c

08025fbc <memcpy>:
 8025fbc:	440a      	add	r2, r1
 8025fbe:	4291      	cmp	r1, r2
 8025fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8025fc4:	d100      	bne.n	8025fc8 <memcpy+0xc>
 8025fc6:	4770      	bx	lr
 8025fc8:	b510      	push	{r4, lr}
 8025fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025fd2:	4291      	cmp	r1, r2
 8025fd4:	d1f9      	bne.n	8025fca <memcpy+0xe>
 8025fd6:	bd10      	pop	{r4, pc}

08025fd8 <memset>:
 8025fd8:	4402      	add	r2, r0
 8025fda:	4603      	mov	r3, r0
 8025fdc:	4293      	cmp	r3, r2
 8025fde:	d100      	bne.n	8025fe2 <memset+0xa>
 8025fe0:	4770      	bx	lr
 8025fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8025fe6:	e7f9      	b.n	8025fdc <memset+0x4>

08025fe8 <_free_r>:
 8025fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025fea:	2900      	cmp	r1, #0
 8025fec:	d048      	beq.n	8026080 <_free_r+0x98>
 8025fee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025ff2:	9001      	str	r0, [sp, #4]
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	f1a1 0404 	sub.w	r4, r1, #4
 8025ffa:	bfb8      	it	lt
 8025ffc:	18e4      	addlt	r4, r4, r3
 8025ffe:	f003 fc23 	bl	8029848 <__malloc_lock>
 8026002:	4a20      	ldr	r2, [pc, #128]	; (8026084 <_free_r+0x9c>)
 8026004:	9801      	ldr	r0, [sp, #4]
 8026006:	6813      	ldr	r3, [r2, #0]
 8026008:	4615      	mov	r5, r2
 802600a:	b933      	cbnz	r3, 802601a <_free_r+0x32>
 802600c:	6063      	str	r3, [r4, #4]
 802600e:	6014      	str	r4, [r2, #0]
 8026010:	b003      	add	sp, #12
 8026012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026016:	f003 bc1d 	b.w	8029854 <__malloc_unlock>
 802601a:	42a3      	cmp	r3, r4
 802601c:	d90b      	bls.n	8026036 <_free_r+0x4e>
 802601e:	6821      	ldr	r1, [r4, #0]
 8026020:	1862      	adds	r2, r4, r1
 8026022:	4293      	cmp	r3, r2
 8026024:	bf04      	itt	eq
 8026026:	681a      	ldreq	r2, [r3, #0]
 8026028:	685b      	ldreq	r3, [r3, #4]
 802602a:	6063      	str	r3, [r4, #4]
 802602c:	bf04      	itt	eq
 802602e:	1852      	addeq	r2, r2, r1
 8026030:	6022      	streq	r2, [r4, #0]
 8026032:	602c      	str	r4, [r5, #0]
 8026034:	e7ec      	b.n	8026010 <_free_r+0x28>
 8026036:	461a      	mov	r2, r3
 8026038:	685b      	ldr	r3, [r3, #4]
 802603a:	b10b      	cbz	r3, 8026040 <_free_r+0x58>
 802603c:	42a3      	cmp	r3, r4
 802603e:	d9fa      	bls.n	8026036 <_free_r+0x4e>
 8026040:	6811      	ldr	r1, [r2, #0]
 8026042:	1855      	adds	r5, r2, r1
 8026044:	42a5      	cmp	r5, r4
 8026046:	d10b      	bne.n	8026060 <_free_r+0x78>
 8026048:	6824      	ldr	r4, [r4, #0]
 802604a:	4421      	add	r1, r4
 802604c:	1854      	adds	r4, r2, r1
 802604e:	42a3      	cmp	r3, r4
 8026050:	6011      	str	r1, [r2, #0]
 8026052:	d1dd      	bne.n	8026010 <_free_r+0x28>
 8026054:	681c      	ldr	r4, [r3, #0]
 8026056:	685b      	ldr	r3, [r3, #4]
 8026058:	6053      	str	r3, [r2, #4]
 802605a:	4421      	add	r1, r4
 802605c:	6011      	str	r1, [r2, #0]
 802605e:	e7d7      	b.n	8026010 <_free_r+0x28>
 8026060:	d902      	bls.n	8026068 <_free_r+0x80>
 8026062:	230c      	movs	r3, #12
 8026064:	6003      	str	r3, [r0, #0]
 8026066:	e7d3      	b.n	8026010 <_free_r+0x28>
 8026068:	6825      	ldr	r5, [r4, #0]
 802606a:	1961      	adds	r1, r4, r5
 802606c:	428b      	cmp	r3, r1
 802606e:	bf04      	itt	eq
 8026070:	6819      	ldreq	r1, [r3, #0]
 8026072:	685b      	ldreq	r3, [r3, #4]
 8026074:	6063      	str	r3, [r4, #4]
 8026076:	bf04      	itt	eq
 8026078:	1949      	addeq	r1, r1, r5
 802607a:	6021      	streq	r1, [r4, #0]
 802607c:	6054      	str	r4, [r2, #4]
 802607e:	e7c7      	b.n	8026010 <_free_r+0x28>
 8026080:	b003      	add	sp, #12
 8026082:	bd30      	pop	{r4, r5, pc}
 8026084:	200567f4 	.word	0x200567f4

08026088 <_malloc_r>:
 8026088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802608a:	1ccd      	adds	r5, r1, #3
 802608c:	f025 0503 	bic.w	r5, r5, #3
 8026090:	3508      	adds	r5, #8
 8026092:	2d0c      	cmp	r5, #12
 8026094:	bf38      	it	cc
 8026096:	250c      	movcc	r5, #12
 8026098:	2d00      	cmp	r5, #0
 802609a:	4606      	mov	r6, r0
 802609c:	db01      	blt.n	80260a2 <_malloc_r+0x1a>
 802609e:	42a9      	cmp	r1, r5
 80260a0:	d903      	bls.n	80260aa <_malloc_r+0x22>
 80260a2:	230c      	movs	r3, #12
 80260a4:	6033      	str	r3, [r6, #0]
 80260a6:	2000      	movs	r0, #0
 80260a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80260aa:	f003 fbcd 	bl	8029848 <__malloc_lock>
 80260ae:	4921      	ldr	r1, [pc, #132]	; (8026134 <_malloc_r+0xac>)
 80260b0:	680a      	ldr	r2, [r1, #0]
 80260b2:	4614      	mov	r4, r2
 80260b4:	b99c      	cbnz	r4, 80260de <_malloc_r+0x56>
 80260b6:	4f20      	ldr	r7, [pc, #128]	; (8026138 <_malloc_r+0xb0>)
 80260b8:	683b      	ldr	r3, [r7, #0]
 80260ba:	b923      	cbnz	r3, 80260c6 <_malloc_r+0x3e>
 80260bc:	4621      	mov	r1, r4
 80260be:	4630      	mov	r0, r6
 80260c0:	f000 ffdc 	bl	802707c <_sbrk_r>
 80260c4:	6038      	str	r0, [r7, #0]
 80260c6:	4629      	mov	r1, r5
 80260c8:	4630      	mov	r0, r6
 80260ca:	f000 ffd7 	bl	802707c <_sbrk_r>
 80260ce:	1c43      	adds	r3, r0, #1
 80260d0:	d123      	bne.n	802611a <_malloc_r+0x92>
 80260d2:	230c      	movs	r3, #12
 80260d4:	6033      	str	r3, [r6, #0]
 80260d6:	4630      	mov	r0, r6
 80260d8:	f003 fbbc 	bl	8029854 <__malloc_unlock>
 80260dc:	e7e3      	b.n	80260a6 <_malloc_r+0x1e>
 80260de:	6823      	ldr	r3, [r4, #0]
 80260e0:	1b5b      	subs	r3, r3, r5
 80260e2:	d417      	bmi.n	8026114 <_malloc_r+0x8c>
 80260e4:	2b0b      	cmp	r3, #11
 80260e6:	d903      	bls.n	80260f0 <_malloc_r+0x68>
 80260e8:	6023      	str	r3, [r4, #0]
 80260ea:	441c      	add	r4, r3
 80260ec:	6025      	str	r5, [r4, #0]
 80260ee:	e004      	b.n	80260fa <_malloc_r+0x72>
 80260f0:	6863      	ldr	r3, [r4, #4]
 80260f2:	42a2      	cmp	r2, r4
 80260f4:	bf0c      	ite	eq
 80260f6:	600b      	streq	r3, [r1, #0]
 80260f8:	6053      	strne	r3, [r2, #4]
 80260fa:	4630      	mov	r0, r6
 80260fc:	f003 fbaa 	bl	8029854 <__malloc_unlock>
 8026100:	f104 000b 	add.w	r0, r4, #11
 8026104:	1d23      	adds	r3, r4, #4
 8026106:	f020 0007 	bic.w	r0, r0, #7
 802610a:	1ac2      	subs	r2, r0, r3
 802610c:	d0cc      	beq.n	80260a8 <_malloc_r+0x20>
 802610e:	1a1b      	subs	r3, r3, r0
 8026110:	50a3      	str	r3, [r4, r2]
 8026112:	e7c9      	b.n	80260a8 <_malloc_r+0x20>
 8026114:	4622      	mov	r2, r4
 8026116:	6864      	ldr	r4, [r4, #4]
 8026118:	e7cc      	b.n	80260b4 <_malloc_r+0x2c>
 802611a:	1cc4      	adds	r4, r0, #3
 802611c:	f024 0403 	bic.w	r4, r4, #3
 8026120:	42a0      	cmp	r0, r4
 8026122:	d0e3      	beq.n	80260ec <_malloc_r+0x64>
 8026124:	1a21      	subs	r1, r4, r0
 8026126:	4630      	mov	r0, r6
 8026128:	f000 ffa8 	bl	802707c <_sbrk_r>
 802612c:	3001      	adds	r0, #1
 802612e:	d1dd      	bne.n	80260ec <_malloc_r+0x64>
 8026130:	e7cf      	b.n	80260d2 <_malloc_r+0x4a>
 8026132:	bf00      	nop
 8026134:	200567f4 	.word	0x200567f4
 8026138:	200567f8 	.word	0x200567f8

0802613c <__sfputc_r>:
 802613c:	6893      	ldr	r3, [r2, #8]
 802613e:	3b01      	subs	r3, #1
 8026140:	2b00      	cmp	r3, #0
 8026142:	b410      	push	{r4}
 8026144:	6093      	str	r3, [r2, #8]
 8026146:	da08      	bge.n	802615a <__sfputc_r+0x1e>
 8026148:	6994      	ldr	r4, [r2, #24]
 802614a:	42a3      	cmp	r3, r4
 802614c:	db01      	blt.n	8026152 <__sfputc_r+0x16>
 802614e:	290a      	cmp	r1, #10
 8026150:	d103      	bne.n	802615a <__sfputc_r+0x1e>
 8026152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026156:	f001 be89 	b.w	8027e6c <__swbuf_r>
 802615a:	6813      	ldr	r3, [r2, #0]
 802615c:	1c58      	adds	r0, r3, #1
 802615e:	6010      	str	r0, [r2, #0]
 8026160:	7019      	strb	r1, [r3, #0]
 8026162:	4608      	mov	r0, r1
 8026164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026168:	4770      	bx	lr

0802616a <__sfputs_r>:
 802616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802616c:	4606      	mov	r6, r0
 802616e:	460f      	mov	r7, r1
 8026170:	4614      	mov	r4, r2
 8026172:	18d5      	adds	r5, r2, r3
 8026174:	42ac      	cmp	r4, r5
 8026176:	d101      	bne.n	802617c <__sfputs_r+0x12>
 8026178:	2000      	movs	r0, #0
 802617a:	e007      	b.n	802618c <__sfputs_r+0x22>
 802617c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026180:	463a      	mov	r2, r7
 8026182:	4630      	mov	r0, r6
 8026184:	f7ff ffda 	bl	802613c <__sfputc_r>
 8026188:	1c43      	adds	r3, r0, #1
 802618a:	d1f3      	bne.n	8026174 <__sfputs_r+0xa>
 802618c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026190 <_vfiprintf_r>:
 8026190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026194:	460d      	mov	r5, r1
 8026196:	b09d      	sub	sp, #116	; 0x74
 8026198:	4614      	mov	r4, r2
 802619a:	4698      	mov	r8, r3
 802619c:	4606      	mov	r6, r0
 802619e:	b118      	cbz	r0, 80261a8 <_vfiprintf_r+0x18>
 80261a0:	6983      	ldr	r3, [r0, #24]
 80261a2:	b90b      	cbnz	r3, 80261a8 <_vfiprintf_r+0x18>
 80261a4:	f002 feac 	bl	8028f00 <__sinit>
 80261a8:	4b89      	ldr	r3, [pc, #548]	; (80263d0 <_vfiprintf_r+0x240>)
 80261aa:	429d      	cmp	r5, r3
 80261ac:	d11b      	bne.n	80261e6 <_vfiprintf_r+0x56>
 80261ae:	6875      	ldr	r5, [r6, #4]
 80261b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80261b2:	07d9      	lsls	r1, r3, #31
 80261b4:	d405      	bmi.n	80261c2 <_vfiprintf_r+0x32>
 80261b6:	89ab      	ldrh	r3, [r5, #12]
 80261b8:	059a      	lsls	r2, r3, #22
 80261ba:	d402      	bmi.n	80261c2 <_vfiprintf_r+0x32>
 80261bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80261be:	f003 fab0 	bl	8029722 <__retarget_lock_acquire_recursive>
 80261c2:	89ab      	ldrh	r3, [r5, #12]
 80261c4:	071b      	lsls	r3, r3, #28
 80261c6:	d501      	bpl.n	80261cc <_vfiprintf_r+0x3c>
 80261c8:	692b      	ldr	r3, [r5, #16]
 80261ca:	b9eb      	cbnz	r3, 8026208 <_vfiprintf_r+0x78>
 80261cc:	4629      	mov	r1, r5
 80261ce:	4630      	mov	r0, r6
 80261d0:	f001 fe9e 	bl	8027f10 <__swsetup_r>
 80261d4:	b1c0      	cbz	r0, 8026208 <_vfiprintf_r+0x78>
 80261d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80261d8:	07dc      	lsls	r4, r3, #31
 80261da:	d50e      	bpl.n	80261fa <_vfiprintf_r+0x6a>
 80261dc:	f04f 30ff 	mov.w	r0, #4294967295
 80261e0:	b01d      	add	sp, #116	; 0x74
 80261e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261e6:	4b7b      	ldr	r3, [pc, #492]	; (80263d4 <_vfiprintf_r+0x244>)
 80261e8:	429d      	cmp	r5, r3
 80261ea:	d101      	bne.n	80261f0 <_vfiprintf_r+0x60>
 80261ec:	68b5      	ldr	r5, [r6, #8]
 80261ee:	e7df      	b.n	80261b0 <_vfiprintf_r+0x20>
 80261f0:	4b79      	ldr	r3, [pc, #484]	; (80263d8 <_vfiprintf_r+0x248>)
 80261f2:	429d      	cmp	r5, r3
 80261f4:	bf08      	it	eq
 80261f6:	68f5      	ldreq	r5, [r6, #12]
 80261f8:	e7da      	b.n	80261b0 <_vfiprintf_r+0x20>
 80261fa:	89ab      	ldrh	r3, [r5, #12]
 80261fc:	0598      	lsls	r0, r3, #22
 80261fe:	d4ed      	bmi.n	80261dc <_vfiprintf_r+0x4c>
 8026200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026202:	f003 fa90 	bl	8029726 <__retarget_lock_release_recursive>
 8026206:	e7e9      	b.n	80261dc <_vfiprintf_r+0x4c>
 8026208:	2300      	movs	r3, #0
 802620a:	9309      	str	r3, [sp, #36]	; 0x24
 802620c:	2320      	movs	r3, #32
 802620e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026212:	f8cd 800c 	str.w	r8, [sp, #12]
 8026216:	2330      	movs	r3, #48	; 0x30
 8026218:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80263dc <_vfiprintf_r+0x24c>
 802621c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026220:	f04f 0901 	mov.w	r9, #1
 8026224:	4623      	mov	r3, r4
 8026226:	469a      	mov	sl, r3
 8026228:	f813 2b01 	ldrb.w	r2, [r3], #1
 802622c:	b10a      	cbz	r2, 8026232 <_vfiprintf_r+0xa2>
 802622e:	2a25      	cmp	r2, #37	; 0x25
 8026230:	d1f9      	bne.n	8026226 <_vfiprintf_r+0x96>
 8026232:	ebba 0b04 	subs.w	fp, sl, r4
 8026236:	d00b      	beq.n	8026250 <_vfiprintf_r+0xc0>
 8026238:	465b      	mov	r3, fp
 802623a:	4622      	mov	r2, r4
 802623c:	4629      	mov	r1, r5
 802623e:	4630      	mov	r0, r6
 8026240:	f7ff ff93 	bl	802616a <__sfputs_r>
 8026244:	3001      	adds	r0, #1
 8026246:	f000 80aa 	beq.w	802639e <_vfiprintf_r+0x20e>
 802624a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802624c:	445a      	add	r2, fp
 802624e:	9209      	str	r2, [sp, #36]	; 0x24
 8026250:	f89a 3000 	ldrb.w	r3, [sl]
 8026254:	2b00      	cmp	r3, #0
 8026256:	f000 80a2 	beq.w	802639e <_vfiprintf_r+0x20e>
 802625a:	2300      	movs	r3, #0
 802625c:	f04f 32ff 	mov.w	r2, #4294967295
 8026260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026264:	f10a 0a01 	add.w	sl, sl, #1
 8026268:	9304      	str	r3, [sp, #16]
 802626a:	9307      	str	r3, [sp, #28]
 802626c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026270:	931a      	str	r3, [sp, #104]	; 0x68
 8026272:	4654      	mov	r4, sl
 8026274:	2205      	movs	r2, #5
 8026276:	f814 1b01 	ldrb.w	r1, [r4], #1
 802627a:	4858      	ldr	r0, [pc, #352]	; (80263dc <_vfiprintf_r+0x24c>)
 802627c:	f7d9 ffe8 	bl	8000250 <memchr>
 8026280:	9a04      	ldr	r2, [sp, #16]
 8026282:	b9d8      	cbnz	r0, 80262bc <_vfiprintf_r+0x12c>
 8026284:	06d1      	lsls	r1, r2, #27
 8026286:	bf44      	itt	mi
 8026288:	2320      	movmi	r3, #32
 802628a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802628e:	0713      	lsls	r3, r2, #28
 8026290:	bf44      	itt	mi
 8026292:	232b      	movmi	r3, #43	; 0x2b
 8026294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026298:	f89a 3000 	ldrb.w	r3, [sl]
 802629c:	2b2a      	cmp	r3, #42	; 0x2a
 802629e:	d015      	beq.n	80262cc <_vfiprintf_r+0x13c>
 80262a0:	9a07      	ldr	r2, [sp, #28]
 80262a2:	4654      	mov	r4, sl
 80262a4:	2000      	movs	r0, #0
 80262a6:	f04f 0c0a 	mov.w	ip, #10
 80262aa:	4621      	mov	r1, r4
 80262ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80262b0:	3b30      	subs	r3, #48	; 0x30
 80262b2:	2b09      	cmp	r3, #9
 80262b4:	d94e      	bls.n	8026354 <_vfiprintf_r+0x1c4>
 80262b6:	b1b0      	cbz	r0, 80262e6 <_vfiprintf_r+0x156>
 80262b8:	9207      	str	r2, [sp, #28]
 80262ba:	e014      	b.n	80262e6 <_vfiprintf_r+0x156>
 80262bc:	eba0 0308 	sub.w	r3, r0, r8
 80262c0:	fa09 f303 	lsl.w	r3, r9, r3
 80262c4:	4313      	orrs	r3, r2
 80262c6:	9304      	str	r3, [sp, #16]
 80262c8:	46a2      	mov	sl, r4
 80262ca:	e7d2      	b.n	8026272 <_vfiprintf_r+0xe2>
 80262cc:	9b03      	ldr	r3, [sp, #12]
 80262ce:	1d19      	adds	r1, r3, #4
 80262d0:	681b      	ldr	r3, [r3, #0]
 80262d2:	9103      	str	r1, [sp, #12]
 80262d4:	2b00      	cmp	r3, #0
 80262d6:	bfbb      	ittet	lt
 80262d8:	425b      	neglt	r3, r3
 80262da:	f042 0202 	orrlt.w	r2, r2, #2
 80262de:	9307      	strge	r3, [sp, #28]
 80262e0:	9307      	strlt	r3, [sp, #28]
 80262e2:	bfb8      	it	lt
 80262e4:	9204      	strlt	r2, [sp, #16]
 80262e6:	7823      	ldrb	r3, [r4, #0]
 80262e8:	2b2e      	cmp	r3, #46	; 0x2e
 80262ea:	d10c      	bne.n	8026306 <_vfiprintf_r+0x176>
 80262ec:	7863      	ldrb	r3, [r4, #1]
 80262ee:	2b2a      	cmp	r3, #42	; 0x2a
 80262f0:	d135      	bne.n	802635e <_vfiprintf_r+0x1ce>
 80262f2:	9b03      	ldr	r3, [sp, #12]
 80262f4:	1d1a      	adds	r2, r3, #4
 80262f6:	681b      	ldr	r3, [r3, #0]
 80262f8:	9203      	str	r2, [sp, #12]
 80262fa:	2b00      	cmp	r3, #0
 80262fc:	bfb8      	it	lt
 80262fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8026302:	3402      	adds	r4, #2
 8026304:	9305      	str	r3, [sp, #20]
 8026306:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80263ec <_vfiprintf_r+0x25c>
 802630a:	7821      	ldrb	r1, [r4, #0]
 802630c:	2203      	movs	r2, #3
 802630e:	4650      	mov	r0, sl
 8026310:	f7d9 ff9e 	bl	8000250 <memchr>
 8026314:	b140      	cbz	r0, 8026328 <_vfiprintf_r+0x198>
 8026316:	2340      	movs	r3, #64	; 0x40
 8026318:	eba0 000a 	sub.w	r0, r0, sl
 802631c:	fa03 f000 	lsl.w	r0, r3, r0
 8026320:	9b04      	ldr	r3, [sp, #16]
 8026322:	4303      	orrs	r3, r0
 8026324:	3401      	adds	r4, #1
 8026326:	9304      	str	r3, [sp, #16]
 8026328:	f814 1b01 	ldrb.w	r1, [r4], #1
 802632c:	482c      	ldr	r0, [pc, #176]	; (80263e0 <_vfiprintf_r+0x250>)
 802632e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026332:	2206      	movs	r2, #6
 8026334:	f7d9 ff8c 	bl	8000250 <memchr>
 8026338:	2800      	cmp	r0, #0
 802633a:	d03f      	beq.n	80263bc <_vfiprintf_r+0x22c>
 802633c:	4b29      	ldr	r3, [pc, #164]	; (80263e4 <_vfiprintf_r+0x254>)
 802633e:	bb1b      	cbnz	r3, 8026388 <_vfiprintf_r+0x1f8>
 8026340:	9b03      	ldr	r3, [sp, #12]
 8026342:	3307      	adds	r3, #7
 8026344:	f023 0307 	bic.w	r3, r3, #7
 8026348:	3308      	adds	r3, #8
 802634a:	9303      	str	r3, [sp, #12]
 802634c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802634e:	443b      	add	r3, r7
 8026350:	9309      	str	r3, [sp, #36]	; 0x24
 8026352:	e767      	b.n	8026224 <_vfiprintf_r+0x94>
 8026354:	fb0c 3202 	mla	r2, ip, r2, r3
 8026358:	460c      	mov	r4, r1
 802635a:	2001      	movs	r0, #1
 802635c:	e7a5      	b.n	80262aa <_vfiprintf_r+0x11a>
 802635e:	2300      	movs	r3, #0
 8026360:	3401      	adds	r4, #1
 8026362:	9305      	str	r3, [sp, #20]
 8026364:	4619      	mov	r1, r3
 8026366:	f04f 0c0a 	mov.w	ip, #10
 802636a:	4620      	mov	r0, r4
 802636c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026370:	3a30      	subs	r2, #48	; 0x30
 8026372:	2a09      	cmp	r2, #9
 8026374:	d903      	bls.n	802637e <_vfiprintf_r+0x1ee>
 8026376:	2b00      	cmp	r3, #0
 8026378:	d0c5      	beq.n	8026306 <_vfiprintf_r+0x176>
 802637a:	9105      	str	r1, [sp, #20]
 802637c:	e7c3      	b.n	8026306 <_vfiprintf_r+0x176>
 802637e:	fb0c 2101 	mla	r1, ip, r1, r2
 8026382:	4604      	mov	r4, r0
 8026384:	2301      	movs	r3, #1
 8026386:	e7f0      	b.n	802636a <_vfiprintf_r+0x1da>
 8026388:	ab03      	add	r3, sp, #12
 802638a:	9300      	str	r3, [sp, #0]
 802638c:	462a      	mov	r2, r5
 802638e:	4b16      	ldr	r3, [pc, #88]	; (80263e8 <_vfiprintf_r+0x258>)
 8026390:	a904      	add	r1, sp, #16
 8026392:	4630      	mov	r0, r6
 8026394:	f000 f8bc 	bl	8026510 <_printf_float>
 8026398:	4607      	mov	r7, r0
 802639a:	1c78      	adds	r0, r7, #1
 802639c:	d1d6      	bne.n	802634c <_vfiprintf_r+0x1bc>
 802639e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80263a0:	07d9      	lsls	r1, r3, #31
 80263a2:	d405      	bmi.n	80263b0 <_vfiprintf_r+0x220>
 80263a4:	89ab      	ldrh	r3, [r5, #12]
 80263a6:	059a      	lsls	r2, r3, #22
 80263a8:	d402      	bmi.n	80263b0 <_vfiprintf_r+0x220>
 80263aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80263ac:	f003 f9bb 	bl	8029726 <__retarget_lock_release_recursive>
 80263b0:	89ab      	ldrh	r3, [r5, #12]
 80263b2:	065b      	lsls	r3, r3, #25
 80263b4:	f53f af12 	bmi.w	80261dc <_vfiprintf_r+0x4c>
 80263b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80263ba:	e711      	b.n	80261e0 <_vfiprintf_r+0x50>
 80263bc:	ab03      	add	r3, sp, #12
 80263be:	9300      	str	r3, [sp, #0]
 80263c0:	462a      	mov	r2, r5
 80263c2:	4b09      	ldr	r3, [pc, #36]	; (80263e8 <_vfiprintf_r+0x258>)
 80263c4:	a904      	add	r1, sp, #16
 80263c6:	4630      	mov	r0, r6
 80263c8:	f000 fb2e 	bl	8026a28 <_printf_i>
 80263cc:	e7e4      	b.n	8026398 <_vfiprintf_r+0x208>
 80263ce:	bf00      	nop
 80263d0:	0802eb78 	.word	0x0802eb78
 80263d4:	0802eb98 	.word	0x0802eb98
 80263d8:	0802eb58 	.word	0x0802eb58
 80263dc:	0802e924 	.word	0x0802e924
 80263e0:	0802e92e 	.word	0x0802e92e
 80263e4:	08026511 	.word	0x08026511
 80263e8:	0802616b 	.word	0x0802616b
 80263ec:	0802e92a 	.word	0x0802e92a

080263f0 <__cvt>:
 80263f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80263f2:	ed2d 8b02 	vpush	{d8}
 80263f6:	eeb0 8b40 	vmov.f64	d8, d0
 80263fa:	b085      	sub	sp, #20
 80263fc:	4617      	mov	r7, r2
 80263fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026400:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026402:	ee18 2a90 	vmov	r2, s17
 8026406:	f025 0520 	bic.w	r5, r5, #32
 802640a:	2a00      	cmp	r2, #0
 802640c:	bfb6      	itet	lt
 802640e:	222d      	movlt	r2, #45	; 0x2d
 8026410:	2200      	movge	r2, #0
 8026412:	eeb1 8b40 	vneglt.f64	d8, d0
 8026416:	2d46      	cmp	r5, #70	; 0x46
 8026418:	460c      	mov	r4, r1
 802641a:	701a      	strb	r2, [r3, #0]
 802641c:	d004      	beq.n	8026428 <__cvt+0x38>
 802641e:	2d45      	cmp	r5, #69	; 0x45
 8026420:	d100      	bne.n	8026424 <__cvt+0x34>
 8026422:	3401      	adds	r4, #1
 8026424:	2102      	movs	r1, #2
 8026426:	e000      	b.n	802642a <__cvt+0x3a>
 8026428:	2103      	movs	r1, #3
 802642a:	ab03      	add	r3, sp, #12
 802642c:	9301      	str	r3, [sp, #4]
 802642e:	ab02      	add	r3, sp, #8
 8026430:	9300      	str	r3, [sp, #0]
 8026432:	4622      	mov	r2, r4
 8026434:	4633      	mov	r3, r6
 8026436:	eeb0 0b48 	vmov.f64	d0, d8
 802643a:	f001 fec5 	bl	80281c8 <_dtoa_r>
 802643e:	2d47      	cmp	r5, #71	; 0x47
 8026440:	d109      	bne.n	8026456 <__cvt+0x66>
 8026442:	07fb      	lsls	r3, r7, #31
 8026444:	d407      	bmi.n	8026456 <__cvt+0x66>
 8026446:	9b03      	ldr	r3, [sp, #12]
 8026448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802644a:	1a1b      	subs	r3, r3, r0
 802644c:	6013      	str	r3, [r2, #0]
 802644e:	b005      	add	sp, #20
 8026450:	ecbd 8b02 	vpop	{d8}
 8026454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026456:	2d46      	cmp	r5, #70	; 0x46
 8026458:	eb00 0204 	add.w	r2, r0, r4
 802645c:	d10c      	bne.n	8026478 <__cvt+0x88>
 802645e:	7803      	ldrb	r3, [r0, #0]
 8026460:	2b30      	cmp	r3, #48	; 0x30
 8026462:	d107      	bne.n	8026474 <__cvt+0x84>
 8026464:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802646c:	bf1c      	itt	ne
 802646e:	f1c4 0401 	rsbne	r4, r4, #1
 8026472:	6034      	strne	r4, [r6, #0]
 8026474:	6833      	ldr	r3, [r6, #0]
 8026476:	441a      	add	r2, r3
 8026478:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802647c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026480:	bf08      	it	eq
 8026482:	9203      	streq	r2, [sp, #12]
 8026484:	2130      	movs	r1, #48	; 0x30
 8026486:	9b03      	ldr	r3, [sp, #12]
 8026488:	4293      	cmp	r3, r2
 802648a:	d2dc      	bcs.n	8026446 <__cvt+0x56>
 802648c:	1c5c      	adds	r4, r3, #1
 802648e:	9403      	str	r4, [sp, #12]
 8026490:	7019      	strb	r1, [r3, #0]
 8026492:	e7f8      	b.n	8026486 <__cvt+0x96>

08026494 <__exponent>:
 8026494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026496:	4603      	mov	r3, r0
 8026498:	2900      	cmp	r1, #0
 802649a:	bfb8      	it	lt
 802649c:	4249      	neglt	r1, r1
 802649e:	f803 2b02 	strb.w	r2, [r3], #2
 80264a2:	bfb4      	ite	lt
 80264a4:	222d      	movlt	r2, #45	; 0x2d
 80264a6:	222b      	movge	r2, #43	; 0x2b
 80264a8:	2909      	cmp	r1, #9
 80264aa:	7042      	strb	r2, [r0, #1]
 80264ac:	dd2a      	ble.n	8026504 <__exponent+0x70>
 80264ae:	f10d 0407 	add.w	r4, sp, #7
 80264b2:	46a4      	mov	ip, r4
 80264b4:	270a      	movs	r7, #10
 80264b6:	46a6      	mov	lr, r4
 80264b8:	460a      	mov	r2, r1
 80264ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80264be:	fb07 1516 	mls	r5, r7, r6, r1
 80264c2:	3530      	adds	r5, #48	; 0x30
 80264c4:	2a63      	cmp	r2, #99	; 0x63
 80264c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80264ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80264ce:	4631      	mov	r1, r6
 80264d0:	dcf1      	bgt.n	80264b6 <__exponent+0x22>
 80264d2:	3130      	adds	r1, #48	; 0x30
 80264d4:	f1ae 0502 	sub.w	r5, lr, #2
 80264d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80264dc:	1c44      	adds	r4, r0, #1
 80264de:	4629      	mov	r1, r5
 80264e0:	4561      	cmp	r1, ip
 80264e2:	d30a      	bcc.n	80264fa <__exponent+0x66>
 80264e4:	f10d 0209 	add.w	r2, sp, #9
 80264e8:	eba2 020e 	sub.w	r2, r2, lr
 80264ec:	4565      	cmp	r5, ip
 80264ee:	bf88      	it	hi
 80264f0:	2200      	movhi	r2, #0
 80264f2:	4413      	add	r3, r2
 80264f4:	1a18      	subs	r0, r3, r0
 80264f6:	b003      	add	sp, #12
 80264f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80264fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80264fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8026502:	e7ed      	b.n	80264e0 <__exponent+0x4c>
 8026504:	2330      	movs	r3, #48	; 0x30
 8026506:	3130      	adds	r1, #48	; 0x30
 8026508:	7083      	strb	r3, [r0, #2]
 802650a:	70c1      	strb	r1, [r0, #3]
 802650c:	1d03      	adds	r3, r0, #4
 802650e:	e7f1      	b.n	80264f4 <__exponent+0x60>

08026510 <_printf_float>:
 8026510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026514:	b08b      	sub	sp, #44	; 0x2c
 8026516:	460c      	mov	r4, r1
 8026518:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802651c:	4616      	mov	r6, r2
 802651e:	461f      	mov	r7, r3
 8026520:	4605      	mov	r5, r0
 8026522:	f003 f8f9 	bl	8029718 <_localeconv_r>
 8026526:	f8d0 b000 	ldr.w	fp, [r0]
 802652a:	4658      	mov	r0, fp
 802652c:	f7d9 fe88 	bl	8000240 <strlen>
 8026530:	2300      	movs	r3, #0
 8026532:	9308      	str	r3, [sp, #32]
 8026534:	f8d8 3000 	ldr.w	r3, [r8]
 8026538:	f894 9018 	ldrb.w	r9, [r4, #24]
 802653c:	6822      	ldr	r2, [r4, #0]
 802653e:	3307      	adds	r3, #7
 8026540:	f023 0307 	bic.w	r3, r3, #7
 8026544:	f103 0108 	add.w	r1, r3, #8
 8026548:	f8c8 1000 	str.w	r1, [r8]
 802654c:	4682      	mov	sl, r0
 802654e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026552:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8026556:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80267b8 <_printf_float+0x2a8>
 802655a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802655e:	eeb0 6bc0 	vabs.f64	d6, d0
 8026562:	eeb4 6b47 	vcmp.f64	d6, d7
 8026566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802656a:	dd24      	ble.n	80265b6 <_printf_float+0xa6>
 802656c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026574:	d502      	bpl.n	802657c <_printf_float+0x6c>
 8026576:	232d      	movs	r3, #45	; 0x2d
 8026578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802657c:	4b90      	ldr	r3, [pc, #576]	; (80267c0 <_printf_float+0x2b0>)
 802657e:	4891      	ldr	r0, [pc, #580]	; (80267c4 <_printf_float+0x2b4>)
 8026580:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8026584:	bf94      	ite	ls
 8026586:	4698      	movls	r8, r3
 8026588:	4680      	movhi	r8, r0
 802658a:	2303      	movs	r3, #3
 802658c:	6123      	str	r3, [r4, #16]
 802658e:	f022 0204 	bic.w	r2, r2, #4
 8026592:	2300      	movs	r3, #0
 8026594:	6022      	str	r2, [r4, #0]
 8026596:	9304      	str	r3, [sp, #16]
 8026598:	9700      	str	r7, [sp, #0]
 802659a:	4633      	mov	r3, r6
 802659c:	aa09      	add	r2, sp, #36	; 0x24
 802659e:	4621      	mov	r1, r4
 80265a0:	4628      	mov	r0, r5
 80265a2:	f000 f9d3 	bl	802694c <_printf_common>
 80265a6:	3001      	adds	r0, #1
 80265a8:	f040 808a 	bne.w	80266c0 <_printf_float+0x1b0>
 80265ac:	f04f 30ff 	mov.w	r0, #4294967295
 80265b0:	b00b      	add	sp, #44	; 0x2c
 80265b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80265ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265be:	d709      	bvc.n	80265d4 <_printf_float+0xc4>
 80265c0:	ee10 3a90 	vmov	r3, s1
 80265c4:	2b00      	cmp	r3, #0
 80265c6:	bfbc      	itt	lt
 80265c8:	232d      	movlt	r3, #45	; 0x2d
 80265ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80265ce:	487e      	ldr	r0, [pc, #504]	; (80267c8 <_printf_float+0x2b8>)
 80265d0:	4b7e      	ldr	r3, [pc, #504]	; (80267cc <_printf_float+0x2bc>)
 80265d2:	e7d5      	b.n	8026580 <_printf_float+0x70>
 80265d4:	6863      	ldr	r3, [r4, #4]
 80265d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80265da:	9104      	str	r1, [sp, #16]
 80265dc:	1c59      	adds	r1, r3, #1
 80265de:	d13c      	bne.n	802665a <_printf_float+0x14a>
 80265e0:	2306      	movs	r3, #6
 80265e2:	6063      	str	r3, [r4, #4]
 80265e4:	2300      	movs	r3, #0
 80265e6:	9303      	str	r3, [sp, #12]
 80265e8:	ab08      	add	r3, sp, #32
 80265ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80265ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80265f2:	ab07      	add	r3, sp, #28
 80265f4:	6861      	ldr	r1, [r4, #4]
 80265f6:	9300      	str	r3, [sp, #0]
 80265f8:	6022      	str	r2, [r4, #0]
 80265fa:	f10d 031b 	add.w	r3, sp, #27
 80265fe:	4628      	mov	r0, r5
 8026600:	f7ff fef6 	bl	80263f0 <__cvt>
 8026604:	9b04      	ldr	r3, [sp, #16]
 8026606:	9907      	ldr	r1, [sp, #28]
 8026608:	2b47      	cmp	r3, #71	; 0x47
 802660a:	4680      	mov	r8, r0
 802660c:	d108      	bne.n	8026620 <_printf_float+0x110>
 802660e:	1cc8      	adds	r0, r1, #3
 8026610:	db02      	blt.n	8026618 <_printf_float+0x108>
 8026612:	6863      	ldr	r3, [r4, #4]
 8026614:	4299      	cmp	r1, r3
 8026616:	dd41      	ble.n	802669c <_printf_float+0x18c>
 8026618:	f1a9 0902 	sub.w	r9, r9, #2
 802661c:	fa5f f989 	uxtb.w	r9, r9
 8026620:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8026624:	d820      	bhi.n	8026668 <_printf_float+0x158>
 8026626:	3901      	subs	r1, #1
 8026628:	464a      	mov	r2, r9
 802662a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802662e:	9107      	str	r1, [sp, #28]
 8026630:	f7ff ff30 	bl	8026494 <__exponent>
 8026634:	9a08      	ldr	r2, [sp, #32]
 8026636:	9004      	str	r0, [sp, #16]
 8026638:	1813      	adds	r3, r2, r0
 802663a:	2a01      	cmp	r2, #1
 802663c:	6123      	str	r3, [r4, #16]
 802663e:	dc02      	bgt.n	8026646 <_printf_float+0x136>
 8026640:	6822      	ldr	r2, [r4, #0]
 8026642:	07d2      	lsls	r2, r2, #31
 8026644:	d501      	bpl.n	802664a <_printf_float+0x13a>
 8026646:	3301      	adds	r3, #1
 8026648:	6123      	str	r3, [r4, #16]
 802664a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802664e:	2b00      	cmp	r3, #0
 8026650:	d0a2      	beq.n	8026598 <_printf_float+0x88>
 8026652:	232d      	movs	r3, #45	; 0x2d
 8026654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026658:	e79e      	b.n	8026598 <_printf_float+0x88>
 802665a:	9904      	ldr	r1, [sp, #16]
 802665c:	2947      	cmp	r1, #71	; 0x47
 802665e:	d1c1      	bne.n	80265e4 <_printf_float+0xd4>
 8026660:	2b00      	cmp	r3, #0
 8026662:	d1bf      	bne.n	80265e4 <_printf_float+0xd4>
 8026664:	2301      	movs	r3, #1
 8026666:	e7bc      	b.n	80265e2 <_printf_float+0xd2>
 8026668:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802666c:	d118      	bne.n	80266a0 <_printf_float+0x190>
 802666e:	2900      	cmp	r1, #0
 8026670:	6863      	ldr	r3, [r4, #4]
 8026672:	dd0b      	ble.n	802668c <_printf_float+0x17c>
 8026674:	6121      	str	r1, [r4, #16]
 8026676:	b913      	cbnz	r3, 802667e <_printf_float+0x16e>
 8026678:	6822      	ldr	r2, [r4, #0]
 802667a:	07d0      	lsls	r0, r2, #31
 802667c:	d502      	bpl.n	8026684 <_printf_float+0x174>
 802667e:	3301      	adds	r3, #1
 8026680:	440b      	add	r3, r1
 8026682:	6123      	str	r3, [r4, #16]
 8026684:	2300      	movs	r3, #0
 8026686:	65a1      	str	r1, [r4, #88]	; 0x58
 8026688:	9304      	str	r3, [sp, #16]
 802668a:	e7de      	b.n	802664a <_printf_float+0x13a>
 802668c:	b913      	cbnz	r3, 8026694 <_printf_float+0x184>
 802668e:	6822      	ldr	r2, [r4, #0]
 8026690:	07d2      	lsls	r2, r2, #31
 8026692:	d501      	bpl.n	8026698 <_printf_float+0x188>
 8026694:	3302      	adds	r3, #2
 8026696:	e7f4      	b.n	8026682 <_printf_float+0x172>
 8026698:	2301      	movs	r3, #1
 802669a:	e7f2      	b.n	8026682 <_printf_float+0x172>
 802669c:	f04f 0967 	mov.w	r9, #103	; 0x67
 80266a0:	9b08      	ldr	r3, [sp, #32]
 80266a2:	4299      	cmp	r1, r3
 80266a4:	db05      	blt.n	80266b2 <_printf_float+0x1a2>
 80266a6:	6823      	ldr	r3, [r4, #0]
 80266a8:	6121      	str	r1, [r4, #16]
 80266aa:	07d8      	lsls	r0, r3, #31
 80266ac:	d5ea      	bpl.n	8026684 <_printf_float+0x174>
 80266ae:	1c4b      	adds	r3, r1, #1
 80266b0:	e7e7      	b.n	8026682 <_printf_float+0x172>
 80266b2:	2900      	cmp	r1, #0
 80266b4:	bfd4      	ite	le
 80266b6:	f1c1 0202 	rsble	r2, r1, #2
 80266ba:	2201      	movgt	r2, #1
 80266bc:	4413      	add	r3, r2
 80266be:	e7e0      	b.n	8026682 <_printf_float+0x172>
 80266c0:	6823      	ldr	r3, [r4, #0]
 80266c2:	055a      	lsls	r2, r3, #21
 80266c4:	d407      	bmi.n	80266d6 <_printf_float+0x1c6>
 80266c6:	6923      	ldr	r3, [r4, #16]
 80266c8:	4642      	mov	r2, r8
 80266ca:	4631      	mov	r1, r6
 80266cc:	4628      	mov	r0, r5
 80266ce:	47b8      	blx	r7
 80266d0:	3001      	adds	r0, #1
 80266d2:	d12a      	bne.n	802672a <_printf_float+0x21a>
 80266d4:	e76a      	b.n	80265ac <_printf_float+0x9c>
 80266d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80266da:	f240 80e2 	bls.w	80268a2 <_printf_float+0x392>
 80266de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80266e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80266e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266ea:	d133      	bne.n	8026754 <_printf_float+0x244>
 80266ec:	4a38      	ldr	r2, [pc, #224]	; (80267d0 <_printf_float+0x2c0>)
 80266ee:	2301      	movs	r3, #1
 80266f0:	4631      	mov	r1, r6
 80266f2:	4628      	mov	r0, r5
 80266f4:	47b8      	blx	r7
 80266f6:	3001      	adds	r0, #1
 80266f8:	f43f af58 	beq.w	80265ac <_printf_float+0x9c>
 80266fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026700:	429a      	cmp	r2, r3
 8026702:	db02      	blt.n	802670a <_printf_float+0x1fa>
 8026704:	6823      	ldr	r3, [r4, #0]
 8026706:	07d8      	lsls	r0, r3, #31
 8026708:	d50f      	bpl.n	802672a <_printf_float+0x21a>
 802670a:	4653      	mov	r3, sl
 802670c:	465a      	mov	r2, fp
 802670e:	4631      	mov	r1, r6
 8026710:	4628      	mov	r0, r5
 8026712:	47b8      	blx	r7
 8026714:	3001      	adds	r0, #1
 8026716:	f43f af49 	beq.w	80265ac <_printf_float+0x9c>
 802671a:	f04f 0800 	mov.w	r8, #0
 802671e:	f104 091a 	add.w	r9, r4, #26
 8026722:	9b08      	ldr	r3, [sp, #32]
 8026724:	3b01      	subs	r3, #1
 8026726:	4543      	cmp	r3, r8
 8026728:	dc09      	bgt.n	802673e <_printf_float+0x22e>
 802672a:	6823      	ldr	r3, [r4, #0]
 802672c:	079b      	lsls	r3, r3, #30
 802672e:	f100 8108 	bmi.w	8026942 <_printf_float+0x432>
 8026732:	68e0      	ldr	r0, [r4, #12]
 8026734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026736:	4298      	cmp	r0, r3
 8026738:	bfb8      	it	lt
 802673a:	4618      	movlt	r0, r3
 802673c:	e738      	b.n	80265b0 <_printf_float+0xa0>
 802673e:	2301      	movs	r3, #1
 8026740:	464a      	mov	r2, r9
 8026742:	4631      	mov	r1, r6
 8026744:	4628      	mov	r0, r5
 8026746:	47b8      	blx	r7
 8026748:	3001      	adds	r0, #1
 802674a:	f43f af2f 	beq.w	80265ac <_printf_float+0x9c>
 802674e:	f108 0801 	add.w	r8, r8, #1
 8026752:	e7e6      	b.n	8026722 <_printf_float+0x212>
 8026754:	9b07      	ldr	r3, [sp, #28]
 8026756:	2b00      	cmp	r3, #0
 8026758:	dc3c      	bgt.n	80267d4 <_printf_float+0x2c4>
 802675a:	4a1d      	ldr	r2, [pc, #116]	; (80267d0 <_printf_float+0x2c0>)
 802675c:	2301      	movs	r3, #1
 802675e:	4631      	mov	r1, r6
 8026760:	4628      	mov	r0, r5
 8026762:	47b8      	blx	r7
 8026764:	3001      	adds	r0, #1
 8026766:	f43f af21 	beq.w	80265ac <_printf_float+0x9c>
 802676a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802676e:	4313      	orrs	r3, r2
 8026770:	d102      	bne.n	8026778 <_printf_float+0x268>
 8026772:	6823      	ldr	r3, [r4, #0]
 8026774:	07d9      	lsls	r1, r3, #31
 8026776:	d5d8      	bpl.n	802672a <_printf_float+0x21a>
 8026778:	4653      	mov	r3, sl
 802677a:	465a      	mov	r2, fp
 802677c:	4631      	mov	r1, r6
 802677e:	4628      	mov	r0, r5
 8026780:	47b8      	blx	r7
 8026782:	3001      	adds	r0, #1
 8026784:	f43f af12 	beq.w	80265ac <_printf_float+0x9c>
 8026788:	f04f 0900 	mov.w	r9, #0
 802678c:	f104 0a1a 	add.w	sl, r4, #26
 8026790:	9b07      	ldr	r3, [sp, #28]
 8026792:	425b      	negs	r3, r3
 8026794:	454b      	cmp	r3, r9
 8026796:	dc01      	bgt.n	802679c <_printf_float+0x28c>
 8026798:	9b08      	ldr	r3, [sp, #32]
 802679a:	e795      	b.n	80266c8 <_printf_float+0x1b8>
 802679c:	2301      	movs	r3, #1
 802679e:	4652      	mov	r2, sl
 80267a0:	4631      	mov	r1, r6
 80267a2:	4628      	mov	r0, r5
 80267a4:	47b8      	blx	r7
 80267a6:	3001      	adds	r0, #1
 80267a8:	f43f af00 	beq.w	80265ac <_printf_float+0x9c>
 80267ac:	f109 0901 	add.w	r9, r9, #1
 80267b0:	e7ee      	b.n	8026790 <_printf_float+0x280>
 80267b2:	bf00      	nop
 80267b4:	f3af 8000 	nop.w
 80267b8:	ffffffff 	.word	0xffffffff
 80267bc:	7fefffff 	.word	0x7fefffff
 80267c0:	0802e935 	.word	0x0802e935
 80267c4:	0802e939 	.word	0x0802e939
 80267c8:	0802e941 	.word	0x0802e941
 80267cc:	0802e93d 	.word	0x0802e93d
 80267d0:	0802dc4a 	.word	0x0802dc4a
 80267d4:	9a08      	ldr	r2, [sp, #32]
 80267d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80267d8:	429a      	cmp	r2, r3
 80267da:	bfa8      	it	ge
 80267dc:	461a      	movge	r2, r3
 80267de:	2a00      	cmp	r2, #0
 80267e0:	4691      	mov	r9, r2
 80267e2:	dc38      	bgt.n	8026856 <_printf_float+0x346>
 80267e4:	2300      	movs	r3, #0
 80267e6:	9305      	str	r3, [sp, #20]
 80267e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80267ec:	f104 021a 	add.w	r2, r4, #26
 80267f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80267f2:	9905      	ldr	r1, [sp, #20]
 80267f4:	9304      	str	r3, [sp, #16]
 80267f6:	eba3 0309 	sub.w	r3, r3, r9
 80267fa:	428b      	cmp	r3, r1
 80267fc:	dc33      	bgt.n	8026866 <_printf_float+0x356>
 80267fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026802:	429a      	cmp	r2, r3
 8026804:	db3c      	blt.n	8026880 <_printf_float+0x370>
 8026806:	6823      	ldr	r3, [r4, #0]
 8026808:	07da      	lsls	r2, r3, #31
 802680a:	d439      	bmi.n	8026880 <_printf_float+0x370>
 802680c:	9a08      	ldr	r2, [sp, #32]
 802680e:	9b04      	ldr	r3, [sp, #16]
 8026810:	9907      	ldr	r1, [sp, #28]
 8026812:	1ad3      	subs	r3, r2, r3
 8026814:	eba2 0901 	sub.w	r9, r2, r1
 8026818:	4599      	cmp	r9, r3
 802681a:	bfa8      	it	ge
 802681c:	4699      	movge	r9, r3
 802681e:	f1b9 0f00 	cmp.w	r9, #0
 8026822:	dc35      	bgt.n	8026890 <_printf_float+0x380>
 8026824:	f04f 0800 	mov.w	r8, #0
 8026828:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802682c:	f104 0a1a 	add.w	sl, r4, #26
 8026830:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026834:	1a9b      	subs	r3, r3, r2
 8026836:	eba3 0309 	sub.w	r3, r3, r9
 802683a:	4543      	cmp	r3, r8
 802683c:	f77f af75 	ble.w	802672a <_printf_float+0x21a>
 8026840:	2301      	movs	r3, #1
 8026842:	4652      	mov	r2, sl
 8026844:	4631      	mov	r1, r6
 8026846:	4628      	mov	r0, r5
 8026848:	47b8      	blx	r7
 802684a:	3001      	adds	r0, #1
 802684c:	f43f aeae 	beq.w	80265ac <_printf_float+0x9c>
 8026850:	f108 0801 	add.w	r8, r8, #1
 8026854:	e7ec      	b.n	8026830 <_printf_float+0x320>
 8026856:	4613      	mov	r3, r2
 8026858:	4631      	mov	r1, r6
 802685a:	4642      	mov	r2, r8
 802685c:	4628      	mov	r0, r5
 802685e:	47b8      	blx	r7
 8026860:	3001      	adds	r0, #1
 8026862:	d1bf      	bne.n	80267e4 <_printf_float+0x2d4>
 8026864:	e6a2      	b.n	80265ac <_printf_float+0x9c>
 8026866:	2301      	movs	r3, #1
 8026868:	4631      	mov	r1, r6
 802686a:	4628      	mov	r0, r5
 802686c:	9204      	str	r2, [sp, #16]
 802686e:	47b8      	blx	r7
 8026870:	3001      	adds	r0, #1
 8026872:	f43f ae9b 	beq.w	80265ac <_printf_float+0x9c>
 8026876:	9b05      	ldr	r3, [sp, #20]
 8026878:	9a04      	ldr	r2, [sp, #16]
 802687a:	3301      	adds	r3, #1
 802687c:	9305      	str	r3, [sp, #20]
 802687e:	e7b7      	b.n	80267f0 <_printf_float+0x2e0>
 8026880:	4653      	mov	r3, sl
 8026882:	465a      	mov	r2, fp
 8026884:	4631      	mov	r1, r6
 8026886:	4628      	mov	r0, r5
 8026888:	47b8      	blx	r7
 802688a:	3001      	adds	r0, #1
 802688c:	d1be      	bne.n	802680c <_printf_float+0x2fc>
 802688e:	e68d      	b.n	80265ac <_printf_float+0x9c>
 8026890:	9a04      	ldr	r2, [sp, #16]
 8026892:	464b      	mov	r3, r9
 8026894:	4442      	add	r2, r8
 8026896:	4631      	mov	r1, r6
 8026898:	4628      	mov	r0, r5
 802689a:	47b8      	blx	r7
 802689c:	3001      	adds	r0, #1
 802689e:	d1c1      	bne.n	8026824 <_printf_float+0x314>
 80268a0:	e684      	b.n	80265ac <_printf_float+0x9c>
 80268a2:	9a08      	ldr	r2, [sp, #32]
 80268a4:	2a01      	cmp	r2, #1
 80268a6:	dc01      	bgt.n	80268ac <_printf_float+0x39c>
 80268a8:	07db      	lsls	r3, r3, #31
 80268aa:	d537      	bpl.n	802691c <_printf_float+0x40c>
 80268ac:	2301      	movs	r3, #1
 80268ae:	4642      	mov	r2, r8
 80268b0:	4631      	mov	r1, r6
 80268b2:	4628      	mov	r0, r5
 80268b4:	47b8      	blx	r7
 80268b6:	3001      	adds	r0, #1
 80268b8:	f43f ae78 	beq.w	80265ac <_printf_float+0x9c>
 80268bc:	4653      	mov	r3, sl
 80268be:	465a      	mov	r2, fp
 80268c0:	4631      	mov	r1, r6
 80268c2:	4628      	mov	r0, r5
 80268c4:	47b8      	blx	r7
 80268c6:	3001      	adds	r0, #1
 80268c8:	f43f ae70 	beq.w	80265ac <_printf_float+0x9c>
 80268cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80268d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80268d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268d8:	d01b      	beq.n	8026912 <_printf_float+0x402>
 80268da:	9b08      	ldr	r3, [sp, #32]
 80268dc:	f108 0201 	add.w	r2, r8, #1
 80268e0:	3b01      	subs	r3, #1
 80268e2:	4631      	mov	r1, r6
 80268e4:	4628      	mov	r0, r5
 80268e6:	47b8      	blx	r7
 80268e8:	3001      	adds	r0, #1
 80268ea:	d10e      	bne.n	802690a <_printf_float+0x3fa>
 80268ec:	e65e      	b.n	80265ac <_printf_float+0x9c>
 80268ee:	2301      	movs	r3, #1
 80268f0:	464a      	mov	r2, r9
 80268f2:	4631      	mov	r1, r6
 80268f4:	4628      	mov	r0, r5
 80268f6:	47b8      	blx	r7
 80268f8:	3001      	adds	r0, #1
 80268fa:	f43f ae57 	beq.w	80265ac <_printf_float+0x9c>
 80268fe:	f108 0801 	add.w	r8, r8, #1
 8026902:	9b08      	ldr	r3, [sp, #32]
 8026904:	3b01      	subs	r3, #1
 8026906:	4543      	cmp	r3, r8
 8026908:	dcf1      	bgt.n	80268ee <_printf_float+0x3de>
 802690a:	9b04      	ldr	r3, [sp, #16]
 802690c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8026910:	e6db      	b.n	80266ca <_printf_float+0x1ba>
 8026912:	f04f 0800 	mov.w	r8, #0
 8026916:	f104 091a 	add.w	r9, r4, #26
 802691a:	e7f2      	b.n	8026902 <_printf_float+0x3f2>
 802691c:	2301      	movs	r3, #1
 802691e:	4642      	mov	r2, r8
 8026920:	e7df      	b.n	80268e2 <_printf_float+0x3d2>
 8026922:	2301      	movs	r3, #1
 8026924:	464a      	mov	r2, r9
 8026926:	4631      	mov	r1, r6
 8026928:	4628      	mov	r0, r5
 802692a:	47b8      	blx	r7
 802692c:	3001      	adds	r0, #1
 802692e:	f43f ae3d 	beq.w	80265ac <_printf_float+0x9c>
 8026932:	f108 0801 	add.w	r8, r8, #1
 8026936:	68e3      	ldr	r3, [r4, #12]
 8026938:	9909      	ldr	r1, [sp, #36]	; 0x24
 802693a:	1a5b      	subs	r3, r3, r1
 802693c:	4543      	cmp	r3, r8
 802693e:	dcf0      	bgt.n	8026922 <_printf_float+0x412>
 8026940:	e6f7      	b.n	8026732 <_printf_float+0x222>
 8026942:	f04f 0800 	mov.w	r8, #0
 8026946:	f104 0919 	add.w	r9, r4, #25
 802694a:	e7f4      	b.n	8026936 <_printf_float+0x426>

0802694c <_printf_common>:
 802694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026950:	4616      	mov	r6, r2
 8026952:	4699      	mov	r9, r3
 8026954:	688a      	ldr	r2, [r1, #8]
 8026956:	690b      	ldr	r3, [r1, #16]
 8026958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802695c:	4293      	cmp	r3, r2
 802695e:	bfb8      	it	lt
 8026960:	4613      	movlt	r3, r2
 8026962:	6033      	str	r3, [r6, #0]
 8026964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026968:	4607      	mov	r7, r0
 802696a:	460c      	mov	r4, r1
 802696c:	b10a      	cbz	r2, 8026972 <_printf_common+0x26>
 802696e:	3301      	adds	r3, #1
 8026970:	6033      	str	r3, [r6, #0]
 8026972:	6823      	ldr	r3, [r4, #0]
 8026974:	0699      	lsls	r1, r3, #26
 8026976:	bf42      	ittt	mi
 8026978:	6833      	ldrmi	r3, [r6, #0]
 802697a:	3302      	addmi	r3, #2
 802697c:	6033      	strmi	r3, [r6, #0]
 802697e:	6825      	ldr	r5, [r4, #0]
 8026980:	f015 0506 	ands.w	r5, r5, #6
 8026984:	d106      	bne.n	8026994 <_printf_common+0x48>
 8026986:	f104 0a19 	add.w	sl, r4, #25
 802698a:	68e3      	ldr	r3, [r4, #12]
 802698c:	6832      	ldr	r2, [r6, #0]
 802698e:	1a9b      	subs	r3, r3, r2
 8026990:	42ab      	cmp	r3, r5
 8026992:	dc26      	bgt.n	80269e2 <_printf_common+0x96>
 8026994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026998:	1e13      	subs	r3, r2, #0
 802699a:	6822      	ldr	r2, [r4, #0]
 802699c:	bf18      	it	ne
 802699e:	2301      	movne	r3, #1
 80269a0:	0692      	lsls	r2, r2, #26
 80269a2:	d42b      	bmi.n	80269fc <_printf_common+0xb0>
 80269a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80269a8:	4649      	mov	r1, r9
 80269aa:	4638      	mov	r0, r7
 80269ac:	47c0      	blx	r8
 80269ae:	3001      	adds	r0, #1
 80269b0:	d01e      	beq.n	80269f0 <_printf_common+0xa4>
 80269b2:	6823      	ldr	r3, [r4, #0]
 80269b4:	68e5      	ldr	r5, [r4, #12]
 80269b6:	6832      	ldr	r2, [r6, #0]
 80269b8:	f003 0306 	and.w	r3, r3, #6
 80269bc:	2b04      	cmp	r3, #4
 80269be:	bf08      	it	eq
 80269c0:	1aad      	subeq	r5, r5, r2
 80269c2:	68a3      	ldr	r3, [r4, #8]
 80269c4:	6922      	ldr	r2, [r4, #16]
 80269c6:	bf0c      	ite	eq
 80269c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80269cc:	2500      	movne	r5, #0
 80269ce:	4293      	cmp	r3, r2
 80269d0:	bfc4      	itt	gt
 80269d2:	1a9b      	subgt	r3, r3, r2
 80269d4:	18ed      	addgt	r5, r5, r3
 80269d6:	2600      	movs	r6, #0
 80269d8:	341a      	adds	r4, #26
 80269da:	42b5      	cmp	r5, r6
 80269dc:	d11a      	bne.n	8026a14 <_printf_common+0xc8>
 80269de:	2000      	movs	r0, #0
 80269e0:	e008      	b.n	80269f4 <_printf_common+0xa8>
 80269e2:	2301      	movs	r3, #1
 80269e4:	4652      	mov	r2, sl
 80269e6:	4649      	mov	r1, r9
 80269e8:	4638      	mov	r0, r7
 80269ea:	47c0      	blx	r8
 80269ec:	3001      	adds	r0, #1
 80269ee:	d103      	bne.n	80269f8 <_printf_common+0xac>
 80269f0:	f04f 30ff 	mov.w	r0, #4294967295
 80269f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80269f8:	3501      	adds	r5, #1
 80269fa:	e7c6      	b.n	802698a <_printf_common+0x3e>
 80269fc:	18e1      	adds	r1, r4, r3
 80269fe:	1c5a      	adds	r2, r3, #1
 8026a00:	2030      	movs	r0, #48	; 0x30
 8026a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026a06:	4422      	add	r2, r4
 8026a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026a10:	3302      	adds	r3, #2
 8026a12:	e7c7      	b.n	80269a4 <_printf_common+0x58>
 8026a14:	2301      	movs	r3, #1
 8026a16:	4622      	mov	r2, r4
 8026a18:	4649      	mov	r1, r9
 8026a1a:	4638      	mov	r0, r7
 8026a1c:	47c0      	blx	r8
 8026a1e:	3001      	adds	r0, #1
 8026a20:	d0e6      	beq.n	80269f0 <_printf_common+0xa4>
 8026a22:	3601      	adds	r6, #1
 8026a24:	e7d9      	b.n	80269da <_printf_common+0x8e>
	...

08026a28 <_printf_i>:
 8026a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026a2c:	460c      	mov	r4, r1
 8026a2e:	4691      	mov	r9, r2
 8026a30:	7e27      	ldrb	r7, [r4, #24]
 8026a32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026a34:	2f78      	cmp	r7, #120	; 0x78
 8026a36:	4680      	mov	r8, r0
 8026a38:	469a      	mov	sl, r3
 8026a3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026a3e:	d807      	bhi.n	8026a50 <_printf_i+0x28>
 8026a40:	2f62      	cmp	r7, #98	; 0x62
 8026a42:	d80a      	bhi.n	8026a5a <_printf_i+0x32>
 8026a44:	2f00      	cmp	r7, #0
 8026a46:	f000 80d8 	beq.w	8026bfa <_printf_i+0x1d2>
 8026a4a:	2f58      	cmp	r7, #88	; 0x58
 8026a4c:	f000 80a3 	beq.w	8026b96 <_printf_i+0x16e>
 8026a50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026a58:	e03a      	b.n	8026ad0 <_printf_i+0xa8>
 8026a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026a5e:	2b15      	cmp	r3, #21
 8026a60:	d8f6      	bhi.n	8026a50 <_printf_i+0x28>
 8026a62:	a001      	add	r0, pc, #4	; (adr r0, 8026a68 <_printf_i+0x40>)
 8026a64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8026a68:	08026ac1 	.word	0x08026ac1
 8026a6c:	08026ad5 	.word	0x08026ad5
 8026a70:	08026a51 	.word	0x08026a51
 8026a74:	08026a51 	.word	0x08026a51
 8026a78:	08026a51 	.word	0x08026a51
 8026a7c:	08026a51 	.word	0x08026a51
 8026a80:	08026ad5 	.word	0x08026ad5
 8026a84:	08026a51 	.word	0x08026a51
 8026a88:	08026a51 	.word	0x08026a51
 8026a8c:	08026a51 	.word	0x08026a51
 8026a90:	08026a51 	.word	0x08026a51
 8026a94:	08026be1 	.word	0x08026be1
 8026a98:	08026b05 	.word	0x08026b05
 8026a9c:	08026bc3 	.word	0x08026bc3
 8026aa0:	08026a51 	.word	0x08026a51
 8026aa4:	08026a51 	.word	0x08026a51
 8026aa8:	08026c03 	.word	0x08026c03
 8026aac:	08026a51 	.word	0x08026a51
 8026ab0:	08026b05 	.word	0x08026b05
 8026ab4:	08026a51 	.word	0x08026a51
 8026ab8:	08026a51 	.word	0x08026a51
 8026abc:	08026bcb 	.word	0x08026bcb
 8026ac0:	680b      	ldr	r3, [r1, #0]
 8026ac2:	1d1a      	adds	r2, r3, #4
 8026ac4:	681b      	ldr	r3, [r3, #0]
 8026ac6:	600a      	str	r2, [r1, #0]
 8026ac8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026ad0:	2301      	movs	r3, #1
 8026ad2:	e0a3      	b.n	8026c1c <_printf_i+0x1f4>
 8026ad4:	6825      	ldr	r5, [r4, #0]
 8026ad6:	6808      	ldr	r0, [r1, #0]
 8026ad8:	062e      	lsls	r6, r5, #24
 8026ada:	f100 0304 	add.w	r3, r0, #4
 8026ade:	d50a      	bpl.n	8026af6 <_printf_i+0xce>
 8026ae0:	6805      	ldr	r5, [r0, #0]
 8026ae2:	600b      	str	r3, [r1, #0]
 8026ae4:	2d00      	cmp	r5, #0
 8026ae6:	da03      	bge.n	8026af0 <_printf_i+0xc8>
 8026ae8:	232d      	movs	r3, #45	; 0x2d
 8026aea:	426d      	negs	r5, r5
 8026aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026af0:	485e      	ldr	r0, [pc, #376]	; (8026c6c <_printf_i+0x244>)
 8026af2:	230a      	movs	r3, #10
 8026af4:	e019      	b.n	8026b2a <_printf_i+0x102>
 8026af6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026afa:	6805      	ldr	r5, [r0, #0]
 8026afc:	600b      	str	r3, [r1, #0]
 8026afe:	bf18      	it	ne
 8026b00:	b22d      	sxthne	r5, r5
 8026b02:	e7ef      	b.n	8026ae4 <_printf_i+0xbc>
 8026b04:	680b      	ldr	r3, [r1, #0]
 8026b06:	6825      	ldr	r5, [r4, #0]
 8026b08:	1d18      	adds	r0, r3, #4
 8026b0a:	6008      	str	r0, [r1, #0]
 8026b0c:	0628      	lsls	r0, r5, #24
 8026b0e:	d501      	bpl.n	8026b14 <_printf_i+0xec>
 8026b10:	681d      	ldr	r5, [r3, #0]
 8026b12:	e002      	b.n	8026b1a <_printf_i+0xf2>
 8026b14:	0669      	lsls	r1, r5, #25
 8026b16:	d5fb      	bpl.n	8026b10 <_printf_i+0xe8>
 8026b18:	881d      	ldrh	r5, [r3, #0]
 8026b1a:	4854      	ldr	r0, [pc, #336]	; (8026c6c <_printf_i+0x244>)
 8026b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8026b1e:	bf0c      	ite	eq
 8026b20:	2308      	moveq	r3, #8
 8026b22:	230a      	movne	r3, #10
 8026b24:	2100      	movs	r1, #0
 8026b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026b2a:	6866      	ldr	r6, [r4, #4]
 8026b2c:	60a6      	str	r6, [r4, #8]
 8026b2e:	2e00      	cmp	r6, #0
 8026b30:	bfa2      	ittt	ge
 8026b32:	6821      	ldrge	r1, [r4, #0]
 8026b34:	f021 0104 	bicge.w	r1, r1, #4
 8026b38:	6021      	strge	r1, [r4, #0]
 8026b3a:	b90d      	cbnz	r5, 8026b40 <_printf_i+0x118>
 8026b3c:	2e00      	cmp	r6, #0
 8026b3e:	d04d      	beq.n	8026bdc <_printf_i+0x1b4>
 8026b40:	4616      	mov	r6, r2
 8026b42:	fbb5 f1f3 	udiv	r1, r5, r3
 8026b46:	fb03 5711 	mls	r7, r3, r1, r5
 8026b4a:	5dc7      	ldrb	r7, [r0, r7]
 8026b4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026b50:	462f      	mov	r7, r5
 8026b52:	42bb      	cmp	r3, r7
 8026b54:	460d      	mov	r5, r1
 8026b56:	d9f4      	bls.n	8026b42 <_printf_i+0x11a>
 8026b58:	2b08      	cmp	r3, #8
 8026b5a:	d10b      	bne.n	8026b74 <_printf_i+0x14c>
 8026b5c:	6823      	ldr	r3, [r4, #0]
 8026b5e:	07df      	lsls	r7, r3, #31
 8026b60:	d508      	bpl.n	8026b74 <_printf_i+0x14c>
 8026b62:	6923      	ldr	r3, [r4, #16]
 8026b64:	6861      	ldr	r1, [r4, #4]
 8026b66:	4299      	cmp	r1, r3
 8026b68:	bfde      	ittt	le
 8026b6a:	2330      	movle	r3, #48	; 0x30
 8026b6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026b70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026b74:	1b92      	subs	r2, r2, r6
 8026b76:	6122      	str	r2, [r4, #16]
 8026b78:	f8cd a000 	str.w	sl, [sp]
 8026b7c:	464b      	mov	r3, r9
 8026b7e:	aa03      	add	r2, sp, #12
 8026b80:	4621      	mov	r1, r4
 8026b82:	4640      	mov	r0, r8
 8026b84:	f7ff fee2 	bl	802694c <_printf_common>
 8026b88:	3001      	adds	r0, #1
 8026b8a:	d14c      	bne.n	8026c26 <_printf_i+0x1fe>
 8026b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8026b90:	b004      	add	sp, #16
 8026b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026b96:	4835      	ldr	r0, [pc, #212]	; (8026c6c <_printf_i+0x244>)
 8026b98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8026b9c:	6823      	ldr	r3, [r4, #0]
 8026b9e:	680e      	ldr	r6, [r1, #0]
 8026ba0:	061f      	lsls	r7, r3, #24
 8026ba2:	f856 5b04 	ldr.w	r5, [r6], #4
 8026ba6:	600e      	str	r6, [r1, #0]
 8026ba8:	d514      	bpl.n	8026bd4 <_printf_i+0x1ac>
 8026baa:	07d9      	lsls	r1, r3, #31
 8026bac:	bf44      	itt	mi
 8026bae:	f043 0320 	orrmi.w	r3, r3, #32
 8026bb2:	6023      	strmi	r3, [r4, #0]
 8026bb4:	b91d      	cbnz	r5, 8026bbe <_printf_i+0x196>
 8026bb6:	6823      	ldr	r3, [r4, #0]
 8026bb8:	f023 0320 	bic.w	r3, r3, #32
 8026bbc:	6023      	str	r3, [r4, #0]
 8026bbe:	2310      	movs	r3, #16
 8026bc0:	e7b0      	b.n	8026b24 <_printf_i+0xfc>
 8026bc2:	6823      	ldr	r3, [r4, #0]
 8026bc4:	f043 0320 	orr.w	r3, r3, #32
 8026bc8:	6023      	str	r3, [r4, #0]
 8026bca:	2378      	movs	r3, #120	; 0x78
 8026bcc:	4828      	ldr	r0, [pc, #160]	; (8026c70 <_printf_i+0x248>)
 8026bce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026bd2:	e7e3      	b.n	8026b9c <_printf_i+0x174>
 8026bd4:	065e      	lsls	r6, r3, #25
 8026bd6:	bf48      	it	mi
 8026bd8:	b2ad      	uxthmi	r5, r5
 8026bda:	e7e6      	b.n	8026baa <_printf_i+0x182>
 8026bdc:	4616      	mov	r6, r2
 8026bde:	e7bb      	b.n	8026b58 <_printf_i+0x130>
 8026be0:	680b      	ldr	r3, [r1, #0]
 8026be2:	6826      	ldr	r6, [r4, #0]
 8026be4:	6960      	ldr	r0, [r4, #20]
 8026be6:	1d1d      	adds	r5, r3, #4
 8026be8:	600d      	str	r5, [r1, #0]
 8026bea:	0635      	lsls	r5, r6, #24
 8026bec:	681b      	ldr	r3, [r3, #0]
 8026bee:	d501      	bpl.n	8026bf4 <_printf_i+0x1cc>
 8026bf0:	6018      	str	r0, [r3, #0]
 8026bf2:	e002      	b.n	8026bfa <_printf_i+0x1d2>
 8026bf4:	0671      	lsls	r1, r6, #25
 8026bf6:	d5fb      	bpl.n	8026bf0 <_printf_i+0x1c8>
 8026bf8:	8018      	strh	r0, [r3, #0]
 8026bfa:	2300      	movs	r3, #0
 8026bfc:	6123      	str	r3, [r4, #16]
 8026bfe:	4616      	mov	r6, r2
 8026c00:	e7ba      	b.n	8026b78 <_printf_i+0x150>
 8026c02:	680b      	ldr	r3, [r1, #0]
 8026c04:	1d1a      	adds	r2, r3, #4
 8026c06:	600a      	str	r2, [r1, #0]
 8026c08:	681e      	ldr	r6, [r3, #0]
 8026c0a:	6862      	ldr	r2, [r4, #4]
 8026c0c:	2100      	movs	r1, #0
 8026c0e:	4630      	mov	r0, r6
 8026c10:	f7d9 fb1e 	bl	8000250 <memchr>
 8026c14:	b108      	cbz	r0, 8026c1a <_printf_i+0x1f2>
 8026c16:	1b80      	subs	r0, r0, r6
 8026c18:	6060      	str	r0, [r4, #4]
 8026c1a:	6863      	ldr	r3, [r4, #4]
 8026c1c:	6123      	str	r3, [r4, #16]
 8026c1e:	2300      	movs	r3, #0
 8026c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026c24:	e7a8      	b.n	8026b78 <_printf_i+0x150>
 8026c26:	6923      	ldr	r3, [r4, #16]
 8026c28:	4632      	mov	r2, r6
 8026c2a:	4649      	mov	r1, r9
 8026c2c:	4640      	mov	r0, r8
 8026c2e:	47d0      	blx	sl
 8026c30:	3001      	adds	r0, #1
 8026c32:	d0ab      	beq.n	8026b8c <_printf_i+0x164>
 8026c34:	6823      	ldr	r3, [r4, #0]
 8026c36:	079b      	lsls	r3, r3, #30
 8026c38:	d413      	bmi.n	8026c62 <_printf_i+0x23a>
 8026c3a:	68e0      	ldr	r0, [r4, #12]
 8026c3c:	9b03      	ldr	r3, [sp, #12]
 8026c3e:	4298      	cmp	r0, r3
 8026c40:	bfb8      	it	lt
 8026c42:	4618      	movlt	r0, r3
 8026c44:	e7a4      	b.n	8026b90 <_printf_i+0x168>
 8026c46:	2301      	movs	r3, #1
 8026c48:	4632      	mov	r2, r6
 8026c4a:	4649      	mov	r1, r9
 8026c4c:	4640      	mov	r0, r8
 8026c4e:	47d0      	blx	sl
 8026c50:	3001      	adds	r0, #1
 8026c52:	d09b      	beq.n	8026b8c <_printf_i+0x164>
 8026c54:	3501      	adds	r5, #1
 8026c56:	68e3      	ldr	r3, [r4, #12]
 8026c58:	9903      	ldr	r1, [sp, #12]
 8026c5a:	1a5b      	subs	r3, r3, r1
 8026c5c:	42ab      	cmp	r3, r5
 8026c5e:	dcf2      	bgt.n	8026c46 <_printf_i+0x21e>
 8026c60:	e7eb      	b.n	8026c3a <_printf_i+0x212>
 8026c62:	2500      	movs	r5, #0
 8026c64:	f104 0619 	add.w	r6, r4, #25
 8026c68:	e7f5      	b.n	8026c56 <_printf_i+0x22e>
 8026c6a:	bf00      	nop
 8026c6c:	0802e945 	.word	0x0802e945
 8026c70:	0802e956 	.word	0x0802e956

08026c74 <_scanf_float>:
 8026c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c78:	b087      	sub	sp, #28
 8026c7a:	4617      	mov	r7, r2
 8026c7c:	9303      	str	r3, [sp, #12]
 8026c7e:	688b      	ldr	r3, [r1, #8]
 8026c80:	1e5a      	subs	r2, r3, #1
 8026c82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8026c86:	bf83      	ittte	hi
 8026c88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8026c8c:	195b      	addhi	r3, r3, r5
 8026c8e:	9302      	strhi	r3, [sp, #8]
 8026c90:	2300      	movls	r3, #0
 8026c92:	bf86      	itte	hi
 8026c94:	f240 135d 	movwhi	r3, #349	; 0x15d
 8026c98:	608b      	strhi	r3, [r1, #8]
 8026c9a:	9302      	strls	r3, [sp, #8]
 8026c9c:	680b      	ldr	r3, [r1, #0]
 8026c9e:	468b      	mov	fp, r1
 8026ca0:	2500      	movs	r5, #0
 8026ca2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8026ca6:	f84b 3b1c 	str.w	r3, [fp], #28
 8026caa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8026cae:	4680      	mov	r8, r0
 8026cb0:	460c      	mov	r4, r1
 8026cb2:	465e      	mov	r6, fp
 8026cb4:	46aa      	mov	sl, r5
 8026cb6:	46a9      	mov	r9, r5
 8026cb8:	9501      	str	r5, [sp, #4]
 8026cba:	68a2      	ldr	r2, [r4, #8]
 8026cbc:	b152      	cbz	r2, 8026cd4 <_scanf_float+0x60>
 8026cbe:	683b      	ldr	r3, [r7, #0]
 8026cc0:	781b      	ldrb	r3, [r3, #0]
 8026cc2:	2b4e      	cmp	r3, #78	; 0x4e
 8026cc4:	d864      	bhi.n	8026d90 <_scanf_float+0x11c>
 8026cc6:	2b40      	cmp	r3, #64	; 0x40
 8026cc8:	d83c      	bhi.n	8026d44 <_scanf_float+0xd0>
 8026cca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8026cce:	b2c8      	uxtb	r0, r1
 8026cd0:	280e      	cmp	r0, #14
 8026cd2:	d93a      	bls.n	8026d4a <_scanf_float+0xd6>
 8026cd4:	f1b9 0f00 	cmp.w	r9, #0
 8026cd8:	d003      	beq.n	8026ce2 <_scanf_float+0x6e>
 8026cda:	6823      	ldr	r3, [r4, #0]
 8026cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8026ce0:	6023      	str	r3, [r4, #0]
 8026ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026ce6:	f1ba 0f01 	cmp.w	sl, #1
 8026cea:	f200 8113 	bhi.w	8026f14 <_scanf_float+0x2a0>
 8026cee:	455e      	cmp	r6, fp
 8026cf0:	f200 8105 	bhi.w	8026efe <_scanf_float+0x28a>
 8026cf4:	2501      	movs	r5, #1
 8026cf6:	4628      	mov	r0, r5
 8026cf8:	b007      	add	sp, #28
 8026cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026cfe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8026d02:	2a0d      	cmp	r2, #13
 8026d04:	d8e6      	bhi.n	8026cd4 <_scanf_float+0x60>
 8026d06:	a101      	add	r1, pc, #4	; (adr r1, 8026d0c <_scanf_float+0x98>)
 8026d08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8026d0c:	08026e4b 	.word	0x08026e4b
 8026d10:	08026cd5 	.word	0x08026cd5
 8026d14:	08026cd5 	.word	0x08026cd5
 8026d18:	08026cd5 	.word	0x08026cd5
 8026d1c:	08026eab 	.word	0x08026eab
 8026d20:	08026e83 	.word	0x08026e83
 8026d24:	08026cd5 	.word	0x08026cd5
 8026d28:	08026cd5 	.word	0x08026cd5
 8026d2c:	08026e59 	.word	0x08026e59
 8026d30:	08026cd5 	.word	0x08026cd5
 8026d34:	08026cd5 	.word	0x08026cd5
 8026d38:	08026cd5 	.word	0x08026cd5
 8026d3c:	08026cd5 	.word	0x08026cd5
 8026d40:	08026e11 	.word	0x08026e11
 8026d44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8026d48:	e7db      	b.n	8026d02 <_scanf_float+0x8e>
 8026d4a:	290e      	cmp	r1, #14
 8026d4c:	d8c2      	bhi.n	8026cd4 <_scanf_float+0x60>
 8026d4e:	a001      	add	r0, pc, #4	; (adr r0, 8026d54 <_scanf_float+0xe0>)
 8026d50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8026d54:	08026e03 	.word	0x08026e03
 8026d58:	08026cd5 	.word	0x08026cd5
 8026d5c:	08026e03 	.word	0x08026e03
 8026d60:	08026e97 	.word	0x08026e97
 8026d64:	08026cd5 	.word	0x08026cd5
 8026d68:	08026db1 	.word	0x08026db1
 8026d6c:	08026ded 	.word	0x08026ded
 8026d70:	08026ded 	.word	0x08026ded
 8026d74:	08026ded 	.word	0x08026ded
 8026d78:	08026ded 	.word	0x08026ded
 8026d7c:	08026ded 	.word	0x08026ded
 8026d80:	08026ded 	.word	0x08026ded
 8026d84:	08026ded 	.word	0x08026ded
 8026d88:	08026ded 	.word	0x08026ded
 8026d8c:	08026ded 	.word	0x08026ded
 8026d90:	2b6e      	cmp	r3, #110	; 0x6e
 8026d92:	d809      	bhi.n	8026da8 <_scanf_float+0x134>
 8026d94:	2b60      	cmp	r3, #96	; 0x60
 8026d96:	d8b2      	bhi.n	8026cfe <_scanf_float+0x8a>
 8026d98:	2b54      	cmp	r3, #84	; 0x54
 8026d9a:	d077      	beq.n	8026e8c <_scanf_float+0x218>
 8026d9c:	2b59      	cmp	r3, #89	; 0x59
 8026d9e:	d199      	bne.n	8026cd4 <_scanf_float+0x60>
 8026da0:	2d07      	cmp	r5, #7
 8026da2:	d197      	bne.n	8026cd4 <_scanf_float+0x60>
 8026da4:	2508      	movs	r5, #8
 8026da6:	e029      	b.n	8026dfc <_scanf_float+0x188>
 8026da8:	2b74      	cmp	r3, #116	; 0x74
 8026daa:	d06f      	beq.n	8026e8c <_scanf_float+0x218>
 8026dac:	2b79      	cmp	r3, #121	; 0x79
 8026dae:	e7f6      	b.n	8026d9e <_scanf_float+0x12a>
 8026db0:	6821      	ldr	r1, [r4, #0]
 8026db2:	05c8      	lsls	r0, r1, #23
 8026db4:	d51a      	bpl.n	8026dec <_scanf_float+0x178>
 8026db6:	9b02      	ldr	r3, [sp, #8]
 8026db8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8026dbc:	6021      	str	r1, [r4, #0]
 8026dbe:	f109 0901 	add.w	r9, r9, #1
 8026dc2:	b11b      	cbz	r3, 8026dcc <_scanf_float+0x158>
 8026dc4:	3b01      	subs	r3, #1
 8026dc6:	3201      	adds	r2, #1
 8026dc8:	9302      	str	r3, [sp, #8]
 8026dca:	60a2      	str	r2, [r4, #8]
 8026dcc:	68a3      	ldr	r3, [r4, #8]
 8026dce:	3b01      	subs	r3, #1
 8026dd0:	60a3      	str	r3, [r4, #8]
 8026dd2:	6923      	ldr	r3, [r4, #16]
 8026dd4:	3301      	adds	r3, #1
 8026dd6:	6123      	str	r3, [r4, #16]
 8026dd8:	687b      	ldr	r3, [r7, #4]
 8026dda:	3b01      	subs	r3, #1
 8026ddc:	2b00      	cmp	r3, #0
 8026dde:	607b      	str	r3, [r7, #4]
 8026de0:	f340 8084 	ble.w	8026eec <_scanf_float+0x278>
 8026de4:	683b      	ldr	r3, [r7, #0]
 8026de6:	3301      	adds	r3, #1
 8026de8:	603b      	str	r3, [r7, #0]
 8026dea:	e766      	b.n	8026cba <_scanf_float+0x46>
 8026dec:	eb1a 0f05 	cmn.w	sl, r5
 8026df0:	f47f af70 	bne.w	8026cd4 <_scanf_float+0x60>
 8026df4:	6822      	ldr	r2, [r4, #0]
 8026df6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8026dfa:	6022      	str	r2, [r4, #0]
 8026dfc:	f806 3b01 	strb.w	r3, [r6], #1
 8026e00:	e7e4      	b.n	8026dcc <_scanf_float+0x158>
 8026e02:	6822      	ldr	r2, [r4, #0]
 8026e04:	0610      	lsls	r0, r2, #24
 8026e06:	f57f af65 	bpl.w	8026cd4 <_scanf_float+0x60>
 8026e0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8026e0e:	e7f4      	b.n	8026dfa <_scanf_float+0x186>
 8026e10:	f1ba 0f00 	cmp.w	sl, #0
 8026e14:	d10e      	bne.n	8026e34 <_scanf_float+0x1c0>
 8026e16:	f1b9 0f00 	cmp.w	r9, #0
 8026e1a:	d10e      	bne.n	8026e3a <_scanf_float+0x1c6>
 8026e1c:	6822      	ldr	r2, [r4, #0]
 8026e1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8026e22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8026e26:	d108      	bne.n	8026e3a <_scanf_float+0x1c6>
 8026e28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8026e2c:	6022      	str	r2, [r4, #0]
 8026e2e:	f04f 0a01 	mov.w	sl, #1
 8026e32:	e7e3      	b.n	8026dfc <_scanf_float+0x188>
 8026e34:	f1ba 0f02 	cmp.w	sl, #2
 8026e38:	d055      	beq.n	8026ee6 <_scanf_float+0x272>
 8026e3a:	2d01      	cmp	r5, #1
 8026e3c:	d002      	beq.n	8026e44 <_scanf_float+0x1d0>
 8026e3e:	2d04      	cmp	r5, #4
 8026e40:	f47f af48 	bne.w	8026cd4 <_scanf_float+0x60>
 8026e44:	3501      	adds	r5, #1
 8026e46:	b2ed      	uxtb	r5, r5
 8026e48:	e7d8      	b.n	8026dfc <_scanf_float+0x188>
 8026e4a:	f1ba 0f01 	cmp.w	sl, #1
 8026e4e:	f47f af41 	bne.w	8026cd4 <_scanf_float+0x60>
 8026e52:	f04f 0a02 	mov.w	sl, #2
 8026e56:	e7d1      	b.n	8026dfc <_scanf_float+0x188>
 8026e58:	b97d      	cbnz	r5, 8026e7a <_scanf_float+0x206>
 8026e5a:	f1b9 0f00 	cmp.w	r9, #0
 8026e5e:	f47f af3c 	bne.w	8026cda <_scanf_float+0x66>
 8026e62:	6822      	ldr	r2, [r4, #0]
 8026e64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8026e68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8026e6c:	f47f af39 	bne.w	8026ce2 <_scanf_float+0x6e>
 8026e70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8026e74:	6022      	str	r2, [r4, #0]
 8026e76:	2501      	movs	r5, #1
 8026e78:	e7c0      	b.n	8026dfc <_scanf_float+0x188>
 8026e7a:	2d03      	cmp	r5, #3
 8026e7c:	d0e2      	beq.n	8026e44 <_scanf_float+0x1d0>
 8026e7e:	2d05      	cmp	r5, #5
 8026e80:	e7de      	b.n	8026e40 <_scanf_float+0x1cc>
 8026e82:	2d02      	cmp	r5, #2
 8026e84:	f47f af26 	bne.w	8026cd4 <_scanf_float+0x60>
 8026e88:	2503      	movs	r5, #3
 8026e8a:	e7b7      	b.n	8026dfc <_scanf_float+0x188>
 8026e8c:	2d06      	cmp	r5, #6
 8026e8e:	f47f af21 	bne.w	8026cd4 <_scanf_float+0x60>
 8026e92:	2507      	movs	r5, #7
 8026e94:	e7b2      	b.n	8026dfc <_scanf_float+0x188>
 8026e96:	6822      	ldr	r2, [r4, #0]
 8026e98:	0591      	lsls	r1, r2, #22
 8026e9a:	f57f af1b 	bpl.w	8026cd4 <_scanf_float+0x60>
 8026e9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8026ea2:	6022      	str	r2, [r4, #0]
 8026ea4:	f8cd 9004 	str.w	r9, [sp, #4]
 8026ea8:	e7a8      	b.n	8026dfc <_scanf_float+0x188>
 8026eaa:	6822      	ldr	r2, [r4, #0]
 8026eac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8026eb0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8026eb4:	d006      	beq.n	8026ec4 <_scanf_float+0x250>
 8026eb6:	0550      	lsls	r0, r2, #21
 8026eb8:	f57f af0c 	bpl.w	8026cd4 <_scanf_float+0x60>
 8026ebc:	f1b9 0f00 	cmp.w	r9, #0
 8026ec0:	f43f af0f 	beq.w	8026ce2 <_scanf_float+0x6e>
 8026ec4:	0591      	lsls	r1, r2, #22
 8026ec6:	bf58      	it	pl
 8026ec8:	9901      	ldrpl	r1, [sp, #4]
 8026eca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8026ece:	bf58      	it	pl
 8026ed0:	eba9 0101 	subpl.w	r1, r9, r1
 8026ed4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8026ed8:	bf58      	it	pl
 8026eda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8026ede:	6022      	str	r2, [r4, #0]
 8026ee0:	f04f 0900 	mov.w	r9, #0
 8026ee4:	e78a      	b.n	8026dfc <_scanf_float+0x188>
 8026ee6:	f04f 0a03 	mov.w	sl, #3
 8026eea:	e787      	b.n	8026dfc <_scanf_float+0x188>
 8026eec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8026ef0:	4639      	mov	r1, r7
 8026ef2:	4640      	mov	r0, r8
 8026ef4:	4798      	blx	r3
 8026ef6:	2800      	cmp	r0, #0
 8026ef8:	f43f aedf 	beq.w	8026cba <_scanf_float+0x46>
 8026efc:	e6ea      	b.n	8026cd4 <_scanf_float+0x60>
 8026efe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8026f02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8026f06:	463a      	mov	r2, r7
 8026f08:	4640      	mov	r0, r8
 8026f0a:	4798      	blx	r3
 8026f0c:	6923      	ldr	r3, [r4, #16]
 8026f0e:	3b01      	subs	r3, #1
 8026f10:	6123      	str	r3, [r4, #16]
 8026f12:	e6ec      	b.n	8026cee <_scanf_float+0x7a>
 8026f14:	1e6b      	subs	r3, r5, #1
 8026f16:	2b06      	cmp	r3, #6
 8026f18:	d825      	bhi.n	8026f66 <_scanf_float+0x2f2>
 8026f1a:	2d02      	cmp	r5, #2
 8026f1c:	d836      	bhi.n	8026f8c <_scanf_float+0x318>
 8026f1e:	455e      	cmp	r6, fp
 8026f20:	f67f aee8 	bls.w	8026cf4 <_scanf_float+0x80>
 8026f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8026f28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8026f2c:	463a      	mov	r2, r7
 8026f2e:	4640      	mov	r0, r8
 8026f30:	4798      	blx	r3
 8026f32:	6923      	ldr	r3, [r4, #16]
 8026f34:	3b01      	subs	r3, #1
 8026f36:	6123      	str	r3, [r4, #16]
 8026f38:	e7f1      	b.n	8026f1e <_scanf_float+0x2aa>
 8026f3a:	9802      	ldr	r0, [sp, #8]
 8026f3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8026f40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8026f44:	9002      	str	r0, [sp, #8]
 8026f46:	463a      	mov	r2, r7
 8026f48:	4640      	mov	r0, r8
 8026f4a:	4798      	blx	r3
 8026f4c:	6923      	ldr	r3, [r4, #16]
 8026f4e:	3b01      	subs	r3, #1
 8026f50:	6123      	str	r3, [r4, #16]
 8026f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026f56:	fa5f fa8a 	uxtb.w	sl, sl
 8026f5a:	f1ba 0f02 	cmp.w	sl, #2
 8026f5e:	d1ec      	bne.n	8026f3a <_scanf_float+0x2c6>
 8026f60:	3d03      	subs	r5, #3
 8026f62:	b2ed      	uxtb	r5, r5
 8026f64:	1b76      	subs	r6, r6, r5
 8026f66:	6823      	ldr	r3, [r4, #0]
 8026f68:	05da      	lsls	r2, r3, #23
 8026f6a:	d52f      	bpl.n	8026fcc <_scanf_float+0x358>
 8026f6c:	055b      	lsls	r3, r3, #21
 8026f6e:	d510      	bpl.n	8026f92 <_scanf_float+0x31e>
 8026f70:	455e      	cmp	r6, fp
 8026f72:	f67f aebf 	bls.w	8026cf4 <_scanf_float+0x80>
 8026f76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8026f7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8026f7e:	463a      	mov	r2, r7
 8026f80:	4640      	mov	r0, r8
 8026f82:	4798      	blx	r3
 8026f84:	6923      	ldr	r3, [r4, #16]
 8026f86:	3b01      	subs	r3, #1
 8026f88:	6123      	str	r3, [r4, #16]
 8026f8a:	e7f1      	b.n	8026f70 <_scanf_float+0x2fc>
 8026f8c:	46aa      	mov	sl, r5
 8026f8e:	9602      	str	r6, [sp, #8]
 8026f90:	e7df      	b.n	8026f52 <_scanf_float+0x2de>
 8026f92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8026f96:	6923      	ldr	r3, [r4, #16]
 8026f98:	2965      	cmp	r1, #101	; 0x65
 8026f9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8026f9e:	f106 35ff 	add.w	r5, r6, #4294967295
 8026fa2:	6123      	str	r3, [r4, #16]
 8026fa4:	d00c      	beq.n	8026fc0 <_scanf_float+0x34c>
 8026fa6:	2945      	cmp	r1, #69	; 0x45
 8026fa8:	d00a      	beq.n	8026fc0 <_scanf_float+0x34c>
 8026faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8026fae:	463a      	mov	r2, r7
 8026fb0:	4640      	mov	r0, r8
 8026fb2:	4798      	blx	r3
 8026fb4:	6923      	ldr	r3, [r4, #16]
 8026fb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8026fba:	3b01      	subs	r3, #1
 8026fbc:	1eb5      	subs	r5, r6, #2
 8026fbe:	6123      	str	r3, [r4, #16]
 8026fc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8026fc4:	463a      	mov	r2, r7
 8026fc6:	4640      	mov	r0, r8
 8026fc8:	4798      	blx	r3
 8026fca:	462e      	mov	r6, r5
 8026fcc:	6825      	ldr	r5, [r4, #0]
 8026fce:	f015 0510 	ands.w	r5, r5, #16
 8026fd2:	d14d      	bne.n	8027070 <_scanf_float+0x3fc>
 8026fd4:	7035      	strb	r5, [r6, #0]
 8026fd6:	6823      	ldr	r3, [r4, #0]
 8026fd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8026fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8026fe0:	d11a      	bne.n	8027018 <_scanf_float+0x3a4>
 8026fe2:	9b01      	ldr	r3, [sp, #4]
 8026fe4:	454b      	cmp	r3, r9
 8026fe6:	eba3 0209 	sub.w	r2, r3, r9
 8026fea:	d122      	bne.n	8027032 <_scanf_float+0x3be>
 8026fec:	2200      	movs	r2, #0
 8026fee:	4659      	mov	r1, fp
 8026ff0:	4640      	mov	r0, r8
 8026ff2:	f000 feaf 	bl	8027d54 <_strtod_r>
 8026ff6:	9b03      	ldr	r3, [sp, #12]
 8026ff8:	6821      	ldr	r1, [r4, #0]
 8026ffa:	681b      	ldr	r3, [r3, #0]
 8026ffc:	f011 0f02 	tst.w	r1, #2
 8027000:	f103 0204 	add.w	r2, r3, #4
 8027004:	d020      	beq.n	8027048 <_scanf_float+0x3d4>
 8027006:	9903      	ldr	r1, [sp, #12]
 8027008:	600a      	str	r2, [r1, #0]
 802700a:	681b      	ldr	r3, [r3, #0]
 802700c:	ed83 0b00 	vstr	d0, [r3]
 8027010:	68e3      	ldr	r3, [r4, #12]
 8027012:	3301      	adds	r3, #1
 8027014:	60e3      	str	r3, [r4, #12]
 8027016:	e66e      	b.n	8026cf6 <_scanf_float+0x82>
 8027018:	9b04      	ldr	r3, [sp, #16]
 802701a:	2b00      	cmp	r3, #0
 802701c:	d0e6      	beq.n	8026fec <_scanf_float+0x378>
 802701e:	9905      	ldr	r1, [sp, #20]
 8027020:	230a      	movs	r3, #10
 8027022:	462a      	mov	r2, r5
 8027024:	3101      	adds	r1, #1
 8027026:	4640      	mov	r0, r8
 8027028:	f000 ff1e 	bl	8027e68 <_strtol_r>
 802702c:	9b04      	ldr	r3, [sp, #16]
 802702e:	9e05      	ldr	r6, [sp, #20]
 8027030:	1ac2      	subs	r2, r0, r3
 8027032:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8027036:	429e      	cmp	r6, r3
 8027038:	bf28      	it	cs
 802703a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802703e:	490d      	ldr	r1, [pc, #52]	; (8027074 <_scanf_float+0x400>)
 8027040:	4630      	mov	r0, r6
 8027042:	f000 f875 	bl	8027130 <siprintf>
 8027046:	e7d1      	b.n	8026fec <_scanf_float+0x378>
 8027048:	f011 0f04 	tst.w	r1, #4
 802704c:	9903      	ldr	r1, [sp, #12]
 802704e:	600a      	str	r2, [r1, #0]
 8027050:	d1db      	bne.n	802700a <_scanf_float+0x396>
 8027052:	eeb4 0b40 	vcmp.f64	d0, d0
 8027056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802705a:	681e      	ldr	r6, [r3, #0]
 802705c:	d705      	bvc.n	802706a <_scanf_float+0x3f6>
 802705e:	4806      	ldr	r0, [pc, #24]	; (8027078 <_scanf_float+0x404>)
 8027060:	f000 f81c 	bl	802709c <nanf>
 8027064:	ed86 0a00 	vstr	s0, [r6]
 8027068:	e7d2      	b.n	8027010 <_scanf_float+0x39c>
 802706a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802706e:	e7f9      	b.n	8027064 <_scanf_float+0x3f0>
 8027070:	2500      	movs	r5, #0
 8027072:	e640      	b.n	8026cf6 <_scanf_float+0x82>
 8027074:	0802e967 	.word	0x0802e967
 8027078:	0802e91f 	.word	0x0802e91f

0802707c <_sbrk_r>:
 802707c:	b538      	push	{r3, r4, r5, lr}
 802707e:	4d06      	ldr	r5, [pc, #24]	; (8027098 <_sbrk_r+0x1c>)
 8027080:	2300      	movs	r3, #0
 8027082:	4604      	mov	r4, r0
 8027084:	4608      	mov	r0, r1
 8027086:	602b      	str	r3, [r5, #0]
 8027088:	f7db fdee 	bl	8002c68 <_sbrk>
 802708c:	1c43      	adds	r3, r0, #1
 802708e:	d102      	bne.n	8027096 <_sbrk_r+0x1a>
 8027090:	682b      	ldr	r3, [r5, #0]
 8027092:	b103      	cbz	r3, 8027096 <_sbrk_r+0x1a>
 8027094:	6023      	str	r3, [r4, #0]
 8027096:	bd38      	pop	{r3, r4, r5, pc}
 8027098:	20057100 	.word	0x20057100

0802709c <nanf>:
 802709c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80270a4 <nanf+0x8>
 80270a0:	4770      	bx	lr
 80270a2:	bf00      	nop
 80270a4:	7fc00000 	.word	0x7fc00000

080270a8 <_raise_r>:
 80270a8:	291f      	cmp	r1, #31
 80270aa:	b538      	push	{r3, r4, r5, lr}
 80270ac:	4604      	mov	r4, r0
 80270ae:	460d      	mov	r5, r1
 80270b0:	d904      	bls.n	80270bc <_raise_r+0x14>
 80270b2:	2316      	movs	r3, #22
 80270b4:	6003      	str	r3, [r0, #0]
 80270b6:	f04f 30ff 	mov.w	r0, #4294967295
 80270ba:	bd38      	pop	{r3, r4, r5, pc}
 80270bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80270be:	b112      	cbz	r2, 80270c6 <_raise_r+0x1e>
 80270c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80270c4:	b94b      	cbnz	r3, 80270da <_raise_r+0x32>
 80270c6:	4620      	mov	r0, r4
 80270c8:	f000 f830 	bl	802712c <_getpid_r>
 80270cc:	462a      	mov	r2, r5
 80270ce:	4601      	mov	r1, r0
 80270d0:	4620      	mov	r0, r4
 80270d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80270d6:	f000 b817 	b.w	8027108 <_kill_r>
 80270da:	2b01      	cmp	r3, #1
 80270dc:	d00a      	beq.n	80270f4 <_raise_r+0x4c>
 80270de:	1c59      	adds	r1, r3, #1
 80270e0:	d103      	bne.n	80270ea <_raise_r+0x42>
 80270e2:	2316      	movs	r3, #22
 80270e4:	6003      	str	r3, [r0, #0]
 80270e6:	2001      	movs	r0, #1
 80270e8:	e7e7      	b.n	80270ba <_raise_r+0x12>
 80270ea:	2400      	movs	r4, #0
 80270ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80270f0:	4628      	mov	r0, r5
 80270f2:	4798      	blx	r3
 80270f4:	2000      	movs	r0, #0
 80270f6:	e7e0      	b.n	80270ba <_raise_r+0x12>

080270f8 <raise>:
 80270f8:	4b02      	ldr	r3, [pc, #8]	; (8027104 <raise+0xc>)
 80270fa:	4601      	mov	r1, r0
 80270fc:	6818      	ldr	r0, [r3, #0]
 80270fe:	f7ff bfd3 	b.w	80270a8 <_raise_r>
 8027102:	bf00      	nop
 8027104:	2000007c 	.word	0x2000007c

08027108 <_kill_r>:
 8027108:	b538      	push	{r3, r4, r5, lr}
 802710a:	4d07      	ldr	r5, [pc, #28]	; (8027128 <_kill_r+0x20>)
 802710c:	2300      	movs	r3, #0
 802710e:	4604      	mov	r4, r0
 8027110:	4608      	mov	r0, r1
 8027112:	4611      	mov	r1, r2
 8027114:	602b      	str	r3, [r5, #0]
 8027116:	f7db fd1f 	bl	8002b58 <_kill>
 802711a:	1c43      	adds	r3, r0, #1
 802711c:	d102      	bne.n	8027124 <_kill_r+0x1c>
 802711e:	682b      	ldr	r3, [r5, #0]
 8027120:	b103      	cbz	r3, 8027124 <_kill_r+0x1c>
 8027122:	6023      	str	r3, [r4, #0]
 8027124:	bd38      	pop	{r3, r4, r5, pc}
 8027126:	bf00      	nop
 8027128:	20057100 	.word	0x20057100

0802712c <_getpid_r>:
 802712c:	f7db bd0c 	b.w	8002b48 <_getpid>

08027130 <siprintf>:
 8027130:	b40e      	push	{r1, r2, r3}
 8027132:	b500      	push	{lr}
 8027134:	b09c      	sub	sp, #112	; 0x70
 8027136:	ab1d      	add	r3, sp, #116	; 0x74
 8027138:	9002      	str	r0, [sp, #8]
 802713a:	9006      	str	r0, [sp, #24]
 802713c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8027140:	4809      	ldr	r0, [pc, #36]	; (8027168 <siprintf+0x38>)
 8027142:	9107      	str	r1, [sp, #28]
 8027144:	9104      	str	r1, [sp, #16]
 8027146:	4909      	ldr	r1, [pc, #36]	; (802716c <siprintf+0x3c>)
 8027148:	f853 2b04 	ldr.w	r2, [r3], #4
 802714c:	9105      	str	r1, [sp, #20]
 802714e:	6800      	ldr	r0, [r0, #0]
 8027150:	9301      	str	r3, [sp, #4]
 8027152:	a902      	add	r1, sp, #8
 8027154:	f003 f8d0 	bl	802a2f8 <_svfiprintf_r>
 8027158:	9b02      	ldr	r3, [sp, #8]
 802715a:	2200      	movs	r2, #0
 802715c:	701a      	strb	r2, [r3, #0]
 802715e:	b01c      	add	sp, #112	; 0x70
 8027160:	f85d eb04 	ldr.w	lr, [sp], #4
 8027164:	b003      	add	sp, #12
 8027166:	4770      	bx	lr
 8027168:	2000007c 	.word	0x2000007c
 802716c:	ffff0208 	.word	0xffff0208

08027170 <sulp>:
 8027170:	b570      	push	{r4, r5, r6, lr}
 8027172:	4604      	mov	r4, r0
 8027174:	460d      	mov	r5, r1
 8027176:	4616      	mov	r6, r2
 8027178:	ec45 4b10 	vmov	d0, r4, r5
 802717c:	f002 fedc 	bl	8029f38 <__ulp>
 8027180:	b17e      	cbz	r6, 80271a2 <sulp+0x32>
 8027182:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8027186:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802718a:	2b00      	cmp	r3, #0
 802718c:	dd09      	ble.n	80271a2 <sulp+0x32>
 802718e:	051b      	lsls	r3, r3, #20
 8027190:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8027194:	2000      	movs	r0, #0
 8027196:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 802719a:	ec41 0b17 	vmov	d7, r0, r1
 802719e:	ee20 0b07 	vmul.f64	d0, d0, d7
 80271a2:	bd70      	pop	{r4, r5, r6, pc}
 80271a4:	0000      	movs	r0, r0
	...

080271a8 <_strtod_l>:
 80271a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271ac:	ed2d 8b0c 	vpush	{d8-d13}
 80271b0:	b09d      	sub	sp, #116	; 0x74
 80271b2:	461f      	mov	r7, r3
 80271b4:	2300      	movs	r3, #0
 80271b6:	9318      	str	r3, [sp, #96]	; 0x60
 80271b8:	4ba6      	ldr	r3, [pc, #664]	; (8027454 <_strtod_l+0x2ac>)
 80271ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80271bc:	681b      	ldr	r3, [r3, #0]
 80271be:	9308      	str	r3, [sp, #32]
 80271c0:	4604      	mov	r4, r0
 80271c2:	4618      	mov	r0, r3
 80271c4:	468a      	mov	sl, r1
 80271c6:	f7d9 f83b 	bl	8000240 <strlen>
 80271ca:	f04f 0800 	mov.w	r8, #0
 80271ce:	4605      	mov	r5, r0
 80271d0:	f04f 0900 	mov.w	r9, #0
 80271d4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80271d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80271da:	781a      	ldrb	r2, [r3, #0]
 80271dc:	2a2b      	cmp	r2, #43	; 0x2b
 80271de:	d04d      	beq.n	802727c <_strtod_l+0xd4>
 80271e0:	d83a      	bhi.n	8027258 <_strtod_l+0xb0>
 80271e2:	2a0d      	cmp	r2, #13
 80271e4:	d833      	bhi.n	802724e <_strtod_l+0xa6>
 80271e6:	2a08      	cmp	r2, #8
 80271e8:	d833      	bhi.n	8027252 <_strtod_l+0xaa>
 80271ea:	2a00      	cmp	r2, #0
 80271ec:	d03d      	beq.n	802726a <_strtod_l+0xc2>
 80271ee:	2300      	movs	r3, #0
 80271f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80271f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80271f4:	7833      	ldrb	r3, [r6, #0]
 80271f6:	2b30      	cmp	r3, #48	; 0x30
 80271f8:	f040 80b6 	bne.w	8027368 <_strtod_l+0x1c0>
 80271fc:	7873      	ldrb	r3, [r6, #1]
 80271fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8027202:	2b58      	cmp	r3, #88	; 0x58
 8027204:	d16d      	bne.n	80272e2 <_strtod_l+0x13a>
 8027206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027208:	9301      	str	r3, [sp, #4]
 802720a:	ab18      	add	r3, sp, #96	; 0x60
 802720c:	9702      	str	r7, [sp, #8]
 802720e:	9300      	str	r3, [sp, #0]
 8027210:	4a91      	ldr	r2, [pc, #580]	; (8027458 <_strtod_l+0x2b0>)
 8027212:	ab19      	add	r3, sp, #100	; 0x64
 8027214:	a917      	add	r1, sp, #92	; 0x5c
 8027216:	4620      	mov	r0, r4
 8027218:	f001 ff76 	bl	8029108 <__gethex>
 802721c:	f010 0507 	ands.w	r5, r0, #7
 8027220:	4607      	mov	r7, r0
 8027222:	d005      	beq.n	8027230 <_strtod_l+0x88>
 8027224:	2d06      	cmp	r5, #6
 8027226:	d12b      	bne.n	8027280 <_strtod_l+0xd8>
 8027228:	3601      	adds	r6, #1
 802722a:	2300      	movs	r3, #0
 802722c:	9617      	str	r6, [sp, #92]	; 0x5c
 802722e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027232:	2b00      	cmp	r3, #0
 8027234:	f040 856e 	bne.w	8027d14 <_strtod_l+0xb6c>
 8027238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802723a:	b1e3      	cbz	r3, 8027276 <_strtod_l+0xce>
 802723c:	ec49 8b17 	vmov	d7, r8, r9
 8027240:	eeb1 0b47 	vneg.f64	d0, d7
 8027244:	b01d      	add	sp, #116	; 0x74
 8027246:	ecbd 8b0c 	vpop	{d8-d13}
 802724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802724e:	2a20      	cmp	r2, #32
 8027250:	d1cd      	bne.n	80271ee <_strtod_l+0x46>
 8027252:	3301      	adds	r3, #1
 8027254:	9317      	str	r3, [sp, #92]	; 0x5c
 8027256:	e7bf      	b.n	80271d8 <_strtod_l+0x30>
 8027258:	2a2d      	cmp	r2, #45	; 0x2d
 802725a:	d1c8      	bne.n	80271ee <_strtod_l+0x46>
 802725c:	2201      	movs	r2, #1
 802725e:	920b      	str	r2, [sp, #44]	; 0x2c
 8027260:	1c5a      	adds	r2, r3, #1
 8027262:	9217      	str	r2, [sp, #92]	; 0x5c
 8027264:	785b      	ldrb	r3, [r3, #1]
 8027266:	2b00      	cmp	r3, #0
 8027268:	d1c3      	bne.n	80271f2 <_strtod_l+0x4a>
 802726a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802726c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027270:	2b00      	cmp	r3, #0
 8027272:	f040 854d 	bne.w	8027d10 <_strtod_l+0xb68>
 8027276:	ec49 8b10 	vmov	d0, r8, r9
 802727a:	e7e3      	b.n	8027244 <_strtod_l+0x9c>
 802727c:	2200      	movs	r2, #0
 802727e:	e7ee      	b.n	802725e <_strtod_l+0xb6>
 8027280:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027282:	b13a      	cbz	r2, 8027294 <_strtod_l+0xec>
 8027284:	2135      	movs	r1, #53	; 0x35
 8027286:	a81a      	add	r0, sp, #104	; 0x68
 8027288:	f002 ff62 	bl	802a150 <__copybits>
 802728c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802728e:	4620      	mov	r0, r4
 8027290:	f002 fb26 	bl	80298e0 <_Bfree>
 8027294:	3d01      	subs	r5, #1
 8027296:	2d05      	cmp	r5, #5
 8027298:	d807      	bhi.n	80272aa <_strtod_l+0x102>
 802729a:	e8df f005 	tbb	[pc, r5]
 802729e:	0b0e      	.short	0x0b0e
 80272a0:	030e1d18 	.word	0x030e1d18
 80272a4:	f04f 0900 	mov.w	r9, #0
 80272a8:	46c8      	mov	r8, r9
 80272aa:	073b      	lsls	r3, r7, #28
 80272ac:	d5c0      	bpl.n	8027230 <_strtod_l+0x88>
 80272ae:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80272b2:	e7bd      	b.n	8027230 <_strtod_l+0x88>
 80272b4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80272b8:	e7f7      	b.n	80272aa <_strtod_l+0x102>
 80272ba:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80272be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80272c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80272c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80272c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80272cc:	e7ed      	b.n	80272aa <_strtod_l+0x102>
 80272ce:	f8df 918c 	ldr.w	r9, [pc, #396]	; 802745c <_strtod_l+0x2b4>
 80272d2:	f04f 0800 	mov.w	r8, #0
 80272d6:	e7e8      	b.n	80272aa <_strtod_l+0x102>
 80272d8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80272dc:	f04f 38ff 	mov.w	r8, #4294967295
 80272e0:	e7e3      	b.n	80272aa <_strtod_l+0x102>
 80272e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80272e4:	1c5a      	adds	r2, r3, #1
 80272e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80272e8:	785b      	ldrb	r3, [r3, #1]
 80272ea:	2b30      	cmp	r3, #48	; 0x30
 80272ec:	d0f9      	beq.n	80272e2 <_strtod_l+0x13a>
 80272ee:	2b00      	cmp	r3, #0
 80272f0:	d09e      	beq.n	8027230 <_strtod_l+0x88>
 80272f2:	2301      	movs	r3, #1
 80272f4:	9306      	str	r3, [sp, #24]
 80272f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80272f8:	930c      	str	r3, [sp, #48]	; 0x30
 80272fa:	2300      	movs	r3, #0
 80272fc:	9304      	str	r3, [sp, #16]
 80272fe:	930a      	str	r3, [sp, #40]	; 0x28
 8027300:	461e      	mov	r6, r3
 8027302:	220a      	movs	r2, #10
 8027304:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027306:	f890 b000 	ldrb.w	fp, [r0]
 802730a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 802730e:	b2d9      	uxtb	r1, r3
 8027310:	2909      	cmp	r1, #9
 8027312:	d92b      	bls.n	802736c <_strtod_l+0x1c4>
 8027314:	9908      	ldr	r1, [sp, #32]
 8027316:	462a      	mov	r2, r5
 8027318:	f003 f939 	bl	802a58e <strncmp>
 802731c:	2800      	cmp	r0, #0
 802731e:	d035      	beq.n	802738c <_strtod_l+0x1e4>
 8027320:	2000      	movs	r0, #0
 8027322:	465a      	mov	r2, fp
 8027324:	4633      	mov	r3, r6
 8027326:	4683      	mov	fp, r0
 8027328:	4601      	mov	r1, r0
 802732a:	2a65      	cmp	r2, #101	; 0x65
 802732c:	d001      	beq.n	8027332 <_strtod_l+0x18a>
 802732e:	2a45      	cmp	r2, #69	; 0x45
 8027330:	d118      	bne.n	8027364 <_strtod_l+0x1bc>
 8027332:	b91b      	cbnz	r3, 802733c <_strtod_l+0x194>
 8027334:	9b06      	ldr	r3, [sp, #24]
 8027336:	4303      	orrs	r3, r0
 8027338:	d097      	beq.n	802726a <_strtod_l+0xc2>
 802733a:	2300      	movs	r3, #0
 802733c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8027340:	f10a 0201 	add.w	r2, sl, #1
 8027344:	9217      	str	r2, [sp, #92]	; 0x5c
 8027346:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802734a:	2a2b      	cmp	r2, #43	; 0x2b
 802734c:	d077      	beq.n	802743e <_strtod_l+0x296>
 802734e:	2a2d      	cmp	r2, #45	; 0x2d
 8027350:	d07d      	beq.n	802744e <_strtod_l+0x2a6>
 8027352:	f04f 0e00 	mov.w	lr, #0
 8027356:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 802735a:	2d09      	cmp	r5, #9
 802735c:	f240 8084 	bls.w	8027468 <_strtod_l+0x2c0>
 8027360:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027364:	2500      	movs	r5, #0
 8027366:	e09f      	b.n	80274a8 <_strtod_l+0x300>
 8027368:	2300      	movs	r3, #0
 802736a:	e7c3      	b.n	80272f4 <_strtod_l+0x14c>
 802736c:	2e08      	cmp	r6, #8
 802736e:	bfd5      	itete	le
 8027370:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8027372:	9904      	ldrgt	r1, [sp, #16]
 8027374:	fb02 3301 	mlale	r3, r2, r1, r3
 8027378:	fb02 3301 	mlagt	r3, r2, r1, r3
 802737c:	f100 0001 	add.w	r0, r0, #1
 8027380:	bfd4      	ite	le
 8027382:	930a      	strle	r3, [sp, #40]	; 0x28
 8027384:	9304      	strgt	r3, [sp, #16]
 8027386:	3601      	adds	r6, #1
 8027388:	9017      	str	r0, [sp, #92]	; 0x5c
 802738a:	e7bb      	b.n	8027304 <_strtod_l+0x15c>
 802738c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802738e:	195a      	adds	r2, r3, r5
 8027390:	9217      	str	r2, [sp, #92]	; 0x5c
 8027392:	5d5a      	ldrb	r2, [r3, r5]
 8027394:	b3ae      	cbz	r6, 8027402 <_strtod_l+0x25a>
 8027396:	4683      	mov	fp, r0
 8027398:	4633      	mov	r3, r6
 802739a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802739e:	2909      	cmp	r1, #9
 80273a0:	d912      	bls.n	80273c8 <_strtod_l+0x220>
 80273a2:	2101      	movs	r1, #1
 80273a4:	e7c1      	b.n	802732a <_strtod_l+0x182>
 80273a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80273a8:	1c5a      	adds	r2, r3, #1
 80273aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80273ac:	785a      	ldrb	r2, [r3, #1]
 80273ae:	3001      	adds	r0, #1
 80273b0:	2a30      	cmp	r2, #48	; 0x30
 80273b2:	d0f8      	beq.n	80273a6 <_strtod_l+0x1fe>
 80273b4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80273b8:	2b08      	cmp	r3, #8
 80273ba:	f200 84b0 	bhi.w	8027d1e <_strtod_l+0xb76>
 80273be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80273c0:	930c      	str	r3, [sp, #48]	; 0x30
 80273c2:	4683      	mov	fp, r0
 80273c4:	2000      	movs	r0, #0
 80273c6:	4603      	mov	r3, r0
 80273c8:	3a30      	subs	r2, #48	; 0x30
 80273ca:	f100 0101 	add.w	r1, r0, #1
 80273ce:	d012      	beq.n	80273f6 <_strtod_l+0x24e>
 80273d0:	448b      	add	fp, r1
 80273d2:	eb00 0c03 	add.w	ip, r0, r3
 80273d6:	4619      	mov	r1, r3
 80273d8:	250a      	movs	r5, #10
 80273da:	4561      	cmp	r1, ip
 80273dc:	d113      	bne.n	8027406 <_strtod_l+0x25e>
 80273de:	1819      	adds	r1, r3, r0
 80273e0:	2908      	cmp	r1, #8
 80273e2:	f103 0301 	add.w	r3, r3, #1
 80273e6:	4403      	add	r3, r0
 80273e8:	dc1d      	bgt.n	8027426 <_strtod_l+0x27e>
 80273ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80273ec:	210a      	movs	r1, #10
 80273ee:	fb01 2200 	mla	r2, r1, r0, r2
 80273f2:	920a      	str	r2, [sp, #40]	; 0x28
 80273f4:	2100      	movs	r1, #0
 80273f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80273f8:	1c50      	adds	r0, r2, #1
 80273fa:	9017      	str	r0, [sp, #92]	; 0x5c
 80273fc:	7852      	ldrb	r2, [r2, #1]
 80273fe:	4608      	mov	r0, r1
 8027400:	e7cb      	b.n	802739a <_strtod_l+0x1f2>
 8027402:	4630      	mov	r0, r6
 8027404:	e7d4      	b.n	80273b0 <_strtod_l+0x208>
 8027406:	2908      	cmp	r1, #8
 8027408:	dc04      	bgt.n	8027414 <_strtod_l+0x26c>
 802740a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802740c:	436f      	muls	r7, r5
 802740e:	970a      	str	r7, [sp, #40]	; 0x28
 8027410:	3101      	adds	r1, #1
 8027412:	e7e2      	b.n	80273da <_strtod_l+0x232>
 8027414:	f101 0e01 	add.w	lr, r1, #1
 8027418:	f1be 0f10 	cmp.w	lr, #16
 802741c:	bfde      	ittt	le
 802741e:	9f04      	ldrle	r7, [sp, #16]
 8027420:	436f      	mulle	r7, r5
 8027422:	9704      	strle	r7, [sp, #16]
 8027424:	e7f4      	b.n	8027410 <_strtod_l+0x268>
 8027426:	2b10      	cmp	r3, #16
 8027428:	bfdf      	itttt	le
 802742a:	9804      	ldrle	r0, [sp, #16]
 802742c:	210a      	movle	r1, #10
 802742e:	fb01 2200 	mlale	r2, r1, r0, r2
 8027432:	9204      	strle	r2, [sp, #16]
 8027434:	e7de      	b.n	80273f4 <_strtod_l+0x24c>
 8027436:	f04f 0b00 	mov.w	fp, #0
 802743a:	2101      	movs	r1, #1
 802743c:	e77a      	b.n	8027334 <_strtod_l+0x18c>
 802743e:	f04f 0e00 	mov.w	lr, #0
 8027442:	f10a 0202 	add.w	r2, sl, #2
 8027446:	9217      	str	r2, [sp, #92]	; 0x5c
 8027448:	f89a 2002 	ldrb.w	r2, [sl, #2]
 802744c:	e783      	b.n	8027356 <_strtod_l+0x1ae>
 802744e:	f04f 0e01 	mov.w	lr, #1
 8027452:	e7f6      	b.n	8027442 <_strtod_l+0x29a>
 8027454:	0802ec24 	.word	0x0802ec24
 8027458:	0802e970 	.word	0x0802e970
 802745c:	7ff00000 	.word	0x7ff00000
 8027460:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027462:	1c55      	adds	r5, r2, #1
 8027464:	9517      	str	r5, [sp, #92]	; 0x5c
 8027466:	7852      	ldrb	r2, [r2, #1]
 8027468:	2a30      	cmp	r2, #48	; 0x30
 802746a:	d0f9      	beq.n	8027460 <_strtod_l+0x2b8>
 802746c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8027470:	2d08      	cmp	r5, #8
 8027472:	f63f af77 	bhi.w	8027364 <_strtod_l+0x1bc>
 8027476:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 802747a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802747c:	9208      	str	r2, [sp, #32]
 802747e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027480:	1c55      	adds	r5, r2, #1
 8027482:	9517      	str	r5, [sp, #92]	; 0x5c
 8027484:	7852      	ldrb	r2, [r2, #1]
 8027486:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 802748a:	2f09      	cmp	r7, #9
 802748c:	d937      	bls.n	80274fe <_strtod_l+0x356>
 802748e:	9f08      	ldr	r7, [sp, #32]
 8027490:	1bed      	subs	r5, r5, r7
 8027492:	2d08      	cmp	r5, #8
 8027494:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8027498:	dc02      	bgt.n	80274a0 <_strtod_l+0x2f8>
 802749a:	4565      	cmp	r5, ip
 802749c:	bfa8      	it	ge
 802749e:	4665      	movge	r5, ip
 80274a0:	f1be 0f00 	cmp.w	lr, #0
 80274a4:	d000      	beq.n	80274a8 <_strtod_l+0x300>
 80274a6:	426d      	negs	r5, r5
 80274a8:	2b00      	cmp	r3, #0
 80274aa:	d14f      	bne.n	802754c <_strtod_l+0x3a4>
 80274ac:	9b06      	ldr	r3, [sp, #24]
 80274ae:	4303      	orrs	r3, r0
 80274b0:	f47f aebe 	bne.w	8027230 <_strtod_l+0x88>
 80274b4:	2900      	cmp	r1, #0
 80274b6:	f47f aed8 	bne.w	802726a <_strtod_l+0xc2>
 80274ba:	2a69      	cmp	r2, #105	; 0x69
 80274bc:	d027      	beq.n	802750e <_strtod_l+0x366>
 80274be:	dc24      	bgt.n	802750a <_strtod_l+0x362>
 80274c0:	2a49      	cmp	r2, #73	; 0x49
 80274c2:	d024      	beq.n	802750e <_strtod_l+0x366>
 80274c4:	2a4e      	cmp	r2, #78	; 0x4e
 80274c6:	f47f aed0 	bne.w	802726a <_strtod_l+0xc2>
 80274ca:	499b      	ldr	r1, [pc, #620]	; (8027738 <_strtod_l+0x590>)
 80274cc:	a817      	add	r0, sp, #92	; 0x5c
 80274ce:	f002 f873 	bl	80295b8 <__match>
 80274d2:	2800      	cmp	r0, #0
 80274d4:	f43f aec9 	beq.w	802726a <_strtod_l+0xc2>
 80274d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80274da:	781b      	ldrb	r3, [r3, #0]
 80274dc:	2b28      	cmp	r3, #40	; 0x28
 80274de:	d12d      	bne.n	802753c <_strtod_l+0x394>
 80274e0:	4996      	ldr	r1, [pc, #600]	; (802773c <_strtod_l+0x594>)
 80274e2:	aa1a      	add	r2, sp, #104	; 0x68
 80274e4:	a817      	add	r0, sp, #92	; 0x5c
 80274e6:	f002 f87b 	bl	80295e0 <__hexnan>
 80274ea:	2805      	cmp	r0, #5
 80274ec:	d126      	bne.n	802753c <_strtod_l+0x394>
 80274ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80274f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80274f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80274f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80274fc:	e698      	b.n	8027230 <_strtod_l+0x88>
 80274fe:	250a      	movs	r5, #10
 8027500:	fb05 250c 	mla	r5, r5, ip, r2
 8027504:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8027508:	e7b9      	b.n	802747e <_strtod_l+0x2d6>
 802750a:	2a6e      	cmp	r2, #110	; 0x6e
 802750c:	e7db      	b.n	80274c6 <_strtod_l+0x31e>
 802750e:	498c      	ldr	r1, [pc, #560]	; (8027740 <_strtod_l+0x598>)
 8027510:	a817      	add	r0, sp, #92	; 0x5c
 8027512:	f002 f851 	bl	80295b8 <__match>
 8027516:	2800      	cmp	r0, #0
 8027518:	f43f aea7 	beq.w	802726a <_strtod_l+0xc2>
 802751c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802751e:	4989      	ldr	r1, [pc, #548]	; (8027744 <_strtod_l+0x59c>)
 8027520:	3b01      	subs	r3, #1
 8027522:	a817      	add	r0, sp, #92	; 0x5c
 8027524:	9317      	str	r3, [sp, #92]	; 0x5c
 8027526:	f002 f847 	bl	80295b8 <__match>
 802752a:	b910      	cbnz	r0, 8027532 <_strtod_l+0x38a>
 802752c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802752e:	3301      	adds	r3, #1
 8027530:	9317      	str	r3, [sp, #92]	; 0x5c
 8027532:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8027758 <_strtod_l+0x5b0>
 8027536:	f04f 0800 	mov.w	r8, #0
 802753a:	e679      	b.n	8027230 <_strtod_l+0x88>
 802753c:	4882      	ldr	r0, [pc, #520]	; (8027748 <_strtod_l+0x5a0>)
 802753e:	f002 ffdb 	bl	802a4f8 <nan>
 8027542:	ed8d 0b04 	vstr	d0, [sp, #16]
 8027546:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802754a:	e671      	b.n	8027230 <_strtod_l+0x88>
 802754c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8027550:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027554:	eba5 020b 	sub.w	r2, r5, fp
 8027558:	2e00      	cmp	r6, #0
 802755a:	bf08      	it	eq
 802755c:	461e      	moveq	r6, r3
 802755e:	2b10      	cmp	r3, #16
 8027560:	ed8d 7b08 	vstr	d7, [sp, #32]
 8027564:	9206      	str	r2, [sp, #24]
 8027566:	461a      	mov	r2, r3
 8027568:	bfa8      	it	ge
 802756a:	2210      	movge	r2, #16
 802756c:	2b09      	cmp	r3, #9
 802756e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8027572:	dd0e      	ble.n	8027592 <_strtod_l+0x3ea>
 8027574:	4975      	ldr	r1, [pc, #468]	; (802774c <_strtod_l+0x5a4>)
 8027576:	eddd 7a04 	vldr	s15, [sp, #16]
 802757a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802757e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8027582:	ed9d 5b08 	vldr	d5, [sp, #32]
 8027586:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802758a:	eea5 7b06 	vfma.f64	d7, d5, d6
 802758e:	ec59 8b17 	vmov	r8, r9, d7
 8027592:	2b0f      	cmp	r3, #15
 8027594:	dc37      	bgt.n	8027606 <_strtod_l+0x45e>
 8027596:	9906      	ldr	r1, [sp, #24]
 8027598:	2900      	cmp	r1, #0
 802759a:	f43f ae49 	beq.w	8027230 <_strtod_l+0x88>
 802759e:	dd23      	ble.n	80275e8 <_strtod_l+0x440>
 80275a0:	2916      	cmp	r1, #22
 80275a2:	dc0b      	bgt.n	80275bc <_strtod_l+0x414>
 80275a4:	4b69      	ldr	r3, [pc, #420]	; (802774c <_strtod_l+0x5a4>)
 80275a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80275aa:	ed93 7b00 	vldr	d7, [r3]
 80275ae:	ec49 8b16 	vmov	d6, r8, r9
 80275b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80275b6:	ec59 8b17 	vmov	r8, r9, d7
 80275ba:	e639      	b.n	8027230 <_strtod_l+0x88>
 80275bc:	9806      	ldr	r0, [sp, #24]
 80275be:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80275c2:	4281      	cmp	r1, r0
 80275c4:	db1f      	blt.n	8027606 <_strtod_l+0x45e>
 80275c6:	4a61      	ldr	r2, [pc, #388]	; (802774c <_strtod_l+0x5a4>)
 80275c8:	f1c3 030f 	rsb	r3, r3, #15
 80275cc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80275d0:	ed91 7b00 	vldr	d7, [r1]
 80275d4:	ec49 8b16 	vmov	d6, r8, r9
 80275d8:	1ac3      	subs	r3, r0, r3
 80275da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80275de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80275e2:	ed92 6b00 	vldr	d6, [r2]
 80275e6:	e7e4      	b.n	80275b2 <_strtod_l+0x40a>
 80275e8:	9906      	ldr	r1, [sp, #24]
 80275ea:	3116      	adds	r1, #22
 80275ec:	db0b      	blt.n	8027606 <_strtod_l+0x45e>
 80275ee:	4b57      	ldr	r3, [pc, #348]	; (802774c <_strtod_l+0x5a4>)
 80275f0:	ebab 0505 	sub.w	r5, fp, r5
 80275f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80275f8:	ed95 7b00 	vldr	d7, [r5]
 80275fc:	ec49 8b16 	vmov	d6, r8, r9
 8027600:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027604:	e7d7      	b.n	80275b6 <_strtod_l+0x40e>
 8027606:	9906      	ldr	r1, [sp, #24]
 8027608:	1a9a      	subs	r2, r3, r2
 802760a:	440a      	add	r2, r1
 802760c:	2a00      	cmp	r2, #0
 802760e:	dd74      	ble.n	80276fa <_strtod_l+0x552>
 8027610:	f012 000f 	ands.w	r0, r2, #15
 8027614:	d00a      	beq.n	802762c <_strtod_l+0x484>
 8027616:	494d      	ldr	r1, [pc, #308]	; (802774c <_strtod_l+0x5a4>)
 8027618:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802761c:	ed91 7b00 	vldr	d7, [r1]
 8027620:	ec49 8b16 	vmov	d6, r8, r9
 8027624:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027628:	ec59 8b17 	vmov	r8, r9, d7
 802762c:	f032 020f 	bics.w	r2, r2, #15
 8027630:	d04f      	beq.n	80276d2 <_strtod_l+0x52a>
 8027632:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8027636:	dd22      	ble.n	802767e <_strtod_l+0x4d6>
 8027638:	2500      	movs	r5, #0
 802763a:	462e      	mov	r6, r5
 802763c:	950a      	str	r5, [sp, #40]	; 0x28
 802763e:	462f      	mov	r7, r5
 8027640:	2322      	movs	r3, #34	; 0x22
 8027642:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8027758 <_strtod_l+0x5b0>
 8027646:	6023      	str	r3, [r4, #0]
 8027648:	f04f 0800 	mov.w	r8, #0
 802764c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802764e:	2b00      	cmp	r3, #0
 8027650:	f43f adee 	beq.w	8027230 <_strtod_l+0x88>
 8027654:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027656:	4620      	mov	r0, r4
 8027658:	f002 f942 	bl	80298e0 <_Bfree>
 802765c:	4639      	mov	r1, r7
 802765e:	4620      	mov	r0, r4
 8027660:	f002 f93e 	bl	80298e0 <_Bfree>
 8027664:	4631      	mov	r1, r6
 8027666:	4620      	mov	r0, r4
 8027668:	f002 f93a 	bl	80298e0 <_Bfree>
 802766c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802766e:	4620      	mov	r0, r4
 8027670:	f002 f936 	bl	80298e0 <_Bfree>
 8027674:	4629      	mov	r1, r5
 8027676:	4620      	mov	r0, r4
 8027678:	f002 f932 	bl	80298e0 <_Bfree>
 802767c:	e5d8      	b.n	8027230 <_strtod_l+0x88>
 802767e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8027682:	2000      	movs	r0, #0
 8027684:	4f32      	ldr	r7, [pc, #200]	; (8027750 <_strtod_l+0x5a8>)
 8027686:	1112      	asrs	r2, r2, #4
 8027688:	4601      	mov	r1, r0
 802768a:	2a01      	cmp	r2, #1
 802768c:	dc24      	bgt.n	80276d8 <_strtod_l+0x530>
 802768e:	b108      	cbz	r0, 8027694 <_strtod_l+0x4ec>
 8027690:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8027694:	4a2e      	ldr	r2, [pc, #184]	; (8027750 <_strtod_l+0x5a8>)
 8027696:	482f      	ldr	r0, [pc, #188]	; (8027754 <_strtod_l+0x5ac>)
 8027698:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 802769c:	ed91 7b00 	vldr	d7, [r1]
 80276a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80276a4:	ec49 8b16 	vmov	d6, r8, r9
 80276a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80276ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80276b0:	9905      	ldr	r1, [sp, #20]
 80276b2:	4a29      	ldr	r2, [pc, #164]	; (8027758 <_strtod_l+0x5b0>)
 80276b4:	400a      	ands	r2, r1
 80276b6:	4282      	cmp	r2, r0
 80276b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80276bc:	d8bc      	bhi.n	8027638 <_strtod_l+0x490>
 80276be:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80276c2:	4282      	cmp	r2, r0
 80276c4:	bf86      	itte	hi
 80276c6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 802775c <_strtod_l+0x5b4>
 80276ca:	f04f 38ff 	movhi.w	r8, #4294967295
 80276ce:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80276d2:	2200      	movs	r2, #0
 80276d4:	9204      	str	r2, [sp, #16]
 80276d6:	e07f      	b.n	80277d8 <_strtod_l+0x630>
 80276d8:	f012 0f01 	tst.w	r2, #1
 80276dc:	d00a      	beq.n	80276f4 <_strtod_l+0x54c>
 80276de:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80276e2:	ed90 7b00 	vldr	d7, [r0]
 80276e6:	ed9d 6b04 	vldr	d6, [sp, #16]
 80276ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80276ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80276f2:	2001      	movs	r0, #1
 80276f4:	3101      	adds	r1, #1
 80276f6:	1052      	asrs	r2, r2, #1
 80276f8:	e7c7      	b.n	802768a <_strtod_l+0x4e2>
 80276fa:	d0ea      	beq.n	80276d2 <_strtod_l+0x52a>
 80276fc:	4252      	negs	r2, r2
 80276fe:	f012 000f 	ands.w	r0, r2, #15
 8027702:	d00a      	beq.n	802771a <_strtod_l+0x572>
 8027704:	4911      	ldr	r1, [pc, #68]	; (802774c <_strtod_l+0x5a4>)
 8027706:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802770a:	ed91 7b00 	vldr	d7, [r1]
 802770e:	ec49 8b16 	vmov	d6, r8, r9
 8027712:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027716:	ec59 8b17 	vmov	r8, r9, d7
 802771a:	1112      	asrs	r2, r2, #4
 802771c:	d0d9      	beq.n	80276d2 <_strtod_l+0x52a>
 802771e:	2a1f      	cmp	r2, #31
 8027720:	dd1e      	ble.n	8027760 <_strtod_l+0x5b8>
 8027722:	2500      	movs	r5, #0
 8027724:	462e      	mov	r6, r5
 8027726:	950a      	str	r5, [sp, #40]	; 0x28
 8027728:	462f      	mov	r7, r5
 802772a:	2322      	movs	r3, #34	; 0x22
 802772c:	f04f 0800 	mov.w	r8, #0
 8027730:	f04f 0900 	mov.w	r9, #0
 8027734:	6023      	str	r3, [r4, #0]
 8027736:	e789      	b.n	802764c <_strtod_l+0x4a4>
 8027738:	0802e942 	.word	0x0802e942
 802773c:	0802e984 	.word	0x0802e984
 8027740:	0802e93a 	.word	0x0802e93a
 8027744:	0802eac4 	.word	0x0802eac4
 8027748:	0802e91f 	.word	0x0802e91f
 802774c:	0802ecc0 	.word	0x0802ecc0
 8027750:	0802ec98 	.word	0x0802ec98
 8027754:	7ca00000 	.word	0x7ca00000
 8027758:	7ff00000 	.word	0x7ff00000
 802775c:	7fefffff 	.word	0x7fefffff
 8027760:	f012 0110 	ands.w	r1, r2, #16
 8027764:	bf18      	it	ne
 8027766:	216a      	movne	r1, #106	; 0x6a
 8027768:	e9cd 8908 	strd	r8, r9, [sp, #32]
 802776c:	9104      	str	r1, [sp, #16]
 802776e:	49c0      	ldr	r1, [pc, #768]	; (8027a70 <_strtod_l+0x8c8>)
 8027770:	2000      	movs	r0, #0
 8027772:	07d7      	lsls	r7, r2, #31
 8027774:	d508      	bpl.n	8027788 <_strtod_l+0x5e0>
 8027776:	ed9d 6b08 	vldr	d6, [sp, #32]
 802777a:	ed91 7b00 	vldr	d7, [r1]
 802777e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027782:	ed8d 7b08 	vstr	d7, [sp, #32]
 8027786:	2001      	movs	r0, #1
 8027788:	1052      	asrs	r2, r2, #1
 802778a:	f101 0108 	add.w	r1, r1, #8
 802778e:	d1f0      	bne.n	8027772 <_strtod_l+0x5ca>
 8027790:	b108      	cbz	r0, 8027796 <_strtod_l+0x5ee>
 8027792:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8027796:	9a04      	ldr	r2, [sp, #16]
 8027798:	b1ba      	cbz	r2, 80277ca <_strtod_l+0x622>
 802779a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802779e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80277a2:	2a00      	cmp	r2, #0
 80277a4:	4649      	mov	r1, r9
 80277a6:	dd10      	ble.n	80277ca <_strtod_l+0x622>
 80277a8:	2a1f      	cmp	r2, #31
 80277aa:	f340 8132 	ble.w	8027a12 <_strtod_l+0x86a>
 80277ae:	2a34      	cmp	r2, #52	; 0x34
 80277b0:	bfde      	ittt	le
 80277b2:	3a20      	suble	r2, #32
 80277b4:	f04f 30ff 	movle.w	r0, #4294967295
 80277b8:	fa00 f202 	lslle.w	r2, r0, r2
 80277bc:	f04f 0800 	mov.w	r8, #0
 80277c0:	bfcc      	ite	gt
 80277c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80277c6:	ea02 0901 	andle.w	r9, r2, r1
 80277ca:	ec49 8b17 	vmov	d7, r8, r9
 80277ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80277d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80277d6:	d0a4      	beq.n	8027722 <_strtod_l+0x57a>
 80277d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80277da:	9200      	str	r2, [sp, #0]
 80277dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80277de:	4632      	mov	r2, r6
 80277e0:	4620      	mov	r0, r4
 80277e2:	f002 f8e9 	bl	80299b8 <__s2b>
 80277e6:	900a      	str	r0, [sp, #40]	; 0x28
 80277e8:	2800      	cmp	r0, #0
 80277ea:	f43f af25 	beq.w	8027638 <_strtod_l+0x490>
 80277ee:	9b06      	ldr	r3, [sp, #24]
 80277f0:	ebab 0505 	sub.w	r5, fp, r5
 80277f4:	2b00      	cmp	r3, #0
 80277f6:	bfb4      	ite	lt
 80277f8:	462b      	movlt	r3, r5
 80277fa:	2300      	movge	r3, #0
 80277fc:	930c      	str	r3, [sp, #48]	; 0x30
 80277fe:	9b06      	ldr	r3, [sp, #24]
 8027800:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8027a58 <_strtod_l+0x8b0>
 8027804:	ed9f ab96 	vldr	d10, [pc, #600]	; 8027a60 <_strtod_l+0x8b8>
 8027808:	ed9f bb97 	vldr	d11, [pc, #604]	; 8027a68 <_strtod_l+0x8c0>
 802780c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027810:	2500      	movs	r5, #0
 8027812:	9312      	str	r3, [sp, #72]	; 0x48
 8027814:	462e      	mov	r6, r5
 8027816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027818:	4620      	mov	r0, r4
 802781a:	6859      	ldr	r1, [r3, #4]
 802781c:	f002 f820 	bl	8029860 <_Balloc>
 8027820:	4607      	mov	r7, r0
 8027822:	2800      	cmp	r0, #0
 8027824:	f43f af0c 	beq.w	8027640 <_strtod_l+0x498>
 8027828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802782a:	691a      	ldr	r2, [r3, #16]
 802782c:	3202      	adds	r2, #2
 802782e:	f103 010c 	add.w	r1, r3, #12
 8027832:	0092      	lsls	r2, r2, #2
 8027834:	300c      	adds	r0, #12
 8027836:	f7fe fbc1 	bl	8025fbc <memcpy>
 802783a:	ec49 8b10 	vmov	d0, r8, r9
 802783e:	aa1a      	add	r2, sp, #104	; 0x68
 8027840:	a919      	add	r1, sp, #100	; 0x64
 8027842:	4620      	mov	r0, r4
 8027844:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8027848:	f002 fbf2 	bl	802a030 <__d2b>
 802784c:	9018      	str	r0, [sp, #96]	; 0x60
 802784e:	2800      	cmp	r0, #0
 8027850:	f43f aef6 	beq.w	8027640 <_strtod_l+0x498>
 8027854:	2101      	movs	r1, #1
 8027856:	4620      	mov	r0, r4
 8027858:	f002 f948 	bl	8029aec <__i2b>
 802785c:	4606      	mov	r6, r0
 802785e:	2800      	cmp	r0, #0
 8027860:	f43f aeee 	beq.w	8027640 <_strtod_l+0x498>
 8027864:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027866:	991a      	ldr	r1, [sp, #104]	; 0x68
 8027868:	2b00      	cmp	r3, #0
 802786a:	bfab      	itete	ge
 802786c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 802786e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8027870:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8027874:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8027878:	bfac      	ite	ge
 802787a:	eb03 0b02 	addge.w	fp, r3, r2
 802787e:	eba2 0a03 	sublt.w	sl, r2, r3
 8027882:	9a04      	ldr	r2, [sp, #16]
 8027884:	1a9b      	subs	r3, r3, r2
 8027886:	440b      	add	r3, r1
 8027888:	4a7a      	ldr	r2, [pc, #488]	; (8027a74 <_strtod_l+0x8cc>)
 802788a:	3b01      	subs	r3, #1
 802788c:	4293      	cmp	r3, r2
 802788e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8027892:	f280 80d1 	bge.w	8027a38 <_strtod_l+0x890>
 8027896:	1ad2      	subs	r2, r2, r3
 8027898:	2a1f      	cmp	r2, #31
 802789a:	eba1 0102 	sub.w	r1, r1, r2
 802789e:	f04f 0001 	mov.w	r0, #1
 80278a2:	f300 80bd 	bgt.w	8027a20 <_strtod_l+0x878>
 80278a6:	fa00 f302 	lsl.w	r3, r0, r2
 80278aa:	930e      	str	r3, [sp, #56]	; 0x38
 80278ac:	2300      	movs	r3, #0
 80278ae:	930d      	str	r3, [sp, #52]	; 0x34
 80278b0:	eb0b 0301 	add.w	r3, fp, r1
 80278b4:	9a04      	ldr	r2, [sp, #16]
 80278b6:	459b      	cmp	fp, r3
 80278b8:	448a      	add	sl, r1
 80278ba:	4492      	add	sl, r2
 80278bc:	465a      	mov	r2, fp
 80278be:	bfa8      	it	ge
 80278c0:	461a      	movge	r2, r3
 80278c2:	4552      	cmp	r2, sl
 80278c4:	bfa8      	it	ge
 80278c6:	4652      	movge	r2, sl
 80278c8:	2a00      	cmp	r2, #0
 80278ca:	bfc2      	ittt	gt
 80278cc:	1a9b      	subgt	r3, r3, r2
 80278ce:	ebaa 0a02 	subgt.w	sl, sl, r2
 80278d2:	ebab 0b02 	subgt.w	fp, fp, r2
 80278d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80278d8:	2a00      	cmp	r2, #0
 80278da:	dd18      	ble.n	802790e <_strtod_l+0x766>
 80278dc:	4631      	mov	r1, r6
 80278de:	4620      	mov	r0, r4
 80278e0:	9315      	str	r3, [sp, #84]	; 0x54
 80278e2:	f002 f9bf 	bl	8029c64 <__pow5mult>
 80278e6:	4606      	mov	r6, r0
 80278e8:	2800      	cmp	r0, #0
 80278ea:	f43f aea9 	beq.w	8027640 <_strtod_l+0x498>
 80278ee:	4601      	mov	r1, r0
 80278f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80278f2:	4620      	mov	r0, r4
 80278f4:	f002 f910 	bl	8029b18 <__multiply>
 80278f8:	9014      	str	r0, [sp, #80]	; 0x50
 80278fa:	2800      	cmp	r0, #0
 80278fc:	f43f aea0 	beq.w	8027640 <_strtod_l+0x498>
 8027900:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027902:	4620      	mov	r0, r4
 8027904:	f001 ffec 	bl	80298e0 <_Bfree>
 8027908:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802790a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802790c:	9218      	str	r2, [sp, #96]	; 0x60
 802790e:	2b00      	cmp	r3, #0
 8027910:	f300 8097 	bgt.w	8027a42 <_strtod_l+0x89a>
 8027914:	9b06      	ldr	r3, [sp, #24]
 8027916:	2b00      	cmp	r3, #0
 8027918:	dd08      	ble.n	802792c <_strtod_l+0x784>
 802791a:	4639      	mov	r1, r7
 802791c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802791e:	4620      	mov	r0, r4
 8027920:	f002 f9a0 	bl	8029c64 <__pow5mult>
 8027924:	4607      	mov	r7, r0
 8027926:	2800      	cmp	r0, #0
 8027928:	f43f ae8a 	beq.w	8027640 <_strtod_l+0x498>
 802792c:	f1ba 0f00 	cmp.w	sl, #0
 8027930:	dd08      	ble.n	8027944 <_strtod_l+0x79c>
 8027932:	4639      	mov	r1, r7
 8027934:	4652      	mov	r2, sl
 8027936:	4620      	mov	r0, r4
 8027938:	f002 f9ee 	bl	8029d18 <__lshift>
 802793c:	4607      	mov	r7, r0
 802793e:	2800      	cmp	r0, #0
 8027940:	f43f ae7e 	beq.w	8027640 <_strtod_l+0x498>
 8027944:	f1bb 0f00 	cmp.w	fp, #0
 8027948:	dd08      	ble.n	802795c <_strtod_l+0x7b4>
 802794a:	4631      	mov	r1, r6
 802794c:	465a      	mov	r2, fp
 802794e:	4620      	mov	r0, r4
 8027950:	f002 f9e2 	bl	8029d18 <__lshift>
 8027954:	4606      	mov	r6, r0
 8027956:	2800      	cmp	r0, #0
 8027958:	f43f ae72 	beq.w	8027640 <_strtod_l+0x498>
 802795c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802795e:	463a      	mov	r2, r7
 8027960:	4620      	mov	r0, r4
 8027962:	f002 fa61 	bl	8029e28 <__mdiff>
 8027966:	4605      	mov	r5, r0
 8027968:	2800      	cmp	r0, #0
 802796a:	f43f ae69 	beq.w	8027640 <_strtod_l+0x498>
 802796e:	2300      	movs	r3, #0
 8027970:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8027974:	60c3      	str	r3, [r0, #12]
 8027976:	4631      	mov	r1, r6
 8027978:	f002 fa3a 	bl	8029df0 <__mcmp>
 802797c:	2800      	cmp	r0, #0
 802797e:	da7f      	bge.n	8027a80 <_strtod_l+0x8d8>
 8027980:	ea5a 0308 	orrs.w	r3, sl, r8
 8027984:	f040 80a5 	bne.w	8027ad2 <_strtod_l+0x92a>
 8027988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802798c:	2b00      	cmp	r3, #0
 802798e:	f040 80a0 	bne.w	8027ad2 <_strtod_l+0x92a>
 8027992:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8027996:	0d1b      	lsrs	r3, r3, #20
 8027998:	051b      	lsls	r3, r3, #20
 802799a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802799e:	f240 8098 	bls.w	8027ad2 <_strtod_l+0x92a>
 80279a2:	696b      	ldr	r3, [r5, #20]
 80279a4:	b91b      	cbnz	r3, 80279ae <_strtod_l+0x806>
 80279a6:	692b      	ldr	r3, [r5, #16]
 80279a8:	2b01      	cmp	r3, #1
 80279aa:	f340 8092 	ble.w	8027ad2 <_strtod_l+0x92a>
 80279ae:	4629      	mov	r1, r5
 80279b0:	2201      	movs	r2, #1
 80279b2:	4620      	mov	r0, r4
 80279b4:	f002 f9b0 	bl	8029d18 <__lshift>
 80279b8:	4631      	mov	r1, r6
 80279ba:	4605      	mov	r5, r0
 80279bc:	f002 fa18 	bl	8029df0 <__mcmp>
 80279c0:	2800      	cmp	r0, #0
 80279c2:	f340 8086 	ble.w	8027ad2 <_strtod_l+0x92a>
 80279c6:	9904      	ldr	r1, [sp, #16]
 80279c8:	4a2b      	ldr	r2, [pc, #172]	; (8027a78 <_strtod_l+0x8d0>)
 80279ca:	464b      	mov	r3, r9
 80279cc:	2900      	cmp	r1, #0
 80279ce:	f000 80a1 	beq.w	8027b14 <_strtod_l+0x96c>
 80279d2:	ea02 0109 	and.w	r1, r2, r9
 80279d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80279da:	f300 809b 	bgt.w	8027b14 <_strtod_l+0x96c>
 80279de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80279e2:	f77f aea2 	ble.w	802772a <_strtod_l+0x582>
 80279e6:	4a25      	ldr	r2, [pc, #148]	; (8027a7c <_strtod_l+0x8d4>)
 80279e8:	2300      	movs	r3, #0
 80279ea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80279ee:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80279f2:	ec49 8b17 	vmov	d7, r8, r9
 80279f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80279fa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80279fe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8027a02:	4313      	orrs	r3, r2
 8027a04:	bf08      	it	eq
 8027a06:	2322      	moveq	r3, #34	; 0x22
 8027a08:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8027a0c:	bf08      	it	eq
 8027a0e:	6023      	streq	r3, [r4, #0]
 8027a10:	e620      	b.n	8027654 <_strtod_l+0x4ac>
 8027a12:	f04f 31ff 	mov.w	r1, #4294967295
 8027a16:	fa01 f202 	lsl.w	r2, r1, r2
 8027a1a:	ea02 0808 	and.w	r8, r2, r8
 8027a1e:	e6d4      	b.n	80277ca <_strtod_l+0x622>
 8027a20:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8027a24:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8027a28:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8027a2c:	33e2      	adds	r3, #226	; 0xe2
 8027a2e:	fa00 f303 	lsl.w	r3, r0, r3
 8027a32:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8027a36:	e73b      	b.n	80278b0 <_strtod_l+0x708>
 8027a38:	2000      	movs	r0, #0
 8027a3a:	2301      	movs	r3, #1
 8027a3c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8027a40:	e736      	b.n	80278b0 <_strtod_l+0x708>
 8027a42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027a44:	461a      	mov	r2, r3
 8027a46:	4620      	mov	r0, r4
 8027a48:	f002 f966 	bl	8029d18 <__lshift>
 8027a4c:	9018      	str	r0, [sp, #96]	; 0x60
 8027a4e:	2800      	cmp	r0, #0
 8027a50:	f47f af60 	bne.w	8027914 <_strtod_l+0x76c>
 8027a54:	e5f4      	b.n	8027640 <_strtod_l+0x498>
 8027a56:	bf00      	nop
 8027a58:	94a03595 	.word	0x94a03595
 8027a5c:	3fcfffff 	.word	0x3fcfffff
 8027a60:	94a03595 	.word	0x94a03595
 8027a64:	3fdfffff 	.word	0x3fdfffff
 8027a68:	35afe535 	.word	0x35afe535
 8027a6c:	3fe00000 	.word	0x3fe00000
 8027a70:	0802e998 	.word	0x0802e998
 8027a74:	fffffc02 	.word	0xfffffc02
 8027a78:	7ff00000 	.word	0x7ff00000
 8027a7c:	39500000 	.word	0x39500000
 8027a80:	46cb      	mov	fp, r9
 8027a82:	d165      	bne.n	8027b50 <_strtod_l+0x9a8>
 8027a84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027a88:	f1ba 0f00 	cmp.w	sl, #0
 8027a8c:	d02a      	beq.n	8027ae4 <_strtod_l+0x93c>
 8027a8e:	4aaa      	ldr	r2, [pc, #680]	; (8027d38 <_strtod_l+0xb90>)
 8027a90:	4293      	cmp	r3, r2
 8027a92:	d12b      	bne.n	8027aec <_strtod_l+0x944>
 8027a94:	9b04      	ldr	r3, [sp, #16]
 8027a96:	4641      	mov	r1, r8
 8027a98:	b1fb      	cbz	r3, 8027ada <_strtod_l+0x932>
 8027a9a:	4aa8      	ldr	r2, [pc, #672]	; (8027d3c <_strtod_l+0xb94>)
 8027a9c:	ea09 0202 	and.w	r2, r9, r2
 8027aa0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8027aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8027aa8:	d81a      	bhi.n	8027ae0 <_strtod_l+0x938>
 8027aaa:	0d12      	lsrs	r2, r2, #20
 8027aac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8027ab0:	fa00 f303 	lsl.w	r3, r0, r3
 8027ab4:	4299      	cmp	r1, r3
 8027ab6:	d119      	bne.n	8027aec <_strtod_l+0x944>
 8027ab8:	4ba1      	ldr	r3, [pc, #644]	; (8027d40 <_strtod_l+0xb98>)
 8027aba:	459b      	cmp	fp, r3
 8027abc:	d102      	bne.n	8027ac4 <_strtod_l+0x91c>
 8027abe:	3101      	adds	r1, #1
 8027ac0:	f43f adbe 	beq.w	8027640 <_strtod_l+0x498>
 8027ac4:	4b9d      	ldr	r3, [pc, #628]	; (8027d3c <_strtod_l+0xb94>)
 8027ac6:	ea0b 0303 	and.w	r3, fp, r3
 8027aca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8027ace:	f04f 0800 	mov.w	r8, #0
 8027ad2:	9b04      	ldr	r3, [sp, #16]
 8027ad4:	2b00      	cmp	r3, #0
 8027ad6:	d186      	bne.n	80279e6 <_strtod_l+0x83e>
 8027ad8:	e5bc      	b.n	8027654 <_strtod_l+0x4ac>
 8027ada:	f04f 33ff 	mov.w	r3, #4294967295
 8027ade:	e7e9      	b.n	8027ab4 <_strtod_l+0x90c>
 8027ae0:	4603      	mov	r3, r0
 8027ae2:	e7e7      	b.n	8027ab4 <_strtod_l+0x90c>
 8027ae4:	ea53 0308 	orrs.w	r3, r3, r8
 8027ae8:	f43f af6d 	beq.w	80279c6 <_strtod_l+0x81e>
 8027aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027aee:	b1db      	cbz	r3, 8027b28 <_strtod_l+0x980>
 8027af0:	ea13 0f0b 	tst.w	r3, fp
 8027af4:	d0ed      	beq.n	8027ad2 <_strtod_l+0x92a>
 8027af6:	9a04      	ldr	r2, [sp, #16]
 8027af8:	4640      	mov	r0, r8
 8027afa:	4649      	mov	r1, r9
 8027afc:	f1ba 0f00 	cmp.w	sl, #0
 8027b00:	d016      	beq.n	8027b30 <_strtod_l+0x988>
 8027b02:	f7ff fb35 	bl	8027170 <sulp>
 8027b06:	ed9d 7b08 	vldr	d7, [sp, #32]
 8027b0a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8027b0e:	ec59 8b17 	vmov	r8, r9, d7
 8027b12:	e7de      	b.n	8027ad2 <_strtod_l+0x92a>
 8027b14:	4013      	ands	r3, r2
 8027b16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8027b1a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8027b1e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8027b22:	f04f 38ff 	mov.w	r8, #4294967295
 8027b26:	e7d4      	b.n	8027ad2 <_strtod_l+0x92a>
 8027b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027b2a:	ea13 0f08 	tst.w	r3, r8
 8027b2e:	e7e1      	b.n	8027af4 <_strtod_l+0x94c>
 8027b30:	f7ff fb1e 	bl	8027170 <sulp>
 8027b34:	ed9d 7b08 	vldr	d7, [sp, #32]
 8027b38:	ee37 7b40 	vsub.f64	d7, d7, d0
 8027b3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8027b40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b48:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8027b4c:	d1c1      	bne.n	8027ad2 <_strtod_l+0x92a>
 8027b4e:	e5ec      	b.n	802772a <_strtod_l+0x582>
 8027b50:	4631      	mov	r1, r6
 8027b52:	4628      	mov	r0, r5
 8027b54:	f002 fac8 	bl	802a0e8 <__ratio>
 8027b58:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8027b5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b64:	d867      	bhi.n	8027c36 <_strtod_l+0xa8e>
 8027b66:	f1ba 0f00 	cmp.w	sl, #0
 8027b6a:	d044      	beq.n	8027bf6 <_strtod_l+0xa4e>
 8027b6c:	4b75      	ldr	r3, [pc, #468]	; (8027d44 <_strtod_l+0xb9c>)
 8027b6e:	2200      	movs	r2, #0
 8027b70:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8027b74:	4971      	ldr	r1, [pc, #452]	; (8027d3c <_strtod_l+0xb94>)
 8027b76:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8027d50 <_strtod_l+0xba8>
 8027b7a:	ea0b 0001 	and.w	r0, fp, r1
 8027b7e:	4560      	cmp	r0, ip
 8027b80:	900d      	str	r0, [sp, #52]	; 0x34
 8027b82:	f040 808b 	bne.w	8027c9c <_strtod_l+0xaf4>
 8027b86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8027b8a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8027b8e:	ec49 8b10 	vmov	d0, r8, r9
 8027b92:	ec43 2b1c 	vmov	d12, r2, r3
 8027b96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8027b9a:	f002 f9cd 	bl	8029f38 <__ulp>
 8027b9e:	ec49 8b1d 	vmov	d13, r8, r9
 8027ba2:	eeac db00 	vfma.f64	d13, d12, d0
 8027ba6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8027baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027bac:	4963      	ldr	r1, [pc, #396]	; (8027d3c <_strtod_l+0xb94>)
 8027bae:	4a66      	ldr	r2, [pc, #408]	; (8027d48 <_strtod_l+0xba0>)
 8027bb0:	4019      	ands	r1, r3
 8027bb2:	4291      	cmp	r1, r2
 8027bb4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8027bb8:	d947      	bls.n	8027c4a <_strtod_l+0xaa2>
 8027bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027bbc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8027bc0:	4293      	cmp	r3, r2
 8027bc2:	d103      	bne.n	8027bcc <_strtod_l+0xa24>
 8027bc4:	9b08      	ldr	r3, [sp, #32]
 8027bc6:	3301      	adds	r3, #1
 8027bc8:	f43f ad3a 	beq.w	8027640 <_strtod_l+0x498>
 8027bcc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8027d40 <_strtod_l+0xb98>
 8027bd0:	f04f 38ff 	mov.w	r8, #4294967295
 8027bd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027bd6:	4620      	mov	r0, r4
 8027bd8:	f001 fe82 	bl	80298e0 <_Bfree>
 8027bdc:	4639      	mov	r1, r7
 8027bde:	4620      	mov	r0, r4
 8027be0:	f001 fe7e 	bl	80298e0 <_Bfree>
 8027be4:	4631      	mov	r1, r6
 8027be6:	4620      	mov	r0, r4
 8027be8:	f001 fe7a 	bl	80298e0 <_Bfree>
 8027bec:	4629      	mov	r1, r5
 8027bee:	4620      	mov	r0, r4
 8027bf0:	f001 fe76 	bl	80298e0 <_Bfree>
 8027bf4:	e60f      	b.n	8027816 <_strtod_l+0x66e>
 8027bf6:	f1b8 0f00 	cmp.w	r8, #0
 8027bfa:	d112      	bne.n	8027c22 <_strtod_l+0xa7a>
 8027bfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027c00:	b9b3      	cbnz	r3, 8027c30 <_strtod_l+0xa88>
 8027c02:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8027c06:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c0e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8027c12:	d401      	bmi.n	8027c18 <_strtod_l+0xa70>
 8027c14:	ee20 8b08 	vmul.f64	d8, d0, d8
 8027c18:	eeb1 7b48 	vneg.f64	d7, d8
 8027c1c:	ec53 2b17 	vmov	r2, r3, d7
 8027c20:	e7a8      	b.n	8027b74 <_strtod_l+0x9cc>
 8027c22:	f1b8 0f01 	cmp.w	r8, #1
 8027c26:	d103      	bne.n	8027c30 <_strtod_l+0xa88>
 8027c28:	f1b9 0f00 	cmp.w	r9, #0
 8027c2c:	f43f ad7d 	beq.w	802772a <_strtod_l+0x582>
 8027c30:	4b46      	ldr	r3, [pc, #280]	; (8027d4c <_strtod_l+0xba4>)
 8027c32:	2200      	movs	r2, #0
 8027c34:	e79c      	b.n	8027b70 <_strtod_l+0x9c8>
 8027c36:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8027c3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8027c3e:	f1ba 0f00 	cmp.w	sl, #0
 8027c42:	d0e9      	beq.n	8027c18 <_strtod_l+0xa70>
 8027c44:	ec53 2b18 	vmov	r2, r3, d8
 8027c48:	e794      	b.n	8027b74 <_strtod_l+0x9cc>
 8027c4a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8027c4e:	9b04      	ldr	r3, [sp, #16]
 8027c50:	2b00      	cmp	r3, #0
 8027c52:	d1bf      	bne.n	8027bd4 <_strtod_l+0xa2c>
 8027c54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8027c58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027c5a:	0d1b      	lsrs	r3, r3, #20
 8027c5c:	051b      	lsls	r3, r3, #20
 8027c5e:	429a      	cmp	r2, r3
 8027c60:	d1b8      	bne.n	8027bd4 <_strtod_l+0xa2c>
 8027c62:	ec51 0b18 	vmov	r0, r1, d8
 8027c66:	f7d8 fd17 	bl	8000698 <__aeabi_d2lz>
 8027c6a:	f7d8 fccf 	bl	800060c <__aeabi_l2d>
 8027c6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027c72:	ec41 0b17 	vmov	d7, r0, r1
 8027c76:	ea43 0308 	orr.w	r3, r3, r8
 8027c7a:	ea53 030a 	orrs.w	r3, r3, sl
 8027c7e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8027c82:	d03e      	beq.n	8027d02 <_strtod_l+0xb5a>
 8027c84:	eeb4 8bca 	vcmpe.f64	d8, d10
 8027c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c8c:	f53f ace2 	bmi.w	8027654 <_strtod_l+0x4ac>
 8027c90:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8027c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c98:	dd9c      	ble.n	8027bd4 <_strtod_l+0xa2c>
 8027c9a:	e4db      	b.n	8027654 <_strtod_l+0x4ac>
 8027c9c:	9904      	ldr	r1, [sp, #16]
 8027c9e:	b301      	cbz	r1, 8027ce2 <_strtod_l+0xb3a>
 8027ca0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8027ca2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8027ca6:	d81c      	bhi.n	8027ce2 <_strtod_l+0xb3a>
 8027ca8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8027d30 <_strtod_l+0xb88>
 8027cac:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cb4:	d811      	bhi.n	8027cda <_strtod_l+0xb32>
 8027cb6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8027cba:	ee18 3a10 	vmov	r3, s16
 8027cbe:	2b01      	cmp	r3, #1
 8027cc0:	bf38      	it	cc
 8027cc2:	2301      	movcc	r3, #1
 8027cc4:	ee08 3a10 	vmov	s16, r3
 8027cc8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8027ccc:	f1ba 0f00 	cmp.w	sl, #0
 8027cd0:	d114      	bne.n	8027cfc <_strtod_l+0xb54>
 8027cd2:	eeb1 7b48 	vneg.f64	d7, d8
 8027cd6:	ec53 2b17 	vmov	r2, r3, d7
 8027cda:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027cdc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8027ce0:	1a0b      	subs	r3, r1, r0
 8027ce2:	ed9d 0b08 	vldr	d0, [sp, #32]
 8027ce6:	ec43 2b1c 	vmov	d12, r2, r3
 8027cea:	f002 f925 	bl	8029f38 <__ulp>
 8027cee:	ed9d 7b08 	vldr	d7, [sp, #32]
 8027cf2:	eeac 7b00 	vfma.f64	d7, d12, d0
 8027cf6:	ec59 8b17 	vmov	r8, r9, d7
 8027cfa:	e7a8      	b.n	8027c4e <_strtod_l+0xaa6>
 8027cfc:	ec53 2b18 	vmov	r2, r3, d8
 8027d00:	e7eb      	b.n	8027cda <_strtod_l+0xb32>
 8027d02:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8027d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d0a:	f57f af63 	bpl.w	8027bd4 <_strtod_l+0xa2c>
 8027d0e:	e4a1      	b.n	8027654 <_strtod_l+0x4ac>
 8027d10:	2300      	movs	r3, #0
 8027d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8027d14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027d16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027d18:	6013      	str	r3, [r2, #0]
 8027d1a:	f7ff ba8d 	b.w	8027238 <_strtod_l+0x90>
 8027d1e:	2a65      	cmp	r2, #101	; 0x65
 8027d20:	f43f ab89 	beq.w	8027436 <_strtod_l+0x28e>
 8027d24:	2a45      	cmp	r2, #69	; 0x45
 8027d26:	f43f ab86 	beq.w	8027436 <_strtod_l+0x28e>
 8027d2a:	2101      	movs	r1, #1
 8027d2c:	f7ff bbbe 	b.w	80274ac <_strtod_l+0x304>
 8027d30:	ffc00000 	.word	0xffc00000
 8027d34:	41dfffff 	.word	0x41dfffff
 8027d38:	000fffff 	.word	0x000fffff
 8027d3c:	7ff00000 	.word	0x7ff00000
 8027d40:	7fefffff 	.word	0x7fefffff
 8027d44:	3ff00000 	.word	0x3ff00000
 8027d48:	7c9fffff 	.word	0x7c9fffff
 8027d4c:	bff00000 	.word	0xbff00000
 8027d50:	7fe00000 	.word	0x7fe00000

08027d54 <_strtod_r>:
 8027d54:	4b01      	ldr	r3, [pc, #4]	; (8027d5c <_strtod_r+0x8>)
 8027d56:	f7ff ba27 	b.w	80271a8 <_strtod_l>
 8027d5a:	bf00      	nop
 8027d5c:	200000e8 	.word	0x200000e8

08027d60 <_strtol_l.isra.0>:
 8027d60:	2b01      	cmp	r3, #1
 8027d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d66:	d001      	beq.n	8027d6c <_strtol_l.isra.0+0xc>
 8027d68:	2b24      	cmp	r3, #36	; 0x24
 8027d6a:	d906      	bls.n	8027d7a <_strtol_l.isra.0+0x1a>
 8027d6c:	f7fe f8da 	bl	8025f24 <__errno>
 8027d70:	2316      	movs	r3, #22
 8027d72:	6003      	str	r3, [r0, #0]
 8027d74:	2000      	movs	r0, #0
 8027d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027d7a:	4f3a      	ldr	r7, [pc, #232]	; (8027e64 <_strtol_l.isra.0+0x104>)
 8027d7c:	468e      	mov	lr, r1
 8027d7e:	4676      	mov	r6, lr
 8027d80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8027d84:	5de5      	ldrb	r5, [r4, r7]
 8027d86:	f015 0508 	ands.w	r5, r5, #8
 8027d8a:	d1f8      	bne.n	8027d7e <_strtol_l.isra.0+0x1e>
 8027d8c:	2c2d      	cmp	r4, #45	; 0x2d
 8027d8e:	d134      	bne.n	8027dfa <_strtol_l.isra.0+0x9a>
 8027d90:	f89e 4000 	ldrb.w	r4, [lr]
 8027d94:	f04f 0801 	mov.w	r8, #1
 8027d98:	f106 0e02 	add.w	lr, r6, #2
 8027d9c:	2b00      	cmp	r3, #0
 8027d9e:	d05c      	beq.n	8027e5a <_strtol_l.isra.0+0xfa>
 8027da0:	2b10      	cmp	r3, #16
 8027da2:	d10c      	bne.n	8027dbe <_strtol_l.isra.0+0x5e>
 8027da4:	2c30      	cmp	r4, #48	; 0x30
 8027da6:	d10a      	bne.n	8027dbe <_strtol_l.isra.0+0x5e>
 8027da8:	f89e 4000 	ldrb.w	r4, [lr]
 8027dac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8027db0:	2c58      	cmp	r4, #88	; 0x58
 8027db2:	d14d      	bne.n	8027e50 <_strtol_l.isra.0+0xf0>
 8027db4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8027db8:	2310      	movs	r3, #16
 8027dba:	f10e 0e02 	add.w	lr, lr, #2
 8027dbe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8027dc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027dc6:	2600      	movs	r6, #0
 8027dc8:	fbbc f9f3 	udiv	r9, ip, r3
 8027dcc:	4635      	mov	r5, r6
 8027dce:	fb03 ca19 	mls	sl, r3, r9, ip
 8027dd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8027dd6:	2f09      	cmp	r7, #9
 8027dd8:	d818      	bhi.n	8027e0c <_strtol_l.isra.0+0xac>
 8027dda:	463c      	mov	r4, r7
 8027ddc:	42a3      	cmp	r3, r4
 8027dde:	dd24      	ble.n	8027e2a <_strtol_l.isra.0+0xca>
 8027de0:	2e00      	cmp	r6, #0
 8027de2:	db1f      	blt.n	8027e24 <_strtol_l.isra.0+0xc4>
 8027de4:	45a9      	cmp	r9, r5
 8027de6:	d31d      	bcc.n	8027e24 <_strtol_l.isra.0+0xc4>
 8027de8:	d101      	bne.n	8027dee <_strtol_l.isra.0+0x8e>
 8027dea:	45a2      	cmp	sl, r4
 8027dec:	db1a      	blt.n	8027e24 <_strtol_l.isra.0+0xc4>
 8027dee:	fb05 4503 	mla	r5, r5, r3, r4
 8027df2:	2601      	movs	r6, #1
 8027df4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8027df8:	e7eb      	b.n	8027dd2 <_strtol_l.isra.0+0x72>
 8027dfa:	2c2b      	cmp	r4, #43	; 0x2b
 8027dfc:	bf08      	it	eq
 8027dfe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8027e02:	46a8      	mov	r8, r5
 8027e04:	bf08      	it	eq
 8027e06:	f106 0e02 	addeq.w	lr, r6, #2
 8027e0a:	e7c7      	b.n	8027d9c <_strtol_l.isra.0+0x3c>
 8027e0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8027e10:	2f19      	cmp	r7, #25
 8027e12:	d801      	bhi.n	8027e18 <_strtol_l.isra.0+0xb8>
 8027e14:	3c37      	subs	r4, #55	; 0x37
 8027e16:	e7e1      	b.n	8027ddc <_strtol_l.isra.0+0x7c>
 8027e18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8027e1c:	2f19      	cmp	r7, #25
 8027e1e:	d804      	bhi.n	8027e2a <_strtol_l.isra.0+0xca>
 8027e20:	3c57      	subs	r4, #87	; 0x57
 8027e22:	e7db      	b.n	8027ddc <_strtol_l.isra.0+0x7c>
 8027e24:	f04f 36ff 	mov.w	r6, #4294967295
 8027e28:	e7e4      	b.n	8027df4 <_strtol_l.isra.0+0x94>
 8027e2a:	2e00      	cmp	r6, #0
 8027e2c:	da05      	bge.n	8027e3a <_strtol_l.isra.0+0xda>
 8027e2e:	2322      	movs	r3, #34	; 0x22
 8027e30:	6003      	str	r3, [r0, #0]
 8027e32:	4665      	mov	r5, ip
 8027e34:	b942      	cbnz	r2, 8027e48 <_strtol_l.isra.0+0xe8>
 8027e36:	4628      	mov	r0, r5
 8027e38:	e79d      	b.n	8027d76 <_strtol_l.isra.0+0x16>
 8027e3a:	f1b8 0f00 	cmp.w	r8, #0
 8027e3e:	d000      	beq.n	8027e42 <_strtol_l.isra.0+0xe2>
 8027e40:	426d      	negs	r5, r5
 8027e42:	2a00      	cmp	r2, #0
 8027e44:	d0f7      	beq.n	8027e36 <_strtol_l.isra.0+0xd6>
 8027e46:	b10e      	cbz	r6, 8027e4c <_strtol_l.isra.0+0xec>
 8027e48:	f10e 31ff 	add.w	r1, lr, #4294967295
 8027e4c:	6011      	str	r1, [r2, #0]
 8027e4e:	e7f2      	b.n	8027e36 <_strtol_l.isra.0+0xd6>
 8027e50:	2430      	movs	r4, #48	; 0x30
 8027e52:	2b00      	cmp	r3, #0
 8027e54:	d1b3      	bne.n	8027dbe <_strtol_l.isra.0+0x5e>
 8027e56:	2308      	movs	r3, #8
 8027e58:	e7b1      	b.n	8027dbe <_strtol_l.isra.0+0x5e>
 8027e5a:	2c30      	cmp	r4, #48	; 0x30
 8027e5c:	d0a4      	beq.n	8027da8 <_strtol_l.isra.0+0x48>
 8027e5e:	230a      	movs	r3, #10
 8027e60:	e7ad      	b.n	8027dbe <_strtol_l.isra.0+0x5e>
 8027e62:	bf00      	nop
 8027e64:	0802e9c1 	.word	0x0802e9c1

08027e68 <_strtol_r>:
 8027e68:	f7ff bf7a 	b.w	8027d60 <_strtol_l.isra.0>

08027e6c <__swbuf_r>:
 8027e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027e6e:	460e      	mov	r6, r1
 8027e70:	4614      	mov	r4, r2
 8027e72:	4605      	mov	r5, r0
 8027e74:	b118      	cbz	r0, 8027e7e <__swbuf_r+0x12>
 8027e76:	6983      	ldr	r3, [r0, #24]
 8027e78:	b90b      	cbnz	r3, 8027e7e <__swbuf_r+0x12>
 8027e7a:	f001 f841 	bl	8028f00 <__sinit>
 8027e7e:	4b21      	ldr	r3, [pc, #132]	; (8027f04 <__swbuf_r+0x98>)
 8027e80:	429c      	cmp	r4, r3
 8027e82:	d12b      	bne.n	8027edc <__swbuf_r+0x70>
 8027e84:	686c      	ldr	r4, [r5, #4]
 8027e86:	69a3      	ldr	r3, [r4, #24]
 8027e88:	60a3      	str	r3, [r4, #8]
 8027e8a:	89a3      	ldrh	r3, [r4, #12]
 8027e8c:	071a      	lsls	r2, r3, #28
 8027e8e:	d52f      	bpl.n	8027ef0 <__swbuf_r+0x84>
 8027e90:	6923      	ldr	r3, [r4, #16]
 8027e92:	b36b      	cbz	r3, 8027ef0 <__swbuf_r+0x84>
 8027e94:	6923      	ldr	r3, [r4, #16]
 8027e96:	6820      	ldr	r0, [r4, #0]
 8027e98:	1ac0      	subs	r0, r0, r3
 8027e9a:	6963      	ldr	r3, [r4, #20]
 8027e9c:	b2f6      	uxtb	r6, r6
 8027e9e:	4283      	cmp	r3, r0
 8027ea0:	4637      	mov	r7, r6
 8027ea2:	dc04      	bgt.n	8027eae <__swbuf_r+0x42>
 8027ea4:	4621      	mov	r1, r4
 8027ea6:	4628      	mov	r0, r5
 8027ea8:	f000 ff96 	bl	8028dd8 <_fflush_r>
 8027eac:	bb30      	cbnz	r0, 8027efc <__swbuf_r+0x90>
 8027eae:	68a3      	ldr	r3, [r4, #8]
 8027eb0:	3b01      	subs	r3, #1
 8027eb2:	60a3      	str	r3, [r4, #8]
 8027eb4:	6823      	ldr	r3, [r4, #0]
 8027eb6:	1c5a      	adds	r2, r3, #1
 8027eb8:	6022      	str	r2, [r4, #0]
 8027eba:	701e      	strb	r6, [r3, #0]
 8027ebc:	6963      	ldr	r3, [r4, #20]
 8027ebe:	3001      	adds	r0, #1
 8027ec0:	4283      	cmp	r3, r0
 8027ec2:	d004      	beq.n	8027ece <__swbuf_r+0x62>
 8027ec4:	89a3      	ldrh	r3, [r4, #12]
 8027ec6:	07db      	lsls	r3, r3, #31
 8027ec8:	d506      	bpl.n	8027ed8 <__swbuf_r+0x6c>
 8027eca:	2e0a      	cmp	r6, #10
 8027ecc:	d104      	bne.n	8027ed8 <__swbuf_r+0x6c>
 8027ece:	4621      	mov	r1, r4
 8027ed0:	4628      	mov	r0, r5
 8027ed2:	f000 ff81 	bl	8028dd8 <_fflush_r>
 8027ed6:	b988      	cbnz	r0, 8027efc <__swbuf_r+0x90>
 8027ed8:	4638      	mov	r0, r7
 8027eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027edc:	4b0a      	ldr	r3, [pc, #40]	; (8027f08 <__swbuf_r+0x9c>)
 8027ede:	429c      	cmp	r4, r3
 8027ee0:	d101      	bne.n	8027ee6 <__swbuf_r+0x7a>
 8027ee2:	68ac      	ldr	r4, [r5, #8]
 8027ee4:	e7cf      	b.n	8027e86 <__swbuf_r+0x1a>
 8027ee6:	4b09      	ldr	r3, [pc, #36]	; (8027f0c <__swbuf_r+0xa0>)
 8027ee8:	429c      	cmp	r4, r3
 8027eea:	bf08      	it	eq
 8027eec:	68ec      	ldreq	r4, [r5, #12]
 8027eee:	e7ca      	b.n	8027e86 <__swbuf_r+0x1a>
 8027ef0:	4621      	mov	r1, r4
 8027ef2:	4628      	mov	r0, r5
 8027ef4:	f000 f80c 	bl	8027f10 <__swsetup_r>
 8027ef8:	2800      	cmp	r0, #0
 8027efa:	d0cb      	beq.n	8027e94 <__swbuf_r+0x28>
 8027efc:	f04f 37ff 	mov.w	r7, #4294967295
 8027f00:	e7ea      	b.n	8027ed8 <__swbuf_r+0x6c>
 8027f02:	bf00      	nop
 8027f04:	0802eb78 	.word	0x0802eb78
 8027f08:	0802eb98 	.word	0x0802eb98
 8027f0c:	0802eb58 	.word	0x0802eb58

08027f10 <__swsetup_r>:
 8027f10:	4b32      	ldr	r3, [pc, #200]	; (8027fdc <__swsetup_r+0xcc>)
 8027f12:	b570      	push	{r4, r5, r6, lr}
 8027f14:	681d      	ldr	r5, [r3, #0]
 8027f16:	4606      	mov	r6, r0
 8027f18:	460c      	mov	r4, r1
 8027f1a:	b125      	cbz	r5, 8027f26 <__swsetup_r+0x16>
 8027f1c:	69ab      	ldr	r3, [r5, #24]
 8027f1e:	b913      	cbnz	r3, 8027f26 <__swsetup_r+0x16>
 8027f20:	4628      	mov	r0, r5
 8027f22:	f000 ffed 	bl	8028f00 <__sinit>
 8027f26:	4b2e      	ldr	r3, [pc, #184]	; (8027fe0 <__swsetup_r+0xd0>)
 8027f28:	429c      	cmp	r4, r3
 8027f2a:	d10f      	bne.n	8027f4c <__swsetup_r+0x3c>
 8027f2c:	686c      	ldr	r4, [r5, #4]
 8027f2e:	89a3      	ldrh	r3, [r4, #12]
 8027f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027f34:	0719      	lsls	r1, r3, #28
 8027f36:	d42c      	bmi.n	8027f92 <__swsetup_r+0x82>
 8027f38:	06dd      	lsls	r5, r3, #27
 8027f3a:	d411      	bmi.n	8027f60 <__swsetup_r+0x50>
 8027f3c:	2309      	movs	r3, #9
 8027f3e:	6033      	str	r3, [r6, #0]
 8027f40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027f44:	81a3      	strh	r3, [r4, #12]
 8027f46:	f04f 30ff 	mov.w	r0, #4294967295
 8027f4a:	e03e      	b.n	8027fca <__swsetup_r+0xba>
 8027f4c:	4b25      	ldr	r3, [pc, #148]	; (8027fe4 <__swsetup_r+0xd4>)
 8027f4e:	429c      	cmp	r4, r3
 8027f50:	d101      	bne.n	8027f56 <__swsetup_r+0x46>
 8027f52:	68ac      	ldr	r4, [r5, #8]
 8027f54:	e7eb      	b.n	8027f2e <__swsetup_r+0x1e>
 8027f56:	4b24      	ldr	r3, [pc, #144]	; (8027fe8 <__swsetup_r+0xd8>)
 8027f58:	429c      	cmp	r4, r3
 8027f5a:	bf08      	it	eq
 8027f5c:	68ec      	ldreq	r4, [r5, #12]
 8027f5e:	e7e6      	b.n	8027f2e <__swsetup_r+0x1e>
 8027f60:	0758      	lsls	r0, r3, #29
 8027f62:	d512      	bpl.n	8027f8a <__swsetup_r+0x7a>
 8027f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027f66:	b141      	cbz	r1, 8027f7a <__swsetup_r+0x6a>
 8027f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027f6c:	4299      	cmp	r1, r3
 8027f6e:	d002      	beq.n	8027f76 <__swsetup_r+0x66>
 8027f70:	4630      	mov	r0, r6
 8027f72:	f7fe f839 	bl	8025fe8 <_free_r>
 8027f76:	2300      	movs	r3, #0
 8027f78:	6363      	str	r3, [r4, #52]	; 0x34
 8027f7a:	89a3      	ldrh	r3, [r4, #12]
 8027f7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027f80:	81a3      	strh	r3, [r4, #12]
 8027f82:	2300      	movs	r3, #0
 8027f84:	6063      	str	r3, [r4, #4]
 8027f86:	6923      	ldr	r3, [r4, #16]
 8027f88:	6023      	str	r3, [r4, #0]
 8027f8a:	89a3      	ldrh	r3, [r4, #12]
 8027f8c:	f043 0308 	orr.w	r3, r3, #8
 8027f90:	81a3      	strh	r3, [r4, #12]
 8027f92:	6923      	ldr	r3, [r4, #16]
 8027f94:	b94b      	cbnz	r3, 8027faa <__swsetup_r+0x9a>
 8027f96:	89a3      	ldrh	r3, [r4, #12]
 8027f98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027fa0:	d003      	beq.n	8027faa <__swsetup_r+0x9a>
 8027fa2:	4621      	mov	r1, r4
 8027fa4:	4630      	mov	r0, r6
 8027fa6:	f001 fbe3 	bl	8029770 <__smakebuf_r>
 8027faa:	89a0      	ldrh	r0, [r4, #12]
 8027fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027fb0:	f010 0301 	ands.w	r3, r0, #1
 8027fb4:	d00a      	beq.n	8027fcc <__swsetup_r+0xbc>
 8027fb6:	2300      	movs	r3, #0
 8027fb8:	60a3      	str	r3, [r4, #8]
 8027fba:	6963      	ldr	r3, [r4, #20]
 8027fbc:	425b      	negs	r3, r3
 8027fbe:	61a3      	str	r3, [r4, #24]
 8027fc0:	6923      	ldr	r3, [r4, #16]
 8027fc2:	b943      	cbnz	r3, 8027fd6 <__swsetup_r+0xc6>
 8027fc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027fc8:	d1ba      	bne.n	8027f40 <__swsetup_r+0x30>
 8027fca:	bd70      	pop	{r4, r5, r6, pc}
 8027fcc:	0781      	lsls	r1, r0, #30
 8027fce:	bf58      	it	pl
 8027fd0:	6963      	ldrpl	r3, [r4, #20]
 8027fd2:	60a3      	str	r3, [r4, #8]
 8027fd4:	e7f4      	b.n	8027fc0 <__swsetup_r+0xb0>
 8027fd6:	2000      	movs	r0, #0
 8027fd8:	e7f7      	b.n	8027fca <__swsetup_r+0xba>
 8027fda:	bf00      	nop
 8027fdc:	2000007c 	.word	0x2000007c
 8027fe0:	0802eb78 	.word	0x0802eb78
 8027fe4:	0802eb98 	.word	0x0802eb98
 8027fe8:	0802eb58 	.word	0x0802eb58

08027fec <__register_exitproc>:
 8027fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027ff0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80280ac <__register_exitproc+0xc0>
 8027ff4:	4606      	mov	r6, r0
 8027ff6:	f8d8 0000 	ldr.w	r0, [r8]
 8027ffa:	461f      	mov	r7, r3
 8027ffc:	460d      	mov	r5, r1
 8027ffe:	4691      	mov	r9, r2
 8028000:	f001 fb8f 	bl	8029722 <__retarget_lock_acquire_recursive>
 8028004:	4b25      	ldr	r3, [pc, #148]	; (802809c <__register_exitproc+0xb0>)
 8028006:	681c      	ldr	r4, [r3, #0]
 8028008:	b934      	cbnz	r4, 8028018 <__register_exitproc+0x2c>
 802800a:	4c25      	ldr	r4, [pc, #148]	; (80280a0 <__register_exitproc+0xb4>)
 802800c:	601c      	str	r4, [r3, #0]
 802800e:	4b25      	ldr	r3, [pc, #148]	; (80280a4 <__register_exitproc+0xb8>)
 8028010:	b113      	cbz	r3, 8028018 <__register_exitproc+0x2c>
 8028012:	681b      	ldr	r3, [r3, #0]
 8028014:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028018:	6863      	ldr	r3, [r4, #4]
 802801a:	2b1f      	cmp	r3, #31
 802801c:	dd07      	ble.n	802802e <__register_exitproc+0x42>
 802801e:	f8d8 0000 	ldr.w	r0, [r8]
 8028022:	f001 fb80 	bl	8029726 <__retarget_lock_release_recursive>
 8028026:	f04f 30ff 	mov.w	r0, #4294967295
 802802a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802802e:	b34e      	cbz	r6, 8028084 <__register_exitproc+0x98>
 8028030:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028034:	b988      	cbnz	r0, 802805a <__register_exitproc+0x6e>
 8028036:	4b1c      	ldr	r3, [pc, #112]	; (80280a8 <__register_exitproc+0xbc>)
 8028038:	b923      	cbnz	r3, 8028044 <__register_exitproc+0x58>
 802803a:	f8d8 0000 	ldr.w	r0, [r8]
 802803e:	f001 fb71 	bl	8029724 <__retarget_lock_release>
 8028042:	e7f0      	b.n	8028026 <__register_exitproc+0x3a>
 8028044:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028048:	f7fd ffa8 	bl	8025f9c <malloc>
 802804c:	2800      	cmp	r0, #0
 802804e:	d0f4      	beq.n	802803a <__register_exitproc+0x4e>
 8028050:	2300      	movs	r3, #0
 8028052:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028056:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802805a:	6863      	ldr	r3, [r4, #4]
 802805c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028060:	2201      	movs	r2, #1
 8028062:	409a      	lsls	r2, r3
 8028064:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028068:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802806c:	4313      	orrs	r3, r2
 802806e:	2e02      	cmp	r6, #2
 8028070:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028074:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028078:	bf02      	ittt	eq
 802807a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802807e:	431a      	orreq	r2, r3
 8028080:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8028084:	6863      	ldr	r3, [r4, #4]
 8028086:	f8d8 0000 	ldr.w	r0, [r8]
 802808a:	1c5a      	adds	r2, r3, #1
 802808c:	3302      	adds	r3, #2
 802808e:	6062      	str	r2, [r4, #4]
 8028090:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028094:	f001 fb47 	bl	8029726 <__retarget_lock_release_recursive>
 8028098:	2000      	movs	r0, #0
 802809a:	e7c6      	b.n	802802a <__register_exitproc+0x3e>
 802809c:	20056990 	.word	0x20056990
 80280a0:	20056904 	.word	0x20056904
 80280a4:	0802e96c 	.word	0x0802e96c
 80280a8:	08025f9d 	.word	0x08025f9d
 80280ac:	200000e0 	.word	0x200000e0

080280b0 <quorem>:
 80280b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280b4:	6903      	ldr	r3, [r0, #16]
 80280b6:	690c      	ldr	r4, [r1, #16]
 80280b8:	42a3      	cmp	r3, r4
 80280ba:	4607      	mov	r7, r0
 80280bc:	f2c0 8081 	blt.w	80281c2 <quorem+0x112>
 80280c0:	3c01      	subs	r4, #1
 80280c2:	f101 0814 	add.w	r8, r1, #20
 80280c6:	f100 0514 	add.w	r5, r0, #20
 80280ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80280ce:	9301      	str	r3, [sp, #4]
 80280d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80280d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80280d8:	3301      	adds	r3, #1
 80280da:	429a      	cmp	r2, r3
 80280dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80280e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80280e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80280e8:	d331      	bcc.n	802814e <quorem+0x9e>
 80280ea:	f04f 0e00 	mov.w	lr, #0
 80280ee:	4640      	mov	r0, r8
 80280f0:	46ac      	mov	ip, r5
 80280f2:	46f2      	mov	sl, lr
 80280f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80280f8:	b293      	uxth	r3, r2
 80280fa:	fb06 e303 	mla	r3, r6, r3, lr
 80280fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8028102:	b29b      	uxth	r3, r3
 8028104:	ebaa 0303 	sub.w	r3, sl, r3
 8028108:	0c12      	lsrs	r2, r2, #16
 802810a:	f8dc a000 	ldr.w	sl, [ip]
 802810e:	fb06 e202 	mla	r2, r6, r2, lr
 8028112:	fa13 f38a 	uxtah	r3, r3, sl
 8028116:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802811a:	fa1f fa82 	uxth.w	sl, r2
 802811e:	f8dc 2000 	ldr.w	r2, [ip]
 8028122:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8028126:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802812a:	b29b      	uxth	r3, r3
 802812c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028130:	4581      	cmp	r9, r0
 8028132:	f84c 3b04 	str.w	r3, [ip], #4
 8028136:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802813a:	d2db      	bcs.n	80280f4 <quorem+0x44>
 802813c:	f855 300b 	ldr.w	r3, [r5, fp]
 8028140:	b92b      	cbnz	r3, 802814e <quorem+0x9e>
 8028142:	9b01      	ldr	r3, [sp, #4]
 8028144:	3b04      	subs	r3, #4
 8028146:	429d      	cmp	r5, r3
 8028148:	461a      	mov	r2, r3
 802814a:	d32e      	bcc.n	80281aa <quorem+0xfa>
 802814c:	613c      	str	r4, [r7, #16]
 802814e:	4638      	mov	r0, r7
 8028150:	f001 fe4e 	bl	8029df0 <__mcmp>
 8028154:	2800      	cmp	r0, #0
 8028156:	db24      	blt.n	80281a2 <quorem+0xf2>
 8028158:	3601      	adds	r6, #1
 802815a:	4628      	mov	r0, r5
 802815c:	f04f 0c00 	mov.w	ip, #0
 8028160:	f858 2b04 	ldr.w	r2, [r8], #4
 8028164:	f8d0 e000 	ldr.w	lr, [r0]
 8028168:	b293      	uxth	r3, r2
 802816a:	ebac 0303 	sub.w	r3, ip, r3
 802816e:	0c12      	lsrs	r2, r2, #16
 8028170:	fa13 f38e 	uxtah	r3, r3, lr
 8028174:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8028178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802817c:	b29b      	uxth	r3, r3
 802817e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028182:	45c1      	cmp	r9, r8
 8028184:	f840 3b04 	str.w	r3, [r0], #4
 8028188:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802818c:	d2e8      	bcs.n	8028160 <quorem+0xb0>
 802818e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028196:	b922      	cbnz	r2, 80281a2 <quorem+0xf2>
 8028198:	3b04      	subs	r3, #4
 802819a:	429d      	cmp	r5, r3
 802819c:	461a      	mov	r2, r3
 802819e:	d30a      	bcc.n	80281b6 <quorem+0x106>
 80281a0:	613c      	str	r4, [r7, #16]
 80281a2:	4630      	mov	r0, r6
 80281a4:	b003      	add	sp, #12
 80281a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281aa:	6812      	ldr	r2, [r2, #0]
 80281ac:	3b04      	subs	r3, #4
 80281ae:	2a00      	cmp	r2, #0
 80281b0:	d1cc      	bne.n	802814c <quorem+0x9c>
 80281b2:	3c01      	subs	r4, #1
 80281b4:	e7c7      	b.n	8028146 <quorem+0x96>
 80281b6:	6812      	ldr	r2, [r2, #0]
 80281b8:	3b04      	subs	r3, #4
 80281ba:	2a00      	cmp	r2, #0
 80281bc:	d1f0      	bne.n	80281a0 <quorem+0xf0>
 80281be:	3c01      	subs	r4, #1
 80281c0:	e7eb      	b.n	802819a <quorem+0xea>
 80281c2:	2000      	movs	r0, #0
 80281c4:	e7ee      	b.n	80281a4 <quorem+0xf4>
	...

080281c8 <_dtoa_r>:
 80281c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281cc:	ec59 8b10 	vmov	r8, r9, d0
 80281d0:	b095      	sub	sp, #84	; 0x54
 80281d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80281d4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80281d6:	9107      	str	r1, [sp, #28]
 80281d8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80281dc:	4606      	mov	r6, r0
 80281de:	9209      	str	r2, [sp, #36]	; 0x24
 80281e0:	9310      	str	r3, [sp, #64]	; 0x40
 80281e2:	b975      	cbnz	r5, 8028202 <_dtoa_r+0x3a>
 80281e4:	2010      	movs	r0, #16
 80281e6:	f7fd fed9 	bl	8025f9c <malloc>
 80281ea:	4602      	mov	r2, r0
 80281ec:	6270      	str	r0, [r6, #36]	; 0x24
 80281ee:	b920      	cbnz	r0, 80281fa <_dtoa_r+0x32>
 80281f0:	4bab      	ldr	r3, [pc, #684]	; (80284a0 <_dtoa_r+0x2d8>)
 80281f2:	21ea      	movs	r1, #234	; 0xea
 80281f4:	48ab      	ldr	r0, [pc, #684]	; (80284a4 <_dtoa_r+0x2dc>)
 80281f6:	f7fd fe63 	bl	8025ec0 <__assert_func>
 80281fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80281fe:	6005      	str	r5, [r0, #0]
 8028200:	60c5      	str	r5, [r0, #12]
 8028202:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8028204:	6819      	ldr	r1, [r3, #0]
 8028206:	b151      	cbz	r1, 802821e <_dtoa_r+0x56>
 8028208:	685a      	ldr	r2, [r3, #4]
 802820a:	604a      	str	r2, [r1, #4]
 802820c:	2301      	movs	r3, #1
 802820e:	4093      	lsls	r3, r2
 8028210:	608b      	str	r3, [r1, #8]
 8028212:	4630      	mov	r0, r6
 8028214:	f001 fb64 	bl	80298e0 <_Bfree>
 8028218:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802821a:	2200      	movs	r2, #0
 802821c:	601a      	str	r2, [r3, #0]
 802821e:	f1b9 0300 	subs.w	r3, r9, #0
 8028222:	bfbb      	ittet	lt
 8028224:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8028228:	9303      	strlt	r3, [sp, #12]
 802822a:	2300      	movge	r3, #0
 802822c:	2201      	movlt	r2, #1
 802822e:	bfac      	ite	ge
 8028230:	6023      	strge	r3, [r4, #0]
 8028232:	6022      	strlt	r2, [r4, #0]
 8028234:	4b9c      	ldr	r3, [pc, #624]	; (80284a8 <_dtoa_r+0x2e0>)
 8028236:	9c03      	ldr	r4, [sp, #12]
 8028238:	43a3      	bics	r3, r4
 802823a:	d11a      	bne.n	8028272 <_dtoa_r+0xaa>
 802823c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802823e:	f242 730f 	movw	r3, #9999	; 0x270f
 8028242:	6013      	str	r3, [r2, #0]
 8028244:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8028248:	ea53 0308 	orrs.w	r3, r3, r8
 802824c:	f000 8512 	beq.w	8028c74 <_dtoa_r+0xaac>
 8028250:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028252:	b953      	cbnz	r3, 802826a <_dtoa_r+0xa2>
 8028254:	4b95      	ldr	r3, [pc, #596]	; (80284ac <_dtoa_r+0x2e4>)
 8028256:	e01f      	b.n	8028298 <_dtoa_r+0xd0>
 8028258:	4b95      	ldr	r3, [pc, #596]	; (80284b0 <_dtoa_r+0x2e8>)
 802825a:	9300      	str	r3, [sp, #0]
 802825c:	3308      	adds	r3, #8
 802825e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028260:	6013      	str	r3, [r2, #0]
 8028262:	9800      	ldr	r0, [sp, #0]
 8028264:	b015      	add	sp, #84	; 0x54
 8028266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802826a:	4b90      	ldr	r3, [pc, #576]	; (80284ac <_dtoa_r+0x2e4>)
 802826c:	9300      	str	r3, [sp, #0]
 802826e:	3303      	adds	r3, #3
 8028270:	e7f5      	b.n	802825e <_dtoa_r+0x96>
 8028272:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028276:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802827a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802827e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8028282:	d10b      	bne.n	802829c <_dtoa_r+0xd4>
 8028284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028286:	2301      	movs	r3, #1
 8028288:	6013      	str	r3, [r2, #0]
 802828a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802828c:	2b00      	cmp	r3, #0
 802828e:	f000 84ee 	beq.w	8028c6e <_dtoa_r+0xaa6>
 8028292:	4888      	ldr	r0, [pc, #544]	; (80284b4 <_dtoa_r+0x2ec>)
 8028294:	6018      	str	r0, [r3, #0]
 8028296:	1e43      	subs	r3, r0, #1
 8028298:	9300      	str	r3, [sp, #0]
 802829a:	e7e2      	b.n	8028262 <_dtoa_r+0x9a>
 802829c:	a913      	add	r1, sp, #76	; 0x4c
 802829e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80282a2:	aa12      	add	r2, sp, #72	; 0x48
 80282a4:	4630      	mov	r0, r6
 80282a6:	f001 fec3 	bl	802a030 <__d2b>
 80282aa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80282ae:	4605      	mov	r5, r0
 80282b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80282b2:	2900      	cmp	r1, #0
 80282b4:	d047      	beq.n	8028346 <_dtoa_r+0x17e>
 80282b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80282b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80282bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80282c0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80282c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80282c8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80282cc:	2400      	movs	r4, #0
 80282ce:	ec43 2b16 	vmov	d6, r2, r3
 80282d2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80282d6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8028488 <_dtoa_r+0x2c0>
 80282da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80282de:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8028490 <_dtoa_r+0x2c8>
 80282e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80282e6:	eeb0 7b46 	vmov.f64	d7, d6
 80282ea:	ee06 1a90 	vmov	s13, r1
 80282ee:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80282f2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8028498 <_dtoa_r+0x2d0>
 80282f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80282fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80282fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8028302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028306:	ee16 ba90 	vmov	fp, s13
 802830a:	9411      	str	r4, [sp, #68]	; 0x44
 802830c:	d508      	bpl.n	8028320 <_dtoa_r+0x158>
 802830e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8028312:	eeb4 6b47 	vcmp.f64	d6, d7
 8028316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802831a:	bf18      	it	ne
 802831c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8028320:	f1bb 0f16 	cmp.w	fp, #22
 8028324:	d832      	bhi.n	802838c <_dtoa_r+0x1c4>
 8028326:	4b64      	ldr	r3, [pc, #400]	; (80284b8 <_dtoa_r+0x2f0>)
 8028328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802832c:	ed93 7b00 	vldr	d7, [r3]
 8028330:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8028334:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802833c:	d501      	bpl.n	8028342 <_dtoa_r+0x17a>
 802833e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028342:	2300      	movs	r3, #0
 8028344:	e023      	b.n	802838e <_dtoa_r+0x1c6>
 8028346:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028348:	4401      	add	r1, r0
 802834a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 802834e:	2b20      	cmp	r3, #32
 8028350:	bfc3      	ittte	gt
 8028352:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8028356:	fa04 f303 	lslgt.w	r3, r4, r3
 802835a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 802835e:	f1c3 0320 	rsble	r3, r3, #32
 8028362:	bfc6      	itte	gt
 8028364:	fa28 f804 	lsrgt.w	r8, r8, r4
 8028368:	ea43 0308 	orrgt.w	r3, r3, r8
 802836c:	fa08 f303 	lslle.w	r3, r8, r3
 8028370:	ee07 3a90 	vmov	s15, r3
 8028374:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8028378:	3901      	subs	r1, #1
 802837a:	ed8d 7b00 	vstr	d7, [sp]
 802837e:	9c01      	ldr	r4, [sp, #4]
 8028380:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028384:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8028388:	2401      	movs	r4, #1
 802838a:	e7a0      	b.n	80282ce <_dtoa_r+0x106>
 802838c:	2301      	movs	r3, #1
 802838e:	930f      	str	r3, [sp, #60]	; 0x3c
 8028390:	1a43      	subs	r3, r0, r1
 8028392:	1e5a      	subs	r2, r3, #1
 8028394:	bf45      	ittet	mi
 8028396:	f1c3 0301 	rsbmi	r3, r3, #1
 802839a:	9305      	strmi	r3, [sp, #20]
 802839c:	2300      	movpl	r3, #0
 802839e:	2300      	movmi	r3, #0
 80283a0:	9206      	str	r2, [sp, #24]
 80283a2:	bf54      	ite	pl
 80283a4:	9305      	strpl	r3, [sp, #20]
 80283a6:	9306      	strmi	r3, [sp, #24]
 80283a8:	f1bb 0f00 	cmp.w	fp, #0
 80283ac:	db18      	blt.n	80283e0 <_dtoa_r+0x218>
 80283ae:	9b06      	ldr	r3, [sp, #24]
 80283b0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80283b4:	445b      	add	r3, fp
 80283b6:	9306      	str	r3, [sp, #24]
 80283b8:	2300      	movs	r3, #0
 80283ba:	9a07      	ldr	r2, [sp, #28]
 80283bc:	2a09      	cmp	r2, #9
 80283be:	d849      	bhi.n	8028454 <_dtoa_r+0x28c>
 80283c0:	2a05      	cmp	r2, #5
 80283c2:	bfc4      	itt	gt
 80283c4:	3a04      	subgt	r2, #4
 80283c6:	9207      	strgt	r2, [sp, #28]
 80283c8:	9a07      	ldr	r2, [sp, #28]
 80283ca:	f1a2 0202 	sub.w	r2, r2, #2
 80283ce:	bfcc      	ite	gt
 80283d0:	2400      	movgt	r4, #0
 80283d2:	2401      	movle	r4, #1
 80283d4:	2a03      	cmp	r2, #3
 80283d6:	d848      	bhi.n	802846a <_dtoa_r+0x2a2>
 80283d8:	e8df f002 	tbb	[pc, r2]
 80283dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80283e0:	9b05      	ldr	r3, [sp, #20]
 80283e2:	2200      	movs	r2, #0
 80283e4:	eba3 030b 	sub.w	r3, r3, fp
 80283e8:	9305      	str	r3, [sp, #20]
 80283ea:	920e      	str	r2, [sp, #56]	; 0x38
 80283ec:	f1cb 0300 	rsb	r3, fp, #0
 80283f0:	e7e3      	b.n	80283ba <_dtoa_r+0x1f2>
 80283f2:	2200      	movs	r2, #0
 80283f4:	9208      	str	r2, [sp, #32]
 80283f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80283f8:	2a00      	cmp	r2, #0
 80283fa:	dc39      	bgt.n	8028470 <_dtoa_r+0x2a8>
 80283fc:	f04f 0a01 	mov.w	sl, #1
 8028400:	46d1      	mov	r9, sl
 8028402:	4652      	mov	r2, sl
 8028404:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8028408:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802840a:	2100      	movs	r1, #0
 802840c:	6079      	str	r1, [r7, #4]
 802840e:	2004      	movs	r0, #4
 8028410:	f100 0c14 	add.w	ip, r0, #20
 8028414:	4594      	cmp	ip, r2
 8028416:	6879      	ldr	r1, [r7, #4]
 8028418:	d92f      	bls.n	802847a <_dtoa_r+0x2b2>
 802841a:	4630      	mov	r0, r6
 802841c:	930c      	str	r3, [sp, #48]	; 0x30
 802841e:	f001 fa1f 	bl	8029860 <_Balloc>
 8028422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028424:	9000      	str	r0, [sp, #0]
 8028426:	4602      	mov	r2, r0
 8028428:	2800      	cmp	r0, #0
 802842a:	d149      	bne.n	80284c0 <_dtoa_r+0x2f8>
 802842c:	4b23      	ldr	r3, [pc, #140]	; (80284bc <_dtoa_r+0x2f4>)
 802842e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8028432:	e6df      	b.n	80281f4 <_dtoa_r+0x2c>
 8028434:	2201      	movs	r2, #1
 8028436:	e7dd      	b.n	80283f4 <_dtoa_r+0x22c>
 8028438:	2200      	movs	r2, #0
 802843a:	9208      	str	r2, [sp, #32]
 802843c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802843e:	eb0b 0a02 	add.w	sl, fp, r2
 8028442:	f10a 0901 	add.w	r9, sl, #1
 8028446:	464a      	mov	r2, r9
 8028448:	2a01      	cmp	r2, #1
 802844a:	bfb8      	it	lt
 802844c:	2201      	movlt	r2, #1
 802844e:	e7db      	b.n	8028408 <_dtoa_r+0x240>
 8028450:	2201      	movs	r2, #1
 8028452:	e7f2      	b.n	802843a <_dtoa_r+0x272>
 8028454:	2401      	movs	r4, #1
 8028456:	2200      	movs	r2, #0
 8028458:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802845c:	f04f 3aff 	mov.w	sl, #4294967295
 8028460:	2100      	movs	r1, #0
 8028462:	46d1      	mov	r9, sl
 8028464:	2212      	movs	r2, #18
 8028466:	9109      	str	r1, [sp, #36]	; 0x24
 8028468:	e7ce      	b.n	8028408 <_dtoa_r+0x240>
 802846a:	2201      	movs	r2, #1
 802846c:	9208      	str	r2, [sp, #32]
 802846e:	e7f5      	b.n	802845c <_dtoa_r+0x294>
 8028470:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8028474:	46d1      	mov	r9, sl
 8028476:	4652      	mov	r2, sl
 8028478:	e7c6      	b.n	8028408 <_dtoa_r+0x240>
 802847a:	3101      	adds	r1, #1
 802847c:	6079      	str	r1, [r7, #4]
 802847e:	0040      	lsls	r0, r0, #1
 8028480:	e7c6      	b.n	8028410 <_dtoa_r+0x248>
 8028482:	bf00      	nop
 8028484:	f3af 8000 	nop.w
 8028488:	636f4361 	.word	0x636f4361
 802848c:	3fd287a7 	.word	0x3fd287a7
 8028490:	8b60c8b3 	.word	0x8b60c8b3
 8028494:	3fc68a28 	.word	0x3fc68a28
 8028498:	509f79fb 	.word	0x509f79fb
 802849c:	3fd34413 	.word	0x3fd34413
 80284a0:	0802eace 	.word	0x0802eace
 80284a4:	0802eae5 	.word	0x0802eae5
 80284a8:	7ff00000 	.word	0x7ff00000
 80284ac:	0802eaca 	.word	0x0802eaca
 80284b0:	0802eac1 	.word	0x0802eac1
 80284b4:	0802dc4b 	.word	0x0802dc4b
 80284b8:	0802ecc0 	.word	0x0802ecc0
 80284bc:	0802eb44 	.word	0x0802eb44
 80284c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80284c2:	9900      	ldr	r1, [sp, #0]
 80284c4:	6011      	str	r1, [r2, #0]
 80284c6:	f1b9 0f0e 	cmp.w	r9, #14
 80284ca:	d872      	bhi.n	80285b2 <_dtoa_r+0x3ea>
 80284cc:	2c00      	cmp	r4, #0
 80284ce:	d070      	beq.n	80285b2 <_dtoa_r+0x3ea>
 80284d0:	f1bb 0f00 	cmp.w	fp, #0
 80284d4:	f340 80a6 	ble.w	8028624 <_dtoa_r+0x45c>
 80284d8:	49ca      	ldr	r1, [pc, #808]	; (8028804 <_dtoa_r+0x63c>)
 80284da:	f00b 020f 	and.w	r2, fp, #15
 80284de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80284e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80284e6:	ed92 7b00 	vldr	d7, [r2]
 80284ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80284ee:	f000 808d 	beq.w	802860c <_dtoa_r+0x444>
 80284f2:	4ac5      	ldr	r2, [pc, #788]	; (8028808 <_dtoa_r+0x640>)
 80284f4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80284f8:	ed92 6b08 	vldr	d6, [r2, #32]
 80284fc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8028500:	ed8d 6b02 	vstr	d6, [sp, #8]
 8028504:	f001 010f 	and.w	r1, r1, #15
 8028508:	2203      	movs	r2, #3
 802850a:	48bf      	ldr	r0, [pc, #764]	; (8028808 <_dtoa_r+0x640>)
 802850c:	2900      	cmp	r1, #0
 802850e:	d17f      	bne.n	8028610 <_dtoa_r+0x448>
 8028510:	ed9d 6b02 	vldr	d6, [sp, #8]
 8028514:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8028518:	ed8d 7b02 	vstr	d7, [sp, #8]
 802851c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802851e:	2900      	cmp	r1, #0
 8028520:	f000 80b2 	beq.w	8028688 <_dtoa_r+0x4c0>
 8028524:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8028528:	ed9d 7b02 	vldr	d7, [sp, #8]
 802852c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028534:	f140 80a8 	bpl.w	8028688 <_dtoa_r+0x4c0>
 8028538:	f1b9 0f00 	cmp.w	r9, #0
 802853c:	f000 80a4 	beq.w	8028688 <_dtoa_r+0x4c0>
 8028540:	f1ba 0f00 	cmp.w	sl, #0
 8028544:	dd31      	ble.n	80285aa <_dtoa_r+0x3e2>
 8028546:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802854a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802854e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028552:	f10b 37ff 	add.w	r7, fp, #4294967295
 8028556:	3201      	adds	r2, #1
 8028558:	4650      	mov	r0, sl
 802855a:	ed9d 6b02 	vldr	d6, [sp, #8]
 802855e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8028562:	ee07 2a90 	vmov	s15, r2
 8028566:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802856a:	eea7 5b06 	vfma.f64	d5, d7, d6
 802856e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8028572:	9c03      	ldr	r4, [sp, #12]
 8028574:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8028578:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802857c:	2800      	cmp	r0, #0
 802857e:	f040 8086 	bne.w	802868e <_dtoa_r+0x4c6>
 8028582:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8028586:	ee36 6b47 	vsub.f64	d6, d6, d7
 802858a:	ec42 1b17 	vmov	d7, r1, r2
 802858e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028596:	f300 8272 	bgt.w	8028a7e <_dtoa_r+0x8b6>
 802859a:	eeb1 7b47 	vneg.f64	d7, d7
 802859e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80285a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285a6:	f100 8267 	bmi.w	8028a78 <_dtoa_r+0x8b0>
 80285aa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80285ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80285b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80285b4:	2a00      	cmp	r2, #0
 80285b6:	f2c0 8129 	blt.w	802880c <_dtoa_r+0x644>
 80285ba:	f1bb 0f0e 	cmp.w	fp, #14
 80285be:	f300 8125 	bgt.w	802880c <_dtoa_r+0x644>
 80285c2:	4b90      	ldr	r3, [pc, #576]	; (8028804 <_dtoa_r+0x63c>)
 80285c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80285c8:	ed93 6b00 	vldr	d6, [r3]
 80285cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80285ce:	2b00      	cmp	r3, #0
 80285d0:	f280 80c3 	bge.w	802875a <_dtoa_r+0x592>
 80285d4:	f1b9 0f00 	cmp.w	r9, #0
 80285d8:	f300 80bf 	bgt.w	802875a <_dtoa_r+0x592>
 80285dc:	f040 824c 	bne.w	8028a78 <_dtoa_r+0x8b0>
 80285e0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80285e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80285e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80285ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80285f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285f4:	464c      	mov	r4, r9
 80285f6:	464f      	mov	r7, r9
 80285f8:	f280 8222 	bge.w	8028a40 <_dtoa_r+0x878>
 80285fc:	f8dd 8000 	ldr.w	r8, [sp]
 8028600:	2331      	movs	r3, #49	; 0x31
 8028602:	f808 3b01 	strb.w	r3, [r8], #1
 8028606:	f10b 0b01 	add.w	fp, fp, #1
 802860a:	e21e      	b.n	8028a4a <_dtoa_r+0x882>
 802860c:	2202      	movs	r2, #2
 802860e:	e77c      	b.n	802850a <_dtoa_r+0x342>
 8028610:	07cc      	lsls	r4, r1, #31
 8028612:	d504      	bpl.n	802861e <_dtoa_r+0x456>
 8028614:	ed90 6b00 	vldr	d6, [r0]
 8028618:	3201      	adds	r2, #1
 802861a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802861e:	1049      	asrs	r1, r1, #1
 8028620:	3008      	adds	r0, #8
 8028622:	e773      	b.n	802850c <_dtoa_r+0x344>
 8028624:	d02e      	beq.n	8028684 <_dtoa_r+0x4bc>
 8028626:	f1cb 0100 	rsb	r1, fp, #0
 802862a:	4a76      	ldr	r2, [pc, #472]	; (8028804 <_dtoa_r+0x63c>)
 802862c:	f001 000f 	and.w	r0, r1, #15
 8028630:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028634:	ed92 7b00 	vldr	d7, [r2]
 8028638:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802863c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028640:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8028644:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8028648:	e9cd 7802 	strd	r7, r8, [sp, #8]
 802864c:	486e      	ldr	r0, [pc, #440]	; (8028808 <_dtoa_r+0x640>)
 802864e:	1109      	asrs	r1, r1, #4
 8028650:	2400      	movs	r4, #0
 8028652:	2202      	movs	r2, #2
 8028654:	b939      	cbnz	r1, 8028666 <_dtoa_r+0x49e>
 8028656:	2c00      	cmp	r4, #0
 8028658:	f43f af60 	beq.w	802851c <_dtoa_r+0x354>
 802865c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028664:	e75a      	b.n	802851c <_dtoa_r+0x354>
 8028666:	07cf      	lsls	r7, r1, #31
 8028668:	d509      	bpl.n	802867e <_dtoa_r+0x4b6>
 802866a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 802866e:	ed90 7b00 	vldr	d7, [r0]
 8028672:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028676:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802867a:	3201      	adds	r2, #1
 802867c:	2401      	movs	r4, #1
 802867e:	1049      	asrs	r1, r1, #1
 8028680:	3008      	adds	r0, #8
 8028682:	e7e7      	b.n	8028654 <_dtoa_r+0x48c>
 8028684:	2202      	movs	r2, #2
 8028686:	e749      	b.n	802851c <_dtoa_r+0x354>
 8028688:	465f      	mov	r7, fp
 802868a:	4648      	mov	r0, r9
 802868c:	e765      	b.n	802855a <_dtoa_r+0x392>
 802868e:	ec42 1b17 	vmov	d7, r1, r2
 8028692:	4a5c      	ldr	r2, [pc, #368]	; (8028804 <_dtoa_r+0x63c>)
 8028694:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028698:	ed12 4b02 	vldr	d4, [r2, #-8]
 802869c:	9a00      	ldr	r2, [sp, #0]
 802869e:	1814      	adds	r4, r2, r0
 80286a0:	9a08      	ldr	r2, [sp, #32]
 80286a2:	b352      	cbz	r2, 80286fa <_dtoa_r+0x532>
 80286a4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80286a8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80286ac:	f8dd 8000 	ldr.w	r8, [sp]
 80286b0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80286b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80286b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80286bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80286c0:	ee14 2a90 	vmov	r2, s9
 80286c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80286c8:	3230      	adds	r2, #48	; 0x30
 80286ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 80286ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80286d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286d6:	f808 2b01 	strb.w	r2, [r8], #1
 80286da:	d439      	bmi.n	8028750 <_dtoa_r+0x588>
 80286dc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80286e0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80286e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286e8:	d472      	bmi.n	80287d0 <_dtoa_r+0x608>
 80286ea:	45a0      	cmp	r8, r4
 80286ec:	f43f af5d 	beq.w	80285aa <_dtoa_r+0x3e2>
 80286f0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80286f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80286f8:	e7e0      	b.n	80286bc <_dtoa_r+0x4f4>
 80286fa:	f8dd 8000 	ldr.w	r8, [sp]
 80286fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028702:	4621      	mov	r1, r4
 8028704:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028708:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802870c:	ee14 2a90 	vmov	r2, s9
 8028710:	3230      	adds	r2, #48	; 0x30
 8028712:	f808 2b01 	strb.w	r2, [r8], #1
 8028716:	45a0      	cmp	r8, r4
 8028718:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802871c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028720:	d118      	bne.n	8028754 <_dtoa_r+0x58c>
 8028722:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8028726:	ee37 4b05 	vadd.f64	d4, d7, d5
 802872a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802872e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028732:	dc4d      	bgt.n	80287d0 <_dtoa_r+0x608>
 8028734:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028738:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802873c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028740:	f57f af33 	bpl.w	80285aa <_dtoa_r+0x3e2>
 8028744:	4688      	mov	r8, r1
 8028746:	3901      	subs	r1, #1
 8028748:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802874c:	2b30      	cmp	r3, #48	; 0x30
 802874e:	d0f9      	beq.n	8028744 <_dtoa_r+0x57c>
 8028750:	46bb      	mov	fp, r7
 8028752:	e02a      	b.n	80287aa <_dtoa_r+0x5e2>
 8028754:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028758:	e7d6      	b.n	8028708 <_dtoa_r+0x540>
 802875a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802875e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8028762:	f8dd 8000 	ldr.w	r8, [sp]
 8028766:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802876a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802876e:	ee15 3a10 	vmov	r3, s10
 8028772:	3330      	adds	r3, #48	; 0x30
 8028774:	f808 3b01 	strb.w	r3, [r8], #1
 8028778:	9b00      	ldr	r3, [sp, #0]
 802877a:	eba8 0303 	sub.w	r3, r8, r3
 802877e:	4599      	cmp	r9, r3
 8028780:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8028784:	eea3 7b46 	vfms.f64	d7, d3, d6
 8028788:	d133      	bne.n	80287f2 <_dtoa_r+0x62a>
 802878a:	ee37 7b07 	vadd.f64	d7, d7, d7
 802878e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028796:	dc1a      	bgt.n	80287ce <_dtoa_r+0x606>
 8028798:	eeb4 7b46 	vcmp.f64	d7, d6
 802879c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287a0:	d103      	bne.n	80287aa <_dtoa_r+0x5e2>
 80287a2:	ee15 3a10 	vmov	r3, s10
 80287a6:	07d9      	lsls	r1, r3, #31
 80287a8:	d411      	bmi.n	80287ce <_dtoa_r+0x606>
 80287aa:	4629      	mov	r1, r5
 80287ac:	4630      	mov	r0, r6
 80287ae:	f001 f897 	bl	80298e0 <_Bfree>
 80287b2:	2300      	movs	r3, #0
 80287b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80287b6:	f888 3000 	strb.w	r3, [r8]
 80287ba:	f10b 0301 	add.w	r3, fp, #1
 80287be:	6013      	str	r3, [r2, #0]
 80287c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80287c2:	2b00      	cmp	r3, #0
 80287c4:	f43f ad4d 	beq.w	8028262 <_dtoa_r+0x9a>
 80287c8:	f8c3 8000 	str.w	r8, [r3]
 80287cc:	e549      	b.n	8028262 <_dtoa_r+0x9a>
 80287ce:	465f      	mov	r7, fp
 80287d0:	4643      	mov	r3, r8
 80287d2:	4698      	mov	r8, r3
 80287d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80287d8:	2a39      	cmp	r2, #57	; 0x39
 80287da:	d106      	bne.n	80287ea <_dtoa_r+0x622>
 80287dc:	9a00      	ldr	r2, [sp, #0]
 80287de:	429a      	cmp	r2, r3
 80287e0:	d1f7      	bne.n	80287d2 <_dtoa_r+0x60a>
 80287e2:	9900      	ldr	r1, [sp, #0]
 80287e4:	2230      	movs	r2, #48	; 0x30
 80287e6:	3701      	adds	r7, #1
 80287e8:	700a      	strb	r2, [r1, #0]
 80287ea:	781a      	ldrb	r2, [r3, #0]
 80287ec:	3201      	adds	r2, #1
 80287ee:	701a      	strb	r2, [r3, #0]
 80287f0:	e7ae      	b.n	8028750 <_dtoa_r+0x588>
 80287f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80287f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80287fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287fe:	d1b2      	bne.n	8028766 <_dtoa_r+0x59e>
 8028800:	e7d3      	b.n	80287aa <_dtoa_r+0x5e2>
 8028802:	bf00      	nop
 8028804:	0802ecc0 	.word	0x0802ecc0
 8028808:	0802ec98 	.word	0x0802ec98
 802880c:	9908      	ldr	r1, [sp, #32]
 802880e:	2900      	cmp	r1, #0
 8028810:	f000 80d1 	beq.w	80289b6 <_dtoa_r+0x7ee>
 8028814:	9907      	ldr	r1, [sp, #28]
 8028816:	2901      	cmp	r1, #1
 8028818:	f300 80b4 	bgt.w	8028984 <_dtoa_r+0x7bc>
 802881c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802881e:	2900      	cmp	r1, #0
 8028820:	f000 80ac 	beq.w	802897c <_dtoa_r+0x7b4>
 8028824:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8028828:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802882c:	461c      	mov	r4, r3
 802882e:	930a      	str	r3, [sp, #40]	; 0x28
 8028830:	9b05      	ldr	r3, [sp, #20]
 8028832:	4413      	add	r3, r2
 8028834:	9305      	str	r3, [sp, #20]
 8028836:	9b06      	ldr	r3, [sp, #24]
 8028838:	2101      	movs	r1, #1
 802883a:	4413      	add	r3, r2
 802883c:	4630      	mov	r0, r6
 802883e:	9306      	str	r3, [sp, #24]
 8028840:	f001 f954 	bl	8029aec <__i2b>
 8028844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028846:	4607      	mov	r7, r0
 8028848:	f1b8 0f00 	cmp.w	r8, #0
 802884c:	dd0d      	ble.n	802886a <_dtoa_r+0x6a2>
 802884e:	9a06      	ldr	r2, [sp, #24]
 8028850:	2a00      	cmp	r2, #0
 8028852:	dd0a      	ble.n	802886a <_dtoa_r+0x6a2>
 8028854:	4542      	cmp	r2, r8
 8028856:	9905      	ldr	r1, [sp, #20]
 8028858:	bfa8      	it	ge
 802885a:	4642      	movge	r2, r8
 802885c:	1a89      	subs	r1, r1, r2
 802885e:	9105      	str	r1, [sp, #20]
 8028860:	9906      	ldr	r1, [sp, #24]
 8028862:	eba8 0802 	sub.w	r8, r8, r2
 8028866:	1a8a      	subs	r2, r1, r2
 8028868:	9206      	str	r2, [sp, #24]
 802886a:	b303      	cbz	r3, 80288ae <_dtoa_r+0x6e6>
 802886c:	9a08      	ldr	r2, [sp, #32]
 802886e:	2a00      	cmp	r2, #0
 8028870:	f000 80a6 	beq.w	80289c0 <_dtoa_r+0x7f8>
 8028874:	2c00      	cmp	r4, #0
 8028876:	dd13      	ble.n	80288a0 <_dtoa_r+0x6d8>
 8028878:	4639      	mov	r1, r7
 802887a:	4622      	mov	r2, r4
 802887c:	4630      	mov	r0, r6
 802887e:	930c      	str	r3, [sp, #48]	; 0x30
 8028880:	f001 f9f0 	bl	8029c64 <__pow5mult>
 8028884:	462a      	mov	r2, r5
 8028886:	4601      	mov	r1, r0
 8028888:	4607      	mov	r7, r0
 802888a:	4630      	mov	r0, r6
 802888c:	f001 f944 	bl	8029b18 <__multiply>
 8028890:	4629      	mov	r1, r5
 8028892:	900a      	str	r0, [sp, #40]	; 0x28
 8028894:	4630      	mov	r0, r6
 8028896:	f001 f823 	bl	80298e0 <_Bfree>
 802889a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802889c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802889e:	4615      	mov	r5, r2
 80288a0:	1b1a      	subs	r2, r3, r4
 80288a2:	d004      	beq.n	80288ae <_dtoa_r+0x6e6>
 80288a4:	4629      	mov	r1, r5
 80288a6:	4630      	mov	r0, r6
 80288a8:	f001 f9dc 	bl	8029c64 <__pow5mult>
 80288ac:	4605      	mov	r5, r0
 80288ae:	2101      	movs	r1, #1
 80288b0:	4630      	mov	r0, r6
 80288b2:	f001 f91b 	bl	8029aec <__i2b>
 80288b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80288b8:	2b00      	cmp	r3, #0
 80288ba:	4604      	mov	r4, r0
 80288bc:	f340 8082 	ble.w	80289c4 <_dtoa_r+0x7fc>
 80288c0:	461a      	mov	r2, r3
 80288c2:	4601      	mov	r1, r0
 80288c4:	4630      	mov	r0, r6
 80288c6:	f001 f9cd 	bl	8029c64 <__pow5mult>
 80288ca:	9b07      	ldr	r3, [sp, #28]
 80288cc:	2b01      	cmp	r3, #1
 80288ce:	4604      	mov	r4, r0
 80288d0:	dd7b      	ble.n	80289ca <_dtoa_r+0x802>
 80288d2:	2300      	movs	r3, #0
 80288d4:	930a      	str	r3, [sp, #40]	; 0x28
 80288d6:	6922      	ldr	r2, [r4, #16]
 80288d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80288dc:	6910      	ldr	r0, [r2, #16]
 80288de:	f001 f8b5 	bl	8029a4c <__hi0bits>
 80288e2:	f1c0 0020 	rsb	r0, r0, #32
 80288e6:	9b06      	ldr	r3, [sp, #24]
 80288e8:	4418      	add	r0, r3
 80288ea:	f010 001f 	ands.w	r0, r0, #31
 80288ee:	f000 808d 	beq.w	8028a0c <_dtoa_r+0x844>
 80288f2:	f1c0 0220 	rsb	r2, r0, #32
 80288f6:	2a04      	cmp	r2, #4
 80288f8:	f340 8086 	ble.w	8028a08 <_dtoa_r+0x840>
 80288fc:	f1c0 001c 	rsb	r0, r0, #28
 8028900:	9b05      	ldr	r3, [sp, #20]
 8028902:	4403      	add	r3, r0
 8028904:	9305      	str	r3, [sp, #20]
 8028906:	9b06      	ldr	r3, [sp, #24]
 8028908:	4403      	add	r3, r0
 802890a:	4480      	add	r8, r0
 802890c:	9306      	str	r3, [sp, #24]
 802890e:	9b05      	ldr	r3, [sp, #20]
 8028910:	2b00      	cmp	r3, #0
 8028912:	dd05      	ble.n	8028920 <_dtoa_r+0x758>
 8028914:	4629      	mov	r1, r5
 8028916:	461a      	mov	r2, r3
 8028918:	4630      	mov	r0, r6
 802891a:	f001 f9fd 	bl	8029d18 <__lshift>
 802891e:	4605      	mov	r5, r0
 8028920:	9b06      	ldr	r3, [sp, #24]
 8028922:	2b00      	cmp	r3, #0
 8028924:	dd05      	ble.n	8028932 <_dtoa_r+0x76a>
 8028926:	4621      	mov	r1, r4
 8028928:	461a      	mov	r2, r3
 802892a:	4630      	mov	r0, r6
 802892c:	f001 f9f4 	bl	8029d18 <__lshift>
 8028930:	4604      	mov	r4, r0
 8028932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028934:	2b00      	cmp	r3, #0
 8028936:	d06b      	beq.n	8028a10 <_dtoa_r+0x848>
 8028938:	4621      	mov	r1, r4
 802893a:	4628      	mov	r0, r5
 802893c:	f001 fa58 	bl	8029df0 <__mcmp>
 8028940:	2800      	cmp	r0, #0
 8028942:	da65      	bge.n	8028a10 <_dtoa_r+0x848>
 8028944:	2300      	movs	r3, #0
 8028946:	4629      	mov	r1, r5
 8028948:	220a      	movs	r2, #10
 802894a:	4630      	mov	r0, r6
 802894c:	f000 ffea 	bl	8029924 <__multadd>
 8028950:	9b08      	ldr	r3, [sp, #32]
 8028952:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028956:	4605      	mov	r5, r0
 8028958:	2b00      	cmp	r3, #0
 802895a:	f000 8192 	beq.w	8028c82 <_dtoa_r+0xaba>
 802895e:	4639      	mov	r1, r7
 8028960:	2300      	movs	r3, #0
 8028962:	220a      	movs	r2, #10
 8028964:	4630      	mov	r0, r6
 8028966:	f000 ffdd 	bl	8029924 <__multadd>
 802896a:	f1ba 0f00 	cmp.w	sl, #0
 802896e:	4607      	mov	r7, r0
 8028970:	f300 808e 	bgt.w	8028a90 <_dtoa_r+0x8c8>
 8028974:	9b07      	ldr	r3, [sp, #28]
 8028976:	2b02      	cmp	r3, #2
 8028978:	dc51      	bgt.n	8028a1e <_dtoa_r+0x856>
 802897a:	e089      	b.n	8028a90 <_dtoa_r+0x8c8>
 802897c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802897e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8028982:	e751      	b.n	8028828 <_dtoa_r+0x660>
 8028984:	f109 34ff 	add.w	r4, r9, #4294967295
 8028988:	42a3      	cmp	r3, r4
 802898a:	bfbf      	itttt	lt
 802898c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 802898e:	1ae3      	sublt	r3, r4, r3
 8028990:	18d2      	addlt	r2, r2, r3
 8028992:	4613      	movlt	r3, r2
 8028994:	bfb7      	itett	lt
 8028996:	930e      	strlt	r3, [sp, #56]	; 0x38
 8028998:	1b1c      	subge	r4, r3, r4
 802899a:	4623      	movlt	r3, r4
 802899c:	2400      	movlt	r4, #0
 802899e:	f1b9 0f00 	cmp.w	r9, #0
 80289a2:	bfb5      	itete	lt
 80289a4:	9a05      	ldrlt	r2, [sp, #20]
 80289a6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80289aa:	eba2 0809 	sublt.w	r8, r2, r9
 80289ae:	464a      	movge	r2, r9
 80289b0:	bfb8      	it	lt
 80289b2:	2200      	movlt	r2, #0
 80289b4:	e73b      	b.n	802882e <_dtoa_r+0x666>
 80289b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80289ba:	9f08      	ldr	r7, [sp, #32]
 80289bc:	461c      	mov	r4, r3
 80289be:	e743      	b.n	8028848 <_dtoa_r+0x680>
 80289c0:	461a      	mov	r2, r3
 80289c2:	e76f      	b.n	80288a4 <_dtoa_r+0x6dc>
 80289c4:	9b07      	ldr	r3, [sp, #28]
 80289c6:	2b01      	cmp	r3, #1
 80289c8:	dc18      	bgt.n	80289fc <_dtoa_r+0x834>
 80289ca:	9b02      	ldr	r3, [sp, #8]
 80289cc:	b9b3      	cbnz	r3, 80289fc <_dtoa_r+0x834>
 80289ce:	9b03      	ldr	r3, [sp, #12]
 80289d0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80289d4:	b9a2      	cbnz	r2, 8028a00 <_dtoa_r+0x838>
 80289d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80289da:	0d12      	lsrs	r2, r2, #20
 80289dc:	0512      	lsls	r2, r2, #20
 80289de:	b18a      	cbz	r2, 8028a04 <_dtoa_r+0x83c>
 80289e0:	9b05      	ldr	r3, [sp, #20]
 80289e2:	3301      	adds	r3, #1
 80289e4:	9305      	str	r3, [sp, #20]
 80289e6:	9b06      	ldr	r3, [sp, #24]
 80289e8:	3301      	adds	r3, #1
 80289ea:	9306      	str	r3, [sp, #24]
 80289ec:	2301      	movs	r3, #1
 80289ee:	930a      	str	r3, [sp, #40]	; 0x28
 80289f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80289f2:	2b00      	cmp	r3, #0
 80289f4:	f47f af6f 	bne.w	80288d6 <_dtoa_r+0x70e>
 80289f8:	2001      	movs	r0, #1
 80289fa:	e774      	b.n	80288e6 <_dtoa_r+0x71e>
 80289fc:	2300      	movs	r3, #0
 80289fe:	e7f6      	b.n	80289ee <_dtoa_r+0x826>
 8028a00:	9b02      	ldr	r3, [sp, #8]
 8028a02:	e7f4      	b.n	80289ee <_dtoa_r+0x826>
 8028a04:	920a      	str	r2, [sp, #40]	; 0x28
 8028a06:	e7f3      	b.n	80289f0 <_dtoa_r+0x828>
 8028a08:	d081      	beq.n	802890e <_dtoa_r+0x746>
 8028a0a:	4610      	mov	r0, r2
 8028a0c:	301c      	adds	r0, #28
 8028a0e:	e777      	b.n	8028900 <_dtoa_r+0x738>
 8028a10:	f1b9 0f00 	cmp.w	r9, #0
 8028a14:	dc37      	bgt.n	8028a86 <_dtoa_r+0x8be>
 8028a16:	9b07      	ldr	r3, [sp, #28]
 8028a18:	2b02      	cmp	r3, #2
 8028a1a:	dd34      	ble.n	8028a86 <_dtoa_r+0x8be>
 8028a1c:	46ca      	mov	sl, r9
 8028a1e:	f1ba 0f00 	cmp.w	sl, #0
 8028a22:	d10d      	bne.n	8028a40 <_dtoa_r+0x878>
 8028a24:	4621      	mov	r1, r4
 8028a26:	4653      	mov	r3, sl
 8028a28:	2205      	movs	r2, #5
 8028a2a:	4630      	mov	r0, r6
 8028a2c:	f000 ff7a 	bl	8029924 <__multadd>
 8028a30:	4601      	mov	r1, r0
 8028a32:	4604      	mov	r4, r0
 8028a34:	4628      	mov	r0, r5
 8028a36:	f001 f9db 	bl	8029df0 <__mcmp>
 8028a3a:	2800      	cmp	r0, #0
 8028a3c:	f73f adde 	bgt.w	80285fc <_dtoa_r+0x434>
 8028a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a42:	f8dd 8000 	ldr.w	r8, [sp]
 8028a46:	ea6f 0b03 	mvn.w	fp, r3
 8028a4a:	f04f 0900 	mov.w	r9, #0
 8028a4e:	4621      	mov	r1, r4
 8028a50:	4630      	mov	r0, r6
 8028a52:	f000 ff45 	bl	80298e0 <_Bfree>
 8028a56:	2f00      	cmp	r7, #0
 8028a58:	f43f aea7 	beq.w	80287aa <_dtoa_r+0x5e2>
 8028a5c:	f1b9 0f00 	cmp.w	r9, #0
 8028a60:	d005      	beq.n	8028a6e <_dtoa_r+0x8a6>
 8028a62:	45b9      	cmp	r9, r7
 8028a64:	d003      	beq.n	8028a6e <_dtoa_r+0x8a6>
 8028a66:	4649      	mov	r1, r9
 8028a68:	4630      	mov	r0, r6
 8028a6a:	f000 ff39 	bl	80298e0 <_Bfree>
 8028a6e:	4639      	mov	r1, r7
 8028a70:	4630      	mov	r0, r6
 8028a72:	f000 ff35 	bl	80298e0 <_Bfree>
 8028a76:	e698      	b.n	80287aa <_dtoa_r+0x5e2>
 8028a78:	2400      	movs	r4, #0
 8028a7a:	4627      	mov	r7, r4
 8028a7c:	e7e0      	b.n	8028a40 <_dtoa_r+0x878>
 8028a7e:	46bb      	mov	fp, r7
 8028a80:	4604      	mov	r4, r0
 8028a82:	4607      	mov	r7, r0
 8028a84:	e5ba      	b.n	80285fc <_dtoa_r+0x434>
 8028a86:	9b08      	ldr	r3, [sp, #32]
 8028a88:	46ca      	mov	sl, r9
 8028a8a:	2b00      	cmp	r3, #0
 8028a8c:	f000 8100 	beq.w	8028c90 <_dtoa_r+0xac8>
 8028a90:	f1b8 0f00 	cmp.w	r8, #0
 8028a94:	dd05      	ble.n	8028aa2 <_dtoa_r+0x8da>
 8028a96:	4639      	mov	r1, r7
 8028a98:	4642      	mov	r2, r8
 8028a9a:	4630      	mov	r0, r6
 8028a9c:	f001 f93c 	bl	8029d18 <__lshift>
 8028aa0:	4607      	mov	r7, r0
 8028aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028aa4:	2b00      	cmp	r3, #0
 8028aa6:	d05d      	beq.n	8028b64 <_dtoa_r+0x99c>
 8028aa8:	6879      	ldr	r1, [r7, #4]
 8028aaa:	4630      	mov	r0, r6
 8028aac:	f000 fed8 	bl	8029860 <_Balloc>
 8028ab0:	4680      	mov	r8, r0
 8028ab2:	b928      	cbnz	r0, 8028ac0 <_dtoa_r+0x8f8>
 8028ab4:	4b82      	ldr	r3, [pc, #520]	; (8028cc0 <_dtoa_r+0xaf8>)
 8028ab6:	4602      	mov	r2, r0
 8028ab8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8028abc:	f7ff bb9a 	b.w	80281f4 <_dtoa_r+0x2c>
 8028ac0:	693a      	ldr	r2, [r7, #16]
 8028ac2:	3202      	adds	r2, #2
 8028ac4:	0092      	lsls	r2, r2, #2
 8028ac6:	f107 010c 	add.w	r1, r7, #12
 8028aca:	300c      	adds	r0, #12
 8028acc:	f7fd fa76 	bl	8025fbc <memcpy>
 8028ad0:	2201      	movs	r2, #1
 8028ad2:	4641      	mov	r1, r8
 8028ad4:	4630      	mov	r0, r6
 8028ad6:	f001 f91f 	bl	8029d18 <__lshift>
 8028ada:	9b00      	ldr	r3, [sp, #0]
 8028adc:	3301      	adds	r3, #1
 8028ade:	9305      	str	r3, [sp, #20]
 8028ae0:	9b00      	ldr	r3, [sp, #0]
 8028ae2:	4453      	add	r3, sl
 8028ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8028ae6:	9b02      	ldr	r3, [sp, #8]
 8028ae8:	f003 0301 	and.w	r3, r3, #1
 8028aec:	46b9      	mov	r9, r7
 8028aee:	9308      	str	r3, [sp, #32]
 8028af0:	4607      	mov	r7, r0
 8028af2:	9b05      	ldr	r3, [sp, #20]
 8028af4:	4621      	mov	r1, r4
 8028af6:	3b01      	subs	r3, #1
 8028af8:	4628      	mov	r0, r5
 8028afa:	9302      	str	r3, [sp, #8]
 8028afc:	f7ff fad8 	bl	80280b0 <quorem>
 8028b00:	4603      	mov	r3, r0
 8028b02:	3330      	adds	r3, #48	; 0x30
 8028b04:	9006      	str	r0, [sp, #24]
 8028b06:	4649      	mov	r1, r9
 8028b08:	4628      	mov	r0, r5
 8028b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8028b0c:	f001 f970 	bl	8029df0 <__mcmp>
 8028b10:	463a      	mov	r2, r7
 8028b12:	4682      	mov	sl, r0
 8028b14:	4621      	mov	r1, r4
 8028b16:	4630      	mov	r0, r6
 8028b18:	f001 f986 	bl	8029e28 <__mdiff>
 8028b1c:	68c2      	ldr	r2, [r0, #12]
 8028b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028b20:	4680      	mov	r8, r0
 8028b22:	bb0a      	cbnz	r2, 8028b68 <_dtoa_r+0x9a0>
 8028b24:	4601      	mov	r1, r0
 8028b26:	4628      	mov	r0, r5
 8028b28:	f001 f962 	bl	8029df0 <__mcmp>
 8028b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028b2e:	4602      	mov	r2, r0
 8028b30:	4641      	mov	r1, r8
 8028b32:	4630      	mov	r0, r6
 8028b34:	920e      	str	r2, [sp, #56]	; 0x38
 8028b36:	930a      	str	r3, [sp, #40]	; 0x28
 8028b38:	f000 fed2 	bl	80298e0 <_Bfree>
 8028b3c:	9b07      	ldr	r3, [sp, #28]
 8028b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028b40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8028b44:	ea43 0102 	orr.w	r1, r3, r2
 8028b48:	9b08      	ldr	r3, [sp, #32]
 8028b4a:	430b      	orrs	r3, r1
 8028b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028b4e:	d10d      	bne.n	8028b6c <_dtoa_r+0x9a4>
 8028b50:	2b39      	cmp	r3, #57	; 0x39
 8028b52:	d029      	beq.n	8028ba8 <_dtoa_r+0x9e0>
 8028b54:	f1ba 0f00 	cmp.w	sl, #0
 8028b58:	dd01      	ble.n	8028b5e <_dtoa_r+0x996>
 8028b5a:	9b06      	ldr	r3, [sp, #24]
 8028b5c:	3331      	adds	r3, #49	; 0x31
 8028b5e:	9a02      	ldr	r2, [sp, #8]
 8028b60:	7013      	strb	r3, [r2, #0]
 8028b62:	e774      	b.n	8028a4e <_dtoa_r+0x886>
 8028b64:	4638      	mov	r0, r7
 8028b66:	e7b8      	b.n	8028ada <_dtoa_r+0x912>
 8028b68:	2201      	movs	r2, #1
 8028b6a:	e7e1      	b.n	8028b30 <_dtoa_r+0x968>
 8028b6c:	f1ba 0f00 	cmp.w	sl, #0
 8028b70:	db06      	blt.n	8028b80 <_dtoa_r+0x9b8>
 8028b72:	9907      	ldr	r1, [sp, #28]
 8028b74:	ea41 0a0a 	orr.w	sl, r1, sl
 8028b78:	9908      	ldr	r1, [sp, #32]
 8028b7a:	ea5a 0101 	orrs.w	r1, sl, r1
 8028b7e:	d120      	bne.n	8028bc2 <_dtoa_r+0x9fa>
 8028b80:	2a00      	cmp	r2, #0
 8028b82:	ddec      	ble.n	8028b5e <_dtoa_r+0x996>
 8028b84:	4629      	mov	r1, r5
 8028b86:	2201      	movs	r2, #1
 8028b88:	4630      	mov	r0, r6
 8028b8a:	9305      	str	r3, [sp, #20]
 8028b8c:	f001 f8c4 	bl	8029d18 <__lshift>
 8028b90:	4621      	mov	r1, r4
 8028b92:	4605      	mov	r5, r0
 8028b94:	f001 f92c 	bl	8029df0 <__mcmp>
 8028b98:	2800      	cmp	r0, #0
 8028b9a:	9b05      	ldr	r3, [sp, #20]
 8028b9c:	dc02      	bgt.n	8028ba4 <_dtoa_r+0x9dc>
 8028b9e:	d1de      	bne.n	8028b5e <_dtoa_r+0x996>
 8028ba0:	07da      	lsls	r2, r3, #31
 8028ba2:	d5dc      	bpl.n	8028b5e <_dtoa_r+0x996>
 8028ba4:	2b39      	cmp	r3, #57	; 0x39
 8028ba6:	d1d8      	bne.n	8028b5a <_dtoa_r+0x992>
 8028ba8:	9a02      	ldr	r2, [sp, #8]
 8028baa:	2339      	movs	r3, #57	; 0x39
 8028bac:	7013      	strb	r3, [r2, #0]
 8028bae:	4643      	mov	r3, r8
 8028bb0:	4698      	mov	r8, r3
 8028bb2:	3b01      	subs	r3, #1
 8028bb4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8028bb8:	2a39      	cmp	r2, #57	; 0x39
 8028bba:	d051      	beq.n	8028c60 <_dtoa_r+0xa98>
 8028bbc:	3201      	adds	r2, #1
 8028bbe:	701a      	strb	r2, [r3, #0]
 8028bc0:	e745      	b.n	8028a4e <_dtoa_r+0x886>
 8028bc2:	2a00      	cmp	r2, #0
 8028bc4:	dd03      	ble.n	8028bce <_dtoa_r+0xa06>
 8028bc6:	2b39      	cmp	r3, #57	; 0x39
 8028bc8:	d0ee      	beq.n	8028ba8 <_dtoa_r+0x9e0>
 8028bca:	3301      	adds	r3, #1
 8028bcc:	e7c7      	b.n	8028b5e <_dtoa_r+0x996>
 8028bce:	9a05      	ldr	r2, [sp, #20]
 8028bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028bd2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8028bd6:	428a      	cmp	r2, r1
 8028bd8:	d02b      	beq.n	8028c32 <_dtoa_r+0xa6a>
 8028bda:	4629      	mov	r1, r5
 8028bdc:	2300      	movs	r3, #0
 8028bde:	220a      	movs	r2, #10
 8028be0:	4630      	mov	r0, r6
 8028be2:	f000 fe9f 	bl	8029924 <__multadd>
 8028be6:	45b9      	cmp	r9, r7
 8028be8:	4605      	mov	r5, r0
 8028bea:	f04f 0300 	mov.w	r3, #0
 8028bee:	f04f 020a 	mov.w	r2, #10
 8028bf2:	4649      	mov	r1, r9
 8028bf4:	4630      	mov	r0, r6
 8028bf6:	d107      	bne.n	8028c08 <_dtoa_r+0xa40>
 8028bf8:	f000 fe94 	bl	8029924 <__multadd>
 8028bfc:	4681      	mov	r9, r0
 8028bfe:	4607      	mov	r7, r0
 8028c00:	9b05      	ldr	r3, [sp, #20]
 8028c02:	3301      	adds	r3, #1
 8028c04:	9305      	str	r3, [sp, #20]
 8028c06:	e774      	b.n	8028af2 <_dtoa_r+0x92a>
 8028c08:	f000 fe8c 	bl	8029924 <__multadd>
 8028c0c:	4639      	mov	r1, r7
 8028c0e:	4681      	mov	r9, r0
 8028c10:	2300      	movs	r3, #0
 8028c12:	220a      	movs	r2, #10
 8028c14:	4630      	mov	r0, r6
 8028c16:	f000 fe85 	bl	8029924 <__multadd>
 8028c1a:	4607      	mov	r7, r0
 8028c1c:	e7f0      	b.n	8028c00 <_dtoa_r+0xa38>
 8028c1e:	f1ba 0f00 	cmp.w	sl, #0
 8028c22:	9a00      	ldr	r2, [sp, #0]
 8028c24:	bfcc      	ite	gt
 8028c26:	46d0      	movgt	r8, sl
 8028c28:	f04f 0801 	movle.w	r8, #1
 8028c2c:	4490      	add	r8, r2
 8028c2e:	f04f 0900 	mov.w	r9, #0
 8028c32:	4629      	mov	r1, r5
 8028c34:	2201      	movs	r2, #1
 8028c36:	4630      	mov	r0, r6
 8028c38:	9302      	str	r3, [sp, #8]
 8028c3a:	f001 f86d 	bl	8029d18 <__lshift>
 8028c3e:	4621      	mov	r1, r4
 8028c40:	4605      	mov	r5, r0
 8028c42:	f001 f8d5 	bl	8029df0 <__mcmp>
 8028c46:	2800      	cmp	r0, #0
 8028c48:	dcb1      	bgt.n	8028bae <_dtoa_r+0x9e6>
 8028c4a:	d102      	bne.n	8028c52 <_dtoa_r+0xa8a>
 8028c4c:	9b02      	ldr	r3, [sp, #8]
 8028c4e:	07db      	lsls	r3, r3, #31
 8028c50:	d4ad      	bmi.n	8028bae <_dtoa_r+0x9e6>
 8028c52:	4643      	mov	r3, r8
 8028c54:	4698      	mov	r8, r3
 8028c56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028c5a:	2a30      	cmp	r2, #48	; 0x30
 8028c5c:	d0fa      	beq.n	8028c54 <_dtoa_r+0xa8c>
 8028c5e:	e6f6      	b.n	8028a4e <_dtoa_r+0x886>
 8028c60:	9a00      	ldr	r2, [sp, #0]
 8028c62:	429a      	cmp	r2, r3
 8028c64:	d1a4      	bne.n	8028bb0 <_dtoa_r+0x9e8>
 8028c66:	f10b 0b01 	add.w	fp, fp, #1
 8028c6a:	2331      	movs	r3, #49	; 0x31
 8028c6c:	e778      	b.n	8028b60 <_dtoa_r+0x998>
 8028c6e:	4b15      	ldr	r3, [pc, #84]	; (8028cc4 <_dtoa_r+0xafc>)
 8028c70:	f7ff bb12 	b.w	8028298 <_dtoa_r+0xd0>
 8028c74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028c76:	2b00      	cmp	r3, #0
 8028c78:	f47f aaee 	bne.w	8028258 <_dtoa_r+0x90>
 8028c7c:	4b12      	ldr	r3, [pc, #72]	; (8028cc8 <_dtoa_r+0xb00>)
 8028c7e:	f7ff bb0b 	b.w	8028298 <_dtoa_r+0xd0>
 8028c82:	f1ba 0f00 	cmp.w	sl, #0
 8028c86:	dc03      	bgt.n	8028c90 <_dtoa_r+0xac8>
 8028c88:	9b07      	ldr	r3, [sp, #28]
 8028c8a:	2b02      	cmp	r3, #2
 8028c8c:	f73f aec7 	bgt.w	8028a1e <_dtoa_r+0x856>
 8028c90:	f8dd 8000 	ldr.w	r8, [sp]
 8028c94:	4621      	mov	r1, r4
 8028c96:	4628      	mov	r0, r5
 8028c98:	f7ff fa0a 	bl	80280b0 <quorem>
 8028c9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8028ca0:	f808 3b01 	strb.w	r3, [r8], #1
 8028ca4:	9a00      	ldr	r2, [sp, #0]
 8028ca6:	eba8 0202 	sub.w	r2, r8, r2
 8028caa:	4592      	cmp	sl, r2
 8028cac:	ddb7      	ble.n	8028c1e <_dtoa_r+0xa56>
 8028cae:	4629      	mov	r1, r5
 8028cb0:	2300      	movs	r3, #0
 8028cb2:	220a      	movs	r2, #10
 8028cb4:	4630      	mov	r0, r6
 8028cb6:	f000 fe35 	bl	8029924 <__multadd>
 8028cba:	4605      	mov	r5, r0
 8028cbc:	e7ea      	b.n	8028c94 <_dtoa_r+0xacc>
 8028cbe:	bf00      	nop
 8028cc0:	0802eb44 	.word	0x0802eb44
 8028cc4:	0802dc4a 	.word	0x0802dc4a
 8028cc8:	0802eac1 	.word	0x0802eac1

08028ccc <__sflush_r>:
 8028ccc:	898a      	ldrh	r2, [r1, #12]
 8028cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cd2:	4605      	mov	r5, r0
 8028cd4:	0710      	lsls	r0, r2, #28
 8028cd6:	460c      	mov	r4, r1
 8028cd8:	d458      	bmi.n	8028d8c <__sflush_r+0xc0>
 8028cda:	684b      	ldr	r3, [r1, #4]
 8028cdc:	2b00      	cmp	r3, #0
 8028cde:	dc05      	bgt.n	8028cec <__sflush_r+0x20>
 8028ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028ce2:	2b00      	cmp	r3, #0
 8028ce4:	dc02      	bgt.n	8028cec <__sflush_r+0x20>
 8028ce6:	2000      	movs	r0, #0
 8028ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028cee:	2e00      	cmp	r6, #0
 8028cf0:	d0f9      	beq.n	8028ce6 <__sflush_r+0x1a>
 8028cf2:	2300      	movs	r3, #0
 8028cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028cf8:	682f      	ldr	r7, [r5, #0]
 8028cfa:	602b      	str	r3, [r5, #0]
 8028cfc:	d032      	beq.n	8028d64 <__sflush_r+0x98>
 8028cfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028d00:	89a3      	ldrh	r3, [r4, #12]
 8028d02:	075a      	lsls	r2, r3, #29
 8028d04:	d505      	bpl.n	8028d12 <__sflush_r+0x46>
 8028d06:	6863      	ldr	r3, [r4, #4]
 8028d08:	1ac0      	subs	r0, r0, r3
 8028d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028d0c:	b10b      	cbz	r3, 8028d12 <__sflush_r+0x46>
 8028d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028d10:	1ac0      	subs	r0, r0, r3
 8028d12:	2300      	movs	r3, #0
 8028d14:	4602      	mov	r2, r0
 8028d16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028d18:	6a21      	ldr	r1, [r4, #32]
 8028d1a:	4628      	mov	r0, r5
 8028d1c:	47b0      	blx	r6
 8028d1e:	1c43      	adds	r3, r0, #1
 8028d20:	89a3      	ldrh	r3, [r4, #12]
 8028d22:	d106      	bne.n	8028d32 <__sflush_r+0x66>
 8028d24:	6829      	ldr	r1, [r5, #0]
 8028d26:	291d      	cmp	r1, #29
 8028d28:	d82c      	bhi.n	8028d84 <__sflush_r+0xb8>
 8028d2a:	4a2a      	ldr	r2, [pc, #168]	; (8028dd4 <__sflush_r+0x108>)
 8028d2c:	40ca      	lsrs	r2, r1
 8028d2e:	07d6      	lsls	r6, r2, #31
 8028d30:	d528      	bpl.n	8028d84 <__sflush_r+0xb8>
 8028d32:	2200      	movs	r2, #0
 8028d34:	6062      	str	r2, [r4, #4]
 8028d36:	04d9      	lsls	r1, r3, #19
 8028d38:	6922      	ldr	r2, [r4, #16]
 8028d3a:	6022      	str	r2, [r4, #0]
 8028d3c:	d504      	bpl.n	8028d48 <__sflush_r+0x7c>
 8028d3e:	1c42      	adds	r2, r0, #1
 8028d40:	d101      	bne.n	8028d46 <__sflush_r+0x7a>
 8028d42:	682b      	ldr	r3, [r5, #0]
 8028d44:	b903      	cbnz	r3, 8028d48 <__sflush_r+0x7c>
 8028d46:	6560      	str	r0, [r4, #84]	; 0x54
 8028d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028d4a:	602f      	str	r7, [r5, #0]
 8028d4c:	2900      	cmp	r1, #0
 8028d4e:	d0ca      	beq.n	8028ce6 <__sflush_r+0x1a>
 8028d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028d54:	4299      	cmp	r1, r3
 8028d56:	d002      	beq.n	8028d5e <__sflush_r+0x92>
 8028d58:	4628      	mov	r0, r5
 8028d5a:	f7fd f945 	bl	8025fe8 <_free_r>
 8028d5e:	2000      	movs	r0, #0
 8028d60:	6360      	str	r0, [r4, #52]	; 0x34
 8028d62:	e7c1      	b.n	8028ce8 <__sflush_r+0x1c>
 8028d64:	6a21      	ldr	r1, [r4, #32]
 8028d66:	2301      	movs	r3, #1
 8028d68:	4628      	mov	r0, r5
 8028d6a:	47b0      	blx	r6
 8028d6c:	1c41      	adds	r1, r0, #1
 8028d6e:	d1c7      	bne.n	8028d00 <__sflush_r+0x34>
 8028d70:	682b      	ldr	r3, [r5, #0]
 8028d72:	2b00      	cmp	r3, #0
 8028d74:	d0c4      	beq.n	8028d00 <__sflush_r+0x34>
 8028d76:	2b1d      	cmp	r3, #29
 8028d78:	d001      	beq.n	8028d7e <__sflush_r+0xb2>
 8028d7a:	2b16      	cmp	r3, #22
 8028d7c:	d101      	bne.n	8028d82 <__sflush_r+0xb6>
 8028d7e:	602f      	str	r7, [r5, #0]
 8028d80:	e7b1      	b.n	8028ce6 <__sflush_r+0x1a>
 8028d82:	89a3      	ldrh	r3, [r4, #12]
 8028d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028d88:	81a3      	strh	r3, [r4, #12]
 8028d8a:	e7ad      	b.n	8028ce8 <__sflush_r+0x1c>
 8028d8c:	690f      	ldr	r7, [r1, #16]
 8028d8e:	2f00      	cmp	r7, #0
 8028d90:	d0a9      	beq.n	8028ce6 <__sflush_r+0x1a>
 8028d92:	0793      	lsls	r3, r2, #30
 8028d94:	680e      	ldr	r6, [r1, #0]
 8028d96:	bf08      	it	eq
 8028d98:	694b      	ldreq	r3, [r1, #20]
 8028d9a:	600f      	str	r7, [r1, #0]
 8028d9c:	bf18      	it	ne
 8028d9e:	2300      	movne	r3, #0
 8028da0:	eba6 0807 	sub.w	r8, r6, r7
 8028da4:	608b      	str	r3, [r1, #8]
 8028da6:	f1b8 0f00 	cmp.w	r8, #0
 8028daa:	dd9c      	ble.n	8028ce6 <__sflush_r+0x1a>
 8028dac:	6a21      	ldr	r1, [r4, #32]
 8028dae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028db0:	4643      	mov	r3, r8
 8028db2:	463a      	mov	r2, r7
 8028db4:	4628      	mov	r0, r5
 8028db6:	47b0      	blx	r6
 8028db8:	2800      	cmp	r0, #0
 8028dba:	dc06      	bgt.n	8028dca <__sflush_r+0xfe>
 8028dbc:	89a3      	ldrh	r3, [r4, #12]
 8028dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028dc2:	81a3      	strh	r3, [r4, #12]
 8028dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8028dc8:	e78e      	b.n	8028ce8 <__sflush_r+0x1c>
 8028dca:	4407      	add	r7, r0
 8028dcc:	eba8 0800 	sub.w	r8, r8, r0
 8028dd0:	e7e9      	b.n	8028da6 <__sflush_r+0xda>
 8028dd2:	bf00      	nop
 8028dd4:	20400001 	.word	0x20400001

08028dd8 <_fflush_r>:
 8028dd8:	b538      	push	{r3, r4, r5, lr}
 8028dda:	690b      	ldr	r3, [r1, #16]
 8028ddc:	4605      	mov	r5, r0
 8028dde:	460c      	mov	r4, r1
 8028de0:	b913      	cbnz	r3, 8028de8 <_fflush_r+0x10>
 8028de2:	2500      	movs	r5, #0
 8028de4:	4628      	mov	r0, r5
 8028de6:	bd38      	pop	{r3, r4, r5, pc}
 8028de8:	b118      	cbz	r0, 8028df2 <_fflush_r+0x1a>
 8028dea:	6983      	ldr	r3, [r0, #24]
 8028dec:	b90b      	cbnz	r3, 8028df2 <_fflush_r+0x1a>
 8028dee:	f000 f887 	bl	8028f00 <__sinit>
 8028df2:	4b14      	ldr	r3, [pc, #80]	; (8028e44 <_fflush_r+0x6c>)
 8028df4:	429c      	cmp	r4, r3
 8028df6:	d11b      	bne.n	8028e30 <_fflush_r+0x58>
 8028df8:	686c      	ldr	r4, [r5, #4]
 8028dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028dfe:	2b00      	cmp	r3, #0
 8028e00:	d0ef      	beq.n	8028de2 <_fflush_r+0xa>
 8028e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028e04:	07d0      	lsls	r0, r2, #31
 8028e06:	d404      	bmi.n	8028e12 <_fflush_r+0x3a>
 8028e08:	0599      	lsls	r1, r3, #22
 8028e0a:	d402      	bmi.n	8028e12 <_fflush_r+0x3a>
 8028e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028e0e:	f000 fc88 	bl	8029722 <__retarget_lock_acquire_recursive>
 8028e12:	4628      	mov	r0, r5
 8028e14:	4621      	mov	r1, r4
 8028e16:	f7ff ff59 	bl	8028ccc <__sflush_r>
 8028e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028e1c:	07da      	lsls	r2, r3, #31
 8028e1e:	4605      	mov	r5, r0
 8028e20:	d4e0      	bmi.n	8028de4 <_fflush_r+0xc>
 8028e22:	89a3      	ldrh	r3, [r4, #12]
 8028e24:	059b      	lsls	r3, r3, #22
 8028e26:	d4dd      	bmi.n	8028de4 <_fflush_r+0xc>
 8028e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028e2a:	f000 fc7c 	bl	8029726 <__retarget_lock_release_recursive>
 8028e2e:	e7d9      	b.n	8028de4 <_fflush_r+0xc>
 8028e30:	4b05      	ldr	r3, [pc, #20]	; (8028e48 <_fflush_r+0x70>)
 8028e32:	429c      	cmp	r4, r3
 8028e34:	d101      	bne.n	8028e3a <_fflush_r+0x62>
 8028e36:	68ac      	ldr	r4, [r5, #8]
 8028e38:	e7df      	b.n	8028dfa <_fflush_r+0x22>
 8028e3a:	4b04      	ldr	r3, [pc, #16]	; (8028e4c <_fflush_r+0x74>)
 8028e3c:	429c      	cmp	r4, r3
 8028e3e:	bf08      	it	eq
 8028e40:	68ec      	ldreq	r4, [r5, #12]
 8028e42:	e7da      	b.n	8028dfa <_fflush_r+0x22>
 8028e44:	0802eb78 	.word	0x0802eb78
 8028e48:	0802eb98 	.word	0x0802eb98
 8028e4c:	0802eb58 	.word	0x0802eb58

08028e50 <std>:
 8028e50:	2300      	movs	r3, #0
 8028e52:	b510      	push	{r4, lr}
 8028e54:	4604      	mov	r4, r0
 8028e56:	e9c0 3300 	strd	r3, r3, [r0]
 8028e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028e5e:	6083      	str	r3, [r0, #8]
 8028e60:	8181      	strh	r1, [r0, #12]
 8028e62:	6643      	str	r3, [r0, #100]	; 0x64
 8028e64:	81c2      	strh	r2, [r0, #14]
 8028e66:	6183      	str	r3, [r0, #24]
 8028e68:	4619      	mov	r1, r3
 8028e6a:	2208      	movs	r2, #8
 8028e6c:	305c      	adds	r0, #92	; 0x5c
 8028e6e:	f7fd f8b3 	bl	8025fd8 <memset>
 8028e72:	4b05      	ldr	r3, [pc, #20]	; (8028e88 <std+0x38>)
 8028e74:	6263      	str	r3, [r4, #36]	; 0x24
 8028e76:	4b05      	ldr	r3, [pc, #20]	; (8028e8c <std+0x3c>)
 8028e78:	62a3      	str	r3, [r4, #40]	; 0x28
 8028e7a:	4b05      	ldr	r3, [pc, #20]	; (8028e90 <std+0x40>)
 8028e7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028e7e:	4b05      	ldr	r3, [pc, #20]	; (8028e94 <std+0x44>)
 8028e80:	6224      	str	r4, [r4, #32]
 8028e82:	6323      	str	r3, [r4, #48]	; 0x30
 8028e84:	bd10      	pop	{r4, pc}
 8028e86:	bf00      	nop
 8028e88:	0802a509 	.word	0x0802a509
 8028e8c:	0802a52b 	.word	0x0802a52b
 8028e90:	0802a563 	.word	0x0802a563
 8028e94:	0802a587 	.word	0x0802a587

08028e98 <_cleanup_r>:
 8028e98:	4901      	ldr	r1, [pc, #4]	; (8028ea0 <_cleanup_r+0x8>)
 8028e9a:	f000 b8af 	b.w	8028ffc <_fwalk_reent>
 8028e9e:	bf00      	nop
 8028ea0:	08028dd9 	.word	0x08028dd9

08028ea4 <__sfmoreglue>:
 8028ea4:	b570      	push	{r4, r5, r6, lr}
 8028ea6:	1e4a      	subs	r2, r1, #1
 8028ea8:	2568      	movs	r5, #104	; 0x68
 8028eaa:	4355      	muls	r5, r2
 8028eac:	460e      	mov	r6, r1
 8028eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028eb2:	f7fd f8e9 	bl	8026088 <_malloc_r>
 8028eb6:	4604      	mov	r4, r0
 8028eb8:	b140      	cbz	r0, 8028ecc <__sfmoreglue+0x28>
 8028eba:	2100      	movs	r1, #0
 8028ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8028ec0:	300c      	adds	r0, #12
 8028ec2:	60a0      	str	r0, [r4, #8]
 8028ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028ec8:	f7fd f886 	bl	8025fd8 <memset>
 8028ecc:	4620      	mov	r0, r4
 8028ece:	bd70      	pop	{r4, r5, r6, pc}

08028ed0 <__sfp_lock_acquire>:
 8028ed0:	4801      	ldr	r0, [pc, #4]	; (8028ed8 <__sfp_lock_acquire+0x8>)
 8028ed2:	f000 bc26 	b.w	8029722 <__retarget_lock_acquire_recursive>
 8028ed6:	bf00      	nop
 8028ed8:	200570fc 	.word	0x200570fc

08028edc <__sfp_lock_release>:
 8028edc:	4801      	ldr	r0, [pc, #4]	; (8028ee4 <__sfp_lock_release+0x8>)
 8028ede:	f000 bc22 	b.w	8029726 <__retarget_lock_release_recursive>
 8028ee2:	bf00      	nop
 8028ee4:	200570fc 	.word	0x200570fc

08028ee8 <__sinit_lock_acquire>:
 8028ee8:	4801      	ldr	r0, [pc, #4]	; (8028ef0 <__sinit_lock_acquire+0x8>)
 8028eea:	f000 bc1a 	b.w	8029722 <__retarget_lock_acquire_recursive>
 8028eee:	bf00      	nop
 8028ef0:	200570f7 	.word	0x200570f7

08028ef4 <__sinit_lock_release>:
 8028ef4:	4801      	ldr	r0, [pc, #4]	; (8028efc <__sinit_lock_release+0x8>)
 8028ef6:	f000 bc16 	b.w	8029726 <__retarget_lock_release_recursive>
 8028efa:	bf00      	nop
 8028efc:	200570f7 	.word	0x200570f7

08028f00 <__sinit>:
 8028f00:	b510      	push	{r4, lr}
 8028f02:	4604      	mov	r4, r0
 8028f04:	f7ff fff0 	bl	8028ee8 <__sinit_lock_acquire>
 8028f08:	69a3      	ldr	r3, [r4, #24]
 8028f0a:	b11b      	cbz	r3, 8028f14 <__sinit+0x14>
 8028f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028f10:	f7ff bff0 	b.w	8028ef4 <__sinit_lock_release>
 8028f14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8028f18:	6523      	str	r3, [r4, #80]	; 0x50
 8028f1a:	4b13      	ldr	r3, [pc, #76]	; (8028f68 <__sinit+0x68>)
 8028f1c:	4a13      	ldr	r2, [pc, #76]	; (8028f6c <__sinit+0x6c>)
 8028f1e:	681b      	ldr	r3, [r3, #0]
 8028f20:	62a2      	str	r2, [r4, #40]	; 0x28
 8028f22:	42a3      	cmp	r3, r4
 8028f24:	bf04      	itt	eq
 8028f26:	2301      	moveq	r3, #1
 8028f28:	61a3      	streq	r3, [r4, #24]
 8028f2a:	4620      	mov	r0, r4
 8028f2c:	f000 f820 	bl	8028f70 <__sfp>
 8028f30:	6060      	str	r0, [r4, #4]
 8028f32:	4620      	mov	r0, r4
 8028f34:	f000 f81c 	bl	8028f70 <__sfp>
 8028f38:	60a0      	str	r0, [r4, #8]
 8028f3a:	4620      	mov	r0, r4
 8028f3c:	f000 f818 	bl	8028f70 <__sfp>
 8028f40:	2200      	movs	r2, #0
 8028f42:	60e0      	str	r0, [r4, #12]
 8028f44:	2104      	movs	r1, #4
 8028f46:	6860      	ldr	r0, [r4, #4]
 8028f48:	f7ff ff82 	bl	8028e50 <std>
 8028f4c:	68a0      	ldr	r0, [r4, #8]
 8028f4e:	2201      	movs	r2, #1
 8028f50:	2109      	movs	r1, #9
 8028f52:	f7ff ff7d 	bl	8028e50 <std>
 8028f56:	68e0      	ldr	r0, [r4, #12]
 8028f58:	2202      	movs	r2, #2
 8028f5a:	2112      	movs	r1, #18
 8028f5c:	f7ff ff78 	bl	8028e50 <std>
 8028f60:	2301      	movs	r3, #1
 8028f62:	61a3      	str	r3, [r4, #24]
 8028f64:	e7d2      	b.n	8028f0c <__sinit+0xc>
 8028f66:	bf00      	nop
 8028f68:	0802e920 	.word	0x0802e920
 8028f6c:	08028e99 	.word	0x08028e99

08028f70 <__sfp>:
 8028f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028f72:	4607      	mov	r7, r0
 8028f74:	f7ff ffac 	bl	8028ed0 <__sfp_lock_acquire>
 8028f78:	4b1e      	ldr	r3, [pc, #120]	; (8028ff4 <__sfp+0x84>)
 8028f7a:	681e      	ldr	r6, [r3, #0]
 8028f7c:	69b3      	ldr	r3, [r6, #24]
 8028f7e:	b913      	cbnz	r3, 8028f86 <__sfp+0x16>
 8028f80:	4630      	mov	r0, r6
 8028f82:	f7ff ffbd 	bl	8028f00 <__sinit>
 8028f86:	3648      	adds	r6, #72	; 0x48
 8028f88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028f8c:	3b01      	subs	r3, #1
 8028f8e:	d503      	bpl.n	8028f98 <__sfp+0x28>
 8028f90:	6833      	ldr	r3, [r6, #0]
 8028f92:	b30b      	cbz	r3, 8028fd8 <__sfp+0x68>
 8028f94:	6836      	ldr	r6, [r6, #0]
 8028f96:	e7f7      	b.n	8028f88 <__sfp+0x18>
 8028f98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028f9c:	b9d5      	cbnz	r5, 8028fd4 <__sfp+0x64>
 8028f9e:	4b16      	ldr	r3, [pc, #88]	; (8028ff8 <__sfp+0x88>)
 8028fa0:	60e3      	str	r3, [r4, #12]
 8028fa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8028fa6:	6665      	str	r5, [r4, #100]	; 0x64
 8028fa8:	f000 fbba 	bl	8029720 <__retarget_lock_init_recursive>
 8028fac:	f7ff ff96 	bl	8028edc <__sfp_lock_release>
 8028fb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8028fb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8028fb8:	6025      	str	r5, [r4, #0]
 8028fba:	61a5      	str	r5, [r4, #24]
 8028fbc:	2208      	movs	r2, #8
 8028fbe:	4629      	mov	r1, r5
 8028fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028fc4:	f7fd f808 	bl	8025fd8 <memset>
 8028fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8028fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8028fd0:	4620      	mov	r0, r4
 8028fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028fd4:	3468      	adds	r4, #104	; 0x68
 8028fd6:	e7d9      	b.n	8028f8c <__sfp+0x1c>
 8028fd8:	2104      	movs	r1, #4
 8028fda:	4638      	mov	r0, r7
 8028fdc:	f7ff ff62 	bl	8028ea4 <__sfmoreglue>
 8028fe0:	4604      	mov	r4, r0
 8028fe2:	6030      	str	r0, [r6, #0]
 8028fe4:	2800      	cmp	r0, #0
 8028fe6:	d1d5      	bne.n	8028f94 <__sfp+0x24>
 8028fe8:	f7ff ff78 	bl	8028edc <__sfp_lock_release>
 8028fec:	230c      	movs	r3, #12
 8028fee:	603b      	str	r3, [r7, #0]
 8028ff0:	e7ee      	b.n	8028fd0 <__sfp+0x60>
 8028ff2:	bf00      	nop
 8028ff4:	0802e920 	.word	0x0802e920
 8028ff8:	ffff0001 	.word	0xffff0001

08028ffc <_fwalk_reent>:
 8028ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029000:	4606      	mov	r6, r0
 8029002:	4688      	mov	r8, r1
 8029004:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029008:	2700      	movs	r7, #0
 802900a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802900e:	f1b9 0901 	subs.w	r9, r9, #1
 8029012:	d505      	bpl.n	8029020 <_fwalk_reent+0x24>
 8029014:	6824      	ldr	r4, [r4, #0]
 8029016:	2c00      	cmp	r4, #0
 8029018:	d1f7      	bne.n	802900a <_fwalk_reent+0xe>
 802901a:	4638      	mov	r0, r7
 802901c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029020:	89ab      	ldrh	r3, [r5, #12]
 8029022:	2b01      	cmp	r3, #1
 8029024:	d907      	bls.n	8029036 <_fwalk_reent+0x3a>
 8029026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802902a:	3301      	adds	r3, #1
 802902c:	d003      	beq.n	8029036 <_fwalk_reent+0x3a>
 802902e:	4629      	mov	r1, r5
 8029030:	4630      	mov	r0, r6
 8029032:	47c0      	blx	r8
 8029034:	4307      	orrs	r7, r0
 8029036:	3568      	adds	r5, #104	; 0x68
 8029038:	e7e9      	b.n	802900e <_fwalk_reent+0x12>

0802903a <rshift>:
 802903a:	6903      	ldr	r3, [r0, #16]
 802903c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8029040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029044:	ea4f 1261 	mov.w	r2, r1, asr #5
 8029048:	f100 0414 	add.w	r4, r0, #20
 802904c:	dd45      	ble.n	80290da <rshift+0xa0>
 802904e:	f011 011f 	ands.w	r1, r1, #31
 8029052:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8029056:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802905a:	d10c      	bne.n	8029076 <rshift+0x3c>
 802905c:	f100 0710 	add.w	r7, r0, #16
 8029060:	4629      	mov	r1, r5
 8029062:	42b1      	cmp	r1, r6
 8029064:	d334      	bcc.n	80290d0 <rshift+0x96>
 8029066:	1a9b      	subs	r3, r3, r2
 8029068:	009b      	lsls	r3, r3, #2
 802906a:	1eea      	subs	r2, r5, #3
 802906c:	4296      	cmp	r6, r2
 802906e:	bf38      	it	cc
 8029070:	2300      	movcc	r3, #0
 8029072:	4423      	add	r3, r4
 8029074:	e015      	b.n	80290a2 <rshift+0x68>
 8029076:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802907a:	f1c1 0820 	rsb	r8, r1, #32
 802907e:	40cf      	lsrs	r7, r1
 8029080:	f105 0e04 	add.w	lr, r5, #4
 8029084:	46a1      	mov	r9, r4
 8029086:	4576      	cmp	r6, lr
 8029088:	46f4      	mov	ip, lr
 802908a:	d815      	bhi.n	80290b8 <rshift+0x7e>
 802908c:	1a9b      	subs	r3, r3, r2
 802908e:	009a      	lsls	r2, r3, #2
 8029090:	3a04      	subs	r2, #4
 8029092:	3501      	adds	r5, #1
 8029094:	42ae      	cmp	r6, r5
 8029096:	bf38      	it	cc
 8029098:	2200      	movcc	r2, #0
 802909a:	18a3      	adds	r3, r4, r2
 802909c:	50a7      	str	r7, [r4, r2]
 802909e:	b107      	cbz	r7, 80290a2 <rshift+0x68>
 80290a0:	3304      	adds	r3, #4
 80290a2:	1b1a      	subs	r2, r3, r4
 80290a4:	42a3      	cmp	r3, r4
 80290a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80290aa:	bf08      	it	eq
 80290ac:	2300      	moveq	r3, #0
 80290ae:	6102      	str	r2, [r0, #16]
 80290b0:	bf08      	it	eq
 80290b2:	6143      	streq	r3, [r0, #20]
 80290b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80290b8:	f8dc c000 	ldr.w	ip, [ip]
 80290bc:	fa0c fc08 	lsl.w	ip, ip, r8
 80290c0:	ea4c 0707 	orr.w	r7, ip, r7
 80290c4:	f849 7b04 	str.w	r7, [r9], #4
 80290c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80290cc:	40cf      	lsrs	r7, r1
 80290ce:	e7da      	b.n	8029086 <rshift+0x4c>
 80290d0:	f851 cb04 	ldr.w	ip, [r1], #4
 80290d4:	f847 cf04 	str.w	ip, [r7, #4]!
 80290d8:	e7c3      	b.n	8029062 <rshift+0x28>
 80290da:	4623      	mov	r3, r4
 80290dc:	e7e1      	b.n	80290a2 <rshift+0x68>

080290de <__hexdig_fun>:
 80290de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80290e2:	2b09      	cmp	r3, #9
 80290e4:	d802      	bhi.n	80290ec <__hexdig_fun+0xe>
 80290e6:	3820      	subs	r0, #32
 80290e8:	b2c0      	uxtb	r0, r0
 80290ea:	4770      	bx	lr
 80290ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80290f0:	2b05      	cmp	r3, #5
 80290f2:	d801      	bhi.n	80290f8 <__hexdig_fun+0x1a>
 80290f4:	3847      	subs	r0, #71	; 0x47
 80290f6:	e7f7      	b.n	80290e8 <__hexdig_fun+0xa>
 80290f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80290fc:	2b05      	cmp	r3, #5
 80290fe:	d801      	bhi.n	8029104 <__hexdig_fun+0x26>
 8029100:	3827      	subs	r0, #39	; 0x27
 8029102:	e7f1      	b.n	80290e8 <__hexdig_fun+0xa>
 8029104:	2000      	movs	r0, #0
 8029106:	4770      	bx	lr

08029108 <__gethex>:
 8029108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802910c:	ed2d 8b02 	vpush	{d8}
 8029110:	b089      	sub	sp, #36	; 0x24
 8029112:	ee08 0a10 	vmov	s16, r0
 8029116:	9304      	str	r3, [sp, #16]
 8029118:	4bbc      	ldr	r3, [pc, #752]	; (802940c <__gethex+0x304>)
 802911a:	681b      	ldr	r3, [r3, #0]
 802911c:	9301      	str	r3, [sp, #4]
 802911e:	4618      	mov	r0, r3
 8029120:	468b      	mov	fp, r1
 8029122:	4690      	mov	r8, r2
 8029124:	f7d7 f88c 	bl	8000240 <strlen>
 8029128:	9b01      	ldr	r3, [sp, #4]
 802912a:	f8db 2000 	ldr.w	r2, [fp]
 802912e:	4403      	add	r3, r0
 8029130:	4682      	mov	sl, r0
 8029132:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8029136:	9305      	str	r3, [sp, #20]
 8029138:	1c93      	adds	r3, r2, #2
 802913a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802913e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8029142:	32fe      	adds	r2, #254	; 0xfe
 8029144:	18d1      	adds	r1, r2, r3
 8029146:	461f      	mov	r7, r3
 8029148:	f813 0b01 	ldrb.w	r0, [r3], #1
 802914c:	9100      	str	r1, [sp, #0]
 802914e:	2830      	cmp	r0, #48	; 0x30
 8029150:	d0f8      	beq.n	8029144 <__gethex+0x3c>
 8029152:	f7ff ffc4 	bl	80290de <__hexdig_fun>
 8029156:	4604      	mov	r4, r0
 8029158:	2800      	cmp	r0, #0
 802915a:	d13a      	bne.n	80291d2 <__gethex+0xca>
 802915c:	9901      	ldr	r1, [sp, #4]
 802915e:	4652      	mov	r2, sl
 8029160:	4638      	mov	r0, r7
 8029162:	f001 fa14 	bl	802a58e <strncmp>
 8029166:	4605      	mov	r5, r0
 8029168:	2800      	cmp	r0, #0
 802916a:	d168      	bne.n	802923e <__gethex+0x136>
 802916c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8029170:	eb07 060a 	add.w	r6, r7, sl
 8029174:	f7ff ffb3 	bl	80290de <__hexdig_fun>
 8029178:	2800      	cmp	r0, #0
 802917a:	d062      	beq.n	8029242 <__gethex+0x13a>
 802917c:	4633      	mov	r3, r6
 802917e:	7818      	ldrb	r0, [r3, #0]
 8029180:	2830      	cmp	r0, #48	; 0x30
 8029182:	461f      	mov	r7, r3
 8029184:	f103 0301 	add.w	r3, r3, #1
 8029188:	d0f9      	beq.n	802917e <__gethex+0x76>
 802918a:	f7ff ffa8 	bl	80290de <__hexdig_fun>
 802918e:	2301      	movs	r3, #1
 8029190:	fab0 f480 	clz	r4, r0
 8029194:	0964      	lsrs	r4, r4, #5
 8029196:	4635      	mov	r5, r6
 8029198:	9300      	str	r3, [sp, #0]
 802919a:	463a      	mov	r2, r7
 802919c:	4616      	mov	r6, r2
 802919e:	3201      	adds	r2, #1
 80291a0:	7830      	ldrb	r0, [r6, #0]
 80291a2:	f7ff ff9c 	bl	80290de <__hexdig_fun>
 80291a6:	2800      	cmp	r0, #0
 80291a8:	d1f8      	bne.n	802919c <__gethex+0x94>
 80291aa:	9901      	ldr	r1, [sp, #4]
 80291ac:	4652      	mov	r2, sl
 80291ae:	4630      	mov	r0, r6
 80291b0:	f001 f9ed 	bl	802a58e <strncmp>
 80291b4:	b980      	cbnz	r0, 80291d8 <__gethex+0xd0>
 80291b6:	b94d      	cbnz	r5, 80291cc <__gethex+0xc4>
 80291b8:	eb06 050a 	add.w	r5, r6, sl
 80291bc:	462a      	mov	r2, r5
 80291be:	4616      	mov	r6, r2
 80291c0:	3201      	adds	r2, #1
 80291c2:	7830      	ldrb	r0, [r6, #0]
 80291c4:	f7ff ff8b 	bl	80290de <__hexdig_fun>
 80291c8:	2800      	cmp	r0, #0
 80291ca:	d1f8      	bne.n	80291be <__gethex+0xb6>
 80291cc:	1bad      	subs	r5, r5, r6
 80291ce:	00ad      	lsls	r5, r5, #2
 80291d0:	e004      	b.n	80291dc <__gethex+0xd4>
 80291d2:	2400      	movs	r4, #0
 80291d4:	4625      	mov	r5, r4
 80291d6:	e7e0      	b.n	802919a <__gethex+0x92>
 80291d8:	2d00      	cmp	r5, #0
 80291da:	d1f7      	bne.n	80291cc <__gethex+0xc4>
 80291dc:	7833      	ldrb	r3, [r6, #0]
 80291de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80291e2:	2b50      	cmp	r3, #80	; 0x50
 80291e4:	d13b      	bne.n	802925e <__gethex+0x156>
 80291e6:	7873      	ldrb	r3, [r6, #1]
 80291e8:	2b2b      	cmp	r3, #43	; 0x2b
 80291ea:	d02c      	beq.n	8029246 <__gethex+0x13e>
 80291ec:	2b2d      	cmp	r3, #45	; 0x2d
 80291ee:	d02e      	beq.n	802924e <__gethex+0x146>
 80291f0:	1c71      	adds	r1, r6, #1
 80291f2:	f04f 0900 	mov.w	r9, #0
 80291f6:	7808      	ldrb	r0, [r1, #0]
 80291f8:	f7ff ff71 	bl	80290de <__hexdig_fun>
 80291fc:	1e43      	subs	r3, r0, #1
 80291fe:	b2db      	uxtb	r3, r3
 8029200:	2b18      	cmp	r3, #24
 8029202:	d82c      	bhi.n	802925e <__gethex+0x156>
 8029204:	f1a0 0210 	sub.w	r2, r0, #16
 8029208:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802920c:	f7ff ff67 	bl	80290de <__hexdig_fun>
 8029210:	1e43      	subs	r3, r0, #1
 8029212:	b2db      	uxtb	r3, r3
 8029214:	2b18      	cmp	r3, #24
 8029216:	d91d      	bls.n	8029254 <__gethex+0x14c>
 8029218:	f1b9 0f00 	cmp.w	r9, #0
 802921c:	d000      	beq.n	8029220 <__gethex+0x118>
 802921e:	4252      	negs	r2, r2
 8029220:	4415      	add	r5, r2
 8029222:	f8cb 1000 	str.w	r1, [fp]
 8029226:	b1e4      	cbz	r4, 8029262 <__gethex+0x15a>
 8029228:	9b00      	ldr	r3, [sp, #0]
 802922a:	2b00      	cmp	r3, #0
 802922c:	bf14      	ite	ne
 802922e:	2700      	movne	r7, #0
 8029230:	2706      	moveq	r7, #6
 8029232:	4638      	mov	r0, r7
 8029234:	b009      	add	sp, #36	; 0x24
 8029236:	ecbd 8b02 	vpop	{d8}
 802923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802923e:	463e      	mov	r6, r7
 8029240:	4625      	mov	r5, r4
 8029242:	2401      	movs	r4, #1
 8029244:	e7ca      	b.n	80291dc <__gethex+0xd4>
 8029246:	f04f 0900 	mov.w	r9, #0
 802924a:	1cb1      	adds	r1, r6, #2
 802924c:	e7d3      	b.n	80291f6 <__gethex+0xee>
 802924e:	f04f 0901 	mov.w	r9, #1
 8029252:	e7fa      	b.n	802924a <__gethex+0x142>
 8029254:	230a      	movs	r3, #10
 8029256:	fb03 0202 	mla	r2, r3, r2, r0
 802925a:	3a10      	subs	r2, #16
 802925c:	e7d4      	b.n	8029208 <__gethex+0x100>
 802925e:	4631      	mov	r1, r6
 8029260:	e7df      	b.n	8029222 <__gethex+0x11a>
 8029262:	1bf3      	subs	r3, r6, r7
 8029264:	3b01      	subs	r3, #1
 8029266:	4621      	mov	r1, r4
 8029268:	2b07      	cmp	r3, #7
 802926a:	dc0b      	bgt.n	8029284 <__gethex+0x17c>
 802926c:	ee18 0a10 	vmov	r0, s16
 8029270:	f000 faf6 	bl	8029860 <_Balloc>
 8029274:	4604      	mov	r4, r0
 8029276:	b940      	cbnz	r0, 802928a <__gethex+0x182>
 8029278:	4b65      	ldr	r3, [pc, #404]	; (8029410 <__gethex+0x308>)
 802927a:	4602      	mov	r2, r0
 802927c:	21de      	movs	r1, #222	; 0xde
 802927e:	4865      	ldr	r0, [pc, #404]	; (8029414 <__gethex+0x30c>)
 8029280:	f7fc fe1e 	bl	8025ec0 <__assert_func>
 8029284:	3101      	adds	r1, #1
 8029286:	105b      	asrs	r3, r3, #1
 8029288:	e7ee      	b.n	8029268 <__gethex+0x160>
 802928a:	f100 0914 	add.w	r9, r0, #20
 802928e:	f04f 0b00 	mov.w	fp, #0
 8029292:	f1ca 0301 	rsb	r3, sl, #1
 8029296:	f8cd 9008 	str.w	r9, [sp, #8]
 802929a:	f8cd b000 	str.w	fp, [sp]
 802929e:	9306      	str	r3, [sp, #24]
 80292a0:	42b7      	cmp	r7, r6
 80292a2:	d340      	bcc.n	8029326 <__gethex+0x21e>
 80292a4:	9802      	ldr	r0, [sp, #8]
 80292a6:	9b00      	ldr	r3, [sp, #0]
 80292a8:	f840 3b04 	str.w	r3, [r0], #4
 80292ac:	eba0 0009 	sub.w	r0, r0, r9
 80292b0:	1080      	asrs	r0, r0, #2
 80292b2:	0146      	lsls	r6, r0, #5
 80292b4:	6120      	str	r0, [r4, #16]
 80292b6:	4618      	mov	r0, r3
 80292b8:	f000 fbc8 	bl	8029a4c <__hi0bits>
 80292bc:	1a30      	subs	r0, r6, r0
 80292be:	f8d8 6000 	ldr.w	r6, [r8]
 80292c2:	42b0      	cmp	r0, r6
 80292c4:	dd63      	ble.n	802938e <__gethex+0x286>
 80292c6:	1b87      	subs	r7, r0, r6
 80292c8:	4639      	mov	r1, r7
 80292ca:	4620      	mov	r0, r4
 80292cc:	f000 ff63 	bl	802a196 <__any_on>
 80292d0:	4682      	mov	sl, r0
 80292d2:	b1a8      	cbz	r0, 8029300 <__gethex+0x1f8>
 80292d4:	1e7b      	subs	r3, r7, #1
 80292d6:	1159      	asrs	r1, r3, #5
 80292d8:	f003 021f 	and.w	r2, r3, #31
 80292dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80292e0:	f04f 0a01 	mov.w	sl, #1
 80292e4:	fa0a f202 	lsl.w	r2, sl, r2
 80292e8:	420a      	tst	r2, r1
 80292ea:	d009      	beq.n	8029300 <__gethex+0x1f8>
 80292ec:	4553      	cmp	r3, sl
 80292ee:	dd05      	ble.n	80292fc <__gethex+0x1f4>
 80292f0:	1eb9      	subs	r1, r7, #2
 80292f2:	4620      	mov	r0, r4
 80292f4:	f000 ff4f 	bl	802a196 <__any_on>
 80292f8:	2800      	cmp	r0, #0
 80292fa:	d145      	bne.n	8029388 <__gethex+0x280>
 80292fc:	f04f 0a02 	mov.w	sl, #2
 8029300:	4639      	mov	r1, r7
 8029302:	4620      	mov	r0, r4
 8029304:	f7ff fe99 	bl	802903a <rshift>
 8029308:	443d      	add	r5, r7
 802930a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802930e:	42ab      	cmp	r3, r5
 8029310:	da4c      	bge.n	80293ac <__gethex+0x2a4>
 8029312:	ee18 0a10 	vmov	r0, s16
 8029316:	4621      	mov	r1, r4
 8029318:	f000 fae2 	bl	80298e0 <_Bfree>
 802931c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802931e:	2300      	movs	r3, #0
 8029320:	6013      	str	r3, [r2, #0]
 8029322:	27a3      	movs	r7, #163	; 0xa3
 8029324:	e785      	b.n	8029232 <__gethex+0x12a>
 8029326:	1e73      	subs	r3, r6, #1
 8029328:	9a05      	ldr	r2, [sp, #20]
 802932a:	9303      	str	r3, [sp, #12]
 802932c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029330:	4293      	cmp	r3, r2
 8029332:	d019      	beq.n	8029368 <__gethex+0x260>
 8029334:	f1bb 0f20 	cmp.w	fp, #32
 8029338:	d107      	bne.n	802934a <__gethex+0x242>
 802933a:	9b02      	ldr	r3, [sp, #8]
 802933c:	9a00      	ldr	r2, [sp, #0]
 802933e:	f843 2b04 	str.w	r2, [r3], #4
 8029342:	9302      	str	r3, [sp, #8]
 8029344:	2300      	movs	r3, #0
 8029346:	9300      	str	r3, [sp, #0]
 8029348:	469b      	mov	fp, r3
 802934a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802934e:	f7ff fec6 	bl	80290de <__hexdig_fun>
 8029352:	9b00      	ldr	r3, [sp, #0]
 8029354:	f000 000f 	and.w	r0, r0, #15
 8029358:	fa00 f00b 	lsl.w	r0, r0, fp
 802935c:	4303      	orrs	r3, r0
 802935e:	9300      	str	r3, [sp, #0]
 8029360:	f10b 0b04 	add.w	fp, fp, #4
 8029364:	9b03      	ldr	r3, [sp, #12]
 8029366:	e00d      	b.n	8029384 <__gethex+0x27c>
 8029368:	9b03      	ldr	r3, [sp, #12]
 802936a:	9a06      	ldr	r2, [sp, #24]
 802936c:	4413      	add	r3, r2
 802936e:	42bb      	cmp	r3, r7
 8029370:	d3e0      	bcc.n	8029334 <__gethex+0x22c>
 8029372:	4618      	mov	r0, r3
 8029374:	9901      	ldr	r1, [sp, #4]
 8029376:	9307      	str	r3, [sp, #28]
 8029378:	4652      	mov	r2, sl
 802937a:	f001 f908 	bl	802a58e <strncmp>
 802937e:	9b07      	ldr	r3, [sp, #28]
 8029380:	2800      	cmp	r0, #0
 8029382:	d1d7      	bne.n	8029334 <__gethex+0x22c>
 8029384:	461e      	mov	r6, r3
 8029386:	e78b      	b.n	80292a0 <__gethex+0x198>
 8029388:	f04f 0a03 	mov.w	sl, #3
 802938c:	e7b8      	b.n	8029300 <__gethex+0x1f8>
 802938e:	da0a      	bge.n	80293a6 <__gethex+0x29e>
 8029390:	1a37      	subs	r7, r6, r0
 8029392:	4621      	mov	r1, r4
 8029394:	ee18 0a10 	vmov	r0, s16
 8029398:	463a      	mov	r2, r7
 802939a:	f000 fcbd 	bl	8029d18 <__lshift>
 802939e:	1bed      	subs	r5, r5, r7
 80293a0:	4604      	mov	r4, r0
 80293a2:	f100 0914 	add.w	r9, r0, #20
 80293a6:	f04f 0a00 	mov.w	sl, #0
 80293aa:	e7ae      	b.n	802930a <__gethex+0x202>
 80293ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80293b0:	42a8      	cmp	r0, r5
 80293b2:	dd72      	ble.n	802949a <__gethex+0x392>
 80293b4:	1b45      	subs	r5, r0, r5
 80293b6:	42ae      	cmp	r6, r5
 80293b8:	dc36      	bgt.n	8029428 <__gethex+0x320>
 80293ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80293be:	2b02      	cmp	r3, #2
 80293c0:	d02a      	beq.n	8029418 <__gethex+0x310>
 80293c2:	2b03      	cmp	r3, #3
 80293c4:	d02c      	beq.n	8029420 <__gethex+0x318>
 80293c6:	2b01      	cmp	r3, #1
 80293c8:	d115      	bne.n	80293f6 <__gethex+0x2ee>
 80293ca:	42ae      	cmp	r6, r5
 80293cc:	d113      	bne.n	80293f6 <__gethex+0x2ee>
 80293ce:	2e01      	cmp	r6, #1
 80293d0:	d10b      	bne.n	80293ea <__gethex+0x2e2>
 80293d2:	9a04      	ldr	r2, [sp, #16]
 80293d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80293d8:	6013      	str	r3, [r2, #0]
 80293da:	2301      	movs	r3, #1
 80293dc:	6123      	str	r3, [r4, #16]
 80293de:	f8c9 3000 	str.w	r3, [r9]
 80293e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80293e4:	2762      	movs	r7, #98	; 0x62
 80293e6:	601c      	str	r4, [r3, #0]
 80293e8:	e723      	b.n	8029232 <__gethex+0x12a>
 80293ea:	1e71      	subs	r1, r6, #1
 80293ec:	4620      	mov	r0, r4
 80293ee:	f000 fed2 	bl	802a196 <__any_on>
 80293f2:	2800      	cmp	r0, #0
 80293f4:	d1ed      	bne.n	80293d2 <__gethex+0x2ca>
 80293f6:	ee18 0a10 	vmov	r0, s16
 80293fa:	4621      	mov	r1, r4
 80293fc:	f000 fa70 	bl	80298e0 <_Bfree>
 8029400:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029402:	2300      	movs	r3, #0
 8029404:	6013      	str	r3, [r2, #0]
 8029406:	2750      	movs	r7, #80	; 0x50
 8029408:	e713      	b.n	8029232 <__gethex+0x12a>
 802940a:	bf00      	nop
 802940c:	0802ec24 	.word	0x0802ec24
 8029410:	0802eb44 	.word	0x0802eb44
 8029414:	0802ebb8 	.word	0x0802ebb8
 8029418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802941a:	2b00      	cmp	r3, #0
 802941c:	d1eb      	bne.n	80293f6 <__gethex+0x2ee>
 802941e:	e7d8      	b.n	80293d2 <__gethex+0x2ca>
 8029420:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029422:	2b00      	cmp	r3, #0
 8029424:	d1d5      	bne.n	80293d2 <__gethex+0x2ca>
 8029426:	e7e6      	b.n	80293f6 <__gethex+0x2ee>
 8029428:	1e6f      	subs	r7, r5, #1
 802942a:	f1ba 0f00 	cmp.w	sl, #0
 802942e:	d131      	bne.n	8029494 <__gethex+0x38c>
 8029430:	b127      	cbz	r7, 802943c <__gethex+0x334>
 8029432:	4639      	mov	r1, r7
 8029434:	4620      	mov	r0, r4
 8029436:	f000 feae 	bl	802a196 <__any_on>
 802943a:	4682      	mov	sl, r0
 802943c:	117b      	asrs	r3, r7, #5
 802943e:	2101      	movs	r1, #1
 8029440:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029444:	f007 071f 	and.w	r7, r7, #31
 8029448:	fa01 f707 	lsl.w	r7, r1, r7
 802944c:	421f      	tst	r7, r3
 802944e:	4629      	mov	r1, r5
 8029450:	4620      	mov	r0, r4
 8029452:	bf18      	it	ne
 8029454:	f04a 0a02 	orrne.w	sl, sl, #2
 8029458:	1b76      	subs	r6, r6, r5
 802945a:	f7ff fdee 	bl	802903a <rshift>
 802945e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029462:	2702      	movs	r7, #2
 8029464:	f1ba 0f00 	cmp.w	sl, #0
 8029468:	d048      	beq.n	80294fc <__gethex+0x3f4>
 802946a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802946e:	2b02      	cmp	r3, #2
 8029470:	d015      	beq.n	802949e <__gethex+0x396>
 8029472:	2b03      	cmp	r3, #3
 8029474:	d017      	beq.n	80294a6 <__gethex+0x39e>
 8029476:	2b01      	cmp	r3, #1
 8029478:	d109      	bne.n	802948e <__gethex+0x386>
 802947a:	f01a 0f02 	tst.w	sl, #2
 802947e:	d006      	beq.n	802948e <__gethex+0x386>
 8029480:	f8d9 0000 	ldr.w	r0, [r9]
 8029484:	ea4a 0a00 	orr.w	sl, sl, r0
 8029488:	f01a 0f01 	tst.w	sl, #1
 802948c:	d10e      	bne.n	80294ac <__gethex+0x3a4>
 802948e:	f047 0710 	orr.w	r7, r7, #16
 8029492:	e033      	b.n	80294fc <__gethex+0x3f4>
 8029494:	f04f 0a01 	mov.w	sl, #1
 8029498:	e7d0      	b.n	802943c <__gethex+0x334>
 802949a:	2701      	movs	r7, #1
 802949c:	e7e2      	b.n	8029464 <__gethex+0x35c>
 802949e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80294a0:	f1c3 0301 	rsb	r3, r3, #1
 80294a4:	9315      	str	r3, [sp, #84]	; 0x54
 80294a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80294a8:	2b00      	cmp	r3, #0
 80294aa:	d0f0      	beq.n	802948e <__gethex+0x386>
 80294ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80294b0:	f104 0314 	add.w	r3, r4, #20
 80294b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80294b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80294bc:	f04f 0c00 	mov.w	ip, #0
 80294c0:	4618      	mov	r0, r3
 80294c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80294c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80294ca:	d01c      	beq.n	8029506 <__gethex+0x3fe>
 80294cc:	3201      	adds	r2, #1
 80294ce:	6002      	str	r2, [r0, #0]
 80294d0:	2f02      	cmp	r7, #2
 80294d2:	f104 0314 	add.w	r3, r4, #20
 80294d6:	d13f      	bne.n	8029558 <__gethex+0x450>
 80294d8:	f8d8 2000 	ldr.w	r2, [r8]
 80294dc:	3a01      	subs	r2, #1
 80294de:	42b2      	cmp	r2, r6
 80294e0:	d10a      	bne.n	80294f8 <__gethex+0x3f0>
 80294e2:	1171      	asrs	r1, r6, #5
 80294e4:	2201      	movs	r2, #1
 80294e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80294ea:	f006 061f 	and.w	r6, r6, #31
 80294ee:	fa02 f606 	lsl.w	r6, r2, r6
 80294f2:	421e      	tst	r6, r3
 80294f4:	bf18      	it	ne
 80294f6:	4617      	movne	r7, r2
 80294f8:	f047 0720 	orr.w	r7, r7, #32
 80294fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80294fe:	601c      	str	r4, [r3, #0]
 8029500:	9b04      	ldr	r3, [sp, #16]
 8029502:	601d      	str	r5, [r3, #0]
 8029504:	e695      	b.n	8029232 <__gethex+0x12a>
 8029506:	4299      	cmp	r1, r3
 8029508:	f843 cc04 	str.w	ip, [r3, #-4]
 802950c:	d8d8      	bhi.n	80294c0 <__gethex+0x3b8>
 802950e:	68a3      	ldr	r3, [r4, #8]
 8029510:	459b      	cmp	fp, r3
 8029512:	db19      	blt.n	8029548 <__gethex+0x440>
 8029514:	6861      	ldr	r1, [r4, #4]
 8029516:	ee18 0a10 	vmov	r0, s16
 802951a:	3101      	adds	r1, #1
 802951c:	f000 f9a0 	bl	8029860 <_Balloc>
 8029520:	4681      	mov	r9, r0
 8029522:	b918      	cbnz	r0, 802952c <__gethex+0x424>
 8029524:	4b1a      	ldr	r3, [pc, #104]	; (8029590 <__gethex+0x488>)
 8029526:	4602      	mov	r2, r0
 8029528:	2184      	movs	r1, #132	; 0x84
 802952a:	e6a8      	b.n	802927e <__gethex+0x176>
 802952c:	6922      	ldr	r2, [r4, #16]
 802952e:	3202      	adds	r2, #2
 8029530:	f104 010c 	add.w	r1, r4, #12
 8029534:	0092      	lsls	r2, r2, #2
 8029536:	300c      	adds	r0, #12
 8029538:	f7fc fd40 	bl	8025fbc <memcpy>
 802953c:	4621      	mov	r1, r4
 802953e:	ee18 0a10 	vmov	r0, s16
 8029542:	f000 f9cd 	bl	80298e0 <_Bfree>
 8029546:	464c      	mov	r4, r9
 8029548:	6923      	ldr	r3, [r4, #16]
 802954a:	1c5a      	adds	r2, r3, #1
 802954c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8029550:	6122      	str	r2, [r4, #16]
 8029552:	2201      	movs	r2, #1
 8029554:	615a      	str	r2, [r3, #20]
 8029556:	e7bb      	b.n	80294d0 <__gethex+0x3c8>
 8029558:	6922      	ldr	r2, [r4, #16]
 802955a:	455a      	cmp	r2, fp
 802955c:	dd0b      	ble.n	8029576 <__gethex+0x46e>
 802955e:	2101      	movs	r1, #1
 8029560:	4620      	mov	r0, r4
 8029562:	f7ff fd6a 	bl	802903a <rshift>
 8029566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802956a:	3501      	adds	r5, #1
 802956c:	42ab      	cmp	r3, r5
 802956e:	f6ff aed0 	blt.w	8029312 <__gethex+0x20a>
 8029572:	2701      	movs	r7, #1
 8029574:	e7c0      	b.n	80294f8 <__gethex+0x3f0>
 8029576:	f016 061f 	ands.w	r6, r6, #31
 802957a:	d0fa      	beq.n	8029572 <__gethex+0x46a>
 802957c:	449a      	add	sl, r3
 802957e:	f1c6 0620 	rsb	r6, r6, #32
 8029582:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8029586:	f000 fa61 	bl	8029a4c <__hi0bits>
 802958a:	42b0      	cmp	r0, r6
 802958c:	dbe7      	blt.n	802955e <__gethex+0x456>
 802958e:	e7f0      	b.n	8029572 <__gethex+0x46a>
 8029590:	0802eb44 	.word	0x0802eb44

08029594 <L_shift>:
 8029594:	f1c2 0208 	rsb	r2, r2, #8
 8029598:	0092      	lsls	r2, r2, #2
 802959a:	b570      	push	{r4, r5, r6, lr}
 802959c:	f1c2 0620 	rsb	r6, r2, #32
 80295a0:	6843      	ldr	r3, [r0, #4]
 80295a2:	6804      	ldr	r4, [r0, #0]
 80295a4:	fa03 f506 	lsl.w	r5, r3, r6
 80295a8:	432c      	orrs	r4, r5
 80295aa:	40d3      	lsrs	r3, r2
 80295ac:	6004      	str	r4, [r0, #0]
 80295ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80295b2:	4288      	cmp	r0, r1
 80295b4:	d3f4      	bcc.n	80295a0 <L_shift+0xc>
 80295b6:	bd70      	pop	{r4, r5, r6, pc}

080295b8 <__match>:
 80295b8:	b530      	push	{r4, r5, lr}
 80295ba:	6803      	ldr	r3, [r0, #0]
 80295bc:	3301      	adds	r3, #1
 80295be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80295c2:	b914      	cbnz	r4, 80295ca <__match+0x12>
 80295c4:	6003      	str	r3, [r0, #0]
 80295c6:	2001      	movs	r0, #1
 80295c8:	bd30      	pop	{r4, r5, pc}
 80295ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80295ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80295d2:	2d19      	cmp	r5, #25
 80295d4:	bf98      	it	ls
 80295d6:	3220      	addls	r2, #32
 80295d8:	42a2      	cmp	r2, r4
 80295da:	d0f0      	beq.n	80295be <__match+0x6>
 80295dc:	2000      	movs	r0, #0
 80295de:	e7f3      	b.n	80295c8 <__match+0x10>

080295e0 <__hexnan>:
 80295e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80295e4:	680b      	ldr	r3, [r1, #0]
 80295e6:	6801      	ldr	r1, [r0, #0]
 80295e8:	115e      	asrs	r6, r3, #5
 80295ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80295ee:	f013 031f 	ands.w	r3, r3, #31
 80295f2:	b087      	sub	sp, #28
 80295f4:	bf18      	it	ne
 80295f6:	3604      	addne	r6, #4
 80295f8:	2500      	movs	r5, #0
 80295fa:	1f37      	subs	r7, r6, #4
 80295fc:	4682      	mov	sl, r0
 80295fe:	4690      	mov	r8, r2
 8029600:	9301      	str	r3, [sp, #4]
 8029602:	f846 5c04 	str.w	r5, [r6, #-4]
 8029606:	46b9      	mov	r9, r7
 8029608:	463c      	mov	r4, r7
 802960a:	9502      	str	r5, [sp, #8]
 802960c:	46ab      	mov	fp, r5
 802960e:	784a      	ldrb	r2, [r1, #1]
 8029610:	1c4b      	adds	r3, r1, #1
 8029612:	9303      	str	r3, [sp, #12]
 8029614:	b342      	cbz	r2, 8029668 <__hexnan+0x88>
 8029616:	4610      	mov	r0, r2
 8029618:	9105      	str	r1, [sp, #20]
 802961a:	9204      	str	r2, [sp, #16]
 802961c:	f7ff fd5f 	bl	80290de <__hexdig_fun>
 8029620:	2800      	cmp	r0, #0
 8029622:	d14f      	bne.n	80296c4 <__hexnan+0xe4>
 8029624:	9a04      	ldr	r2, [sp, #16]
 8029626:	9905      	ldr	r1, [sp, #20]
 8029628:	2a20      	cmp	r2, #32
 802962a:	d818      	bhi.n	802965e <__hexnan+0x7e>
 802962c:	9b02      	ldr	r3, [sp, #8]
 802962e:	459b      	cmp	fp, r3
 8029630:	dd13      	ble.n	802965a <__hexnan+0x7a>
 8029632:	454c      	cmp	r4, r9
 8029634:	d206      	bcs.n	8029644 <__hexnan+0x64>
 8029636:	2d07      	cmp	r5, #7
 8029638:	dc04      	bgt.n	8029644 <__hexnan+0x64>
 802963a:	462a      	mov	r2, r5
 802963c:	4649      	mov	r1, r9
 802963e:	4620      	mov	r0, r4
 8029640:	f7ff ffa8 	bl	8029594 <L_shift>
 8029644:	4544      	cmp	r4, r8
 8029646:	d950      	bls.n	80296ea <__hexnan+0x10a>
 8029648:	2300      	movs	r3, #0
 802964a:	f1a4 0904 	sub.w	r9, r4, #4
 802964e:	f844 3c04 	str.w	r3, [r4, #-4]
 8029652:	f8cd b008 	str.w	fp, [sp, #8]
 8029656:	464c      	mov	r4, r9
 8029658:	461d      	mov	r5, r3
 802965a:	9903      	ldr	r1, [sp, #12]
 802965c:	e7d7      	b.n	802960e <__hexnan+0x2e>
 802965e:	2a29      	cmp	r2, #41	; 0x29
 8029660:	d156      	bne.n	8029710 <__hexnan+0x130>
 8029662:	3102      	adds	r1, #2
 8029664:	f8ca 1000 	str.w	r1, [sl]
 8029668:	f1bb 0f00 	cmp.w	fp, #0
 802966c:	d050      	beq.n	8029710 <__hexnan+0x130>
 802966e:	454c      	cmp	r4, r9
 8029670:	d206      	bcs.n	8029680 <__hexnan+0xa0>
 8029672:	2d07      	cmp	r5, #7
 8029674:	dc04      	bgt.n	8029680 <__hexnan+0xa0>
 8029676:	462a      	mov	r2, r5
 8029678:	4649      	mov	r1, r9
 802967a:	4620      	mov	r0, r4
 802967c:	f7ff ff8a 	bl	8029594 <L_shift>
 8029680:	4544      	cmp	r4, r8
 8029682:	d934      	bls.n	80296ee <__hexnan+0x10e>
 8029684:	f1a8 0204 	sub.w	r2, r8, #4
 8029688:	4623      	mov	r3, r4
 802968a:	f853 1b04 	ldr.w	r1, [r3], #4
 802968e:	f842 1f04 	str.w	r1, [r2, #4]!
 8029692:	429f      	cmp	r7, r3
 8029694:	d2f9      	bcs.n	802968a <__hexnan+0xaa>
 8029696:	1b3b      	subs	r3, r7, r4
 8029698:	f023 0303 	bic.w	r3, r3, #3
 802969c:	3304      	adds	r3, #4
 802969e:	3401      	adds	r4, #1
 80296a0:	3e03      	subs	r6, #3
 80296a2:	42b4      	cmp	r4, r6
 80296a4:	bf88      	it	hi
 80296a6:	2304      	movhi	r3, #4
 80296a8:	4443      	add	r3, r8
 80296aa:	2200      	movs	r2, #0
 80296ac:	f843 2b04 	str.w	r2, [r3], #4
 80296b0:	429f      	cmp	r7, r3
 80296b2:	d2fb      	bcs.n	80296ac <__hexnan+0xcc>
 80296b4:	683b      	ldr	r3, [r7, #0]
 80296b6:	b91b      	cbnz	r3, 80296c0 <__hexnan+0xe0>
 80296b8:	4547      	cmp	r7, r8
 80296ba:	d127      	bne.n	802970c <__hexnan+0x12c>
 80296bc:	2301      	movs	r3, #1
 80296be:	603b      	str	r3, [r7, #0]
 80296c0:	2005      	movs	r0, #5
 80296c2:	e026      	b.n	8029712 <__hexnan+0x132>
 80296c4:	3501      	adds	r5, #1
 80296c6:	2d08      	cmp	r5, #8
 80296c8:	f10b 0b01 	add.w	fp, fp, #1
 80296cc:	dd06      	ble.n	80296dc <__hexnan+0xfc>
 80296ce:	4544      	cmp	r4, r8
 80296d0:	d9c3      	bls.n	802965a <__hexnan+0x7a>
 80296d2:	2300      	movs	r3, #0
 80296d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80296d8:	2501      	movs	r5, #1
 80296da:	3c04      	subs	r4, #4
 80296dc:	6822      	ldr	r2, [r4, #0]
 80296de:	f000 000f 	and.w	r0, r0, #15
 80296e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80296e6:	6022      	str	r2, [r4, #0]
 80296e8:	e7b7      	b.n	802965a <__hexnan+0x7a>
 80296ea:	2508      	movs	r5, #8
 80296ec:	e7b5      	b.n	802965a <__hexnan+0x7a>
 80296ee:	9b01      	ldr	r3, [sp, #4]
 80296f0:	2b00      	cmp	r3, #0
 80296f2:	d0df      	beq.n	80296b4 <__hexnan+0xd4>
 80296f4:	f04f 32ff 	mov.w	r2, #4294967295
 80296f8:	f1c3 0320 	rsb	r3, r3, #32
 80296fc:	fa22 f303 	lsr.w	r3, r2, r3
 8029700:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8029704:	401a      	ands	r2, r3
 8029706:	f846 2c04 	str.w	r2, [r6, #-4]
 802970a:	e7d3      	b.n	80296b4 <__hexnan+0xd4>
 802970c:	3f04      	subs	r7, #4
 802970e:	e7d1      	b.n	80296b4 <__hexnan+0xd4>
 8029710:	2004      	movs	r0, #4
 8029712:	b007      	add	sp, #28
 8029714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029718 <_localeconv_r>:
 8029718:	4800      	ldr	r0, [pc, #0]	; (802971c <_localeconv_r+0x4>)
 802971a:	4770      	bx	lr
 802971c:	200001d8 	.word	0x200001d8

08029720 <__retarget_lock_init_recursive>:
 8029720:	4770      	bx	lr

08029722 <__retarget_lock_acquire_recursive>:
 8029722:	4770      	bx	lr

08029724 <__retarget_lock_release>:
 8029724:	4770      	bx	lr

08029726 <__retarget_lock_release_recursive>:
 8029726:	4770      	bx	lr

08029728 <__swhatbuf_r>:
 8029728:	b570      	push	{r4, r5, r6, lr}
 802972a:	460e      	mov	r6, r1
 802972c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029730:	2900      	cmp	r1, #0
 8029732:	b096      	sub	sp, #88	; 0x58
 8029734:	4614      	mov	r4, r2
 8029736:	461d      	mov	r5, r3
 8029738:	da07      	bge.n	802974a <__swhatbuf_r+0x22>
 802973a:	2300      	movs	r3, #0
 802973c:	602b      	str	r3, [r5, #0]
 802973e:	89b3      	ldrh	r3, [r6, #12]
 8029740:	061a      	lsls	r2, r3, #24
 8029742:	d410      	bmi.n	8029766 <__swhatbuf_r+0x3e>
 8029744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029748:	e00e      	b.n	8029768 <__swhatbuf_r+0x40>
 802974a:	466a      	mov	r2, sp
 802974c:	f000 ff60 	bl	802a610 <_fstat_r>
 8029750:	2800      	cmp	r0, #0
 8029752:	dbf2      	blt.n	802973a <__swhatbuf_r+0x12>
 8029754:	9a01      	ldr	r2, [sp, #4]
 8029756:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802975a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802975e:	425a      	negs	r2, r3
 8029760:	415a      	adcs	r2, r3
 8029762:	602a      	str	r2, [r5, #0]
 8029764:	e7ee      	b.n	8029744 <__swhatbuf_r+0x1c>
 8029766:	2340      	movs	r3, #64	; 0x40
 8029768:	2000      	movs	r0, #0
 802976a:	6023      	str	r3, [r4, #0]
 802976c:	b016      	add	sp, #88	; 0x58
 802976e:	bd70      	pop	{r4, r5, r6, pc}

08029770 <__smakebuf_r>:
 8029770:	898b      	ldrh	r3, [r1, #12]
 8029772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029774:	079d      	lsls	r5, r3, #30
 8029776:	4606      	mov	r6, r0
 8029778:	460c      	mov	r4, r1
 802977a:	d507      	bpl.n	802978c <__smakebuf_r+0x1c>
 802977c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029780:	6023      	str	r3, [r4, #0]
 8029782:	6123      	str	r3, [r4, #16]
 8029784:	2301      	movs	r3, #1
 8029786:	6163      	str	r3, [r4, #20]
 8029788:	b002      	add	sp, #8
 802978a:	bd70      	pop	{r4, r5, r6, pc}
 802978c:	ab01      	add	r3, sp, #4
 802978e:	466a      	mov	r2, sp
 8029790:	f7ff ffca 	bl	8029728 <__swhatbuf_r>
 8029794:	9900      	ldr	r1, [sp, #0]
 8029796:	4605      	mov	r5, r0
 8029798:	4630      	mov	r0, r6
 802979a:	f7fc fc75 	bl	8026088 <_malloc_r>
 802979e:	b948      	cbnz	r0, 80297b4 <__smakebuf_r+0x44>
 80297a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80297a4:	059a      	lsls	r2, r3, #22
 80297a6:	d4ef      	bmi.n	8029788 <__smakebuf_r+0x18>
 80297a8:	f023 0303 	bic.w	r3, r3, #3
 80297ac:	f043 0302 	orr.w	r3, r3, #2
 80297b0:	81a3      	strh	r3, [r4, #12]
 80297b2:	e7e3      	b.n	802977c <__smakebuf_r+0xc>
 80297b4:	4b0d      	ldr	r3, [pc, #52]	; (80297ec <__smakebuf_r+0x7c>)
 80297b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80297b8:	89a3      	ldrh	r3, [r4, #12]
 80297ba:	6020      	str	r0, [r4, #0]
 80297bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80297c0:	81a3      	strh	r3, [r4, #12]
 80297c2:	9b00      	ldr	r3, [sp, #0]
 80297c4:	6163      	str	r3, [r4, #20]
 80297c6:	9b01      	ldr	r3, [sp, #4]
 80297c8:	6120      	str	r0, [r4, #16]
 80297ca:	b15b      	cbz	r3, 80297e4 <__smakebuf_r+0x74>
 80297cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80297d0:	4630      	mov	r0, r6
 80297d2:	f000 ff2f 	bl	802a634 <_isatty_r>
 80297d6:	b128      	cbz	r0, 80297e4 <__smakebuf_r+0x74>
 80297d8:	89a3      	ldrh	r3, [r4, #12]
 80297da:	f023 0303 	bic.w	r3, r3, #3
 80297de:	f043 0301 	orr.w	r3, r3, #1
 80297e2:	81a3      	strh	r3, [r4, #12]
 80297e4:	89a0      	ldrh	r0, [r4, #12]
 80297e6:	4305      	orrs	r5, r0
 80297e8:	81a5      	strh	r5, [r4, #12]
 80297ea:	e7cd      	b.n	8029788 <__smakebuf_r+0x18>
 80297ec:	08028e99 	.word	0x08028e99

080297f0 <__ascii_mbtowc>:
 80297f0:	b082      	sub	sp, #8
 80297f2:	b901      	cbnz	r1, 80297f6 <__ascii_mbtowc+0x6>
 80297f4:	a901      	add	r1, sp, #4
 80297f6:	b142      	cbz	r2, 802980a <__ascii_mbtowc+0x1a>
 80297f8:	b14b      	cbz	r3, 802980e <__ascii_mbtowc+0x1e>
 80297fa:	7813      	ldrb	r3, [r2, #0]
 80297fc:	600b      	str	r3, [r1, #0]
 80297fe:	7812      	ldrb	r2, [r2, #0]
 8029800:	1e10      	subs	r0, r2, #0
 8029802:	bf18      	it	ne
 8029804:	2001      	movne	r0, #1
 8029806:	b002      	add	sp, #8
 8029808:	4770      	bx	lr
 802980a:	4610      	mov	r0, r2
 802980c:	e7fb      	b.n	8029806 <__ascii_mbtowc+0x16>
 802980e:	f06f 0001 	mvn.w	r0, #1
 8029812:	e7f8      	b.n	8029806 <__ascii_mbtowc+0x16>

08029814 <memmove>:
 8029814:	4288      	cmp	r0, r1
 8029816:	b510      	push	{r4, lr}
 8029818:	eb01 0402 	add.w	r4, r1, r2
 802981c:	d902      	bls.n	8029824 <memmove+0x10>
 802981e:	4284      	cmp	r4, r0
 8029820:	4623      	mov	r3, r4
 8029822:	d807      	bhi.n	8029834 <memmove+0x20>
 8029824:	1e43      	subs	r3, r0, #1
 8029826:	42a1      	cmp	r1, r4
 8029828:	d008      	beq.n	802983c <memmove+0x28>
 802982a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802982e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029832:	e7f8      	b.n	8029826 <memmove+0x12>
 8029834:	4402      	add	r2, r0
 8029836:	4601      	mov	r1, r0
 8029838:	428a      	cmp	r2, r1
 802983a:	d100      	bne.n	802983e <memmove+0x2a>
 802983c:	bd10      	pop	{r4, pc}
 802983e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029846:	e7f7      	b.n	8029838 <memmove+0x24>

08029848 <__malloc_lock>:
 8029848:	4801      	ldr	r0, [pc, #4]	; (8029850 <__malloc_lock+0x8>)
 802984a:	f7ff bf6a 	b.w	8029722 <__retarget_lock_acquire_recursive>
 802984e:	bf00      	nop
 8029850:	200570f8 	.word	0x200570f8

08029854 <__malloc_unlock>:
 8029854:	4801      	ldr	r0, [pc, #4]	; (802985c <__malloc_unlock+0x8>)
 8029856:	f7ff bf66 	b.w	8029726 <__retarget_lock_release_recursive>
 802985a:	bf00      	nop
 802985c:	200570f8 	.word	0x200570f8

08029860 <_Balloc>:
 8029860:	b570      	push	{r4, r5, r6, lr}
 8029862:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029864:	4604      	mov	r4, r0
 8029866:	460d      	mov	r5, r1
 8029868:	b976      	cbnz	r6, 8029888 <_Balloc+0x28>
 802986a:	2010      	movs	r0, #16
 802986c:	f7fc fb96 	bl	8025f9c <malloc>
 8029870:	4602      	mov	r2, r0
 8029872:	6260      	str	r0, [r4, #36]	; 0x24
 8029874:	b920      	cbnz	r0, 8029880 <_Balloc+0x20>
 8029876:	4b18      	ldr	r3, [pc, #96]	; (80298d8 <_Balloc+0x78>)
 8029878:	4818      	ldr	r0, [pc, #96]	; (80298dc <_Balloc+0x7c>)
 802987a:	2166      	movs	r1, #102	; 0x66
 802987c:	f7fc fb20 	bl	8025ec0 <__assert_func>
 8029880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029884:	6006      	str	r6, [r0, #0]
 8029886:	60c6      	str	r6, [r0, #12]
 8029888:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802988a:	68f3      	ldr	r3, [r6, #12]
 802988c:	b183      	cbz	r3, 80298b0 <_Balloc+0x50>
 802988e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029890:	68db      	ldr	r3, [r3, #12]
 8029892:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8029896:	b9b8      	cbnz	r0, 80298c8 <_Balloc+0x68>
 8029898:	2101      	movs	r1, #1
 802989a:	fa01 f605 	lsl.w	r6, r1, r5
 802989e:	1d72      	adds	r2, r6, #5
 80298a0:	0092      	lsls	r2, r2, #2
 80298a2:	4620      	mov	r0, r4
 80298a4:	f000 fc98 	bl	802a1d8 <_calloc_r>
 80298a8:	b160      	cbz	r0, 80298c4 <_Balloc+0x64>
 80298aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80298ae:	e00e      	b.n	80298ce <_Balloc+0x6e>
 80298b0:	2221      	movs	r2, #33	; 0x21
 80298b2:	2104      	movs	r1, #4
 80298b4:	4620      	mov	r0, r4
 80298b6:	f000 fc8f 	bl	802a1d8 <_calloc_r>
 80298ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80298bc:	60f0      	str	r0, [r6, #12]
 80298be:	68db      	ldr	r3, [r3, #12]
 80298c0:	2b00      	cmp	r3, #0
 80298c2:	d1e4      	bne.n	802988e <_Balloc+0x2e>
 80298c4:	2000      	movs	r0, #0
 80298c6:	bd70      	pop	{r4, r5, r6, pc}
 80298c8:	6802      	ldr	r2, [r0, #0]
 80298ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80298ce:	2300      	movs	r3, #0
 80298d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80298d4:	e7f7      	b.n	80298c6 <_Balloc+0x66>
 80298d6:	bf00      	nop
 80298d8:	0802eace 	.word	0x0802eace
 80298dc:	0802ec38 	.word	0x0802ec38

080298e0 <_Bfree>:
 80298e0:	b570      	push	{r4, r5, r6, lr}
 80298e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80298e4:	4605      	mov	r5, r0
 80298e6:	460c      	mov	r4, r1
 80298e8:	b976      	cbnz	r6, 8029908 <_Bfree+0x28>
 80298ea:	2010      	movs	r0, #16
 80298ec:	f7fc fb56 	bl	8025f9c <malloc>
 80298f0:	4602      	mov	r2, r0
 80298f2:	6268      	str	r0, [r5, #36]	; 0x24
 80298f4:	b920      	cbnz	r0, 8029900 <_Bfree+0x20>
 80298f6:	4b09      	ldr	r3, [pc, #36]	; (802991c <_Bfree+0x3c>)
 80298f8:	4809      	ldr	r0, [pc, #36]	; (8029920 <_Bfree+0x40>)
 80298fa:	218a      	movs	r1, #138	; 0x8a
 80298fc:	f7fc fae0 	bl	8025ec0 <__assert_func>
 8029900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029904:	6006      	str	r6, [r0, #0]
 8029906:	60c6      	str	r6, [r0, #12]
 8029908:	b13c      	cbz	r4, 802991a <_Bfree+0x3a>
 802990a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802990c:	6862      	ldr	r2, [r4, #4]
 802990e:	68db      	ldr	r3, [r3, #12]
 8029910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029914:	6021      	str	r1, [r4, #0]
 8029916:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802991a:	bd70      	pop	{r4, r5, r6, pc}
 802991c:	0802eace 	.word	0x0802eace
 8029920:	0802ec38 	.word	0x0802ec38

08029924 <__multadd>:
 8029924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029928:	690e      	ldr	r6, [r1, #16]
 802992a:	4607      	mov	r7, r0
 802992c:	4698      	mov	r8, r3
 802992e:	460c      	mov	r4, r1
 8029930:	f101 0014 	add.w	r0, r1, #20
 8029934:	2300      	movs	r3, #0
 8029936:	6805      	ldr	r5, [r0, #0]
 8029938:	b2a9      	uxth	r1, r5
 802993a:	fb02 8101 	mla	r1, r2, r1, r8
 802993e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8029942:	0c2d      	lsrs	r5, r5, #16
 8029944:	fb02 c505 	mla	r5, r2, r5, ip
 8029948:	b289      	uxth	r1, r1
 802994a:	3301      	adds	r3, #1
 802994c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8029950:	429e      	cmp	r6, r3
 8029952:	f840 1b04 	str.w	r1, [r0], #4
 8029956:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802995a:	dcec      	bgt.n	8029936 <__multadd+0x12>
 802995c:	f1b8 0f00 	cmp.w	r8, #0
 8029960:	d022      	beq.n	80299a8 <__multadd+0x84>
 8029962:	68a3      	ldr	r3, [r4, #8]
 8029964:	42b3      	cmp	r3, r6
 8029966:	dc19      	bgt.n	802999c <__multadd+0x78>
 8029968:	6861      	ldr	r1, [r4, #4]
 802996a:	4638      	mov	r0, r7
 802996c:	3101      	adds	r1, #1
 802996e:	f7ff ff77 	bl	8029860 <_Balloc>
 8029972:	4605      	mov	r5, r0
 8029974:	b928      	cbnz	r0, 8029982 <__multadd+0x5e>
 8029976:	4602      	mov	r2, r0
 8029978:	4b0d      	ldr	r3, [pc, #52]	; (80299b0 <__multadd+0x8c>)
 802997a:	480e      	ldr	r0, [pc, #56]	; (80299b4 <__multadd+0x90>)
 802997c:	21b5      	movs	r1, #181	; 0xb5
 802997e:	f7fc fa9f 	bl	8025ec0 <__assert_func>
 8029982:	6922      	ldr	r2, [r4, #16]
 8029984:	3202      	adds	r2, #2
 8029986:	f104 010c 	add.w	r1, r4, #12
 802998a:	0092      	lsls	r2, r2, #2
 802998c:	300c      	adds	r0, #12
 802998e:	f7fc fb15 	bl	8025fbc <memcpy>
 8029992:	4621      	mov	r1, r4
 8029994:	4638      	mov	r0, r7
 8029996:	f7ff ffa3 	bl	80298e0 <_Bfree>
 802999a:	462c      	mov	r4, r5
 802999c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80299a0:	3601      	adds	r6, #1
 80299a2:	f8c3 8014 	str.w	r8, [r3, #20]
 80299a6:	6126      	str	r6, [r4, #16]
 80299a8:	4620      	mov	r0, r4
 80299aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80299ae:	bf00      	nop
 80299b0:	0802eb44 	.word	0x0802eb44
 80299b4:	0802ec38 	.word	0x0802ec38

080299b8 <__s2b>:
 80299b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80299bc:	460c      	mov	r4, r1
 80299be:	4615      	mov	r5, r2
 80299c0:	461f      	mov	r7, r3
 80299c2:	2209      	movs	r2, #9
 80299c4:	3308      	adds	r3, #8
 80299c6:	4606      	mov	r6, r0
 80299c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80299cc:	2100      	movs	r1, #0
 80299ce:	2201      	movs	r2, #1
 80299d0:	429a      	cmp	r2, r3
 80299d2:	db09      	blt.n	80299e8 <__s2b+0x30>
 80299d4:	4630      	mov	r0, r6
 80299d6:	f7ff ff43 	bl	8029860 <_Balloc>
 80299da:	b940      	cbnz	r0, 80299ee <__s2b+0x36>
 80299dc:	4602      	mov	r2, r0
 80299de:	4b19      	ldr	r3, [pc, #100]	; (8029a44 <__s2b+0x8c>)
 80299e0:	4819      	ldr	r0, [pc, #100]	; (8029a48 <__s2b+0x90>)
 80299e2:	21ce      	movs	r1, #206	; 0xce
 80299e4:	f7fc fa6c 	bl	8025ec0 <__assert_func>
 80299e8:	0052      	lsls	r2, r2, #1
 80299ea:	3101      	adds	r1, #1
 80299ec:	e7f0      	b.n	80299d0 <__s2b+0x18>
 80299ee:	9b08      	ldr	r3, [sp, #32]
 80299f0:	6143      	str	r3, [r0, #20]
 80299f2:	2d09      	cmp	r5, #9
 80299f4:	f04f 0301 	mov.w	r3, #1
 80299f8:	6103      	str	r3, [r0, #16]
 80299fa:	dd16      	ble.n	8029a2a <__s2b+0x72>
 80299fc:	f104 0909 	add.w	r9, r4, #9
 8029a00:	46c8      	mov	r8, r9
 8029a02:	442c      	add	r4, r5
 8029a04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8029a08:	4601      	mov	r1, r0
 8029a0a:	3b30      	subs	r3, #48	; 0x30
 8029a0c:	220a      	movs	r2, #10
 8029a0e:	4630      	mov	r0, r6
 8029a10:	f7ff ff88 	bl	8029924 <__multadd>
 8029a14:	45a0      	cmp	r8, r4
 8029a16:	d1f5      	bne.n	8029a04 <__s2b+0x4c>
 8029a18:	f1a5 0408 	sub.w	r4, r5, #8
 8029a1c:	444c      	add	r4, r9
 8029a1e:	1b2d      	subs	r5, r5, r4
 8029a20:	1963      	adds	r3, r4, r5
 8029a22:	42bb      	cmp	r3, r7
 8029a24:	db04      	blt.n	8029a30 <__s2b+0x78>
 8029a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029a2a:	340a      	adds	r4, #10
 8029a2c:	2509      	movs	r5, #9
 8029a2e:	e7f6      	b.n	8029a1e <__s2b+0x66>
 8029a30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8029a34:	4601      	mov	r1, r0
 8029a36:	3b30      	subs	r3, #48	; 0x30
 8029a38:	220a      	movs	r2, #10
 8029a3a:	4630      	mov	r0, r6
 8029a3c:	f7ff ff72 	bl	8029924 <__multadd>
 8029a40:	e7ee      	b.n	8029a20 <__s2b+0x68>
 8029a42:	bf00      	nop
 8029a44:	0802eb44 	.word	0x0802eb44
 8029a48:	0802ec38 	.word	0x0802ec38

08029a4c <__hi0bits>:
 8029a4c:	0c03      	lsrs	r3, r0, #16
 8029a4e:	041b      	lsls	r3, r3, #16
 8029a50:	b9d3      	cbnz	r3, 8029a88 <__hi0bits+0x3c>
 8029a52:	0400      	lsls	r0, r0, #16
 8029a54:	2310      	movs	r3, #16
 8029a56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8029a5a:	bf04      	itt	eq
 8029a5c:	0200      	lsleq	r0, r0, #8
 8029a5e:	3308      	addeq	r3, #8
 8029a60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8029a64:	bf04      	itt	eq
 8029a66:	0100      	lsleq	r0, r0, #4
 8029a68:	3304      	addeq	r3, #4
 8029a6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8029a6e:	bf04      	itt	eq
 8029a70:	0080      	lsleq	r0, r0, #2
 8029a72:	3302      	addeq	r3, #2
 8029a74:	2800      	cmp	r0, #0
 8029a76:	db05      	blt.n	8029a84 <__hi0bits+0x38>
 8029a78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8029a7c:	f103 0301 	add.w	r3, r3, #1
 8029a80:	bf08      	it	eq
 8029a82:	2320      	moveq	r3, #32
 8029a84:	4618      	mov	r0, r3
 8029a86:	4770      	bx	lr
 8029a88:	2300      	movs	r3, #0
 8029a8a:	e7e4      	b.n	8029a56 <__hi0bits+0xa>

08029a8c <__lo0bits>:
 8029a8c:	6803      	ldr	r3, [r0, #0]
 8029a8e:	f013 0207 	ands.w	r2, r3, #7
 8029a92:	4601      	mov	r1, r0
 8029a94:	d00b      	beq.n	8029aae <__lo0bits+0x22>
 8029a96:	07da      	lsls	r2, r3, #31
 8029a98:	d424      	bmi.n	8029ae4 <__lo0bits+0x58>
 8029a9a:	0798      	lsls	r0, r3, #30
 8029a9c:	bf49      	itett	mi
 8029a9e:	085b      	lsrmi	r3, r3, #1
 8029aa0:	089b      	lsrpl	r3, r3, #2
 8029aa2:	2001      	movmi	r0, #1
 8029aa4:	600b      	strmi	r3, [r1, #0]
 8029aa6:	bf5c      	itt	pl
 8029aa8:	600b      	strpl	r3, [r1, #0]
 8029aaa:	2002      	movpl	r0, #2
 8029aac:	4770      	bx	lr
 8029aae:	b298      	uxth	r0, r3
 8029ab0:	b9b0      	cbnz	r0, 8029ae0 <__lo0bits+0x54>
 8029ab2:	0c1b      	lsrs	r3, r3, #16
 8029ab4:	2010      	movs	r0, #16
 8029ab6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8029aba:	bf04      	itt	eq
 8029abc:	0a1b      	lsreq	r3, r3, #8
 8029abe:	3008      	addeq	r0, #8
 8029ac0:	071a      	lsls	r2, r3, #28
 8029ac2:	bf04      	itt	eq
 8029ac4:	091b      	lsreq	r3, r3, #4
 8029ac6:	3004      	addeq	r0, #4
 8029ac8:	079a      	lsls	r2, r3, #30
 8029aca:	bf04      	itt	eq
 8029acc:	089b      	lsreq	r3, r3, #2
 8029ace:	3002      	addeq	r0, #2
 8029ad0:	07da      	lsls	r2, r3, #31
 8029ad2:	d403      	bmi.n	8029adc <__lo0bits+0x50>
 8029ad4:	085b      	lsrs	r3, r3, #1
 8029ad6:	f100 0001 	add.w	r0, r0, #1
 8029ada:	d005      	beq.n	8029ae8 <__lo0bits+0x5c>
 8029adc:	600b      	str	r3, [r1, #0]
 8029ade:	4770      	bx	lr
 8029ae0:	4610      	mov	r0, r2
 8029ae2:	e7e8      	b.n	8029ab6 <__lo0bits+0x2a>
 8029ae4:	2000      	movs	r0, #0
 8029ae6:	4770      	bx	lr
 8029ae8:	2020      	movs	r0, #32
 8029aea:	4770      	bx	lr

08029aec <__i2b>:
 8029aec:	b510      	push	{r4, lr}
 8029aee:	460c      	mov	r4, r1
 8029af0:	2101      	movs	r1, #1
 8029af2:	f7ff feb5 	bl	8029860 <_Balloc>
 8029af6:	4602      	mov	r2, r0
 8029af8:	b928      	cbnz	r0, 8029b06 <__i2b+0x1a>
 8029afa:	4b05      	ldr	r3, [pc, #20]	; (8029b10 <__i2b+0x24>)
 8029afc:	4805      	ldr	r0, [pc, #20]	; (8029b14 <__i2b+0x28>)
 8029afe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8029b02:	f7fc f9dd 	bl	8025ec0 <__assert_func>
 8029b06:	2301      	movs	r3, #1
 8029b08:	6144      	str	r4, [r0, #20]
 8029b0a:	6103      	str	r3, [r0, #16]
 8029b0c:	bd10      	pop	{r4, pc}
 8029b0e:	bf00      	nop
 8029b10:	0802eb44 	.word	0x0802eb44
 8029b14:	0802ec38 	.word	0x0802ec38

08029b18 <__multiply>:
 8029b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b1c:	4614      	mov	r4, r2
 8029b1e:	690a      	ldr	r2, [r1, #16]
 8029b20:	6923      	ldr	r3, [r4, #16]
 8029b22:	429a      	cmp	r2, r3
 8029b24:	bfb8      	it	lt
 8029b26:	460b      	movlt	r3, r1
 8029b28:	460d      	mov	r5, r1
 8029b2a:	bfbc      	itt	lt
 8029b2c:	4625      	movlt	r5, r4
 8029b2e:	461c      	movlt	r4, r3
 8029b30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8029b34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029b38:	68ab      	ldr	r3, [r5, #8]
 8029b3a:	6869      	ldr	r1, [r5, #4]
 8029b3c:	eb0a 0709 	add.w	r7, sl, r9
 8029b40:	42bb      	cmp	r3, r7
 8029b42:	b085      	sub	sp, #20
 8029b44:	bfb8      	it	lt
 8029b46:	3101      	addlt	r1, #1
 8029b48:	f7ff fe8a 	bl	8029860 <_Balloc>
 8029b4c:	b930      	cbnz	r0, 8029b5c <__multiply+0x44>
 8029b4e:	4602      	mov	r2, r0
 8029b50:	4b42      	ldr	r3, [pc, #264]	; (8029c5c <__multiply+0x144>)
 8029b52:	4843      	ldr	r0, [pc, #268]	; (8029c60 <__multiply+0x148>)
 8029b54:	f240 115d 	movw	r1, #349	; 0x15d
 8029b58:	f7fc f9b2 	bl	8025ec0 <__assert_func>
 8029b5c:	f100 0614 	add.w	r6, r0, #20
 8029b60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8029b64:	4633      	mov	r3, r6
 8029b66:	2200      	movs	r2, #0
 8029b68:	4543      	cmp	r3, r8
 8029b6a:	d31e      	bcc.n	8029baa <__multiply+0x92>
 8029b6c:	f105 0c14 	add.w	ip, r5, #20
 8029b70:	f104 0314 	add.w	r3, r4, #20
 8029b74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8029b78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8029b7c:	9202      	str	r2, [sp, #8]
 8029b7e:	ebac 0205 	sub.w	r2, ip, r5
 8029b82:	3a15      	subs	r2, #21
 8029b84:	f022 0203 	bic.w	r2, r2, #3
 8029b88:	3204      	adds	r2, #4
 8029b8a:	f105 0115 	add.w	r1, r5, #21
 8029b8e:	458c      	cmp	ip, r1
 8029b90:	bf38      	it	cc
 8029b92:	2204      	movcc	r2, #4
 8029b94:	9201      	str	r2, [sp, #4]
 8029b96:	9a02      	ldr	r2, [sp, #8]
 8029b98:	9303      	str	r3, [sp, #12]
 8029b9a:	429a      	cmp	r2, r3
 8029b9c:	d808      	bhi.n	8029bb0 <__multiply+0x98>
 8029b9e:	2f00      	cmp	r7, #0
 8029ba0:	dc55      	bgt.n	8029c4e <__multiply+0x136>
 8029ba2:	6107      	str	r7, [r0, #16]
 8029ba4:	b005      	add	sp, #20
 8029ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029baa:	f843 2b04 	str.w	r2, [r3], #4
 8029bae:	e7db      	b.n	8029b68 <__multiply+0x50>
 8029bb0:	f8b3 a000 	ldrh.w	sl, [r3]
 8029bb4:	f1ba 0f00 	cmp.w	sl, #0
 8029bb8:	d020      	beq.n	8029bfc <__multiply+0xe4>
 8029bba:	f105 0e14 	add.w	lr, r5, #20
 8029bbe:	46b1      	mov	r9, r6
 8029bc0:	2200      	movs	r2, #0
 8029bc2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8029bc6:	f8d9 b000 	ldr.w	fp, [r9]
 8029bca:	b2a1      	uxth	r1, r4
 8029bcc:	fa1f fb8b 	uxth.w	fp, fp
 8029bd0:	fb0a b101 	mla	r1, sl, r1, fp
 8029bd4:	4411      	add	r1, r2
 8029bd6:	f8d9 2000 	ldr.w	r2, [r9]
 8029bda:	0c24      	lsrs	r4, r4, #16
 8029bdc:	0c12      	lsrs	r2, r2, #16
 8029bde:	fb0a 2404 	mla	r4, sl, r4, r2
 8029be2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8029be6:	b289      	uxth	r1, r1
 8029be8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8029bec:	45f4      	cmp	ip, lr
 8029bee:	f849 1b04 	str.w	r1, [r9], #4
 8029bf2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8029bf6:	d8e4      	bhi.n	8029bc2 <__multiply+0xaa>
 8029bf8:	9901      	ldr	r1, [sp, #4]
 8029bfa:	5072      	str	r2, [r6, r1]
 8029bfc:	9a03      	ldr	r2, [sp, #12]
 8029bfe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8029c02:	3304      	adds	r3, #4
 8029c04:	f1b9 0f00 	cmp.w	r9, #0
 8029c08:	d01f      	beq.n	8029c4a <__multiply+0x132>
 8029c0a:	6834      	ldr	r4, [r6, #0]
 8029c0c:	f105 0114 	add.w	r1, r5, #20
 8029c10:	46b6      	mov	lr, r6
 8029c12:	f04f 0a00 	mov.w	sl, #0
 8029c16:	880a      	ldrh	r2, [r1, #0]
 8029c18:	f8be b002 	ldrh.w	fp, [lr, #2]
 8029c1c:	fb09 b202 	mla	r2, r9, r2, fp
 8029c20:	4492      	add	sl, r2
 8029c22:	b2a4      	uxth	r4, r4
 8029c24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8029c28:	f84e 4b04 	str.w	r4, [lr], #4
 8029c2c:	f851 4b04 	ldr.w	r4, [r1], #4
 8029c30:	f8be 2000 	ldrh.w	r2, [lr]
 8029c34:	0c24      	lsrs	r4, r4, #16
 8029c36:	fb09 2404 	mla	r4, r9, r4, r2
 8029c3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8029c3e:	458c      	cmp	ip, r1
 8029c40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8029c44:	d8e7      	bhi.n	8029c16 <__multiply+0xfe>
 8029c46:	9a01      	ldr	r2, [sp, #4]
 8029c48:	50b4      	str	r4, [r6, r2]
 8029c4a:	3604      	adds	r6, #4
 8029c4c:	e7a3      	b.n	8029b96 <__multiply+0x7e>
 8029c4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8029c52:	2b00      	cmp	r3, #0
 8029c54:	d1a5      	bne.n	8029ba2 <__multiply+0x8a>
 8029c56:	3f01      	subs	r7, #1
 8029c58:	e7a1      	b.n	8029b9e <__multiply+0x86>
 8029c5a:	bf00      	nop
 8029c5c:	0802eb44 	.word	0x0802eb44
 8029c60:	0802ec38 	.word	0x0802ec38

08029c64 <__pow5mult>:
 8029c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029c68:	4615      	mov	r5, r2
 8029c6a:	f012 0203 	ands.w	r2, r2, #3
 8029c6e:	4606      	mov	r6, r0
 8029c70:	460f      	mov	r7, r1
 8029c72:	d007      	beq.n	8029c84 <__pow5mult+0x20>
 8029c74:	4c25      	ldr	r4, [pc, #148]	; (8029d0c <__pow5mult+0xa8>)
 8029c76:	3a01      	subs	r2, #1
 8029c78:	2300      	movs	r3, #0
 8029c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8029c7e:	f7ff fe51 	bl	8029924 <__multadd>
 8029c82:	4607      	mov	r7, r0
 8029c84:	10ad      	asrs	r5, r5, #2
 8029c86:	d03d      	beq.n	8029d04 <__pow5mult+0xa0>
 8029c88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8029c8a:	b97c      	cbnz	r4, 8029cac <__pow5mult+0x48>
 8029c8c:	2010      	movs	r0, #16
 8029c8e:	f7fc f985 	bl	8025f9c <malloc>
 8029c92:	4602      	mov	r2, r0
 8029c94:	6270      	str	r0, [r6, #36]	; 0x24
 8029c96:	b928      	cbnz	r0, 8029ca4 <__pow5mult+0x40>
 8029c98:	4b1d      	ldr	r3, [pc, #116]	; (8029d10 <__pow5mult+0xac>)
 8029c9a:	481e      	ldr	r0, [pc, #120]	; (8029d14 <__pow5mult+0xb0>)
 8029c9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8029ca0:	f7fc f90e 	bl	8025ec0 <__assert_func>
 8029ca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8029ca8:	6004      	str	r4, [r0, #0]
 8029caa:	60c4      	str	r4, [r0, #12]
 8029cac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8029cb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8029cb4:	b94c      	cbnz	r4, 8029cca <__pow5mult+0x66>
 8029cb6:	f240 2171 	movw	r1, #625	; 0x271
 8029cba:	4630      	mov	r0, r6
 8029cbc:	f7ff ff16 	bl	8029aec <__i2b>
 8029cc0:	2300      	movs	r3, #0
 8029cc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8029cc6:	4604      	mov	r4, r0
 8029cc8:	6003      	str	r3, [r0, #0]
 8029cca:	f04f 0900 	mov.w	r9, #0
 8029cce:	07eb      	lsls	r3, r5, #31
 8029cd0:	d50a      	bpl.n	8029ce8 <__pow5mult+0x84>
 8029cd2:	4639      	mov	r1, r7
 8029cd4:	4622      	mov	r2, r4
 8029cd6:	4630      	mov	r0, r6
 8029cd8:	f7ff ff1e 	bl	8029b18 <__multiply>
 8029cdc:	4639      	mov	r1, r7
 8029cde:	4680      	mov	r8, r0
 8029ce0:	4630      	mov	r0, r6
 8029ce2:	f7ff fdfd 	bl	80298e0 <_Bfree>
 8029ce6:	4647      	mov	r7, r8
 8029ce8:	106d      	asrs	r5, r5, #1
 8029cea:	d00b      	beq.n	8029d04 <__pow5mult+0xa0>
 8029cec:	6820      	ldr	r0, [r4, #0]
 8029cee:	b938      	cbnz	r0, 8029d00 <__pow5mult+0x9c>
 8029cf0:	4622      	mov	r2, r4
 8029cf2:	4621      	mov	r1, r4
 8029cf4:	4630      	mov	r0, r6
 8029cf6:	f7ff ff0f 	bl	8029b18 <__multiply>
 8029cfa:	6020      	str	r0, [r4, #0]
 8029cfc:	f8c0 9000 	str.w	r9, [r0]
 8029d00:	4604      	mov	r4, r0
 8029d02:	e7e4      	b.n	8029cce <__pow5mult+0x6a>
 8029d04:	4638      	mov	r0, r7
 8029d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029d0a:	bf00      	nop
 8029d0c:	0802ed88 	.word	0x0802ed88
 8029d10:	0802eace 	.word	0x0802eace
 8029d14:	0802ec38 	.word	0x0802ec38

08029d18 <__lshift>:
 8029d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029d1c:	460c      	mov	r4, r1
 8029d1e:	6849      	ldr	r1, [r1, #4]
 8029d20:	6923      	ldr	r3, [r4, #16]
 8029d22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8029d26:	68a3      	ldr	r3, [r4, #8]
 8029d28:	4607      	mov	r7, r0
 8029d2a:	4691      	mov	r9, r2
 8029d2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8029d30:	f108 0601 	add.w	r6, r8, #1
 8029d34:	42b3      	cmp	r3, r6
 8029d36:	db0b      	blt.n	8029d50 <__lshift+0x38>
 8029d38:	4638      	mov	r0, r7
 8029d3a:	f7ff fd91 	bl	8029860 <_Balloc>
 8029d3e:	4605      	mov	r5, r0
 8029d40:	b948      	cbnz	r0, 8029d56 <__lshift+0x3e>
 8029d42:	4602      	mov	r2, r0
 8029d44:	4b28      	ldr	r3, [pc, #160]	; (8029de8 <__lshift+0xd0>)
 8029d46:	4829      	ldr	r0, [pc, #164]	; (8029dec <__lshift+0xd4>)
 8029d48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8029d4c:	f7fc f8b8 	bl	8025ec0 <__assert_func>
 8029d50:	3101      	adds	r1, #1
 8029d52:	005b      	lsls	r3, r3, #1
 8029d54:	e7ee      	b.n	8029d34 <__lshift+0x1c>
 8029d56:	2300      	movs	r3, #0
 8029d58:	f100 0114 	add.w	r1, r0, #20
 8029d5c:	f100 0210 	add.w	r2, r0, #16
 8029d60:	4618      	mov	r0, r3
 8029d62:	4553      	cmp	r3, sl
 8029d64:	db33      	blt.n	8029dce <__lshift+0xb6>
 8029d66:	6920      	ldr	r0, [r4, #16]
 8029d68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8029d6c:	f104 0314 	add.w	r3, r4, #20
 8029d70:	f019 091f 	ands.w	r9, r9, #31
 8029d74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8029d78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8029d7c:	d02b      	beq.n	8029dd6 <__lshift+0xbe>
 8029d7e:	f1c9 0e20 	rsb	lr, r9, #32
 8029d82:	468a      	mov	sl, r1
 8029d84:	2200      	movs	r2, #0
 8029d86:	6818      	ldr	r0, [r3, #0]
 8029d88:	fa00 f009 	lsl.w	r0, r0, r9
 8029d8c:	4302      	orrs	r2, r0
 8029d8e:	f84a 2b04 	str.w	r2, [sl], #4
 8029d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8029d96:	459c      	cmp	ip, r3
 8029d98:	fa22 f20e 	lsr.w	r2, r2, lr
 8029d9c:	d8f3      	bhi.n	8029d86 <__lshift+0x6e>
 8029d9e:	ebac 0304 	sub.w	r3, ip, r4
 8029da2:	3b15      	subs	r3, #21
 8029da4:	f023 0303 	bic.w	r3, r3, #3
 8029da8:	3304      	adds	r3, #4
 8029daa:	f104 0015 	add.w	r0, r4, #21
 8029dae:	4584      	cmp	ip, r0
 8029db0:	bf38      	it	cc
 8029db2:	2304      	movcc	r3, #4
 8029db4:	50ca      	str	r2, [r1, r3]
 8029db6:	b10a      	cbz	r2, 8029dbc <__lshift+0xa4>
 8029db8:	f108 0602 	add.w	r6, r8, #2
 8029dbc:	3e01      	subs	r6, #1
 8029dbe:	4638      	mov	r0, r7
 8029dc0:	612e      	str	r6, [r5, #16]
 8029dc2:	4621      	mov	r1, r4
 8029dc4:	f7ff fd8c 	bl	80298e0 <_Bfree>
 8029dc8:	4628      	mov	r0, r5
 8029dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029dce:	f842 0f04 	str.w	r0, [r2, #4]!
 8029dd2:	3301      	adds	r3, #1
 8029dd4:	e7c5      	b.n	8029d62 <__lshift+0x4a>
 8029dd6:	3904      	subs	r1, #4
 8029dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8029ddc:	f841 2f04 	str.w	r2, [r1, #4]!
 8029de0:	459c      	cmp	ip, r3
 8029de2:	d8f9      	bhi.n	8029dd8 <__lshift+0xc0>
 8029de4:	e7ea      	b.n	8029dbc <__lshift+0xa4>
 8029de6:	bf00      	nop
 8029de8:	0802eb44 	.word	0x0802eb44
 8029dec:	0802ec38 	.word	0x0802ec38

08029df0 <__mcmp>:
 8029df0:	b530      	push	{r4, r5, lr}
 8029df2:	6902      	ldr	r2, [r0, #16]
 8029df4:	690c      	ldr	r4, [r1, #16]
 8029df6:	1b12      	subs	r2, r2, r4
 8029df8:	d10e      	bne.n	8029e18 <__mcmp+0x28>
 8029dfa:	f100 0314 	add.w	r3, r0, #20
 8029dfe:	3114      	adds	r1, #20
 8029e00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8029e04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8029e08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8029e0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8029e10:	42a5      	cmp	r5, r4
 8029e12:	d003      	beq.n	8029e1c <__mcmp+0x2c>
 8029e14:	d305      	bcc.n	8029e22 <__mcmp+0x32>
 8029e16:	2201      	movs	r2, #1
 8029e18:	4610      	mov	r0, r2
 8029e1a:	bd30      	pop	{r4, r5, pc}
 8029e1c:	4283      	cmp	r3, r0
 8029e1e:	d3f3      	bcc.n	8029e08 <__mcmp+0x18>
 8029e20:	e7fa      	b.n	8029e18 <__mcmp+0x28>
 8029e22:	f04f 32ff 	mov.w	r2, #4294967295
 8029e26:	e7f7      	b.n	8029e18 <__mcmp+0x28>

08029e28 <__mdiff>:
 8029e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e2c:	460c      	mov	r4, r1
 8029e2e:	4606      	mov	r6, r0
 8029e30:	4611      	mov	r1, r2
 8029e32:	4620      	mov	r0, r4
 8029e34:	4617      	mov	r7, r2
 8029e36:	f7ff ffdb 	bl	8029df0 <__mcmp>
 8029e3a:	1e05      	subs	r5, r0, #0
 8029e3c:	d110      	bne.n	8029e60 <__mdiff+0x38>
 8029e3e:	4629      	mov	r1, r5
 8029e40:	4630      	mov	r0, r6
 8029e42:	f7ff fd0d 	bl	8029860 <_Balloc>
 8029e46:	b930      	cbnz	r0, 8029e56 <__mdiff+0x2e>
 8029e48:	4b39      	ldr	r3, [pc, #228]	; (8029f30 <__mdiff+0x108>)
 8029e4a:	4602      	mov	r2, r0
 8029e4c:	f240 2132 	movw	r1, #562	; 0x232
 8029e50:	4838      	ldr	r0, [pc, #224]	; (8029f34 <__mdiff+0x10c>)
 8029e52:	f7fc f835 	bl	8025ec0 <__assert_func>
 8029e56:	2301      	movs	r3, #1
 8029e58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8029e5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029e60:	bfa4      	itt	ge
 8029e62:	463b      	movge	r3, r7
 8029e64:	4627      	movge	r7, r4
 8029e66:	4630      	mov	r0, r6
 8029e68:	6879      	ldr	r1, [r7, #4]
 8029e6a:	bfa6      	itte	ge
 8029e6c:	461c      	movge	r4, r3
 8029e6e:	2500      	movge	r5, #0
 8029e70:	2501      	movlt	r5, #1
 8029e72:	f7ff fcf5 	bl	8029860 <_Balloc>
 8029e76:	b920      	cbnz	r0, 8029e82 <__mdiff+0x5a>
 8029e78:	4b2d      	ldr	r3, [pc, #180]	; (8029f30 <__mdiff+0x108>)
 8029e7a:	4602      	mov	r2, r0
 8029e7c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8029e80:	e7e6      	b.n	8029e50 <__mdiff+0x28>
 8029e82:	693e      	ldr	r6, [r7, #16]
 8029e84:	60c5      	str	r5, [r0, #12]
 8029e86:	6925      	ldr	r5, [r4, #16]
 8029e88:	f107 0114 	add.w	r1, r7, #20
 8029e8c:	f104 0914 	add.w	r9, r4, #20
 8029e90:	f100 0e14 	add.w	lr, r0, #20
 8029e94:	f107 0210 	add.w	r2, r7, #16
 8029e98:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8029e9c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8029ea0:	46f2      	mov	sl, lr
 8029ea2:	2700      	movs	r7, #0
 8029ea4:	f859 3b04 	ldr.w	r3, [r9], #4
 8029ea8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8029eac:	fa1f f883 	uxth.w	r8, r3
 8029eb0:	fa17 f78b 	uxtah	r7, r7, fp
 8029eb4:	0c1b      	lsrs	r3, r3, #16
 8029eb6:	eba7 0808 	sub.w	r8, r7, r8
 8029eba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8029ebe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8029ec2:	fa1f f888 	uxth.w	r8, r8
 8029ec6:	141f      	asrs	r7, r3, #16
 8029ec8:	454d      	cmp	r5, r9
 8029eca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8029ece:	f84a 3b04 	str.w	r3, [sl], #4
 8029ed2:	d8e7      	bhi.n	8029ea4 <__mdiff+0x7c>
 8029ed4:	1b2b      	subs	r3, r5, r4
 8029ed6:	3b15      	subs	r3, #21
 8029ed8:	f023 0303 	bic.w	r3, r3, #3
 8029edc:	3304      	adds	r3, #4
 8029ede:	3415      	adds	r4, #21
 8029ee0:	42a5      	cmp	r5, r4
 8029ee2:	bf38      	it	cc
 8029ee4:	2304      	movcc	r3, #4
 8029ee6:	4419      	add	r1, r3
 8029ee8:	4473      	add	r3, lr
 8029eea:	469e      	mov	lr, r3
 8029eec:	460d      	mov	r5, r1
 8029eee:	4565      	cmp	r5, ip
 8029ef0:	d30e      	bcc.n	8029f10 <__mdiff+0xe8>
 8029ef2:	f10c 0203 	add.w	r2, ip, #3
 8029ef6:	1a52      	subs	r2, r2, r1
 8029ef8:	f022 0203 	bic.w	r2, r2, #3
 8029efc:	3903      	subs	r1, #3
 8029efe:	458c      	cmp	ip, r1
 8029f00:	bf38      	it	cc
 8029f02:	2200      	movcc	r2, #0
 8029f04:	441a      	add	r2, r3
 8029f06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8029f0a:	b17b      	cbz	r3, 8029f2c <__mdiff+0x104>
 8029f0c:	6106      	str	r6, [r0, #16]
 8029f0e:	e7a5      	b.n	8029e5c <__mdiff+0x34>
 8029f10:	f855 8b04 	ldr.w	r8, [r5], #4
 8029f14:	fa17 f488 	uxtah	r4, r7, r8
 8029f18:	1422      	asrs	r2, r4, #16
 8029f1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8029f1e:	b2a4      	uxth	r4, r4
 8029f20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8029f24:	f84e 4b04 	str.w	r4, [lr], #4
 8029f28:	1417      	asrs	r7, r2, #16
 8029f2a:	e7e0      	b.n	8029eee <__mdiff+0xc6>
 8029f2c:	3e01      	subs	r6, #1
 8029f2e:	e7ea      	b.n	8029f06 <__mdiff+0xde>
 8029f30:	0802eb44 	.word	0x0802eb44
 8029f34:	0802ec38 	.word	0x0802ec38

08029f38 <__ulp>:
 8029f38:	b082      	sub	sp, #8
 8029f3a:	ed8d 0b00 	vstr	d0, [sp]
 8029f3e:	9b01      	ldr	r3, [sp, #4]
 8029f40:	4912      	ldr	r1, [pc, #72]	; (8029f8c <__ulp+0x54>)
 8029f42:	4019      	ands	r1, r3
 8029f44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8029f48:	2900      	cmp	r1, #0
 8029f4a:	dd05      	ble.n	8029f58 <__ulp+0x20>
 8029f4c:	2200      	movs	r2, #0
 8029f4e:	460b      	mov	r3, r1
 8029f50:	ec43 2b10 	vmov	d0, r2, r3
 8029f54:	b002      	add	sp, #8
 8029f56:	4770      	bx	lr
 8029f58:	4249      	negs	r1, r1
 8029f5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8029f5e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8029f62:	f04f 0200 	mov.w	r2, #0
 8029f66:	f04f 0300 	mov.w	r3, #0
 8029f6a:	da04      	bge.n	8029f76 <__ulp+0x3e>
 8029f6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8029f70:	fa41 f300 	asr.w	r3, r1, r0
 8029f74:	e7ec      	b.n	8029f50 <__ulp+0x18>
 8029f76:	f1a0 0114 	sub.w	r1, r0, #20
 8029f7a:	291e      	cmp	r1, #30
 8029f7c:	bfda      	itte	le
 8029f7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8029f82:	fa20 f101 	lsrle.w	r1, r0, r1
 8029f86:	2101      	movgt	r1, #1
 8029f88:	460a      	mov	r2, r1
 8029f8a:	e7e1      	b.n	8029f50 <__ulp+0x18>
 8029f8c:	7ff00000 	.word	0x7ff00000

08029f90 <__b2d>:
 8029f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029f92:	6905      	ldr	r5, [r0, #16]
 8029f94:	f100 0714 	add.w	r7, r0, #20
 8029f98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8029f9c:	1f2e      	subs	r6, r5, #4
 8029f9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8029fa2:	4620      	mov	r0, r4
 8029fa4:	f7ff fd52 	bl	8029a4c <__hi0bits>
 8029fa8:	f1c0 0320 	rsb	r3, r0, #32
 8029fac:	280a      	cmp	r0, #10
 8029fae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802a02c <__b2d+0x9c>
 8029fb2:	600b      	str	r3, [r1, #0]
 8029fb4:	dc14      	bgt.n	8029fe0 <__b2d+0x50>
 8029fb6:	f1c0 0e0b 	rsb	lr, r0, #11
 8029fba:	fa24 f10e 	lsr.w	r1, r4, lr
 8029fbe:	42b7      	cmp	r7, r6
 8029fc0:	ea41 030c 	orr.w	r3, r1, ip
 8029fc4:	bf34      	ite	cc
 8029fc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8029fca:	2100      	movcs	r1, #0
 8029fcc:	3015      	adds	r0, #21
 8029fce:	fa04 f000 	lsl.w	r0, r4, r0
 8029fd2:	fa21 f10e 	lsr.w	r1, r1, lr
 8029fd6:	ea40 0201 	orr.w	r2, r0, r1
 8029fda:	ec43 2b10 	vmov	d0, r2, r3
 8029fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029fe0:	42b7      	cmp	r7, r6
 8029fe2:	bf3a      	itte	cc
 8029fe4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8029fe8:	f1a5 0608 	subcc.w	r6, r5, #8
 8029fec:	2100      	movcs	r1, #0
 8029fee:	380b      	subs	r0, #11
 8029ff0:	d017      	beq.n	802a022 <__b2d+0x92>
 8029ff2:	f1c0 0c20 	rsb	ip, r0, #32
 8029ff6:	fa04 f500 	lsl.w	r5, r4, r0
 8029ffa:	42be      	cmp	r6, r7
 8029ffc:	fa21 f40c 	lsr.w	r4, r1, ip
 802a000:	ea45 0504 	orr.w	r5, r5, r4
 802a004:	bf8c      	ite	hi
 802a006:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802a00a:	2400      	movls	r4, #0
 802a00c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802a010:	fa01 f000 	lsl.w	r0, r1, r0
 802a014:	fa24 f40c 	lsr.w	r4, r4, ip
 802a018:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802a01c:	ea40 0204 	orr.w	r2, r0, r4
 802a020:	e7db      	b.n	8029fda <__b2d+0x4a>
 802a022:	ea44 030c 	orr.w	r3, r4, ip
 802a026:	460a      	mov	r2, r1
 802a028:	e7d7      	b.n	8029fda <__b2d+0x4a>
 802a02a:	bf00      	nop
 802a02c:	3ff00000 	.word	0x3ff00000

0802a030 <__d2b>:
 802a030:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802a034:	4689      	mov	r9, r1
 802a036:	2101      	movs	r1, #1
 802a038:	ec57 6b10 	vmov	r6, r7, d0
 802a03c:	4690      	mov	r8, r2
 802a03e:	f7ff fc0f 	bl	8029860 <_Balloc>
 802a042:	4604      	mov	r4, r0
 802a044:	b930      	cbnz	r0, 802a054 <__d2b+0x24>
 802a046:	4602      	mov	r2, r0
 802a048:	4b25      	ldr	r3, [pc, #148]	; (802a0e0 <__d2b+0xb0>)
 802a04a:	4826      	ldr	r0, [pc, #152]	; (802a0e4 <__d2b+0xb4>)
 802a04c:	f240 310a 	movw	r1, #778	; 0x30a
 802a050:	f7fb ff36 	bl	8025ec0 <__assert_func>
 802a054:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802a058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802a05c:	bb35      	cbnz	r5, 802a0ac <__d2b+0x7c>
 802a05e:	2e00      	cmp	r6, #0
 802a060:	9301      	str	r3, [sp, #4]
 802a062:	d028      	beq.n	802a0b6 <__d2b+0x86>
 802a064:	4668      	mov	r0, sp
 802a066:	9600      	str	r6, [sp, #0]
 802a068:	f7ff fd10 	bl	8029a8c <__lo0bits>
 802a06c:	9900      	ldr	r1, [sp, #0]
 802a06e:	b300      	cbz	r0, 802a0b2 <__d2b+0x82>
 802a070:	9a01      	ldr	r2, [sp, #4]
 802a072:	f1c0 0320 	rsb	r3, r0, #32
 802a076:	fa02 f303 	lsl.w	r3, r2, r3
 802a07a:	430b      	orrs	r3, r1
 802a07c:	40c2      	lsrs	r2, r0
 802a07e:	6163      	str	r3, [r4, #20]
 802a080:	9201      	str	r2, [sp, #4]
 802a082:	9b01      	ldr	r3, [sp, #4]
 802a084:	61a3      	str	r3, [r4, #24]
 802a086:	2b00      	cmp	r3, #0
 802a088:	bf14      	ite	ne
 802a08a:	2202      	movne	r2, #2
 802a08c:	2201      	moveq	r2, #1
 802a08e:	6122      	str	r2, [r4, #16]
 802a090:	b1d5      	cbz	r5, 802a0c8 <__d2b+0x98>
 802a092:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802a096:	4405      	add	r5, r0
 802a098:	f8c9 5000 	str.w	r5, [r9]
 802a09c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802a0a0:	f8c8 0000 	str.w	r0, [r8]
 802a0a4:	4620      	mov	r0, r4
 802a0a6:	b003      	add	sp, #12
 802a0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a0ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802a0b0:	e7d5      	b.n	802a05e <__d2b+0x2e>
 802a0b2:	6161      	str	r1, [r4, #20]
 802a0b4:	e7e5      	b.n	802a082 <__d2b+0x52>
 802a0b6:	a801      	add	r0, sp, #4
 802a0b8:	f7ff fce8 	bl	8029a8c <__lo0bits>
 802a0bc:	9b01      	ldr	r3, [sp, #4]
 802a0be:	6163      	str	r3, [r4, #20]
 802a0c0:	2201      	movs	r2, #1
 802a0c2:	6122      	str	r2, [r4, #16]
 802a0c4:	3020      	adds	r0, #32
 802a0c6:	e7e3      	b.n	802a090 <__d2b+0x60>
 802a0c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802a0cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802a0d0:	f8c9 0000 	str.w	r0, [r9]
 802a0d4:	6918      	ldr	r0, [r3, #16]
 802a0d6:	f7ff fcb9 	bl	8029a4c <__hi0bits>
 802a0da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802a0de:	e7df      	b.n	802a0a0 <__d2b+0x70>
 802a0e0:	0802eb44 	.word	0x0802eb44
 802a0e4:	0802ec38 	.word	0x0802ec38

0802a0e8 <__ratio>:
 802a0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a0ec:	468a      	mov	sl, r1
 802a0ee:	4669      	mov	r1, sp
 802a0f0:	4683      	mov	fp, r0
 802a0f2:	f7ff ff4d 	bl	8029f90 <__b2d>
 802a0f6:	a901      	add	r1, sp, #4
 802a0f8:	4650      	mov	r0, sl
 802a0fa:	ec59 8b10 	vmov	r8, r9, d0
 802a0fe:	ee10 6a10 	vmov	r6, s0
 802a102:	f7ff ff45 	bl	8029f90 <__b2d>
 802a106:	f8db 3010 	ldr.w	r3, [fp, #16]
 802a10a:	f8da 2010 	ldr.w	r2, [sl, #16]
 802a10e:	eba3 0c02 	sub.w	ip, r3, r2
 802a112:	e9dd 3200 	ldrd	r3, r2, [sp]
 802a116:	1a9b      	subs	r3, r3, r2
 802a118:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802a11c:	ec55 4b10 	vmov	r4, r5, d0
 802a120:	2b00      	cmp	r3, #0
 802a122:	ee10 0a10 	vmov	r0, s0
 802a126:	bfce      	itee	gt
 802a128:	464a      	movgt	r2, r9
 802a12a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802a12e:	462a      	movle	r2, r5
 802a130:	464f      	mov	r7, r9
 802a132:	4629      	mov	r1, r5
 802a134:	bfcc      	ite	gt
 802a136:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802a13a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 802a13e:	ec47 6b17 	vmov	d7, r6, r7
 802a142:	ec41 0b16 	vmov	d6, r0, r1
 802a146:	ee87 0b06 	vdiv.f64	d0, d7, d6
 802a14a:	b003      	add	sp, #12
 802a14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a150 <__copybits>:
 802a150:	3901      	subs	r1, #1
 802a152:	b570      	push	{r4, r5, r6, lr}
 802a154:	1149      	asrs	r1, r1, #5
 802a156:	6914      	ldr	r4, [r2, #16]
 802a158:	3101      	adds	r1, #1
 802a15a:	f102 0314 	add.w	r3, r2, #20
 802a15e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802a162:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802a166:	1f05      	subs	r5, r0, #4
 802a168:	42a3      	cmp	r3, r4
 802a16a:	d30c      	bcc.n	802a186 <__copybits+0x36>
 802a16c:	1aa3      	subs	r3, r4, r2
 802a16e:	3b11      	subs	r3, #17
 802a170:	f023 0303 	bic.w	r3, r3, #3
 802a174:	3211      	adds	r2, #17
 802a176:	42a2      	cmp	r2, r4
 802a178:	bf88      	it	hi
 802a17a:	2300      	movhi	r3, #0
 802a17c:	4418      	add	r0, r3
 802a17e:	2300      	movs	r3, #0
 802a180:	4288      	cmp	r0, r1
 802a182:	d305      	bcc.n	802a190 <__copybits+0x40>
 802a184:	bd70      	pop	{r4, r5, r6, pc}
 802a186:	f853 6b04 	ldr.w	r6, [r3], #4
 802a18a:	f845 6f04 	str.w	r6, [r5, #4]!
 802a18e:	e7eb      	b.n	802a168 <__copybits+0x18>
 802a190:	f840 3b04 	str.w	r3, [r0], #4
 802a194:	e7f4      	b.n	802a180 <__copybits+0x30>

0802a196 <__any_on>:
 802a196:	f100 0214 	add.w	r2, r0, #20
 802a19a:	6900      	ldr	r0, [r0, #16]
 802a19c:	114b      	asrs	r3, r1, #5
 802a19e:	4298      	cmp	r0, r3
 802a1a0:	b510      	push	{r4, lr}
 802a1a2:	db11      	blt.n	802a1c8 <__any_on+0x32>
 802a1a4:	dd0a      	ble.n	802a1bc <__any_on+0x26>
 802a1a6:	f011 011f 	ands.w	r1, r1, #31
 802a1aa:	d007      	beq.n	802a1bc <__any_on+0x26>
 802a1ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802a1b0:	fa24 f001 	lsr.w	r0, r4, r1
 802a1b4:	fa00 f101 	lsl.w	r1, r0, r1
 802a1b8:	428c      	cmp	r4, r1
 802a1ba:	d10b      	bne.n	802a1d4 <__any_on+0x3e>
 802a1bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a1c0:	4293      	cmp	r3, r2
 802a1c2:	d803      	bhi.n	802a1cc <__any_on+0x36>
 802a1c4:	2000      	movs	r0, #0
 802a1c6:	bd10      	pop	{r4, pc}
 802a1c8:	4603      	mov	r3, r0
 802a1ca:	e7f7      	b.n	802a1bc <__any_on+0x26>
 802a1cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802a1d0:	2900      	cmp	r1, #0
 802a1d2:	d0f5      	beq.n	802a1c0 <__any_on+0x2a>
 802a1d4:	2001      	movs	r0, #1
 802a1d6:	e7f6      	b.n	802a1c6 <__any_on+0x30>

0802a1d8 <_calloc_r>:
 802a1d8:	b513      	push	{r0, r1, r4, lr}
 802a1da:	434a      	muls	r2, r1
 802a1dc:	4611      	mov	r1, r2
 802a1de:	9201      	str	r2, [sp, #4]
 802a1e0:	f7fb ff52 	bl	8026088 <_malloc_r>
 802a1e4:	4604      	mov	r4, r0
 802a1e6:	b118      	cbz	r0, 802a1f0 <_calloc_r+0x18>
 802a1e8:	9a01      	ldr	r2, [sp, #4]
 802a1ea:	2100      	movs	r1, #0
 802a1ec:	f7fb fef4 	bl	8025fd8 <memset>
 802a1f0:	4620      	mov	r0, r4
 802a1f2:	b002      	add	sp, #8
 802a1f4:	bd10      	pop	{r4, pc}

0802a1f6 <_realloc_r>:
 802a1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a1f8:	4607      	mov	r7, r0
 802a1fa:	4614      	mov	r4, r2
 802a1fc:	460e      	mov	r6, r1
 802a1fe:	b921      	cbnz	r1, 802a20a <_realloc_r+0x14>
 802a200:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802a204:	4611      	mov	r1, r2
 802a206:	f7fb bf3f 	b.w	8026088 <_malloc_r>
 802a20a:	b922      	cbnz	r2, 802a216 <_realloc_r+0x20>
 802a20c:	f7fb feec 	bl	8025fe8 <_free_r>
 802a210:	4625      	mov	r5, r4
 802a212:	4628      	mov	r0, r5
 802a214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a216:	f000 fa2f 	bl	802a678 <_malloc_usable_size_r>
 802a21a:	42a0      	cmp	r0, r4
 802a21c:	d20f      	bcs.n	802a23e <_realloc_r+0x48>
 802a21e:	4621      	mov	r1, r4
 802a220:	4638      	mov	r0, r7
 802a222:	f7fb ff31 	bl	8026088 <_malloc_r>
 802a226:	4605      	mov	r5, r0
 802a228:	2800      	cmp	r0, #0
 802a22a:	d0f2      	beq.n	802a212 <_realloc_r+0x1c>
 802a22c:	4631      	mov	r1, r6
 802a22e:	4622      	mov	r2, r4
 802a230:	f7fb fec4 	bl	8025fbc <memcpy>
 802a234:	4631      	mov	r1, r6
 802a236:	4638      	mov	r0, r7
 802a238:	f7fb fed6 	bl	8025fe8 <_free_r>
 802a23c:	e7e9      	b.n	802a212 <_realloc_r+0x1c>
 802a23e:	4635      	mov	r5, r6
 802a240:	e7e7      	b.n	802a212 <_realloc_r+0x1c>

0802a242 <__ssputs_r>:
 802a242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a246:	688e      	ldr	r6, [r1, #8]
 802a248:	429e      	cmp	r6, r3
 802a24a:	4682      	mov	sl, r0
 802a24c:	460c      	mov	r4, r1
 802a24e:	4690      	mov	r8, r2
 802a250:	461f      	mov	r7, r3
 802a252:	d838      	bhi.n	802a2c6 <__ssputs_r+0x84>
 802a254:	898a      	ldrh	r2, [r1, #12]
 802a256:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802a25a:	d032      	beq.n	802a2c2 <__ssputs_r+0x80>
 802a25c:	6825      	ldr	r5, [r4, #0]
 802a25e:	6909      	ldr	r1, [r1, #16]
 802a260:	eba5 0901 	sub.w	r9, r5, r1
 802a264:	6965      	ldr	r5, [r4, #20]
 802a266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a26a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802a26e:	3301      	adds	r3, #1
 802a270:	444b      	add	r3, r9
 802a272:	106d      	asrs	r5, r5, #1
 802a274:	429d      	cmp	r5, r3
 802a276:	bf38      	it	cc
 802a278:	461d      	movcc	r5, r3
 802a27a:	0553      	lsls	r3, r2, #21
 802a27c:	d531      	bpl.n	802a2e2 <__ssputs_r+0xa0>
 802a27e:	4629      	mov	r1, r5
 802a280:	f7fb ff02 	bl	8026088 <_malloc_r>
 802a284:	4606      	mov	r6, r0
 802a286:	b950      	cbnz	r0, 802a29e <__ssputs_r+0x5c>
 802a288:	230c      	movs	r3, #12
 802a28a:	f8ca 3000 	str.w	r3, [sl]
 802a28e:	89a3      	ldrh	r3, [r4, #12]
 802a290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a294:	81a3      	strh	r3, [r4, #12]
 802a296:	f04f 30ff 	mov.w	r0, #4294967295
 802a29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a29e:	6921      	ldr	r1, [r4, #16]
 802a2a0:	464a      	mov	r2, r9
 802a2a2:	f7fb fe8b 	bl	8025fbc <memcpy>
 802a2a6:	89a3      	ldrh	r3, [r4, #12]
 802a2a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802a2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a2b0:	81a3      	strh	r3, [r4, #12]
 802a2b2:	6126      	str	r6, [r4, #16]
 802a2b4:	6165      	str	r5, [r4, #20]
 802a2b6:	444e      	add	r6, r9
 802a2b8:	eba5 0509 	sub.w	r5, r5, r9
 802a2bc:	6026      	str	r6, [r4, #0]
 802a2be:	60a5      	str	r5, [r4, #8]
 802a2c0:	463e      	mov	r6, r7
 802a2c2:	42be      	cmp	r6, r7
 802a2c4:	d900      	bls.n	802a2c8 <__ssputs_r+0x86>
 802a2c6:	463e      	mov	r6, r7
 802a2c8:	4632      	mov	r2, r6
 802a2ca:	6820      	ldr	r0, [r4, #0]
 802a2cc:	4641      	mov	r1, r8
 802a2ce:	f7ff faa1 	bl	8029814 <memmove>
 802a2d2:	68a3      	ldr	r3, [r4, #8]
 802a2d4:	6822      	ldr	r2, [r4, #0]
 802a2d6:	1b9b      	subs	r3, r3, r6
 802a2d8:	4432      	add	r2, r6
 802a2da:	60a3      	str	r3, [r4, #8]
 802a2dc:	6022      	str	r2, [r4, #0]
 802a2de:	2000      	movs	r0, #0
 802a2e0:	e7db      	b.n	802a29a <__ssputs_r+0x58>
 802a2e2:	462a      	mov	r2, r5
 802a2e4:	f7ff ff87 	bl	802a1f6 <_realloc_r>
 802a2e8:	4606      	mov	r6, r0
 802a2ea:	2800      	cmp	r0, #0
 802a2ec:	d1e1      	bne.n	802a2b2 <__ssputs_r+0x70>
 802a2ee:	6921      	ldr	r1, [r4, #16]
 802a2f0:	4650      	mov	r0, sl
 802a2f2:	f7fb fe79 	bl	8025fe8 <_free_r>
 802a2f6:	e7c7      	b.n	802a288 <__ssputs_r+0x46>

0802a2f8 <_svfiprintf_r>:
 802a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a2fc:	4698      	mov	r8, r3
 802a2fe:	898b      	ldrh	r3, [r1, #12]
 802a300:	061b      	lsls	r3, r3, #24
 802a302:	b09d      	sub	sp, #116	; 0x74
 802a304:	4607      	mov	r7, r0
 802a306:	460d      	mov	r5, r1
 802a308:	4614      	mov	r4, r2
 802a30a:	d50e      	bpl.n	802a32a <_svfiprintf_r+0x32>
 802a30c:	690b      	ldr	r3, [r1, #16]
 802a30e:	b963      	cbnz	r3, 802a32a <_svfiprintf_r+0x32>
 802a310:	2140      	movs	r1, #64	; 0x40
 802a312:	f7fb feb9 	bl	8026088 <_malloc_r>
 802a316:	6028      	str	r0, [r5, #0]
 802a318:	6128      	str	r0, [r5, #16]
 802a31a:	b920      	cbnz	r0, 802a326 <_svfiprintf_r+0x2e>
 802a31c:	230c      	movs	r3, #12
 802a31e:	603b      	str	r3, [r7, #0]
 802a320:	f04f 30ff 	mov.w	r0, #4294967295
 802a324:	e0d1      	b.n	802a4ca <_svfiprintf_r+0x1d2>
 802a326:	2340      	movs	r3, #64	; 0x40
 802a328:	616b      	str	r3, [r5, #20]
 802a32a:	2300      	movs	r3, #0
 802a32c:	9309      	str	r3, [sp, #36]	; 0x24
 802a32e:	2320      	movs	r3, #32
 802a330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a334:	f8cd 800c 	str.w	r8, [sp, #12]
 802a338:	2330      	movs	r3, #48	; 0x30
 802a33a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802a4e4 <_svfiprintf_r+0x1ec>
 802a33e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a342:	f04f 0901 	mov.w	r9, #1
 802a346:	4623      	mov	r3, r4
 802a348:	469a      	mov	sl, r3
 802a34a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a34e:	b10a      	cbz	r2, 802a354 <_svfiprintf_r+0x5c>
 802a350:	2a25      	cmp	r2, #37	; 0x25
 802a352:	d1f9      	bne.n	802a348 <_svfiprintf_r+0x50>
 802a354:	ebba 0b04 	subs.w	fp, sl, r4
 802a358:	d00b      	beq.n	802a372 <_svfiprintf_r+0x7a>
 802a35a:	465b      	mov	r3, fp
 802a35c:	4622      	mov	r2, r4
 802a35e:	4629      	mov	r1, r5
 802a360:	4638      	mov	r0, r7
 802a362:	f7ff ff6e 	bl	802a242 <__ssputs_r>
 802a366:	3001      	adds	r0, #1
 802a368:	f000 80aa 	beq.w	802a4c0 <_svfiprintf_r+0x1c8>
 802a36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a36e:	445a      	add	r2, fp
 802a370:	9209      	str	r2, [sp, #36]	; 0x24
 802a372:	f89a 3000 	ldrb.w	r3, [sl]
 802a376:	2b00      	cmp	r3, #0
 802a378:	f000 80a2 	beq.w	802a4c0 <_svfiprintf_r+0x1c8>
 802a37c:	2300      	movs	r3, #0
 802a37e:	f04f 32ff 	mov.w	r2, #4294967295
 802a382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a386:	f10a 0a01 	add.w	sl, sl, #1
 802a38a:	9304      	str	r3, [sp, #16]
 802a38c:	9307      	str	r3, [sp, #28]
 802a38e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a392:	931a      	str	r3, [sp, #104]	; 0x68
 802a394:	4654      	mov	r4, sl
 802a396:	2205      	movs	r2, #5
 802a398:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a39c:	4851      	ldr	r0, [pc, #324]	; (802a4e4 <_svfiprintf_r+0x1ec>)
 802a39e:	f7d5 ff57 	bl	8000250 <memchr>
 802a3a2:	9a04      	ldr	r2, [sp, #16]
 802a3a4:	b9d8      	cbnz	r0, 802a3de <_svfiprintf_r+0xe6>
 802a3a6:	06d0      	lsls	r0, r2, #27
 802a3a8:	bf44      	itt	mi
 802a3aa:	2320      	movmi	r3, #32
 802a3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a3b0:	0711      	lsls	r1, r2, #28
 802a3b2:	bf44      	itt	mi
 802a3b4:	232b      	movmi	r3, #43	; 0x2b
 802a3b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a3ba:	f89a 3000 	ldrb.w	r3, [sl]
 802a3be:	2b2a      	cmp	r3, #42	; 0x2a
 802a3c0:	d015      	beq.n	802a3ee <_svfiprintf_r+0xf6>
 802a3c2:	9a07      	ldr	r2, [sp, #28]
 802a3c4:	4654      	mov	r4, sl
 802a3c6:	2000      	movs	r0, #0
 802a3c8:	f04f 0c0a 	mov.w	ip, #10
 802a3cc:	4621      	mov	r1, r4
 802a3ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a3d2:	3b30      	subs	r3, #48	; 0x30
 802a3d4:	2b09      	cmp	r3, #9
 802a3d6:	d94e      	bls.n	802a476 <_svfiprintf_r+0x17e>
 802a3d8:	b1b0      	cbz	r0, 802a408 <_svfiprintf_r+0x110>
 802a3da:	9207      	str	r2, [sp, #28]
 802a3dc:	e014      	b.n	802a408 <_svfiprintf_r+0x110>
 802a3de:	eba0 0308 	sub.w	r3, r0, r8
 802a3e2:	fa09 f303 	lsl.w	r3, r9, r3
 802a3e6:	4313      	orrs	r3, r2
 802a3e8:	9304      	str	r3, [sp, #16]
 802a3ea:	46a2      	mov	sl, r4
 802a3ec:	e7d2      	b.n	802a394 <_svfiprintf_r+0x9c>
 802a3ee:	9b03      	ldr	r3, [sp, #12]
 802a3f0:	1d19      	adds	r1, r3, #4
 802a3f2:	681b      	ldr	r3, [r3, #0]
 802a3f4:	9103      	str	r1, [sp, #12]
 802a3f6:	2b00      	cmp	r3, #0
 802a3f8:	bfbb      	ittet	lt
 802a3fa:	425b      	neglt	r3, r3
 802a3fc:	f042 0202 	orrlt.w	r2, r2, #2
 802a400:	9307      	strge	r3, [sp, #28]
 802a402:	9307      	strlt	r3, [sp, #28]
 802a404:	bfb8      	it	lt
 802a406:	9204      	strlt	r2, [sp, #16]
 802a408:	7823      	ldrb	r3, [r4, #0]
 802a40a:	2b2e      	cmp	r3, #46	; 0x2e
 802a40c:	d10c      	bne.n	802a428 <_svfiprintf_r+0x130>
 802a40e:	7863      	ldrb	r3, [r4, #1]
 802a410:	2b2a      	cmp	r3, #42	; 0x2a
 802a412:	d135      	bne.n	802a480 <_svfiprintf_r+0x188>
 802a414:	9b03      	ldr	r3, [sp, #12]
 802a416:	1d1a      	adds	r2, r3, #4
 802a418:	681b      	ldr	r3, [r3, #0]
 802a41a:	9203      	str	r2, [sp, #12]
 802a41c:	2b00      	cmp	r3, #0
 802a41e:	bfb8      	it	lt
 802a420:	f04f 33ff 	movlt.w	r3, #4294967295
 802a424:	3402      	adds	r4, #2
 802a426:	9305      	str	r3, [sp, #20]
 802a428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802a4f4 <_svfiprintf_r+0x1fc>
 802a42c:	7821      	ldrb	r1, [r4, #0]
 802a42e:	2203      	movs	r2, #3
 802a430:	4650      	mov	r0, sl
 802a432:	f7d5 ff0d 	bl	8000250 <memchr>
 802a436:	b140      	cbz	r0, 802a44a <_svfiprintf_r+0x152>
 802a438:	2340      	movs	r3, #64	; 0x40
 802a43a:	eba0 000a 	sub.w	r0, r0, sl
 802a43e:	fa03 f000 	lsl.w	r0, r3, r0
 802a442:	9b04      	ldr	r3, [sp, #16]
 802a444:	4303      	orrs	r3, r0
 802a446:	3401      	adds	r4, #1
 802a448:	9304      	str	r3, [sp, #16]
 802a44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a44e:	4826      	ldr	r0, [pc, #152]	; (802a4e8 <_svfiprintf_r+0x1f0>)
 802a450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a454:	2206      	movs	r2, #6
 802a456:	f7d5 fefb 	bl	8000250 <memchr>
 802a45a:	2800      	cmp	r0, #0
 802a45c:	d038      	beq.n	802a4d0 <_svfiprintf_r+0x1d8>
 802a45e:	4b23      	ldr	r3, [pc, #140]	; (802a4ec <_svfiprintf_r+0x1f4>)
 802a460:	bb1b      	cbnz	r3, 802a4aa <_svfiprintf_r+0x1b2>
 802a462:	9b03      	ldr	r3, [sp, #12]
 802a464:	3307      	adds	r3, #7
 802a466:	f023 0307 	bic.w	r3, r3, #7
 802a46a:	3308      	adds	r3, #8
 802a46c:	9303      	str	r3, [sp, #12]
 802a46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a470:	4433      	add	r3, r6
 802a472:	9309      	str	r3, [sp, #36]	; 0x24
 802a474:	e767      	b.n	802a346 <_svfiprintf_r+0x4e>
 802a476:	fb0c 3202 	mla	r2, ip, r2, r3
 802a47a:	460c      	mov	r4, r1
 802a47c:	2001      	movs	r0, #1
 802a47e:	e7a5      	b.n	802a3cc <_svfiprintf_r+0xd4>
 802a480:	2300      	movs	r3, #0
 802a482:	3401      	adds	r4, #1
 802a484:	9305      	str	r3, [sp, #20]
 802a486:	4619      	mov	r1, r3
 802a488:	f04f 0c0a 	mov.w	ip, #10
 802a48c:	4620      	mov	r0, r4
 802a48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a492:	3a30      	subs	r2, #48	; 0x30
 802a494:	2a09      	cmp	r2, #9
 802a496:	d903      	bls.n	802a4a0 <_svfiprintf_r+0x1a8>
 802a498:	2b00      	cmp	r3, #0
 802a49a:	d0c5      	beq.n	802a428 <_svfiprintf_r+0x130>
 802a49c:	9105      	str	r1, [sp, #20]
 802a49e:	e7c3      	b.n	802a428 <_svfiprintf_r+0x130>
 802a4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 802a4a4:	4604      	mov	r4, r0
 802a4a6:	2301      	movs	r3, #1
 802a4a8:	e7f0      	b.n	802a48c <_svfiprintf_r+0x194>
 802a4aa:	ab03      	add	r3, sp, #12
 802a4ac:	9300      	str	r3, [sp, #0]
 802a4ae:	462a      	mov	r2, r5
 802a4b0:	4b0f      	ldr	r3, [pc, #60]	; (802a4f0 <_svfiprintf_r+0x1f8>)
 802a4b2:	a904      	add	r1, sp, #16
 802a4b4:	4638      	mov	r0, r7
 802a4b6:	f7fc f82b 	bl	8026510 <_printf_float>
 802a4ba:	1c42      	adds	r2, r0, #1
 802a4bc:	4606      	mov	r6, r0
 802a4be:	d1d6      	bne.n	802a46e <_svfiprintf_r+0x176>
 802a4c0:	89ab      	ldrh	r3, [r5, #12]
 802a4c2:	065b      	lsls	r3, r3, #25
 802a4c4:	f53f af2c 	bmi.w	802a320 <_svfiprintf_r+0x28>
 802a4c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a4ca:	b01d      	add	sp, #116	; 0x74
 802a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a4d0:	ab03      	add	r3, sp, #12
 802a4d2:	9300      	str	r3, [sp, #0]
 802a4d4:	462a      	mov	r2, r5
 802a4d6:	4b06      	ldr	r3, [pc, #24]	; (802a4f0 <_svfiprintf_r+0x1f8>)
 802a4d8:	a904      	add	r1, sp, #16
 802a4da:	4638      	mov	r0, r7
 802a4dc:	f7fc faa4 	bl	8026a28 <_printf_i>
 802a4e0:	e7eb      	b.n	802a4ba <_svfiprintf_r+0x1c2>
 802a4e2:	bf00      	nop
 802a4e4:	0802e924 	.word	0x0802e924
 802a4e8:	0802e92e 	.word	0x0802e92e
 802a4ec:	08026511 	.word	0x08026511
 802a4f0:	0802a243 	.word	0x0802a243
 802a4f4:	0802e92a 	.word	0x0802e92a

0802a4f8 <nan>:
 802a4f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802a500 <nan+0x8>
 802a4fc:	4770      	bx	lr
 802a4fe:	bf00      	nop
 802a500:	00000000 	.word	0x00000000
 802a504:	7ff80000 	.word	0x7ff80000

0802a508 <__sread>:
 802a508:	b510      	push	{r4, lr}
 802a50a:	460c      	mov	r4, r1
 802a50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a510:	f000 f8ba 	bl	802a688 <_read_r>
 802a514:	2800      	cmp	r0, #0
 802a516:	bfab      	itete	ge
 802a518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a51a:	89a3      	ldrhlt	r3, [r4, #12]
 802a51c:	181b      	addge	r3, r3, r0
 802a51e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a522:	bfac      	ite	ge
 802a524:	6563      	strge	r3, [r4, #84]	; 0x54
 802a526:	81a3      	strhlt	r3, [r4, #12]
 802a528:	bd10      	pop	{r4, pc}

0802a52a <__swrite>:
 802a52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a52e:	461f      	mov	r7, r3
 802a530:	898b      	ldrh	r3, [r1, #12]
 802a532:	05db      	lsls	r3, r3, #23
 802a534:	4605      	mov	r5, r0
 802a536:	460c      	mov	r4, r1
 802a538:	4616      	mov	r6, r2
 802a53a:	d505      	bpl.n	802a548 <__swrite+0x1e>
 802a53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a540:	2302      	movs	r3, #2
 802a542:	2200      	movs	r2, #0
 802a544:	f000 f886 	bl	802a654 <_lseek_r>
 802a548:	89a3      	ldrh	r3, [r4, #12]
 802a54a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a54e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a552:	81a3      	strh	r3, [r4, #12]
 802a554:	4632      	mov	r2, r6
 802a556:	463b      	mov	r3, r7
 802a558:	4628      	mov	r0, r5
 802a55a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a55e:	f000 b835 	b.w	802a5cc <_write_r>

0802a562 <__sseek>:
 802a562:	b510      	push	{r4, lr}
 802a564:	460c      	mov	r4, r1
 802a566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a56a:	f000 f873 	bl	802a654 <_lseek_r>
 802a56e:	1c43      	adds	r3, r0, #1
 802a570:	89a3      	ldrh	r3, [r4, #12]
 802a572:	bf15      	itete	ne
 802a574:	6560      	strne	r0, [r4, #84]	; 0x54
 802a576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a57a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a57e:	81a3      	strheq	r3, [r4, #12]
 802a580:	bf18      	it	ne
 802a582:	81a3      	strhne	r3, [r4, #12]
 802a584:	bd10      	pop	{r4, pc}

0802a586 <__sclose>:
 802a586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a58a:	f000 b831 	b.w	802a5f0 <_close_r>

0802a58e <strncmp>:
 802a58e:	b510      	push	{r4, lr}
 802a590:	b16a      	cbz	r2, 802a5ae <strncmp+0x20>
 802a592:	3901      	subs	r1, #1
 802a594:	1884      	adds	r4, r0, r2
 802a596:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a59a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802a59e:	4293      	cmp	r3, r2
 802a5a0:	d103      	bne.n	802a5aa <strncmp+0x1c>
 802a5a2:	42a0      	cmp	r0, r4
 802a5a4:	d001      	beq.n	802a5aa <strncmp+0x1c>
 802a5a6:	2b00      	cmp	r3, #0
 802a5a8:	d1f5      	bne.n	802a596 <strncmp+0x8>
 802a5aa:	1a98      	subs	r0, r3, r2
 802a5ac:	bd10      	pop	{r4, pc}
 802a5ae:	4610      	mov	r0, r2
 802a5b0:	e7fc      	b.n	802a5ac <strncmp+0x1e>

0802a5b2 <__ascii_wctomb>:
 802a5b2:	b149      	cbz	r1, 802a5c8 <__ascii_wctomb+0x16>
 802a5b4:	2aff      	cmp	r2, #255	; 0xff
 802a5b6:	bf85      	ittet	hi
 802a5b8:	238a      	movhi	r3, #138	; 0x8a
 802a5ba:	6003      	strhi	r3, [r0, #0]
 802a5bc:	700a      	strbls	r2, [r1, #0]
 802a5be:	f04f 30ff 	movhi.w	r0, #4294967295
 802a5c2:	bf98      	it	ls
 802a5c4:	2001      	movls	r0, #1
 802a5c6:	4770      	bx	lr
 802a5c8:	4608      	mov	r0, r1
 802a5ca:	4770      	bx	lr

0802a5cc <_write_r>:
 802a5cc:	b538      	push	{r3, r4, r5, lr}
 802a5ce:	4d07      	ldr	r5, [pc, #28]	; (802a5ec <_write_r+0x20>)
 802a5d0:	4604      	mov	r4, r0
 802a5d2:	4608      	mov	r0, r1
 802a5d4:	4611      	mov	r1, r2
 802a5d6:	2200      	movs	r2, #0
 802a5d8:	602a      	str	r2, [r5, #0]
 802a5da:	461a      	mov	r2, r3
 802a5dc:	f7d8 faf3 	bl	8002bc6 <_write>
 802a5e0:	1c43      	adds	r3, r0, #1
 802a5e2:	d102      	bne.n	802a5ea <_write_r+0x1e>
 802a5e4:	682b      	ldr	r3, [r5, #0]
 802a5e6:	b103      	cbz	r3, 802a5ea <_write_r+0x1e>
 802a5e8:	6023      	str	r3, [r4, #0]
 802a5ea:	bd38      	pop	{r3, r4, r5, pc}
 802a5ec:	20057100 	.word	0x20057100

0802a5f0 <_close_r>:
 802a5f0:	b538      	push	{r3, r4, r5, lr}
 802a5f2:	4d06      	ldr	r5, [pc, #24]	; (802a60c <_close_r+0x1c>)
 802a5f4:	2300      	movs	r3, #0
 802a5f6:	4604      	mov	r4, r0
 802a5f8:	4608      	mov	r0, r1
 802a5fa:	602b      	str	r3, [r5, #0]
 802a5fc:	f7d8 faff 	bl	8002bfe <_close>
 802a600:	1c43      	adds	r3, r0, #1
 802a602:	d102      	bne.n	802a60a <_close_r+0x1a>
 802a604:	682b      	ldr	r3, [r5, #0]
 802a606:	b103      	cbz	r3, 802a60a <_close_r+0x1a>
 802a608:	6023      	str	r3, [r4, #0]
 802a60a:	bd38      	pop	{r3, r4, r5, pc}
 802a60c:	20057100 	.word	0x20057100

0802a610 <_fstat_r>:
 802a610:	b538      	push	{r3, r4, r5, lr}
 802a612:	4d07      	ldr	r5, [pc, #28]	; (802a630 <_fstat_r+0x20>)
 802a614:	2300      	movs	r3, #0
 802a616:	4604      	mov	r4, r0
 802a618:	4608      	mov	r0, r1
 802a61a:	4611      	mov	r1, r2
 802a61c:	602b      	str	r3, [r5, #0]
 802a61e:	f7d8 fafa 	bl	8002c16 <_fstat>
 802a622:	1c43      	adds	r3, r0, #1
 802a624:	d102      	bne.n	802a62c <_fstat_r+0x1c>
 802a626:	682b      	ldr	r3, [r5, #0]
 802a628:	b103      	cbz	r3, 802a62c <_fstat_r+0x1c>
 802a62a:	6023      	str	r3, [r4, #0]
 802a62c:	bd38      	pop	{r3, r4, r5, pc}
 802a62e:	bf00      	nop
 802a630:	20057100 	.word	0x20057100

0802a634 <_isatty_r>:
 802a634:	b538      	push	{r3, r4, r5, lr}
 802a636:	4d06      	ldr	r5, [pc, #24]	; (802a650 <_isatty_r+0x1c>)
 802a638:	2300      	movs	r3, #0
 802a63a:	4604      	mov	r4, r0
 802a63c:	4608      	mov	r0, r1
 802a63e:	602b      	str	r3, [r5, #0]
 802a640:	f7d8 faf9 	bl	8002c36 <_isatty>
 802a644:	1c43      	adds	r3, r0, #1
 802a646:	d102      	bne.n	802a64e <_isatty_r+0x1a>
 802a648:	682b      	ldr	r3, [r5, #0]
 802a64a:	b103      	cbz	r3, 802a64e <_isatty_r+0x1a>
 802a64c:	6023      	str	r3, [r4, #0]
 802a64e:	bd38      	pop	{r3, r4, r5, pc}
 802a650:	20057100 	.word	0x20057100

0802a654 <_lseek_r>:
 802a654:	b538      	push	{r3, r4, r5, lr}
 802a656:	4d07      	ldr	r5, [pc, #28]	; (802a674 <_lseek_r+0x20>)
 802a658:	4604      	mov	r4, r0
 802a65a:	4608      	mov	r0, r1
 802a65c:	4611      	mov	r1, r2
 802a65e:	2200      	movs	r2, #0
 802a660:	602a      	str	r2, [r5, #0]
 802a662:	461a      	mov	r2, r3
 802a664:	f7d8 faf2 	bl	8002c4c <_lseek>
 802a668:	1c43      	adds	r3, r0, #1
 802a66a:	d102      	bne.n	802a672 <_lseek_r+0x1e>
 802a66c:	682b      	ldr	r3, [r5, #0]
 802a66e:	b103      	cbz	r3, 802a672 <_lseek_r+0x1e>
 802a670:	6023      	str	r3, [r4, #0]
 802a672:	bd38      	pop	{r3, r4, r5, pc}
 802a674:	20057100 	.word	0x20057100

0802a678 <_malloc_usable_size_r>:
 802a678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a67c:	1f18      	subs	r0, r3, #4
 802a67e:	2b00      	cmp	r3, #0
 802a680:	bfbc      	itt	lt
 802a682:	580b      	ldrlt	r3, [r1, r0]
 802a684:	18c0      	addlt	r0, r0, r3
 802a686:	4770      	bx	lr

0802a688 <_read_r>:
 802a688:	b538      	push	{r3, r4, r5, lr}
 802a68a:	4d07      	ldr	r5, [pc, #28]	; (802a6a8 <_read_r+0x20>)
 802a68c:	4604      	mov	r4, r0
 802a68e:	4608      	mov	r0, r1
 802a690:	4611      	mov	r1, r2
 802a692:	2200      	movs	r2, #0
 802a694:	602a      	str	r2, [r5, #0]
 802a696:	461a      	mov	r2, r3
 802a698:	f7d8 fa78 	bl	8002b8c <_read>
 802a69c:	1c43      	adds	r3, r0, #1
 802a69e:	d102      	bne.n	802a6a6 <_read_r+0x1e>
 802a6a0:	682b      	ldr	r3, [r5, #0]
 802a6a2:	b103      	cbz	r3, 802a6a6 <_read_r+0x1e>
 802a6a4:	6023      	str	r3, [r4, #0]
 802a6a6:	bd38      	pop	{r3, r4, r5, pc}
 802a6a8:	20057100 	.word	0x20057100

0802a6ac <_init>:
 802a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a6ae:	bf00      	nop
 802a6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a6b2:	bc08      	pop	{r3}
 802a6b4:	469e      	mov	lr, r3
 802a6b6:	4770      	bx	lr

0802a6b8 <_fini>:
 802a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a6ba:	bf00      	nop
 802a6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a6be:	bc08      	pop	{r3}
 802a6c0:	469e      	mov	lr, r3
 802a6c2:	4770      	bx	lr
